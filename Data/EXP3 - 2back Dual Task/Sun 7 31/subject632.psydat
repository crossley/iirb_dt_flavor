ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject632
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 632
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
Vf
sS'age'
p31
V20
p32
ssS'loopsUnfinished'
p33
(lp34
g1
(cpsychopy.data
TrialHandler
p35
g3
NtRp36
(dp37
S'origin'
p38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p39
sS'thisTrial'
p40
I9
sS'_exp'
p41
I75479600
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p42
sS'thisRepN'
p43
I39
sg27
I01
sg28
NsS'data'
p44
g1
(cpsychopy.data
DataHandler
p45
c__builtin__
dict
p46
(dp47
S'ran'
p48
cnumpy.ma.core
_mareconstruct
p49
(cnumpy.ma.core
MaskedArray
p50
cnumpy
ndarray
p51
(I0
tp52
S'b'
tRp53
(I1
(I15
I40
tcnumpy
dtype
p54
(S'f4'
I0
I1
tRp55
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p56
g49
(g50
g51
g52
S'b'
tRp57
(I1
(I15
I40
tg55
I00
S'\x00\x00\x00@\x00\x00\x1cB\x00\x00\xb6B\x00\x00\xdaB\x00\x00\xecB\x00\x00\x00C\x00\x00\x07C\x00\x00\x0cC\x00\x007C\x00\x00TC\x00\x00jC\x00\x00yC\x00\x80\x81C\x00\x00\x82C\x00\x80\x8fC\x00\x80\x92C\x00\x80\x97C\x00\x00\x9cC\x00\x00\x9eC\x00\x80\xa1C\x00\x80\xaeC\x00\x00\xb0C\x00\x80\xb7C\x00\x80\xbdC\x00\x80\xc0C\x00\x80\xc1C\x00\x80\xd1C\x00\x00\xe1C\x00\x00\xe7C\x00\x80\xe8C\x00\x00\xedC\x00\x00\xf1C\x00\x00\xf9C\x00\x80\x00D\x00@\x04D\x00@\x08D\x00@\nD\x00\x80\rD\x00\xc0\rD\x00\x00\x14D\x00\x00\x80?\x00\x00@@\x00\x00\xe0@\x00\x00\x04B\x00\x00`B\x00\x00lB\x00\x00\xb2B\x00\x00\xdeB\x00\x00\xeaB\x00\x00\x03C\x00\x00\x12C\x00\x00\x1eC\x00\x00GC\x00\x00QC\x00\x00SC\x00\x00WC\x00\x00XC\x00\x00eC\x00\x00mC\x00\x80\x8dC\x00\x00\x94C\x00\x00\xa5C\x00\x00\xaaC\x00\x00\xabC\x00\x80\xbaC\x00\x80\xbeC\x00\x00\xc0C\x00\x00\xc7C\x00\x80\xcdC\x00\x80\xdaC\x00\x80\xdcC\x00\x00\xecC\x00\x00\xf0C\x00\x80\xf5C\x00@\x00D\x00\x80\x01D\x00\x80\tD\x00\x00\rD\x00\x00\x12D\x00\x00\x15D\x00\x00\x88A\x00\x00\xd8A\x00\x00$B\x00\x00\x96B\x00\x00\xaeB\x00\x00\xc0B\x00\x00\xd2B\x00\x00\xf0B\x00\x004C\x00\x00HC\x00\x00NC\x00\x00`C\x00\x00vC\x00\x00xC\x00\x00}C\x00\x00\x90C\x00\x00\x97C\x00\x00\x9bC\x00\x00\x9fC\x00\x80\xa6C\x00\x00\xa8C\x00\x80\xadC\x00\x00\xb3C\x00\x00\xb6C\x00\x00\xc2C\x00\x00\xcaC\x00\x80\xcbC\x00\x00\xd0C\x00\x00\xd2C\x00\x80\xd2C\x00\x00\xe9C\x00\x80\xf3C\x00\x80\xf7C\x00\x80\xf9C\x00\x00\xfcC\x00\x00\x02D\x00@\x0cD\x00\x80\x0eD\x00\xc0\x13D\x00\xc0\x14D\x00\x00@A\x00\x00`A\x00\x00\x80B\x00\x00\x8aB\x00\x00\xa8B\x00\x00\xacB\x00\x00\xb0B\x00\x00\xccB\x00\x00\xd6B\x00\x00\xfeB\x00\x00\tC\x00\x00\x0eC\x00\x00\x15C\x00\x00\x1bC\x00\x00\x1cC\x00\x00$C\x00\x002C\x00\x005C\x00\x00>C\x00\x00@C\x00\x00LC\x00\x00MC\x00\x00UC\x00\x00lC\x00\x00\x80C\x00\x80\x82C\x00\x80\x91C\x00\x80\x95C\x00\x00\xbaC\x00\x00\xc3C\x00\x00\xc4C\x00\x80\xc4C\x00\x00\xd1C\x00\x80\xd6C\x00\x80\xfdC\x00@\x03D\x00\x00\nD\x00\xc0\x0bD\x00@\rD\x00\x80\x11D\x00\x00\x10A\x00\x000A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xf0A\x00\x00 B\x00\x00HB\x00\x00\xa6B\x00\x00\xb8B\x00\x00\xc4B\x00\x00\xeeB\x00\x00\x06C\x00\x00\rC\x00\x00\x16C\x00\x00/C\x00\x00?C\x00\x00DC\x00\x00oC\x00\x00sC\x00\x00\x81C\x00\x80\x86C\x00\x80\x89C\x00\x00\x8bC\x00\x00\x8cC\x00\x80\x98C\x00\x80\x99C\x00\x00\x9dC\x00\x00\xa0C\x00\x00\xb5C\x00\x00\xbbC\x00\x00\xc9C\x00\x80\xd4C\x00\x00\xdbC\x00\x80\xf0C\x00\x80\xf2C\x00\x00\xf6C\x00\xc0\x04D\x00\x00\x08D\x00\xc0\x0eD\x00\x00\x13D\x00\x00\x80A\x00\x00\xc8A\x00\x00\x18B\x00\x00pB\x00\x00|B\x00\x00\x84B\x00\x00\x9cB\x00\x00\xe4B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\x08C\x00\x00\x14C\x00\x00*C\x00\x00.C\x00\x00iC\x00\x00pC\x00\x00{C\x00\x00\x87C\x00\x00\x89C\x00\x80\x9dC\x00\x80\xa8C\x00\x00\xaeC\x00\x00\xafC\x00\x80\xb3C\x00\x80\xb9C\x00\x00\xc8C\x00\x80\xdbC\x00\x80\xdfC\x00\x00\xeaC\x00\x80\xebC\x00\x80\xf4C\x00\x80\xfcC\x00\x80\xfeC\x00\xc0\x03D\x00\x80\x04D\x00\x80\nD\x00\x80\x0bD\x00\xc0\x0cD\x00\x80\x13D\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\x10B\x00\x00\x14B\x00\x00\x90B\x00\x00\xa0B\x00\x00\xd8B\x00\x00\x05C\x00\x00-C\x00\x00CC\x00\x00FC\x00\x00\\C\x00\x00]C\x00\x00^C\x00\x00gC\x00\x00\x7fC\x00\x00\x86C\x00\x00\x8eC\x00\x00\x99C\x00\x80\xa2C\x00\x80\xabC\x00\x80\xb4C\x00\x00\xbcC\x00\x80\xcfC\x00\x00\xdcC\x00\x80\xe1C\x00\x80\xe2C\x00\x80\xe4C\x00\x80\xe7C\x00\x80\xf6C\x00\x00\xf7C\x00\x00\xfdC\x00\x00\x01D\x00@\x01D\x00\x80\x08D\x00\x80\x0cD\x00\x80\x10D\x00\x80\x14D\x00@\x15D\x00\x00\xe8A\x00\x00\x0cB\x00\x00\\B\x00\x00\x8cB\x00\x00\xa4B\x00\x00\xbaB\x00\x00\xbeB\x00\x00\xd4B\x00\x00\xe8B\x00\x00\xfcB\x00\x00\x02C\x00\x00\x10C\x00\x00!C\x00\x00+C\x00\x00;C\x00\x00=C\x00\x00dC\x00\x00qC\x00\x00\x83C\x00\x00\x8aC\x00\x00\x93C\x00\x00\x96C\x00\x00\x9aC\x00\x00\xa2C\x00\x80\xb0C\x00\x00\xb9C\x00\x80\xc9C\x00\x80\xd5C\x00\x80\xd8C\x00\x00\xd9C\x00\x00\xe5C\x00\x80\xe6C\x00\xc0\x02D\x00@\x05D\x00\xc0\x07D\x00@\tD\x00@\x0fD\x00\x00\x10D\x00\xc0\x10D\x00@\x13D\x00\x00\x80@\x00\x00\x90A\x00\x00\x08B\x00\x00LB\x00\x00TB\x00\x00tB\x00\x00xB\x00\x00\x86B\x00\x00\x88B\x00\x00\x92B\x00\x00\xb4B\x00\x00\nC\x00\x00\x0fC\x00\x00\x11C\x00\x00,C\x00\x00:C\x00\x00IC\x00\x00KC\x00\x00RC\x00\x00fC\x00\x80\x87C\x00\x80\x90C\x00\x80\xa0C\x00\x00\xa3C\x00\x80\xafC\x00\x00\xb4C\x00\x80\xb8C\x00\x80\xc2C\x00\x00\xccC\x00\x00\xcdC\x00\x80\xe3C\x00\x00\x00D\x00\xc0\x01D\x00\x80\x03D\x00\x00\x04D\x00\x00\x05D\x00\x00\tD\x00\xc0\nD\x00\x00\x0eD\x00\xc0\x12D\x00\x00\xe0A\x00\x000B\x00\x00<B\x00\x00\x9eB\x00\x00\x1fC\x00\x00)C\x00\x009C\x00\x00kC\x00\x00rC\x00\x00zC\x00\x80\x83C\x00\x80\x84C\x00\x00\x85C\x00\x80\x88C\x00\x00\x92C\x00\x80\x9fC\x00\x00\xa1C\x00\x80\xa7C\x00\x00\xa9C\x00\x80\xa9C\x00\x00\xacC\x00\x80\xacC\x00\x80\xb5C\x00\x00\xb8C\x00\x80\xbbC\x00\x00\xcbC\x00\x00\xd5C\x00\x00\xd6C\x00\x80\xe5C\x00\x00\xebC\x00\x80\xeeC\x00\x00\xf4C\x00\x80\xfaC\x00@\x02D\x00\x00\x0bD\x00\x00\x0cD\x00\x00\x0fD\x00\x00\x11D\x00@\x14D\x00\xc0\x15D\x00\x00(B\x00\x00,B\x00\x00dB\x00\x00\x9aB\x00\x00\xbcB\x00\x00\xfaB\x00\x00\x04C\x00\x00\x13C\x00\x00\x17C\x00\x00"C\x00\x00\'C\x00\x006C\x00\x00AC\x00\x00BC\x00\x00EC\x00\x00ZC\x00\x00[C\x00\x00\x8dC\x00\x80\x93C\x00\x80\x94C\x00\x80\x9bC\x00\x80\x9eC\x00\x80\xb6C\x00\x00\xc1C\x00\x80\xc5C\x00\x80\xccC\x00\x80\xceC\x00\x80\xd7C\x00\x00\xd8C\x00\x00\xdaC\x00\x00\xddC\x00\x80\xf1C\x00\x80\xfbC\x00\x00\xfeC\x00\x80\xffC\x00\x80\x02D\x00\x00\x06D\x00\x80\x06D\x00\x80\x07D\x00@\x0eD\x00\x00XB\x00\x00hB\x00\x00\x8eB\x00\x00\xaaB\x00\x00\xd0B\x00\x00\xdcB\x00\x00\xf8B\x00\x00\x01C\x00\x00 C\x00\x00#C\x00\x00%C\x00\x008C\x00\x00_C\x00\x00aC\x00\x00tC\x00\x00wC\x00\x80\x80C\x00\x80\x85C\x00\x80\x8aC\x00\x80\x8cC\x00\x00\x91C\x00\x00\x98C\x00\x80\x9aC\x00\x00\xadC\x00\x00\xb7C\x00\x80\xbcC\x00\x00\xc5C\x00\x80\xc7C\x00\x80\xd0C\x00\x00\xd7C\x00\x00\xdeC\x00\x00\xefC\x00\x80\xefC\x00\x00\xfbC\x00\x80\x05D\x00@\x07D\x00\xc0\x08D\x00\x80\x0fD\x00\xc0\x0fD\x00\xc0\x11D\x00\x00\x00A\x00\x00 A\x00\x00PA\x00\x00pA\x00\x00\xd0A\x00\x00\xf8A\x00\x004B\x00\x00\x82B\x00\x00\x98B\x00\x00\xe6B\x00\x00\x1aC\x00\x00(C\x00\x000C\x00\x00PC\x00\x00bC\x00\x00\x84C\x00\x00\x88C\x00\x80\x8eC\x00\x00\x95C\x00\x80\x9cC\x00\x80\xa3C\x00\x80\xa4C\x00\x00\xa7C\x00\x80\xaaC\x00\x80\xb1C\x00\x80\xcaC\x00\x80\xd3C\x00\x80\xddC\x00\x80\xdeC\x00\x00\xe0C\x00\x80\xe0C\x00\x00\xe3C\x00\x80\xe9C\x00\x80\xecC\x00\x00\xf2C\x00\xc0\x00D\x00\xc0\x06D\x00@\x10D\x00@\x12D\x00\x80\x15D\x00\x00\x00B\x00\x008B\x00\x00@B\x00\x00\x94B\x00\x00\xa2B\x00\x00\xc2B\x00\x00\xceB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\x0bC\x00\x00\x18C\x00\x001C\x00\x00<C\x00\x00cC\x00\x00hC\x00\x00uC\x00\x00~C\x00\x00\x8fC\x00\x80\x96C\x00\x00\xb1C\x00\x00\xb2C\x00\x80\xb2C\x00\x00\xbdC\x00\x00\xbeC\x00\x80\xbfC\x00\x80\xc6C\x00\x80\xc8C\x00\x00\xd4C\x00\x80\xd9C\x00\x00\xdfC\x00\x00\xe2C\x00\x00\xe6C\x00\x80\xeaC\x00\x80\xedC\x00\x80\xf8C\x00\x00\x03D\x00@\x06D\x00\x00\x07D\x00@\x11D\x00\x80\x12D\x00\x00\x00\x00\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xb0A\x00\x00DB\x00\x00PB\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\x19C\x00\x00\x1dC\x00\x00&C\x00\x003C\x00\x00JC\x00\x00OC\x00\x00VC\x00\x00YC\x00\x00nC\x00\x00|C\x00\x80\x8bC\x00\x00\xa4C\x00\x80\xa5C\x00\x00\xa6C\x00\x00\xbfC\x00\x80\xc3C\x00\x00\xc6C\x00\x00\xceC\x00\x00\xcfC\x00\x00\xd3C\x00\x00\xe4C\x00\x00\xe8C\x00\x00\xeeC\x00\x00\xf3C\x00\x00\xf5C\x00\x00\xf8C\x00\x00\xfaC\x00\x00\xffC\x00\xc0\x05D\x00\xc0\tD\x00@\x0bD'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp58
(dp59
S'isNumeric'
p60
(dp61
g48
I01
sg56
I01
ssS'trials'
p62
g36
sS'dataTypes'
p63
(lp64
g48
ag56
asS'dataShape'
p65
(lp66
I15
aI40
asbsS'method'
p67
S'fullRandom'
p68
sS'sequenceIndices'
p69
cnumpy.core.multiarray
_reconstruct
p70
(g51
(I0
tS'b'
tRp71
(I1
(I15
I40
tg54
(S'O4'
I0
I1
tRp72
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp73
I14
aI12
aI4
aI12
aI5
aI2
aI8
aI2
aI2
aI0
aI4
aI11
aI2
aI6
aI8
aI11
aI5
aI6
aI5
aI12
aI7
aI5
aI1
aI9
aI8
aI9
aI3
aI12
aI2
aI13
aI0
aI0
aI1
aI2
aI14
aI3
aI13
aI8
aI2
aI12
aI1
aI5
aI12
aI13
aI8
aI12
aI0
aI7
aI5
aI5
aI10
aI14
aI3
aI4
aI1
aI12
aI7
aI3
aI8
aI13
aI13
aI0
aI14
aI11
aI6
aI6
aI14
aI9
aI2
aI10
aI6
aI2
aI4
aI14
aI10
aI8
aI11
aI9
aI4
aI13
aI0
aI2
aI13
aI9
aI8
aI10
aI4
aI3
aI5
aI3
aI13
aI10
aI10
aI10
aI0
aI13
aI9
aI11
aI12
aI0
aI2
aI10
aI14
aI2
aI4
aI11
aI3
aI2
aI14
aI1
aI13
aI12
aI0
aI13
aI8
aI5
aI10
aI14
aI9
aI8
aI1
aI8
aI1
aI13
aI5
aI5
aI7
aI6
aI5
aI8
aI14
aI12
aI0
aI6
aI3
aI7
aI4
aI4
aI9
aI2
aI0
aI2
aI2
aI5
aI9
aI13
aI3
aI8
aI12
aI4
aI6
aI5
aI10
aI0
aI1
aI8
aI7
aI5
aI7
aI4
aI8
aI6
aI8
aI14
aI3
aI9
aI10
aI0
aI11
aI13
aI12
aI9
aI11
aI1
aI14
aI1
aI11
aI0
aI5
aI8
aI11
aI9
aI12
aI0
aI2
aI0
aI11
aI10
aI13
aI5
aI12
aI13
aI12
aI2
aI0
aI0
aI4
aI3
aI11
aI7
aI14
aI6
aI7
aI4
aI12
aI6
aI7
aI11
aI10
aI0
aI3
aI5
aI9
aI2
aI1
aI8
aI13
aI0
aI4
aI11
aI4
aI4
aI9
aI5
aI10
aI13
aI10
aI8
aI4
aI6
aI8
aI9
aI4
aI14
aI12
aI5
aI0
aI9
aI11
aI5
aI14
aI6
aI6
aI8
aI5
aI13
aI2
aI1
aI7
aI4
aI3
aI7
aI8
aI8
aI1
aI6
aI2
aI3
aI7
aI3
aI6
aI8
aI2
aI8
aI11
aI1
aI14
aI1
aI9
aI1
aI14
aI5
aI14
aI9
aI6
aI4
aI6
aI2
aI7
aI2
aI1
aI14
aI6
aI14
aI8
aI7
aI13
aI13
aI3
aI3
aI14
aI8
aI7
aI14
aI14
aI13
aI11
aI7
aI11
aI9
aI4
aI9
aI5
aI0
aI0
aI14
aI13
aI14
aI7
aI10
aI6
aI1
aI2
aI11
aI6
aI8
aI11
aI6
aI12
aI0
aI12
aI4
aI5
aI8
aI8
aI4
aI4
aI13
aI0
aI8
aI1
aI6
aI13
aI8
aI10
aI5
aI2
aI9
aI4
aI0
aI7
aI0
aI9
aI7
aI9
aI13
aI1
aI10
aI9
aI12
aI7
aI12
aI9
aI10
aI1
aI7
aI8
aI5
aI6
aI9
aI4
aI4
aI0
aI11
aI3
aI3
aI14
aI5
aI11
aI7
aI9
aI5
aI7
aI3
aI10
aI0
aI0
aI12
aI14
aI7
aI11
aI7
aI9
aI13
aI8
aI1
aI11
aI14
aI3
aI11
aI9
aI0
aI5
aI2
aI8
aI11
aI7
aI1
aI7
aI6
aI12
aI5
aI4
aI7
aI7
aI11
aI14
aI12
aI7
aI8
aI11
aI4
aI3
aI3
aI6
aI9
aI9
aI9
aI4
aI10
aI2
aI6
aI1
aI12
aI7
aI0
aI5
aI6
aI11
aI12
aI13
aI13
aI14
aI5
aI2
aI14
aI1
aI3
aI9
aI2
aI4
aI12
aI2
aI1
aI11
aI3
aI14
aI7
aI1
aI1
aI7
aI12
aI4
aI2
aI6
aI3
aI5
aI9
aI11
aI1
aI10
aI8
aI12
aI13
aI5
aI10
aI13
aI2
aI10
aI13
aI7
aI14
aI1
aI6
aI9
aI10
aI14
aI0
aI13
aI1
aI3
aI2
aI10
aI10
aI6
aI2
aI3
aI1
aI10
aI10
aI10
aI13
aI3
aI14
aI6
aI1
aI14
aI11
aI10
aI10
aI0
aI12
aI1
aI13
aI3
aI0
aI4
aI11
aI10
aI5
aI0
aI9
aI4
aI3
aI10
aI13
aI3
aI0
aI3
aI6
aI12
aI9
aI10
aI11
aI8
aI3
aI13
aI0
aI6
aI5
aI11
aI3
aI10
aI12
aI11
aI14
aI2
aI6
aI1
aI12
aI12
aI14
aI6
aI2
aI1
aI2
aI7
aI3
aI7
aI12
aI6
aI11
aI6
aI10
aI7
aI10
aI0
aI8
aI11
aI12
aI3
aI7
aI9
aI1
aI13
aI1
aI11
aI4
aI4
aI3
aI3
aI14
aI10
aI1
aI2
aI4
aI13
aI4
aI6
aI3
aI4
aI12
aI9
aI5
aI4
aI8
aI2
aI0
aI7
aI12
aI14
aI11
aI6
aI5
aI13
aI12
aI5
aI10
aI1
aI9
atbsS'finished'
p74
I00
sS'nReps'
p75
I40
sS'nRemaining'
p76
I0
sS'trialList'
p77
(lp78
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
asS'seed'
p79
NsS'thisIndex'
p80
I9
sS'thisN'
p81
I599
sS'thisTrialN'
p82
I14
sS'nTotal'
p83
I600
sS'_warnUseOfNext'
p84
I01
sbasS'saveWideText'
p85
I01
sS'thisEntry'
p86
(dp87
sS'version'
p88
S''
sS'_paramNamesSoFar'
p89
(lp90
sS'entries'
p91
(lp92
(dp93
g16
(lp94
S'd'
asS'.thisTrial'
p95
I14
sS'.thisRepN'
p96
I0
sg30
Vf
sg31
g32
sS'.thisTrialN'
p97
I0
sS'.thisN'
p98
I0
sS'.thisIndex'
p99
I14
sg15
(lp100
S'd'
asg17
S'Y'
sg14
I1
sa(dp101
g16
(lp102
S'd'
asg95
I1
sS'.thisRepN'
p103
I0
sg30
Vf
sg31
g32
sS'.thisTrialN'
p104
I1
sS'.thisN'
p105
I1
sS'.thisIndex'
p106
I1
sg15
(lp107
S'k'
asg17
S'N'
sg14
I1
sa(dp108
g16
(lp109
S'd'
asg18
S'Y'
sS'.thisRepN'
p110
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p111
I2
sS'.thisN'
p112
I2
sS'.thisIndex'
p113
I0
sg15
(lp114
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp115
g16
(lp116
S'd'
asg18
S'Y'
sS'.thisRepN'
p117
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p118
I3
sS'.thisN'
p119
I3
sS'.thisIndex'
p120
I1
sg15
(lp121
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I1
sa(dp122
g16
(lp123
S'd'
asg18
S'N'
sS'.thisRepN'
p124
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p125
I4
sS'.thisN'
p126
I4
sS'.thisIndex'
p127
I8
sg15
(lp128
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I8
sa(dp129
g16
(lp130
S'd'
asg18
S'Y'
sS'.thisRepN'
p131
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p132
I5
sS'.thisN'
p133
I5
sS'.thisIndex'
p134
I14
sg15
(lp135
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I14
sa(dp136
g16
(lp137
S'k'
asg18
S'N'
sS'.thisRepN'
p138
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p139
I6
sS'.thisN'
p140
I6
sS'.thisIndex'
p141
I14
sg15
(lp142
S'd'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I14
sa(dp143
g16
(lp144
S'k'
asg18
S'N'
sS'.thisRepN'
p145
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p146
I7
sS'.thisN'
p147
I7
sS'.thisIndex'
p148
I1
sg15
(lp149
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I1
sa(dp150
g16
(lp151
S'd'
asg18
S'N'
sS'.thisRepN'
p152
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p153
I8
sS'.thisN'
p154
I8
sS'.thisIndex'
p155
I12
sg15
(lp156
S'k'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I12
sa(dp157
g16
(lp158
S'k'
asg18
S'Y'
sS'.thisRepN'
p159
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p160
I9
sS'.thisN'
p161
I9
sS'.thisIndex'
p162
I4
sg15
(lp163
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp164
S'space'
p165
asg95
I4
sa(dp166
g16
(lp167
S'd'
asg18
S'N'
sS'.thisRepN'
p168
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p169
I10
sS'.thisN'
p170
I10
sS'.thisIndex'
p171
I12
sg15
(lp172
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I12
sa(dp173
g16
(lp174
S'k'
asg18
S'N'
sS'.thisRepN'
p175
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p176
I11
sS'.thisN'
p177
I11
sS'.thisIndex'
p178
I4
sg15
(lp179
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp180
g16
(lp181
S'd'
asg18
S'N'
sS'.thisRepN'
p182
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p183
I12
sS'.thisN'
p184
I12
sS'.thisIndex'
p185
I3
sg15
(lp186
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I3
sa(dp187
g16
(lp188
S'd'
asg18
S'Y'
sS'.thisRepN'
p189
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p190
I13
sS'.thisN'
p191
I13
sS'.thisIndex'
p192
I12
sg15
(lp193
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I12
sa(dp194
g16
(lp195
S'k'
asg18
S'N'
sS'.thisRepN'
p196
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p197
I14
sS'.thisN'
p198
I14
sS'.thisIndex'
p199
I3
sg15
(lp200
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp201
S'space'
p202
asg95
I3
sa(dp203
g16
(lp204
S'd'
asg18
S'Y'
sS'.thisRepN'
p205
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p206
I0
sS'.thisN'
p207
I15
sS'.thisIndex'
p208
I12
sg15
(lp209
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp210
S'space'
p211
asg95
I12
sa(dp212
g16
(lp213
S'd'
asg18
S'Y'
sS'.thisRepN'
p214
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p215
I1
sS'.thisN'
p216
I16
sS'.thisIndex'
p217
I5
sg15
(lp218
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp219
g16
(lp220
S'd'
asg18
S'Y'
sS'.thisRepN'
p221
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p222
I2
sS'.thisN'
p223
I17
sS'.thisIndex'
p224
I2
sg15
(lp225
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp226
S'space'
p227
asg95
I2
sa(dp228
g16
(lp229
S'd'
asg18
S'Y'
sS'.thisRepN'
p230
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p231
I3
sS'.thisN'
p232
I18
sS'.thisIndex'
p233
I8
sg15
(lp234
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp235
S'space'
p236
asg95
I8
sa(dp237
g16
(lp238
S'k'
asg18
S'N'
sS'.thisRepN'
p239
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p240
I4
sS'.thisN'
p241
I19
sS'.thisIndex'
p242
I6
sg15
(lp243
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I6
sa(dp244
g16
(lp245
S'k'
asg18
S'N'
sS'.thisRepN'
p246
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p247
I5
sS'.thisN'
p248
I20
sS'.thisIndex'
p249
I6
sg15
(lp250
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I6
sa(dp251
g16
(lp252
S'd'
asg18
S'Y'
sS'.thisRepN'
p253
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p254
I6
sS'.thisN'
p255
I21
sS'.thisIndex'
p256
I6
sg15
(lp257
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp258
S'space'
p259
asg95
I6
sa(dp260
g16
(lp261
S'd'
asg18
S'Y'
sS'.thisRepN'
p262
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p263
I7
sS'.thisN'
p264
I22
sS'.thisIndex'
p265
I14
sg15
(lp266
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I14
sa(dp267
g16
(lp268
S'k'
asg18
S'N'
sS'.thisRepN'
p269
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p270
I8
sS'.thisN'
p271
I23
sS'.thisIndex'
p272
I4
sg15
(lp273
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp274
S'space'
p275
asg95
I4
sa(dp276
g16
(lp277
S'd'
asg18
S'N'
sS'.thisRepN'
p278
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p279
I9
sS'.thisN'
p280
I24
sS'.thisIndex'
p281
I4
sg15
(lp282
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp283
g16
(lp284
S'k'
asg18
S'Y'
sS'.thisRepN'
p285
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p286
I10
sS'.thisN'
p287
I25
sS'.thisIndex'
p288
I5
sg15
(lp289
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp290
S'space'
p291
asg95
I5
sa(dp292
g16
(lp293
S'd'
asg18
S'N'
sS'.thisRepN'
p294
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p295
I11
sS'.thisN'
p296
I26
sS'.thisIndex'
p297
I12
sg15
(lp298
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I12
sa(dp299
g16
(lp300
S'k'
asg18
S'N'
sS'.thisRepN'
p301
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p302
I12
sS'.thisN'
p303
I27
sS'.thisIndex'
p304
I2
sg15
(lp305
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I2
sa(dp306
g16
(lp307
S'k'
asg18
S'Y'
sS'.thisRepN'
p308
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p309
I13
sS'.thisN'
p310
I28
sS'.thisIndex'
p311
I9
sg15
(lp312
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp313
S'space'
p314
asg95
I9
sa(dp315
g16
(lp316
S'd'
asg18
S'Y'
sS'.thisRepN'
p317
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p318
I14
sS'.thisN'
p319
I29
sS'.thisIndex'
p320
I7
sg15
(lp321
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp322
g16
(lp323
S'k'
asg18
S'Y'
sS'.thisRepN'
p324
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p325
I0
sS'.thisN'
p326
I30
sS'.thisIndex'
p327
I4
sg15
(lp328
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp329
g16
(lp330
S'd'
asg18
S'N'
sS'.thisRepN'
p331
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p332
I1
sS'.thisN'
p333
I31
sS'.thisIndex'
p334
I12
sg15
(lp335
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I12
sa(dp336
g16
(lp337
S'k'
asg18
S'Y'
sS'.thisRepN'
p338
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p339
I2
sS'.thisN'
p340
I32
sS'.thisIndex'
p341
I13
sg15
(lp342
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp343
S'space'
p344
asg95
I13
sa(dp345
g16
(lp346
S'k'
asg18
S'Y'
sS'.thisRepN'
p347
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p348
I3
sS'.thisN'
p349
I33
sS'.thisIndex'
p350
I1
sg15
(lp351
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp352
S'space'
p353
asg95
I1
sa(dp354
g16
(lp355
S'd'
asg18
S'Y'
sS'.thisRepN'
p356
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p357
I4
sS'.thisN'
p358
I34
sS'.thisIndex'
p359
I8
sg15
(lp360
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp361
S'space'
p362
asg95
I8
sa(dp363
g16
(lp364
S'd'
asg18
S'N'
sS'.thisRepN'
p365
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p366
I5
sS'.thisN'
p367
I35
sS'.thisIndex'
p368
I7
sg15
(lp369
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp370
g16
(lp371
S'd'
asg18
S'N'
sS'.thisRepN'
p372
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p373
I6
sS'.thisN'
p374
I36
sS'.thisIndex'
p375
I6
sg15
(lp376
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I6
sa(dp377
g16
(lp378
S'd'
asg18
S'N'
sS'.thisRepN'
p379
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p380
I7
sS'.thisN'
p381
I37
sS'.thisIndex'
p382
I6
sg15
(lp383
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I6
sa(dp384
g16
(lp385
S'k'
asg18
S'N'
sS'.thisRepN'
p386
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p387
I8
sS'.thisN'
p388
I38
sS'.thisIndex'
p389
I5
sg15
(lp390
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp391
g16
(lp392
S'd'
asg18
S'N'
sS'.thisRepN'
p393
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p394
I9
sS'.thisN'
p395
I39
sS'.thisIndex'
p396
I0
sg15
(lp397
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp398
g16
(lp399
S'd'
asg18
S'N'
sS'.thisRepN'
p400
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p401
I10
sS'.thisN'
p402
I40
sS'.thisIndex'
p403
I4
sg15
(lp404
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp405
g16
(lp406
S'd'
asg18
S'Y'
sS'.thisRepN'
p407
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p408
I11
sS'.thisN'
p409
I41
sS'.thisIndex'
p410
I2
sg15
(lp411
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp412
S'space'
p413
asg95
I2
sa(dp414
g16
(lp415
S'd'
asg18
S'N'
sS'.thisRepN'
p416
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p417
I12
sS'.thisN'
p418
I42
sS'.thisIndex'
p419
I10
sg15
(lp420
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp421
g16
(lp422
S'd'
asg18
S'N'
sS'.thisRepN'
p423
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p424
I13
sS'.thisN'
p425
I43
sS'.thisIndex'
p426
I10
sg15
(lp427
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp428
g16
(lp429
S'k'
asg18
S'Y'
sS'.thisRepN'
p430
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p431
I14
sS'.thisN'
p432
I44
sS'.thisIndex'
p433
I9
sg15
(lp434
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
(lp435
S'space'
p436
asg95
I9
sa(dp437
g16
(lp438
S'k'
asg18
S'N'
sS'.thisRepN'
p439
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p440
I0
sS'.thisN'
p441
I45
sS'.thisIndex'
p442
I12
sg15
(lp443
S'd'
asg30
Vf
sg17
S'N'
sg14
I1
sg19
Nsg95
I12
sa(dp444
g16
(lp445
S'k'
asg18
S'N'
sS'.thisRepN'
p446
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p447
I1
sS'.thisN'
p448
I46
sS'.thisIndex'
p449
I13
sg15
(lp450
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I13
sa(dp451
g16
(lp452
S'd'
asg18
S'N'
sS'.thisRepN'
p453
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p454
I2
sS'.thisN'
p455
I47
sS'.thisIndex'
p456
I9
sg15
(lp457
S'd'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I9
sa(dp458
g16
(lp459
S'k'
asg18
S'N'
sS'.thisRepN'
p460
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p461
I3
sS'.thisN'
p462
I48
sS'.thisIndex'
p463
I13
sg15
(lp464
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I13
sa(dp465
g16
(lp466
S'k'
asg18
S'N'
sg22
I38
sS'.thisN'
p467
I49
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p468
I4
sS'.thisRepN'
p469
I3
sg21
I46
sS'.thisIndex'
p470
I14
sg23
I20
sg15
(lp471
S'k'
asg30
Vf
sg17
S'Y'
sg14
I1
sg19
Nsg95
I14
sa(dp472
g16
(lp473
S'k'
asg95
I4
sS'.thisRepN'
p474
I3
sg30
Vf
sg31
g32
sS'.thisTrialN'
p475
I5
sS'.thisN'
p476
I50
sS'.thisIndex'
p477
I4
sg15
(lp478
S'k'
asg17
S'Y'
sg14
I2
sa(dp479
g16
(lp480
S'k'
asg95
I8
sS'.thisRepN'
p481
I3
sg30
Vf
sg31
g32
sS'.thisTrialN'
p482
I6
sS'.thisN'
p483
I51
sS'.thisIndex'
p484
I8
sg15
(lp485
S'k'
asg17
S'Y'
sg14
I2
sa(dp486
g16
(lp487
S'k'
asg18
S'N'
sS'.thisRepN'
p488
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p489
I7
sS'.thisN'
p490
I52
sS'.thisIndex'
p491
I14
sg15
(lp492
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I14
sa(dp493
g16
(lp494
S'k'
asg18
S'N'
sS'.thisRepN'
p495
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p496
I8
sS'.thisN'
p497
I53
sS'.thisIndex'
p498
I8
sg15
(lp499
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp500
g16
(lp501
S'd'
asg18
S'N'
sS'.thisRepN'
p502
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p503
I9
sS'.thisN'
p504
I54
sS'.thisIndex'
p505
I11
sg15
(lp506
S'k'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
Nsg95
I11
sa(dp507
g16
(lp508
S'd'
asg18
S'N'
sS'.thisRepN'
p509
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p510
I10
sS'.thisN'
p511
I55
sS'.thisIndex'
p512
I7
sg15
(lp513
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp514
g16
(lp515
S'd'
asg18
S'Y'
sS'.thisRepN'
p516
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p517
I11
sS'.thisN'
p518
I56
sS'.thisIndex'
p519
I1
sg15
(lp520
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp521
g16
(lp522
S'k'
asg18
S'Y'
sS'.thisRepN'
p523
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p524
I12
sS'.thisN'
p525
I57
sS'.thisIndex'
p526
I10
sg15
(lp527
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp528
S'space'
p529
asg95
I10
sa(dp530
g16
(lp531
S'd'
asg18
S'N'
sS'.thisRepN'
p532
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p533
I13
sS'.thisN'
p534
I58
sS'.thisIndex'
p535
I11
sg15
(lp536
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I11
sa(dp537
g16
(lp538
S'k'
asg18
S'N'
sS'.thisRepN'
p539
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p540
I14
sS'.thisN'
p541
I59
sS'.thisIndex'
p542
I1
sg15
(lp543
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp544
g16
(lp545
S'k'
asg18
S'Y'
sS'.thisRepN'
p546
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p547
I0
sS'.thisN'
p548
I60
sS'.thisIndex'
p549
I5
sg15
(lp550
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp551
S'space'
p552
asg95
I5
sa(dp553
g16
(lp554
S'd'
asg18
S'Y'
sS'.thisRepN'
p555
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p556
I1
sS'.thisN'
p557
I61
sS'.thisIndex'
p558
I8
sg15
(lp559
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp560
g16
(lp561
S'k'
asg18
S'N'
sS'.thisRepN'
p562
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p563
I2
sS'.thisN'
p564
I62
sS'.thisIndex'
p565
I8
sg15
(lp566
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp567
g16
(lp568
S'd'
asg18
S'N'
sS'.thisRepN'
p569
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p570
I3
sS'.thisN'
p571
I63
sS'.thisIndex'
p572
I5
sg15
(lp573
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp574
g16
(lp575
S'd'
asg18
S'Y'
sS'.thisRepN'
p576
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p577
I4
sS'.thisN'
p578
I64
sS'.thisIndex'
p579
I3
sg15
(lp580
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp581
S'space'
p582
asg95
I3
sa(dp583
g16
(lp584
S'k'
asg18
S'N'
sS'.thisRepN'
p585
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p586
I5
sS'.thisN'
p587
I65
sS'.thisIndex'
p588
I12
sg15
(lp589
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I12
sa(dp590
g16
(lp591
S'k'
asg18
S'Y'
sS'.thisRepN'
p592
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p593
I6
sS'.thisN'
p594
I66
sS'.thisIndex'
p595
I5
sg15
(lp596
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp597
S'space'
p598
asg95
I5
sa(dp599
g16
(lp600
S'k'
asg18
S'Y'
sS'.thisRepN'
p601
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p602
I7
sS'.thisN'
p603
I67
sS'.thisIndex'
p604
I8
sg15
(lp605
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp606
g16
(lp607
S'd'
asg18
S'N'
sS'.thisRepN'
p608
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p609
I8
sS'.thisN'
p610
I68
sS'.thisIndex'
p611
I8
sg15
(lp612
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp613
g16
(lp614
S'd'
asg18
S'N'
sS'.thisRepN'
p615
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p616
I9
sS'.thisN'
p617
I69
sS'.thisIndex'
p618
I3
sg15
(lp619
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp620
g16
(lp621
S'd'
asg18
S'N'
sS'.thisRepN'
p622
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p623
I10
sS'.thisN'
p624
I70
sS'.thisIndex'
p625
I7
sg15
(lp626
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp627
g16
(lp628
S'k'
asg18
S'N'
sS'.thisRepN'
p629
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p630
I11
sS'.thisN'
p631
I71
sS'.thisIndex'
p632
I11
sg15
(lp633
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I11
sa(dp634
g16
(lp635
S'd'
asg18
S'Y'
sS'.thisRepN'
p636
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p637
I12
sS'.thisN'
p638
I72
sS'.thisIndex'
p639
I6
sg15
(lp640
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp641
S'space'
p642
asg95
I6
sa(dp643
g16
(lp644
S'k'
asg18
S'N'
sS'.thisRepN'
p645
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p646
I13
sS'.thisN'
p647
I73
sS'.thisIndex'
p648
I8
sg15
(lp649
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp650
g16
(lp651
S'k'
asg18
S'N'
sS'.thisRepN'
p652
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p653
I14
sS'.thisN'
p654
I74
sS'.thisIndex'
p655
I13
sg15
(lp656
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp657
S'space'
p658
asg95
I13
sa(dp659
g16
(lp660
S'd'
asg18
S'Y'
sS'.thisRepN'
p661
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p662
I0
sS'.thisN'
p663
I75
sS'.thisIndex'
p664
I2
sg15
(lp665
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I2
sa(dp666
g16
(lp667
S'k'
asg18
S'Y'
sS'.thisRepN'
p668
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p669
I1
sS'.thisN'
p670
I76
sS'.thisIndex'
p671
I12
sg15
(lp672
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp673
S'space'
p674
asg95
I12
sa(dp675
g16
(lp676
S'd'
asg18
S'Y'
sS'.thisRepN'
p677
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p678
I2
sS'.thisN'
p679
I77
sS'.thisIndex'
p680
I10
sg15
(lp681
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp682
S'space'
p683
asg95
I10
sa(dp684
g16
(lp685
S'd'
asg18
S'N'
sS'.thisRepN'
p686
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p687
I3
sS'.thisN'
p688
I78
sS'.thisIndex'
p689
I5
sg15
(lp690
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp691
g16
(lp692
S'k'
asg18
S'N'
sS'.thisRepN'
p693
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p694
I4
sS'.thisN'
p695
I79
sS'.thisIndex'
p696
I9
sg15
(lp697
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp698
g16
(lp699
S'd'
asg18
S'Y'
sS'.thisRepN'
p700
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p701
I5
sS'.thisN'
p702
I80
sS'.thisIndex'
p703
I6
sg15
(lp704
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I6
sa(dp705
g16
(lp706
S'd'
asg18
S'N'
sS'.thisRepN'
p707
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p708
I6
sS'.thisN'
p709
I81
sS'.thisIndex'
p710
I13
sg15
(lp711
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp712
S'space'
p713
asg95
I13
sa(dp714
g16
(lp715
S'd'
asg18
S'Y'
sS'.thisRepN'
p716
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p717
I7
sS'.thisN'
p718
I82
sS'.thisIndex'
p719
I7
sg15
(lp720
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp721
g16
(lp722
S'd'
asg18
S'N'
sS'.thisRepN'
p723
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p724
I8
sS'.thisN'
p725
I83
sS'.thisIndex'
p726
I4
sg15
(lp727
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp728
g16
(lp729
S'd'
asg18
S'N'
sS'.thisRepN'
p730
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p731
I9
sS'.thisN'
p732
I84
sS'.thisIndex'
p733
I3
sg15
(lp734
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp735
g16
(lp736
S'd'
asg18
S'N'
sS'.thisRepN'
p737
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p738
I10
sS'.thisN'
p739
I85
sS'.thisIndex'
p740
I11
sg15
(lp741
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I11
sa(dp742
g16
(lp743
S'd'
asg18
S'N'
sS'.thisRepN'
p744
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p745
I11
sS'.thisN'
p746
I86
sS'.thisIndex'
p747
I3
sg15
(lp748
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp749
g16
(lp750
S'k'
asg18
S'Y'
sS'.thisRepN'
p751
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p752
I12
sS'.thisN'
p753
I87
sS'.thisIndex'
p754
I2
sg15
(lp755
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I2
sa(dp756
g16
(lp757
S'k'
asg18
S'Y'
sS'.thisRepN'
p758
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p759
I13
sS'.thisN'
p760
I88
sS'.thisIndex'
p761
I3
sg15
(lp762
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp763
S'space'
p764
asg95
I3
sa(dp765
g16
(lp766
S'd'
asg18
S'N'
sS'.thisRepN'
p767
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p768
I14
sS'.thisN'
p769
I89
sS'.thisIndex'
p770
I1
sg15
(lp771
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp772
g16
(lp773
S'd'
asg18
S'Y'
sS'.thisRepN'
p774
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p775
I0
sS'.thisN'
p776
I90
sS'.thisIndex'
p777
I8
sg15
(lp778
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp779
S'space'
p780
asg95
I8
sa(dp781
g16
(lp782
S'd'
asg18
S'N'
sS'.thisRepN'
p783
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p784
I1
sS'.thisN'
p785
I91
sS'.thisIndex'
p786
I0
sg15
(lp787
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp788
g16
(lp789
S'k'
asg18
S'N'
sS'.thisRepN'
p790
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p791
I2
sS'.thisN'
p792
I92
sS'.thisIndex'
p793
I4
sg15
(lp794
S'd'
asg30
Vf
sg17
S'N'
sg14
I2
sg19
Nsg95
I4
sa(dp795
g16
(lp796
S'k'
asg18
S'Y'
sS'.thisRepN'
p797
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p798
I3
sS'.thisN'
p799
I93
sS'.thisIndex'
p800
I7
sg15
(lp801
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp802
g16
(lp803
S'd'
asg18
S'Y'
sS'.thisRepN'
p804
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p805
I4
sS'.thisN'
p806
I94
sS'.thisIndex'
p807
I10
sg15
(lp808
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp809
S'space'
p810
asg95
I10
sa(dp811
g16
(lp812
S'd'
asg18
S'Y'
sS'.thisRepN'
p813
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p814
I5
sS'.thisN'
p815
I95
sS'.thisIndex'
p816
I7
sg15
(lp817
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp818
g16
(lp819
S'k'
asg18
S'Y'
sS'.thisRepN'
p820
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p821
I6
sS'.thisN'
p822
I96
sS'.thisIndex'
p823
I2
sg15
(lp824
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
(lp825
S'space'
p826
asg95
I2
sa(dp827
g16
(lp828
S'd'
asg18
S'Y'
sS'.thisRepN'
p829
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p830
I7
sS'.thisN'
p831
I97
sS'.thisIndex'
p832
I13
sg15
(lp833
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I13
sa(dp834
g16
(lp835
S'k'
asg18
S'Y'
sS'.thisRepN'
p836
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p837
I8
sS'.thisN'
p838
I98
sS'.thisIndex'
p839
I4
sg15
(lp840
S'k'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp841
g16
(lp842
S'd'
asg18
S'N'
sg22
I35
sS'.thisN'
p843
I99
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p844
I9
sS'.thisRepN'
p845
I6
sg21
I48
sS'.thisIndex'
p846
I14
sg23
I22
sg15
(lp847
S'd'
asg30
Vf
sg17
S'Y'
sg14
I2
sg19
Nsg95
I14
sa(dp848
g16
(lp849
S'd'
asg95
I14
sS'.thisRepN'
p850
I6
sg30
Vf
sg31
g32
sS'.thisTrialN'
p851
I10
sS'.thisN'
p852
I100
sS'.thisIndex'
p853
I14
sg15
(lp854
S'd'
asg17
S'Y'
sg14
I3
sa(dp855
g16
(lp856
S'd'
asg95
I14
sS'.thisRepN'
p857
I6
sg30
Vf
sg31
g32
sS'.thisTrialN'
p858
I11
sS'.thisN'
p859
I101
sS'.thisIndex'
p860
I14
sg15
(lp861
S'd'
asg17
S'Y'
sg14
I3
sa(dp862
g16
(lp863
S'k'
asg18
S'Y'
sS'.thisRepN'
p864
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p865
I12
sS'.thisN'
p866
I102
sS'.thisIndex'
p867
I3
sg15
(lp868
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp869
S'space'
p870
asg95
I3
sa(dp871
g16
(lp872
S'd'
asg18
S'Y'
sS'.thisRepN'
p873
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p874
I13
sS'.thisN'
p875
I103
sS'.thisIndex'
p876
I13
sg15
(lp877
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp878
S'space'
p879
asg95
I13
sa(dp880
g16
(lp881
S'd'
asg18
S'N'
sS'.thisRepN'
p882
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p883
I14
sS'.thisN'
p884
I104
sS'.thisIndex'
p885
I11
sg15
(lp886
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I11
sa(dp887
g16
(lp888
S'd'
asg18
S'Y'
sS'.thisRepN'
p889
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p890
I0
sS'.thisN'
p891
I105
sS'.thisIndex'
p892
I2
sg15
(lp893
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp894
S'space'
p895
asg95
I2
sa(dp896
g16
(lp897
S'd'
asg18
S'Y'
sS'.thisRepN'
p898
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p899
I1
sS'.thisN'
p900
I106
sS'.thisIndex'
p901
I7
sg15
(lp902
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp903
S'space'
p904
asg95
I7
sa(dp905
g16
(lp906
S'd'
asg18
S'Y'
sS'.thisRepN'
p907
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p908
I2
sS'.thisN'
p909
I107
sS'.thisIndex'
p910
I3
sg15
(lp911
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp912
S'space'
p913
asg95
I3
sa(dp914
g16
(lp915
S'k'
asg18
S'Y'
sS'.thisRepN'
p916
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p917
I3
sS'.thisN'
p918
I108
sS'.thisIndex'
p919
I6
sg15
(lp920
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp921
S'space'
p922
asg95
I6
sa(dp923
g16
(lp924
S'd'
asg18
S'Y'
sS'.thisRepN'
p925
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p926
I4
sS'.thisN'
p927
I109
sS'.thisIndex'
p928
I0
sg15
(lp929
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp930
S'space'
p931
asg95
I0
sa(dp932
g16
(lp933
S'd'
asg18
S'N'
sS'.thisRepN'
p934
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p935
I5
sS'.thisN'
p936
I110
sS'.thisIndex'
p937
I11
sg15
(lp938
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I11
sa(dp939
g16
(lp940
S'k'
asg18
S'Y'
sS'.thisRepN'
p941
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p942
I6
sS'.thisN'
p943
I111
sS'.thisIndex'
p944
I1
sg15
(lp945
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp946
S'space'
p947
asg95
I1
sa(dp948
g16
(lp949
S'd'
asg18
S'N'
sS'.thisRepN'
p950
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p951
I7
sS'.thisN'
p952
I112
sS'.thisIndex'
p953
I13
sg15
(lp954
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I13
sa(dp955
g16
(lp956
S'd'
asg18
S'Y'
sS'.thisRepN'
p957
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p958
I8
sS'.thisN'
p959
I113
sS'.thisIndex'
p960
I13
sg15
(lp961
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp962
S'space'
p963
asg95
I13
sa(dp964
g16
(lp965
S'k'
asg18
S'Y'
sS'.thisRepN'
p966
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p967
I9
sS'.thisN'
p968
I114
sS'.thisIndex'
p969
I5
sg15
(lp970
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp971
S'space'
p972
asg95
I5
sa(dp973
g16
(lp974
S'k'
asg18
S'Y'
sS'.thisRepN'
p975
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p976
I10
sS'.thisN'
p977
I115
sS'.thisIndex'
p978
I12
sg15
(lp979
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp980
S'space'
p981
asg95
I12
sa(dp982
g16
(lp983
S'd'
asg18
S'N'
sS'.thisRepN'
p984
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p985
I11
sS'.thisN'
p986
I116
sS'.thisIndex'
p987
I7
sg15
(lp988
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I7
sa(dp989
g16
(lp990
S'k'
asg18
S'N'
sS'.thisRepN'
p991
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p992
I12
sS'.thisN'
p993
I117
sS'.thisIndex'
p994
I1
sg15
(lp995
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp996
g16
(lp997
S'd'
asg18
S'Y'
sS'.thisRepN'
p998
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p999
I13
sS'.thisN'
p1000
I118
sS'.thisIndex'
p1001
I0
sg15
(lp1002
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1003
S'space'
p1004
asg95
I0
sa(dp1005
g16
(lp1006
S'd'
asg18
S'N'
sS'.thisRepN'
p1007
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1008
I14
sS'.thisN'
p1009
I119
sS'.thisIndex'
p1010
I4
sg15
(lp1011
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I4
sa(dp1012
g16
(lp1013
S'k'
asg18
S'Y'
sS'.thisRepN'
p1014
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1015
I0
sS'.thisN'
p1016
I120
sS'.thisIndex'
p1017
I2
sg15
(lp1018
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1019
S'space'
p1020
asg95
I2
sa(dp1021
g16
(lp1022
S'd'
asg18
S'N'
sS'.thisRepN'
p1023
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1024
I1
sS'.thisN'
p1025
I121
sS'.thisIndex'
p1026
I5
sg15
(lp1027
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I5
sa(dp1028
g16
(lp1029
S'k'
asg18
S'N'
sS'.thisRepN'
p1030
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1031
I2
sS'.thisN'
p1032
I122
sS'.thisIndex'
p1033
I5
sg15
(lp1034
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I5
sa(dp1035
g16
(lp1036
S'd'
asg18
S'N'
sS'.thisRepN'
p1037
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1038
I3
sS'.thisN'
p1039
I123
sS'.thisIndex'
p1040
I5
sg15
(lp1041
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I5
sa(dp1042
g16
(lp1043
S'k'
asg18
S'Y'
sS'.thisRepN'
p1044
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1045
I4
sS'.thisN'
p1046
I124
sS'.thisIndex'
p1047
I11
sg15
(lp1048
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1049
S'space'
p1050
asg95
I11
sa(dp1051
g16
(lp1052
S'd'
asg18
S'Y'
sS'.thisRepN'
p1053
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1054
I5
sS'.thisN'
p1055
I125
sS'.thisIndex'
p1056
I10
sg15
(lp1057
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1058
S'space'
p1059
asg95
I10
sa(dp1060
g16
(lp1061
S'd'
asg18
S'Y'
sS'.thisRepN'
p1062
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1063
I6
sS'.thisN'
p1064
I126
sS'.thisIndex'
p1065
I7
sg15
(lp1066
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1067
S'space'
p1068
asg95
I7
sa(dp1069
g16
(lp1070
S'k'
asg18
S'Y'
sS'.thisRepN'
p1071
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1072
I7
sS'.thisN'
p1073
I127
sS'.thisIndex'
p1074
I3
sg15
(lp1075
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1076
S'space'
p1077
asg95
I3
sa(dp1078
g16
(lp1079
S'k'
asg18
S'N'
sS'.thisRepN'
p1080
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1081
I8
sS'.thisN'
p1082
I128
sS'.thisIndex'
p1083
I0
sg15
(lp1084
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp1085
g16
(lp1086
S'd'
asg18
S'N'
sS'.thisRepN'
p1087
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1088
I9
sS'.thisN'
p1089
I129
sS'.thisIndex'
p1090
I11
sg15
(lp1091
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I11
sa(dp1092
g16
(lp1093
S'k'
asg18
S'N'
sS'.thisRepN'
p1094
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1095
I10
sS'.thisN'
p1096
I130
sS'.thisIndex'
p1097
I7
sg15
(lp1098
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I7
sa(dp1099
g16
(lp1100
S'd'
asg18
S'N'
sS'.thisRepN'
p1101
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1102
I11
sS'.thisN'
p1103
I131
sS'.thisIndex'
p1104
I1
sg15
(lp1105
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp1106
g16
(lp1107
S'k'
asg18
S'N'
sS'.thisRepN'
p1108
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1109
I12
sS'.thisN'
p1110
I132
sS'.thisIndex'
p1111
I10
sg15
(lp1112
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1113
g16
(lp1114
S'k'
asg18
S'N'
sS'.thisRepN'
p1115
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1116
I13
sS'.thisN'
p1117
I133
sS'.thisIndex'
p1118
I6
sg15
(lp1119
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp1120
g16
(lp1121
S'k'
asg18
S'Y'
sS'.thisRepN'
p1122
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1123
I14
sS'.thisN'
p1124
I134
sS'.thisIndex'
p1125
I4
sg15
(lp1126
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I4
sa(dp1127
g16
(lp1128
S'd'
asg18
S'N'
sS'.thisRepN'
p1129
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1130
I0
sS'.thisN'
p1131
I135
sS'.thisIndex'
p1132
I0
sg15
(lp1133
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp1134
g16
(lp1135
S'k'
asg18
S'Y'
sS'.thisRepN'
p1136
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1137
I1
sS'.thisN'
p1138
I136
sS'.thisIndex'
p1139
I5
sg15
(lp1140
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1141
S'space'
p1142
asg95
I5
sa(dp1143
g16
(lp1144
S'k'
asg18
S'Y'
sS'.thisRepN'
p1145
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1146
I2
sS'.thisN'
p1147
I137
sS'.thisIndex'
p1148
I3
sg15
(lp1149
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1150
S'space'
p1151
asg95
I3
sa(dp1152
g16
(lp1153
S'k'
asg18
S'Y'
sS'.thisRepN'
p1154
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1155
I3
sS'.thisN'
p1156
I138
sS'.thisIndex'
p1157
I8
sg15
(lp1158
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1159
S'space'
p1160
asg95
I8
sa(dp1161
g16
(lp1162
S'd'
asg18
S'N'
sS'.thisRepN'
p1163
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1164
I4
sS'.thisN'
p1165
I139
sS'.thisIndex'
p1166
I13
sg15
(lp1167
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I13
sa(dp1168
g16
(lp1169
S'k'
asg18
S'N'
sS'.thisRepN'
p1170
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1171
I5
sS'.thisN'
p1172
I140
sS'.thisIndex'
p1173
I0
sg15
(lp1174
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1175
S'space'
p1176
asg95
I0
sa(dp1177
g16
(lp1178
S'k'
asg18
S'Y'
sS'.thisRepN'
p1179
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1180
I6
sS'.thisN'
p1181
I141
sS'.thisIndex'
p1182
I4
sg15
(lp1183
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I4
sa(dp1184
g16
(lp1185
S'd'
asg18
S'N'
sS'.thisRepN'
p1186
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1187
I7
sS'.thisN'
p1188
I142
sS'.thisIndex'
p1189
I3
sg15
(lp1190
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp1191
g16
(lp1192
S'k'
asg18
S'Y'
sS'.thisRepN'
p1193
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1194
I8
sS'.thisN'
p1195
I143
sS'.thisIndex'
p1196
I8
sg15
(lp1197
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1198
S'space'
p1199
asg95
I8
sa(dp1200
g16
(lp1201
S'k'
asg18
S'Y'
sS'.thisRepN'
p1202
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1203
I9
sS'.thisN'
p1204
I144
sS'.thisIndex'
p1205
I7
sg15
(lp1206
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1207
S'space'
p1208
asg95
I7
sa(dp1209
g16
(lp1210
S'd'
asg18
S'N'
sS'.thisRepN'
p1211
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1212
I10
sS'.thisN'
p1213
I145
sS'.thisIndex'
p1214
I8
sg15
(lp1215
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp1216
g16
(lp1217
S'd'
asg18
S'N'
sS'.thisRepN'
p1218
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1219
I11
sS'.thisN'
p1220
I146
sS'.thisIndex'
p1221
I1
sg15
(lp1222
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp1223
g16
(lp1224
S'k'
asg18
S'Y'
sS'.thisRepN'
p1225
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1226
I12
sS'.thisN'
p1227
I147
sS'.thisIndex'
p1228
I10
sg15
(lp1229
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
(lp1230
S'space'
p1231
asg95
I10
sa(dp1232
g16
(lp1233
S'k'
asg18
S'N'
sS'.thisRepN'
p1234
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1235
I13
sS'.thisN'
p1236
I148
sS'.thisIndex'
p1237
I5
sg15
(lp1238
S'k'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I5
sa(dp1239
g16
(lp1240
S'd'
asg18
S'N'
sg22
I45
sS'.thisN'
p1241
I149
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1242
I14
sS'.thisRepN'
p1243
I9
sg21
I50
sS'.thisIndex'
p1244
I3
sg23
I25
sg15
(lp1245
S'd'
asg30
Vf
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp1246
g16
(lp1247
S'k'
asg95
I4
sS'.thisRepN'
p1248
I10
sg30
Vf
sg31
g32
sS'.thisTrialN'
p1249
I0
sS'.thisN'
p1250
I150
sS'.thisIndex'
p1251
I4
sg15
(lp1252
S'k'
asg17
S'Y'
sg14
I4
sa(dp1253
g16
(lp1254
S'k'
asg95
I10
sS'.thisRepN'
p1255
I10
sg30
Vf
sg31
g32
sS'.thisTrialN'
p1256
I1
sS'.thisN'
p1257
I151
sS'.thisIndex'
p1258
I10
sg15
(lp1259
S'k'
asg17
S'Y'
sg14
I4
sa(dp1260
g16
(lp1261
S'd'
asg18
S'Y'
sS'.thisRepN'
p1262
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1263
I2
sS'.thisN'
p1264
I152
sS'.thisIndex'
p1265
I13
sg15
(lp1266
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1267
S'space'
p1268
asg95
I13
sa(dp1269
g16
(lp1270
S'k'
asg18
S'Y'
sS'.thisRepN'
p1271
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1272
I3
sS'.thisN'
p1273
I153
sS'.thisIndex'
p1274
I14
sg15
(lp1275
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1276
S'space'
p1277
asg95
I14
sa(dp1278
g16
(lp1279
S'd'
asg18
S'N'
sS'.thisRepN'
p1280
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1281
I4
sS'.thisN'
p1282
I154
sS'.thisIndex'
p1283
I12
sg15
(lp1284
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I12
sa(dp1285
g16
(lp1286
S'k'
asg18
S'N'
sS'.thisRepN'
p1287
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1288
I5
sS'.thisN'
p1289
I155
sS'.thisIndex'
p1290
I3
sg15
(lp1291
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1292
S'space'
p1293
asg95
I3
sa(dp1294
g16
(lp1295
S'd'
asg18
S'Y'
sS'.thisRepN'
p1296
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1297
I6
sS'.thisN'
p1298
I156
sS'.thisIndex'
p1299
I3
sg15
(lp1300
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1301
S'space'
p1302
asg95
I3
sa(dp1303
g16
(lp1304
S'd'
asg18
S'N'
sS'.thisRepN'
p1305
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1306
I7
sS'.thisN'
p1307
I157
sS'.thisIndex'
p1308
I14
sg15
(lp1309
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I14
sa(dp1310
g16
(lp1311
S'k'
asg18
S'N'
sS'.thisRepN'
p1312
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1313
I8
sS'.thisN'
p1314
I158
sS'.thisIndex'
p1315
I1
sg15
(lp1316
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I1
sa(dp1317
g16
(lp1318
S'd'
asg18
S'Y'
sS'.thisRepN'
p1319
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1320
I9
sS'.thisN'
p1321
I159
sS'.thisIndex'
p1322
I9
sg15
(lp1323
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1324
g16
(lp1325
S'k'
asg18
S'N'
sS'.thisRepN'
p1326
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1327
I10
sS'.thisN'
p1328
I160
sS'.thisIndex'
p1329
I11
sg15
(lp1330
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I11
sa(dp1331
g16
(lp1332
S'k'
asg18
S'Y'
sS'.thisRepN'
p1333
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1334
I11
sS'.thisN'
p1335
I161
sS'.thisIndex'
p1336
I7
sg15
(lp1337
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1338
S'space'
p1339
asg95
I7
sa(dp1340
g16
(lp1341
S'd'
asg18
S'Y'
sS'.thisRepN'
p1342
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1343
I12
sS'.thisN'
p1344
I162
sS'.thisIndex'
p1345
I10
sg15
(lp1346
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1347
S'space'
p1348
asg95
I10
sa(dp1349
g16
(lp1350
S'k'
asg18
S'N'
sS'.thisRepN'
p1351
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1352
I13
sS'.thisN'
p1353
I163
sS'.thisIndex'
p1354
I11
sg15
(lp1355
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I11
sa(dp1356
g16
(lp1357
S'k'
asg18
S'Y'
sS'.thisRepN'
p1358
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1359
I14
sS'.thisN'
p1360
I164
sS'.thisIndex'
p1361
I3
sg15
(lp1362
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1363
S'space'
p1364
asg95
I3
sa(dp1365
g16
(lp1366
S'k'
asg18
S'N'
sS'.thisRepN'
p1367
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1368
I0
sS'.thisN'
p1369
I165
sS'.thisIndex'
p1370
I11
sg15
(lp1371
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I11
sa(dp1372
g16
(lp1373
S'k'
asg18
S'N'
sS'.thisRepN'
p1374
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1375
I1
sS'.thisN'
p1376
I166
sS'.thisIndex'
p1377
I14
sg15
(lp1378
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I14
sa(dp1379
g16
(lp1380
S'k'
asg18
S'Y'
sS'.thisRepN'
p1381
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1382
I2
sS'.thisN'
p1383
I167
sS'.thisIndex'
p1384
I10
sg15
(lp1385
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1386
S'space'
p1387
asg95
I10
sa(dp1388
g16
(lp1389
S'd'
asg18
S'N'
sS'.thisRepN'
p1390
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1391
I3
sS'.thisN'
p1392
I168
sS'.thisIndex'
p1393
I12
sg15
(lp1394
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I12
sa(dp1395
g16
(lp1396
S'd'
asg18
S'Y'
sS'.thisRepN'
p1397
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1398
I4
sS'.thisN'
p1399
I169
sS'.thisIndex'
p1400
I9
sg15
(lp1401
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1402
S'space'
p1403
asg95
I9
sa(dp1404
g16
(lp1405
S'd'
asg18
S'N'
sS'.thisRepN'
p1406
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1407
I5
sS'.thisN'
p1408
I170
sS'.thisIndex'
p1409
I5
sg15
(lp1410
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1411
g16
(lp1412
S'd'
asg18
S'Y'
sS'.thisRepN'
p1413
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1414
I6
sS'.thisN'
p1415
I171
sS'.thisIndex'
p1416
I7
sg15
(lp1417
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1418
S'space'
p1419
asg95
I7
sa(dp1420
g16
(lp1421
S'd'
asg18
S'Y'
sS'.thisRepN'
p1422
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1423
I7
sS'.thisN'
p1424
I172
sS'.thisIndex'
p1425
I8
sg15
(lp1426
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1427
g16
(lp1428
S'k'
asg18
S'Y'
sS'.thisRepN'
p1429
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1430
I8
sS'.thisN'
p1431
I173
sS'.thisIndex'
p1432
I6
sg15
(lp1433
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1434
S'space'
p1435
asg95
I6
sa(dp1436
g16
(lp1437
S'k'
asg18
S'Y'
sS'.thisRepN'
p1438
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1439
I9
sS'.thisN'
p1440
I174
sS'.thisIndex'
p1441
I5
sg15
(lp1442
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1443
S'space'
p1444
asg95
I5
sa(dp1445
g16
(lp1446
S'd'
asg18
S'Y'
sS'.thisRepN'
p1447
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1448
I10
sS'.thisN'
p1449
I175
sS'.thisIndex'
p1450
I4
sg15
(lp1451
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1452
S'space'
p1453
asg95
I4
sa(dp1454
g16
(lp1455
S'd'
asg18
S'N'
sS'.thisRepN'
p1456
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1457
I11
sS'.thisN'
p1458
I176
sS'.thisIndex'
p1459
I12
sg15
(lp1460
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I12
sa(dp1461
g16
(lp1462
S'd'
asg18
S'Y'
sS'.thisRepN'
p1463
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1464
I12
sS'.thisN'
p1465
I177
sS'.thisIndex'
p1466
I13
sg15
(lp1467
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1468
S'space'
p1469
asg95
I13
sa(dp1470
g16
(lp1471
S'k'
asg18
S'N'
sS'.thisRepN'
p1472
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1473
I13
sS'.thisN'
p1474
I178
sS'.thisIndex'
p1475
I3
sg15
(lp1476
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1477
g16
(lp1478
S'd'
asg18
S'N'
sS'.thisRepN'
p1479
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1480
I14
sS'.thisN'
p1481
I179
sS'.thisIndex'
p1482
I14
sg15
(lp1483
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1484
S'space'
p1485
asg95
I14
sa(dp1486
g16
(lp1487
S'd'
asg18
S'Y'
sS'.thisRepN'
p1488
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1489
I0
sS'.thisN'
p1490
I180
sS'.thisIndex'
p1491
I2
sg15
(lp1492
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1493
S'space'
p1494
asg95
I2
sa(dp1495
g16
(lp1496
S'd'
asg18
S'Y'
sS'.thisRepN'
p1497
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1498
I1
sS'.thisN'
p1499
I181
sS'.thisIndex'
p1500
I3
sg15
(lp1501
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1502
S'space'
p1503
asg95
I3
sa(dp1504
g16
(lp1505
S'k'
asg18
S'N'
sS'.thisRepN'
p1506
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1507
I2
sS'.thisN'
p1508
I182
sS'.thisIndex'
p1509
I10
sg15
(lp1510
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1511
g16
(lp1512
S'k'
asg18
S'N'
sS'.thisRepN'
p1513
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1514
I3
sS'.thisN'
p1515
I183
sS'.thisIndex'
p1516
I0
sg15
(lp1517
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1518
g16
(lp1519
S'd'
asg18
S'Y'
sS'.thisRepN'
p1520
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1521
I4
sS'.thisN'
p1522
I184
sS'.thisIndex'
p1523
I11
sg15
(lp1524
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1525
S'space'
p1526
asg95
I11
sa(dp1527
g16
(lp1528
S'd'
asg18
S'N'
sS'.thisRepN'
p1529
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1530
I5
sS'.thisN'
p1531
I185
sS'.thisIndex'
p1532
I9
sg15
(lp1533
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1534
g16
(lp1535
S'd'
asg18
S'Y'
sS'.thisRepN'
p1536
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1537
I6
sS'.thisN'
p1538
I186
sS'.thisIndex'
p1539
I8
sg15
(lp1540
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1541
S'space'
p1542
asg95
I8
sa(dp1543
g16
(lp1544
S'd'
asg18
S'Y'
sS'.thisRepN'
p1545
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1546
I7
sS'.thisN'
p1547
I187
sS'.thisIndex'
p1548
I7
sg15
(lp1549
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1550
S'space'
p1551
asg95
I7
sa(dp1552
g16
(lp1553
S'k'
asg18
S'Y'
sS'.thisRepN'
p1554
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1555
I8
sS'.thisN'
p1556
I188
sS'.thisIndex'
p1557
I13
sg15
(lp1558
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1559
S'space'
p1560
asg95
I13
sa(dp1561
g16
(lp1562
S'k'
asg18
S'Y'
sS'.thisRepN'
p1563
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1564
I9
sS'.thisN'
p1565
I189
sS'.thisIndex'
p1566
I7
sg15
(lp1567
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1568
S'space'
p1569
asg95
I7
sa(dp1570
g16
(lp1571
S'k'
asg18
S'Y'
sS'.thisRepN'
p1572
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1573
I10
sS'.thisN'
p1574
I190
sS'.thisIndex'
p1575
I3
sg15
(lp1576
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1577
S'space'
p1578
asg95
I3
sa(dp1579
g16
(lp1580
S'd'
asg18
S'N'
sS'.thisRepN'
p1581
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1582
I11
sS'.thisN'
p1583
I191
sS'.thisIndex'
p1584
I4
sg15
(lp1585
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1586
g16
(lp1587
S'd'
asg18
S'Y'
sS'.thisRepN'
p1588
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1589
I12
sS'.thisN'
p1590
I192
sS'.thisIndex'
p1591
I3
sg15
(lp1592
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1593
g16
(lp1594
S'd'
asg18
S'N'
sS'.thisRepN'
p1595
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1596
I13
sS'.thisN'
p1597
I193
sS'.thisIndex'
p1598
I10
sg15
(lp1599
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1600
g16
(lp1601
S'd'
asg18
S'Y'
sS'.thisRepN'
p1602
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1603
I14
sS'.thisN'
p1604
I194
sS'.thisIndex'
p1605
I10
sg15
(lp1606
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1607
S'space'
p1608
asg95
I10
sa(dp1609
g16
(lp1610
S'd'
asg18
S'N'
sS'.thisRepN'
p1611
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1612
I0
sS'.thisN'
p1613
I195
sS'.thisIndex'
p1614
I6
sg15
(lp1615
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1616
g16
(lp1617
S'd'
asg18
S'N'
sS'.thisRepN'
p1618
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1619
I1
sS'.thisN'
p1620
I196
sS'.thisIndex'
p1621
I4
sg15
(lp1622
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1623
g16
(lp1624
S'k'
asg18
S'N'
sS'.thisRepN'
p1625
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1626
I2
sS'.thisN'
p1627
I197
sS'.thisIndex'
p1628
I10
sg15
(lp1629
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1630
S'space'
p1631
asg95
I10
sa(dp1632
g16
(lp1633
S'k'
asg18
S'N'
sS'.thisRepN'
p1634
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1635
I3
sS'.thisN'
p1636
I198
sS'.thisIndex'
p1637
I6
sg15
(lp1638
S'k'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
(lp1639
S'space'
p1640
asg95
I6
sa(dp1641
g16
(lp1642
S'd'
asg18
S'N'
sg22
I41
sS'.thisN'
p1643
I199
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1644
I4
sS'.thisRepN'
p1645
I13
sg21
I50
sS'.thisIndex'
p1646
I1
sg23
I25
sg15
(lp1647
S'd'
asg30
Vf
sg17
S'Y'
sg14
I4
sg19
Nsg95
I1
sa(dp1648
g16
(lp1649
S'k'
asg95
I2
sS'.thisRepN'
p1650
I13
sg30
Vf
sg31
g32
sS'.thisTrialN'
p1651
I5
sS'.thisN'
p1652
I200
sS'.thisIndex'
p1653
I2
sg15
(lp1654
S'k'
asg17
S'Y'
sg14
I5
sa(dp1655
g16
(lp1656
S'k'
asg95
I8
sS'.thisRepN'
p1657
I13
sg30
Vf
sg31
g32
sS'.thisTrialN'
p1658
I6
sS'.thisN'
p1659
I201
sS'.thisIndex'
p1660
I8
sg15
(lp1661
S'k'
asg17
S'Y'
sg14
I5
sa(dp1662
g16
(lp1663
S'k'
asg18
S'N'
sS'.thisRepN'
p1664
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1665
I7
sS'.thisN'
p1666
I202
sS'.thisIndex'
p1667
I14
sg15
(lp1668
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I14
sa(dp1669
g16
(lp1670
S'k'
asg18
S'N'
sS'.thisRepN'
p1671
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1672
I8
sS'.thisN'
p1673
I203
sS'.thisIndex'
p1674
I8
sg15
(lp1675
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1676
g16
(lp1677
S'd'
asg18
S'Y'
sS'.thisRepN'
p1678
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1679
I9
sS'.thisN'
p1680
I204
sS'.thisIndex'
p1681
I3
sg15
(lp1682
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1683
g16
(lp1684
S'k'
asg18
S'N'
sS'.thisRepN'
p1685
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1686
I10
sS'.thisN'
p1687
I205
sS'.thisIndex'
p1688
I3
sg15
(lp1689
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1690
g16
(lp1691
S'd'
asg18
S'N'
sS'.thisRepN'
p1692
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1693
I11
sS'.thisN'
p1694
I206
sS'.thisIndex'
p1695
I2
sg15
(lp1696
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1697
g16
(lp1698
S'k'
asg18
S'Y'
sS'.thisRepN'
p1699
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1700
I12
sS'.thisN'
p1701
I207
sS'.thisIndex'
p1702
I14
sg15
(lp1703
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1704
S'space'
p1705
asg95
I14
sa(dp1706
g16
(lp1707
S'k'
asg18
S'N'
sS'.thisRepN'
p1708
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1709
I13
sS'.thisN'
p1710
I208
sS'.thisIndex'
p1711
I12
sg15
(lp1712
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I12
sa(dp1713
g16
(lp1714
S'd'
asg18
S'N'
sS'.thisRepN'
p1715
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1716
I14
sS'.thisN'
p1717
I209
sS'.thisIndex'
p1718
I1
sg15
(lp1719
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1720
g16
(lp1721
S'd'
asg18
S'Y'
sS'.thisRepN'
p1722
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1723
I0
sS'.thisN'
p1724
I210
sS'.thisIndex'
p1725
I8
sg15
(lp1726
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1727
S'space'
p1728
asg95
I8
sa(dp1729
g16
(lp1730
S'k'
asg18
S'Y'
sS'.thisRepN'
p1731
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1732
I1
sS'.thisN'
p1733
I211
sS'.thisIndex'
p1734
I1
sg15
(lp1735
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1736
S'space'
p1737
asg95
I1
sa(dp1738
g16
(lp1739
S'd'
asg18
S'N'
sS'.thisRepN'
p1740
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1741
I2
sS'.thisN'
p1742
I212
sS'.thisIndex'
p1743
I0
sg15
(lp1744
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I0
sa(dp1745
g16
(lp1746
S'k'
asg18
S'Y'
sS'.thisRepN'
p1747
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1748
I3
sS'.thisN'
p1749
I213
sS'.thisIndex'
p1750
I3
sg15
(lp1751
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1752
S'space'
p1753
asg95
I3
sa(dp1754
g16
(lp1755
S'd'
asg18
S'Y'
sS'.thisRepN'
p1756
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1757
I4
sS'.thisN'
p1758
I214
sS'.thisIndex'
p1759
I14
sg15
(lp1760
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1761
S'space'
p1762
asg95
I14
sa(dp1763
g16
(lp1764
S'd'
asg18
S'Y'
sS'.thisRepN'
p1765
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1766
I5
sS'.thisN'
p1767
I215
sS'.thisIndex'
p1768
I1
sg15
(lp1769
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1770
S'space'
p1771
asg95
I1
sa(dp1772
g16
(lp1773
S'd'
asg18
S'Y'
sS'.thisRepN'
p1774
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1775
I6
sS'.thisN'
p1776
I216
sS'.thisIndex'
p1777
I1
sg15
(lp1778
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1779
S'space'
p1780
asg95
I1
sa(dp1781
g16
(lp1782
S'd'
asg18
S'N'
sS'.thisRepN'
p1783
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1784
I7
sS'.thisN'
p1785
I217
sS'.thisIndex'
p1786
I14
sg15
(lp1787
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I14
sa(dp1788
g16
(lp1789
S'd'
asg18
S'Y'
sS'.thisRepN'
p1790
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1791
I8
sS'.thisN'
p1792
I218
sS'.thisIndex'
p1793
I10
sg15
(lp1794
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1795
S'space'
p1796
asg95
I10
sa(dp1797
g16
(lp1798
S'd'
asg18
S'N'
sS'.thisRepN'
p1799
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1800
I9
sS'.thisN'
p1801
I219
sS'.thisIndex'
p1802
I10
sg15
(lp1803
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp1804
g16
(lp1805
S'd'
asg18
S'Y'
sS'.thisRepN'
p1806
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1807
I10
sS'.thisN'
p1808
I220
sS'.thisIndex'
p1809
I6
sg15
(lp1810
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1811
S'space'
p1812
asg95
I6
sa(dp1813
g16
(lp1814
S'k'
asg18
S'N'
sS'.thisRepN'
p1815
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1816
I11
sS'.thisN'
p1817
I221
sS'.thisIndex'
p1818
I6
sg15
(lp1819
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp1820
g16
(lp1821
S'd'
asg18
S'Y'
sS'.thisRepN'
p1822
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1823
I12
sS'.thisN'
p1824
I222
sS'.thisIndex'
p1825
I6
sg15
(lp1826
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1827
S'space'
p1828
asg95
I6
sa(dp1829
g16
(lp1830
S'k'
asg18
S'Y'
sS'.thisRepN'
p1831
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1832
I13
sS'.thisN'
p1833
I223
sS'.thisIndex'
p1834
I11
sg15
(lp1835
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1836
S'space'
p1837
asg95
I11
sa(dp1838
g16
(lp1839
S'k'
asg18
S'N'
sS'.thisRepN'
p1840
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1841
I14
sS'.thisN'
p1842
I224
sS'.thisIndex'
p1843
I2
sg15
(lp1844
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1845
g16
(lp1846
S'd'
asg18
S'Y'
sS'.thisRepN'
p1847
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1848
I0
sS'.thisN'
p1849
I225
sS'.thisIndex'
p1850
I11
sg15
(lp1851
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1852
S'space'
p1853
asg95
I11
sa(dp1854
g16
(lp1855
S'k'
asg18
S'N'
sS'.thisRepN'
p1856
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1857
I1
sS'.thisN'
p1858
I226
sS'.thisIndex'
p1859
I12
sg15
(lp1860
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I12
sa(dp1861
g16
(lp1862
S'd'
asg18
S'Y'
sS'.thisRepN'
p1863
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1864
I2
sS'.thisN'
p1865
I227
sS'.thisIndex'
p1866
I13
sg15
(lp1867
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1868
S'space'
p1869
asg95
I13
sa(dp1870
g16
(lp1871
S'k'
asg18
S'N'
sS'.thisRepN'
p1872
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1873
I3
sS'.thisN'
p1874
I228
sS'.thisIndex'
p1875
I7
sg15
(lp1876
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp1877
g16
(lp1878
S'k'
asg18
S'N'
sS'.thisRepN'
p1879
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1880
I4
sS'.thisN'
p1881
I229
sS'.thisIndex'
p1882
I1
sg15
(lp1883
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1884
g16
(lp1885
S'k'
asg18
S'N'
sS'.thisRepN'
p1886
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1887
I5
sS'.thisN'
p1888
I230
sS'.thisIndex'
p1889
I8
sg15
(lp1890
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1891
g16
(lp1892
S'd'
asg18
S'Y'
sS'.thisRepN'
p1893
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1894
I6
sS'.thisN'
p1895
I231
sS'.thisIndex'
p1896
I6
sg15
(lp1897
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1898
S'space'
p1899
asg95
I6
sa(dp1900
g16
(lp1901
S'd'
asg18
S'Y'
sS'.thisRepN'
p1902
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1903
I7
sS'.thisN'
p1904
I232
sS'.thisIndex'
p1905
I13
sg15
(lp1906
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1907
S'space'
p1908
asg95
I13
sa(dp1909
g16
(lp1910
S'k'
asg18
S'N'
sS'.thisRepN'
p1911
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1912
I8
sS'.thisN'
p1913
I233
sS'.thisIndex'
p1914
I5
sg15
(lp1915
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I5
sa(dp1916
g16
(lp1917
S'd'
asg18
S'Y'
sS'.thisRepN'
p1918
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1919
I9
sS'.thisN'
p1920
I234
sS'.thisIndex'
p1921
I0
sg15
(lp1922
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1923
S'space'
p1924
asg95
I0
sa(dp1925
g16
(lp1926
S'd'
asg18
S'N'
sS'.thisRepN'
p1927
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1928
I10
sS'.thisN'
p1929
I235
sS'.thisIndex'
p1930
I9
sg15
(lp1931
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1932
g16
(lp1933
S'd'
asg18
S'N'
sS'.thisRepN'
p1934
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1935
I11
sS'.thisN'
p1936
I236
sS'.thisIndex'
p1937
I3
sg15
(lp1938
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1939
g16
(lp1940
S'k'
asg18
S'Y'
sS'.thisRepN'
p1941
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1942
I12
sS'.thisN'
p1943
I237
sS'.thisIndex'
p1944
I1
sg15
(lp1945
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1946
S'space'
p1947
asg95
I1
sa(dp1948
g16
(lp1949
S'd'
asg18
S'Y'
sS'.thisRepN'
p1950
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1951
I13
sS'.thisN'
p1952
I238
sS'.thisIndex'
p1953
I14
sg15
(lp1954
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1955
S'space'
p1956
asg95
I14
sa(dp1957
g16
(lp1958
S'k'
asg18
S'N'
sS'.thisRepN'
p1959
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1960
I14
sS'.thisN'
p1961
I239
sS'.thisIndex'
p1962
I4
sg15
(lp1963
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1964
g16
(lp1965
S'd'
asg18
S'N'
sS'.thisRepN'
p1966
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1967
I0
sS'.thisN'
p1968
I240
sS'.thisIndex'
p1969
I5
sg15
(lp1970
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I5
sa(dp1971
g16
(lp1972
S'k'
asg18
S'N'
sS'.thisRepN'
p1973
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1974
I1
sS'.thisN'
p1975
I241
sS'.thisIndex'
p1976
I7
sg15
(lp1977
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp1978
g16
(lp1979
S'k'
asg18
S'Y'
sS'.thisRepN'
p1980
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1981
I2
sS'.thisN'
p1982
I242
sS'.thisIndex'
p1983
I9
sg15
(lp1984
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp1985
S'space'
p1986
asg95
I9
sa(dp1987
g16
(lp1988
S'd'
asg18
S'N'
sS'.thisRepN'
p1989
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1990
I3
sS'.thisN'
p1991
I243
sS'.thisIndex'
p1992
I4
sg15
(lp1993
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1994
g16
(lp1995
S'd'
asg18
S'Y'
sS'.thisRepN'
p1996
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1997
I4
sS'.thisN'
p1998
I244
sS'.thisIndex'
p1999
I11
sg15
(lp2000
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp2001
S'space'
p2002
asg95
I11
sa(dp2003
g16
(lp2004
S'd'
asg18
S'N'
sS'.thisRepN'
p2005
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2006
I5
sS'.thisN'
p2007
I245
sS'.thisIndex'
p2008
I13
sg15
(lp2009
S'd'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I13
sa(dp2010
g16
(lp2011
S'k'
asg18
S'Y'
sS'.thisRepN'
p2012
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2013
I6
sS'.thisN'
p2014
I246
sS'.thisIndex'
p2015
I2
sg15
(lp2016
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp2017
g16
(lp2018
S'k'
asg18
S'Y'
sS'.thisRepN'
p2019
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2020
I7
sS'.thisN'
p2021
I247
sS'.thisIndex'
p2022
I11
sg15
(lp2023
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
(lp2024
S'space'
p2025
asg95
I11
sa(dp2026
g16
(lp2027
S'k'
asg18
S'N'
sS'.thisRepN'
p2028
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2029
I8
sS'.thisN'
p2030
I248
sS'.thisIndex'
p2031
I2
sg15
(lp2032
S'd'
asg30
Vf
sg17
S'N'
sg14
I5
sg19
Nsg95
I2
sa(dp2033
g16
(lp2034
S'k'
asg18
S'N'
sg22
I46
sS'.thisN'
p2035
I249
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2036
I9
sS'.thisRepN'
p2037
I16
sg21
I49
sS'.thisIndex'
p2038
I0
sg23
I23
sg15
(lp2039
S'k'
asg30
Vf
sg17
S'Y'
sg14
I5
sg19
Nsg95
I0
sa(dp2040
g16
(lp2041
S'd'
asg95
I9
sS'.thisRepN'
p2042
I16
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2043
I10
sS'.thisN'
p2044
I250
sS'.thisIndex'
p2045
I9
sg15
(lp2046
S'd'
asg17
S'Y'
sg14
I6
sa(dp2047
g16
(lp2048
S'k'
asg95
I5
sS'.thisRepN'
p2049
I16
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2050
I11
sS'.thisN'
p2051
I251
sS'.thisIndex'
p2052
I5
sg15
(lp2053
S'k'
asg17
S'Y'
sg14
I6
sa(dp2054
g16
(lp2055
S'd'
asg18
S'Y'
sS'.thisRepN'
p2056
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2057
I12
sS'.thisN'
p2058
I252
sS'.thisIndex'
p2059
I14
sg15
(lp2060
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2061
S'space'
p2062
asg95
I14
sa(dp2063
g16
(lp2064
S'd'
asg18
S'Y'
sS'.thisRepN'
p2065
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2066
I13
sS'.thisN'
p2067
I253
sS'.thisIndex'
p2068
I2
sg15
(lp2069
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2070
S'space'
p2071
asg95
I2
sa(dp2072
g16
(lp2073
S'k'
asg18
S'Y'
sS'.thisRepN'
p2074
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2075
I14
sS'.thisN'
p2076
I254
sS'.thisIndex'
p2077
I13
sg15
(lp2078
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2079
S'space'
p2080
asg95
I13
sa(dp2081
g16
(lp2082
S'd'
asg18
S'Y'
sS'.thisRepN'
p2083
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2084
I0
sS'.thisN'
p2085
I255
sS'.thisIndex'
p2086
I6
sg15
(lp2087
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2088
S'space'
p2089
asg95
I6
sa(dp2090
g16
(lp2091
S'd'
asg18
S'N'
sS'.thisRepN'
p2092
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2093
I1
sS'.thisN'
p2094
I256
sS'.thisIndex'
p2095
I3
sg15
(lp2096
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2097
g16
(lp2098
S'd'
asg18
S'N'
sS'.thisRepN'
p2099
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2100
I2
sS'.thisN'
p2101
I257
sS'.thisIndex'
p2102
I11
sg15
(lp2103
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I11
sa(dp2104
g16
(lp2105
S'k'
asg18
S'Y'
sS'.thisRepN'
p2106
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2107
I3
sS'.thisN'
p2108
I258
sS'.thisIndex'
p2109
I4
sg15
(lp2110
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2111
S'space'
p2112
asg95
I4
sa(dp2113
g16
(lp2114
S'k'
asg18
S'Y'
sS'.thisRepN'
p2115
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2116
I4
sS'.thisN'
p2117
I259
sS'.thisIndex'
p2118
I0
sg15
(lp2119
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2120
S'space'
p2121
asg95
I0
sa(dp2122
g16
(lp2123
S'd'
asg18
S'Y'
sS'.thisRepN'
p2124
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2125
I5
sS'.thisN'
p2126
I260
sS'.thisIndex'
p2127
I0
sg15
(lp2128
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2129
S'space'
p2130
asg95
I0
sa(dp2131
g16
(lp2132
S'd'
asg18
S'N'
sS'.thisRepN'
p2133
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2134
I6
sS'.thisN'
p2135
I261
sS'.thisIndex'
p2136
I3
sg15
(lp2137
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2138
g16
(lp2139
S'k'
asg18
S'N'
sS'.thisRepN'
p2140
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2141
I7
sS'.thisN'
p2142
I262
sS'.thisIndex'
p2143
I7
sg15
(lp2144
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2145
g16
(lp2146
S'k'
asg18
S'N'
sS'.thisRepN'
p2147
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2148
I8
sS'.thisN'
p2149
I263
sS'.thisIndex'
p2150
I9
sg15
(lp2151
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2152
g16
(lp2153
S'd'
asg18
S'Y'
sS'.thisRepN'
p2154
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2155
I9
sS'.thisN'
p2156
I264
sS'.thisIndex'
p2157
I12
sg15
(lp2158
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2159
S'space'
p2160
asg95
I12
sa(dp2161
g16
(lp2162
S'd'
asg18
S'N'
sS'.thisRepN'
p2163
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2164
I10
sS'.thisN'
p2165
I265
sS'.thisIndex'
p2166
I9
sg15
(lp2167
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2168
g16
(lp2169
S'k'
asg18
S'Y'
sS'.thisRepN'
p2170
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2171
I11
sS'.thisN'
p2172
I266
sS'.thisIndex'
p2173
I9
sg15
(lp2174
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2175
S'space'
p2176
asg95
I9
sa(dp2177
g16
(lp2178
S'd'
asg18
S'Y'
sS'.thisRepN'
p2179
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2180
I12
sS'.thisN'
p2181
I267
sS'.thisIndex'
p2182
I11
sg15
(lp2183
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2184
S'space'
p2185
asg95
I11
sa(dp2186
g16
(lp2187
S'd'
asg18
S'Y'
sS'.thisRepN'
p2188
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2189
I13
sS'.thisN'
p2190
I268
sS'.thisIndex'
p2191
I6
sg15
(lp2192
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2193
S'space'
p2194
asg95
I6
sa(dp2195
g16
(lp2196
S'd'
asg18
S'N'
sS'.thisRepN'
p2197
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2198
I14
sS'.thisN'
p2199
I269
sS'.thisIndex'
p2200
I4
sg15
(lp2201
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2202
g16
(lp2203
S'k'
asg18
S'Y'
sS'.thisRepN'
p2204
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2205
I0
sS'.thisN'
p2206
I270
sS'.thisIndex'
p2207
I5
sg15
(lp2208
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2209
S'space'
p2210
asg95
I5
sa(dp2211
g16
(lp2212
S'k'
asg18
S'N'
sS'.thisRepN'
p2213
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2214
I1
sS'.thisN'
p2215
I271
sS'.thisIndex'
p2216
I8
sg15
(lp2217
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I8
sa(dp2218
g16
(lp2219
S'k'
asg18
S'N'
sS'.thisRepN'
p2220
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2221
I2
sS'.thisN'
p2222
I272
sS'.thisIndex'
p2223
I12
sg15
(lp2224
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I12
sa(dp2225
g16
(lp2226
S'k'
asg18
S'Y'
sS'.thisRepN'
p2227
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2228
I3
sS'.thisN'
p2229
I273
sS'.thisIndex'
p2230
I9
sg15
(lp2231
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2232
S'space'
p2233
asg95
I9
sa(dp2234
g16
(lp2235
S'k'
asg18
S'N'
sS'.thisRepN'
p2236
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2237
I4
sS'.thisN'
p2238
I274
sS'.thisIndex'
p2239
I5
sg15
(lp2240
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I5
sa(dp2241
g16
(lp2242
S'd'
asg18
S'Y'
sS'.thisRepN'
p2243
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2244
I5
sS'.thisN'
p2245
I275
sS'.thisIndex'
p2246
I4
sg15
(lp2247
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2248
S'space'
p2249
asg95
I4
sa(dp2250
g16
(lp2251
S'd'
asg18
S'N'
sS'.thisRepN'
p2252
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2253
I6
sS'.thisN'
p2254
I276
sS'.thisIndex'
p2255
I7
sg15
(lp2256
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2257
g16
(lp2258
S'k'
asg18
S'N'
sS'.thisRepN'
p2259
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2260
I7
sS'.thisN'
p2261
I277
sS'.thisIndex'
p2262
I11
sg15
(lp2263
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I11
sa(dp2264
g16
(lp2265
S'd'
asg18
S'N'
sS'.thisRepN'
p2266
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2267
I8
sS'.thisN'
p2268
I278
sS'.thisIndex'
p2269
I4
sg15
(lp2270
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2271
g16
(lp2272
S'k'
asg18
S'N'
sS'.thisRepN'
p2273
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2274
I9
sS'.thisN'
p2275
I279
sS'.thisIndex'
p2276
I14
sg15
(lp2277
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I14
sa(dp2278
g16
(lp2279
S'd'
asg18
S'N'
sS'.thisRepN'
p2280
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2281
I10
sS'.thisN'
p2282
I280
sS'.thisIndex'
p2283
I4
sg15
(lp2284
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2285
g16
(lp2286
S'd'
asg18
S'Y'
sS'.thisRepN'
p2287
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2288
I11
sS'.thisN'
p2289
I281
sS'.thisIndex'
p2290
I11
sg15
(lp2291
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I11
sa(dp2292
g16
(lp2293
S'k'
asg18
S'Y'
sS'.thisRepN'
p2294
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2295
I12
sS'.thisN'
p2296
I282
sS'.thisIndex'
p2297
I10
sg15
(lp2298
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2299
S'space'
p2300
asg95
I10
sa(dp2301
g16
(lp2302
S'k'
asg18
S'Y'
sS'.thisRepN'
p2303
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2304
I13
sS'.thisN'
p2305
I283
sS'.thisIndex'
p2306
I1
sg15
(lp2307
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2308
S'space'
p2309
asg95
I1
sa(dp2310
g16
(lp2311
S'd'
asg18
S'N'
sS'.thisRepN'
p2312
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2313
I14
sS'.thisN'
p2314
I284
sS'.thisIndex'
p2315
I6
sg15
(lp2316
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2317
g16
(lp2318
S'k'
asg18
S'N'
sS'.thisRepN'
p2319
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2320
I0
sS'.thisN'
p2321
I285
sS'.thisIndex'
p2322
I12
sg15
(lp2323
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I12
sa(dp2324
g16
(lp2325
S'k'
asg18
S'N'
sS'.thisRepN'
p2326
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2327
I1
sS'.thisN'
p2328
I286
sS'.thisIndex'
p2329
I13
sg15
(lp2330
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I13
sa(dp2331
g16
(lp2332
S'k'
asg18
S'N'
sS'.thisRepN'
p2333
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2334
I2
sS'.thisN'
p2335
I287
sS'.thisIndex'
p2336
I0
sg15
(lp2337
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2338
g16
(lp2339
S'd'
asg18
S'N'
sS'.thisRepN'
p2340
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2341
I3
sS'.thisN'
p2342
I288
sS'.thisIndex'
p2343
I2
sg15
(lp2344
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I2
sa(dp2345
g16
(lp2346
S'd'
asg18
S'N'
sS'.thisRepN'
p2347
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2348
I4
sS'.thisN'
p2349
I289
sS'.thisIndex'
p2350
I8
sg15
(lp2351
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I8
sa(dp2352
g16
(lp2353
S'k'
asg18
S'N'
sS'.thisRepN'
p2354
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2355
I5
sS'.thisN'
p2356
I290
sS'.thisIndex'
p2357
I11
sg15
(lp2358
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I11
sa(dp2359
g16
(lp2360
S'k'
asg18
S'N'
sS'.thisRepN'
p2361
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2362
I6
sS'.thisN'
p2363
I291
sS'.thisIndex'
p2364
I3
sg15
(lp2365
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2366
g16
(lp2367
S'k'
asg18
S'N'
sS'.thisRepN'
p2368
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2369
I7
sS'.thisN'
p2370
I292
sS'.thisIndex'
p2371
I9
sg15
(lp2372
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2373
g16
(lp2374
S'k'
asg18
S'N'
sS'.thisRepN'
p2375
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2376
I8
sS'.thisN'
p2377
I293
sS'.thisIndex'
p2378
I0
sg15
(lp2379
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2380
g16
(lp2381
S'd'
asg18
S'Y'
sS'.thisRepN'
p2382
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2383
I9
sS'.thisN'
p2384
I294
sS'.thisIndex'
p2385
I7
sg15
(lp2386
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2387
S'space'
p2388
asg95
I7
sa(dp2389
g16
(lp2390
S'k'
asg18
S'N'
sS'.thisRepN'
p2391
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2392
I10
sS'.thisN'
p2393
I295
sS'.thisIndex'
p2394
I10
sg15
(lp2395
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2396
g16
(lp2397
S'k'
asg18
S'Y'
sS'.thisRepN'
p2398
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2399
I11
sS'.thisN'
p2400
I296
sS'.thisIndex'
p2401
I1
sg15
(lp2402
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2403
S'space'
p2404
asg95
I1
sa(dp2405
g16
(lp2406
S'd'
asg18
S'Y'
sS'.thisRepN'
p2407
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2408
I12
sS'.thisN'
p2409
I297
sS'.thisIndex'
p2410
I10
sg15
(lp2411
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
(lp2412
S'space'
p2413
asg95
I10
sa(dp2414
g16
(lp2415
S'k'
asg18
S'N'
sS'.thisRepN'
p2416
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2417
I13
sS'.thisN'
p2418
I298
sS'.thisIndex'
p2419
I12
sg15
(lp2420
S'k'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I12
sa(dp2421
g16
(lp2422
S'd'
asg18
S'N'
sg22
I47
sS'.thisN'
p2423
I299
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2424
I14
sS'.thisRepN'
p2425
I19
sg21
I50
sS'.thisIndex'
p2426
I3
sg23
I20
sg15
(lp2427
S'd'
asg30
Vf
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2428
g16
(lp2429
S'k'
asg95
I7
sS'.thisRepN'
p2430
I20
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2431
I0
sS'.thisN'
p2432
I300
sS'.thisIndex'
p2433
I7
sg15
(lp2434
S'k'
asg17
S'Y'
sg14
I7
sa(dp2435
g16
(lp2436
S'd'
asg95
I13
sS'.thisRepN'
p2437
I20
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2438
I1
sS'.thisN'
p2439
I301
sS'.thisIndex'
p2440
I13
sg15
(lp2441
S'd'
asg17
S'Y'
sg14
I7
sa(dp2442
g16
(lp2443
S'd'
asg18
S'Y'
sS'.thisRepN'
p2444
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2445
I2
sS'.thisN'
p2446
I302
sS'.thisIndex'
p2447
I2
sg15
(lp2448
S'k'
asg30
Vf
sg17
S'N'
sg14
I7
sg19
(lp2449
S'space'
p2450
asg95
I2
sa(dp2451
g16
(lp2452
S'd'
asg18
S'Y'
sS'.thisRepN'
p2453
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2454
I3
sS'.thisN'
p2455
I303
sS'.thisIndex'
p2456
I0
sg15
(lp2457
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2458
S'space'
p2459
asg95
I0
sa(dp2460
g16
(lp2461
S'k'
asg18
S'N'
sS'.thisRepN'
p2462
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2463
I4
sS'.thisN'
p2464
I304
sS'.thisIndex'
p2465
I11
sg15
(lp2466
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I11
sa(dp2467
g16
(lp2468
S'd'
asg18
S'Y'
sS'.thisRepN'
p2469
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2470
I5
sS'.thisN'
p2471
I305
sS'.thisIndex'
p2472
I4
sg15
(lp2473
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2474
g16
(lp2475
S'k'
asg18
S'Y'
sS'.thisRepN'
p2476
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2477
I6
sS'.thisN'
p2478
I306
sS'.thisIndex'
p2479
I6
sg15
(lp2480
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2481
S'space'
p2482
asg95
I6
sa(dp2483
g16
(lp2484
S'k'
asg18
S'N'
sS'.thisRepN'
p2485
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2486
I7
sS'.thisN'
p2487
I307
sS'.thisIndex'
p2488
I4
sg15
(lp2489
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2490
g16
(lp2491
S'd'
asg18
S'N'
sS'.thisRepN'
p2492
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2493
I8
sS'.thisN'
p2494
I308
sS'.thisIndex'
p2495
I7
sg15
(lp2496
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2497
S'space'
p2498
asg95
I7
sa(dp2499
g16
(lp2500
S'k'
asg18
S'N'
sS'.thisRepN'
p2501
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2502
I9
sS'.thisN'
p2503
I309
sS'.thisIndex'
p2504
I11
sg15
(lp2505
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I11
sa(dp2506
g16
(lp2507
S'k'
asg18
S'N'
sS'.thisRepN'
p2508
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2509
I10
sS'.thisN'
p2510
I310
sS'.thisIndex'
p2511
I2
sg15
(lp2512
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2513
g16
(lp2514
S'd'
asg18
S'N'
sS'.thisRepN'
p2515
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2516
I11
sS'.thisN'
p2517
I311
sS'.thisIndex'
p2518
I10
sg15
(lp2519
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2520
g16
(lp2521
S'd'
asg18
S'N'
sS'.thisRepN'
p2522
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2523
I12
sS'.thisN'
p2524
I312
sS'.thisIndex'
p2525
I0
sg15
(lp2526
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2527
g16
(lp2528
S'k'
asg18
S'N'
sS'.thisRepN'
p2529
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2530
I13
sS'.thisN'
p2531
I313
sS'.thisIndex'
p2532
I12
sg15
(lp2533
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I12
sa(dp2534
g16
(lp2535
S'd'
asg18
S'Y'
sS'.thisRepN'
p2536
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2537
I14
sS'.thisN'
p2538
I314
sS'.thisIndex'
p2539
I4
sg15
(lp2540
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2541
S'space'
p2542
asg95
I4
sa(dp2543
g16
(lp2544
S'k'
asg18
S'Y'
sS'.thisRepN'
p2545
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2546
I0
sS'.thisN'
p2547
I315
sS'.thisIndex'
p2548
I5
sg15
(lp2549
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2550
S'space'
p2551
asg95
I5
sa(dp2552
g16
(lp2553
S'k'
asg18
S'Y'
sS'.thisRepN'
p2554
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2555
I1
sS'.thisN'
p2556
I316
sS'.thisIndex'
p2557
I0
sg15
(lp2558
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2559
S'space'
p2560
asg95
I0
sa(dp2561
g16
(lp2562
S'k'
asg18
S'N'
sS'.thisRepN'
p2563
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2564
I2
sS'.thisN'
p2565
I317
sS'.thisIndex'
p2566
I10
sg15
(lp2567
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2568
g16
(lp2569
S'k'
asg18
S'N'
sS'.thisRepN'
p2570
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2571
I3
sS'.thisN'
p2572
I318
sS'.thisIndex'
p2573
I2
sg15
(lp2574
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2575
g16
(lp2576
S'k'
asg18
S'N'
sS'.thisRepN'
p2577
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2578
I4
sS'.thisN'
p2579
I319
sS'.thisIndex'
p2580
I9
sg15
(lp2581
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I9
sa(dp2582
g16
(lp2583
S'k'
asg18
S'Y'
sS'.thisRepN'
p2584
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2585
I5
sS'.thisN'
p2586
I320
sS'.thisIndex'
p2587
I4
sg15
(lp2588
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2589
S'space'
p2590
asg95
I4
sa(dp2591
g16
(lp2592
S'k'
asg18
S'Y'
sS'.thisRepN'
p2593
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2594
I6
sS'.thisN'
p2595
I321
sS'.thisIndex'
p2596
I8
sg15
(lp2597
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2598
S'space'
p2599
asg95
I8
sa(dp2600
g16
(lp2601
S'd'
asg18
S'Y'
sS'.thisRepN'
p2602
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2603
I7
sS'.thisN'
p2604
I322
sS'.thisIndex'
p2605
I9
sg15
(lp2606
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2607
S'space'
p2608
asg95
I9
sa(dp2609
g16
(lp2610
S'k'
asg18
S'Y'
sS'.thisRepN'
p2611
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2612
I8
sS'.thisN'
p2613
I323
sS'.thisIndex'
p2614
I0
sg15
(lp2615
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2616
S'space'
p2617
asg95
I0
sa(dp2618
g16
(lp2619
S'k'
asg18
S'N'
sS'.thisRepN'
p2620
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2621
I9
sS'.thisN'
p2622
I324
sS'.thisIndex'
p2623
I7
sg15
(lp2624
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2625
g16
(lp2626
S'd'
asg18
S'Y'
sS'.thisRepN'
p2627
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2628
I10
sS'.thisN'
p2629
I325
sS'.thisIndex'
p2630
I6
sg15
(lp2631
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2632
S'space'
p2633
asg95
I6
sa(dp2634
g16
(lp2635
S'd'
asg18
S'Y'
sS'.thisRepN'
p2636
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2637
I11
sS'.thisN'
p2638
I326
sS'.thisIndex'
p2639
I8
sg15
(lp2640
S'k'
asg30
Vf
sg17
S'N'
sg14
I7
sg19
(lp2641
S'space'
p2642
asg95
I8
sa(dp2643
g16
(lp2644
S'd'
asg18
S'Y'
sS'.thisRepN'
p2645
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2646
I12
sS'.thisN'
p2647
I327
sS'.thisIndex'
p2648
I12
sg15
(lp2649
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2650
S'space'
p2651
asg95
I12
sa(dp2652
g16
(lp2653
S'k'
asg18
S'Y'
sS'.thisRepN'
p2654
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2655
I13
sS'.thisN'
p2656
I328
sS'.thisIndex'
p2657
I14
sg15
(lp2658
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2659
S'space'
p2660
asg95
I14
sa(dp2661
g16
(lp2662
S'k'
asg18
S'N'
sS'.thisRepN'
p2663
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2664
I14
sS'.thisN'
p2665
I329
sS'.thisIndex'
p2666
I12
sg15
(lp2667
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I12
sa(dp2668
g16
(lp2669
S'd'
asg18
S'N'
sS'.thisRepN'
p2670
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2671
I0
sS'.thisN'
p2672
I330
sS'.thisIndex'
p2673
I1
sg15
(lp2674
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I1
sa(dp2675
g16
(lp2676
S'd'
asg18
S'Y'
sS'.thisRepN'
p2677
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2678
I1
sS'.thisN'
p2679
I331
sS'.thisIndex'
p2680
I14
sg15
(lp2681
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2682
S'space'
p2683
asg95
I14
sa(dp2684
g16
(lp2685
S'k'
asg18
S'Y'
sS'.thisRepN'
p2686
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2687
I2
sS'.thisN'
p2688
I332
sS'.thisIndex'
p2689
I14
sg15
(lp2690
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2691
S'space'
p2692
asg95
I14
sa(dp2693
g16
(lp2694
S'd'
asg18
S'N'
sS'.thisRepN'
p2695
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2696
I3
sS'.thisN'
p2697
I333
sS'.thisIndex'
p2698
I2
sg15
(lp2699
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2700
g16
(lp2701
S'k'
asg18
S'N'
sS'.thisRepN'
p2702
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2703
I4
sS'.thisN'
p2704
I334
sS'.thisIndex'
p2705
I12
sg15
(lp2706
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2707
S'space'
p2708
asg95
I12
sa(dp2709
g16
(lp2710
S'k'
asg18
S'N'
sS'.thisRepN'
p2711
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2712
I5
sS'.thisN'
p2713
I335
sS'.thisIndex'
p2714
I9
sg15
(lp2715
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I9
sa(dp2716
g16
(lp2717
S'k'
asg18
S'Y'
sS'.thisRepN'
p2718
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2719
I6
sS'.thisN'
p2720
I336
sS'.thisIndex'
p2721
I2
sg15
(lp2722
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2723
S'space'
p2724
asg95
I2
sa(dp2725
g16
(lp2726
S'd'
asg18
S'Y'
sS'.thisRepN'
p2727
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2728
I7
sS'.thisN'
p2729
I337
sS'.thisIndex'
p2730
I5
sg15
(lp2731
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2732
S'space'
p2733
asg95
I5
sa(dp2734
g16
(lp2735
S'k'
asg18
S'N'
sS'.thisRepN'
p2736
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2737
I8
sS'.thisN'
p2738
I338
sS'.thisIndex'
p2739
I9
sg15
(lp2740
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I9
sa(dp2741
g16
(lp2742
S'd'
asg18
S'N'
sS'.thisRepN'
p2743
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2744
I9
sS'.thisN'
p2745
I339
sS'.thisIndex'
p2746
I9
sg15
(lp2747
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I9
sa(dp2748
g16
(lp2749
S'd'
asg18
S'Y'
sS'.thisRepN'
p2750
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2751
I10
sS'.thisN'
p2752
I340
sS'.thisIndex'
p2753
I1
sg15
(lp2754
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2755
S'space'
p2756
asg95
I1
sa(dp2757
g16
(lp2758
S'k'
asg18
S'N'
sS'.thisRepN'
p2759
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2760
I11
sS'.thisN'
p2761
I341
sS'.thisIndex'
p2762
I12
sg15
(lp2763
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I12
sa(dp2764
g16
(lp2765
S'd'
asg18
S'N'
sS'.thisRepN'
p2766
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2767
I12
sS'.thisN'
p2768
I342
sS'.thisIndex'
p2769
I1
sg15
(lp2770
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I1
sa(dp2771
g16
(lp2772
S'd'
asg18
S'Y'
sS'.thisRepN'
p2773
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2774
I13
sS'.thisN'
p2775
I343
sS'.thisIndex'
p2776
I6
sg15
(lp2777
S'd'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2778
S'space'
p2779
asg95
I6
sa(dp2780
g16
(lp2781
S'k'
asg18
S'Y'
sS'.thisRepN'
p2782
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2783
I14
sS'.thisN'
p2784
I344
sS'.thisIndex'
p2785
I9
sg15
(lp2786
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2787
S'space'
p2788
asg95
I9
sa(dp2789
g16
(lp2790
S'k'
asg18
S'Y'
sS'.thisRepN'
p2791
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2792
I0
sS'.thisN'
p2793
I345
sS'.thisIndex'
p2794
I9
sg15
(lp2795
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2796
S'space'
p2797
asg95
I9
sa(dp2798
g16
(lp2799
S'k'
asg18
S'Y'
sS'.thisRepN'
p2800
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2801
I1
sS'.thisN'
p2802
I346
sS'.thisIndex'
p2803
I11
sg15
(lp2804
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2805
S'space'
p2806
asg95
I11
sa(dp2807
g16
(lp2808
S'k'
asg18
S'N'
sS'.thisRepN'
p2809
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2810
I2
sS'.thisN'
p2811
I347
sS'.thisIndex'
p2812
I2
sg15
(lp2813
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2814
g16
(lp2815
S'k'
asg18
S'Y'
sS'.thisRepN'
p2816
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2817
I3
sS'.thisN'
p2818
I348
sS'.thisIndex'
p2819
I5
sg15
(lp2820
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
(lp2821
S'space'
p2822
asg95
I5
sa(dp2823
g16
(lp2824
S'k'
asg18
S'N'
sg22
I45
sS'.thisN'
p2825
I349
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2826
I4
sS'.thisRepN'
p2827
I23
sg21
I48
sS'.thisIndex'
p2828
I0
sg23
I25
sg15
(lp2829
S'k'
asg30
Vf
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2830
g16
(lp2831
S'd'
asg95
I5
sS'.thisRepN'
p2832
I23
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2833
I5
sS'.thisN'
p2834
I350
sS'.thisIndex'
p2835
I5
sg15
(lp2836
S'd'
asg17
S'Y'
sg14
I8
sa(dp2837
g16
(lp2838
S'k'
asg95
I8
sS'.thisRepN'
p2839
I23
sg30
Vf
sg31
g32
sS'.thisTrialN'
p2840
I6
sS'.thisN'
p2841
I351
sS'.thisIndex'
p2842
I8
sg15
(lp2843
S'k'
asg17
S'Y'
sg14
I8
sa(dp2844
g16
(lp2845
S'd'
asg18
S'N'
sS'.thisRepN'
p2846
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2847
I7
sS'.thisN'
p2848
I352
sS'.thisIndex'
p2849
I0
sg15
(lp2850
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp2851
g16
(lp2852
S'd'
asg18
S'N'
sS'.thisRepN'
p2853
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2854
I8
sS'.thisN'
p2855
I353
sS'.thisIndex'
p2856
I7
sg15
(lp2857
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp2858
g16
(lp2859
S'k'
asg18
S'N'
sS'.thisRepN'
p2860
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2861
I9
sS'.thisN'
p2862
I354
sS'.thisIndex'
p2863
I13
sg15
(lp2864
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I13
sa(dp2865
g16
(lp2866
S'd'
asg18
S'Y'
sS'.thisRepN'
p2867
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2868
I10
sS'.thisN'
p2869
I355
sS'.thisIndex'
p2870
I12
sg15
(lp2871
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2872
S'space'
p2873
asg95
I12
sa(dp2874
g16
(lp2875
S'k'
asg18
S'Y'
sS'.thisRepN'
p2876
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2877
I11
sS'.thisN'
p2878
I356
sS'.thisIndex'
p2879
I13
sg15
(lp2880
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2881
S'space'
p2882
asg95
I13
sa(dp2883
g16
(lp2884
S'k'
asg18
S'N'
sS'.thisRepN'
p2885
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2886
I12
sS'.thisN'
p2887
I357
sS'.thisIndex'
p2888
I13
sg15
(lp2889
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I13
sa(dp2890
g16
(lp2891
S'd'
asg18
S'N'
sS'.thisRepN'
p2892
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2893
I13
sS'.thisN'
p2894
I358
sS'.thisIndex'
p2895
I2
sg15
(lp2896
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp2897
g16
(lp2898
S'k'
asg18
S'N'
sS'.thisRepN'
p2899
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2900
I14
sS'.thisN'
p2901
I359
sS'.thisIndex'
p2902
I5
sg15
(lp2903
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp2904
g16
(lp2905
S'd'
asg18
S'Y'
sS'.thisRepN'
p2906
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2907
I0
sS'.thisN'
p2908
I360
sS'.thisIndex'
p2909
I8
sg15
(lp2910
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2911
S'space'
p2912
asg95
I8
sa(dp2913
g16
(lp2914
S'd'
asg18
S'Y'
sS'.thisRepN'
p2915
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2916
I1
sS'.thisN'
p2917
I361
sS'.thisIndex'
p2918
I6
sg15
(lp2919
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2920
S'space'
p2921
asg95
I6
sa(dp2922
g16
(lp2923
S'd'
asg18
S'Y'
sS'.thisRepN'
p2924
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2925
I2
sS'.thisN'
p2926
I362
sS'.thisIndex'
p2927
I4
sg15
(lp2928
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2929
S'space'
p2930
asg95
I4
sa(dp2931
g16
(lp2932
S'd'
asg18
S'Y'
sS'.thisRepN'
p2933
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2934
I3
sS'.thisN'
p2935
I363
sS'.thisIndex'
p2936
I9
sg15
(lp2937
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2938
S'space'
p2939
asg95
I9
sa(dp2940
g16
(lp2941
S'k'
asg18
S'N'
sS'.thisRepN'
p2942
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2943
I4
sS'.thisN'
p2944
I364
sS'.thisIndex'
p2945
I2
sg15
(lp2946
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp2947
g16
(lp2948
S'd'
asg18
S'N'
sS'.thisRepN'
p2949
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2950
I5
sS'.thisN'
p2951
I365
sS'.thisIndex'
p2952
I10
sg15
(lp2953
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I10
sa(dp2954
g16
(lp2955
S'k'
asg18
S'Y'
sS'.thisRepN'
p2956
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2957
I6
sS'.thisN'
p2958
I366
sS'.thisIndex'
p2959
I11
sg15
(lp2960
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2961
S'space'
p2962
asg95
I11
sa(dp2963
g16
(lp2964
S'd'
asg18
S'N'
sS'.thisRepN'
p2965
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2966
I7
sS'.thisN'
p2967
I367
sS'.thisIndex'
p2968
I0
sg15
(lp2969
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp2970
g16
(lp2971
S'k'
asg18
S'Y'
sS'.thisRepN'
p2972
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2973
I8
sS'.thisN'
p2974
I368
sS'.thisIndex'
p2975
I9
sg15
(lp2976
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp2977
S'space'
p2978
asg95
I9
sa(dp2979
g16
(lp2980
S'd'
asg18
S'N'
sS'.thisRepN'
p2981
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2982
I9
sS'.thisN'
p2983
I369
sS'.thisIndex'
p2984
I8
sg15
(lp2985
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp2986
g16
(lp2987
S'k'
asg18
S'N'
sS'.thisRepN'
p2988
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2989
I10
sS'.thisN'
p2990
I370
sS'.thisIndex'
p2991
I7
sg15
(lp2992
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp2993
g16
(lp2994
S'd'
asg18
S'N'
sS'.thisRepN'
p2995
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2996
I11
sS'.thisN'
p2997
I371
sS'.thisIndex'
p2998
I5
sg15
(lp2999
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp3000
g16
(lp3001
S'k'
asg18
S'Y'
sS'.thisRepN'
p3002
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3003
I12
sS'.thisN'
p3004
I372
sS'.thisIndex'
p3005
I3
sg15
(lp3006
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3007
S'space'
p3008
asg95
I3
sa(dp3009
g16
(lp3010
S'k'
asg18
S'N'
sS'.thisRepN'
p3011
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3012
I13
sS'.thisN'
p3013
I373
sS'.thisIndex'
p3014
I1
sg15
(lp3015
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp3016
g16
(lp3017
S'k'
asg18
S'Y'
sS'.thisRepN'
p3018
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3019
I14
sS'.thisN'
p3020
I374
sS'.thisIndex'
p3021
I4
sg15
(lp3022
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3023
S'space'
p3024
asg95
I4
sa(dp3025
g16
(lp3026
S'k'
asg18
S'N'
sS'.thisRepN'
p3027
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3028
I0
sS'.thisN'
p3029
I375
sS'.thisIndex'
p3030
I9
sg15
(lp3031
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp3032
g16
(lp3033
S'k'
asg18
S'N'
sS'.thisRepN'
p3034
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3035
I1
sS'.thisN'
p3036
I376
sS'.thisIndex'
p3037
I6
sg15
(lp3038
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp3039
g16
(lp3040
S'k'
asg18
S'Y'
sS'.thisRepN'
p3041
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3042
I2
sS'.thisN'
p3043
I377
sS'.thisIndex'
p3044
I11
sg15
(lp3045
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3046
S'space'
p3047
asg95
I11
sa(dp3048
g16
(lp3049
S'd'
asg18
S'N'
sS'.thisRepN'
p3050
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3051
I3
sS'.thisN'
p3052
I378
sS'.thisIndex'
p3053
I13
sg15
(lp3054
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I13
sa(dp3055
g16
(lp3056
S'k'
asg18
S'Y'
sS'.thisRepN'
p3057
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3058
I4
sS'.thisN'
p3059
I379
sS'.thisIndex'
p3060
I0
sg15
(lp3061
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3062
S'space'
p3063
asg95
I0
sa(dp3064
g16
(lp3065
S'd'
asg18
S'Y'
sS'.thisRepN'
p3066
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3067
I5
sS'.thisN'
p3068
I380
sS'.thisIndex'
p3069
I13
sg15
(lp3070
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3071
S'space'
p3072
asg95
I13
sa(dp3073
g16
(lp3074
S'k'
asg18
S'N'
sS'.thisRepN'
p3075
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3076
I6
sS'.thisN'
p3077
I381
sS'.thisIndex'
p3078
I1
sg15
(lp3079
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp3080
g16
(lp3081
S'k'
asg18
S'N'
sS'.thisRepN'
p3082
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3083
I7
sS'.thisN'
p3084
I382
sS'.thisIndex'
p3085
I14
sg15
(lp3086
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I14
sa(dp3087
g16
(lp3088
S'k'
asg18
S'N'
sS'.thisRepN'
p3089
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3090
I8
sS'.thisN'
p3091
I383
sS'.thisIndex'
p3092
I13
sg15
(lp3093
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3094
S'space'
p3095
asg95
I13
sa(dp3096
g16
(lp3097
S'k'
asg18
S'Y'
sS'.thisRepN'
p3098
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3099
I9
sS'.thisN'
p3100
I384
sS'.thisIndex'
p3101
I1
sg15
(lp3102
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3103
S'space'
p3104
asg95
I1
sa(dp3105
g16
(lp3106
S'k'
asg18
S'Y'
sS'.thisRepN'
p3107
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3108
I10
sS'.thisN'
p3109
I385
sS'.thisIndex'
p3110
I0
sg15
(lp3111
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3112
S'space'
p3113
asg95
I0
sa(dp3114
g16
(lp3115
S'd'
asg18
S'N'
sS'.thisRepN'
p3116
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3117
I11
sS'.thisN'
p3118
I386
sS'.thisIndex'
p3119
I10
sg15
(lp3120
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I10
sa(dp3121
g16
(lp3122
S'd'
asg18
S'Y'
sS'.thisRepN'
p3123
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3124
I12
sS'.thisN'
p3125
I387
sS'.thisIndex'
p3126
I0
sg15
(lp3127
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3128
S'space'
p3129
asg95
I0
sa(dp3130
g16
(lp3131
S'k'
asg18
S'Y'
sS'.thisRepN'
p3132
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3133
I13
sS'.thisN'
p3134
I388
sS'.thisIndex'
p3135
I2
sg15
(lp3136
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3137
S'space'
p3138
asg95
I2
sa(dp3139
g16
(lp3140
S'k'
asg18
S'Y'
sS'.thisRepN'
p3141
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3142
I14
sS'.thisN'
p3143
I389
sS'.thisIndex'
p3144
I8
sg15
(lp3145
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3146
S'space'
p3147
asg95
I8
sa(dp3148
g16
(lp3149
S'k'
asg18
S'Y'
sS'.thisRepN'
p3150
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3151
I0
sS'.thisN'
p3152
I390
sS'.thisIndex'
p3153
I3
sg15
(lp3154
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3155
S'space'
p3156
asg95
I3
sa(dp3157
g16
(lp3158
S'd'
asg18
S'N'
sS'.thisRepN'
p3159
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3160
I1
sS'.thisN'
p3161
I391
sS'.thisIndex'
p3162
I14
sg15
(lp3163
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I14
sa(dp3164
g16
(lp3165
S'k'
asg18
S'N'
sS'.thisRepN'
p3166
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3167
I2
sS'.thisN'
p3168
I392
sS'.thisIndex'
p3169
I3
sg15
(lp3170
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp3171
g16
(lp3172
S'k'
asg18
S'Y'
sS'.thisRepN'
p3173
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3174
I3
sS'.thisN'
p3175
I393
sS'.thisIndex'
p3176
I3
sg15
(lp3177
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3178
S'space'
p3179
asg95
I3
sa(dp3180
g16
(lp3181
S'k'
asg18
S'N'
sS'.thisRepN'
p3182
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3183
I4
sS'.thisN'
p3184
I394
sS'.thisIndex'
p3185
I11
sg15
(lp3186
S'd'
asg30
Vf
sg17
S'N'
sg14
I8
sg19
Nsg95
I11
sa(dp3187
g16
(lp3188
S'd'
asg18
S'N'
sS'.thisRepN'
p3189
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3190
I5
sS'.thisN'
p3191
I395
sS'.thisIndex'
p3192
I10
sg15
(lp3193
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I10
sa(dp3194
g16
(lp3195
S'k'
asg18
S'N'
sS'.thisRepN'
p3196
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3197
I6
sS'.thisN'
p3198
I396
sS'.thisIndex'
p3199
I14
sg15
(lp3200
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I14
sa(dp3201
g16
(lp3202
S'd'
asg18
S'N'
sS'.thisRepN'
p3203
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3204
I7
sS'.thisN'
p3205
I397
sS'.thisIndex'
p3206
I13
sg15
(lp3207
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I13
sa(dp3208
g16
(lp3209
S'k'
asg18
S'N'
sS'.thisRepN'
p3210
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3211
I8
sS'.thisN'
p3212
I398
sS'.thisIndex'
p3213
I1
sg15
(lp3214
S'k'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp3215
g16
(lp3216
S'd'
asg18
S'Y'
sg22
I47
sS'.thisN'
p3217
I399
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3218
I9
sS'.thisRepN'
p3219
I26
sg21
I49
sS'.thisIndex'
p3220
I11
sg23
I21
sg15
(lp3221
S'd'
asg30
Vf
sg17
S'Y'
sg14
I8
sg19
(lp3222
S'space'
p3223
asg95
I11
sa(dp3224
g16
(lp3225
S'k'
asg95
I5
sS'.thisRepN'
p3226
I26
sg30
Vf
sg31
g32
sS'.thisTrialN'
p3227
I10
sS'.thisN'
p3228
I400
sS'.thisIndex'
p3229
I5
sg15
(lp3230
S'k'
asg17
S'Y'
sg14
I9
sa(dp3231
g16
(lp3232
S'k'
asg95
I13
sS'.thisRepN'
p3233
I26
sg30
Vf
sg31
g32
sS'.thisTrialN'
p3234
I11
sS'.thisN'
p3235
I401
sS'.thisIndex'
p3236
I13
sg15
(lp3237
S'k'
asg17
S'Y'
sg14
I9
sa(dp3238
g16
(lp3239
S'k'
asg18
S'Y'
sS'.thisRepN'
p3240
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3241
I12
sS'.thisN'
p3242
I402
sS'.thisIndex'
p3243
I4
sg15
(lp3244
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3245
S'space'
p3246
asg95
I4
sa(dp3247
g16
(lp3248
S'k'
asg18
S'Y'
sS'.thisRepN'
p3249
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3250
I13
sS'.thisN'
p3251
I403
sS'.thisIndex'
p3252
I7
sg15
(lp3253
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3254
S'space'
p3255
asg95
I7
sa(dp3256
g16
(lp3257
S'd'
asg18
S'N'
sS'.thisRepN'
p3258
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3259
I14
sS'.thisN'
p3260
I404
sS'.thisIndex'
p3261
I2
sg15
(lp3262
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3263
g16
(lp3264
S'd'
asg18
S'Y'
sS'.thisRepN'
p3265
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3266
I0
sS'.thisN'
p3267
I405
sS'.thisIndex'
p3268
I12
sg15
(lp3269
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3270
S'space'
p3271
asg95
I12
sa(dp3272
g16
(lp3273
S'k'
asg18
S'N'
sS'.thisRepN'
p3274
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3275
I1
sS'.thisN'
p3276
I406
sS'.thisIndex'
p3277
I9
sg15
(lp3278
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3279
g16
(lp3280
S'k'
asg18
S'Y'
sS'.thisRepN'
p3281
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3282
I2
sS'.thisN'
p3283
I407
sS'.thisIndex'
p3284
I2
sg15
(lp3285
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3286
S'space'
p3287
asg95
I2
sa(dp3288
g16
(lp3289
S'k'
asg18
S'N'
sS'.thisRepN'
p3290
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3291
I3
sS'.thisN'
p3292
I408
sS'.thisIndex'
p3293
I8
sg15
(lp3294
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I8
sa(dp3295
g16
(lp3296
S'd'
asg18
S'Y'
sS'.thisRepN'
p3297
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3298
I4
sS'.thisN'
p3299
I409
sS'.thisIndex'
p3300
I10
sg15
(lp3301
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3302
S'space'
p3303
asg95
I10
sa(dp3304
g16
(lp3305
S'k'
asg18
S'N'
sS'.thisRepN'
p3306
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3307
I5
sS'.thisN'
p3308
I410
sS'.thisIndex'
p3309
I8
sg15
(lp3310
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I8
sa(dp3311
g16
(lp3312
S'k'
asg18
S'N'
sS'.thisRepN'
p3313
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3314
I6
sS'.thisN'
p3315
I411
sS'.thisIndex'
p3316
I1
sg15
(lp3317
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3318
g16
(lp3319
S'k'
asg18
S'Y'
sS'.thisRepN'
p3320
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3321
I7
sS'.thisN'
p3322
I412
sS'.thisIndex'
p3323
I14
sg15
(lp3324
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3325
S'space'
p3326
asg95
I14
sa(dp3327
g16
(lp3328
S'k'
asg18
S'N'
sS'.thisRepN'
p3329
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3330
I8
sS'.thisN'
p3331
I413
sS'.thisIndex'
p3332
I10
sg15
(lp3333
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp3334
g16
(lp3335
S'k'
asg18
S'Y'
sS'.thisRepN'
p3336
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3337
I9
sS'.thisN'
p3338
I414
sS'.thisIndex'
p3339
I14
sg15
(lp3340
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3341
S'space'
p3342
asg95
I14
sa(dp3343
g16
(lp3344
S'd'
asg18
S'Y'
sS'.thisRepN'
p3345
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3346
I10
sS'.thisN'
p3347
I415
sS'.thisIndex'
p3348
I6
sg15
(lp3349
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3350
S'space'
p3351
asg95
I6
sa(dp3352
g16
(lp3353
S'k'
asg18
S'Y'
sS'.thisRepN'
p3354
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3355
I11
sS'.thisN'
p3356
I416
sS'.thisIndex'
p3357
I2
sg15
(lp3358
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3359
S'space'
p3360
asg95
I2
sa(dp3361
g16
(lp3362
S'k'
asg18
S'N'
sS'.thisRepN'
p3363
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3364
I12
sS'.thisN'
p3365
I417
sS'.thisIndex'
p3366
I11
sg15
(lp3367
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I11
sa(dp3368
g16
(lp3369
S'd'
asg18
S'N'
sS'.thisRepN'
p3370
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3371
I13
sS'.thisN'
p3372
I418
sS'.thisIndex'
p3373
I3
sg15
(lp3374
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3375
g16
(lp3376
S'k'
asg18
S'N'
sS'.thisRepN'
p3377
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3378
I14
sS'.thisN'
p3379
I419
sS'.thisIndex'
p3380
I0
sg15
(lp3381
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3382
g16
(lp3383
S'd'
asg18
S'Y'
sS'.thisRepN'
p3384
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3385
I0
sS'.thisN'
p3386
I420
sS'.thisIndex'
p3387
I2
sg15
(lp3388
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3389
S'space'
p3390
asg95
I2
sa(dp3391
g16
(lp3392
S'k'
asg18
S'Y'
sS'.thisRepN'
p3393
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3394
I1
sS'.thisN'
p3395
I421
sS'.thisIndex'
p3396
I2
sg15
(lp3397
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3398
S'space'
p3399
asg95
I2
sa(dp3400
g16
(lp3401
S'd'
asg18
S'Y'
sS'.thisRepN'
p3402
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3403
I2
sS'.thisN'
p3404
I422
sS'.thisIndex'
p3405
I14
sg15
(lp3406
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I14
sa(dp3407
g16
(lp3408
S'd'
asg18
S'Y'
sS'.thisRepN'
p3409
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3410
I3
sS'.thisN'
p3411
I423
sS'.thisIndex'
p3412
I12
sg15
(lp3413
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3414
S'space'
p3415
asg95
I12
sa(dp3416
g16
(lp3417
S'd'
asg18
S'Y'
sS'.thisRepN'
p3418
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3419
I4
sS'.thisN'
p3420
I424
sS'.thisIndex'
p3421
I13
sg15
(lp3422
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3423
S'space'
p3424
asg95
I13
sa(dp3425
g16
(lp3426
S'k'
asg18
S'Y'
sS'.thisRepN'
p3427
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3428
I5
sS'.thisN'
p3429
I425
sS'.thisIndex'
p3430
I4
sg15
(lp3431
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3432
S'space'
p3433
asg95
I4
sa(dp3434
g16
(lp3435
S'k'
asg18
S'Y'
sS'.thisRepN'
p3436
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3437
I6
sS'.thisN'
p3438
I426
sS'.thisIndex'
p3439
I9
sg15
(lp3440
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3441
S'space'
p3442
asg95
I9
sa(dp3443
g16
(lp3444
S'k'
asg18
S'N'
sS'.thisRepN'
p3445
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3446
I7
sS'.thisN'
p3447
I427
sS'.thisIndex'
p3448
I7
sg15
(lp3449
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I7
sa(dp3450
g16
(lp3451
S'k'
asg18
S'Y'
sS'.thisRepN'
p3452
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3453
I8
sS'.thisN'
p3454
I428
sS'.thisIndex'
p3455
I9
sg15
(lp3456
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3457
S'space'
p3458
asg95
I9
sa(dp3459
g16
(lp3460
S'd'
asg18
S'N'
sS'.thisRepN'
p3461
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3462
I9
sS'.thisN'
p3463
I429
sS'.thisIndex'
p3464
I3
sg15
(lp3465
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3466
g16
(lp3467
S'd'
asg18
S'Y'
sS'.thisRepN'
p3468
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3469
I10
sS'.thisN'
p3470
I430
sS'.thisIndex'
p3471
I11
sg15
(lp3472
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3473
S'space'
p3474
asg95
I11
sa(dp3475
g16
(lp3476
S'k'
asg18
S'Y'
sS'.thisRepN'
p3477
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3478
I11
sS'.thisN'
p3479
I431
sS'.thisIndex'
p3480
I10
sg15
(lp3481
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3482
S'space'
p3483
asg95
I10
sa(dp3484
g16
(lp3485
S'd'
asg18
S'Y'
sS'.thisRepN'
p3486
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3487
I12
sS'.thisN'
p3488
I432
sS'.thisIndex'
p3489
I10
sg15
(lp3490
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3491
S'space'
p3492
asg95
I10
sa(dp3493
g16
(lp3494
S'd'
asg18
S'N'
sS'.thisRepN'
p3495
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3496
I13
sS'.thisN'
p3497
I433
sS'.thisIndex'
p3498
I7
sg15
(lp3499
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I7
sa(dp3500
g16
(lp3501
S'k'
asg18
S'N'
sS'.thisRepN'
p3502
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3503
I14
sS'.thisN'
p3504
I434
sS'.thisIndex'
p3505
I7
sg15
(lp3506
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I7
sa(dp3507
g16
(lp3508
S'd'
asg18
S'N'
sS'.thisRepN'
p3509
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3510
I0
sS'.thisN'
p3511
I435
sS'.thisIndex'
p3512
I13
sg15
(lp3513
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I13
sa(dp3514
g16
(lp3515
S'k'
asg18
S'N'
sS'.thisRepN'
p3516
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3517
I1
sS'.thisN'
p3518
I436
sS'.thisIndex'
p3519
I10
sg15
(lp3520
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp3521
g16
(lp3522
S'k'
asg18
S'Y'
sS'.thisRepN'
p3523
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3524
I2
sS'.thisN'
p3525
I437
sS'.thisIndex'
p3526
I1
sg15
(lp3527
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3528
S'space'
p3529
asg95
I1
sa(dp3530
g16
(lp3531
S'd'
asg18
S'Y'
sS'.thisRepN'
p3532
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3533
I3
sS'.thisN'
p3534
I438
sS'.thisIndex'
p3535
I4
sg15
(lp3536
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3537
S'space'
p3538
asg95
I4
sa(dp3539
g16
(lp3540
S'k'
asg18
S'Y'
sS'.thisRepN'
p3541
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3542
I4
sS'.thisN'
p3543
I439
sS'.thisIndex'
p3544
I5
sg15
(lp3545
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3546
S'space'
p3547
asg95
I5
sa(dp3548
g16
(lp3549
S'd'
asg18
S'N'
sS'.thisRepN'
p3550
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3551
I5
sS'.thisN'
p3552
I440
sS'.thisIndex'
p3553
I6
sg15
(lp3554
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3555
g16
(lp3556
S'k'
asg18
S'N'
sS'.thisRepN'
p3557
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3558
I6
sS'.thisN'
p3559
I441
sS'.thisIndex'
p3560
I1
sg15
(lp3561
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3562
g16
(lp3563
S'd'
asg18
S'N'
sS'.thisRepN'
p3564
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3565
I7
sS'.thisN'
p3566
I442
sS'.thisIndex'
p3567
I10
sg15
(lp3568
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp3569
g16
(lp3570
S'd'
asg18
S'N'
sS'.thisRepN'
p3571
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3572
I8
sS'.thisN'
p3573
I443
sS'.thisIndex'
p3574
I12
sg15
(lp3575
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I12
sa(dp3576
g16
(lp3577
S'k'
asg18
S'Y'
sS'.thisRepN'
p3578
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3579
I9
sS'.thisN'
p3580
I444
sS'.thisIndex'
p3581
I11
sg15
(lp3582
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3583
S'space'
p3584
asg95
I11
sa(dp3585
g16
(lp3586
S'd'
asg18
S'N'
sS'.thisRepN'
p3587
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3588
I10
sS'.thisN'
p3589
I445
sS'.thisIndex'
p3590
I12
sg15
(lp3591
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I12
sa(dp3592
g16
(lp3593
S'k'
asg18
S'Y'
sS'.thisRepN'
p3594
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3595
I11
sS'.thisN'
p3596
I446
sS'.thisIndex'
p3597
I13
sg15
(lp3598
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
(lp3599
S'space'
p3600
asg95
I13
sa(dp3601
g16
(lp3602
S'k'
asg18
S'N'
sS'.thisRepN'
p3603
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3604
I12
sS'.thisN'
p3605
I447
sS'.thisIndex'
p3606
I5
sg15
(lp3607
S'k'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3608
g16
(lp3609
S'd'
asg18
S'N'
sS'.thisRepN'
p3610
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3611
I13
sS'.thisN'
p3612
I448
sS'.thisIndex'
p3613
I12
sg15
(lp3614
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I12
sa(dp3615
g16
(lp3616
S'd'
asg18
S'N'
sg22
I47
sS'.thisN'
p3617
I449
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3618
I14
sS'.thisRepN'
p3619
I29
sg21
I50
sS'.thisIndex'
p3620
I12
sg23
I25
sg15
(lp3621
S'd'
asg30
Vf
sg17
S'Y'
sg14
I9
sg19
Nsg95
I12
sa(dp3622
g16
(lp3623
S'd'
asg95
I0
sS'.thisRepN'
p3624
I30
sg30
Vf
sg31
g32
sS'.thisTrialN'
p3625
I0
sS'.thisN'
p3626
I450
sS'.thisIndex'
p3627
I0
sg15
(lp3628
S'd'
asg17
S'Y'
sg14
I10
sa(dp3629
g16
(lp3630
S'd'
asg95
I6
sS'.thisRepN'
p3631
I30
sg30
Vf
sg31
g32
sS'.thisTrialN'
p3632
I1
sS'.thisN'
p3633
I451
sS'.thisIndex'
p3634
I6
sg15
(lp3635
S'd'
asg17
S'Y'
sg14
I10
sa(dp3636
g16
(lp3637
S'd'
asg18
S'Y'
sS'.thisRepN'
p3638
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3639
I2
sS'.thisN'
p3640
I452
sS'.thisIndex'
p3641
I13
sg15
(lp3642
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3643
S'space'
p3644
asg95
I13
sa(dp3645
g16
(lp3646
S'd'
asg18
S'Y'
sS'.thisRepN'
p3647
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3648
I3
sS'.thisN'
p3649
I453
sS'.thisIndex'
p3650
I6
sg15
(lp3651
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3652
S'space'
p3653
asg95
I6
sa(dp3654
g16
(lp3655
S'k'
asg18
S'N'
sS'.thisRepN'
p3656
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3657
I4
sS'.thisN'
p3658
I454
sS'.thisIndex'
p3659
I12
sg15
(lp3660
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I12
sa(dp3661
g16
(lp3662
S'k'
asg18
S'Y'
sS'.thisRepN'
p3663
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3664
I5
sS'.thisN'
p3665
I455
sS'.thisIndex'
p3666
I8
sg15
(lp3667
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3668
S'space'
p3669
asg95
I8
sa(dp3670
g16
(lp3671
S'k'
asg18
S'N'
sS'.thisRepN'
p3672
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3673
I6
sS'.thisN'
p3674
I456
sS'.thisIndex'
p3675
I14
sg15
(lp3676
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I14
sa(dp3677
g16
(lp3678
S'k'
asg18
S'N'
sS'.thisRepN'
p3679
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3680
I7
sS'.thisN'
p3681
I457
sS'.thisIndex'
p3682
I6
sg15
(lp3683
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I6
sa(dp3684
g16
(lp3685
S'd'
asg18
S'N'
sS'.thisRepN'
p3686
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3687
I8
sS'.thisN'
p3688
I458
sS'.thisIndex'
p3689
I7
sg15
(lp3690
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I7
sa(dp3691
g16
(lp3692
S'k'
asg18
S'Y'
sS'.thisRepN'
p3693
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3694
I9
sS'.thisN'
p3695
I459
sS'.thisIndex'
p3696
I9
sg15
(lp3697
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3698
S'space'
p3699
asg95
I9
sa(dp3700
g16
(lp3701
S'd'
asg18
S'N'
sS'.thisRepN'
p3702
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3703
I10
sS'.thisN'
p3704
I460
sS'.thisIndex'
p3705
I13
sg15
(lp3706
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I13
sa(dp3707
g16
(lp3708
S'd'
asg18
S'Y'
sS'.thisRepN'
p3709
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3710
I11
sS'.thisN'
p3711
I461
sS'.thisIndex'
p3712
I7
sg15
(lp3713
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3714
S'space'
p3715
asg95
I7
sa(dp3716
g16
(lp3717
S'd'
asg18
S'Y'
sS'.thisRepN'
p3718
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3719
I12
sS'.thisN'
p3720
I462
sS'.thisIndex'
p3721
I0
sg15
(lp3722
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3723
S'space'
p3724
asg95
I0
sa(dp3725
g16
(lp3726
S'd'
asg18
S'N'
sS'.thisRepN'
p3727
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3728
I13
sS'.thisN'
p3729
I463
sS'.thisIndex'
p3730
I6
sg15
(lp3731
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I6
sa(dp3732
g16
(lp3733
S'k'
asg18
S'N'
sS'.thisRepN'
p3734
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3735
I14
sS'.thisN'
p3736
I464
sS'.thisIndex'
p3737
I14
sg15
(lp3738
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I14
sa(dp3739
g16
(lp3740
S'k'
asg18
S'Y'
sS'.thisRepN'
p3741
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3742
I0
sS'.thisN'
p3743
I465
sS'.thisIndex'
p3744
I0
sg15
(lp3745
S'd'
asg30
Vf
sg17
S'N'
sg14
I10
sg19
(lp3746
S'space'
p3747
asg95
I0
sa(dp3748
g16
(lp3749
S'd'
asg18
S'Y'
sS'.thisRepN'
p3750
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3751
I1
sS'.thisN'
p3752
I466
sS'.thisIndex'
p3753
I2
sg15
(lp3754
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3755
S'space'
p3756
asg95
I2
sa(dp3757
g16
(lp3758
S'k'
asg18
S'Y'
sS'.thisRepN'
p3759
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3760
I2
sS'.thisN'
p3761
I467
sS'.thisIndex'
p3762
I12
sg15
(lp3763
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3764
S'space'
p3765
asg95
I12
sa(dp3766
g16
(lp3767
S'k'
asg18
S'N'
sS'.thisRepN'
p3768
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3769
I3
sS'.thisN'
p3770
I468
sS'.thisIndex'
p3771
I5
sg15
(lp3772
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3773
g16
(lp3774
S'k'
asg18
S'N'
sS'.thisRepN'
p3775
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3776
I4
sS'.thisN'
p3777
I469
sS'.thisIndex'
p3778
I13
sg15
(lp3779
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I13
sa(dp3780
g16
(lp3781
S'd'
asg18
S'Y'
sS'.thisRepN'
p3782
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3783
I5
sS'.thisN'
p3784
I470
sS'.thisIndex'
p3785
I9
sg15
(lp3786
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3787
S'space'
p3788
asg95
I9
sa(dp3789
g16
(lp3790
S'k'
asg18
S'N'
sS'.thisRepN'
p3791
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3792
I6
sS'.thisN'
p3793
I471
sS'.thisIndex'
p3794
I5
sg15
(lp3795
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3796
g16
(lp3797
S'k'
asg18
S'Y'
sS'.thisRepN'
p3798
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3799
I7
sS'.thisN'
p3800
I472
sS'.thisIndex'
p3801
I1
sg15
(lp3802
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3803
S'space'
p3804
asg95
I1
sa(dp3805
g16
(lp3806
S'd'
asg18
S'Y'
sS'.thisRepN'
p3807
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3808
I8
sS'.thisN'
p3809
I473
sS'.thisIndex'
p3810
I12
sg15
(lp3811
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3812
S'space'
p3813
asg95
I12
sa(dp3814
g16
(lp3815
S'd'
asg18
S'Y'
sS'.thisRepN'
p3816
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3817
I9
sS'.thisN'
p3818
I474
sS'.thisIndex'
p3819
I0
sg15
(lp3820
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3821
S'space'
p3822
asg95
I0
sa(dp3823
g16
(lp3824
S'k'
asg18
S'Y'
sS'.thisRepN'
p3825
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3826
I10
sS'.thisN'
p3827
I475
sS'.thisIndex'
p3828
I13
sg15
(lp3829
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3830
S'space'
p3831
asg95
I13
sa(dp3832
g16
(lp3833
S'k'
asg18
S'N'
sS'.thisRepN'
p3834
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3835
I11
sS'.thisN'
p3836
I476
sS'.thisIndex'
p3837
I14
sg15
(lp3838
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I14
sa(dp3839
g16
(lp3840
S'd'
asg18
S'Y'
sS'.thisRepN'
p3841
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3842
I12
sS'.thisN'
p3843
I477
sS'.thisIndex'
p3844
I9
sg15
(lp3845
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3846
S'space'
p3847
asg95
I9
sa(dp3848
g16
(lp3849
S'k'
asg18
S'N'
sS'.thisRepN'
p3850
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3851
I13
sS'.thisN'
p3852
I478
sS'.thisIndex'
p3853
I11
sg15
(lp3854
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I11
sa(dp3855
g16
(lp3856
S'd'
asg18
S'N'
sS'.thisRepN'
p3857
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3858
I14
sS'.thisN'
p3859
I479
sS'.thisIndex'
p3860
I11
sg15
(lp3861
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I11
sa(dp3862
g16
(lp3863
S'd'
asg18
S'N'
sS'.thisRepN'
p3864
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3865
I0
sS'.thisN'
p3866
I480
sS'.thisIndex'
p3867
I1
sg15
(lp3868
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3869
g16
(lp3870
S'd'
asg18
S'Y'
sS'.thisRepN'
p3871
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3872
I1
sS'.thisN'
p3873
I481
sS'.thisIndex'
p3874
I4
sg15
(lp3875
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3876
S'space'
p3877
asg95
I4
sa(dp3878
g16
(lp3879
S'k'
asg18
S'N'
sS'.thisRepN'
p3880
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3881
I2
sS'.thisN'
p3882
I482
sS'.thisIndex'
p3883
I0
sg15
(lp3884
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp3885
g16
(lp3886
S'd'
asg18
S'Y'
sS'.thisRepN'
p3887
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3888
I3
sS'.thisN'
p3889
I483
sS'.thisIndex'
p3890
I10
sg15
(lp3891
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3892
S'space'
p3893
asg95
I10
sa(dp3894
g16
(lp3895
S'k'
asg18
S'N'
sS'.thisRepN'
p3896
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3897
I4
sS'.thisN'
p3898
I484
sS'.thisIndex'
p3899
I12
sg15
(lp3900
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I12
sa(dp3901
g16
(lp3902
S'd'
asg18
S'N'
sS'.thisRepN'
p3903
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3904
I5
sS'.thisN'
p3905
I485
sS'.thisIndex'
p3906
I4
sg15
(lp3907
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I4
sa(dp3908
g16
(lp3909
S'k'
asg18
S'N'
sS'.thisRepN'
p3910
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3911
I6
sS'.thisN'
p3912
I486
sS'.thisIndex'
p3913
I14
sg15
(lp3914
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I14
sa(dp3915
g16
(lp3916
S'k'
asg18
S'N'
sS'.thisRepN'
p3917
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3918
I7
sS'.thisN'
p3919
I487
sS'.thisIndex'
p3920
I2
sg15
(lp3921
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I2
sa(dp3922
g16
(lp3923
S'd'
asg18
S'N'
sS'.thisRepN'
p3924
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3925
I8
sS'.thisN'
p3926
I488
sS'.thisIndex'
p3927
I9
sg15
(lp3928
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3929
g16
(lp3930
S'k'
asg18
S'Y'
sS'.thisRepN'
p3931
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3932
I9
sS'.thisN'
p3933
I489
sS'.thisIndex'
p3934
I5
sg15
(lp3935
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3936
S'space'
p3937
asg95
I5
sa(dp3938
g16
(lp3939
S'd'
asg18
S'Y'
sS'.thisRepN'
p3940
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3941
I10
sS'.thisN'
p3942
I490
sS'.thisIndex'
p3943
I14
sg15
(lp3944
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3945
S'space'
p3946
asg95
I14
sa(dp3947
g16
(lp3948
S'd'
asg18
S'N'
sS'.thisRepN'
p3949
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3950
I11
sS'.thisN'
p3951
I491
sS'.thisIndex'
p3952
I1
sg15
(lp3953
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3954
g16
(lp3955
S'k'
asg18
S'N'
sS'.thisRepN'
p3956
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3957
I12
sS'.thisN'
p3958
I492
sS'.thisIndex'
p3959
I4
sg15
(lp3960
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I4
sa(dp3961
g16
(lp3962
S'k'
asg18
S'Y'
sS'.thisRepN'
p3963
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3964
I13
sS'.thisN'
p3965
I493
sS'.thisIndex'
p3966
I6
sg15
(lp3967
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3968
S'space'
p3969
asg95
I6
sa(dp3970
g16
(lp3971
S'd'
asg18
S'Y'
sS'.thisRepN'
p3972
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3973
I14
sS'.thisN'
p3974
I494
sS'.thisIndex'
p3975
I6
sg15
(lp3976
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp3977
S'space'
p3978
asg95
I6
sa(dp3979
g16
(lp3980
S'k'
asg18
S'N'
sS'.thisRepN'
p3981
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3982
I0
sS'.thisN'
p3983
I495
sS'.thisIndex'
p3984
I2
sg15
(lp3985
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I2
sa(dp3986
g16
(lp3987
S'k'
asg18
S'N'
sS'.thisRepN'
p3988
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3989
I1
sS'.thisN'
p3990
I496
sS'.thisIndex'
p3991
I14
sg15
(lp3992
S'k'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I14
sa(dp3993
g16
(lp3994
S'd'
asg18
S'Y'
sS'.thisRepN'
p3995
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3996
I2
sS'.thisN'
p3997
I497
sS'.thisIndex'
p3998
I13
sg15
(lp3999
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp4000
S'space'
p4001
asg95
I13
sa(dp4002
g16
(lp4003
S'd'
asg18
S'Y'
sS'.thisRepN'
p4004
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4005
I3
sS'.thisN'
p4006
I498
sS'.thisIndex'
p4007
I0
sg15
(lp4008
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
(lp4009
S'space'
p4010
asg95
I0
sa(dp4011
g16
(lp4012
S'd'
asg18
S'Y'
sg22
I47
sS'.thisN'
p4013
I499
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4014
I4
sS'.thisRepN'
p4015
I33
sg21
I49
sS'.thisIndex'
p4016
I2
sg23
I24
sg15
(lp4017
S'd'
asg30
Vf
sg17
S'Y'
sg14
I10
sg19
Nsg95
I2
sa(dp4018
g16
(lp4019
S'k'
asS'.thisIndex'
p4020
I14
sS'.thisRepN'
p4021
I33
sg26
S'Y'
sg30
Vf
sg31
g32
sS'.thisTrialN'
p4022
I5
sS'.thisN'
p4023
I500
sg25
S'Y'
sg24
S'Y'
sg15
(lp4024
S'd'
asg17
S'Y'
sg14
I11
sg95
I14
sa(dp4025
g16
(lp4026
S'd'
asS'.thisIndex'
p4027
I9
sS'.thisRepN'
p4028
I33
sg26
S'Y'
sg30
Vf
sg31
g32
sS'.thisTrialN'
p4029
I6
sS'.thisN'
p4030
I501
sg25
S'Y'
sg15
(lp4031
S'k'
asg17
S'Y'
sg14
I11
sg95
I9
sa(dp4032
g16
(lp4033
S'k'
asg18
S'N'
sS'.thisRepN'
p4034
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4035
I7
sS'.thisN'
p4036
I502
sg25
S'Y'
sg15
(lp4037
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I11
sS'.thisIndex'
p4038
I11
sa(dp4039
g16
(lp4040
S'k'
asg18
S'Y'
sS'.thisRepN'
p4041
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4042
I8
sS'.thisN'
p4043
I503
sg25
S'Y'
sg15
(lp4044
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4045
S'space'
p4046
asg95
I10
sS'.thisIndex'
p4047
I10
sa(dp4048
g16
(lp4049
S'd'
asg18
S'N'
sS'.thisRepN'
p4050
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4051
I9
sS'.thisN'
p4052
I504
sg25
S'Y'
sg15
(lp4053
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4054
I2
sa(dp4055
g16
(lp4056
S'd'
asg18
S'N'
sS'.thisRepN'
p4057
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4058
I10
sS'.thisN'
p4059
I505
sg25
S'Y'
sg15
(lp4060
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4061
I5
sa(dp4062
g16
(lp4063
S'd'
asg18
S'Y'
sS'.thisRepN'
p4064
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4065
I11
sS'.thisN'
p4066
I506
sg25
S'Y'
sg15
(lp4067
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4068
S'space'
p4069
asg95
I6
sS'.thisIndex'
p4070
I6
sa(dp4071
g16
(lp4072
S'd'
asg18
S'N'
sS'.thisRepN'
p4073
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4074
I12
sS'.thisN'
p4075
I507
sg25
S'Y'
sg15
(lp4076
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4077
I3
sa(dp4078
g16
(lp4079
S'k'
asg18
S'N'
sS'.thisRepN'
p4080
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4081
I13
sS'.thisN'
p4082
I508
sg25
S'Y'
sg15
(lp4083
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4084
I10
sa(dp4085
g16
(lp4086
S'k'
asg18
S'N'
sS'.thisRepN'
p4087
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4088
I14
sS'.thisN'
p4089
I509
sg25
S'Y'
sg15
(lp4090
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4091
I5
sa(dp4092
g16
(lp4093
S'd'
asg18
S'N'
sS'.thisRepN'
p4094
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4095
I0
sS'.thisN'
p4096
I510
sg25
S'Y'
sg15
(lp4097
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4098
S'space'
p4099
asg95
I14
sS'.thisIndex'
p4100
I14
sa(dp4101
g16
(lp4102
S'd'
asg18
S'N'
sS'.thisRepN'
p4103
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4104
I1
sS'.thisN'
p4105
I511
sg25
S'Y'
sg15
(lp4106
S'd'
asg30
Vf
sg17
S'N'
sg14
I11
sg19
(lp4107
S'space'
p4108
asg95
I10
sS'.thisIndex'
p4109
I10
sa(dp4110
g16
(lp4111
S'k'
asg18
S'Y'
sS'.thisRepN'
p4112
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4113
I2
sS'.thisN'
p4114
I512
sg25
S'Y'
sg15
(lp4115
S'k'
asg30
Vf
sg17
S'N'
sg14
I11
sg19
(lp4116
S'space'
p4117
asg95
I8
sS'.thisIndex'
p4118
I8
sa(dp4119
g16
(lp4120
S'd'
asg18
S'Y'
sS'.thisRepN'
p4121
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4122
I3
sS'.thisN'
p4123
I513
sg25
S'Y'
sg15
(lp4124
S'd'
asg30
Vf
sg17
S'N'
sg14
I11
sg19
(lp4125
S'space'
p4126
asg95
I1
sS'.thisIndex'
p4127
I1
sa(dp4128
g16
(lp4129
S'k'
asg18
S'N'
sS'.thisRepN'
p4130
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4131
I4
sS'.thisN'
p4132
I514
sg25
S'Y'
sg15
(lp4133
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4134
I0
sa(dp4135
g16
(lp4136
S'd'
asg18
S'Y'
sS'.thisRepN'
p4137
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4138
I5
sS'.thisN'
p4139
I515
sg25
S'Y'
sg15
(lp4140
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4141
S'space'
p4142
asg95
I12
sS'.thisIndex'
p4143
I12
sa(dp4144
g16
(lp4145
S'd'
asg18
S'Y'
sS'.thisRepN'
p4146
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4147
I6
sS'.thisN'
p4148
I516
sg25
S'Y'
sg15
(lp4149
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4150
S'space'
p4151
asg95
I6
sS'.thisIndex'
p4152
I6
sa(dp4153
g16
(lp4154
S'k'
asg18
S'N'
sS'.thisRepN'
p4155
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4156
I7
sS'.thisN'
p4157
I517
sg25
S'Y'
sg15
(lp4158
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4159
I6
sa(dp4160
g16
(lp4161
S'k'
asg18
S'Y'
sS'.thisRepN'
p4162
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4163
I8
sS'.thisN'
p4164
I518
sg25
S'Y'
sg15
(lp4165
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4166
S'space'
p4167
asg95
I1
sS'.thisIndex'
p4168
I1
sa(dp4169
g16
(lp4170
S'd'
asg18
S'Y'
sS'.thisRepN'
p4171
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4172
I9
sS'.thisN'
p4173
I519
sg25
S'Y'
sg15
(lp4174
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4175
S'space'
p4176
asg95
I8
sS'.thisIndex'
p4177
I8
sa(dp4178
g16
(lp4179
S'k'
asg18
S'N'
sS'.thisRepN'
p4180
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4181
I10
sS'.thisN'
p4182
I520
sg25
S'Y'
sg15
(lp4183
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4184
I2
sa(dp4185
g16
(lp4186
S'd'
asg18
S'Y'
sS'.thisRepN'
p4187
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4188
I11
sS'.thisN'
p4189
I521
sg25
S'Y'
sg15
(lp4190
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4191
S'space'
p4192
asg95
I9
sS'.thisIndex'
p4193
I9
sa(dp4194
g16
(lp4195
S'k'
asg18
S'Y'
sS'.thisRepN'
p4196
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4197
I12
sS'.thisN'
p4198
I522
sg25
S'Y'
sg15
(lp4199
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4200
S'space'
p4201
asg95
I10
sS'.thisIndex'
p4202
I10
sa(dp4203
g16
(lp4204
S'k'
asg18
S'Y'
sS'.thisRepN'
p4205
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4206
I13
sS'.thisN'
p4207
I523
sg25
S'Y'
sg15
(lp4208
S'k'
asg30
Vf
sg17
S'N'
sg14
I11
sg19
(lp4209
S'space'
p4210
asg95
I7
sS'.thisIndex'
p4211
I7
sa(dp4212
g16
(lp4213
S'k'
asg18
S'Y'
sS'.thisRepN'
p4214
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4215
I14
sS'.thisN'
p4216
I524
sg25
S'Y'
sg15
(lp4217
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4218
S'space'
p4219
asg95
I13
sS'.thisIndex'
p4220
I13
sa(dp4221
g16
(lp4222
S'k'
asg18
S'N'
sS'.thisRepN'
p4223
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4224
I0
sS'.thisN'
p4225
I525
sg25
S'Y'
sg15
(lp4226
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4227
I3
sa(dp4228
g18
S'N'
sS'.thisRepN'
p4229
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4230
I1
sS'.thisN'
p4231
I526
sg25
S'Y'
sg15
Nsg30
Vf
sg17
S'Timed out'
p4232
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4233
I8
sa(dp4234
g16
(lp4235
S'd'
asg18
S'N'
sS'.thisRepN'
p4236
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4237
I2
sS'.thisN'
p4238
I527
sg25
S'Y'
sg15
(lp4239
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4240
I5
sa(dp4241
g16
(lp4242
S'k'
asg18
S'N'
sS'.thisRepN'
p4243
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4244
I3
sS'.thisN'
p4245
I528
sg25
S'Y'
sg15
(lp4246
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4247
I8
sa(dp4248
g16
(lp4249
S'k'
asg18
S'Y'
sS'.thisRepN'
p4250
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4251
I4
sS'.thisN'
p4252
I529
sg25
S'Y'
sg15
(lp4253
S'k'
asg30
Vf
sg17
S'N'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4254
I0
sa(dp4255
g16
(lp4256
S'k'
asg18
S'Y'
sS'.thisRepN'
p4257
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4258
I5
sS'.thisN'
p4259
I530
sg25
S'Y'
sg15
(lp4260
S'k'
asg30
Vf
sg17
S'N'
sg14
I11
sg19
(lp4261
S'space'
p4262
asg95
I5
sS'.thisIndex'
p4263
I5
sa(dp4264
g16
(lp4265
S'k'
asg18
S'N'
sS'.thisRepN'
p4266
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4267
I6
sS'.thisN'
p4268
I531
sg25
S'Y'
sg15
(lp4269
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4270
I4
sa(dp4271
g16
(lp4272
S'd'
asg18
S'Y'
sS'.thisRepN'
p4273
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4274
I7
sS'.thisN'
p4275
I532
sg25
S'Y'
sg15
(lp4276
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4277
I8
sa(dp4278
g16
(lp4279
S'k'
asg18
S'Y'
sS'.thisRepN'
p4280
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4281
I8
sS'.thisN'
p4282
I533
sg25
S'Y'
sg15
(lp4283
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4284
S'space'
p4285
asg95
I7
sS'.thisIndex'
p4286
I7
sa(dp4287
g16
(lp4288
S'd'
asg18
S'N'
sS'.thisRepN'
p4289
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4290
I9
sS'.thisN'
p4291
I534
sg25
S'Y'
sg15
(lp4292
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I11
sS'.thisIndex'
p4293
I11
sa(dp4294
g16
(lp4295
S'd'
asg18
S'Y'
sS'.thisRepN'
p4296
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4297
I10
sS'.thisN'
p4298
I535
sg25
S'Y'
sg15
(lp4299
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4300
S'space'
p4301
asg95
I14
sS'.thisIndex'
p4302
I14
sa(dp4303
g16
(lp4304
S'd'
asg18
S'Y'
sS'.thisRepN'
p4305
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4306
I11
sS'.thisN'
p4307
I536
sg25
S'Y'
sg15
(lp4308
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4309
S'space'
p4310
asg95
I10
sS'.thisIndex'
p4311
I10
sa(dp4312
g16
(lp4313
S'k'
asg18
S'Y'
sS'.thisRepN'
p4314
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4315
I12
sS'.thisN'
p4316
I537
sg25
S'Y'
sg15
(lp4317
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4318
S'space'
p4319
asg95
I13
sS'.thisIndex'
p4320
I13
sa(dp4321
g16
(lp4322
S'k'
asg18
S'N'
sS'.thisRepN'
p4323
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4324
I13
sS'.thisN'
p4325
I538
sg25
S'Y'
sg15
(lp4326
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4327
I10
sa(dp4328
g16
(lp4329
S'k'
asg18
S'N'
sS'.thisRepN'
p4330
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4331
I14
sS'.thisN'
p4332
I539
sg25
S'Y'
sg15
(lp4333
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I12
sS'.thisIndex'
p4334
I12
sa(dp4335
g16
(lp4336
S'k'
asg18
S'Y'
sS'.thisRepN'
p4337
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4338
I0
sS'.thisN'
p4339
I540
sg25
S'Y'
sg15
(lp4340
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4341
S'space'
p4342
asg95
I13
sS'.thisIndex'
p4343
I13
sa(dp4344
g16
(lp4345
S'd'
asg18
S'Y'
sS'.thisRepN'
p4346
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4347
I1
sS'.thisN'
p4348
I541
sg25
S'Y'
sg15
(lp4349
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4350
S'space'
p4351
asg95
I11
sS'.thisIndex'
p4352
I11
sa(dp4353
g16
(lp4354
S'd'
asg18
S'N'
sS'.thisRepN'
p4355
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4356
I2
sS'.thisN'
p4357
I542
sg25
S'Y'
sg15
(lp4358
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4359
I10
sa(dp4360
g16
(lp4361
S'k'
asg18
S'N'
sS'.thisRepN'
p4362
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4363
I3
sS'.thisN'
p4364
I543
sg25
S'Y'
sg15
(lp4365
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4366
I7
sa(dp4367
g16
(lp4368
S'k'
asg18
S'N'
sS'.thisRepN'
p4369
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4370
I4
sS'.thisN'
p4371
I544
sg25
S'Y'
sg15
(lp4372
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4373
I4
sa(dp4374
g16
(lp4375
S'k'
asg18
S'Y'
sS'.thisRepN'
p4376
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4377
I5
sS'.thisN'
p4378
I545
sg25
S'Y'
sg15
(lp4379
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4380
S'space'
p4381
asg95
I0
sS'.thisIndex'
p4382
I0
sa(dp4383
g16
(lp4384
S'k'
asg18
S'N'
sS'.thisRepN'
p4385
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4386
I6
sS'.thisN'
p4387
I546
sg25
S'Y'
sg15
(lp4388
S'k'
asg30
Vf
sg17
S'N'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4389
I6
sa(dp4390
g16
(lp4391
S'd'
asg18
S'Y'
sS'.thisRepN'
p4392
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4393
I7
sS'.thisN'
p4394
I547
sg25
S'Y'
sg15
(lp4395
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4396
S'space'
p4397
asg95
I11
sS'.thisIndex'
p4398
I11
sa(dp4399
g16
(lp4400
S'k'
asg18
S'Y'
sS'.thisRepN'
p4401
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4402
I8
sS'.thisN'
p4403
I548
sg25
S'Y'
sg15
(lp4404
S'd'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
(lp4405
S'space'
p4406
asg95
I8
sS'.thisIndex'
p4407
I8
sa(dp4408
g16
(lp4409
S'd'
asg18
S'N'
sg22
I44
sg26
S'Y'
sS'.thisN'
p4410
I549
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4411
I9
sS'.thisRepN'
p4412
I36
sg21
I42
sg25
S'Y'
sg23
I24
sg15
(lp4413
S'k'
asg30
Vf
sg17
S'Y'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4414
I7
sa(dp4415
g16
(lp4416
S'd'
asS'.thisIndex'
p4417
I1
sS'.thisRepN'
p4418
I36
sg26
S'Y'
sg30
Vf
sg31
g32
sS'.thisTrialN'
p4419
I10
sS'.thisN'
p4420
I550
sg25
S'Y'
sg15
(lp4421
S'k'
asg17
S'Y'
sg14
I12
sg95
I1
sa(dp4422
g16
(lp4423
S'd'
asS'.thisIndex'
p4424
I14
sS'.thisRepN'
p4425
I36
sg26
S'Y'
sg30
Vf
sg31
g32
sS'.thisTrialN'
p4426
I11
sS'.thisN'
p4427
I551
sg25
S'Y'
sg15
(lp4428
S'k'
asg17
S'Y'
sg14
I12
sg95
I14
sa(dp4429
g16
(lp4430
S'k'
asg18
S'Y'
sS'.thisRepN'
p4431
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4432
I12
sS'.thisN'
p4433
I552
sg25
S'Y'
sg15
(lp4434
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4435
S'space'
p4436
asg95
I3
sS'.thisIndex'
p4437
I3
sa(dp4438
g16
(lp4439
S'd'
asg18
S'Y'
sS'.thisRepN'
p4440
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4441
I13
sS'.thisN'
p4442
I553
sg25
S'Y'
sg15
(lp4443
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4444
S'space'
p4445
asg95
I0
sS'.thisIndex'
p4446
I0
sa(dp4447
g16
(lp4448
S'k'
asg18
S'N'
sS'.thisRepN'
p4449
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4450
I14
sS'.thisN'
p4451
I554
sg25
S'Y'
sg15
(lp4452
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4453
I5
sa(dp4454
g16
(lp4455
S'd'
asg18
S'N'
sS'.thisRepN'
p4456
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4457
I0
sS'.thisN'
p4458
I555
sg25
S'Y'
sg15
(lp4459
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4460
I8
sa(dp4461
g16
(lp4462
S'd'
asg18
S'N'
sS'.thisRepN'
p4463
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4464
I1
sS'.thisN'
p4465
I556
sg25
S'Y'
sg15
(lp4466
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4467
I9
sa(dp4468
g16
(lp4469
S'k'
asg18
S'Y'
sS'.thisRepN'
p4470
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4471
I2
sS'.thisN'
p4472
I557
sg25
S'Y'
sg15
(lp4473
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4474
S'space'
p4475
asg95
I14
sS'.thisIndex'
p4476
I14
sa(dp4477
g16
(lp4478
S'k'
asg18
S'Y'
sS'.thisRepN'
p4479
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4480
I3
sS'.thisN'
p4481
I558
sg25
S'Y'
sg15
(lp4482
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4483
S'space'
p4484
asg95
I5
sS'.thisIndex'
p4485
I5
sa(dp4486
g16
(lp4487
S'd'
asg18
S'N'
sS'.thisRepN'
p4488
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4489
I4
sS'.thisN'
p4490
I559
sg25
S'Y'
sg15
(lp4491
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4492
I3
sa(dp4493
g16
(lp4494
S'k'
asg18
S'N'
sS'.thisRepN'
p4495
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4496
I5
sS'.thisN'
p4497
I560
sg25
S'Y'
sg15
(lp4498
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4499
I9
sa(dp4500
g16
(lp4501
S'd'
asg18
S'Y'
sS'.thisRepN'
p4502
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4503
I6
sS'.thisN'
p4504
I561
sg25
S'Y'
sg15
(lp4505
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4506
S'space'
p4507
asg95
I2
sS'.thisIndex'
p4508
I2
sa(dp4509
g16
(lp4510
S'k'
asg18
S'N'
sS'.thisRepN'
p4511
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4512
I7
sS'.thisN'
p4513
I562
sg25
S'Y'
sg15
(lp4514
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4515
I6
sa(dp4516
g16
(lp4517
S'd'
asg18
S'Y'
sS'.thisRepN'
p4518
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4519
I8
sS'.thisN'
p4520
I563
sg25
S'Y'
sg15
(lp4521
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4522
S'space'
p4523
asg95
I5
sS'.thisIndex'
p4524
I5
sa(dp4525
g16
(lp4526
S'd'
asg18
S'N'
sS'.thisRepN'
p4527
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4528
I9
sS'.thisN'
p4529
I564
sg25
S'Y'
sg15
(lp4530
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4531
I1
sa(dp4532
g16
(lp4533
S'k'
asg18
S'N'
sS'.thisRepN'
p4534
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4535
I10
sS'.thisN'
p4536
I565
sg25
S'Y'
sg15
(lp4537
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4538
I3
sa(dp4539
g16
(lp4540
S'd'
asg18
S'Y'
sS'.thisRepN'
p4541
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4542
I11
sS'.thisN'
p4543
I566
sg25
S'Y'
sg15
(lp4544
S'd'
asg30
Vf
sg17
S'N'
sg14
I12
sg19
(lp4545
S'space'
p4546
asg95
I0
sS'.thisIndex'
p4547
I0
sa(dp4548
g16
(lp4549
S'k'
asg18
S'Y'
sS'.thisRepN'
p4550
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4551
I12
sS'.thisN'
p4552
I567
sg25
S'Y'
sg15
(lp4553
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4554
S'space'
p4555
asg95
I0
sS'.thisIndex'
p4556
I0
sa(dp4557
g16
(lp4558
S'k'
asg18
S'Y'
sS'.thisRepN'
p4559
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4560
I13
sS'.thisN'
p4561
I568
sg25
S'Y'
sg15
(lp4562
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4563
S'space'
p4564
asg95
I8
sS'.thisIndex'
p4565
I8
sa(dp4566
g16
(lp4567
S'd'
asg18
S'N'
sS'.thisRepN'
p4568
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4569
I14
sS'.thisN'
p4570
I569
sg25
S'Y'
sg15
(lp4571
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4572
I10
sa(dp4573
g16
(lp4574
S'd'
asg18
S'Y'
sS'.thisRepN'
p4575
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4576
I0
sS'.thisN'
p4577
I570
sg25
S'Y'
sg15
(lp4578
S'd'
asg30
Vf
sg17
S'N'
sg14
I12
sg19
(lp4579
S'space'
p4580
asg95
I2
sS'.thisIndex'
p4581
I2
sa(dp4582
g16
(lp4583
S'd'
asg18
S'N'
sS'.thisRepN'
p4584
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4585
I1
sS'.thisN'
p4586
I571
sg25
S'Y'
sg15
(lp4587
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4588
I4
sa(dp4589
g16
(lp4590
S'd'
asg18
S'N'
sS'.thisRepN'
p4591
I38
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4592
I2
sS'.thisN'
p4593
I572
sg25
S'Y'
sg15
(lp4594
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4595
S'space'
p4596
asg95
I9
sS'.thisIndex'
p4597
I9
sa(dp4598
g16
(lp4599
S'k'
asg18
S'Y'
sS'.thisRepN'
p4600
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4601
I3
sS'.thisN'
p4602
I573
sg25
S'Y'
sg15
(lp4603
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4604
S'space'
p4605
asg95
I7
sS'.thisIndex'
p4606
I7
sa(dp4607
g16
(lp4608
S'd'
asg18
S'Y'
sS'.thisRepN'
p4609
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4610
I4
sS'.thisN'
p4611
I574
sg25
S'Y'
sg15
(lp4612
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4613
S'space'
p4614
asg95
I11
sS'.thisIndex'
p4615
I11
sa(dp4616
g16
(lp4617
S'd'
asg18
S'N'
sS'.thisRepN'
p4618
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4619
I5
sS'.thisN'
p4620
I575
sg25
S'Y'
sg15
(lp4621
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I11
sS'.thisIndex'
p4622
I11
sa(dp4623
g16
(lp4624
S'k'
asg18
S'Y'
sS'.thisRepN'
p4625
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4626
I6
sS'.thisN'
p4627
I576
sg25
S'Y'
sg15
(lp4628
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4629
S'space'
p4630
asg95
I7
sS'.thisIndex'
p4631
I7
sa(dp4632
g16
(lp4633
S'd'
asg18
S'Y'
sS'.thisRepN'
p4634
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4635
I7
sS'.thisN'
p4636
I577
sg25
S'Y'
sg15
(lp4637
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4638
S'space'
p4639
asg95
I12
sS'.thisIndex'
p4640
I12
sa(dp4641
g16
(lp4642
S'k'
asg18
S'N'
sS'.thisRepN'
p4643
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4644
I8
sS'.thisN'
p4645
I578
sg25
S'Y'
sg15
(lp4646
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4647
I6
sa(dp4648
g16
(lp4649
S'k'
asg18
S'N'
sS'.thisRepN'
p4650
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4651
I9
sS'.thisN'
p4652
I579
sg25
S'Y'
sg15
(lp4653
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4654
I7
sa(dp4655
g16
(lp4656
S'k'
asg18
S'N'
sS'.thisRepN'
p4657
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4658
I10
sS'.thisN'
p4659
I580
sg25
S'Y'
sg15
(lp4660
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4661
I9
sa(dp4662
g16
(lp4663
S'd'
asg18
S'N'
sS'.thisRepN'
p4664
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4665
I11
sS'.thisN'
p4666
I581
sg25
S'Y'
sg15
(lp4667
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I13
sS'.thisIndex'
p4668
I13
sa(dp4669
g16
(lp4670
S'k'
asg18
S'Y'
sS'.thisRepN'
p4671
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4672
I12
sS'.thisN'
p4673
I582
sg25
S'Y'
sg15
(lp4674
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4675
S'space'
p4676
asg95
I3
sS'.thisIndex'
p4677
I3
sa(dp4678
g16
(lp4679
S'd'
asg18
S'Y'
sS'.thisRepN'
p4680
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4681
I13
sS'.thisN'
p4682
I583
sg25
S'Y'
sg15
(lp4683
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4684
S'space'
p4685
asg95
I11
sS'.thisIndex'
p4686
I11
sa(dp4687
g16
(lp4688
S'd'
asg18
S'Y'
sS'.thisRepN'
p4689
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4690
I14
sS'.thisN'
p4691
I584
sg25
S'Y'
sg15
(lp4692
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4693
S'space'
p4694
asg95
I1
sS'.thisIndex'
p4695
I1
sa(dp4696
g16
(lp4697
S'd'
asg18
S'N'
sS'.thisRepN'
p4698
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4699
I0
sS'.thisN'
p4700
I585
sg25
S'Y'
sg15
(lp4701
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I12
sS'.thisIndex'
p4702
I12
sa(dp4703
g16
(lp4704
S'd'
asg18
S'Y'
sS'.thisRepN'
p4705
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4706
I1
sS'.thisN'
p4707
I586
sg25
S'Y'
sg15
(lp4708
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4709
S'space'
p4710
asg95
I13
sS'.thisIndex'
p4711
I13
sa(dp4712
g16
(lp4713
S'd'
asg18
S'N'
sS'.thisRepN'
p4714
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4715
I2
sS'.thisN'
p4716
I587
sg25
S'Y'
sg15
(lp4717
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4718
I8
sa(dp4719
g16
(lp4720
S'k'
asg18
S'N'
sS'.thisRepN'
p4721
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4722
I3
sS'.thisN'
p4723
I588
sg25
S'Y'
sg15
(lp4724
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4725
I4
sa(dp4726
g16
(lp4727
S'k'
asg18
S'N'
sS'.thisRepN'
p4728
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4729
I4
sS'.thisN'
p4730
I589
sg25
S'Y'
sg15
(lp4731
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4732
I7
sa(dp4733
g16
(lp4734
S'd'
asg18
S'N'
sS'.thisRepN'
p4735
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4736
I5
sS'.thisN'
p4737
I590
sg25
S'Y'
sg15
(lp4738
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4739
I5
sa(dp4740
g16
(lp4741
S'k'
asg18
S'Y'
sS'.thisRepN'
p4742
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4743
I6
sS'.thisN'
p4744
I591
sg25
S'Y'
sg15
(lp4745
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4746
S'space'
p4747
asg95
I2
sS'.thisIndex'
p4748
I2
sa(dp4749
g16
(lp4750
S'd'
asg18
S'N'
sS'.thisRepN'
p4751
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4752
I7
sS'.thisN'
p4753
I592
sg25
S'Y'
sg15
(lp4754
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4755
I0
sa(dp4756
g16
(lp4757
S'k'
asg18
S'Y'
sS'.thisRepN'
p4758
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4759
I8
sS'.thisN'
p4760
I593
sg25
S'Y'
sg15
(lp4761
S'k'
asg30
Vf
sg17
S'N'
sg14
I12
sg19
(lp4762
S'space'
p4763
asg95
I9
sS'.thisIndex'
p4764
I9
sa(dp4765
g16
(lp4766
S'd'
asg18
S'Y'
sS'.thisRepN'
p4767
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4768
I9
sS'.thisN'
p4769
I594
sg25
S'Y'
sg15
(lp4770
S'd'
asg30
Vf
sg17
S'N'
sg14
I12
sg19
(lp4771
S'space'
p4772
asg95
I6
sS'.thisIndex'
p4773
I6
sa(dp4774
g16
(lp4775
S'd'
asg18
S'Y'
sS'.thisRepN'
p4776
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4777
I10
sS'.thisN'
p4778
I595
sg25
S'Y'
sg15
(lp4779
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4780
S'space'
p4781
asg95
I2
sS'.thisIndex'
p4782
I2
sa(dp4783
g16
(lp4784
S'k'
asg18
S'Y'
sS'.thisRepN'
p4785
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4786
I11
sS'.thisN'
p4787
I596
sg25
S'Y'
sg15
(lp4788
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4789
S'space'
p4790
asg95
I1
sS'.thisIndex'
p4791
I1
sa(dp4792
g16
(lp4793
S'd'
asg18
S'N'
sS'.thisRepN'
p4794
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4795
I12
sS'.thisN'
p4796
I597
sg25
S'Y'
sg15
(lp4797
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4798
I6
sa(dp4799
g16
(lp4800
S'd'
asg18
S'N'
sS'.thisRepN'
p4801
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4802
I13
sS'.thisN'
p4803
I598
sg25
S'Y'
sg15
(lp4804
S'k'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
Nsg95
I12
sS'.thisIndex'
p4805
I12
sa(dp4806
g16
(lp4807
S'k'
asg18
S'Y'
sg22
I47
sg26
S'Y'
sS'.thisN'
p4808
I599
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4809
I14
sS'.thisRepN'
p4810
I39
sg21
I46
sg25
S'Y'
sg23
I24
sg15
(lp4811
S'd'
asg30
Vf
sg17
S'Y'
sg14
I12
sg19
(lp4812
S'space'
p4813
asg95
I9
sS'.thisIndex'
p4814
I9
sasS'loops'
p4815
(lp4816
g1
(g35
g3
NtRp4817
(dp4818
g38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4819
sg40
(lp4820
sg41
I75479600
sg10
S''
sg6
g42
sg43
I1
sg27
I01
sg28
Nsg44
g1
(g45
g46
(dp4821
g48
g49
(g50
g51
g52
S'b'
tRp4822
(I1
(I600
I1
tg55
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg56
g49
(g50
g51
g52
S'b'
tRp4823
(I1
(I600
I1
tg55
I00
S'\x00\x00\x03C\x00\x00\x90A\x00\x00\x97C\x00\x00\xa3C\x00\x00\xdaB\x00\x80\rD\x00\x00\x00\x00\x00\x80\xb6C\x00\x80\x9bC\x00\x00XB\x00\x00DC\x00\x00\x12D\x00\x00QC\x00\xc0\x14D\x00@\tD\x00@\x10D\x00\x00\x8cB\x00\x00\x18C\x00\x00\xbdC\x00\x00\x06D\x00\x80\xc3C\x00\x00\xf0C\x00\x00\xf4C\x00\x80\x0eD\x00\x00\x80?\x00\x00\xa1C\x00\x80\xecC\x00\x80\xc5C\x00\x00\x8bC\x00\x00VC\x00\x80\xc6C\x00\x00\x11C\x00\xc0\x05D\x00@\x02D\x00\x00\xb4B\x00\x00\x80@\x00\x00\x1cC\x00\x00CC\x00\x00tC\x00\x80\x95C\x00\x00\xa6B\x00\x80\xb5C\x00\x00BC\x00\x00\xd2B\x00\x80\x84C\x00\xc0\x00D\x00\x00\xdcB\x00\x00\xc8B\x00@\x00D\x00\x00ZC\x00\x00|B\x00\x00uC\x00\x80\xf5C\x00\x00<B\x00\x00\xc2B\x00\x003C\x00\x00\xe7C\x00\x00hC\x00@\x07D\x00\x00@@\x00\x80\xb9C\x00\x001C\x00\x80\xe0C\x00\x00\xa4B\x00\x80\xfcC\x00\x00\xd1C\x00\x80\xa3C\x00\x80\x05D\x00\x00\x07C\x00\x00\x88A\x00\x00\x1aC\x00\x00\x14B\x00\x00\x7fC\x00\x00\xe0C\x00\x00"C\x00\x00\xcaB\x00\x80\x15D\x00\x80\xfaC\x00\x00\xf7C\x00\x80\x98C\x00\x00jC\x00@\x0eD\x00\x00\xe5C\x00\x00\xd0A\x00\x00\x8aB\x00\x80\x86C\x00\x00\x0fD\x00\x00\xfaB\x00\x00\xa8A\x00\x00(C\x00\x00\xdcC\x00\x00\xaaC\x00\x00@C\x00\x00\xf6B\x00\x80\x96C\x00\x00\x90C\x00\x80\xb8C\x00\x80\xe6C\x00\x00\x05D\x00\x00:C\x00\x00cC\x00\x80\xc1C\x00\x00\xd3C\x00\x80\xdeC\x00\x00\xffC\x00\x80\xd6C\x00\xc0\x0cD\x00\x00\xf8A\x00\x00\x82C\x00\x00XC\x00\x80\x85C\x00\x00\xb0A\x00\x00\xd8C\x00\x00GC\x00\xc0\x01D\x00\x00\xecB\x00\xc0\tD\x00\x00\x8cC\x00\x00\xe6C\x00\x00\x80A\x00\x00\xc6B\x00\x80\xe1C\x00\x00\xbcB\x00\x00\x9aC\x00\x00\xa5C\x00\x00PA\x00\x00\xa0@\x00\x80\xa2C\x00\x00\xdbC\x00\x00pC\x00\x00 A\x00\x00\xe2B\x00\x008C\x00\x00\x96B\x00\x00\xb4C\x00\x00\xebC\x00\x00\xa0B\x00\x00\x1cB\x00\x00\x0eC\x00\x00\xb5C\x00\x00`B\x00\x80\x13D\x00\x80\xf0C\x00\x80\xf9C\x00\x00\xe0B\x00@\nD\x00\x00\x15C\x00\x00\xb2B\x00\x00\x80C\x00\x005C\x00\x80\xefC\x00\x00\x08B\x00\x00\xf5C\x00\x00\x0cB\x00\x00\xafC\x00\x00*C\x00\x00\xe8A\x00\x80\x80C\x00\x00\xf9C\x00\x00\x80B\x00\x00\x9dC\x00\x00\x01C\x00\x80\xcfC\x00\x00\x8eC\x00\x00\xedC\x00\x80\x94C\x00\x00\\C\x00\x00lC\x00\x80\xeeC\x00\x80\xe2C\x00\x80\xb1C\x00\x80\x07D\x00\x80\xd8C\x00\x00\xe1C\x00\x00\xddC\x00\x00nC\x00\x00\xd7C\x00\xc0\x0eD\x00\x00\xe2C\x00\x00\x9cC\x00@\x11D\x00\x00)C\x00\x80\x0fD\x00\x80\x89C\x00\x00RC\x00\x00AC\x00\x80\xf1C\x00\x00\xb6B\x00\x00|C\x00\x00/C\x00\x004C\x00\x80\x8cC\x00\x00\x86C\x00\x00NC\x00\x00\x9aB\x00\x00\x88B\x00\x00\x10B\x00\x00\xbeC\x00\x00\xd0B\x00\x00gC\x00\x00\xe9C\x00\x00\xc0A\x00\x00\x93C\x00\x00\xb0C\x00\x00\xaaB\x00\xc0\x11D\x00\x80\xffC\x00\x00 B\x00\x00\xa2B\x00\x00tB\x00\x00aC\x00\x00}C\x00\x00\x1fC\x00\x00\xacB\x00\x80\x12D\x00\x00;C\x00\x00\xf2B\x00@\x15D\x00\x00\x00@\x00\x00\xd2C\x00\x00\x0bC\x00\x00+C\x00\x00hB\x00\x00\x8aC\x00\x80\tD\x00\x80\x14D\x00\x00\xbeB\x00\x00[C\x00\x00\x00A\x00\x00\xb3C\x00@\x12D\x00\x00\x90B\x00\x00pA\x00\xc0\x03D\x00\x80\xcaC\x00\x00LC\x00\x00\x84C\x00\x00\x12C\x00\x00\\B\x00\x00\xfdC\x00\x80\xfdC\x00\x00\x0bD\x00\x00WC\x00@\x0cD\x00\x00TC\x00\x00?C\x00\x00\xeeB\x00\x00zC\x00\x80\xabC\x00\x80\xf2C\x00\x00sC\x00\x80\x82C\x00\x00\xc1C\x00\x80\xa9C\x00\xc0\x0fD\x00\x80\x03D\x00\x80\xc7C\x00\xc0\x08D\x00\x00\xd4C\x00\x009C\x00\x80\xe7C\x00\x80\xa6C\x00\x00\x01D\x00\x00\xa8B\x00\x00@A\x00\x00(B\x00\x000C\x00\x00\rD\x00\x80\x97C\x00\x00kC\x00\x80\xd3C\x00\x80\xa5C\x00\x80\xddC\x00\xc0\x0bD\x00\x00\xfcC\x00\xc0\nD\x00\x80\xb4C\x00\x00\xabC\x00\x00\xfcB\x00\x80\xd9C\x00\x00,C\x00\x00\x9cB\x00\x00\xd4B\x00\x00$B\x00\x00\xe8B\x00\x00\x14D\x00\x80\x90C\x00\x80\xccC\x00\x00\xcaC\x00\xc0\x12D\x00\x00\xd6B\x00\x80\xa8C\x00\x00\xceB\x00\x00,B\x00\x00YC\x00\x80\xf8C\x00\x80\xb7C\x00\x80\xb0C\x00\x00\x1dC\x00\x00^C\x00\x00\xc9C\x00\x80\xbeC\x00\x00xB\x00\x00\x02C\x00\x00\xf1C\x00\x00\xbcC\x00\x80\x02D\x00\x00\xdaC\x00\x80\xaeC\x00\x00\xdeC\x00\x80\xb2C\x00\x00_C\x00\x00\xc0@\x00\x80\nD\x00\x00\nD\x00\x80\x87C\x00\x00\x8fC\x00\x00\xccB\x00\x00\xa7C\x00\x00\xe4C\x00\x00KC\x00\x00oC\x00\x00\xacC\x00\x00\x04B\x00\x00HB\x00\x00\x83C\x00\x00\xc8C\x00@\x14D\x00\x00\x0cC\x00\x80\xc0C\x00\x00\xb1C\x00\x00HC\x00\xc0\x06D\x00\x00\x1eC\x00\x00\xfbC\x00\x80\x06D\x00\x000A\x00\x80\xafC\x00\x80\x9cC\x00\x80\xfeC\x00\x80\x0bD\x00\x00dB\x00\x00\xf6C\x00\x00\x9fC\x00\x00\xd6C\x00\x80\xd1C\x00\x00\tC\x00\x00\xcbC\x00\x00\x82B\x00\x00\x06C\x00\x00SC\x00\x00\x84B\x00\x00\x0eD\x00\x00\xa6C\x00\x00\x00C\x00@\x0fD\x00\x00\x94B\x00\x00iC\x00\x00\xeaC\x00\x80\x8fC\x00\x00\xd8A\x00\x00bC\x00\x00\x07D\x00\xc0\x07D\x00\x00\x92C\x00\x00\xf3C\x00\x00\xe0@\x00\x00\xbbC\x00\x80\xdbC\x00\x00\xccC\x00\x00\x87C\x00\x00pB\x00\x80\xbdC\x00\x00\xc5C\x00\x00TB\x00\x00\x98C\x00\x80\xa1C\x00\x00\x86B\x00\x00\xb6C\x00\x00\xc0B\x00\x00\xb8C\x00\x00\x08C\x00\x00\xb8A\x00\x007C\x00\x00mC\x00\x00\xc3C\x00\x80\x0cD\x00\x00!C\x00\x80\x08D\x00\x80\x88C\x00\x00\x00D\x00\x00\x99C\x00\x80\xf7C\x00\xc0\x10D\x00\x00\xaeB\x00\xc0\rD\x00\x00\xc0C\x00\x00#C\x00\x80\x04D\x00\x00\x9eB\x00\x00IC\x00\x80\x8dC\x00\x00rC\x00\x80\xc8C\x00\x80\xcbC\x00\x80\xf4C\x00\x80\xc2C\x00\x80\x9aC\x00\x80\x8aC\x00\x00\xf8C\x00\x00\xcdC\x00\x00<C\x00\x00\xe3C\x00\x00\x19C\x00@\x08D\x00\x00\xbaB\x00\x00\xd0C\x00\x00.C\x00\x80\x81C\x00\x00$C\x00\x00fC\x00\x00\x95C\x00\x00\xbaC\x00\x00\xd8B\x00\x00\xd9C\x00\x00\xb2C\x00\x00\xceC\x00\x00%C\x00@\rD\x00\x00qC\x00\xc0\x13D\x00\x80\x9fC\x00\x00lB\x00\x00UC\x00\x00\xeeC\x00\x00\xc4B\x00\x00\xc2C\x00\x00eC\x00\x00\x92B\x00\x000B\x00\x80\xe4C\x00\x00`C\x00\x00\x88C\x00\x00 C\x00\x00\x9eC\x00\x00\x81C\x00\x008B\x00\x00\x11D\x00\x80\xe9C\x00\x00JC\x00\x004B\x00\x00\x17C\x00\x00\x05C\x00\x80\x01D\x00\x80\x83C\x00\x00\x10A\x00\x80\xdfC\x00\x00\xecC\x00\x00{C\x00\x00\xa9C\x00\x00\x00B\x00\x00\xa8C\x00\x00\xa4C\x00\x80\x99C\x00\x00\x0cD\x00\x00\x1bC\x00\x00=C\x00\x00\xbfC\x00\x00>C\x00\x00\xdeB\x00\x00\x98B\x00\xc0\x04D\x00\x00\x89C\x00\x00\xc8A\x00\x00\x0fC\x00\x00\tD\x00\x00\x16C\x00\x80\x8bC\x00\x00\x04C\x00\x00\x13D\x00\x00\xb7C\x00\x00\xf4B\x00\x80\xd5C\x00\x00xC\x00\x80\xcdC\x00\x00\xeaB\x00@\x05D\x00\x80\x11D\x00\x80\xceC\x00\x00\xb0B\x00\x00\xe4B\x00\x80\x10D\x00\x00\xc4C\x00\x00\'C\x00\x00\x04D\x00\x80\xc9C\x00\x00yC\x00\x00\xd5C\x00\x00\x02D\x00\x006C\x00\x80\xd0C\x00\x00\xc7C\x00\x00\xdfC\x00\x80\xd2C\x00\x00\x14C\x00\x00LB\x00\x80\xadC\x00\x80\xdaC\x00\x00\xa0A\x00\x80\xa4C\x00\x80\xedC\x00\x80\xebC\x00\xc0\x15D\x00\x00\x13C\x00\x80\xe3C\x00\x80\xf3C\x00\x00\xfeB\x00\x00\xb8B\x00\x80\x9dC\x00\x00\x96C\x00\x00]C\x00\x00PB\x00\x80\xa7C\x00\x00\x94C\x00\x00\x85C\x00\x80\xe5C\x00\x80\xb3C\x00\x80\xfbC\x00\x00\x03D\x00\x00\x10C\x00\x80\x92C\x00\x80\xd7C\x00\x80\xa0C\x00\x80\xbaC\x00\x00\xe0A\x00\x00\x15D\x00\x00@B\x00@\x0bD\x00@\x13D\x00@\x04D\x00\x80\x8eC\x00\x00\x98A\x00\x00DB\x00\x80\xbfC\x00@\x03D\x00@\x06D\x00\x00\x08D\x00\x00\xf2C\x00\x00wC\x00\x80\xdcC\x00\x00`A\x00\x00\xcfC\x00\x80\x93C\x00\x00\x91C\x00\x00\xc6C\x00\x80\xbbC\x00\x00\xe6B\x00\x80\xc4C\x00\x00\xaeC\x00\x80\xacC\x00\x00&C\x00\x80\xaaC\x00\x80\x91C\x00\x002C\x00\x80\xe8C\x00\x00OC\x00\x00\x9bC\x00\x80\xeaC\x00\xc0\x02D\x00\x00~C\x00\x00\xefC\x00\x00\x8eB\x00\x00EC\x00\x00\xf0A\x00\x00\nC\x00\x00PC\x00\x00FC\x00\x80\x00D\x00\x00\xfaC\x00\x00MC\x00@\x01D\x00\x00-C\x00\x00\xa0C\x00\x00\x10D\x00\x00\x18B\x00\x00\xe8C\x00\x00\xf0B\x00\x80\xd4C\x00\x80\x9eC\x00\x00vC\x00\x00\x8dC\x00\x00dC\x00\x00\xf8B\x00\x00\xb9C\x00\x00\xfeC\x00\x80\xf6C\x00\x00\rC\x00\x00\xa2C\x00\x00\xadC\x00\x80\xbcC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4824
(dp4825
g60
(dp4826
g48
I01
sg56
I01
ssg62
g4817
sg63
(lp4827
g48
ag56
asg65
(lp4828
I600
aI1
asbsg67
S'random'
p4829
sg69
g70
(g51
(I0
tS'b'
tRp4830
(I1
(I600
I1
tg54
(S'i4'
I0
I1
tRp4831
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'\x06\x00\x00\x00\x18\x00\x00\x00\xda\x00\x00\x00;\x00\x00\x00#\x00\x00\x00~\x00\x00\x008\x01\x00\x00n\x01\x00\x00\xe4\x00\x00\x00\xc7\x01\x00\x00\x82\x00\x00\x00P\x01\x00\x00\x08\x01\x00\x00}\x00\x00\x00&\x02\x00\x00\xe8\x00\x00\x00w\x00\x00\x00E\x00\x00\x00\x01\x00\x00\x00\x1d\x02\x00\x00\xfc\x01\x00\x00X\x00\x00\x00o\x00\x00\x00~\x01\x00\x00\xc9\x00\x00\x00\xd9\x01\x00\x00S\x00\x00\x00h\x01\x00\x00\x16\x02\x00\x00\x9c\x00\x00\x00=\x02\x00\x00k\x00\x00\x00\xcc\x01\x00\x00C\x01\x00\x00\x97\x00\x00\x00\x99\x00\x00\x00\xc4\x00\x00\x00G\x00\x00\x00H\x02\x00\x00\x89\x00\x00\x00\xcf\x00\x00\x00\x1b\x01\x00\x00\t\x01\x00\x00%\x01\x00\x00\xb7\x01\x00\x00\xc2\x01\x00\x00\xbe\x01\x00\x005\x00\x00\x00\x18\x02\x00\x00\x1e\x02\x00\x00D\x01\x00\x00\xf9\x01\x00\x00\t\x02\x00\x00v\x01\x00\x00\t\x00\x00\x00\xee\x00\x00\x00\x8c\x00\x00\x00U\x01\x00\x00\xde\x00\x00\x00\xb0\x01\x00\x00s\x01\x00\x00\xd1\x00\x00\x00.\x01\x00\x002\x00\x00\x00\x9f\x00\x00\x00\\\x01\x00\x00_\x01\x00\x00y\x01\x00\x00\xc3\x00\x00\x00T\x00\x00\x00\x10\x00\x00\x00;\x02\x00\x00\xe7\x00\x00\x00\xb6\x01\x00\x00d\x01\x00\x00\x85\x00\x00\x00\xd6\x01\x00\x00\xc2\x00\x00\x00\x19\x01\x00\x00\x8f\x01\x00\x00\x88\x00\x00\x00\xd0\x00\x00\x00?\x00\x00\x00(\x00\x00\x00\x07\x01\x00\x00\xcc\x00\x00\x00\xd5\x00\x00\x00\x8a\x01\x00\x00\xe9\x01\x00\x00\x93\x00\x00\x00"\x00\x00\x00\xbb\x00\x00\x00\x05\x02\x00\x00\x9f\x01\x00\x00z\x00\x00\x00\xe2\x00\x00\x00{\x01\x00\x006\x00\x00\x00\xb3\x01\x00\x00x\x00\x00\x00/\x00\x00\x00K\x00\x00\x00=\x01\x00\x00$\x01\x00\x00\xc6\x00\x00\x00+\x00\x00\x00\x1a\x01\x00\x00"\x01\x00\x00\xa7\x01\x00\x00\x04\x00\x00\x00.\x00\x00\x00\xd5\x01\x00\x00\x90\x00\x00\x00\x83\x00\x00\x00\xea\x01\x00\x00,\x02\x00\x00\x1c\x01\x00\x00\xe5\x01\x00\x00s\x00\x00\x00\xf6\x00\x00\x00J\x02\x00\x00\xd8\x00\x00\x00\xe1\x01\x00\x00]\x00\x00\x00P\x02\x00\x00W\x00\x00\x00\x16\x01\x00\x00\x04\x02\x00\x00b\x01\x00\x00\xa1\x00\x00\x00/\x01\x00\x00\x00\x00\x00\x00\xde\x01\x00\x00\xc4\x01\x00\x00]\x01\x00\x00D\x00\x00\x00}\x01\x00\x00Z\x01\x00\x00>\x02\x00\x00\xdc\x00\x00\x00H\x01\x00\x00T\x02\x00\x00\x8a\x00\x00\x00\xda\x01\x00\x00\x11\x02\x00\x00\x1f\x00\x00\x00\xed\x00\x00\x00\x01\x02\x00\x00\xf8\x01\x00\x00\x92\x00\x00\x00\xdc\x01\x00\x00\xc3\x01\x00\x00\x11\x00\x00\x00\x9d\x01\x00\x00F\x00\x00\x00\xd1\x01\x00\x00$\x00\x00\x00*\x01\x00\x00M\x01\x00\x00\xd4\x00\x00\x00\xbb\x01\x00\x00\x83\x01\x00\x00J\x00\x00\x00\x8d\x01\x00\x00\xa3\x01\x00\x00\xab\x01\x00\x000\x02\x00\x00\xed\x01\x00\x00Y\x00\x00\x00\xb5\x00\x00\x00\x9b\x00\x00\x00\xdd\x00\x00\x00\x18\x01\x00\x00E\x02\x00\x00\xa1\x01\x00\x00\xbd\x00\x00\x00\n\x01\x00\x00=\x00\x00\x003\x02\x00\x007\x00\x00\x00\xbe\x00\x00\x00\x95\x00\x00\x00\xf3\x01\x00\x00\x7f\x01\x00\x00\x84\x00\x00\x00\x03\x01\x00\x00c\x00\x00\x00\xd7\x00\x00\x00\x9b\x01\x00\x00\xd2\x01\x00\x00\xd4\x01\x00\x00\xf5\x00\x00\x00\\\x00\x00\x00\xb9\x00\x00\x00*\x00\x00\x00%\x00\x00\x00\n\x00\x00\x00<\x02\x00\x00@\x02\x00\x00q\x00\x00\x00K\x01\x00\x00\x90\x01\x00\x00\xc1\x01\x00\x00@\x01\x00\x00\xeb\x00\x00\x00C\x02\x00\x00\xc1\x00\x00\x005\x02\x00\x00?\x02\x00\x00\x0c\x00\x00\x00\xb8\x00\x00\x00^\x01\x00\x00\xf4\x00\x00\x00\xb1\x01\x00\x00\x1d\x00\x00\x00\xf2\x00\x00\x00m\x00\x00\x00&\x01\x00\x001\x00\x00\x00\xe3\x00\x00\x00\xa6\x00\x00\x00\x08\x02\x00\x00+\x01\x00\x007\x01\x00\x00\xb9\x01\x00\x00\xd2\x00\x00\x00i\x01\x00\x00d\x00\x00\x00O\x02\x00\x00\xb5\x01\x00\x00\xa4\x01\x00\x00\xc7\x00\x00\x009\x00\x00\x00e\x01\x00\x00P\x00\x00\x00\r\x01\x00\x00\xa7\x00\x00\x00\x80\x01\x00\x00\xaf\x00\x00\x00A\x01\x00\x00\x81\x00\x00\x00\xad\x01\x00\x00\x92\x01\x00\x00\xfa\x00\x00\x00&\x00\x00\x003\x00\x00\x00M\x02\x00\x00$\x02\x00\x00\xe3\x01\x00\x00\xf0\x01\x00\x00\xf7\x00\x00\x00\xca\x01\x00\x00\xbc\x00\x00\x00\xd3\x00\x00\x009\x02\x00\x00H\x00\x00\x00\x94\x00\x00\x00\x9d\x00\x00\x00\xbd\x01\x00\x00\xa2\x01\x00\x00l\x00\x00\x00\xfb\x00\x00\x00E\x01\x00\x00\xc6\x01\x00\x00\xec\x00\x00\x00,\x00\x00\x00\x0c\x02\x00\x00n\x00\x00\x00\xc0\x00\x00\x00U\x00\x00\x00r\x01\x00\x00;\x01\x00\x00\xba\x01\x00\x00\x85\x01\x00\x00\xd8\x01\x00\x00\xb7\x00\x00\x00\xdf\x00\x00\x00\x98\x01\x00\x00\x1c\x00\x00\x00\xdd\x01\x00\x00u\x00\x00\x00\xbf\x00\x00\x00N\x02\x00\x00\x91\x01\x00\x00\xa3\x00\x00\x00\x1c\x02\x00\x00<\x01\x00\x00g\x01\x00\x00_\x00\x00\x00\x1e\x01\x00\x00)\x02\x00\x002\x02\x00\x00l\x01\x00\x00\x12\x02\x00\x00\xca\x00\x00\x00(\x02\x00\x00\x0b\x02\x00\x00\xa5\x00\x00\x00\xa5\x01\x00\x00\'\x00\x00\x00\x07\x02\x00\x00^\x00\x00\x00\x02\x00\x00\x00\x0c\x01\x00\x00w\x01\x00\x00O\x00\x00\x00\x87\x01\x00\x00\xcf\x01\x00\x00{\x00\x00\x00\x97\x01\x00\x006\x02\x00\x00\x08\x00\x00\x00\xb3\x00\x00\x00R\x01\x00\x00\xa0\x00\x00\x00\x06\x02\x00\x00\xbc\x01\x00\x00L\x02\x00\x00W\x01\x00\x00\xaf\x01\x00\x00F\x02\x00\x00\x14\x02\x00\x00\x19\x00\x00\x00x\x01\x00\x00U\x02\x00\x00\x7f\x00\x00\x00\x03\x00\x00\x00B\x00\x00\x00\xce\x01\x00\x00\xfd\x01\x00\x00|\x00\x00\x00\x0f\x01\x00\x00a\x01\x00\x00\x05\x01\x00\x00>\x01\x00\x00\n\x02\x00\x00\xcd\x01\x00\x00#\x01\x00\x00\xcb\x01\x00\x00\xfd\x00\x00\x00[\x00\x00\x001\x02\x00\x00\x15\x01\x00\x00\xf8\x00\x00\x00B\x01\x00\x00/\x02\x00\x00V\x02\x00\x00\xfa\x01\x00\x00.\x02\x00\x004\x01\x00\x00\x9a\x00\x00\x00Q\x01\x00\x00\xcb\x00\x00\x00)\x01\x00\x00J\x01\x00\x00\xaa\x00\x00\x00\xa9\x01\x00\x006\x01\x00\x00\xe5\x00\x00\x00\x0e\x02\x00\x00\x86\x00\x00\x00\x14\x01\x00\x00\x8b\x00\x00\x00)\x00\x00\x00z\x01\x00\x00\x07\x00\x00\x00\xe0\x01\x00\x00(\x01\x00\x00|\x01\x00\x00`\x00\x00\x00Q\x02\x00\x00<\x00\x00\x00\xa6\x01\x00\x00\x15\x02\x00\x00o\x01\x00\x00+\x02\x00\x001\x01\x00\x00W\x02\x00\x00\x12\x00\x00\x00t\x01\x00\x00\xc5\x00\x00\x00-\x01\x00\x00\xd3\x01\x00\x00\x1f\x02\x00\x00\x8c\x01\x00\x00I\x01\x00\x00\xfc\x00\x00\x00e\x00\x00\x00\xb4\x01\x00\x00\x96\x01\x00\x00\x81\x01\x00\x00\x14\x00\x00\x00\xec\x01\x00\x00-\x02\x00\x00u\x01\x00\x00\x1b\x00\x00\x00*\x02\x00\x00\x1e\x00\x00\x00\xf5\x01\x00\x00\x00\x01\x00\x00F\x01\x00\x00\x93\x01\x00\x00,\x01\x00\x00\xef\x01\x00\x00 \x01\x00\x00\xea\x00\x00\x00[\x01\x00\x00\x94\x01\x00\x00q\x01\x00\x00\x1f\x01\x00\x00\x9a\x01\x00\x00\xe4\x01\x00\x00\xaa\x01\x00\x00\xe8\x01\x00\x00\'\x02\x00\x00\xa2\x00\x00\x00\xa0\x01\x00\x00\xf4\x01\x00\x00A\x00\x00\x00Y\x01\x00\x00\xdb\x00\x00\x00\xf7\x01\x00\x00f\x00\x00\x00\x0e\x01\x00\x00\x02\x01\x00\x00K\x02\x00\x00\xf1\x01\x00\x00\xe2\x01\x00\x00X\x01\x00\x00i\x00\x00\x00\xb0\x00\x00\x00\x13\x02\x00\x00p\x00\x00\x00\xac\x00\x00\x00\xa8\x01\x00\x00\x17\x01\x00\x003\x01\x00\x00\xfb\x01\x00\x00\x80\x00\x00\x00p\x01\x00\x00Z\x00\x00\x00%\x02\x00\x00\xae\x00\x00\x00\x10\x01\x00\x005\x01\x00\x00g\x00\x00\x00\xf6\x01\x00\x00\xc8\x01\x00\x00I\x00\x00\x00>\x00\x00\x00\xad\x00\x00\x00y\x00\x00\x00\xb2\x00\x00\x00\xa9\x00\x00\x00\x9c\x01\x00\x00\x02\x02\x00\x00?\x01\x00\x00\xb8\x01\x00\x00R\x00\x00\x00\r\x02\x00\x00v\x00\x00\x00a\x00\x00\x008\x00\x00\x00\x04\x01\x00\x00I\x02\x00\x004\x02\x00\x00\xc8\x00\x00\x00\xc0\x01\x00\x00f\x01\x00\x007\x02\x00\x00\x87\x00\x00\x00\xff\x01\x00\x00\xc9\x01\x00\x00\x1a\x00\x00\x00\xa4\x00\x00\x00\xfe\x01\x00\x00\xb2\x01\x00\x00\xa8\x00\x00\x00:\x02\x00\x00\x96\x00\x00\x00\x15\x00\x00\x00\x8e\x00\x00\x000\x01\x00\x00\xba\x00\x00\x00#\x02\x00\x00\xf9\x00\x00\x00m\x01\x00\x00\x03\x02\x00\x00\x16\x00\x00\x00\x95\x01\x00\x00\x98\x00\x00\x004\x00\x00\x00V\x01\x00\x00S\x02\x00\x00N\x00\x00\x00\x88\x01\x00\x00\x99\x01\x00\x00\'\x01\x00\x00\x9e\x00\x00\x00\x8f\x00\x00\x00B\x02\x00\x00M\x00\x00\x00N\x01\x00\x00\x0f\x02\x00\x00\x12\x01\x00\x00@\x00\x00\x00\xef\x00\x00\x00\xf0\x00\x00\x00R\x02\x00\x00S\x01\x00\x00h\x00\x00\x00\xce\x00\x00\x00\x86\x01\x00\x000\x00\x00\x00A\x02\x00\x00-\x00\x00\x00\x06\x01\x00\x00D\x02\x00\x00\xc5\x01\x00\x00r\x00\x00\x00\xf2\x01\x00\x00!\x00\x00\x002\x01\x00\x008\x02\x00\x00\x10\x02\x00\x00 \x02\x00\x00\xff\x00\x00\x00\xe9\x00\x00\x00\xee\x01\x00\x00\x1b\x02\x00\x00\x8e\x01\x00\x00\xd7\x01\x00\x00b\x00\x00\x00\xe6\x01\x00\x00C\x00\x00\x00 \x00\x00\x00\x13\x00\x00\x00!\x02\x00\x00O\x01\x00\x00L\x01\x00\x00j\x01\x00\x00:\x00\x00\x00\xab\x00\x00\x00k\x01\x00\x00"\x02\x00\x00\x9e\x01\x00\x00\x84\x01\x00\x00\x01\x01\x00\x00\xdb\x01\x00\x00\x0e\x00\x00\x00\xe0\x00\x00\x00t\x00\x00\x00:\x01\x00\x00\x91\x00\x00\x009\x01\x00\x00\x13\x01\x00\x00\xf1\x00\x00\x00\x19\x02\x00\x00T\x01\x00\x00\x11\x01\x00\x00\xd0\x01\x00\x00\xf3\x00\x00\x00\x82\x01\x00\x00j\x00\x00\x00\x0b\x01\x00\x00\xac\x01\x00\x00\x05\x00\x00\x00\x8b\x01\x00\x00`\x01\x00\x00Q\x00\x00\x00\x17\x00\x00\x00\xb1\x00\x00\x00V\x00\x00\x00c\x01\x00\x00\xb6\x00\x00\x00\xfe\x00\x00\x00G\x02\x00\x00\x0f\x00\x00\x00\xeb\x01\x00\x00\x89\x01\x00\x00\xbf\x01\x00\x00\xb4\x00\x00\x00\xe7\x01\x00\x00\xcd\x00\x00\x00\x0b\x00\x00\x00\xe6\x00\x00\x00\xd6\x00\x00\x00!\x01\x00\x00\xdf\x01\x00\x00\x1a\x02\x00\x00\x8d\x00\x00\x00\xae\x01\x00\x00\x1d\x01\x00\x00G\x01\x00\x00\xe1\x00\x00\x00\r\x00\x00\x00\x17\x02\x00\x00\xd9\x00\x00\x00L\x00\x00\x00\x00\x02\x00\x00'
tbsg74
I01
sg75
I1
sg76
I-1
sg77
(lp4832
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg79
Nsg80
cnumpy.core.multiarray
scalar
p4833
(g4831
S'\x00\x02\x00\x00'
tRp4834
sg81
I600
sg82
I0
sg83
I600
sg84
I01
sbag36
asS'savePickle'
p4835
I01
sb.