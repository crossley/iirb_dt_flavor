ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject629
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 629
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
VF
sS'age'
p31
V20
p32
ssS'loopsUnfinished'
p33
(lp34
g1
(cpsychopy.data
TrialHandler
p35
g3
NtRp36
(dp37
S'origin'
p38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p39
sS'thisTrial'
p40
I2
sS'_exp'
p41
I75561520
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p42
sS'thisRepN'
p43
I39
sg27
I01
sg28
NsS'data'
p44
g1
(cpsychopy.data
DataHandler
p45
c__builtin__
dict
p46
(dp47
S'ran'
p48
cnumpy.ma.core
_mareconstruct
p49
(cnumpy.ma.core
MaskedArray
p50
cnumpy
ndarray
p51
(I0
tp52
S'b'
tRp53
(I1
(I15
I40
tcnumpy
dtype
p54
(S'f4'
I0
I1
tRp55
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p56
g49
(g50
g51
g52
S'b'
tRp57
(I1
(I15
I40
tg55
I00
S'\x00\x00\xe0@\x00\x00\x10A\x00\x00\xa0A\x00\x000B\x00\x008B\x00\x00\x9eB\x00\x00\xb8B\x00\x00\xd2B\x00\x00\xd8B\x00\x00\xdcB\x00\x00\xf4B\x00\x00\x07C\x00\x00\x14C\x00\x001C\x00\x006C\x00\x008C\x00\x00BC\x00\x00LC\x00\x00[C\x00\x00{C\x00\x00\x8eC\x00\x80\x95C\x00\x80\x97C\x00\x80\xa8C\x00\x00\xbcC\x00\x00\xbeC\x00\x00\xcdC\x00\x80\xcfC\x00\x00\xf8C\x00\x00\xf9C\x00\x00\xffC\x00@\x01D\x00\x00\x02D\x00\x00\x07D\x00@\tD\x00\x00\x0bD\x00\xc0\x0bD\x00\x80\x0cD\x00@\rD\x00\x00\x14D\x00\x00\x80A\x00\x00\xd0A\x00\x00\x82B\x00\x00\xa6B\x00\x00\xe4B\x00\x00\x02C\x00\x00\x03C\x00\x00 C\x00\x005C\x00\x009C\x00\x00FC\x00\x00uC\x00\x00\x83C\x00\x00\x9aC\x00\x00\xb0C\x00\x80\xb0C\x00\x80\xb3C\x00\x80\xb7C\x00\x80\xbaC\x00\x00\xbdC\x00\x80\xc1C\x00\x80\xc8C\x00\x00\xc9C\x00\x80\xcdC\x00\x00\xceC\x00\x00\xd3C\x00\x00\xe4C\x00\x80\xe6C\x00\x80\xe7C\x00\x00\xebC\x00\x00\xf5C\x00\x80\xf5C\x00\x80\xf9C\x00\x00\xfcC\x00@\x02D\x00\x80\x04D\x00\x80\x05D\x00\xc0\x05D\x00\x00\rD\x00@\x13D\x00\x00\x00@\x00\x00\xa0@\x00\x00\xb0A\x00\x00\x84B\x00\x00\x9cB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xfaB\x00\x00\x04C\x00\x00\x0cC\x00\x00\x0fC\x00\x00\x18C\x00\x00#C\x00\x00?C\x00\x00fC\x00\x00mC\x00\x00oC\x00\x00\x92C\x00\x80\x93C\x00\x00\x94C\x00\x00\x9bC\x00\x80\x9dC\x00\x00\x9eC\x00\x00\xa3C\x00\x80\xaeC\x00\x00\xb2C\x00\x00\xc6C\x00\x80\xccC\x00\x80\xd3C\x00\x00\xdcC\x00\x80\xdeC\x00\x80\xdfC\x00\x00\xe2C\x00\x00\xe7C\x00\x00\xeaC\x00\x00\xfbC\x00@\nD\x00\x80\nD\x00\xc0\x12D\x00\xc0\x15D\x00\x00\x80@\x00\x00\x98A\x00\x00\xe0A\x00\x00,B\x00\x00\x94B\x00\x00\xc8B\x00\x00\xceB\x00\x00\xe6B\x00\x00\xeaB\x00\x00\x12C\x00\x00\x1bC\x00\x00\x1cC\x00\x00(C\x00\x00/C\x00\x00CC\x00\x00UC\x00\x00XC\x00\x00_C\x00\x00cC\x00\x00dC\x00\x00~C\x00\x00\x8bC\x00\x80\x8cC\x00\x00\x95C\x00\x00\x96C\x00\x00\x9dC\x00\x00\xa4C\x00\x00\xabC\x00\x80\xcbC\x00\x00\xd8C\x00\x00\xe0C\x00\x00\xe9C\x00\x80\xe9C\x00\x80\xf4C\x00@\x03D\x00@\x05D\x00\xc0\x0cD\x00\x80\x10D\x00\x00\x13D\x00\x80\x15D\x00\x00\xc0@\x00\x00\xb8A\x00\x00\xc0A\x00\x00\x1cB\x00\x00\xa2B\x00\x00\xa8B\x00\x00\xcaB\x00\x00\xd4B\x00\x00\xe2B\x00\x00\xecB\x00\x00\xfeB\x00\x00\nC\x00\x00\x1dC\x00\x00SC\x00\x00\x85C\x00\x00\x8aC\x00\x80\xa2C\x00\x80\xa5C\x00\x00\xa9C\x00\x80\xa9C\x00\x80\xbcC\x00\x80\xbdC\x00\x80\xd6C\x00\x80\xd7C\x00\x00\xe3C\x00\x80\xecC\x00\x00\xf7C\x00\x80\xfbC\x00\x80\xfdC\x00\x00\x01D\x00\xc0\x02D\x00\x00\x03D\x00\xc0\x06D\x00\x80\x07D\x00\xc0\x08D\x00\x80\rD\x00\x00\x10D\x00\xc0\x10D\x00@\x12D\x00\xc0\x13D\x00\x00\x80?\x00\x00\xa8A\x00\x00<B\x00\x00LB\x00\x00PB\x00\x00`B\x00\x00\x8aB\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xbaB\x00\x00\x10C\x00\x00\'C\x00\x003C\x00\x004C\x00\x00>C\x00\x00@C\x00\x00EC\x00\x00aC\x00\x00nC\x00\x00tC\x00\x00vC\x00\x00\x80C\x00\x00\x89C\x00\x80\x8fC\x00\x80\x96C\x00\x80\x9aC\x00\x80\x9eC\x00\x00\xaeC\x00\x80\xb8C\x00\x80\xbfC\x00\x00\xc0C\x00\x80\xc3C\x00\x80\xc5C\x00\x00\xc7C\x00\x80\xd8C\x00\x00\xe8C\x00\x80\xf6C\x00\x80\xfcC\x00\x80\x03D\x00@\x0eD\x00\x00 A\x00\x000A\x00\x00\x14B\x00\x00HB\x00\x00\xa0B\x00\x00\x00C\x00\x00\x05C\x00\x00\tC\x00\x00\x16C\x00\x00=C\x00\x00DC\x00\x00KC\x00\x00]C\x00\x00kC\x00\x00rC\x00\x80\x80C\x00\x80\x81C\x00\x80\x83C\x00\x80\x8aC\x00\x00\xa1C\x00\x80\xa1C\x00\x80\xaaC\x00\x80\xb6C\x00\x80\xbbC\x00\x80\xc0C\x00\x80\xc7C\x00\x00\xc8C\x00\x00\xd1C\x00\x80\xd4C\x00\x00\xd7C\x00\x00\xd9C\x00\x80\xe4C\x00\x80\xedC\x00\x00\xf4C\x00\x80\x02D\x00\x80\x06D\x00\xc0\x07D\x00\xc0\nD\x00@\x0bD\x00\x80\x0eD\x00\x00pA\x00\x00\x18B\x00\x00$B\x00\x00(B\x00\x00@B\x00\x00\\B\x00\x00lB\x00\x00xB\x00\x00\x86B\x00\x00\x92B\x00\x00\x96B\x00\x00\xaaB\x00\x00$C\x00\x00)C\x00\x00:C\x00\x00OC\x00\x80\x82C\x00\x80\x89C\x00\x80\x8bC\x00\x80\x92C\x00\x00\xa2C\x00\x80\xb1C\x00\x80\xb4C\x00\x80\xb5C\x00\x00\xbaC\x00\x00\xbfC\x00\x00\xd2C\x00\x80\xd2C\x00\x00\xd5C\x00\x00\xddC\x00\x80\xddC\x00\x00\xe5C\x00\x80\xe5C\x00\x80\xebC\x00\x00\xecC\x00\x80\xf7C\x00\x80\xfaC\x00@\x0cD\x00\x80\x0fD\x00@\x14D\x00\x00\x04B\x00\x00 B\x00\x00TB\x00\x00dB\x00\x00\x8cB\x00\x00\x1aC\x00\x00\x1eC\x00\x00GC\x00\x00HC\x00\x00NC\x00\x00PC\x00\x00ZC\x00\x00bC\x00\x00gC\x00\x00jC\x00\x00qC\x00\x00zC\x00\x00\x7fC\x00\x00\x81C\x00\x80\x85C\x00\x80\x87C\x00\x80\x90C\x00\x80\x9cC\x00\x80\xa3C\x00\x80\xabC\x00\x00\xacC\x00\x00\xafC\x00\x00\xb6C\x00\x00\xc4C\x00\x80\xc4C\x00\x00\xc5C\x00\x80\xc6C\x00\x00\xd0C\x00\x00\xe6C\x00\xc0\x00D\x00@\x07D\x00\xc0\tD\x00\x80\x0bD\x00\xc0\x0fD\x00\x80\x11D\x00\x00\xf0A\x00\x00hB\x00\x00\x88B\x00\x00\x90B\x00\x00\x9aB\x00\x00\xfcB\x00\x00\x19C\x00\x00"C\x00\x00MC\x00\x00WC\x00\x00hC\x00\x00\x86C\x00\x00\x93C\x00\x00\x97C\x00\x80\x9bC\x00\x00\x9cC\x00\x80\xa4C\x00\x00\xa5C\x00\x00\xadC\x00\x80\xafC\x00\x80\xb2C\x00\x00\xb3C\x00\x00\xb7C\x00\x00\xb8C\x00\x00\xcbC\x00\x00\xccC\x00\x80\xd5C\x00\x80\xe3C\x00\x00\xedC\x00\x80\xf0C\x00\x80\xf3C\x00\x00\xfdC\x00\x80\x01D\x00\x00\x08D\x00@\x08D\x00\x80\x08D\x00\x00\x0cD\x00\xc0\x0eD\x00\x00\x12D\x00\x80\x12D\x00\x00\x00\x00\x00\x00@@\x00\x00\x00A\x00\x004B\x00\x00\x98B\x00\x00\xb0B\x00\x00\xbeB\x00\x00\xc4B\x00\x00\xd0B\x00\x00\xdeB\x00\x00\xf6B\x00\x00\x01C\x00\x00\x06C\x00\x00\x08C\x00\x00\x11C\x00\x00\x15C\x00\x00\x1fC\x00\x00.C\x00\x002C\x00\x00RC\x00\x00}C\x00\x00\x8cC\x00\x80\x8eC\x00\x80\x98C\x00\x00\x9fC\x00\x80\xa0C\x00\x00\xa6C\x00\x00\xaaC\x00\x80\xbeC\x00\x00\xc2C\x00\x80\xc2C\x00\x80\xdbC\x00\x80\xe1C\x00\x00\xf1C\x00\x00\xfeC\x00@\x00D\x00\x80\x00D\x00@\x04D\x00\x00\tD\x00\x80\x14D\x00\x00`A\x00\x00\xe8A\x00\x00\x00B\x00\x00\x08B\x00\x00\x80B\x00\x00\xa4B\x00\x00\xaeB\x00\x00\xb6B\x00\x00\xc6B\x00\x00\xf2B\x00\x00\x0bC\x00\x00\x0eC\x00\x00!C\x00\x00%C\x00\x00,C\x00\x00JC\x00\x00VC\x00\x00sC\x00\x00\x87C\x00\x00\x8fC\x00\x00\x90C\x00\x00\xa0C\x00\x00\xb4C\x00\x00\xc3C\x00\x80\xc9C\x00\x00\xcaC\x00\x80\xcaC\x00\x00\xcfC\x00\x80\xd1C\x00\x00\xd6C\x00\x80\xd9C\x00\x00\xdaC\x00\x80\xdcC\x00\x80\xeeC\x00\x00\xefC\x00\xc0\x03D\x00\xc0\rD\x00\x00\x0fD\x00\x00\x11D\x00\x00\x15D\x00\x00\xccB\x00\x00\xeeB\x00\x00\xf8B\x00\x00\x13C\x00\x00*C\x00\x00-C\x00\x000C\x00\x00;C\x00\x00IC\x00\x00TC\x00\x00xC\x00\x00yC\x00\x80\x86C\x00\x80\x8dC\x00\x00\x91C\x00\x00\x98C\x00\x80\x99C\x00\x80\x9fC\x00\x80\xa6C\x00\x80\xa7C\x00\x00\xa8C\x00\x80\xadC\x00\x00\xb5C\x00\x80\xb9C\x00\x00\xc1C\x00\x00\xd4C\x00\x80\xdaC\x00\x00\xdfC\x00\x00\xeeC\x00\x80\xf1C\x00\x00\xf2C\x00\x80\xf2C\x00\x00\xf3C\x00\x00\xfaC\x00\x00\x05D\x00\x00\nD\x00\x00\x0eD\x00@\x0fD\x00@\x11D\x00\xc0\x11D\x00\x00PA\x00\x00\x88A\x00\x00\xd8A\x00\x00\xf8A\x00\x00\x10B\x00\x00DB\x00\x00XB\x00\x00tB\x00\x00|B\x00\x00\xacB\x00\x00\xdaB\x00\x00\rC\x00\x00\x17C\x00\x00&C\x00\x00+C\x00\x007C\x00\x00<C\x00\x00QC\x00\x00^C\x00\x00`C\x00\x00iC\x00\x00wC\x00\x00\x82C\x00\x00\x8dC\x00\x80\x91C\x00\x80\x94C\x00\x00\x99C\x00\x80\xacC\x00\x80\xceC\x00\x80\xd0C\x00\x00\xdbC\x00\x00\xdeC\x00\x80\xeaC\x00\x80\xefC\x00\x80\xf8C\x00\x80\xfeC\x00\xc0\x01D\x00@\x06D\x00\x80\tD\x00\xc0\x14D\x00\x00@A\x00\x00\x90A\x00\x00\xc8A\x00\x00\x0cB\x00\x00pB\x00\x00\x8eB\x00\x00\xbcB\x00\x00\xd6B\x00\x00\xe0B\x00\x00\xe8B\x00\x00\xf0B\x00\x00AC\x00\x00YC\x00\x00\\C\x00\x00eC\x00\x00lC\x00\x00pC\x00\x00|C\x00\x00\x84C\x00\x80\x84C\x00\x00\x88C\x00\x80\x88C\x00\x00\xa7C\x00\x00\xb1C\x00\x00\xb9C\x00\x00\xbbC\x00\x80\xe0C\x00\x00\xe1C\x00\x80\xe2C\x00\x80\xe8C\x00\x00\xf0C\x00\x00\xf6C\x00\x80\xffC\x00\x00\x00D\x00\x00\x04D\x00\xc0\x04D\x00\x00\x06D\x00@\x10D\x00\x80\x13D\x00@\x15D'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp58
(dp59
S'isNumeric'
p60
(dp61
g48
I01
sg56
I01
ssS'trials'
p62
g36
sS'dataTypes'
p63
(lp64
g48
ag56
asS'dataShape'
p65
(lp66
I15
aI40
asbsS'method'
p67
S'fullRandom'
p68
sS'sequenceIndices'
p69
cnumpy.core.multiarray
_reconstruct
p70
(g51
(I0
tS'b'
tRp71
(I1
(I15
I40
tg54
(S'O4'
I0
I1
tRp72
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp73
I10
aI7
aI9
aI10
aI14
aI7
aI5
aI0
aI14
aI0
aI6
aI11
aI5
aI3
aI10
aI5
aI14
aI8
aI11
aI10
aI3
aI2
aI9
aI13
aI11
aI6
aI11
aI11
aI7
aI11
aI14
aI14
aI14
aI7
aI0
aI3
aI0
aI6
aI6
aI4
aI5
aI1
aI13
aI0
aI13
aI10
aI11
aI4
aI11
aI10
aI13
aI13
aI1
aI6
aI4
aI8
aI8
aI5
aI8
aI11
aI5
aI2
aI4
aI9
aI7
aI0
aI5
aI9
aI7
aI11
aI10
aI3
aI9
aI0
aI14
aI5
aI8
aI0
aI9
aI9
aI2
aI13
aI11
aI5
aI7
aI9
aI0
aI14
aI0
aI6
aI2
aI5
aI0
aI5
aI12
aI3
aI6
aI6
aI14
aI5
aI9
aI5
aI10
aI12
aI12
aI4
aI8
aI3
aI1
aI12
aI2
aI3
aI10
aI13
aI14
aI11
aI4
aI6
aI11
aI2
aI10
aI14
aI8
aI7
aI13
aI2
aI5
aI0
aI10
aI4
aI9
aI3
aI13
aI1
aI3
aI3
aI11
aI8
aI14
aI11
aI0
aI10
aI12
aI5
aI7
aI1
aI8
aI9
aI2
aI13
aI14
aI2
aI12
aI0
aI10
aI14
aI6
aI8
aI12
aI3
aI3
aI3
aI11
aI13
aI11
aI0
aI14
aI13
aI12
aI11
aI8
aI7
aI0
aI8
aI11
aI14
aI5
aI6
aI5
aI8
aI12
aI12
aI14
aI2
aI8
aI4
aI8
aI2
aI12
aI10
aI4
aI13
aI12
aI1
aI10
aI10
aI9
aI0
aI7
aI1
aI2
aI0
aI14
aI6
aI1
aI6
aI10
aI0
aI2
aI2
aI3
aI12
aI1
aI8
aI9
aI2
aI1
aI13
aI7
aI12
aI10
aI11
aI12
aI8
aI6
aI0
aI5
aI0
aI6
aI2
aI9
aI1
aI12
aI12
aI8
aI1
aI9
aI9
aI8
aI14
aI4
aI5
aI13
aI5
aI2
aI4
aI2
aI10
aI9
aI13
aI3
aI13
aI7
aI12
aI3
aI8
aI5
aI7
aI4
aI13
aI13
aI10
aI12
aI9
aI9
aI10
aI2
aI1
aI7
aI11
aI1
aI7
aI12
aI7
aI4
aI14
aI9
aI7
aI4
aI4
aI0
aI2
aI6
aI5
aI7
aI11
aI2
aI14
aI4
aI11
aI4
aI11
aI12
aI11
aI14
aI9
aI13
aI1
aI6
aI2
aI12
aI6
aI0
aI1
aI1
aI7
aI8
aI1
aI9
aI7
aI6
aI7
aI9
aI2
aI0
aI12
aI4
aI0
aI14
aI0
aI10
aI4
aI7
aI8
aI9
aI1
aI10
aI4
aI6
aI2
aI8
aI12
aI13
aI6
aI8
aI13
aI12
aI6
aI3
aI7
aI1
aI6
aI4
aI1
aI9
aI5
aI5
aI13
aI11
aI7
aI7
aI4
aI6
aI4
aI9
aI3
aI10
aI3
aI3
aI7
aI0
aI4
aI4
aI13
aI5
aI4
aI11
aI1
aI10
aI5
aI10
aI10
aI6
aI0
aI0
aI8
aI12
aI14
aI7
aI9
aI5
aI7
aI4
aI14
aI5
aI5
aI6
aI11
aI4
aI13
aI7
aI9
aI3
aI1
aI13
aI1
aI0
aI1
aI4
aI10
aI6
aI14
aI8
aI7
aI8
aI7
aI3
aI3
aI1
aI10
aI1
aI3
aI5
aI9
aI14
aI6
aI8
aI14
aI10
aI2
aI2
aI4
aI10
aI7
aI14
aI6
aI6
aI0
aI6
aI2
aI8
aI6
aI1
aI5
aI0
aI1
aI13
aI0
aI11
aI13
aI6
aI1
aI7
aI5
aI14
aI13
aI4
aI14
aI1
aI3
aI11
aI12
aI2
aI8
aI6
aI14
aI0
aI4
aI3
aI2
aI9
aI2
aI6
aI2
aI12
aI12
aI1
aI8
aI4
aI12
aI1
aI12
aI1
aI9
aI1
aI14
aI8
aI4
aI12
aI11
aI14
aI13
aI7
aI8
aI9
aI11
aI12
aI3
aI2
aI12
aI9
aI0
aI5
aI7
aI13
aI2
aI14
aI8
aI13
aI13
aI9
aI8
aI3
aI9
aI7
aI1
aI1
aI13
aI3
aI2
aI2
aI11
aI14
aI4
aI6
aI13
aI12
aI11
aI8
aI14
aI13
aI3
aI3
aI9
aI7
aI10
aI3
aI4
aI6
aI0
aI2
aI10
aI14
aI8
aI3
aI5
aI10
aI9
aI12
aI3
aI8
aI3
aI8
aI9
aI1
aI10
aI11
aI6
aI5
aI3
aI1
aI11
aI5
aI10
aI4
aI6
aI2
aI12
aI12
aI3
aI11
aI11
aI0
aI7
aI3
aI5
aI10
aI12
aI10
aI10
aI7
aI5
aI0
aI13
aI13
aI2
aI3
aI12
aI0
aI0
aI3
aI9
aI8
aI1
aI14
aI10
aI11
aI11
aI6
aI14
aI5
aI13
aI4
aI13
aI4
aI4
aI2
aI5
aI9
aI2
atbsS'finished'
p74
I00
sS'nReps'
p75
I40
sS'nRemaining'
p76
I0
sS'trialList'
p77
(lp78
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
asS'seed'
p79
NsS'thisIndex'
p80
I2
sS'thisN'
p81
I599
sS'thisTrialN'
p82
I14
sS'nTotal'
p83
I600
sS'_warnUseOfNext'
p84
I01
sbasS'saveWideText'
p85
I01
sS'thisEntry'
p86
(dp87
sS'version'
p88
S''
sS'_paramNamesSoFar'
p89
(lp90
sS'entries'
p91
(lp92
(dp93
g16
(lp94
S'k'
asS'.thisTrial'
p95
I10
sS'.thisRepN'
p96
I0
sg30
VF
sg31
g32
sS'.thisTrialN'
p97
I0
sS'.thisN'
p98
I0
sS'.thisIndex'
p99
I10
sg15
(lp100
S'k'
asg17
S'Y'
sg14
I1
sa(dp101
g16
(lp102
S'd'
asg95
I5
sS'.thisRepN'
p103
I0
sg30
VF
sg31
g32
sS'.thisTrialN'
p104
I1
sS'.thisN'
p105
I1
sS'.thisIndex'
p106
I5
sg15
(lp107
S'd'
asg17
S'Y'
sg14
I1
sa(dp108
g16
(lp109
S'd'
asg18
S'Y'
sS'.thisRepN'
p110
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p111
I2
sS'.thisN'
p112
I2
sS'.thisIndex'
p113
I2
sg15
(lp114
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I2
sa(dp115
g16
(lp116
S'd'
asg18
S'N'
sS'.thisRepN'
p117
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p118
I3
sS'.thisN'
p119
I3
sS'.thisIndex'
p120
I10
sg15
(lp121
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp122
S'space'
p123
asg95
I10
sa(dp124
g16
(lp125
S'd'
asg18
S'N'
sS'.thisRepN'
p126
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p127
I4
sS'.thisN'
p128
I4
sS'.thisIndex'
p129
I3
sg15
(lp130
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I3
sa(dp131
g16
(lp132
S'd'
asg18
S'Y'
sS'.thisRepN'
p133
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p134
I5
sS'.thisN'
p135
I5
sS'.thisIndex'
p136
I2
sg15
(lp137
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp138
S'space'
p139
asg95
I2
sa(dp140
g16
(lp141
S'k'
asg18
S'N'
sS'.thisRepN'
p142
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p143
I6
sS'.thisN'
p144
I6
sS'.thisIndex'
p145
I4
sg15
(lp146
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp147
g16
(lp148
S'd'
asg18
S'N'
sS'.thisRepN'
p149
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p150
I7
sS'.thisN'
p151
I7
sS'.thisIndex'
p152
I0
sg15
(lp153
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp154
g16
(lp155
S'k'
asg18
S'Y'
sS'.thisRepN'
p156
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p157
I8
sS'.thisN'
p158
I8
sS'.thisIndex'
p159
I10
sg15
(lp160
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp161
S'space'
p162
asg95
I10
sa(dp163
g16
(lp164
S'k'
asg18
S'N'
sS'.thisRepN'
p165
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p166
I9
sS'.thisN'
p167
I9
sS'.thisIndex'
p168
I0
sg15
(lp169
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I0
sa(dp170
g16
(lp171
S'k'
asg18
S'N'
sS'.thisRepN'
p172
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p173
I10
sS'.thisN'
p174
I10
sS'.thisIndex'
p175
I6
sg15
(lp176
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp177
S'space'
p178
asg95
I6
sa(dp179
g16
(lp180
S'k'
asg18
S'Y'
sS'.thisRepN'
p181
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p182
I11
sS'.thisN'
p183
I11
sS'.thisIndex'
p184
I6
sg15
(lp185
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I6
sa(dp186
g16
(lp187
S'k'
asg18
S'Y'
sS'.thisRepN'
p188
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p189
I12
sS'.thisN'
p190
I12
sS'.thisIndex'
p191
I14
sg15
(lp192
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I14
sa(dp193
g16
(lp194
S'k'
asg18
S'N'
sS'.thisRepN'
p195
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p196
I13
sS'.thisN'
p197
I13
sS'.thisIndex'
p198
I13
sg15
(lp199
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I13
sa(dp200
g16
(lp201
S'k'
asg18
S'N'
sS'.thisRepN'
p202
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p203
I14
sS'.thisN'
p204
I14
sS'.thisIndex'
p205
I11
sg15
(lp206
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I11
sa(dp207
g16
(lp208
S'd'
asg18
S'Y'
sS'.thisRepN'
p209
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p210
I0
sS'.thisN'
p211
I15
sS'.thisIndex'
p212
I7
sg15
(lp213
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp214
S'space'
p215
asg95
I7
sa(dp216
g16
(lp217
S'd'
asg18
S'Y'
sS'.thisRepN'
p218
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p219
I1
sS'.thisN'
p220
I16
sS'.thisIndex'
p221
I1
sg15
(lp222
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I1
sa(dp223
g16
(lp224
S'k'
asg18
S'N'
sS'.thisRepN'
p225
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p226
I2
sS'.thisN'
p227
I17
sS'.thisIndex'
p228
I13
sg15
(lp229
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp230
S'space'
p231
asg95
I13
sa(dp232
g16
(lp233
S'k'
asg18
S'N'
sS'.thisRepN'
p234
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p235
I3
sS'.thisN'
p236
I18
sS'.thisIndex'
p237
I14
sg15
(lp238
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp239
S'space'
p240
asg95
I14
sa(dp241
g16
(lp242
S'd'
asg18
S'Y'
sS'.thisRepN'
p243
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p244
I4
sS'.thisN'
p245
I19
sS'.thisIndex'
p246
I3
sg15
(lp247
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp248
S'space'
p249
asg95
I3
sa(dp250
g16
(lp251
S'k'
asg18
S'Y'
sS'.thisRepN'
p252
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p253
I5
sS'.thisN'
p254
I20
sS'.thisIndex'
p255
I0
sg15
(lp256
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp257
S'space'
p258
asg95
I0
sa(dp259
g16
(lp260
S'k'
asg18
S'N'
sS'.thisRepN'
p261
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p262
I6
sS'.thisN'
p263
I21
sS'.thisIndex'
p264
I5
sg15
(lp265
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I5
sa(dp266
g16
(lp267
S'd'
asg18
S'Y'
sS'.thisRepN'
p268
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p269
I7
sS'.thisN'
p270
I22
sS'.thisIndex'
p271
I2
sg15
(lp272
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I2
sa(dp273
g16
(lp274
S'd'
asg18
S'Y'
sS'.thisRepN'
p275
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p276
I8
sS'.thisN'
p277
I23
sS'.thisIndex'
p278
I4
sg15
(lp279
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp280
S'space'
p281
asg95
I4
sa(dp282
g16
(lp283
S'k'
asg18
S'Y'
sS'.thisRepN'
p284
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p285
I9
sS'.thisN'
p286
I24
sS'.thisIndex'
p287
I4
sg15
(lp288
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp289
g16
(lp290
S'd'
asg18
S'Y'
sS'.thisRepN'
p291
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p292
I10
sS'.thisN'
p293
I25
sS'.thisIndex'
p294
I14
sg15
(lp295
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp296
S'space'
p297
asg95
I14
sa(dp298
g16
(lp299
S'k'
asg18
S'N'
sS'.thisRepN'
p300
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p301
I11
sS'.thisN'
p302
I26
sS'.thisIndex'
p303
I1
sg15
(lp304
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I1
sa(dp305
g16
(lp306
S'k'
asg18
S'Y'
sS'.thisRepN'
p307
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p308
I12
sS'.thisN'
p309
I27
sS'.thisIndex'
p310
I13
sg15
(lp311
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp312
S'space'
p313
asg95
I13
sa(dp314
g16
(lp315
S'd'
asg18
S'N'
sS'.thisRepN'
p316
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p317
I13
sS'.thisN'
p318
I28
sS'.thisIndex'
p319
I3
sg15
(lp320
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp321
S'space'
p322
asg95
I3
sa(dp323
g16
(lp324
S'd'
asg18
S'Y'
sS'.thisRepN'
p325
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p326
I14
sS'.thisN'
p327
I29
sS'.thisIndex'
p328
I11
sg15
(lp329
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp330
S'space'
p331
asg95
I11
sa(dp332
g16
(lp333
S'd'
asg18
S'N'
sS'.thisRepN'
p334
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p335
I0
sS'.thisN'
p336
I30
sS'.thisIndex'
p337
I9
sg15
(lp338
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I9
sa(dp339
g16
(lp340
S'd'
asg18
S'N'
sS'.thisRepN'
p341
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p342
I1
sS'.thisN'
p343
I31
sS'.thisIndex'
p344
I13
sg15
(lp345
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp346
S'space'
p347
asg95
I13
sa(dp348
g16
(lp349
S'k'
asg18
S'Y'
sS'.thisRepN'
p350
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p351
I2
sS'.thisN'
p352
I32
sS'.thisIndex'
p353
I11
sg15
(lp354
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I11
sa(dp355
g16
(lp356
S'k'
asg18
S'Y'
sS'.thisRepN'
p357
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p358
I3
sS'.thisN'
p359
I33
sS'.thisIndex'
p360
I8
sg15
(lp361
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp362
S'space'
p363
asg95
I8
sa(dp364
g16
(lp365
S'd'
asg18
S'N'
sS'.thisRepN'
p366
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p367
I4
sS'.thisN'
p368
I34
sS'.thisIndex'
p369
I11
sg15
(lp370
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I11
sa(dp371
g16
(lp372
S'k'
asg18
S'Y'
sS'.thisRepN'
p373
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p374
I5
sS'.thisN'
p375
I35
sS'.thisIndex'
p376
I14
sg15
(lp377
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp378
S'space'
p379
asg95
I14
sa(dp380
g16
(lp381
S'd'
asg18
S'N'
sS'.thisRepN'
p382
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p383
I6
sS'.thisN'
p384
I36
sS'.thisIndex'
p385
I13
sg15
(lp386
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I13
sa(dp387
g16
(lp388
S'k'
asg18
S'N'
sS'.thisRepN'
p389
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p390
I7
sS'.thisN'
p391
I37
sS'.thisIndex'
p392
I6
sg15
(lp393
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I6
sa(dp394
g16
(lp395
S'd'
asg18
S'Y'
sS'.thisRepN'
p396
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p397
I8
sS'.thisN'
p398
I38
sS'.thisIndex'
p399
I7
sg15
(lp400
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I7
sa(dp401
g16
(lp402
S'd'
asg18
S'Y'
sS'.thisRepN'
p403
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p404
I9
sS'.thisN'
p405
I39
sS'.thisIndex'
p406
I4
sg15
(lp407
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp408
S'space'
p409
asg95
I4
sa(dp410
g16
(lp411
S'd'
asg18
S'N'
sS'.thisRepN'
p412
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p413
I10
sS'.thisN'
p414
I40
sS'.thisIndex'
p415
I8
sg15
(lp416
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I8
sa(dp417
g16
(lp418
S'd'
asg18
S'N'
sS'.thisRepN'
p419
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p420
I11
sS'.thisN'
p421
I41
sS'.thisIndex'
p422
I7
sg15
(lp423
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I7
sa(dp424
g16
(lp425
S'd'
asg18
S'N'
sS'.thisRepN'
p426
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p427
I12
sS'.thisN'
p428
I42
sS'.thisIndex'
p429
I7
sg15
(lp430
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp431
g16
(lp432
S'd'
asg18
S'N'
sS'.thisRepN'
p433
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p434
I13
sS'.thisN'
p435
I43
sS'.thisIndex'
p436
I3
sg15
(lp437
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp438
S'space'
p439
asg95
I3
sa(dp440
g16
(lp441
S'd'
asg18
S'N'
sS'.thisRepN'
p442
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p443
I14
sS'.thisN'
p444
I44
sS'.thisIndex'
p445
I0
sg15
(lp446
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp447
g16
(lp448
S'k'
asg18
S'N'
sS'.thisRepN'
p449
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p450
I0
sS'.thisN'
p451
I45
sS'.thisIndex'
p452
I10
sg15
(lp453
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I10
sa(dp454
g16
(lp455
S'k'
asg18
S'N'
sS'.thisRepN'
p456
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p457
I1
sS'.thisN'
p458
I46
sS'.thisIndex'
p459
I0
sg15
(lp460
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp461
S'space'
p462
asg95
I0
sa(dp463
g16
(lp464
S'k'
asg18
S'N'
sS'.thisRepN'
p465
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p466
I2
sS'.thisN'
p467
I47
sS'.thisIndex'
p468
I5
sg15
(lp469
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp470
g16
(lp471
S'd'
asg18
S'N'
sS'.thisRepN'
p472
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p473
I3
sS'.thisN'
p474
I48
sS'.thisIndex'
p475
I7
sg15
(lp476
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp477
S'space'
p478
asg95
I7
sa(dp479
g16
(lp480
S'd'
asg18
S'Y'
sg22
I31
sS'.thisN'
p481
I49
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p482
I4
sS'.thisRepN'
p483
I3
sg21
I27
sS'.thisIndex'
p484
I13
sg23
I21
sg15
(lp485
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp486
S'space'
p487
asg95
I13
sa(dp488
g16
(lp489
S'k'
asg95
I6
sS'.thisRepN'
p490
I3
sg30
VF
sg31
g32
sS'.thisTrialN'
p491
I5
sS'.thisN'
p492
I50
sS'.thisIndex'
p493
I6
sg15
(lp494
S'd'
asg17
S'N'
sg14
I2
sa(dp495
g16
(lp496
S'k'
asg95
I5
sS'.thisRepN'
p497
I3
sg30
VF
sg31
g32
sS'.thisTrialN'
p498
I6
sS'.thisN'
p499
I51
sS'.thisIndex'
p500
I5
sg15
(lp501
S'k'
asg17
S'Y'
sg14
I2
sa(dp502
g16
(lp503
S'k'
asg18
S'Y'
sS'.thisRepN'
p504
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p505
I7
sS'.thisN'
p506
I52
sS'.thisIndex'
p507
I5
sg15
(lp508
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp509
S'space'
p510
asg95
I5
sa(dp511
g16
(lp512
S'k'
asg18
S'N'
sS'.thisRepN'
p513
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p514
I8
sS'.thisN'
p515
I53
sS'.thisIndex'
p516
I8
sg15
(lp517
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp518
g16
(lp519
S'd'
asg18
S'Y'
sS'.thisRepN'
p520
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p521
I9
sS'.thisN'
p522
I54
sS'.thisIndex'
p523
I13
sg15
(lp524
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I13
sa(dp525
g16
(lp526
S'd'
asg18
S'Y'
sS'.thisRepN'
p527
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p528
I10
sS'.thisN'
p529
I55
sS'.thisIndex'
p530
I7
sg15
(lp531
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp532
S'space'
p533
asg95
I7
sa(dp534
g16
(lp535
S'd'
asg18
S'Y'
sS'.thisRepN'
p536
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p537
I11
sS'.thisN'
p538
I56
sS'.thisIndex'
p539
I5
sg15
(lp540
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I5
sa(dp541
g16
(lp542
S'k'
asg18
S'N'
sS'.thisRepN'
p543
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p544
I12
sS'.thisN'
p545
I57
sS'.thisIndex'
p546
I8
sg15
(lp547
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp548
S'd'
asg95
I8
sa(dp549
g16
(lp550
S'd'
asg18
S'N'
sS'.thisRepN'
p551
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p552
I13
sS'.thisN'
p553
I58
sS'.thisIndex'
p554
I9
sg15
(lp555
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp556
S'k'
asg95
I9
sa(dp557
g16
(lp558
S'k'
asg18
S'Y'
sS'.thisRepN'
p559
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p560
I14
sS'.thisN'
p561
I59
sS'.thisIndex'
p562
I7
sg15
(lp563
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp564
S'space'
p565
asg95
I7
sa(dp566
g16
(lp567
S'd'
asg18
S'Y'
sS'.thisRepN'
p568
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p569
I0
sS'.thisN'
p570
I60
sS'.thisIndex'
p571
I14
sg15
(lp572
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I14
sa(dp573
g16
(lp574
S'k'
asg18
S'Y'
sS'.thisRepN'
p575
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p576
I1
sS'.thisN'
p577
I61
sS'.thisIndex'
p578
I13
sg15
(lp579
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I13
sa(dp580
g16
(lp581
S'k'
asg18
S'N'
sS'.thisRepN'
p582
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p583
I2
sS'.thisN'
p584
I62
sS'.thisIndex'
p585
I7
sg15
(lp586
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp587
g16
(lp588
S'd'
asg18
S'N'
sS'.thisRepN'
p589
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p590
I3
sS'.thisN'
p591
I63
sS'.thisIndex'
p592
I13
sg15
(lp593
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I13
sa(dp594
g16
(lp595
S'd'
asg18
S'N'
sS'.thisRepN'
p596
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p597
I4
sS'.thisN'
p598
I64
sS'.thisIndex'
p599
I11
sg15
(lp600
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I11
sa(dp601
g16
(lp602
S'd'
asg18
S'Y'
sS'.thisRepN'
p603
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p604
I5
sS'.thisN'
p605
I65
sS'.thisIndex'
p606
I1
sg15
(lp607
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp608
g16
(lp609
S'd'
asg18
S'N'
sS'.thisRepN'
p610
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p611
I6
sS'.thisN'
p612
I66
sS'.thisIndex'
p613
I2
sg15
(lp614
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I2
sa(dp615
g16
(lp616
S'k'
asg18
S'N'
sS'.thisRepN'
p617
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p618
I7
sS'.thisN'
p619
I67
sS'.thisIndex'
p620
I7
sg15
(lp621
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I7
sa(dp622
g16
(lp623
S'd'
asg18
S'N'
sS'.thisRepN'
p624
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p625
I8
sS'.thisN'
p626
I68
sS'.thisIndex'
p627
I9
sg15
(lp628
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I9
sa(dp629
g16
(lp630
S'k'
asg18
S'N'
sS'.thisRepN'
p631
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p632
I9
sS'.thisN'
p633
I69
sS'.thisIndex'
p634
I5
sg15
(lp635
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp636
S'space'
p637
asg95
I5
sa(dp638
g16
(lp639
S'k'
asg18
S'N'
sS'.thisRepN'
p640
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p641
I10
sS'.thisN'
p642
I70
sS'.thisIndex'
p643
I8
sg15
(lp644
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I8
sa(dp645
g16
(lp646
S'k'
asg18
S'N'
sS'.thisRepN'
p647
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p648
I11
sS'.thisN'
p649
I71
sS'.thisIndex'
p650
I14
sg15
(lp651
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp652
S'space'
p653
asg95
I14
sa(dp654
g16
(lp655
S'k'
asg18
S'N'
sS'.thisRepN'
p656
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p657
I12
sS'.thisN'
p658
I72
sS'.thisIndex'
p659
I9
sg15
(lp660
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp661
g16
(lp662
S'd'
asg18
S'N'
sS'.thisRepN'
p663
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p664
I13
sS'.thisN'
p665
I73
sS'.thisIndex'
p666
I7
sg15
(lp667
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp668
g16
(lp669
S'd'
asg18
S'Y'
sS'.thisRepN'
p670
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p671
I14
sS'.thisN'
p672
I74
sS'.thisIndex'
p673
I3
sg15
(lp674
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I3
sa(dp675
g16
(lp676
S'd'
asg18
S'Y'
sS'.thisRepN'
p677
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p678
I0
sS'.thisN'
p679
I75
sS'.thisIndex'
p680
I7
sg15
(lp681
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp682
S'space'
p683
asg95
I7
sa(dp684
g16
(lp685
S'k'
asg18
S'Y'
sS'.thisRepN'
p686
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p687
I1
sS'.thisN'
p688
I76
sS'.thisIndex'
p689
I10
sg15
(lp690
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp691
S'space'
p692
asg95
I10
sa(dp693
g16
(lp694
S'd'
asg18
S'Y'
sS'.thisRepN'
p695
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p696
I2
sS'.thisN'
p697
I77
sS'.thisIndex'
p698
I9
sg15
(lp699
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp700
g16
(lp701
S'd'
asg18
S'Y'
sS'.thisRepN'
p702
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p703
I3
sS'.thisN'
p704
I78
sS'.thisIndex'
p705
I2
sg15
(lp706
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp707
S'space'
p708
asg95
I2
sa(dp709
g16
(lp710
S'd'
asg18
S'Y'
sS'.thisRepN'
p711
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p712
I4
sS'.thisN'
p713
I79
sS'.thisIndex'
p714
I0
sg15
(lp715
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp716
S'space'
p717
asg95
I0
sa(dp718
g16
(lp719
S'k'
asg18
S'Y'
sS'.thisRepN'
p720
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p721
I5
sS'.thisN'
p722
I80
sS'.thisIndex'
p723
I6
sg15
(lp724
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I6
sa(dp725
g16
(lp726
S'k'
asg18
S'N'
sS'.thisRepN'
p727
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p728
I6
sS'.thisN'
p729
I81
sS'.thisIndex'
p730
I4
sg15
(lp731
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I4
sa(dp732
g16
(lp733
S'd'
asg18
S'Y'
sS'.thisRepN'
p734
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p735
I7
sS'.thisN'
p736
I82
sS'.thisIndex'
p737
I11
sg15
(lp738
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp739
S'space'
p740
asg95
I11
sa(dp741
g16
(lp742
S'k'
asg18
S'Y'
sS'.thisRepN'
p743
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p744
I8
sS'.thisN'
p745
I83
sS'.thisIndex'
p746
I1
sg15
(lp747
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp748
S'space'
p749
asg95
I1
sa(dp750
g16
(lp751
S'd'
asg18
S'Y'
sS'.thisRepN'
p752
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p753
I9
sS'.thisN'
p754
I84
sS'.thisIndex'
p755
I4
sg15
(lp756
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp757
S'space'
p758
asg95
I4
sa(dp759
g16
(lp760
S'd'
asg18
S'N'
sS'.thisRepN'
p761
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p762
I10
sS'.thisN'
p763
I85
sS'.thisIndex'
p764
I7
sg15
(lp765
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp766
g16
(lp767
S'd'
asg18
S'Y'
sS'.thisRepN'
p768
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p769
I11
sS'.thisN'
p770
I86
sS'.thisIndex'
p771
I13
sg15
(lp772
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp773
S'space'
p774
asg95
I13
sa(dp775
g16
(lp776
S'd'
asg18
S'Y'
sS'.thisRepN'
p777
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p778
I12
sS'.thisN'
p779
I87
sS'.thisIndex'
p780
I11
sg15
(lp781
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp782
S'space'
p783
asg95
I11
sa(dp784
g16
(lp785
S'd'
asg18
S'N'
sS'.thisRepN'
p786
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p787
I13
sS'.thisN'
p788
I88
sS'.thisIndex'
p789
I10
sg15
(lp790
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I10
sa(dp791
g16
(lp792
S'd'
asg18
S'N'
sS'.thisRepN'
p793
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p794
I14
sS'.thisN'
p795
I89
sS'.thisIndex'
p796
I5
sg15
(lp797
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp798
g16
(lp799
S'k'
asg18
S'N'
sS'.thisRepN'
p800
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p801
I0
sS'.thisN'
p802
I90
sS'.thisIndex'
p803
I5
sg15
(lp804
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp805
S'space'
p806
asg95
I5
sa(dp807
g16
(lp808
S'k'
asg18
S'N'
sS'.thisRepN'
p809
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p810
I1
sS'.thisN'
p811
I91
sS'.thisIndex'
p812
I11
sg15
(lp813
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I11
sa(dp814
g16
(lp815
S'd'
asg18
S'N'
sS'.thisRepN'
p816
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p817
I2
sS'.thisN'
p818
I92
sS'.thisIndex'
p819
I0
sg15
(lp820
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I0
sa(dp821
g16
(lp822
S'd'
asg18
S'Y'
sS'.thisRepN'
p823
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p824
I3
sS'.thisN'
p825
I93
sS'.thisIndex'
p826
I5
sg15
(lp827
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I5
sa(dp828
g16
(lp829
S'd'
asg18
S'N'
sS'.thisRepN'
p830
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p831
I4
sS'.thisN'
p832
I94
sS'.thisIndex'
p833
I14
sg15
(lp834
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp835
S'space'
p836
asg95
I14
sa(dp837
g16
(lp838
S'd'
asg18
S'Y'
sS'.thisRepN'
p839
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p840
I5
sS'.thisN'
p841
I95
sS'.thisIndex'
p842
I10
sg15
(lp843
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp844
S'space'
p845
asg95
I10
sa(dp846
g16
(lp847
S'k'
asg18
S'Y'
sS'.thisRepN'
p848
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p849
I6
sS'.thisN'
p850
I96
sS'.thisIndex'
p851
I2
sg15
(lp852
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I2
sa(dp853
g16
(lp854
S'k'
asg18
S'N'
sS'.thisRepN'
p855
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p856
I7
sS'.thisN'
p857
I97
sS'.thisIndex'
p858
I2
sg15
(lp859
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I2
sa(dp860
g16
(lp861
S'k'
asg18
S'N'
sS'.thisRepN'
p862
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p863
I8
sS'.thisN'
p864
I98
sS'.thisIndex'
p865
I10
sg15
(lp866
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp867
S'space'
p868
asg95
I10
sa(dp869
g16
(lp870
S'd'
asg18
S'Y'
sg22
I31
sS'.thisN'
p871
I99
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p872
I9
sS'.thisRepN'
p873
I6
sg21
I22
sS'.thisIndex'
p874
I11
sg23
I24
sg15
(lp875
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp876
S'space'
p877
asg95
I11
sa(dp878
g16
(lp879
S'd'
asg95
I3
sS'.thisRepN'
p880
I6
sg30
VF
sg31
g32
sS'.thisTrialN'
p881
I10
sS'.thisN'
p882
I100
sS'.thisIndex'
p883
I3
sg15
(lp884
S'k'
asg17
S'N'
sg14
I3
sa(dp885
g16
(lp886
S'k'
asg95
I4
sS'.thisRepN'
p887
I6
sg30
VF
sg31
g32
sS'.thisTrialN'
p888
I11
sS'.thisN'
p889
I101
sS'.thisIndex'
p890
I4
sg15
(lp891
S'd'
asg17
S'N'
sg14
I3
sa(dp892
g16
(lp893
S'k'
asg18
S'N'
sS'.thisRepN'
p894
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p895
I12
sS'.thisN'
p896
I102
sS'.thisIndex'
p897
I12
sg15
(lp898
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I12
sa(dp899
g16
(lp900
S'k'
asg18
S'N'
sS'.thisRepN'
p901
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p902
I13
sS'.thisN'
p903
I103
sS'.thisIndex'
p904
I3
sg15
(lp905
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I3
sa(dp906
g16
(lp907
S'd'
asg18
S'Y'
sS'.thisRepN'
p908
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p909
I14
sS'.thisN'
p910
I104
sS'.thisIndex'
p911
I10
sg15
(lp912
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I10
sa(dp913
g16
(lp914
S'd'
asg18
S'Y'
sS'.thisRepN'
p915
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p916
I0
sS'.thisN'
p917
I105
sS'.thisIndex'
p918
I0
sg15
(lp919
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp920
S'space'
p921
asg95
I0
sa(dp922
g16
(lp923
S'd'
asg18
S'N'
sS'.thisRepN'
p924
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p925
I1
sS'.thisN'
p926
I106
sS'.thisIndex'
p927
I4
sg15
(lp928
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I4
sa(dp929
g16
(lp930
S'd'
asg18
S'Y'
sS'.thisRepN'
p931
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p932
I2
sS'.thisN'
p933
I107
sS'.thisIndex'
p934
I14
sg15
(lp935
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I14
sa(dp936
g16
(lp937
S'd'
asg18
S'N'
sS'.thisRepN'
p938
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p939
I3
sS'.thisN'
p940
I108
sS'.thisIndex'
p941
I0
sg15
(lp942
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp943
g16
(lp944
S'k'
asg18
S'Y'
sS'.thisRepN'
p945
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p946
I4
sS'.thisN'
p947
I109
sS'.thisIndex'
p948
I13
sg15
(lp949
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp950
S'space'
p951
asg95
I13
sa(dp952
g16
(lp953
S'k'
asg18
S'N'
sS'.thisRepN'
p954
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p955
I5
sS'.thisN'
p956
I110
sS'.thisIndex'
p957
I0
sg15
(lp958
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I0
sa(dp959
g16
(lp960
S'k'
asg18
S'Y'
sS'.thisRepN'
p961
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p962
I6
sS'.thisN'
p963
I111
sS'.thisIndex'
p964
I10
sg15
(lp965
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp966
S'space'
p967
asg95
I10
sa(dp968
g16
(lp969
S'k'
asg18
S'Y'
sS'.thisRepN'
p970
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p971
I7
sS'.thisN'
p972
I112
sS'.thisIndex'
p973
I14
sg15
(lp974
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I14
sa(dp975
g16
(lp976
S'k'
asg18
S'Y'
sS'.thisRepN'
p977
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p978
I8
sS'.thisN'
p979
I113
sS'.thisIndex'
p980
I4
sg15
(lp981
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp982
S'k'
asg95
I4
sa(dp983
g16
(lp984
S'd'
asg18
S'N'
sS'.thisRepN'
p985
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p986
I9
sS'.thisN'
p987
I114
sS'.thisIndex'
p988
I1
sg15
(lp989
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp990
S'space'
p991
asg95
I1
sa(dp992
g16
(lp993
S'd'
asg18
S'N'
sS'.thisRepN'
p994
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p995
I10
sS'.thisN'
p996
I115
sS'.thisIndex'
p997
I3
sg15
(lp998
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I3
sa(dp999
g16
(lp1000
S'k'
asg18
S'Y'
sS'.thisRepN'
p1001
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1002
I11
sS'.thisN'
p1003
I116
sS'.thisIndex'
p1004
I14
sg15
(lp1005
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp1006
S'space'
p1007
asg95
I14
sa(dp1008
g16
(lp1009
S'd'
asg18
S'N'
sS'.thisRepN'
p1010
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1011
I12
sS'.thisN'
p1012
I117
sS'.thisIndex'
p1013
I3
sg15
(lp1014
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp1015
S'space'
p1016
asg95
I3
sa(dp1017
g16
(lp1018
S'k'
asg18
S'N'
sS'.thisRepN'
p1019
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1020
I13
sS'.thisN'
p1021
I118
sS'.thisIndex'
p1022
I4
sg15
(lp1023
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I4
sa(dp1024
g16
(lp1025
S'd'
asg18
S'N'
sS'.thisRepN'
p1026
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1027
I14
sS'.thisN'
p1028
I119
sS'.thisIndex'
p1029
I12
sg15
(lp1030
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I12
sa(dp1031
g16
(lp1032
S'k'
asg18
S'Y'
sS'.thisRepN'
p1033
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1034
I0
sS'.thisN'
p1035
I120
sS'.thisIndex'
p1036
I14
sg15
(lp1037
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp1038
S'space'
p1039
asg95
I14
sa(dp1040
g16
(lp1041
S'k'
asg18
S'N'
sS'.thisRepN'
p1042
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1043
I1
sS'.thisN'
p1044
I121
sS'.thisIndex'
p1045
I11
sg15
(lp1046
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I11
sa(dp1047
g16
(lp1048
S'k'
asg18
S'Y'
sS'.thisRepN'
p1049
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1050
I2
sS'.thisN'
p1051
I122
sS'.thisIndex'
p1052
I0
sg15
(lp1053
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1054
S'space'
p1055
asg95
I0
sa(dp1056
g16
(lp1057
S'd'
asg18
S'Y'
sS'.thisRepN'
p1058
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1059
I3
sS'.thisN'
p1060
I123
sS'.thisIndex'
p1061
I10
sg15
(lp1062
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1063
S'space'
p1064
asg95
I10
sa(dp1065
g16
(lp1066
S'k'
asg18
S'N'
sS'.thisRepN'
p1067
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1068
I4
sS'.thisN'
p1069
I124
sS'.thisIndex'
p1070
I12
sg15
(lp1071
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp1072
S'space'
p1073
asg95
I12
sa(dp1074
g16
(lp1075
S'd'
asg18
S'N'
sS'.thisRepN'
p1076
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1077
I5
sS'.thisN'
p1078
I125
sS'.thisIndex'
p1079
I2
sg15
(lp1080
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp1081
g16
(lp1082
S'd'
asg18
S'N'
sS'.thisRepN'
p1083
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1084
I6
sS'.thisN'
p1085
I126
sS'.thisIndex'
p1086
I9
sg15
(lp1087
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I9
sa(dp1088
g16
(lp1089
S'd'
asg18
S'Y'
sS'.thisRepN'
p1090
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1091
I7
sS'.thisN'
p1092
I127
sS'.thisIndex'
p1093
I4
sg15
(lp1094
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp1095
S'space'
p1096
asg95
I4
sa(dp1097
g16
(lp1098
S'k'
asg18
S'N'
sS'.thisRepN'
p1099
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1100
I8
sS'.thisN'
p1101
I128
sS'.thisIndex'
p1102
I6
sg15
(lp1103
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp1104
g16
(lp1105
S'd'
asg18
S'Y'
sS'.thisRepN'
p1106
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1107
I9
sS'.thisN'
p1108
I129
sS'.thisIndex'
p1109
I10
sg15
(lp1110
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1111
S'space'
p1112
asg95
I10
sa(dp1113
g16
(lp1114
S'd'
asg18
S'Y'
sS'.thisRepN'
p1115
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1116
I10
sS'.thisN'
p1117
I130
sS'.thisIndex'
p1118
I1
sg15
(lp1119
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1120
S'space'
p1121
asg95
I1
sa(dp1122
g16
(lp1123
S'k'
asg18
S'Y'
sS'.thisRepN'
p1124
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1125
I11
sS'.thisN'
p1126
I131
sS'.thisIndex'
p1127
I1
sg15
(lp1128
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1129
S'space'
p1130
asg95
I1
sa(dp1131
g16
(lp1132
S'k'
asg18
S'N'
sS'.thisRepN'
p1133
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1134
I12
sS'.thisN'
p1135
I132
sS'.thisIndex'
p1136
I2
sg15
(lp1137
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp1138
g16
(lp1139
S'd'
asg18
S'Y'
sS'.thisRepN'
p1140
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1141
I13
sS'.thisN'
p1142
I133
sS'.thisIndex'
p1143
I6
sg15
(lp1144
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1145
S'space'
p1146
asg95
I6
sa(dp1147
g16
(lp1148
S'k'
asg18
S'N'
sS'.thisRepN'
p1149
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1150
I14
sS'.thisN'
p1151
I134
sS'.thisIndex'
p1152
I10
sg15
(lp1153
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1154
g16
(lp1155
S'k'
asg18
S'Y'
sS'.thisRepN'
p1156
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1157
I0
sS'.thisN'
p1158
I135
sS'.thisIndex'
p1159
I0
sg15
(lp1160
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1161
S'space'
p1162
asg95
I0
sa(dp1163
g16
(lp1164
S'k'
asg18
S'Y'
sS'.thisRepN'
p1165
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1166
I1
sS'.thisN'
p1167
I136
sS'.thisIndex'
p1168
I10
sg15
(lp1169
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1170
S'space'
p1171
asg95
I10
sa(dp1172
g16
(lp1173
S'd'
asg18
S'N'
sS'.thisRepN'
p1174
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1175
I2
sS'.thisN'
p1176
I137
sS'.thisIndex'
p1177
I6
sg15
(lp1178
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1179
S'space'
p1180
asg95
I6
sa(dp1181
g16
(lp1182
S'd'
asg18
S'N'
sS'.thisRepN'
p1183
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1184
I3
sS'.thisN'
p1185
I138
sS'.thisIndex'
p1186
I4
sg15
(lp1187
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp1188
S'space'
p1189
asg95
I4
sa(dp1190
g16
(lp1191
S'd'
asg18
S'Y'
sS'.thisRepN'
p1192
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1193
I4
sS'.thisN'
p1194
I139
sS'.thisIndex'
p1195
I11
sg15
(lp1196
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I11
sa(dp1197
g16
(lp1198
S'k'
asg18
S'N'
sS'.thisRepN'
p1199
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1200
I5
sS'.thisN'
p1201
I140
sS'.thisIndex'
p1202
I2
sg15
(lp1203
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp1204
g16
(lp1205
S'd'
asg18
S'N'
sS'.thisRepN'
p1206
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1207
I6
sS'.thisN'
p1208
I141
sS'.thisIndex'
p1209
I13
sg15
(lp1210
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I13
sa(dp1211
g16
(lp1212
S'k'
asg18
S'N'
sS'.thisRepN'
p1213
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1214
I7
sS'.thisN'
p1215
I142
sS'.thisIndex'
p1216
I11
sg15
(lp1217
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I11
sa(dp1218
g16
(lp1219
S'd'
asg18
S'N'
sS'.thisRepN'
p1220
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1221
I8
sS'.thisN'
p1222
I143
sS'.thisIndex'
p1223
I2
sg15
(lp1224
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp1225
g16
(lp1226
S'd'
asg18
S'Y'
sS'.thisRepN'
p1227
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1228
I9
sS'.thisN'
p1229
I144
sS'.thisIndex'
p1230
I5
sg15
(lp1231
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1232
S'space'
p1233
asg95
I5
sa(dp1234
g16
(lp1235
S'k'
asg18
S'Y'
sS'.thisRepN'
p1236
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1237
I10
sS'.thisN'
p1238
I145
sS'.thisIndex'
p1239
I10
sg15
(lp1240
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1241
S'space'
p1242
asg95
I10
sa(dp1243
g16
(lp1244
S'd'
asg18
S'N'
sS'.thisRepN'
p1245
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1246
I11
sS'.thisN'
p1247
I146
sS'.thisIndex'
p1248
I3
sg15
(lp1249
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I3
sa(dp1250
g16
(lp1251
S'k'
asg18
S'N'
sS'.thisRepN'
p1252
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1253
I12
sS'.thisN'
p1254
I147
sS'.thisIndex'
p1255
I12
sg15
(lp1256
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1257
S'space'
p1258
asg95
I12
sa(dp1259
g16
(lp1260
S'd'
asg18
S'N'
sS'.thisRepN'
p1261
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1262
I13
sS'.thisN'
p1263
I148
sS'.thisIndex'
p1264
I0
sg15
(lp1265
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp1266
g16
(lp1267
S'k'
asg18
S'N'
sg22
I36
sS'.thisN'
p1268
I149
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1269
I14
sS'.thisRepN'
p1270
I9
sg21
I30
sS'.thisIndex'
p1271
I10
sg23
I21
sg15
(lp1272
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1273
S'space'
p1274
asg95
I10
sa(dp1275
g16
(lp1276
S'd'
asg95
I6
sS'.thisRepN'
p1277
I10
sg30
VF
sg31
g32
sS'.thisTrialN'
p1278
I0
sS'.thisN'
p1279
I150
sS'.thisIndex'
p1280
I6
sg15
(lp1281
S'd'
asg17
S'Y'
sg14
I4
sa(dp1282
g16
(lp1283
S'k'
asg95
I13
sS'.thisRepN'
p1284
I10
sg30
VF
sg31
g32
sS'.thisTrialN'
p1285
I1
sS'.thisN'
p1286
I151
sS'.thisIndex'
p1287
I13
sg15
(lp1288
S'k'
asg17
S'Y'
sg14
I4
sa(dp1289
g16
(lp1290
S'k'
asg18
S'Y'
sS'.thisRepN'
p1291
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1292
I2
sS'.thisN'
p1293
I152
sS'.thisIndex'
p1294
I2
sg15
(lp1295
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1296
S'space'
p1297
asg95
I2
sa(dp1298
g16
(lp1299
S'd'
asg18
S'Y'
sS'.thisRepN'
p1300
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1301
I3
sS'.thisN'
p1302
I153
sS'.thisIndex'
p1303
I9
sg15
(lp1304
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1305
g16
(lp1306
S'k'
asg18
S'N'
sS'.thisRepN'
p1307
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1308
I4
sS'.thisN'
p1309
I154
sS'.thisIndex'
p1310
I8
sg15
(lp1311
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1312
g16
(lp1313
S'd'
asg18
S'Y'
sS'.thisRepN'
p1314
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1315
I5
sS'.thisN'
p1316
I155
sS'.thisIndex'
p1317
I3
sg15
(lp1318
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1319
S'space'
p1320
asg95
I3
sa(dp1321
g16
(lp1322
S'k'
asg18
S'N'
sS'.thisRepN'
p1323
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1324
I6
sS'.thisN'
p1325
I156
sS'.thisIndex'
p1326
I3
sg15
(lp1327
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1328
g16
(lp1329
S'd'
asg18
S'Y'
sS'.thisRepN'
p1330
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1331
I7
sS'.thisN'
p1332
I157
sS'.thisIndex'
p1333
I4
sg15
(lp1334
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1335
S'space'
p1336
asg95
I4
sa(dp1337
g16
(lp1338
S'k'
asg18
S'Y'
sS'.thisRepN'
p1339
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1340
I8
sS'.thisN'
p1341
I158
sS'.thisIndex'
p1342
I8
sg15
(lp1343
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1344
S'space'
p1345
asg95
I8
sa(dp1346
g16
(lp1347
S'k'
asg18
S'N'
sS'.thisRepN'
p1348
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1349
I9
sS'.thisN'
p1350
I159
sS'.thisIndex'
p1351
I10
sg15
(lp1352
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1353
g16
(lp1354
S'd'
asg18
S'Y'
sS'.thisRepN'
p1355
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1356
I10
sS'.thisN'
p1357
I160
sS'.thisIndex'
p1358
I1
sg15
(lp1359
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1360
S'space'
p1361
asg95
I1
sa(dp1362
g16
(lp1363
S'k'
asg18
S'N'
sS'.thisRepN'
p1364
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1365
I11
sS'.thisN'
p1366
I161
sS'.thisIndex'
p1367
I11
sg15
(lp1368
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I11
sa(dp1369
g16
(lp1370
S'd'
asg18
S'Y'
sS'.thisRepN'
p1371
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1372
I12
sS'.thisN'
p1373
I162
sS'.thisIndex'
p1374
I9
sg15
(lp1375
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1376
S'space'
p1377
asg95
I9
sa(dp1378
g16
(lp1379
S'd'
asg18
S'Y'
sS'.thisRepN'
p1380
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1381
I13
sS'.thisN'
p1382
I163
sS'.thisIndex'
p1383
I2
sg15
(lp1384
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1385
S'space'
p1386
asg95
I2
sa(dp1387
g16
(lp1388
S'k'
asg18
S'N'
sS'.thisRepN'
p1389
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1390
I14
sS'.thisN'
p1391
I164
sS'.thisIndex'
p1392
I7
sg15
(lp1393
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1394
g16
(lp1395
S'k'
asg18
S'Y'
sS'.thisRepN'
p1396
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1397
I0
sS'.thisN'
p1398
I165
sS'.thisIndex'
p1399
I11
sg15
(lp1400
S'd'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1401
S'space'
p1402
asg95
I11
sa(dp1403
g16
(lp1404
S'k'
asg18
S'Y'
sS'.thisRepN'
p1405
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1406
I1
sS'.thisN'
p1407
I166
sS'.thisIndex'
p1408
I13
sg15
(lp1409
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1410
S'space'
p1411
asg95
I13
sa(dp1412
g16
(lp1413
S'd'
asg18
S'N'
sS'.thisRepN'
p1414
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1415
I2
sS'.thisN'
p1416
I167
sS'.thisIndex'
p1417
I5
sg15
(lp1418
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1419
g16
(lp1420
S'k'
asg18
S'N'
sS'.thisRepN'
p1421
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1422
I3
sS'.thisN'
p1423
I168
sS'.thisIndex'
p1424
I3
sg15
(lp1425
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1426
g16
(lp1427
S'd'
asg18
S'N'
sS'.thisRepN'
p1428
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1429
I4
sS'.thisN'
p1430
I169
sS'.thisIndex'
p1431
I7
sg15
(lp1432
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1433
S'space'
p1434
asg95
I7
sa(dp1435
g16
(lp1436
S'k'
asg18
S'N'
sS'.thisRepN'
p1437
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1438
I5
sS'.thisN'
p1439
I170
sS'.thisIndex'
p1440
I12
sg15
(lp1441
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I12
sa(dp1442
g16
(lp1443
S'k'
asg18
S'Y'
sS'.thisRepN'
p1444
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1445
I6
sS'.thisN'
p1446
I171
sS'.thisIndex'
p1447
I13
sg15
(lp1448
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1449
S'space'
p1450
asg95
I13
sa(dp1451
g16
(lp1452
S'k'
asg18
S'Y'
sS'.thisRepN'
p1453
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1454
I7
sS'.thisN'
p1455
I172
sS'.thisIndex'
p1456
I11
sg15
(lp1457
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I11
sa(dp1458
g16
(lp1459
S'd'
asg18
S'Y'
sS'.thisRepN'
p1460
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1461
I8
sS'.thisN'
p1462
I173
sS'.thisIndex'
p1463
I12
sg15
(lp1464
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1465
S'space'
p1466
asg95
I12
sa(dp1467
g16
(lp1468
S'd'
asg18
S'Y'
sS'.thisRepN'
p1469
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1470
I9
sS'.thisN'
p1471
I174
sS'.thisIndex'
p1472
I10
sg15
(lp1473
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1474
S'space'
p1475
asg95
I10
sa(dp1476
g16
(lp1477
S'k'
asg18
S'Y'
sS'.thisRepN'
p1478
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1479
I10
sS'.thisN'
p1480
I175
sS'.thisIndex'
p1481
I3
sg15
(lp1482
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1483
S'space'
p1484
asg95
I3
sa(dp1485
g16
(lp1486
S'k'
asg18
S'N'
sS'.thisRepN'
p1487
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1488
I11
sS'.thisN'
p1489
I176
sS'.thisIndex'
p1490
I12
sg15
(lp1491
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I12
sa(dp1492
g16
(lp1493
S'k'
asg18
S'N'
sS'.thisRepN'
p1494
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1495
I12
sS'.thisN'
p1496
I177
sS'.thisIndex'
p1497
I0
sg15
(lp1498
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1499
g16
(lp1500
S'k'
asg18
S'N'
sS'.thisRepN'
p1501
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1502
I13
sS'.thisN'
p1503
I178
sS'.thisIndex'
p1504
I10
sg15
(lp1505
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1506
g16
(lp1507
S'k'
asg18
S'Y'
sS'.thisRepN'
p1508
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1509
I14
sS'.thisN'
p1510
I179
sS'.thisIndex'
p1511
I5
sg15
(lp1512
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1513
S'space'
p1514
asg95
I5
sa(dp1515
g16
(lp1516
S'd'
asg18
S'Y'
sS'.thisRepN'
p1517
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1518
I0
sS'.thisN'
p1519
I180
sS'.thisIndex'
p1520
I5
sg15
(lp1521
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1522
S'space'
p1523
asg95
I5
sa(dp1524
g16
(lp1525
S'k'
asg18
S'Y'
sS'.thisRepN'
p1526
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1527
I1
sS'.thisN'
p1528
I181
sS'.thisIndex'
p1529
I1
sg15
(lp1530
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I1
sa(dp1531
g16
(lp1532
S'd'
asg18
S'N'
sS'.thisRepN'
p1533
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1534
I2
sS'.thisN'
p1535
I182
sS'.thisIndex'
p1536
I0
sg15
(lp1537
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1538
g16
(lp1539
S'd'
asg18
S'Y'
sS'.thisRepN'
p1540
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1541
I3
sS'.thisN'
p1542
I183
sS'.thisIndex'
p1543
I13
sg15
(lp1544
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1545
S'space'
p1546
asg95
I13
sa(dp1547
g16
(lp1548
S'd'
asg18
S'Y'
sS'.thisRepN'
p1549
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1550
I4
sS'.thisN'
p1551
I184
sS'.thisIndex'
p1552
I0
sg15
(lp1553
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1554
g16
(lp1555
S'k'
asg18
S'Y'
sS'.thisRepN'
p1556
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1557
I5
sS'.thisN'
p1558
I185
sS'.thisIndex'
p1559
I1
sg15
(lp1560
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1561
S'space'
p1562
asg95
I1
sa(dp1563
g16
(lp1564
S'd'
asg18
S'Y'
sS'.thisRepN'
p1565
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1566
I6
sS'.thisN'
p1567
I186
sS'.thisIndex'
p1568
I7
sg15
(lp1569
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1570
S'space'
p1571
asg95
I7
sa(dp1572
g16
(lp1573
S'k'
asg18
S'Y'
sS'.thisRepN'
p1574
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1575
I7
sS'.thisN'
p1576
I187
sS'.thisIndex'
p1577
I12
sg15
(lp1578
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1579
S'space'
p1580
asg95
I12
sa(dp1581
g16
(lp1582
S'd'
asg18
S'N'
sS'.thisRepN'
p1583
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1584
I8
sS'.thisN'
p1585
I188
sS'.thisIndex'
p1586
I13
sg15
(lp1587
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I13
sa(dp1588
g16
(lp1589
S'd'
asg18
S'Y'
sS'.thisRepN'
p1590
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1591
I9
sS'.thisN'
p1592
I189
sS'.thisIndex'
p1593
I6
sg15
(lp1594
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1595
S'space'
p1596
asg95
I6
sa(dp1597
g16
(lp1598
S'k'
asg18
S'Y'
sS'.thisRepN'
p1599
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1600
I10
sS'.thisN'
p1601
I190
sS'.thisIndex'
p1602
I5
sg15
(lp1603
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1604
g16
(lp1605
S'd'
asg18
S'N'
sS'.thisRepN'
p1606
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1607
I11
sS'.thisN'
p1608
I191
sS'.thisIndex'
p1609
I2
sg15
(lp1610
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I2
sa(dp1611
g16
(lp1612
S'k'
asg18
S'N'
sS'.thisRepN'
p1613
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1614
I12
sS'.thisN'
p1615
I192
sS'.thisIndex'
p1616
I5
sg15
(lp1617
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1618
g16
(lp1619
S'k'
asg18
S'N'
sS'.thisRepN'
p1620
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1621
I13
sS'.thisN'
p1622
I193
sS'.thisIndex'
p1623
I14
sg15
(lp1624
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I14
sa(dp1625
g16
(lp1626
S'k'
asg18
S'N'
sS'.thisRepN'
p1627
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1628
I14
sS'.thisN'
p1629
I194
sS'.thisIndex'
p1630
I0
sg15
(lp1631
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1632
S'space'
p1633
asg95
I0
sa(dp1634
g16
(lp1635
S'k'
asg18
S'N'
sS'.thisRepN'
p1636
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1637
I0
sS'.thisN'
p1638
I195
sS'.thisIndex'
p1639
I3
sg15
(lp1640
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1641
g16
(lp1642
S'd'
asg18
S'N'
sS'.thisRepN'
p1643
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1644
I1
sS'.thisN'
p1645
I196
sS'.thisIndex'
p1646
I6
sg15
(lp1647
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1648
g16
(lp1649
S'k'
asg18
S'N'
sS'.thisRepN'
p1650
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1651
I2
sS'.thisN'
p1652
I197
sS'.thisIndex'
p1653
I5
sg15
(lp1654
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1655
g16
(lp1656
S'd'
asg18
S'N'
sS'.thisRepN'
p1657
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1658
I3
sS'.thisN'
p1659
I198
sS'.thisIndex'
p1660
I1
sg15
(lp1661
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I1
sa(dp1662
g16
(lp1663
S'd'
asg18
S'N'
sg22
I41
sS'.thisN'
p1664
I199
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1665
I4
sS'.thisRepN'
p1666
I13
sg21
I45
sS'.thisIndex'
p1667
I8
sg23
I25
sg15
(lp1668
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1669
g16
(lp1670
S'd'
asg95
I8
sS'.thisRepN'
p1671
I13
sg30
VF
sg31
g32
sS'.thisTrialN'
p1672
I5
sS'.thisN'
p1673
I200
sS'.thisIndex'
p1674
I8
sg15
(lp1675
S'd'
asg17
S'Y'
sg14
I5
sa(dp1676
g16
(lp1677
S'k'
asg95
I12
sS'.thisRepN'
p1678
I13
sg30
VF
sg31
g32
sS'.thisTrialN'
p1679
I6
sS'.thisN'
p1680
I201
sS'.thisIndex'
p1681
I12
sg15
(lp1682
S'k'
asg17
S'Y'
sg14
I5
sa(dp1683
g16
(lp1684
S'k'
asg18
S'N'
sS'.thisRepN'
p1685
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1686
I7
sS'.thisN'
p1687
I202
sS'.thisIndex'
p1688
I11
sg15
(lp1689
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I11
sa(dp1690
g16
(lp1691
S'd'
asg18
S'N'
sS'.thisRepN'
p1692
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1693
I8
sS'.thisN'
p1694
I203
sS'.thisIndex'
p1695
I6
sg15
(lp1696
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp1697
g16
(lp1698
S'k'
asg18
S'Y'
sS'.thisRepN'
p1699
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1700
I9
sS'.thisN'
p1701
I204
sS'.thisIndex'
p1702
I0
sg15
(lp1703
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I0
sa(dp1704
g16
(lp1705
S'd'
asg18
S'N'
sS'.thisRepN'
p1706
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1707
I10
sS'.thisN'
p1708
I205
sS'.thisIndex'
p1709
I9
sg15
(lp1710
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1711
g16
(lp1712
S'd'
asg18
S'N'
sS'.thisRepN'
p1713
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1714
I11
sS'.thisN'
p1715
I206
sS'.thisIndex'
p1716
I8
sg15
(lp1717
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1718
g16
(lp1719
S'd'
asg18
S'N'
sS'.thisRepN'
p1720
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1721
I12
sS'.thisN'
p1722
I207
sS'.thisIndex'
p1723
I7
sg15
(lp1724
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp1725
g16
(lp1726
S'd'
asg18
S'Y'
sS'.thisRepN'
p1727
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1728
I13
sS'.thisN'
p1729
I208
sS'.thisIndex'
p1730
I8
sg15
(lp1731
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1732
S'space'
p1733
asg95
I8
sa(dp1734
g16
(lp1735
S'k'
asg18
S'N'
sS'.thisRepN'
p1736
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1737
I14
sS'.thisN'
p1738
I209
sS'.thisIndex'
p1739
I13
sg15
(lp1740
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I13
sa(dp1741
g16
(lp1742
S'd'
asg18
S'Y'
sS'.thisRepN'
p1743
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1744
I0
sS'.thisN'
p1745
I210
sS'.thisIndex'
p1746
I10
sg15
(lp1747
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1748
S'space'
p1749
asg95
I10
sa(dp1750
g16
(lp1751
S'd'
asg18
S'Y'
sS'.thisRepN'
p1752
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1753
I1
sS'.thisN'
p1754
I211
sS'.thisIndex'
p1755
I4
sg15
(lp1756
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp1757
S'space'
p1758
asg95
I4
sa(dp1759
g16
(lp1760
S'k'
asg18
S'Y'
sS'.thisRepN'
p1761
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1762
I2
sS'.thisN'
p1763
I212
sS'.thisIndex'
p1764
I12
sg15
(lp1765
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1766
S'space'
p1767
asg95
I12
sa(dp1768
g16
(lp1769
S'd'
asg18
S'N'
sS'.thisRepN'
p1770
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1771
I3
sS'.thisN'
p1772
I213
sS'.thisIndex'
p1773
I3
sg15
(lp1774
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1775
g16
(lp1776
S'd'
asg18
S'Y'
sS'.thisRepN'
p1777
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1778
I4
sS'.thisN'
p1779
I214
sS'.thisIndex'
p1780
I11
sg15
(lp1781
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1782
S'space'
p1783
asg95
I11
sa(dp1784
g16
(lp1785
S'd'
asg18
S'Y'
sS'.thisRepN'
p1786
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1787
I5
sS'.thisN'
p1788
I215
sS'.thisIndex'
p1789
I9
sg15
(lp1790
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1791
S'space'
p1792
asg95
I9
sa(dp1793
g16
(lp1794
S'k'
asg18
S'Y'
sS'.thisRepN'
p1795
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1796
I6
sS'.thisN'
p1797
I216
sS'.thisIndex'
p1798
I3
sg15
(lp1799
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1800
S'space'
p1801
asg95
I3
sa(dp1802
g16
(lp1803
S'k'
asg18
S'N'
sS'.thisRepN'
p1804
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1805
I7
sS'.thisN'
p1806
I217
sS'.thisIndex'
p1807
I14
sg15
(lp1808
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I14
sa(dp1809
g16
(lp1810
S'k'
asg18
S'N'
sS'.thisRepN'
p1811
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1812
I8
sS'.thisN'
p1813
I218
sS'.thisIndex'
p1814
I8
sg15
(lp1815
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1816
g16
(lp1817
S'd'
asg18
S'N'
sS'.thisRepN'
p1818
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1819
I9
sS'.thisN'
p1820
I219
sS'.thisIndex'
p1821
I0
sg15
(lp1822
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I0
sa(dp1823
g16
(lp1824
S'k'
asg18
S'N'
sS'.thisRepN'
p1825
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1826
I10
sS'.thisN'
p1827
I220
sS'.thisIndex'
p1828
I14
sg15
(lp1829
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I14
sa(dp1830
g16
(lp1831
S'd'
asg18
S'Y'
sS'.thisRepN'
p1832
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1833
I11
sS'.thisN'
p1834
I221
sS'.thisIndex'
p1835
I6
sg15
(lp1836
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp1837
g16
(lp1838
S'd'
asg18
S'N'
sS'.thisRepN'
p1839
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1840
I12
sS'.thisN'
p1841
I222
sS'.thisIndex'
p1842
I13
sg15
(lp1843
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I13
sa(dp1844
g16
(lp1845
S'd'
asg18
S'Y'
sS'.thisRepN'
p1846
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1847
I13
sS'.thisN'
p1848
I223
sS'.thisIndex'
p1849
I3
sg15
(lp1850
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1851
S'space'
p1852
asg95
I3
sa(dp1853
g16
(lp1854
S'k'
asg18
S'N'
sS'.thisRepN'
p1855
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1856
I14
sS'.thisN'
p1857
I224
sS'.thisIndex'
p1858
I13
sg15
(lp1859
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I13
sa(dp1860
g16
(lp1861
S'd'
asg18
S'N'
sS'.thisRepN'
p1862
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1863
I0
sS'.thisN'
p1864
I225
sS'.thisIndex'
p1865
I5
sg15
(lp1866
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I5
sa(dp1867
g16
(lp1868
S'd'
asg18
S'Y'
sS'.thisRepN'
p1869
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1870
I1
sS'.thisN'
p1871
I226
sS'.thisIndex'
p1872
I8
sg15
(lp1873
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1874
S'space'
p1875
asg95
I8
sa(dp1876
g16
(lp1877
S'k'
asg18
S'N'
sS'.thisRepN'
p1878
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1879
I2
sS'.thisN'
p1880
I227
sS'.thisIndex'
p1881
I3
sg15
(lp1882
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1883
g16
(lp1884
S'd'
asg18
S'Y'
sS'.thisRepN'
p1885
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1886
I3
sS'.thisN'
p1887
I228
sS'.thisIndex'
p1888
I3
sg15
(lp1889
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1890
S'space'
p1891
asg95
I3
sa(dp1892
g16
(lp1893
S'k'
asg18
S'N'
sS'.thisRepN'
p1894
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1895
I4
sS'.thisN'
p1896
I229
sS'.thisIndex'
p1897
I14
sg15
(lp1898
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I14
sa(dp1899
g16
(lp1900
S'k'
asg18
S'N'
sS'.thisRepN'
p1901
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1902
I5
sS'.thisN'
p1903
I230
sS'.thisIndex'
p1904
I2
sg15
(lp1905
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I2
sa(dp1906
g16
(lp1907
S'k'
asg18
S'Y'
sS'.thisRepN'
p1908
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1909
I6
sS'.thisN'
p1910
I231
sS'.thisIndex'
p1911
I8
sg15
(lp1912
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1913
S'space'
p1914
asg95
I8
sa(dp1915
g16
(lp1916
S'k'
asg18
S'N'
sS'.thisRepN'
p1917
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1918
I7
sS'.thisN'
p1919
I232
sS'.thisIndex'
p1920
I9
sg15
(lp1921
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1922
g16
(lp1923
S'k'
asg18
S'Y'
sS'.thisRepN'
p1924
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1925
I8
sS'.thisN'
p1926
I233
sS'.thisIndex'
p1927
I13
sg15
(lp1928
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1929
S'space'
p1930
asg95
I13
sa(dp1931
g16
(lp1932
S'd'
asg18
S'Y'
sS'.thisRepN'
p1933
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1934
I9
sS'.thisN'
p1935
I234
sS'.thisIndex'
p1936
I8
sg15
(lp1937
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1938
S'space'
p1939
asg95
I8
sa(dp1940
g16
(lp1941
S'd'
asg18
S'N'
sS'.thisRepN'
p1942
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1943
I10
sS'.thisN'
p1944
I235
sS'.thisIndex'
p1945
I6
sg15
(lp1946
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp1947
g16
(lp1948
S'd'
asg18
S'Y'
sS'.thisRepN'
p1949
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1950
I11
sS'.thisN'
p1951
I236
sS'.thisIndex'
p1952
I14
sg15
(lp1953
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1954
S'space'
p1955
asg95
I14
sa(dp1956
g16
(lp1957
S'd'
asg18
S'Y'
sS'.thisRepN'
p1958
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1959
I12
sS'.thisN'
p1960
I237
sS'.thisIndex'
p1961
I2
sg15
(lp1962
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1963
S'space'
p1964
asg95
I2
sa(dp1965
g16
(lp1966
S'k'
asg18
S'Y'
sS'.thisRepN'
p1967
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1968
I13
sS'.thisN'
p1969
I238
sS'.thisIndex'
p1970
I5
sg15
(lp1971
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1972
S'space'
p1973
asg95
I5
sa(dp1974
g16
(lp1975
S'd'
asg18
S'N'
sS'.thisRepN'
p1976
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1977
I14
sS'.thisN'
p1978
I239
sS'.thisIndex'
p1979
I2
sg15
(lp1980
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1981
g16
(lp1982
S'd'
asg18
S'Y'
sS'.thisRepN'
p1983
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1984
I0
sS'.thisN'
p1985
I240
sS'.thisIndex'
p1986
I14
sg15
(lp1987
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1988
S'space'
p1989
asg95
I14
sa(dp1990
g16
(lp1991
S'k'
asg18
S'Y'
sS'.thisRepN'
p1992
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1993
I1
sS'.thisN'
p1994
I241
sS'.thisIndex'
p1995
I8
sg15
(lp1996
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1997
S'space'
p1998
asg95
I8
sa(dp1999
g16
(lp2000
S'k'
asg18
S'Y'
sS'.thisRepN'
p2001
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2002
I2
sS'.thisN'
p2003
I242
sS'.thisIndex'
p2004
I6
sg15
(lp2005
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp2006
S'space'
p2007
asg95
I6
sa(dp2008
g16
(lp2009
S'd'
asg18
S'N'
sS'.thisRepN'
p2010
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2011
I3
sS'.thisN'
p2012
I243
sS'.thisIndex'
p2013
I11
sg15
(lp2014
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I11
sa(dp2015
g16
(lp2016
S'd'
asg18
S'Y'
sS'.thisRepN'
p2017
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2018
I4
sS'.thisN'
p2019
I244
sS'.thisIndex'
p2020
I5
sg15
(lp2021
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp2022
S'space'
p2023
asg95
I5
sa(dp2024
g16
(lp2025
S'd'
asg18
S'Y'
sS'.thisRepN'
p2026
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2027
I5
sS'.thisN'
p2028
I245
sS'.thisIndex'
p2029
I1
sg15
(lp2030
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp2031
S'space'
p2032
asg95
I1
sa(dp2033
g16
(lp2034
S'k'
asg18
S'N'
sS'.thisRepN'
p2035
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2036
I6
sS'.thisN'
p2037
I246
sS'.thisIndex'
p2038
I5
sg15
(lp2039
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I5
sa(dp2040
g16
(lp2041
S'd'
asg18
S'N'
sS'.thisRepN'
p2042
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2043
I7
sS'.thisN'
p2044
I247
sS'.thisIndex'
p2045
I13
sg15
(lp2046
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I13
sa(dp2047
g16
(lp2048
S'k'
asg18
S'N'
sS'.thisRepN'
p2049
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2050
I8
sS'.thisN'
p2051
I248
sS'.thisIndex'
p2052
I12
sg15
(lp2053
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I12
sa(dp2054
g16
(lp2055
S'd'
asg18
S'Y'
sg22
I46
sS'.thisN'
p2056
I249
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2057
I9
sS'.thisRepN'
p2058
I16
sg21
I48
sS'.thisIndex'
p2059
I12
sg23
I24
sg15
(lp2060
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp2061
S'space'
p2062
asg95
I12
sa(dp2063
g16
(lp2064
S'k'
asg95
I8
sS'.thisRepN'
p2065
I16
sg30
VF
sg31
g32
sS'.thisTrialN'
p2066
I10
sS'.thisN'
p2067
I250
sS'.thisIndex'
p2068
I8
sg15
(lp2069
S'k'
asg17
S'Y'
sg14
I6
sa(dp2070
g16
(lp2071
S'd'
asg95
I0
sS'.thisRepN'
p2072
I16
sg30
VF
sg31
g32
sS'.thisTrialN'
p2073
I11
sS'.thisN'
p2074
I251
sS'.thisIndex'
p2075
I0
sg15
(lp2076
S'd'
asg17
S'Y'
sg14
I6
sa(dp2077
g16
(lp2078
S'k'
asg18
S'Y'
sS'.thisRepN'
p2079
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2080
I12
sS'.thisN'
p2081
I252
sS'.thisIndex'
p2082
I14
sg15
(lp2083
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2084
S'space'
p2085
asg95
I14
sa(dp2086
g16
(lp2087
S'k'
asg18
S'Y'
sS'.thisRepN'
p2088
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2089
I13
sS'.thisN'
p2090
I253
sS'.thisIndex'
p2091
I10
sg15
(lp2092
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2093
g16
(lp2094
S'd'
asg18
S'N'
sS'.thisRepN'
p2095
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2096
I14
sS'.thisN'
p2097
I254
sS'.thisIndex'
p2098
I3
sg15
(lp2099
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2100
g16
(lp2101
S'k'
asg18
S'Y'
sS'.thisRepN'
p2102
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2103
I0
sS'.thisN'
p2104
I255
sS'.thisIndex'
p2105
I8
sg15
(lp2106
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2107
S'space'
p2108
asg95
I8
sa(dp2109
g16
(lp2110
S'd'
asg18
S'N'
sS'.thisRepN'
p2111
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2112
I1
sS'.thisN'
p2113
I256
sS'.thisIndex'
p2114
I5
sg15
(lp2115
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I5
sa(dp2116
g16
(lp2117
S'k'
asg18
S'N'
sS'.thisRepN'
p2118
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2119
I2
sS'.thisN'
p2120
I257
sS'.thisIndex'
p2121
I6
sg15
(lp2122
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2123
g16
(lp2124
S'd'
asg18
S'N'
sS'.thisRepN'
p2125
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2126
I3
sS'.thisN'
p2127
I258
sS'.thisIndex'
p2128
I8
sg15
(lp2129
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I8
sa(dp2130
g16
(lp2131
S'd'
asg18
S'N'
sS'.thisRepN'
p2132
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2133
I4
sS'.thisN'
p2134
I259
sS'.thisIndex'
p2135
I6
sg15
(lp2136
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2137
g16
(lp2138
S'k'
asg18
S'Y'
sS'.thisRepN'
p2139
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2140
I5
sS'.thisN'
p2141
I260
sS'.thisIndex'
p2142
I13
sg15
(lp2143
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2144
S'space'
p2145
asg95
I13
sa(dp2146
g16
(lp2147
S'd'
asg18
S'Y'
sS'.thisRepN'
p2148
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2149
I6
sS'.thisN'
p2150
I261
sS'.thisIndex'
p2151
I7
sg15
(lp2152
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2153
S'space'
p2154
asg95
I7
sa(dp2155
g16
(lp2156
S'k'
asg18
S'Y'
sS'.thisRepN'
p2157
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2158
I7
sS'.thisN'
p2159
I262
sS'.thisIndex'
p2160
I1
sg15
(lp2161
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2162
S'space'
p2163
asg95
I1
sa(dp2164
g16
(lp2165
S'd'
asg18
S'N'
sS'.thisRepN'
p2166
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2167
I8
sS'.thisN'
p2168
I263
sS'.thisIndex'
p2169
I6
sg15
(lp2170
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2171
S'space'
p2172
asg95
I6
sa(dp2173
g16
(lp2174
S'k'
asg18
S'N'
sS'.thisRepN'
p2175
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2176
I9
sS'.thisN'
p2177
I264
sS'.thisIndex'
p2178
I14
sg15
(lp2179
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I14
sa(dp2180
g16
(lp2181
S'd'
asg18
S'N'
sS'.thisRepN'
p2182
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2183
I10
sS'.thisN'
p2184
I265
sS'.thisIndex'
p2185
I14
sg15
(lp2186
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I14
sa(dp2187
g16
(lp2188
S'd'
asg18
S'Y'
sS'.thisRepN'
p2189
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2190
I11
sS'.thisN'
p2191
I266
sS'.thisIndex'
p2192
I4
sg15
(lp2193
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2194
S'space'
p2195
asg95
I4
sa(dp2196
g16
(lp2197
S'd'
asg18
S'N'
sS'.thisRepN'
p2198
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2199
I12
sS'.thisN'
p2200
I267
sS'.thisIndex'
p2201
I8
sg15
(lp2202
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I8
sa(dp2203
g16
(lp2204
S'k'
asg18
S'N'
sS'.thisRepN'
p2205
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2206
I13
sS'.thisN'
p2207
I268
sS'.thisIndex'
p2208
I9
sg15
(lp2209
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2210
g16
(lp2211
S'k'
asg18
S'Y'
sS'.thisRepN'
p2212
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2213
I14
sS'.thisN'
p2214
I269
sS'.thisIndex'
p2215
I12
sg15
(lp2216
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2217
S'space'
p2218
asg95
I12
sa(dp2219
g16
(lp2220
S'k'
asg18
S'N'
sS'.thisRepN'
p2221
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2222
I0
sS'.thisN'
p2223
I270
sS'.thisIndex'
p2224
I11
sg15
(lp2225
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I11
sa(dp2226
g16
(lp2227
S'd'
asg18
S'Y'
sS'.thisRepN'
p2228
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2229
I1
sS'.thisN'
p2230
I271
sS'.thisIndex'
p2231
I8
sg15
(lp2232
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2233
S'space'
p2234
asg95
I8
sa(dp2235
g16
(lp2236
S'k'
asg18
S'Y'
sS'.thisRepN'
p2237
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2238
I2
sS'.thisN'
p2239
I272
sS'.thisIndex'
p2240
I14
sg15
(lp2241
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2242
S'space'
p2243
asg95
I14
sa(dp2244
g16
(lp2245
S'k'
asg18
S'Y'
sS'.thisRepN'
p2246
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2247
I3
sS'.thisN'
p2248
I273
sS'.thisIndex'
p2249
I14
sg15
(lp2250
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2251
S'space'
p2252
asg95
I14
sa(dp2253
g16
(lp2254
S'd'
asg18
S'Y'
sS'.thisRepN'
p2255
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2256
I4
sS'.thisN'
p2257
I274
sS'.thisIndex'
p2258
I5
sg15
(lp2259
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2260
S'space'
p2261
asg95
I5
sa(dp2262
g16
(lp2263
S'k'
asg18
S'N'
sS'.thisRepN'
p2264
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2265
I5
sS'.thisN'
p2266
I275
sS'.thisIndex'
p2267
I7
sg15
(lp2268
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2269
g16
(lp2270
S'k'
asg18
S'Y'
sS'.thisRepN'
p2271
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2272
I6
sS'.thisN'
p2273
I276
sS'.thisIndex'
p2274
I4
sg15
(lp2275
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2276
S'space'
p2277
asg95
I4
sa(dp2278
g16
(lp2279
S'k'
asg18
S'N'
sS'.thisRepN'
p2280
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2281
I7
sS'.thisN'
p2282
I277
sS'.thisIndex'
p2283
I6
sg15
(lp2284
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2285
g16
(lp2286
S'd'
asg18
S'Y'
sS'.thisRepN'
p2287
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2288
I8
sS'.thisN'
p2289
I278
sS'.thisIndex'
p2290
I3
sg15
(lp2291
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2292
S'space'
p2293
asg95
I3
sa(dp2294
g16
(lp2295
S'k'
asg18
S'N'
sS'.thisRepN'
p2296
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2297
I9
sS'.thisN'
p2298
I279
sS'.thisIndex'
p2299
I7
sg15
(lp2300
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2301
g16
(lp2302
S'd'
asg18
S'Y'
sS'.thisRepN'
p2303
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2304
I10
sS'.thisN'
p2305
I280
sS'.thisIndex'
p2306
I10
sg15
(lp2307
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2308
S'space'
p2309
asg95
I10
sa(dp2310
g16
(lp2311
S'k'
asg18
S'Y'
sS'.thisRepN'
p2312
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2313
I11
sS'.thisN'
p2314
I281
sS'.thisIndex'
p2315
I3
sg15
(lp2316
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2317
S'space'
p2318
asg95
I3
sa(dp2319
g16
(lp2320
S'k'
asg18
S'N'
sS'.thisRepN'
p2321
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2322
I12
sS'.thisN'
p2323
I282
sS'.thisIndex'
p2324
I13
sg15
(lp2325
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I13
sa(dp2326
g16
(lp2327
S'k'
asg18
S'N'
sS'.thisRepN'
p2328
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2329
I13
sS'.thisN'
p2330
I283
sS'.thisIndex'
p2331
I12
sg15
(lp2332
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I12
sa(dp2333
g16
(lp2334
S'k'
asg18
S'Y'
sS'.thisRepN'
p2335
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2336
I14
sS'.thisN'
p2337
I284
sS'.thisIndex'
p2338
I0
sg15
(lp2339
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2340
S'space'
p2341
asg95
I0
sa(dp2342
g16
(lp2343
S'k'
asg18
S'Y'
sS'.thisRepN'
p2344
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2345
I0
sS'.thisN'
p2346
I285
sS'.thisIndex'
p2347
I10
sg15
(lp2348
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2349
S'space'
p2350
asg95
I10
sa(dp2351
g16
(lp2352
S'k'
asg18
S'Y'
sS'.thisRepN'
p2353
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2354
I1
sS'.thisN'
p2355
I286
sS'.thisIndex'
p2356
I11
sg15
(lp2357
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2358
S'space'
p2359
asg95
I11
sa(dp2360
g16
(lp2361
S'k'
asg18
S'N'
sS'.thisRepN'
p2362
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2363
I2
sS'.thisN'
p2364
I287
sS'.thisIndex'
p2365
I5
sg15
(lp2366
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I5
sa(dp2367
g16
(lp2368
S'k'
asg18
S'N'
sS'.thisRepN'
p2369
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2370
I3
sS'.thisN'
p2371
I288
sS'.thisIndex'
p2372
I11
sg15
(lp2373
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I11
sa(dp2374
g16
(lp2375
S'd'
asg18
S'N'
sS'.thisRepN'
p2376
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2377
I4
sS'.thisN'
p2378
I289
sS'.thisIndex'
p2379
I8
sg15
(lp2380
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I8
sa(dp2381
g16
(lp2382
S'd'
asg18
S'N'
sS'.thisRepN'
p2383
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2384
I5
sS'.thisN'
p2385
I290
sS'.thisIndex'
p2386
I12
sg15
(lp2387
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I12
sa(dp2388
g16
(lp2389
S'k'
asg18
S'Y'
sS'.thisRepN'
p2390
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2391
I6
sS'.thisN'
p2392
I291
sS'.thisIndex'
p2393
I13
sg15
(lp2394
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2395
S'space'
p2396
asg95
I13
sa(dp2397
g16
(lp2398
S'k'
asg18
S'Y'
sS'.thisRepN'
p2399
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2400
I7
sS'.thisN'
p2401
I292
sS'.thisIndex'
p2402
I2
sg15
(lp2403
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2404
S'space'
p2405
asg95
I2
sa(dp2406
g16
(lp2407
S'd'
asg18
S'N'
sS'.thisRepN'
p2408
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2409
I8
sS'.thisN'
p2410
I293
sS'.thisIndex'
p2411
I7
sg15
(lp2412
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2413
g16
(lp2414
S'd'
asg18
S'Y'
sS'.thisRepN'
p2415
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2416
I9
sS'.thisN'
p2417
I294
sS'.thisIndex'
p2418
I9
sg15
(lp2419
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2420
S'space'
p2421
asg95
I9
sa(dp2422
g16
(lp2423
S'd'
asg18
S'Y'
sS'.thisRepN'
p2424
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2425
I10
sS'.thisN'
p2426
I295
sS'.thisIndex'
p2427
I2
sg15
(lp2428
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2429
S'space'
p2430
asg95
I2
sa(dp2431
g16
(lp2432
S'd'
asg18
S'N'
sS'.thisRepN'
p2433
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2434
I11
sS'.thisN'
p2435
I296
sS'.thisIndex'
p2436
I2
sg15
(lp2437
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I2
sa(dp2438
g16
(lp2439
S'd'
asg18
S'Y'
sS'.thisRepN'
p2440
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2441
I12
sS'.thisN'
p2442
I297
sS'.thisIndex'
p2443
I13
sg15
(lp2444
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2445
S'space'
p2446
asg95
I13
sa(dp2447
g16
(lp2448
S'k'
asg18
S'N'
sS'.thisRepN'
p2449
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2450
I13
sS'.thisN'
p2451
I298
sS'.thisIndex'
p2452
I3
sg15
(lp2453
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2454
g16
(lp2455
S'd'
asg18
S'N'
sg22
I46
sS'.thisN'
p2456
I299
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2457
I14
sS'.thisRepN'
p2458
I19
sg21
I45
sS'.thisIndex'
p2459
I0
sg23
I24
sg15
(lp2460
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2461
g16
(lp2462
S'd'
asg95
I3
sS'.thisRepN'
p2463
I20
sg30
VF
sg31
g32
sS'.thisTrialN'
p2464
I0
sS'.thisN'
p2465
I300
sS'.thisIndex'
p2466
I3
sg15
(lp2467
S'd'
asg17
S'Y'
sg14
I7
sa(dp2468
g16
(lp2469
S'd'
asg95
I5
sS'.thisRepN'
p2470
I20
sg30
VF
sg31
g32
sS'.thisTrialN'
p2471
I1
sS'.thisN'
p2472
I301
sS'.thisIndex'
p2473
I5
sg15
(lp2474
S'd'
asg17
S'Y'
sg14
I7
sa(dp2475
g16
(lp2476
S'k'
asg18
S'N'
sS'.thisRepN'
p2477
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2478
I2
sS'.thisN'
p2479
I302
sS'.thisIndex'
p2480
I9
sg15
(lp2481
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I9
sa(dp2482
g16
(lp2483
S'd'
asg18
S'Y'
sS'.thisRepN'
p2484
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2485
I3
sS'.thisN'
p2486
I303
sS'.thisIndex'
p2487
I0
sg15
(lp2488
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2489
g16
(lp2490
S'k'
asg18
S'Y'
sS'.thisRepN'
p2491
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2492
I4
sS'.thisN'
p2493
I304
sS'.thisIndex'
p2494
I12
sg15
(lp2495
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2496
S'k'
asg95
I12
sa(dp2497
g16
(lp2498
S'd'
asg18
S'N'
sS'.thisRepN'
p2499
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2500
I5
sS'.thisN'
p2501
I305
sS'.thisIndex'
p2502
I10
sg15
(lp2503
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2504
g16
(lp2505
S'd'
asg18
S'Y'
sS'.thisRepN'
p2506
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2507
I6
sS'.thisN'
p2508
I306
sS'.thisIndex'
p2509
I13
sg15
(lp2510
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2511
S'space'
p2512
asg95
I13
sa(dp2513
g16
(lp2514
S'k'
asg18
S'Y'
sS'.thisRepN'
p2515
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2516
I7
sS'.thisN'
p2517
I307
sS'.thisIndex'
p2518
I12
sg15
(lp2519
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2520
S'space'
p2521
asg95
I12
sa(dp2522
g16
(lp2523
S'd'
asg18
S'Y'
sS'.thisRepN'
p2524
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2525
I8
sS'.thisN'
p2526
I308
sS'.thisIndex'
p2527
I1
sg15
(lp2528
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I1
sa(dp2529
g16
(lp2530
S'k'
asg18
S'N'
sS'.thisRepN'
p2531
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2532
I9
sS'.thisN'
p2533
I309
sS'.thisIndex'
p2534
I5
sg15
(lp2535
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2536
g16
(lp2537
S'k'
asg18
S'Y'
sS'.thisRepN'
p2538
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2539
I10
sS'.thisN'
p2540
I310
sS'.thisIndex'
p2541
I2
sg15
(lp2542
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2543
S'space'
p2544
asg95
I2
sa(dp2545
g16
(lp2546
S'k'
asg18
S'N'
sS'.thisRepN'
p2547
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2548
I11
sS'.thisN'
p2549
I311
sS'.thisIndex'
p2550
I9
sg15
(lp2551
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I9
sa(dp2552
g16
(lp2553
S'k'
asg18
S'Y'
sS'.thisRepN'
p2554
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2555
I12
sS'.thisN'
p2556
I312
sS'.thisIndex'
p2557
I9
sg15
(lp2558
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2559
S'space'
p2560
asg95
I9
sa(dp2561
g16
(lp2562
S'k'
asg18
S'Y'
sS'.thisRepN'
p2563
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2564
I13
sS'.thisN'
p2565
I313
sS'.thisIndex'
p2566
I8
sg15
(lp2567
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2568
S'space'
p2569
asg95
I8
sa(dp2570
g16
(lp2571
S'k'
asg18
S'Y'
sS'.thisRepN'
p2572
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2573
I14
sS'.thisN'
p2574
I314
sS'.thisIndex'
p2575
I3
sg15
(lp2576
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2577
S'space'
p2578
asg95
I3
sa(dp2579
g16
(lp2580
S'k'
asg18
S'N'
sS'.thisRepN'
p2581
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2582
I0
sS'.thisN'
p2583
I315
sS'.thisIndex'
p2584
I2
sg15
(lp2585
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2586
g16
(lp2587
S'k'
asg18
S'N'
sS'.thisRepN'
p2588
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2589
I1
sS'.thisN'
p2590
I316
sS'.thisIndex'
p2591
I2
sg15
(lp2592
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2593
g16
(lp2594
S'k'
asg18
S'N'
sS'.thisRepN'
p2595
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2596
I2
sS'.thisN'
p2597
I317
sS'.thisIndex'
p2598
I5
sg15
(lp2599
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2600
g16
(lp2601
S'k'
asg18
S'N'
sS'.thisRepN'
p2602
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2603
I3
sS'.thisN'
p2604
I318
sS'.thisIndex'
p2605
I10
sg15
(lp2606
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2607
g16
(lp2608
S'k'
asg18
S'Y'
sS'.thisRepN'
p2609
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2610
I4
sS'.thisN'
p2611
I319
sS'.thisIndex'
p2612
I12
sg15
(lp2613
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2614
S'space'
p2615
asg95
I12
sa(dp2616
g16
(lp2617
S'd'
asg18
S'Y'
sS'.thisRepN'
p2618
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2619
I5
sS'.thisN'
p2620
I320
sS'.thisIndex'
p2621
I11
sg15
(lp2622
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I11
sa(dp2623
g16
(lp2624
S'k'
asg18
S'N'
sS'.thisRepN'
p2625
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2626
I6
sS'.thisN'
p2627
I321
sS'.thisIndex'
p2628
I10
sg15
(lp2629
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2630
S'space'
p2631
asg95
I10
sa(dp2632
g16
(lp2633
S'k'
asg18
S'Y'
sS'.thisRepN'
p2634
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2635
I7
sS'.thisN'
p2636
I322
sS'.thisIndex'
p2637
I6
sg15
(lp2638
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2639
S'space'
p2640
asg95
I6
sa(dp2641
g16
(lp2642
S'k'
asg18
S'Y'
sS'.thisRepN'
p2643
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2644
I8
sS'.thisN'
p2645
I323
sS'.thisIndex'
p2646
I6
sg15
(lp2647
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2648
S'space'
p2649
asg95
I6
sa(dp2650
g16
(lp2651
S'k'
asg18
S'Y'
sS'.thisRepN'
p2652
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2653
I9
sS'.thisN'
p2654
I324
sS'.thisIndex'
p2655
I7
sg15
(lp2656
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2657
S'space'
p2658
asg95
I7
sa(dp2659
g16
(lp2660
S'd'
asg18
S'N'
sS'.thisRepN'
p2661
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2662
I10
sS'.thisN'
p2663
I325
sS'.thisIndex'
p2664
I4
sg15
(lp2665
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2666
g16
(lp2667
S'd'
asg18
S'Y'
sS'.thisRepN'
p2668
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2669
I11
sS'.thisN'
p2670
I326
sS'.thisIndex'
p2671
I2
sg15
(lp2672
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2673
S'space'
p2674
asg95
I2
sa(dp2675
g16
(lp2676
S'k'
asg18
S'Y'
sS'.thisRepN'
p2677
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2678
I12
sS'.thisN'
p2679
I327
sS'.thisIndex'
p2680
I8
sg15
(lp2681
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2682
S'space'
p2683
asg95
I8
sa(dp2684
g16
(lp2685
S'k'
asg18
S'N'
sS'.thisRepN'
p2686
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2687
I13
sS'.thisN'
p2688
I328
sS'.thisIndex'
p2689
I3
sg15
(lp2690
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I3
sa(dp2691
g16
(lp2692
S'd'
asg18
S'N'
sS'.thisRepN'
p2693
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2694
I14
sS'.thisN'
p2695
I329
sS'.thisIndex'
p2696
I9
sg15
(lp2697
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I9
sa(dp2698
g16
(lp2699
S'k'
asg18
S'N'
sS'.thisRepN'
p2700
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2701
I0
sS'.thisN'
p2702
I330
sS'.thisIndex'
p2703
I9
sg15
(lp2704
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I9
sa(dp2705
g16
(lp2706
S'k'
asg18
S'Y'
sS'.thisRepN'
p2707
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2708
I1
sS'.thisN'
p2709
I331
sS'.thisIndex'
p2710
I4
sg15
(lp2711
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2712
S'space'
p2713
asg95
I4
sa(dp2714
g16
(lp2715
S'k'
asg18
S'N'
sS'.thisRepN'
p2716
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2717
I2
sS'.thisN'
p2718
I332
sS'.thisIndex'
p2719
I10
sg15
(lp2720
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2721
g16
(lp2722
S'k'
asg18
S'N'
sS'.thisRepN'
p2723
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2724
I3
sS'.thisN'
p2725
I333
sS'.thisIndex'
p2726
I12
sg15
(lp2727
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I12
sa(dp2728
g16
(lp2729
S'k'
asg18
S'Y'
sS'.thisRepN'
p2730
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2731
I4
sS'.thisN'
p2732
I334
sS'.thisIndex'
p2733
I14
sg15
(lp2734
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2735
S'space'
p2736
asg95
I14
sa(dp2737
g16
(lp2738
S'k'
asg18
S'N'
sS'.thisRepN'
p2739
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2740
I5
sS'.thisN'
p2741
I335
sS'.thisIndex'
p2742
I12
sg15
(lp2743
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I12
sa(dp2744
g16
(lp2745
S'k'
asg18
S'Y'
sS'.thisRepN'
p2746
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2747
I6
sS'.thisN'
p2748
I336
sS'.thisIndex'
p2749
I12
sg15
(lp2750
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2751
S'space'
p2752
asg95
I12
sa(dp2753
g16
(lp2754
S'd'
asg18
S'N'
sS'.thisRepN'
p2755
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2756
I7
sS'.thisN'
p2757
I337
sS'.thisIndex'
p2758
I0
sg15
(lp2759
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2760
g16
(lp2761
S'k'
asg18
S'N'
sS'.thisRepN'
p2762
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2763
I8
sS'.thisN'
p2764
I338
sS'.thisIndex'
p2765
I4
sg15
(lp2766
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2767
S'space'
p2768
asg95
I4
sa(dp2769
g16
(lp2770
S'k'
asg18
S'N'
sS'.thisRepN'
p2771
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2772
I9
sS'.thisN'
p2773
I339
sS'.thisIndex'
p2774
I4
sg15
(lp2775
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2776
g16
(lp2777
S'k'
asg18
S'Y'
sS'.thisRepN'
p2778
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2779
I10
sS'.thisN'
p2780
I340
sS'.thisIndex'
p2781
I10
sg15
(lp2782
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2783
S'space'
p2784
asg95
I10
sa(dp2785
g16
(lp2786
S'd'
asg18
S'N'
sS'.thisRepN'
p2787
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2788
I11
sS'.thisN'
p2789
I341
sS'.thisIndex'
p2790
I6
sg15
(lp2791
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2792
g16
(lp2793
S'k'
asg18
S'Y'
sS'.thisRepN'
p2794
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2795
I12
sS'.thisN'
p2796
I342
sS'.thisIndex'
p2797
I3
sg15
(lp2798
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2799
S'space'
p2800
asg95
I3
sa(dp2801
g16
(lp2802
S'd'
asg18
S'N'
sS'.thisRepN'
p2803
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2804
I13
sS'.thisN'
p2805
I343
sS'.thisIndex'
p2806
I8
sg15
(lp2807
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2808
g16
(lp2809
S'k'
asg18
S'Y'
sS'.thisRepN'
p2810
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2811
I14
sS'.thisN'
p2812
I344
sS'.thisIndex'
p2813
I8
sg15
(lp2814
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2815
g16
(lp2816
S'd'
asg18
S'N'
sS'.thisRepN'
p2817
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2818
I0
sS'.thisN'
p2819
I345
sS'.thisIndex'
p2820
I13
sg15
(lp2821
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I13
sa(dp2822
g16
(lp2823
S'd'
asg18
S'Y'
sS'.thisRepN'
p2824
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2825
I1
sS'.thisN'
p2826
I346
sS'.thisIndex'
p2827
I9
sg15
(lp2828
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2829
S'space'
p2830
asg95
I9
sa(dp2831
g16
(lp2832
S'd'
asg18
S'N'
sS'.thisRepN'
p2833
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2834
I2
sS'.thisN'
p2835
I347
sS'.thisIndex'
p2836
I12
sg15
(lp2837
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2838
S'space'
p2839
asg95
I12
sa(dp2840
g16
(lp2841
S'd'
asg18
S'Y'
sS'.thisRepN'
p2842
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2843
I3
sS'.thisN'
p2844
I348
sS'.thisIndex'
p2845
I5
sg15
(lp2846
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2847
S'space'
p2848
asg95
I5
sa(dp2849
g16
(lp2850
S'k'
asg18
S'N'
sg22
I40
sS'.thisN'
p2851
I349
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2852
I4
sS'.thisRepN'
p2853
I23
sg21
I50
sS'.thisIndex'
p2854
I2
sg23
I24
sg15
(lp2855
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2856
g16
(lp2857
S'd'
asg95
I8
sS'.thisRepN'
p2858
I23
sg30
VF
sg31
g32
sS'.thisTrialN'
p2859
I5
sS'.thisN'
p2860
I350
sS'.thisIndex'
p2861
I8
sg15
(lp2862
S'd'
asg17
S'Y'
sg14
I8
sa(dp2863
g16
(lp2864
S'd'
asg95
I9
sS'.thisRepN'
p2865
I23
sg30
VF
sg31
g32
sS'.thisTrialN'
p2866
I6
sS'.thisN'
p2867
I351
sS'.thisIndex'
p2868
I9
sg15
(lp2869
S'd'
asg17
S'Y'
sg14
I8
sa(dp2870
g16
(lp2871
S'k'
asg18
S'N'
sS'.thisRepN'
p2872
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2873
I7
sS'.thisN'
p2874
I352
sS'.thisIndex'
p2875
I1
sg15
(lp2876
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp2877
g16
(lp2878
S'k'
asg18
S'N'
sS'.thisRepN'
p2879
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2880
I8
sS'.thisN'
p2881
I353
sS'.thisIndex'
p2882
I1
sg15
(lp2883
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp2884
g16
(lp2885
S'k'
asg18
S'N'
sS'.thisRepN'
p2886
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2887
I9
sS'.thisN'
p2888
I354
sS'.thisIndex'
p2889
I14
sg15
(lp2890
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I14
sa(dp2891
g16
(lp2892
S'k'
asg18
S'N'
sS'.thisRepN'
p2893
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2894
I10
sS'.thisN'
p2895
I355
sS'.thisIndex'
p2896
I7
sg15
(lp2897
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp2898
g16
(lp2899
S'd'
asg18
S'Y'
sS'.thisRepN'
p2900
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2901
I11
sS'.thisN'
p2902
I356
sS'.thisIndex'
p2903
I2
sg15
(lp2904
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2905
S'space'
p2906
asg95
I2
sa(dp2907
g16
(lp2908
S'd'
asg18
S'N'
sS'.thisRepN'
p2909
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2910
I12
sS'.thisN'
p2911
I357
sS'.thisIndex'
p2912
I9
sg15
(lp2913
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp2914
g16
(lp2915
S'd'
asg18
S'Y'
sS'.thisRepN'
p2916
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2917
I13
sS'.thisN'
p2918
I358
sS'.thisIndex'
p2919
I9
sg15
(lp2920
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp2921
S'space'
p2922
asg95
I9
sa(dp2923
g16
(lp2924
S'k'
asg18
S'Y'
sS'.thisRepN'
p2925
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2926
I14
sS'.thisN'
p2927
I359
sS'.thisIndex'
p2928
I1
sg15
(lp2929
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2930
S'space'
p2931
asg95
I1
sa(dp2932
g16
(lp2933
S'd'
asg18
S'Y'
sS'.thisRepN'
p2934
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2935
I0
sS'.thisN'
p2936
I360
sS'.thisIndex'
p2937
I11
sg15
(lp2938
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp2939
S'space'
p2940
asg95
I11
sa(dp2941
g16
(lp2942
S'k'
asg18
S'Y'
sS'.thisRepN'
p2943
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2944
I1
sS'.thisN'
p2945
I361
sS'.thisIndex'
p2946
I7
sg15
(lp2947
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2948
S'space'
p2949
asg95
I7
sa(dp2950
g16
(lp2951
S'd'
asg18
S'N'
sS'.thisRepN'
p2952
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2953
I2
sS'.thisN'
p2954
I362
sS'.thisIndex'
p2955
I12
sg15
(lp2956
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I12
sa(dp2957
g16
(lp2958
S'k'
asg18
S'N'
sS'.thisRepN'
p2959
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2960
I3
sS'.thisN'
p2961
I363
sS'.thisIndex'
p2962
I7
sg15
(lp2963
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp2964
g16
(lp2965
S'd'
asg18
S'Y'
sS'.thisRepN'
p2966
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2967
I4
sS'.thisN'
p2968
I364
sS'.thisIndex'
p2969
I8
sg15
(lp2970
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp2971
g16
(lp2972
S'd'
asg18
S'Y'
sS'.thisRepN'
p2973
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2974
I5
sS'.thisN'
p2975
I365
sS'.thisIndex'
p2976
I6
sg15
(lp2977
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2978
S'space'
p2979
asg95
I6
sa(dp2980
g16
(lp2981
S'd'
asg18
S'N'
sS'.thisRepN'
p2982
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2983
I6
sS'.thisN'
p2984
I366
sS'.thisIndex'
p2985
I9
sg15
(lp2986
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp2987
g16
(lp2988
S'd'
asg18
S'Y'
sS'.thisRepN'
p2989
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2990
I7
sS'.thisN'
p2991
I367
sS'.thisIndex'
p2992
I1
sg15
(lp2993
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2994
S'space'
p2995
asg95
I1
sa(dp2996
g16
(lp2997
S'd'
asg18
S'Y'
sS'.thisRepN'
p2998
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2999
I8
sS'.thisN'
p3000
I368
sS'.thisIndex'
p3001
I9
sg15
(lp3002
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3003
S'space'
p3004
asg95
I9
sa(dp3005
g16
(lp3006
S'd'
asg18
S'N'
sS'.thisRepN'
p3007
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3008
I9
sS'.thisN'
p3009
I369
sS'.thisIndex'
p3010
I5
sg15
(lp3011
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp3012
g16
(lp3013
S'k'
asg18
S'Y'
sS'.thisRepN'
p3014
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3015
I10
sS'.thisN'
p3016
I370
sS'.thisIndex'
p3017
I14
sg15
(lp3018
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3019
S'space'
p3020
asg95
I14
sa(dp3021
g16
(lp3022
S'k'
asg18
S'N'
sS'.thisRepN'
p3023
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3024
I11
sS'.thisN'
p3025
I371
sS'.thisIndex'
p3026
I12
sg15
(lp3027
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I12
sa(dp3028
g16
(lp3029
S'd'
asg18
S'N'
sS'.thisRepN'
p3030
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3031
I12
sS'.thisN'
p3032
I372
sS'.thisIndex'
p3033
I7
sg15
(lp3034
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp3035
g16
(lp3036
S'k'
asg18
S'N'
sS'.thisRepN'
p3037
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3038
I13
sS'.thisN'
p3039
I373
sS'.thisIndex'
p3040
I1
sg15
(lp3041
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp3042
g16
(lp3043
S'k'
asg18
S'Y'
sS'.thisRepN'
p3044
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3045
I14
sS'.thisN'
p3046
I374
sS'.thisIndex'
p3047
I14
sg15
(lp3048
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3049
S'space'
p3050
asg95
I14
sa(dp3051
g16
(lp3052
S'd'
asg18
S'Y'
sS'.thisRepN'
p3053
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3054
I0
sS'.thisN'
p3055
I375
sS'.thisIndex'
p3056
I6
sg15
(lp3057
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3058
S'space'
p3059
asg95
I6
sa(dp3060
g16
(lp3061
S'k'
asg18
S'N'
sS'.thisRepN'
p3062
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3063
I1
sS'.thisN'
p3064
I376
sS'.thisIndex'
p3065
I0
sg15
(lp3066
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp3067
g16
(lp3068
S'k'
asg18
S'Y'
sS'.thisRepN'
p3069
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3070
I2
sS'.thisN'
p3071
I377
sS'.thisIndex'
p3072
I4
sg15
(lp3073
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3074
S'space'
p3075
asg95
I4
sa(dp3076
g16
(lp3077
S'k'
asg18
S'N'
sS'.thisRepN'
p3078
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3079
I3
sS'.thisN'
p3080
I378
sS'.thisIndex'
p3081
I1
sg15
(lp3082
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp3083
g16
(lp3084
S'd'
asg18
S'Y'
sS'.thisRepN'
p3085
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3086
I4
sS'.thisN'
p3087
I379
sS'.thisIndex'
p3088
I4
sg15
(lp3089
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3090
S'space'
p3091
asg95
I4
sa(dp3092
g16
(lp3093
S'd'
asg18
S'N'
sS'.thisRepN'
p3094
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3095
I5
sS'.thisN'
p3096
I380
sS'.thisIndex'
p3097
I0
sg15
(lp3098
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp3099
g16
(lp3100
S'k'
asg18
S'N'
sS'.thisRepN'
p3101
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3102
I6
sS'.thisN'
p3103
I381
sS'.thisIndex'
p3104
I10
sg15
(lp3105
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I10
sa(dp3106
g16
(lp3107
S'k'
asg18
S'Y'
sS'.thisRepN'
p3108
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3109
I7
sS'.thisN'
p3110
I382
sS'.thisIndex'
p3111
I7
sg15
(lp3112
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3113
S'space'
p3114
asg95
I7
sa(dp3115
g16
(lp3116
S'd'
asg18
S'Y'
sS'.thisRepN'
p3117
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3118
I8
sS'.thisN'
p3119
I383
sS'.thisIndex'
p3120
I5
sg15
(lp3121
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3122
S'space'
p3123
asg95
I5
sa(dp3124
g16
(lp3125
S'd'
asg18
S'Y'
sS'.thisRepN'
p3126
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3127
I9
sS'.thisN'
p3128
I384
sS'.thisIndex'
p3129
I5
sg15
(lp3130
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3131
S'space'
p3132
asg95
I5
sa(dp3133
g16
(lp3134
S'k'
asg18
S'Y'
sS'.thisRepN'
p3135
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3136
I10
sS'.thisN'
p3137
I385
sS'.thisIndex'
p3138
I6
sg15
(lp3139
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3140
S'space'
p3141
asg95
I6
sa(dp3142
g16
(lp3143
S'k'
asg18
S'Y'
sS'.thisRepN'
p3144
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3145
I11
sS'.thisN'
p3146
I386
sS'.thisIndex'
p3147
I12
sg15
(lp3148
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3149
S'space'
p3150
asg95
I12
sa(dp3151
g16
(lp3152
S'd'
asg18
S'N'
sS'.thisRepN'
p3153
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3154
I12
sS'.thisN'
p3155
I387
sS'.thisIndex'
p3156
I1
sg15
(lp3157
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp3158
S'space'
p3159
asg95
I1
sa(dp3160
g16
(lp3161
S'k'
asg18
S'N'
sS'.thisRepN'
p3162
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3163
I13
sS'.thisN'
p3164
I388
sS'.thisIndex'
p3165
I10
sg15
(lp3166
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3167
S'space'
p3168
asg95
I10
sa(dp3169
g16
(lp3170
S'd'
asg18
S'N'
sS'.thisRepN'
p3171
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3172
I14
sS'.thisN'
p3173
I389
sS'.thisIndex'
p3174
I10
sg15
(lp3175
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp3176
S'space'
p3177
asg95
I10
sa(dp3178
g16
(lp3179
S'd'
asg18
S'N'
sS'.thisRepN'
p3180
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3181
I0
sS'.thisN'
p3182
I390
sS'.thisIndex'
p3183
I11
sg15
(lp3184
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I11
sa(dp3185
g16
(lp3186
S'k'
asg18
S'Y'
sS'.thisRepN'
p3187
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3188
I1
sS'.thisN'
p3189
I391
sS'.thisIndex'
p3190
I5
sg15
(lp3191
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3192
S'space'
p3193
asg95
I5
sa(dp3194
g16
(lp3195
S'd'
asg18
S'Y'
sS'.thisRepN'
p3196
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3197
I2
sS'.thisN'
p3198
I392
sS'.thisIndex'
p3199
I8
sg15
(lp3200
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp3201
S'space'
p3202
asg95
I8
sa(dp3203
g16
(lp3204
S'k'
asg18
S'Y'
sS'.thisRepN'
p3205
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3206
I3
sS'.thisN'
p3207
I393
sS'.thisIndex'
p3208
I8
sg15
(lp3209
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3210
S'space'
p3211
asg95
I8
sa(dp3212
g16
(lp3213
S'k'
asg18
S'N'
sS'.thisRepN'
p3214
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3215
I4
sS'.thisN'
p3216
I394
sS'.thisIndex'
p3217
I8
sg15
(lp3218
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp3219
g16
(lp3220
S'd'
asg18
S'N'
sS'.thisRepN'
p3221
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3222
I5
sS'.thisN'
p3223
I395
sS'.thisIndex'
p3224
I5
sg15
(lp3225
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp3226
g16
(lp3227
S'd'
asg18
S'N'
sS'.thisRepN'
p3228
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3229
I6
sS'.thisN'
p3230
I396
sS'.thisIndex'
p3231
I2
sg15
(lp3232
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp3233
g16
(lp3234
S'd'
asg18
S'N'
sS'.thisRepN'
p3235
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3236
I7
sS'.thisN'
p3237
I397
sS'.thisIndex'
p3238
I8
sg15
(lp3239
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp3240
g16
(lp3241
S'd'
asg18
S'Y'
sS'.thisRepN'
p3242
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3243
I8
sS'.thisN'
p3244
I398
sS'.thisIndex'
p3245
I5
sg15
(lp3246
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3247
S'space'
p3248
asg95
I5
sa(dp3249
g16
(lp3250
S'd'
asg18
S'Y'
sg22
I44
sS'.thisN'
p3251
I399
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3252
I9
sS'.thisRepN'
p3253
I26
sg21
I43
sS'.thisIndex'
p3254
I6
sg23
I24
sg15
(lp3255
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp3256
S'space'
p3257
asg95
I6
sa(dp3258
g16
(lp3259
S'k'
asg95
I6
sS'.thisRepN'
p3260
I26
sg30
VF
sg31
g32
sS'.thisTrialN'
p3261
I10
sS'.thisN'
p3262
I400
sS'.thisIndex'
p3263
I6
sg15
(lp3264
S'k'
asg17
S'Y'
sg14
I9
sa(dp3265
g16
(lp3266
S'k'
asg95
I1
sS'.thisRepN'
p3267
I26
sg30
VF
sg31
g32
sS'.thisTrialN'
p3268
I11
sS'.thisN'
p3269
I401
sS'.thisIndex'
p3270
I1
sg15
(lp3271
S'k'
asg17
S'Y'
sg14
I9
sa(dp3272
g16
(lp3273
S'd'
asg18
S'N'
sS'.thisRepN'
p3274
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3275
I12
sS'.thisN'
p3276
I402
sS'.thisIndex'
p3277
I1
sg15
(lp3278
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3279
g16
(lp3280
S'd'
asg18
S'N'
sS'.thisRepN'
p3281
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3282
I13
sS'.thisN'
p3283
I403
sS'.thisIndex'
p3284
I11
sg15
(lp3285
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I11
sa(dp3286
g16
(lp3287
S'k'
asg18
S'Y'
sS'.thisRepN'
p3288
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3289
I14
sS'.thisN'
p3290
I404
sS'.thisIndex'
p3291
I11
sg15
(lp3292
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3293
S'space'
p3294
asg95
I11
sa(dp3295
g16
(lp3296
S'd'
asg18
S'N'
sS'.thisRepN'
p3297
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3298
I0
sS'.thisN'
p3299
I405
sS'.thisIndex'
p3300
I11
sg15
(lp3301
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I11
sa(dp3302
g16
(lp3303
S'k'
asg18
S'N'
sS'.thisRepN'
p3304
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3305
I1
sS'.thisN'
p3306
I406
sS'.thisIndex'
p3307
I9
sg15
(lp3308
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3309
g16
(lp3310
S'd'
asg18
S'N'
sS'.thisRepN'
p3311
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3312
I2
sS'.thisN'
p3313
I407
sS'.thisIndex'
p3314
I3
sg15
(lp3315
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3316
g16
(lp3317
S'd'
asg18
S'Y'
sS'.thisRepN'
p3318
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3319
I3
sS'.thisN'
p3320
I408
sS'.thisIndex'
p3321
I9
sg15
(lp3322
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3323
S'space'
p3324
asg95
I9
sa(dp3325
g16
(lp3326
S'k'
asg18
S'N'
sS'.thisRepN'
p3327
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3328
I4
sS'.thisN'
p3329
I409
sS'.thisIndex'
p3330
I2
sg15
(lp3331
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3332
g16
(lp3333
S'd'
asg18
S'N'
sS'.thisRepN'
p3334
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3335
I5
sS'.thisN'
p3336
I410
sS'.thisIndex'
p3337
I0
sg15
(lp3338
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3339
g16
(lp3340
S'k'
asg18
S'Y'
sS'.thisRepN'
p3341
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3342
I6
sS'.thisN'
p3343
I411
sS'.thisIndex'
p3344
I1
sg15
(lp3345
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3346
g16
(lp3347
S'd'
asg18
S'N'
sS'.thisRepN'
p3348
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3349
I7
sS'.thisN'
p3350
I412
sS'.thisIndex'
p3351
I1
sg15
(lp3352
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3353
g16
(lp3354
S'd'
asg18
S'Y'
sS'.thisRepN'
p3355
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3356
I8
sS'.thisN'
p3357
I413
sS'.thisIndex'
p3358
I13
sg15
(lp3359
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3360
S'space'
p3361
asg95
I13
sa(dp3362
g16
(lp3363
S'k'
asg18
S'N'
sS'.thisRepN'
p3364
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3365
I9
sS'.thisN'
p3366
I414
sS'.thisIndex'
p3367
I11
sg15
(lp3368
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I11
sa(dp3369
g16
(lp3370
S'd'
asg18
S'N'
sS'.thisRepN'
p3371
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3372
I10
sS'.thisN'
p3373
I415
sS'.thisIndex'
p3374
I0
sg15
(lp3375
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3376
g16
(lp3377
S'd'
asg18
S'Y'
sS'.thisRepN'
p3378
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3379
I11
sS'.thisN'
p3380
I416
sS'.thisIndex'
p3381
I8
sg15
(lp3382
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3383
S'space'
p3384
asg95
I8
sa(dp3385
g16
(lp3386
S'k'
asg18
S'Y'
sS'.thisRepN'
p3387
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3388
I12
sS'.thisN'
p3389
I417
sS'.thisIndex'
p3390
I13
sg15
(lp3391
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3392
S'space'
p3393
asg95
I13
sa(dp3394
g16
(lp3395
S'k'
asg18
S'Y'
sS'.thisRepN'
p3396
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3397
I13
sS'.thisN'
p3398
I418
sS'.thisIndex'
p3399
I6
sg15
(lp3400
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3401
S'space'
p3402
asg95
I6
sa(dp3403
g16
(lp3404
S'k'
asg18
S'N'
sS'.thisRepN'
p3405
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3406
I14
sS'.thisN'
p3407
I419
sS'.thisIndex'
p3408
I11
sg15
(lp3409
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I11
sa(dp3410
g16
(lp3411
S'd'
asg18
S'Y'
sS'.thisRepN'
p3412
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3413
I0
sS'.thisN'
p3414
I420
sS'.thisIndex'
p3415
I7
sg15
(lp3416
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3417
S'space'
p3418
asg95
I7
sa(dp3419
g16
(lp3420
S'k'
asg18
S'N'
sS'.thisRepN'
p3421
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3422
I1
sS'.thisN'
p3423
I421
sS'.thisIndex'
p3424
I7
sg15
(lp3425
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I7
sa(dp3426
g16
(lp3427
S'd'
asg18
S'Y'
sS'.thisRepN'
p3428
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3429
I2
sS'.thisN'
p3430
I422
sS'.thisIndex'
p3431
I1
sg15
(lp3432
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3433
S'space'
p3434
asg95
I1
sa(dp3435
g16
(lp3436
S'k'
asg18
S'N'
sS'.thisRepN'
p3437
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3438
I3
sS'.thisN'
p3439
I423
sS'.thisIndex'
p3440
I2
sg15
(lp3441
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3442
g16
(lp3443
S'k'
asg18
S'Y'
sS'.thisRepN'
p3444
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3445
I4
sS'.thisN'
p3446
I424
sS'.thisIndex'
p3447
I12
sg15
(lp3448
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3449
S'space'
p3450
asg95
I12
sa(dp3451
g16
(lp3452
S'k'
asg18
S'Y'
sS'.thisRepN'
p3453
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3454
I5
sS'.thisN'
p3455
I425
sS'.thisIndex'
p3456
I6
sg15
(lp3457
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3458
S'space'
p3459
asg95
I6
sa(dp3460
g16
(lp3461
S'd'
asg18
S'N'
sS'.thisRepN'
p3462
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3463
I6
sS'.thisN'
p3464
I426
sS'.thisIndex'
p3465
I7
sg15
(lp3466
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I7
sa(dp3467
g16
(lp3468
S'd'
asg18
S'N'
sS'.thisRepN'
p3469
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3470
I7
sS'.thisN'
p3471
I427
sS'.thisIndex'
p3472
I9
sg15
(lp3473
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3474
g16
(lp3475
S'k'
asg18
S'Y'
sS'.thisRepN'
p3476
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3477
I8
sS'.thisN'
p3478
I428
sS'.thisIndex'
p3479
I11
sg15
(lp3480
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3481
S'space'
p3482
asg95
I11
sa(dp3483
g16
(lp3484
S'k'
asg18
S'Y'
sS'.thisRepN'
p3485
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3486
I9
sS'.thisN'
p3487
I429
sS'.thisIndex'
p3488
I4
sg15
(lp3489
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3490
S'space'
p3491
asg95
I4
sa(dp3492
g16
(lp3493
S'k'
asg18
S'Y'
sS'.thisRepN'
p3494
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3495
I10
sS'.thisN'
p3496
I430
sS'.thisIndex'
p3497
I6
sg15
(lp3498
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3499
S'space'
p3500
asg95
I6
sa(dp3501
g16
(lp3502
S'k'
asg18
S'N'
sS'.thisRepN'
p3503
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3504
I11
sS'.thisN'
p3505
I431
sS'.thisIndex'
p3506
I4
sg15
(lp3507
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I4
sa(dp3508
g16
(lp3509
S'd'
asg18
S'Y'
sS'.thisRepN'
p3510
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3511
I12
sS'.thisN'
p3512
I432
sS'.thisIndex'
p3513
I3
sg15
(lp3514
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3515
S'space'
p3516
asg95
I3
sa(dp3517
g16
(lp3518
S'k'
asg18
S'Y'
sS'.thisRepN'
p3519
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3520
I13
sS'.thisN'
p3521
I433
sS'.thisIndex'
p3522
I5
sg15
(lp3523
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3524
S'k'
asg95
I5
sa(dp3525
g16
(lp3526
S'd'
asg18
S'Y'
sS'.thisRepN'
p3527
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3528
I14
sS'.thisN'
p3529
I434
sS'.thisIndex'
p3530
I6
sg15
(lp3531
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3532
S'space'
p3533
asg95
I6
sa(dp3534
g16
(lp3535
S'k'
asg18
S'Y'
sS'.thisRepN'
p3536
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3537
I0
sS'.thisN'
p3538
I435
sS'.thisIndex'
p3539
I11
sg15
(lp3540
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3541
S'space'
p3542
asg95
I11
sa(dp3543
g16
(lp3544
S'd'
asg18
S'Y'
sS'.thisRepN'
p3545
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3546
I1
sS'.thisN'
p3547
I436
sS'.thisIndex'
p3548
I11
sg15
(lp3549
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3550
S'space'
p3551
asg95
I11
sa(dp3552
g16
(lp3553
S'k'
asg18
S'Y'
sS'.thisRepN'
p3554
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3555
I2
sS'.thisN'
p3556
I437
sS'.thisIndex'
p3557
I12
sg15
(lp3558
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3559
S'space'
p3560
asg95
I12
sa(dp3561
g16
(lp3562
S'd'
asg18
S'N'
sS'.thisRepN'
p3563
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3564
I3
sS'.thisN'
p3565
I438
sS'.thisIndex'
p3566
I13
sg15
(lp3567
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I13
sa(dp3568
g16
(lp3569
S'k'
asg18
S'Y'
sS'.thisRepN'
p3570
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3571
I4
sS'.thisN'
p3572
I439
sS'.thisIndex'
p3573
I10
sg15
(lp3574
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp3575
g16
(lp3576
S'd'
asg18
S'Y'
sS'.thisRepN'
p3577
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3578
I5
sS'.thisN'
p3579
I440
sS'.thisIndex'
p3580
I2
sg15
(lp3581
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3582
S'space'
p3583
asg95
I2
sa(dp3584
g16
(lp3585
S'k'
asg18
S'Y'
sS'.thisRepN'
p3586
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3587
I6
sS'.thisN'
p3588
I441
sS'.thisIndex'
p3589
I11
sg15
(lp3590
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3591
S'space'
p3592
asg95
I11
sa(dp3593
g16
(lp3594
S'k'
asg18
S'N'
sS'.thisRepN'
p3595
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3596
I7
sS'.thisN'
p3597
I442
sS'.thisIndex'
p3598
I7
sg15
(lp3599
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I7
sa(dp3600
g16
(lp3601
S'd'
asg18
S'Y'
sS'.thisRepN'
p3602
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3603
I8
sS'.thisN'
p3604
I443
sS'.thisIndex'
p3605
I7
sg15
(lp3606
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3607
S'space'
p3608
asg95
I7
sa(dp3609
g16
(lp3610
S'd'
asg18
S'N'
sS'.thisRepN'
p3611
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3612
I9
sS'.thisN'
p3613
I444
sS'.thisIndex'
p3614
I13
sg15
(lp3615
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I13
sa(dp3616
g16
(lp3617
S'd'
asg18
S'Y'
sS'.thisRepN'
p3618
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3619
I10
sS'.thisN'
p3620
I445
sS'.thisIndex'
p3621
I2
sg15
(lp3622
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3623
S'space'
p3624
asg95
I2
sa(dp3625
g16
(lp3626
S'k'
asg18
S'N'
sS'.thisRepN'
p3627
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3628
I11
sS'.thisN'
p3629
I446
sS'.thisIndex'
p3630
I12
sg15
(lp3631
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I12
sa(dp3632
g16
(lp3633
S'k'
asg18
S'N'
sS'.thisRepN'
p3634
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3635
I12
sS'.thisN'
p3636
I447
sS'.thisIndex'
p3637
I2
sg15
(lp3638
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
Nsg95
I2
sa(dp3639
g16
(lp3640
S'k'
asg18
S'N'
sS'.thisRepN'
p3641
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3642
I13
sS'.thisN'
p3643
I448
sS'.thisIndex'
p3644
I3
sg15
(lp3645
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3646
g16
(lp3647
S'd'
asg18
S'N'
sg22
I45
sS'.thisN'
p3648
I449
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3649
I14
sS'.thisRepN'
p3650
I29
sg21
I48
sS'.thisIndex'
p3651
I14
sg23
I25
sg15
(lp3652
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I14
sa(dp3653
g16
(lp3654
S'd'
asg95
I14
sS'.thisRepN'
p3655
I30
sg30
VF
sg31
g32
sS'.thisTrialN'
p3656
I0
sS'.thisN'
p3657
I450
sS'.thisIndex'
p3658
I14
sg15
(lp3659
S'd'
asg17
S'Y'
sg14
I10
sa(dp3660
g16
(lp3661
S'k'
asg95
I10
sS'.thisRepN'
p3662
I30
sg30
VF
sg31
g32
sS'.thisTrialN'
p3663
I1
sS'.thisN'
p3664
I451
sS'.thisIndex'
p3665
I10
sg15
(lp3666
S'k'
asg17
S'Y'
sg14
I10
sa(dp3667
g16
(lp3668
S'd'
asg18
S'Y'
sS'.thisRepN'
p3669
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3670
I2
sS'.thisN'
p3671
I452
sS'.thisIndex'
p3672
I2
sg15
(lp3673
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3674
S'space'
p3675
asg95
I2
sa(dp3676
g16
(lp3677
S'd'
asg18
S'Y'
sS'.thisRepN'
p3678
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3679
I3
sS'.thisN'
p3680
I453
sS'.thisIndex'
p3681
I14
sg15
(lp3682
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3683
S'space'
p3684
asg95
I14
sa(dp3685
g16
(lp3686
S'd'
asg18
S'N'
sS'.thisRepN'
p3687
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3688
I4
sS'.thisN'
p3689
I454
sS'.thisIndex'
p3690
I4
sg15
(lp3691
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I4
sa(dp3692
g16
(lp3693
S'd'
asg18
S'N'
sS'.thisRepN'
p3694
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3695
I5
sS'.thisN'
p3696
I455
sS'.thisIndex'
p3697
I9
sg15
(lp3698
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3699
g16
(lp3700
S'k'
asg18
S'Y'
sS'.thisRepN'
p3701
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3702
I6
sS'.thisN'
p3703
I456
sS'.thisIndex'
p3704
I1
sg15
(lp3705
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3706
S'space'
p3707
asg95
I1
sa(dp3708
g16
(lp3709
S'd'
asg18
S'Y'
sS'.thisRepN'
p3710
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3711
I7
sS'.thisN'
p3712
I457
sS'.thisIndex'
p3713
I6
sg15
(lp3714
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3715
S'space'
p3716
asg95
I6
sa(dp3717
g16
(lp3718
S'd'
asg18
S'Y'
sS'.thisRepN'
p3719
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3720
I8
sS'.thisN'
p3721
I458
sS'.thisIndex'
p3722
I7
sg15
(lp3723
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3724
S'space'
p3725
asg95
I7
sa(dp3726
g16
(lp3727
S'd'
asg18
S'Y'
sS'.thisRepN'
p3728
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3729
I9
sS'.thisN'
p3730
I459
sS'.thisIndex'
p3731
I7
sg15
(lp3732
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3733
S'space'
p3734
asg95
I7
sa(dp3735
g16
(lp3736
S'k'
asg18
S'Y'
sS'.thisRepN'
p3737
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3738
I10
sS'.thisN'
p3739
I460
sS'.thisIndex'
p3740
I8
sg15
(lp3741
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3742
S'space'
p3743
asg95
I8
sa(dp3744
g16
(lp3745
S'd'
asg18
S'Y'
sS'.thisRepN'
p3746
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3747
I11
sS'.thisN'
p3748
I461
sS'.thisIndex'
p3749
I1
sg15
(lp3750
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3751
S'space'
p3752
asg95
I1
sa(dp3753
g16
(lp3754
S'd'
asg18
S'N'
sS'.thisRepN'
p3755
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3756
I12
sS'.thisN'
p3757
I462
sS'.thisIndex'
p3758
I2
sg15
(lp3759
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I2
sa(dp3760
g16
(lp3761
S'k'
asg18
S'N'
sS'.thisRepN'
p3762
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3763
I13
sS'.thisN'
p3764
I463
sS'.thisIndex'
p3765
I1
sg15
(lp3766
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3767
g16
(lp3768
S'd'
asg18
S'N'
sS'.thisRepN'
p3769
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3770
I14
sS'.thisN'
p3771
I464
sS'.thisIndex'
p3772
I5
sg15
(lp3773
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3774
g16
(lp3775
S'k'
asg18
S'N'
sS'.thisRepN'
p3776
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3777
I0
sS'.thisN'
p3778
I465
sS'.thisIndex'
p3779
I14
sg15
(lp3780
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I14
sa(dp3781
g16
(lp3782
S'd'
asg18
S'Y'
sS'.thisRepN'
p3783
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3784
I1
sS'.thisN'
p3785
I466
sS'.thisIndex'
p3786
I3
sg15
(lp3787
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3788
g16
(lp3789
S'd'
asg18
S'N'
sS'.thisRepN'
p3790
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3791
I2
sS'.thisN'
p3792
I467
sS'.thisIndex'
p3793
I3
sg15
(lp3794
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3795
g16
(lp3796
S'k'
asg18
S'N'
sS'.thisRepN'
p3797
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3798
I3
sS'.thisN'
p3799
I468
sS'.thisIndex'
p3800
I2
sg15
(lp3801
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I2
sa(dp3802
g16
(lp3803
S'd'
asg18
S'Y'
sS'.thisRepN'
p3804
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3805
I4
sS'.thisN'
p3806
I469
sS'.thisIndex'
p3807
I13
sg15
(lp3808
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3809
S'space'
p3810
asg95
I13
sa(dp3811
g16
(lp3812
S'd'
asg18
S'N'
sS'.thisRepN'
p3813
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3814
I5
sS'.thisN'
p3815
I470
sS'.thisIndex'
p3816
I1
sg15
(lp3817
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3818
g16
(lp3819
S'd'
asg18
S'N'
sS'.thisRepN'
p3820
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3821
I6
sS'.thisN'
p3822
I471
sS'.thisIndex'
p3823
I7
sg15
(lp3824
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I7
sa(dp3825
g16
(lp3826
S'k'
asg18
S'Y'
sS'.thisRepN'
p3827
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3828
I7
sS'.thisN'
p3829
I472
sS'.thisIndex'
p3830
I7
sg15
(lp3831
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3832
S'space'
p3833
asg95
I7
sa(dp3834
g16
(lp3835
S'k'
asg18
S'Y'
sS'.thisRepN'
p3836
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3837
I8
sS'.thisN'
p3838
I473
sS'.thisIndex'
p3839
I4
sg15
(lp3840
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3841
S'space'
p3842
asg95
I4
sa(dp3843
g16
(lp3844
S'k'
asg18
S'N'
sS'.thisRepN'
p3845
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3846
I9
sS'.thisN'
p3847
I474
sS'.thisIndex'
p3848
I9
sg15
(lp3849
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I9
sa(dp3850
g16
(lp3851
S'k'
asg18
S'Y'
sS'.thisRepN'
p3852
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3853
I10
sS'.thisN'
p3854
I475
sS'.thisIndex'
p3855
I6
sg15
(lp3856
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I6
sa(dp3857
g16
(lp3858
S'k'
asg18
S'Y'
sS'.thisRepN'
p3859
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3860
I11
sS'.thisN'
p3861
I476
sS'.thisIndex'
p3862
I12
sg15
(lp3863
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
(lp3864
S'space'
p3865
asg95
I12
sa(dp3866
g16
(lp3867
S'k'
asg18
S'Y'
sS'.thisRepN'
p3868
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3869
I12
sS'.thisN'
p3870
I477
sS'.thisIndex'
p3871
I11
sg15
(lp3872
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3873
S'space'
p3874
asg95
I11
sa(dp3875
g16
(lp3876
S'k'
asg18
S'N'
sS'.thisRepN'
p3877
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3878
I13
sS'.thisN'
p3879
I478
sS'.thisIndex'
p3880
I11
sg15
(lp3881
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I11
sa(dp3882
g16
(lp3883
S'd'
asg18
S'N'
sS'.thisRepN'
p3884
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3885
I14
sS'.thisN'
p3886
I479
sS'.thisIndex'
p3887
I13
sg15
(lp3888
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I13
sa(dp3889
g16
(lp3890
S'k'
asg18
S'N'
sS'.thisRepN'
p3891
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3892
I0
sS'.thisN'
p3893
I480
sS'.thisIndex'
p3894
I14
sg15
(lp3895
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I14
sa(dp3896
g16
(lp3897
S'd'
asg18
S'Y'
sS'.thisRepN'
p3898
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3899
I1
sS'.thisN'
p3900
I481
sS'.thisIndex'
p3901
I9
sg15
(lp3902
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3903
S'space'
p3904
asg95
I9
sa(dp3905
g16
(lp3906
S'k'
asg18
S'Y'
sS'.thisRepN'
p3907
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3908
I2
sS'.thisN'
p3909
I482
sS'.thisIndex'
p3910
I10
sg15
(lp3911
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I10
sa(dp3912
g16
(lp3913
S'd'
asg18
S'Y'
sS'.thisRepN'
p3914
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3915
I3
sS'.thisN'
p3916
I483
sS'.thisIndex'
p3917
I12
sg15
(lp3918
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I12
sa(dp3919
g16
(lp3920
S'd'
asg18
S'Y'
sS'.thisRepN'
p3921
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3922
I4
sS'.thisN'
p3923
I484
sS'.thisIndex'
p3924
I12
sg15
(lp3925
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3926
S'space'
p3927
asg95
I12
sa(dp3928
g16
(lp3929
S'k'
asg18
S'N'
sS'.thisRepN'
p3930
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3931
I5
sS'.thisN'
p3932
I485
sS'.thisIndex'
p3933
I12
sg15
(lp3934
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I12
sa(dp3935
g16
(lp3936
S'k'
asg18
S'Y'
sS'.thisRepN'
p3937
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3938
I6
sS'.thisN'
p3939
I486
sS'.thisIndex'
p3940
I12
sg15
(lp3941
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3942
S'space'
p3943
asg95
I12
sa(dp3944
g16
(lp3945
S'd'
asg18
S'Y'
sS'.thisRepN'
p3946
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3947
I7
sS'.thisN'
p3948
I487
sS'.thisIndex'
p3949
I9
sg15
(lp3950
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3951
S'space'
p3952
asg95
I9
sa(dp3953
g16
(lp3954
S'k'
asg18
S'Y'
sS'.thisRepN'
p3955
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3956
I8
sS'.thisN'
p3957
I488
sS'.thisIndex'
p3958
I6
sg15
(lp3959
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3960
S'space'
p3961
asg95
I6
sa(dp3962
g16
(lp3963
S'k'
asg18
S'N'
sS'.thisRepN'
p3964
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3965
I9
sS'.thisN'
p3966
I489
sS'.thisIndex'
p3967
I3
sg15
(lp3968
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3969
g16
(lp3970
S'k'
asg18
S'N'
sS'.thisRepN'
p3971
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3972
I10
sS'.thisN'
p3973
I490
sS'.thisIndex'
p3974
I1
sg15
(lp3975
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3976
g16
(lp3977
S'd'
asg18
S'Y'
sS'.thisRepN'
p3978
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3979
I11
sS'.thisN'
p3980
I491
sS'.thisIndex'
p3981
I1
sg15
(lp3982
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3983
S'space'
p3984
asg95
I1
sa(dp3985
g16
(lp3986
S'd'
asg18
S'Y'
sS'.thisRepN'
p3987
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3988
I12
sS'.thisN'
p3989
I492
sS'.thisIndex'
p3990
I14
sg15
(lp3991
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3992
S'space'
p3993
asg95
I14
sa(dp3994
g16
(lp3995
S'd'
asg18
S'N'
sS'.thisRepN'
p3996
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3997
I13
sS'.thisN'
p3998
I493
sS'.thisIndex'
p3999
I5
sg15
(lp4000
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp4001
g16
(lp4002
S'k'
asg18
S'Y'
sS'.thisRepN'
p4003
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4004
I14
sS'.thisN'
p4005
I494
sS'.thisIndex'
p4006
I4
sg15
(lp4007
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp4008
S'space'
p4009
asg95
I4
sa(dp4010
g16
(lp4011
S'd'
asg18
S'N'
sS'.thisRepN'
p4012
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4013
I0
sS'.thisN'
p4014
I495
sS'.thisIndex'
p4015
I7
sg15
(lp4016
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I7
sa(dp4017
g16
(lp4018
S'k'
asg18
S'N'
sS'.thisRepN'
p4019
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4020
I1
sS'.thisN'
p4021
I496
sS'.thisIndex'
p4022
I0
sg15
(lp4023
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp4024
g16
(lp4025
S'd'
asg18
S'N'
sS'.thisRepN'
p4026
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4027
I2
sS'.thisN'
p4028
I497
sS'.thisIndex'
p4029
I13
sg15
(lp4030
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp4031
S'space'
p4032
asg95
I13
sa(dp4033
g16
(lp4034
S'k'
asg18
S'N'
sS'.thisRepN'
p4035
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4036
I3
sS'.thisN'
p4037
I498
sS'.thisIndex'
p4038
I0
sg15
(lp4039
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp4040
g16
(lp4041
S'd'
asg18
S'N'
sg22
I43
sS'.thisN'
p4042
I499
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4043
I4
sS'.thisRepN'
p4044
I33
sg21
I48
sS'.thisIndex'
p4045
I1
sg23
I25
sg15
(lp4046
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp4047
g16
(lp4048
S'k'
asS'.thisIndex'
p4049
I12
sS'.thisRepN'
p4050
I33
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4051
I5
sS'.thisN'
p4052
I500
sg25
S'Y'
sg24
S'Y'
sg15
(lp4053
S'd'
asg17
S'Y'
sg14
I11
sg95
I12
sa(dp4054
g16
(lp4055
S'd'
asS'.thisIndex'
p4056
I7
sS'.thisRepN'
p4057
I33
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4058
I6
sS'.thisN'
p4059
I501
sg25
S'Y'
sg15
(lp4060
S'd'
asg17
S'N'
sg14
I11
sg95
I7
sa(dp4061
g16
(lp4062
S'd'
asg18
S'N'
sS'.thisRepN'
p4063
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4064
I7
sS'.thisN'
p4065
I502
sg25
S'Y'
sg15
(lp4066
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4067
I2
sa(dp4068
g16
(lp4069
S'k'
asg18
S'Y'
sS'.thisRepN'
p4070
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4071
I8
sS'.thisN'
p4072
I503
sg25
S'Y'
sg15
(lp4073
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4074
S'space'
p4075
asg95
I4
sS'.thisIndex'
p4076
I4
sa(dp4077
g16
(lp4078
S'd'
asg18
S'Y'
sS'.thisRepN'
p4079
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4080
I9
sS'.thisN'
p4081
I504
sg25
S'Y'
sg15
(lp4082
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4083
S'space'
p4084
asg95
I1
sS'.thisIndex'
p4085
I1
sa(dp4086
g16
(lp4087
S'k'
asg18
S'N'
sS'.thisRepN'
p4088
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4089
I10
sS'.thisN'
p4090
I505
sg25
S'Y'
sg15
(lp4091
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4092
I5
sa(dp4093
g16
(lp4094
S'k'
asg18
S'Y'
sS'.thisRepN'
p4095
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4096
I11
sS'.thisN'
p4097
I506
sg25
S'Y'
sg15
(lp4098
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4099
S'space'
p4100
asg95
I9
sS'.thisIndex'
p4101
I9
sa(dp4102
g16
(lp4103
S'k'
asg18
S'Y'
sS'.thisRepN'
p4104
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4105
I12
sS'.thisN'
p4106
I507
sg25
S'Y'
sg15
(lp4107
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4108
S'space'
p4109
asg95
I4
sS'.thisIndex'
p4110
I4
sa(dp4111
g16
(lp4112
S'k'
asg18
S'N'
sS'.thisRepN'
p4113
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4114
I13
sS'.thisN'
p4115
I508
sg25
S'Y'
sg15
(lp4116
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4117
I10
sa(dp4118
g16
(lp4119
S'd'
asg18
S'Y'
sS'.thisRepN'
p4120
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4121
I14
sS'.thisN'
p4122
I509
sg25
S'Y'
sg15
(lp4123
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4124
S'space'
p4125
asg95
I13
sS'.thisIndex'
p4126
I13
sa(dp4127
g16
(lp4128
S'k'
asg18
S'Y'
sS'.thisRepN'
p4129
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4130
I0
sS'.thisN'
p4131
I510
sg25
S'Y'
sg15
(lp4132
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4133
I0
sa(dp4134
g18
S'Y'
sS'.thisRepN'
p4135
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4136
I1
sS'.thisN'
p4137
I511
sg25
S'Y'
sg15
Nsg30
VF
sg17
S'Timed out'
p4138
sg14
I11
sg19
(lp4139
S'space'
p4140
asg95
I14
sS'.thisIndex'
p4141
I14
sa(dp4142
g16
(lp4143
S'd'
asg18
S'N'
sS'.thisRepN'
p4144
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4145
I2
sS'.thisN'
p4146
I512
sg25
S'Y'
sg15
(lp4147
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4148
S'space'
p4149
asg95
I14
sS'.thisIndex'
p4150
I14
sa(dp4151
g16
(lp4152
S'k'
asg18
S'N'
sS'.thisRepN'
p4153
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4154
I3
sS'.thisN'
p4155
I513
sg25
S'Y'
sg15
(lp4156
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4157
I10
sa(dp4158
g16
(lp4159
S'd'
asg18
S'N'
sS'.thisRepN'
p4160
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4161
I4
sS'.thisN'
p4162
I514
sg25
S'Y'
sg15
(lp4163
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4164
S'space'
p4165
asg95
I10
sS'.thisIndex'
p4166
I10
sa(dp4167
g16
(lp4168
S'k'
asg18
S'Y'
sS'.thisRepN'
p4169
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4170
I5
sS'.thisN'
p4171
I515
sg25
S'Y'
sg15
(lp4172
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4173
I8
sa(dp4174
g16
(lp4175
S'k'
asg18
S'Y'
sS'.thisRepN'
p4176
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4177
I6
sS'.thisN'
p4178
I516
sg25
S'Y'
sg15
(lp4179
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4180
S'space'
p4181
asg95
I4
sS'.thisIndex'
p4182
I4
sa(dp4183
g16
(lp4184
S'd'
asg18
S'N'
sS'.thisRepN'
p4185
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4186
I7
sS'.thisN'
p4187
I517
sg25
S'Y'
sg15
(lp4188
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4189
I0
sa(dp4190
g16
(lp4191
S'd'
asg18
S'N'
sS'.thisRepN'
p4192
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4193
I8
sS'.thisN'
p4194
I518
sg25
S'Y'
sg15
(lp4195
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4196
I9
sa(dp4197
g16
(lp4198
S'k'
asg18
S'Y'
sS'.thisRepN'
p4199
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4200
I9
sS'.thisN'
p4201
I519
sg25
S'Y'
sg15
(lp4202
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4203
S'space'
p4204
asg95
I13
sS'.thisIndex'
p4205
I13
sa(dp4206
g16
(lp4207
S'd'
asg18
S'Y'
sS'.thisRepN'
p4208
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4209
I10
sS'.thisN'
p4210
I520
sg25
S'Y'
sg15
(lp4211
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4212
S'k'
asg95
I0
sS'.thisIndex'
p4213
I0
sa(dp4214
g16
(lp4215
S'd'
asg18
S'N'
sS'.thisRepN'
p4216
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4217
I11
sS'.thisN'
p4218
I521
sg25
S'Y'
sg15
(lp4219
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4220
I1
sa(dp4221
g16
(lp4222
S'k'
asg18
S'N'
sS'.thisRepN'
p4223
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4224
I12
sS'.thisN'
p4225
I522
sg25
S'Y'
sg15
(lp4226
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4227
I6
sa(dp4228
g16
(lp4229
S'k'
asg18
S'N'
sS'.thisRepN'
p4230
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4231
I13
sS'.thisN'
p4232
I523
sg25
S'Y'
sg15
(lp4233
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4234
I4
sa(dp4235
g16
(lp4236
S'd'
asg18
S'Y'
sS'.thisRepN'
p4237
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4238
I14
sS'.thisN'
p4239
I524
sg25
S'Y'
sg15
(lp4240
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4241
S'space'
p4242
asg95
I4
sS'.thisIndex'
p4243
I4
sa(dp4244
g16
(lp4245
S'd'
asg18
S'Y'
sS'.thisRepN'
p4246
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4247
I0
sS'.thisN'
p4248
I525
sg25
S'Y'
sg15
(lp4249
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4250
S'space'
p4251
asg95
I3
sS'.thisIndex'
p4252
I3
sa(dp4253
g16
(lp4254
S'k'
asg18
S'Y'
sS'.thisRepN'
p4255
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4256
I1
sS'.thisN'
p4257
I526
sg25
S'Y'
sg15
(lp4258
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4259
S'space'
p4260
asg95
I5
sS'.thisIndex'
p4261
I5
sa(dp4262
g16
(lp4263
S'd'
asg18
S'Y'
sS'.thisRepN'
p4264
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4265
I2
sS'.thisN'
p4266
I527
sg25
S'Y'
sg15
(lp4267
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4268
S'space'
p4269
asg95
I11
sS'.thisIndex'
p4270
I11
sa(dp4271
g16
(lp4272
S'k'
asg18
S'Y'
sS'.thisRepN'
p4273
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4274
I3
sS'.thisN'
p4275
I528
sg25
S'Y'
sg15
(lp4276
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4277
S'space'
p4278
asg95
I14
sS'.thisIndex'
p4279
I14
sa(dp4280
g16
(lp4281
S'd'
asg18
S'Y'
sS'.thisRepN'
p4282
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4283
I4
sS'.thisN'
p4284
I529
sg25
S'Y'
sg15
(lp4285
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4286
S'space'
p4287
asg95
I10
sS'.thisIndex'
p4288
I10
sa(dp4289
g16
(lp4290
S'k'
asg18
S'Y'
sS'.thisRepN'
p4291
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4292
I5
sS'.thisN'
p4293
I530
sg25
S'Y'
sg15
(lp4294
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4295
S'd'
asg95
I1
sS'.thisIndex'
p4296
I1
sa(dp4297
g16
(lp4298
S'd'
asg18
S'N'
sS'.thisRepN'
p4299
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4300
I6
sS'.thisN'
p4301
I531
sg25
S'Y'
sg15
(lp4302
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I14
sS'.thisIndex'
p4303
I14
sa(dp4304
g16
(lp4305
S'k'
asg18
S'N'
sS'.thisRepN'
p4306
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4307
I7
sS'.thisN'
p4308
I532
sg25
S'Y'
sg15
(lp4309
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I12
sS'.thisIndex'
p4310
I12
sa(dp4311
g16
(lp4312
S'k'
asg18
S'N'
sS'.thisRepN'
p4313
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4314
I8
sS'.thisN'
p4315
I533
sg25
S'Y'
sg15
(lp4316
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4317
I3
sa(dp4318
g16
(lp4319
S'k'
asg18
S'N'
sS'.thisRepN'
p4320
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4321
I9
sS'.thisN'
p4322
I534
sg25
S'Y'
sg15
(lp4323
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4324
I1
sa(dp4325
g16
(lp4326
S'd'
asg18
S'Y'
sS'.thisRepN'
p4327
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4328
I10
sS'.thisN'
p4329
I535
sg25
S'Y'
sg15
(lp4330
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4331
S'space'
p4332
asg95
I1
sS'.thisIndex'
p4333
I1
sa(dp4334
g16
(lp4335
S'd'
asg18
S'Y'
sS'.thisRepN'
p4336
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4337
I11
sS'.thisN'
p4338
I536
sg25
S'Y'
sg15
(lp4339
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4340
S'space'
p4341
asg95
I14
sS'.thisIndex'
p4342
I14
sa(dp4343
g16
(lp4344
S'd'
asg18
S'N'
sS'.thisRepN'
p4345
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4346
I12
sS'.thisN'
p4347
I537
sg25
S'Y'
sg15
(lp4348
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I13
sS'.thisIndex'
p4349
I13
sa(dp4350
g16
(lp4351
S'k'
asg18
S'Y'
sS'.thisRepN'
p4352
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4353
I13
sS'.thisN'
p4354
I538
sg25
S'Y'
sg15
(lp4355
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4356
S'space'
p4357
asg95
I6
sS'.thisIndex'
p4358
I6
sa(dp4359
g16
(lp4360
S'k'
asg18
S'N'
sS'.thisRepN'
p4361
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4362
I14
sS'.thisN'
p4363
I539
sg25
S'Y'
sg15
(lp4364
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4365
I4
sa(dp4366
g16
(lp4367
S'k'
asg18
S'N'
sS'.thisRepN'
p4368
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4369
I0
sS'.thisN'
p4370
I540
sg25
S'Y'
sg15
(lp4371
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4372
I0
sa(dp4373
g18
S'N'
sS'.thisRepN'
p4374
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4375
I1
sS'.thisN'
p4376
I541
sg25
S'Y'
sg15
Nsg30
VF
sg17
g4138
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4377
I8
sa(dp4378
g16
(lp4379
S'd'
asg18
S'Y'
sS'.thisRepN'
p4380
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4381
I2
sS'.thisN'
p4382
I542
sg25
S'Y'
sg15
(lp4383
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4384
S'space'
p4385
asg95
I4
sS'.thisIndex'
p4386
I4
sa(dp4387
g16
(lp4388
S'd'
asg18
S'N'
sS'.thisRepN'
p4389
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4390
I3
sS'.thisN'
p4391
I543
sg25
S'Y'
sg15
(lp4392
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4393
I6
sa(dp4394
g16
(lp4395
S'd'
asg18
S'Y'
sS'.thisRepN'
p4396
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4397
I4
sS'.thisN'
p4398
I544
sg25
S'Y'
sg15
(lp4399
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4400
S'space'
p4401
asg95
I9
sS'.thisIndex'
p4402
I9
sa(dp4403
g16
(lp4404
S'd'
asg18
S'N'
sS'.thisRepN'
p4405
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4406
I5
sS'.thisN'
p4407
I545
sg25
S'Y'
sg15
(lp4408
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4409
I9
sa(dp4410
g16
(lp4411
S'd'
asg18
S'N'
sS'.thisRepN'
p4412
I36
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4413
I6
sS'.thisN'
p4414
I546
sg25
S'Y'
sg15
(lp4415
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4416
S'space'
p4417
asg95
I9
sS'.thisIndex'
p4418
I9
sa(dp4419
g16
(lp4420
S'd'
asg18
S'N'
sS'.thisRepN'
p4421
I36
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4422
I7
sS'.thisN'
p4423
I547
sg25
S'Y'
sg15
(lp4424
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4425
S'space'
p4426
asg95
I4
sS'.thisIndex'
p4427
I4
sa(dp4428
g16
(lp4429
S'd'
asg18
S'Y'
sS'.thisRepN'
p4430
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4431
I8
sS'.thisN'
p4432
I548
sg25
S'Y'
sg15
(lp4433
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4434
S'space'
p4435
asg95
I10
sS'.thisIndex'
p4436
I10
sa(dp4437
g23
I24
sg18
S'N'
sg22
I40
sg26
S'Y'
sS'.thisN'
p4438
I549
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4439
I9
sS'.thisRepN'
p4440
I36
sg21
I43
sg25
S'Y'
sg15
Nsg30
VF
sg17
g4138
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4441
I0
sa(dp4442
g16
(lp4443
S'd'
asS'.thisIndex'
p4444
I13
sS'.thisRepN'
p4445
I36
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4446
I10
sS'.thisN'
p4447
I550
sg25
S'Y'
sg15
(lp4448
S'k'
asg17
S'Y'
sg14
I12
sg95
I13
sa(dp4449
g16
(lp4450
S'd'
asS'.thisIndex'
p4451
I8
sS'.thisRepN'
p4452
I36
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4453
I11
sS'.thisN'
p4454
I551
sg25
S'Y'
sg15
(lp4455
S'k'
asg17
S'Y'
sg14
I12
sg95
I8
sa(dp4456
g16
(lp4457
S'd'
asg18
S'Y'
sS'.thisRepN'
p4458
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4459
I12
sS'.thisN'
p4460
I552
sg25
S'Y'
sg15
(lp4461
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4462
S'space'
p4463
asg95
I12
sS'.thisIndex'
p4464
I12
sa(dp4465
g16
(lp4466
S'd'
asg18
S'Y'
sS'.thisRepN'
p4467
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4468
I13
sS'.thisN'
p4469
I553
sg25
S'Y'
sg15
(lp4470
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4471
S'space'
p4472
asg95
I2
sS'.thisIndex'
p4473
I2
sa(dp4474
g16
(lp4475
S'k'
asg18
S'N'
sS'.thisRepN'
p4476
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4477
I14
sS'.thisN'
p4478
I554
sg25
S'Y'
sg15
(lp4479
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4480
I2
sa(dp4481
g16
(lp4482
S'k'
asg18
S'Y'
sS'.thisRepN'
p4483
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4484
I0
sS'.thisN'
p4485
I555
sg25
S'Y'
sg15
(lp4486
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4487
S'space'
p4488
asg95
I6
sS'.thisIndex'
p4489
I6
sa(dp4490
g16
(lp4491
S'd'
asg18
S'N'
sS'.thisRepN'
p4492
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4493
I1
sS'.thisN'
p4494
I556
sg25
S'Y'
sg15
(lp4495
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4496
I0
sa(dp4497
g16
(lp4498
S'k'
asg18
S'N'
sS'.thisRepN'
p4499
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4500
I2
sS'.thisN'
p4501
I557
sg25
S'Y'
sg15
(lp4502
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4503
I6
sa(dp4504
g16
(lp4505
S'k'
asg18
S'Y'
sS'.thisRepN'
p4506
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4507
I3
sS'.thisN'
p4508
I558
sg25
S'Y'
sg15
(lp4509
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4510
S'space'
p4511
asg95
I8
sS'.thisIndex'
p4512
I8
sa(dp4513
g16
(lp4514
S'k'
asg18
S'N'
sS'.thisRepN'
p4515
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4516
I4
sS'.thisN'
p4517
I559
sg25
S'Y'
sg15
(lp4518
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4519
I0
sa(dp4520
g16
(lp4521
S'k'
asg18
S'N'
sS'.thisRepN'
p4522
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4523
I5
sS'.thisN'
p4524
I560
sg25
S'Y'
sg15
(lp4525
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4526
I9
sa(dp4527
g16
(lp4528
S'k'
asg18
S'N'
sS'.thisRepN'
p4529
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4530
I6
sS'.thisN'
p4531
I561
sg25
S'Y'
sg15
(lp4532
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4533
I7
sa(dp4534
g16
(lp4535
S'd'
asg18
S'N'
sS'.thisRepN'
p4536
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4537
I7
sS'.thisN'
p4538
I562
sg25
S'Y'
sg15
(lp4539
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4540
I0
sa(dp4541
g16
(lp4542
S'k'
asg18
S'Y'
sS'.thisRepN'
p4543
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4544
I8
sS'.thisN'
p4545
I563
sg25
S'Y'
sg15
(lp4546
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4547
S'space'
p4548
asg95
I3
sS'.thisIndex'
p4549
I3
sa(dp4550
g16
(lp4551
S'd'
asg18
S'N'
sS'.thisRepN'
p4552
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4553
I9
sS'.thisN'
p4554
I564
sg25
S'Y'
sg15
(lp4555
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4556
I1
sa(dp4557
g16
(lp4558
S'd'
asg18
S'Y'
sS'.thisRepN'
p4559
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4560
I10
sS'.thisN'
p4561
I565
sg25
S'Y'
sg15
(lp4562
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4563
S'space'
p4564
asg95
I0
sS'.thisIndex'
p4565
I0
sa(dp4566
g16
(lp4567
S'k'
asg18
S'N'
sS'.thisRepN'
p4568
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4569
I11
sS'.thisN'
p4570
I566
sg25
S'Y'
sg15
(lp4571
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4572
I4
sa(dp4573
g16
(lp4574
S'd'
asg18
S'N'
sS'.thisRepN'
p4575
I37
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4576
I12
sS'.thisN'
p4577
I567
sg25
S'Y'
sg15
(lp4578
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4579
S'k'
asg95
I11
sS'.thisIndex'
p4580
I11
sa(dp4581
g16
(lp4582
S'd'
asg18
S'N'
sS'.thisRepN'
p4583
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4584
I13
sS'.thisN'
p4585
I568
sg25
S'Y'
sg15
(lp4586
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I12
sS'.thisIndex'
p4587
I12
sa(dp4588
g16
(lp4589
S'd'
asg18
S'N'
sS'.thisRepN'
p4590
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4591
I14
sS'.thisN'
p4592
I569
sg25
S'Y'
sg15
(lp4593
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4594
I5
sa(dp4595
g16
(lp4596
S'd'
asg18
S'N'
sS'.thisRepN'
p4597
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4598
I0
sS'.thisN'
p4599
I570
sg25
S'Y'
sg15
(lp4600
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4601
I6
sa(dp4602
g16
(lp4603
S'k'
asg18
S'Y'
sS'.thisRepN'
p4604
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4605
I1
sS'.thisN'
p4606
I571
sg25
S'Y'
sg15
(lp4607
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4608
S'space'
p4609
asg95
I9
sS'.thisIndex'
p4610
I9
sa(dp4611
g16
(lp4612
S'k'
asg18
S'N'
sS'.thisRepN'
p4613
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4614
I2
sS'.thisN'
p4615
I572
sg25
S'Y'
sg15
(lp4616
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I11
sS'.thisIndex'
p4617
I11
sa(dp4618
g16
(lp4619
S'k'
asg18
S'N'
sS'.thisRepN'
p4620
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4621
I3
sS'.thisN'
p4622
I573
sg25
S'Y'
sg15
(lp4623
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I12
sS'.thisIndex'
p4624
I12
sa(dp4625
g16
(lp4626
S'k'
asg18
S'Y'
sS'.thisRepN'
p4627
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4628
I4
sS'.thisN'
p4629
I574
sg25
S'Y'
sg15
(lp4630
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4631
S'space'
p4632
asg95
I7
sS'.thisIndex'
p4633
I7
sa(dp4634
g16
(lp4635
S'd'
asg18
S'Y'
sS'.thisRepN'
p4636
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4637
I5
sS'.thisN'
p4638
I575
sg25
S'Y'
sg15
(lp4639
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4640
S'space'
p4641
asg95
I8
sS'.thisIndex'
p4642
I8
sa(dp4643
g16
(lp4644
S'k'
asg18
S'N'
sS'.thisRepN'
p4645
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4646
I6
sS'.thisN'
p4647
I576
sg25
S'Y'
sg15
(lp4648
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4649
I4
sa(dp4650
g16
(lp4651
S'k'
asg18
S'N'
sS'.thisRepN'
p4652
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4653
I7
sS'.thisN'
p4654
I577
sg25
S'Y'
sg15
(lp4655
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I14
sS'.thisIndex'
p4656
I14
sa(dp4657
g16
(lp4658
S'k'
asg18
S'Y'
sS'.thisRepN'
p4659
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4660
I8
sS'.thisN'
p4661
I578
sg25
S'Y'
sg15
(lp4662
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4663
S'space'
p4664
asg95
I3
sS'.thisIndex'
p4665
I3
sa(dp4666
g16
(lp4667
S'k'
asg18
S'N'
sS'.thisRepN'
p4668
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4669
I9
sS'.thisN'
p4670
I579
sg25
S'Y'
sg15
(lp4671
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4672
I4
sa(dp4673
g16
(lp4674
S'd'
asg18
S'Y'
sS'.thisRepN'
p4675
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4676
I10
sS'.thisN'
p4677
I580
sg25
S'Y'
sg15
(lp4678
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4679
S'space'
p4680
asg95
I11
sS'.thisIndex'
p4681
I11
sa(dp4682
g16
(lp4683
S'd'
asg18
S'N'
sS'.thisRepN'
p4684
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4685
I11
sS'.thisN'
p4686
I581
sg25
S'Y'
sg15
(lp4687
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I12
sS'.thisIndex'
p4688
I12
sa(dp4689
g16
(lp4690
S'd'
asg18
S'N'
sS'.thisRepN'
p4691
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4692
I12
sS'.thisN'
p4693
I582
sg25
S'Y'
sg15
(lp4694
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4695
I8
sa(dp4696
g16
(lp4697
S'd'
asg18
S'N'
sS'.thisRepN'
p4698
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4699
I13
sS'.thisN'
p4700
I583
sg25
S'Y'
sg15
(lp4701
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I12
sS'.thisIndex'
p4702
I12
sa(dp4703
g16
(lp4704
S'k'
asg18
S'N'
sS'.thisRepN'
p4705
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4706
I14
sS'.thisN'
p4707
I584
sg25
S'Y'
sg15
(lp4708
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4709
I9
sa(dp4710
g16
(lp4711
S'd'
asg18
S'Y'
sS'.thisRepN'
p4712
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4713
I0
sS'.thisN'
p4714
I585
sg25
S'Y'
sg15
(lp4715
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4716
S'space'
p4717
asg95
I4
sS'.thisIndex'
p4718
I4
sa(dp4719
g16
(lp4720
S'k'
asg18
S'Y'
sS'.thisRepN'
p4721
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4722
I1
sS'.thisN'
p4723
I586
sg25
S'Y'
sg15
(lp4724
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4725
S'space'
p4726
asg95
I9
sS'.thisIndex'
p4727
I9
sa(dp4728
g16
(lp4729
S'k'
asg18
S'N'
sS'.thisRepN'
p4730
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4731
I2
sS'.thisN'
p4732
I587
sg25
S'Y'
sg15
(lp4733
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4734
I2
sa(dp4735
g16
(lp4736
S'd'
asg18
S'N'
sS'.thisRepN'
p4737
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4738
I3
sS'.thisN'
p4739
I588
sg25
S'Y'
sg15
(lp4740
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4741
I3
sa(dp4742
g16
(lp4743
S'k'
asg18
S'N'
sS'.thisRepN'
p4744
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4745
I4
sS'.thisN'
p4746
I589
sg25
S'Y'
sg15
(lp4747
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4748
I1
sa(dp4749
g16
(lp4750
S'd'
asg18
S'Y'
sS'.thisRepN'
p4751
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4752
I5
sS'.thisN'
p4753
I590
sg25
S'Y'
sg15
(lp4754
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4755
S'space'
p4756
asg95
I14
sS'.thisIndex'
p4757
I14
sa(dp4758
g16
(lp4759
S'd'
asg18
S'Y'
sS'.thisRepN'
p4760
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4761
I6
sS'.thisN'
p4762
I591
sg25
S'Y'
sg15
(lp4763
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4764
S'space'
p4765
asg95
I4
sS'.thisIndex'
p4766
I4
sa(dp4767
g16
(lp4768
S'k'
asg18
S'Y'
sS'.thisRepN'
p4769
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4770
I7
sS'.thisN'
p4771
I592
sg25
S'Y'
sg15
(lp4772
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4773
S'space'
p4774
asg95
I0
sS'.thisIndex'
p4775
I0
sa(dp4776
g16
(lp4777
S'k'
asg18
S'Y'
sS'.thisRepN'
p4778
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4779
I8
sS'.thisN'
p4780
I593
sg25
S'Y'
sg15
(lp4781
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4782
S'space'
p4783
asg95
I7
sS'.thisIndex'
p4784
I7
sa(dp4785
g16
(lp4786
S'd'
asg18
S'N'
sS'.thisRepN'
p4787
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4788
I9
sS'.thisN'
p4789
I594
sg25
S'Y'
sg15
(lp4790
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4791
I10
sa(dp4792
g16
(lp4793
S'd'
asg18
S'N'
sS'.thisRepN'
p4794
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4795
I10
sS'.thisN'
p4796
I595
sg25
S'Y'
sg15
(lp4797
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I13
sS'.thisIndex'
p4798
I13
sa(dp4799
g16
(lp4800
S'd'
asg18
S'Y'
sS'.thisRepN'
p4801
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4802
I11
sS'.thisN'
p4803
I596
sg25
S'Y'
sg15
(lp4804
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4805
S'space'
p4806
asg95
I11
sS'.thisIndex'
p4807
I11
sa(dp4808
g16
(lp4809
S'k'
asg18
S'Y'
sS'.thisRepN'
p4810
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4811
I12
sS'.thisN'
p4812
I597
sg25
S'Y'
sg15
(lp4813
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4814
S'space'
p4815
asg95
I14
sS'.thisIndex'
p4816
I14
sa(dp4817
g16
(lp4818
S'd'
asg18
S'Y'
sS'.thisRepN'
p4819
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4820
I13
sS'.thisN'
p4821
I598
sg25
S'Y'
sg15
(lp4822
S'd'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4823
S'space'
p4824
asg95
I3
sS'.thisIndex'
p4825
I3
sa(dp4826
g16
(lp4827
S'k'
asg18
S'Y'
sg22
I47
sg26
S'Y'
sS'.thisN'
p4828
I599
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4829
I14
sS'.thisRepN'
p4830
I39
sg21
I49
sg25
S'Y'
sg23
I21
sg15
(lp4831
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4832
S'space'
p4833
asg95
I2
sS'.thisIndex'
p4834
I2
sasS'loops'
p4835
(lp4836
g1
(g35
g3
NtRp4837
(dp4838
g38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4839
sg40
(lp4840
sg41
I75561520
sg10
S''
sg6
g42
sg43
I1
sg27
I01
sg28
Nsg44
g1
(g45
g46
(dp4841
g48
g49
(g50
g51
g52
S'b'
tRp4842
(I1
(I600
I1
tg55
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg56
g49
(g50
g51
g52
S'b'
tRp4843
(I1
(I600
I1
tg55
I00
S'\x00\x00kC\x00\x00<C\x00\x000B\x00\x00\xe8A\x00\x80\x14D\x00\x80\xc7C\x00\x80\x08D\x00\x00\x8bC\x00\x00\xd0C\x00\x00\xacB\x00\x00_C\x00\x00|B\x00\x80\xb6C\x00\x00\x0eD\x00\x00?C\x00\x00\x88B\x00\x00WC\x00\x00\x19C\x00\x00\xa3C\x00\x00XB\x00\x00\x82B\x00\x00DC\x00\xc0\x13D\x00\x00\xb8B\x00\x80\xe0C\x00\x80\x0cD\x00\x00\xd5C\x00\x00pA\x00\x00MC\x00\x00\xd0B\x00\x80\xe5C\x00\x00\x9eB\x00\x80\x97C\x00\x00sC\x00\x00\x84B\x00\x80\tD\x00\x00\xd2B\x00\x00\x91C\x00\x00aC\x00\x80\x0eD\x00\x80\xeaC\x00\x00\x0fC\x00\x00\xb7C\x00\x00=C\x00\x00\x98A\x00@\x0eD\x00\x80\xf3C\x00@\x01D\x00\x80\xa2C\x00\x00\x02C\x00\x00\xadC\x00\x80\xbfC\x00\x00\xd6B\x00\x00\nD\x00\x80\xf8C\x00\x00\tC\x00\x00\xb2C\x00\x00\x9aC\x00\x00\x1bC\x00\x00~C\x00\x80\x92C\x00\x00\'C\x00\xc0\x14D\x00\x00$B\x00\x80\xc5C\x00\x00NC\x00\x00\x05C\x00\xc0\x11D\x00\x00\xbeC\x00\x00\xafC\x00\x80\xb2C\x00\x00\xe7C\x00\x00FC\x00\x008C\x00\x00\xc4C\x00\x00\xd8C\x00\x00OC\x00\x80\x07D\x00\x00\xb5C\x00\x00[C\x00\x00\x89C\x00\x80\xe6C\x00\x00\x8cC\x00\x00\xb4C\x00\x00\x11D\x00@\x03D\x00\x80\xf7C\x00\x00\x15D\x00\x80\x93C\x00\x00uC\x00\x00\x80B\x00\xc0\x08D\x00@\rD\x00\x00\xfeB\x00\x00jC\x00\x00tC\x00\x00\xd3C\x00\x80\xfaC\x00@\x06D\x00@\nD\x00\x80\xaaC\x00\x00lC\x00\x00\rD\x00\x00\xfbC\x00\x00\x00D\x00\x00#C\x00\x00\xb8A\x00\x00\x10B\x00\x80\xc9C\x00\x00\x99C\x00\x00\xc6B\x00\x80\xdeC\x00\x00\xc9C\x00\x00\rC\x00\x00\tD\x00\x80\xacC\x00\x80\xb8C\x00\xc0\rD\x00\x00PC\x00\x00KC\x00\x00\x00@\x00\x80\xbdC\x00\x00\xfaB\x00\x00\xd2C\x00\x00\x9aB\x00\xc0\x0fD\x00\x00pB\x00\x80\xa4C\x00\x00\xc0C\x00\x00\x18B\x00\x00\xaeC\x00\x80\x96C\x00\x80\xf5C\x00\x00\xe2C\x00\x00\xbaC\x00\x80\x87C\x00\x00\x80@\x00\x00\x14C\x00\x00\x85C\x00\x00@@\x00\x80\xefC\x00\x00(B\x00\x00"C\x00\x00\xa0@\x00\x00GC\x00\x00\xeaB\x00\x00DB\x00\x80\x95C\x00\x004C\x00\x00)C\x00\x00RC\x00\x80\xbbC\x00\x00mC\x00\x00\xcdC\x00\x00wC\x00\x00\xbaB\x00\x80\xc6C\x00\x00\xdcC\x00\x00\x03D\x00\x00\x81C\x00\x00oC\x00\x00\xceC\x00\x80\x81C\x00\xc0\x04D\x00\x00HC\x00\x80\x15D\x00\x00\xe8C\x00\x80\xe9C\x00\x00\xc7C\x00\x00\xb2B\x00\x00\\B\x00\x00\xaaB\x00\x00SC\x00\x00\x08B\x00\x00^C\x00\x00\x01C\x00\x80\xf1C\x00\x00\x80?\x00\x00-C\x00\x80\x90C\x00\x80\xf0C\x00\x00\xc8B\x00\x00\xf6B\x00\x006C\x00\x00\xeeB\x00\x00\x12C\x00\x00\xd9C\x00\x00\xe9C\x00\x00\x0bC\x00@\x12D\x00@\x08D\x00\x80\xcaC\x00\x00\x0bD\x00@\x02D\x00\x00\xb8C\x00\x00\xc3C\x00\xc0\x05D\x00\x80\xafC\x00@\x04D\x00\x80\x13D\x00\x00\x1dC\x00\x00\xb0B\x00\x80\x83C\x00\x00\xbeB\x00\x00\xe0A\x00\x00,B\x00\x00\xdbC\x00\x00\x92B\x00\x00\xa8B\x00\x00 C\x00\x00dC\x00\x80\xddC\x00\x80\xffC\x00\x00:C\x00\x80\xceC\x00\x00\x94C\x00\x00\nC\x00\x00\x10C\x00\x80\x98C\x00\x00\xe4B\x00\x80\xa8C\x00\x80\xf6C\x00\x00\xbcB\x00\x00\x80A\x00\x80\x94C\x00\x00\xd8B\x00@\x07D\x00\x00\xd4B\x00\x80\xe3C\x00\x00\xe5C\x00\x80\xf9C\x00\x00\x13D\x00\x00\xdaC\x00\x00\xe1C\x00\xc0\x03D\x00\xc0\tD\x00\x80\xe2C\x00\x00\xb0A\x00\x00\xa0C\x00\x80\xebC\x00\x00\x1cB\x00@\x11D\x00\xc0\x07D\x00\x00VC\x00\x00pC\x00\x00\xc6C\x00\x00\x02D\x00\x00\xccC\x00\x00\xfcB\x00\x00`B\x00\x80\x85C\x00\x00\x9cB\x00\x80\xc1C\x00\x00hB\x00\x00\xebC\x00\x80\xabC\x00\x00\xe0@\x00\x00@B\x00\x80\xadC\x00\x00\xdeC\x00\x80\x01D\x00\x00\xc8A\x00\x00\xf8A\x00\x80\xc2C\x00\x007C\x00\x80\x82C\x00\x00UC\x00\x00\xe6B\x00\x00\xe3C\x00\x00\xfcC\x00\x00 B\x00\x80\xe4C\x00\x00\x96C\x00\x00\x06D\x00\x80\xfeC\x00\x00\xf6C\x00\x00\xb6C\x00\x00\xf2C\x00\x80\x11D\x00\x80\xd5C\x00\x80\x00D\x00\x00\xaeB\x00\x00\xa4B\x00\x00\x16C\x00\x00\x80C\x00\x00yC\x00\x00{C\x00\x00\xb3C\x00\x00bC\x00\x00\xf0A\x00\x80\x84C\x00\x00]C\x00\x00\x93C\x00\x00\x94B\x00\x80\xb7C\x00\x80\xcbC\x00\x00.C\x00\x00\x96B\x00\x80\xcfC\x00\x00\x08D\x00\x80\nD\x00\x00\xa0B\x00\x00\xf4B\x00\x00\xaaC\x00\x00\x0eC\x00@\x0cD\x00\x00\x07C\x00\x00\x07D\x00\x00\x98C\x00@\x0fD\x00\x00\x8cB\x00\x00\x82C\x00\x009C\x00\x00IC\x00@\x10D\x00\x00\x9bC\x00\x00\xf8C\x00\x80\xc4C\x00\x00\xa4C\x00\x80\xb9C\x00\x80\xe1C\x00\x80\x89C\x00\xc0\x12D\x00\x00YC\x00\x00(C\x00\x80\xa3C\x00\x80\xdbC\x00\x00\xbdC\x00\x00%C\x00\x00\xb0C\x00\x80\xe7C\x00\xc0\x10D\x00\x80\xd2C\x00\x80\xa0C\x00\x00\xf0C\x00\x80\xb1C\x00\x00\x8eC\x00\x00\x1fC\x00\x00TB\x00\x80\xaeC\x00\x00\x10A\x00\x00\x04D\x00\x00 A\x00\x00\x00B\x00\x00+C\x00\x80\x12D\x00\x00\xeeC\x00\x00\xa0A\x00\x00\x83C\x00\x80\xd4C\x00\x00\x8aC\x00\x00LC\x00\x00\xd1C\x00\x00\xd8A\x00\x00AC\x00\x80\xf4C\x00\x00,C\x00\x00|C\x00\x00\xbfC\x00\xc0\x00D\x00\x80\x04D\x00\x00\xb6B\x00\x00BC\x00\x00\x17C\x00\x005C\x00\x00\x92C\x00\x001C\x00\x80\xbaC\x00\x00\xe0B\x00\x80\xe8C\x00\x80\xedC\x00\x00hC\x00\x00iC\x00\x00\xf5C\x00\x00\x18C\x00\x00\x9dC\x00@\x14D\x00\x00\xcaB\x00\x00\xbbC\x00\x00\x84C\x00\x00\xfeC\x00\x80\x05D\x00\x00&C\x00\x80\xd6C\x00\x00\x08C\x00\x00\x14B\x00\x00!C\x00\x00\xc4B\x00\x00CC\x00\x00\x88A\x00\x00\xdeB\x00\x00dB\x00\x00\x8fC\x00\x00\xf4C\x00@\x13D\x00\x008B\x00\x00\xf7C\x00\x00\x87C\x00\x80\x9fC\x00\x80\xccC\x00\x00qC\x00\x00cC\x00\x00\xe4C\x00\x80\xd9C\x00\x80\x8eC\x00\x80\x9bC\x00\x00xC\x00\x80\x8dC\x00\x80\xb5C\x00\x00\x90A\x00\x00lB\x00\x80\xecC\x00\x80\xd7C\x00\x00\xc0@\x00\x00\x0cC\x00\x80\xd8C\x00\x000C\x00\x80\x91C\x00\x00ZC\x00\x00\xfaC\x00\x00HB\x00\x00$C\x00\x00\xecB\x00\x00;C\x00\x00EC\x00\x00\xb1C\x00\x00}C\x00\x000A\x00\xc0\x0bD\x00\x80\x9eC\x00\x00\x0fD\x00\x80\x88C\x00\x80\xb0C\x00\x00\x97C\x00\xc0\x0cD\x00\x00\xcbC\x00\x80\xdfC\x00\x00\xdaB\x00\x80\xbcC\x00\x00\xb9C\x00\x00\x9eC\x00\x002C\x00\x003C\x00\x80\xdcC\x00\x00QC\x00\x00\x00\x00\x00\x00\xc0A\x00\x00\xe6C\x00\x80\xfbC\x00\x80\x8bC\x00\x00\xcaC\x00\x80\x03D\x00\x00tB\x00\x80\xc0C\x00\x00\xf9C\x00@\x15D\x00\x00\xa6B\x00\x00\x04C\x00\x00LB\x00\x80\xd3C\x00\x00\x86C\x00\x00\xa2C\x00\x00\x11C\x00\x00\x05D\x00\x00\xccB\x00\x80\xd1C\x00\x00\xa5C\x00\xc0\x02D\x00\x00\xefC\x00\x80\x0bD\x00\x80\x8cC\x00\x80\x06D\x00\x00\x0cD\x00\x00\x7fC\x00\x80\x99C\x00@\tD\x00\x80\x0fD\x00\x00\x8aB\x00\x00zC\x00\x00\x9cC\x00\x00/C\x00\xc0\x0eD\x00\x00\xcfC\x00\x00\xa8C\x00\x00\xedC\x00\x80\xdaC\x00\x80\xa6C\x00\x80\xcdC\x00\x00\xe8B\x00\x00<B\x00\x80\rD\x00\x80\xbeC\x00\xc0\x01D\x00\x00\x10D\x00\x00\xe2B\x00\x00\xf1C\x00\x00\xdfC\x00\x80\xf2C\x00\x80\x9cC\x00\xc0\nD\x00\x00XC\x00\x00*C\x00\x80\xeeC\x00\x00\x01D\x00\x00\x06C\x00\x00@C\x00\x00\x1aC\x00\x00\x13C\x00\x00\xf3C\x00\x00JC\x00\x00\x95C\x00\x00>C\x00\xc0\x06D\x00\x00\xa7C\x00\x00\x00A\x00\x00vC\x00\x80\xd0C\x00\x00\xc2C\x00\x00\xc1C\x00\x00nC\x00\x00\xffC\x00\x00\xacC\x00\x80\x02D\x00\x80\xa9C\x00\x00\xb4B\x00\x00\xecC\x00\x00\xd4C\x00\x00\x03C\x00\x004B\x00\x00PA\x00\x00\xddC\x00\x80\x8fC\x00\x80\xfcC\x00\x80\xb3C\x00\x00\xf2B\x00\x00PB\x00\x00\xe0C\x00\x80\xc8C\x00\x00@A\x00\x00\xc8C\x00\x80\x8aC\x00\x00\x04B\x00\x00\\C\x00\x00\x1cC\x00\x00\xd6C\x00\x80\xfdC\x00\x00\x90B\x00\x00eC\x00\x00\xdcB\x00\x80\xc3C\x00\x00\x88C\x00\x80\xa5C\x00\x00\x98B\x00\x80\x9dC\x00@\x00D\x00\x00\xeaC\x00\x00\x8dC\x00\x00\x0cB\x00\x00`A\x00\x00fC\x00\x00\x9fC\x00\x00\x00C\x00\x00\xfdC\x00\x00gC\x00\x00\x8eB\x00\x00\xa2B\x00\x00\x90C\x00\x00`C\x00\x00\xf8B\x00\x00\xc2B\x00\x00\x15C\x00\x00\xa8A\x00\x00\xbcC\x00\x00\xa1C\x00\x00\x1eC\x00\x80\xb4C\x00\x80\xa1C\x00\x00\xa6C\x00\x00\xd7C\x00\x00\xceB\x00\x00\xc5C\x00@\x0bD\x00\x00\x86B\x00\x00\xc0B\x00\x80\x9aC\x00\x00\xf0B\x00\x00TC\x00\x00\x12D\x00\x80\x80C\x00\x80\xa7C\x00@\x05D\x00\x80\x86C\x00\x00\x14D\x00\x00xB\x00\x00rC\x00\x00\xabC\x00\x00\xa9C\x00\xc0\x15D\x00\x00\xd0A\x00\x80\x10D'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4844
(dp4845
g60
(dp4846
g48
I01
sg56
I01
ssg62
g4837
sg63
(lp4847
g48
ag56
asg65
(lp4848
I600
aI1
asbsg67
S'random'
p4849
sg69
g70
(g51
(I0
tS'b'
tRp4850
(I1
(I600
I1
tg54
(S'i4'
I0
I1
tRp4851
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'\xbd\x01\x00\x00\xb1\x00\x00\x00x\x00\x00\x00\x8b\x00\x00\x00\x88\x00\x00\x00\x8f\x00\x00\x00\x9d\x01\x00\x00\x00\x01\x00\x00\x02\x02\x00\x00T\x01\x00\x00V\x01\x00\x00\xab\x01\x00\x00\x1a\x02\x00\x00\x11\x02\x00\x00.\x02\x00\x00\x1b\x00\x00\x00\xdf\x00\x00\x00\x85\x01\x00\x00\x99\x01\x00\x00,\x00\x00\x00[\x01\x00\x00;\x02\x00\x00\xed\x00\x00\x00j\x00\x00\x00\xbe\x01\x00\x00\x05\x01\x00\x00V\x02\x00\x00a\x01\x00\x00\xcc\x00\x00\x00\x03\x00\x00\x00!\x01\x00\x00\x06\x01\x00\x00W\x01\x00\x00\x1d\x02\x00\x00\xad\x00\x00\x00-\x02\x00\x00k\x00\x00\x00\x81\x01\x00\x00\x81\x00\x00\x00\xf0\x00\x00\x00\x0e\x01\x00\x00?\x00\x00\x00\x8d\x00\x00\x00\xcd\x00\x00\x00\x02\x00\x00\x00\x10\x02\x00\x00\x8b\x01\x00\x00\xe9\x01\x00\x00\x01\x01\x00\x00\x92\x00\x00\x00\xa4\x01\x00\x00\xca\x01\x00\x00\x17\x02\x00\x00R\x01\x00\x00\x13\x00\x00\x00\xaa\x00\x00\x00\xf9\x00\x00\x00\x87\x01\x00\x00\xfd\x00\x00\x00\x9a\x01\x00\x00~\x00\x00\x00\xc4\x01\x00\x00Q\x02\x00\x00\x0b\x00\x00\x00Z\x00\x00\x00\x14\x00\x00\x00"\x00\x00\x00F\x02\x00\x00\x0f\x00\x00\x00\xdd\x01\x00\x006\x01\x00\x004\x02\x00\x00"\x02\x00\x00\xcf\x00\x00\x00%\x01\x00\x00)\x01\x00\x00(\x02\x00\x00|\x00\x00\x00\xfb\x00\x00\x00\x1f\x00\x00\x00-\x01\x00\x005\x02\x00\x00\x1a\x01\x00\x00\xc8\x01\x00\x00\xd0\x00\x00\x00\xab\x00\x00\x00\t\x00\x00\x00\x19\x01\x00\x00\xc9\x00\x00\x00\xa9\x00\x00\x00\x0c\x02\x00\x00i\x01\x00\x00\x17\x00\x00\x00\x9b\x00\x00\x00\xde\x00\x00\x00\xcb\x00\x00\x00G\x02\x00\x009\x02\x00\x00\x83\x01\x00\x00n\x00\x00\x00\xb5\x00\x00\x00y\x01\x00\x00\xd0\x01\x00\x00C\x02\x00\x00\x1d\x00\x00\x00$\x00\x00\x00\xe3\x00\x00\x004\x00\x00\x00\xe1\x00\x00\x00\xb5\x01\x00\x00$\x02\x00\x00\x86\x01\x00\x00p\x01\x00\x00\xee\x01\x00\x00\xdb\x00\x00\x00\x0b\x01\x00\x00\xe8\x01\x00\x00\x91\x00\x00\x00\xa6\x01\x00\x00\xb8\x00\x00\x00I\x02\x00\x00\x16\x02\x00\x00.\x01\x00\x00\xb6\x00\x00\x008\x02\x00\x00z\x00\x00\x00\xf8\x00\x00\x00]\x00\x00\x001\x02\x00\x00\xaf\x00\x00\x001\x00\x00\x00\x0f\x02\x00\x00\xc9\x01\x00\x00B\x00\x00\x00\xf8\x01\x00\x002\x01\x00\x00\x80\x01\x00\x007\x00\x00\x00\xd8\x00\x00\x00\xbc\x00\x00\x00\x9e\x01\x00\x00q\x00\x00\x000\x01\x00\x00)\x00\x00\x00\xd9\x00\x00\x00\xce\x01\x00\x00\xb9\x00\x00\x00\xfb\x01\x00\x00\x89\x00\x00\x00:\x02\x00\x00\x1b\x01\x00\x00k\x01\x00\x00v\x01\x00\x00\x11\x00\x00\x00\xfa\x01\x00\x00:\x00\x00\x00\x1f\x02\x00\x00\xc8\x00\x00\x00>\x02\x00\x00Q\x01\x00\x00\xd1\x00\x00\x00\x82\x01\x00\x00\x8e\x00\x00\x00i\x00\x00\x00\xa5\x01\x00\x00H\x01\x00\x00~\x01\x00\x00=\x00\x00\x00D\x01\x00\x00\x95\x00\x00\x00\xf5\x01\x00\x00X\x01\x00\x00d\x01\x00\x00\xb2\x00\x00\x00(\x01\x00\x00\xe0\x01\x00\x00\xa0\x01\x00\x00n\x01\x00\x00\xb9\x01\x00\x00\xba\x01\x00\x00\x94\x00\x00\x00l\x01\x00\x00\xb7\x00\x00\x00\x08\x01\x00\x00I\x00\x00\x008\x01\x00\x00\xd5\x00\x00\x00\xa7\x01\x00\x00\x01\x00\x00\x00+\x00\x00\x00\xff\x01\x00\x00\x0e\x00\x00\x00\xf9\x01\x00\x00b\x01\x00\x00j\x01\x00\x00\x84\x01\x00\x00\x15\x00\x00\x00\xa8\x01\x00\x00H\x00\x00\x00\x90\x00\x00\x00\xa4\x00\x00\x009\x01\x00\x00\xfd\x01\x00\x00w\x00\x00\x00_\x01\x00\x00\x1c\x00\x00\x00A\x00\x00\x00L\x00\x00\x00v\x00\x00\x00\xbc\x01\x00\x00\x96\x00\x00\x00\xac\x00\x00\x00J\x02\x00\x00\n\x01\x00\x00\xf3\x00\x00\x00\x10\x00\x00\x00\xf4\x01\x00\x00C\x01\x00\x00\xa2\x01\x00\x00O\x00\x00\x00\x1e\x02\x00\x00#\x01\x00\x00\xae\x00\x00\x00\n\x00\x00\x007\x02\x00\x00&\x00\x00\x00 \x01\x00\x00\x91\x01\x00\x00\xd2\x00\x00\x00#\x02\x00\x00/\x02\x00\x003\x02\x00\x00s\x01\x00\x00t\x01\x00\x00^\x00\x00\x00\x00\x00\x00\x00e\x00\x00\x00\x98\x00\x00\x00\x07\x02\x00\x00\xa0\x00\x00\x00\xf4\x00\x00\x00\x90\x01\x00\x00R\x02\x00\x00!\x00\x00\x00_\x00\x00\x00Y\x00\x00\x00\x03\x02\x00\x00\x9a\x00\x00\x00\x96\x01\x00\x00\x1d\x01\x00\x00\xde\x01\x00\x00\x1e\x01\x00\x00e\x01\x00\x00\xaa\x01\x00\x00;\x00\x00\x00\xd9\x01\x00\x00\x1c\x01\x00\x00L\x02\x00\x00\x9f\x00\x00\x00\xa2\x00\x00\x007\x01\x00\x00\t\x01\x00\x00\\\x01\x00\x00\xca\x00\x00\x00{\x01\x00\x00"\x01\x00\x00\x8a\x00\x00\x00\xfa\x00\x00\x00\xcc\x01\x00\x00O\x02\x00\x00\x8d\x01\x00\x00\x87\x00\x00\x00&\x02\x00\x00\xaf\x01\x00\x00P\x00\x00\x00A\x01\x00\x00^\x01\x00\x00\x1c\x02\x00\x00\x07\x00\x00\x00\xc1\x01\x00\x00R\x00\x00\x00\xd6\x01\x00\x00,\x02\x00\x00\x97\x01\x00\x00P\x01\x00\x00\x94\x01\x00\x00\x88\x01\x00\x00\x13\x02\x00\x006\x02\x00\x00\xb3\x00\x00\x00%\x00\x00\x00\xa1\x01\x00\x00m\x01\x00\x00<\x00\x00\x00$\x01\x00\x00X\x00\x00\x00\xd7\x00\x00\x00\xe0\x00\x00\x00\xfe\x01\x00\x00\x93\x00\x00\x00\x10\x01\x00\x00\x83\x00\x00\x00\xb1\x01\x00\x00 \x00\x00\x004\x01\x00\x00\xda\x00\x00\x00m\x00\x00\x00\xda\x01\x00\x009\x00\x00\x00H\x02\x00\x00;\x01\x00\x00\x95\x01\x00\x00\xdf\x01\x00\x00\xf2\x01\x00\x00w\x01\x00\x00)\x02\x00\x00\xb8\x01\x00\x00\xad\x01\x00\x000\x02\x00\x00\x8e\x01\x00\x00\xee\x00\x00\x00M\x01\x00\x00=\x02\x00\x00@\x02\x00\x00\xcd\x01\x00\x000\x00\x00\x00\x12\x00\x00\x00E\x01\x00\x00>\x01\x00\x00\x7f\x00\x00\x00\xd2\x01\x00\x00\'\x02\x00\x00A\x02\x00\x00\xe6\x01\x00\x00\x01\x02\x00\x00M\x02\x00\x00\xe3\x01\x00\x00\xdc\x00\x00\x00T\x02\x00\x00\x0b\x02\x00\x00/\x01\x00\x00d\x00\x00\x00S\x02\x00\x00\xff\x00\x00\x00\t\x02\x00\x00s\x00\x00\x002\x00\x00\x00\x02\x01\x00\x00\x82\x00\x00\x00S\x01\x00\x00E\x00\x00\x00\xc5\x00\x00\x00I\x01\x00\x00\xb0\x01\x00\x00\xa9\x01\x00\x00O\x01\x00\x008\x00\x00\x00F\x00\x00\x00\x1f\x01\x00\x00\x15\x02\x00\x00S\x00\x00\x00?\x02\x00\x00N\x00\x00\x00\x98\x01\x00\x00\x14\x01\x00\x00\x0c\x00\x00\x00*\x00\x00\x00&\x01\x00\x00\xc2\x00\x00\x00t\x00\x00\x00\xb7\x01\x00\x00?\x01\x00\x00\x86\x00\x00\x00o\x01\x00\x00z\x01\x00\x00\x97\x00\x00\x00<\x02\x00\x00\xb6\x01\x00\x00G\x01\x00\x00y\x00\x00\x00D\x00\x00\x00\xeb\x01\x00\x00f\x01\x00\x003\x00\x00\x00\x80\x00\x00\x00\xc5\x01\x00\x00\x06\x02\x00\x00\xfc\x00\x00\x00\x05\x02\x00\x00\x07\x01\x00\x00\xc3\x00\x00\x00%\x02\x00\x00J\x00\x00\x00=\x01\x00\x00D\x02\x00\x00@\x00\x00\x00\xf5\x00\x00\x00\x9c\x00\x00\x00\xa8\x00\x00\x00\x05\x00\x00\x00\x1b\x02\x00\x00\x19\x02\x00\x00p\x00\x00\x00l\x00\x00\x00\xc2\x01\x00\x00\xbf\x00\x00\x00\xb3\x01\x00\x00\'\x01\x00\x00\xf7\x00\x00\x00\x8f\x01\x00\x00\x99\x00\x00\x00\xe7\x01\x00\x00\xa1\x00\x00\x00\xd6\x00\x00\x00\xe2\x01\x00\x00*\x01\x00\x00\x08\x00\x00\x00\x04\x02\x00\x00`\x01\x00\x00\xd1\x01\x00\x00{\x00\x00\x00L\x01\x00\x00`\x00\x00\x00\xcb\x01\x00\x00\x0e\x02\x00\x00]\x01\x00\x00\x1a\x00\x00\x00\x17\x01\x00\x00 \x02\x00\x00\x7f\x01\x00\x00B\x02\x00\x00\x9c\x01\x00\x00K\x00\x00\x00\x9f\x01\x00\x00\xba\x00\x00\x00\x93\x01\x00\x00\xe8\x00\x00\x00\xe5\x01\x00\x00\xce\x00\x00\x00F\x01\x00\x00\x9d\x00\x00\x00\xbb\x01\x00\x00\x12\x02\x00\x00\xd3\x00\x00\x00\x03\x01\x00\x00o\x00\x00\x00\xf0\x01\x00\x00\xb4\x01\x00\x00\x18\x02\x00\x00\x18\x00\x00\x00\xe9\x00\x00\x00@\x01\x00\x00\x85\x00\x00\x00\xec\x00\x00\x00\x0c\x01\x00\x00\xe4\x00\x00\x00\x92\x01\x00\x00\x0f\x01\x00\x00\xe5\x00\x00\x00\x1e\x00\x00\x00\xbf\x01\x00\x00Q\x00\x00\x00G\x00\x00\x00J\x01\x00\x00\xa6\x00\x00\x00q\x01\x00\x00\xbb\x00\x00\x00\xa7\x00\x00\x00+\x02\x00\x00(\x00\x00\x00\xfe\x00\x00\x00\xef\x00\x00\x00\r\x02\x00\x00\x9b\x01\x00\x00\xe4\x01\x00\x00r\x01\x00\x00Z\x01\x00\x00\xf6\x01\x00\x00\xd4\x01\x00\x00\x8c\x00\x00\x00N\x01\x00\x00\xb4\x00\x00\x00\xef\x01\x00\x00\xb0\x00\x00\x00\x15\x01\x00\x00\xf1\x01\x00\x00\xfc\x01\x00\x00.\x00\x00\x00\x89\x01\x00\x00c\x01\x00\x00u\x01\x00\x00\x84\x00\x00\x00\x13\x01\x00\x00\xdd\x00\x00\x00\x8c\x01\x00\x00V\x00\x00\x00<\x01\x00\x006\x00\x00\x00\xc6\x01\x00\x00\xe6\x00\x00\x00\xa3\x01\x00\x00a\x00\x00\x00g\x00\x00\x00\xc0\x01\x00\x00\r\x01\x00\x00\x14\x02\x00\x002\x02\x00\x00!\x02\x00\x00|\x01\x00\x00\x12\x01\x00\x00\x08\x02\x00\x00\xd4\x00\x00\x00h\x00\x00\x00*\x02\x00\x00\x18\x01\x00\x00g\x01\x00\x00\xf7\x01\x00\x00/\x00\x00\x00\x04\x01\x00\x00\xec\x01\x00\x00\xf6\x00\x00\x00\xc1\x00\x00\x00\n\x02\x00\x00\xd3\x01\x00\x00\x9e\x00\x00\x00U\x00\x00\x00\xc3\x01\x00\x00\xea\x00\x00\x00U\x01\x00\x00\xc6\x00\x00\x00h\x01\x00\x00\xa3\x00\x00\x00\xcf\x01\x00\x00N\x02\x00\x00}\x01\x00\x00\xc4\x00\x00\x00\x11\x01\x00\x00b\x00\x00\x00\xd7\x01\x00\x00\x00\x02\x00\x003\x01\x00\x00\xe2\x00\x00\x00M\x00\x00\x00\xf2\x00\x00\x00+\x01\x00\x00\xbe\x00\x00\x00\x06\x00\x00\x00[\x00\x00\x00r\x00\x00\x00\xdb\x01\x00\x00#\x00\x00\x00\xeb\x00\x00\x005\x00\x00\x00c\x00\x00\x00,\x01\x00\x00\xf3\x01\x00\x00\xc0\x00\x00\x00E\x02\x00\x00\xd5\x01\x00\x00\xac\x01\x00\x00\xd8\x01\x00\x001\x01\x00\x00\x19\x00\x00\x00\xb2\x01\x00\x00f\x00\x00\x00\\\x00\x00\x00\xea\x01\x00\x00u\x00\x00\x00\r\x00\x00\x00-\x00\x00\x00\'\x00\x00\x00\xe1\x01\x00\x00\xae\x01\x00\x005\x01\x00\x00\xdc\x01\x00\x00}\x00\x00\x00\xed\x01\x00\x00:\x01\x00\x00W\x02\x00\x00K\x01\x00\x00T\x00\x00\x00\xf1\x00\x00\x00\x16\x01\x00\x00C\x00\x00\x00K\x02\x00\x00\xbd\x00\x00\x00Y\x01\x00\x00B\x01\x00\x00\xe7\x00\x00\x00\x8a\x01\x00\x00\xc7\x00\x00\x00\x16\x00\x00\x00P\x02\x00\x00x\x01\x00\x00\x04\x00\x00\x00>\x00\x00\x00W\x00\x00\x00\xc7\x01\x00\x00\xa5\x00\x00\x00U\x02\x00\x00'
tbsg74
I01
sg75
I1
sg76
I-1
sg77
(lp4852
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg79
Nsg80
cnumpy.core.multiarray
scalar
p4853
(g4851
S'U\x02\x00\x00'
tRp4854
sg81
I600
sg82
I0
sg83
I600
sg84
I01
sbag36
asS'savePickle'
p4855
I01
sb.