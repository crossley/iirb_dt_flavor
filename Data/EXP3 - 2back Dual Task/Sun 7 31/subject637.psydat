ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject637
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 637
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
VMale
p31
sS'age'
p32
V20
p33
ssS'loopsUnfinished'
p34
(lp35
g1
(cpsychopy.data
TrialHandler
p36
g3
NtRp37
(dp38
S'origin'
p39
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p40
sS'thisTrial'
p41
I3
sS'_exp'
p42
I74693168
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p43
sS'thisRepN'
p44
I39
sg27
I01
sg28
NsS'data'
p45
g1
(cpsychopy.data
DataHandler
p46
c__builtin__
dict
p47
(dp48
S'ran'
p49
cnumpy.ma.core
_mareconstruct
p50
(cnumpy.ma.core
MaskedArray
p51
cnumpy
ndarray
p52
(I0
tp53
S'b'
tRp54
(I1
(I15
I40
tcnumpy
dtype
p55
(S'f4'
I0
I1
tRp56
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p57
g50
(g51
g52
g53
S'b'
tRp58
(I1
(I15
I40
tg56
I00
S'\x00\x00\x80@\x00\x00\x88A\x00\x00,B\x00\x00dB\x00\x00\xa6B\x00\x00\xbaB\x00\x00\xcaB\x00\x00\xf0B\x00\x00\x05C\x00\x00\x13C\x00\x00\x16C\x00\x00\x18C\x00\x00,C\x00\x00-C\x00\x003C\x00\x00JC\x00\x00PC\x00\x00UC\x00\x00]C\x00\x00gC\x00\x00pC\x00\x00qC\x00\x00\x8eC\x00\x80\x9cC\x00\x00\xacC\x00\x00\xb1C\x00\x80\xb2C\x00\x80\xb5C\x00\x00\xbeC\x00\x00\xc3C\x00\x80\xcbC\x00\x00\xccC\x00\x00\xddC\x00\x00\xe3C\x00\x00\xf7C\x00\x00\xf9C\x00\x80\xfbC\x00\x80\xffC\x00\x00\x10D\x00\x00\x11D\x00\x00\x80?\x00\x00\xa0@\x00\x00\x14B\x00\x00$B\x00\x00@B\x00\x00\x92B\x00\x00\x98B\x00\x00\xb4B\x00\x00\xfcB\x00\x00\x1eC\x00\x00\'C\x00\x00;C\x00\x00FC\x00\x00HC\x00\x00SC\x00\x00[C\x00\x00nC\x00\x00wC\x00\x00\x7fC\x00\x80\x89C\x00\x80\x93C\x00\x00\x9dC\x00\x00\xaaC\x00\x80\xabC\x00\x00\xcbC\x00\x80\xd0C\x00\x00\xd1C\x00\x00\xd3C\x00\x80\xd6C\x00\x00\xd8C\x00\x00\xe1C\x00\x00\xe4C\x00\x80\xe4C\x00\x00\xe7C\x00\x00\xf1C\x00\x00\xf4C\x00\x80\xfdC\x00\x80\xfeC\x00\x80\x08D\x00\xc0\x08D\x00\x00\x10A\x00\x00\xa0A\x00\x00XB\x00\x00\x84B\x00\x00\x9eB\x00\x00\xc0B\x00\x00\xdcB\x00\x00\xe6B\x00\x00\xf6B\x00\x00:C\x00\x00\\C\x00\x00^C\x00\x80\x83C\x00\x00\x89C\x00\x00\x98C\x00\x00\xa9C\x00\x80\xbbC\x00\x80\xcfC\x00\x80\xd9C\x00\x80\xddC\x00\x00\xeaC\x00\x00\xebC\x00\x00\xecC\x00\x00\xeeC\x00\x80\xeeC\x00\x80\xf4C\x00\x00\xfdC\x00\x00\x01D\x00@\x07D\x00\x00\tD\x00@\nD\x00\x80\nD\x00\x00\x0cD\x00\x00\x0fD\x00@\x0fD\x00\xc0\x11D\x00\x00\x13D\x00\x00\x14D\x00@\x14D\x00@\x15D\x00\x00@@\x00\x00\xa8A\x00\x00\xc8A\x00\x00<B\x00\x00\x82B\x00\x00\x8cB\x00\x00\x96B\x00\x00\x9aB\x00\x00\xb8B\x00\x00\xe0B\x00\x00\xe2B\x00\x00+C\x00\x008C\x00\x00AC\x00\x00BC\x00\x00{C\x00\x80\x94C\x00\x00\xa8C\x00\x00\xabC\x00\x80\xaeC\x00\x80\xb3C\x00\x00\xbdC\x00\x80\xc3C\x00\x80\xc5C\x00\x80\xccC\x00\x80\xcdC\x00\x00\xd6C\x00\x00\xe5C\x00\x00\xedC\x00\x80\xf2C\x00\x00\xffC\x00\x80\x00D\x00\x80\x04D\x00\x00\x05D\x00\x80\x05D\x00\xc0\x05D\x00\x80\x06D\x00\xc0\tD\x00\x80\x0bD\x00\xc0\x15D\x00\x00`A\x00\x004B\x00\x00pB\x00\x00\x94B\x00\x00\xa4B\x00\x00\xacB\x00\x00\xaeB\x00\x00\xdaB\x00\x00\xf8B\x00\x00\x00C\x00\x00\x1bC\x00\x002C\x00\x007C\x00\x00oC\x00\x00vC\x00\x00}C\x00\x80\x91C\x00\x00\x96C\x00\x00\x99C\x00\x80\x9fC\x00\x80\xa4C\x00\x00\xaeC\x00\x80\xb1C\x00\x80\xbdC\x00\x80\xd2C\x00\x80\xd5C\x00\x80\xdaC\x00\x80\xdcC\x00\x00\xe8C\x00\x80\xefC\x00\x00\xf8C\x00\x80\xfcC\x00\x00\x00D\x00\x00\x02D\x00@\x05D\x00\x00\x07D\x00@\x0bD\x00@\x0cD\x00@\x10D\x00\x80\x15D\x00\x00PA\x00\x00 B\x00\x00\xa0B\x00\x00\xbeB\x00\x00\xc6B\x00\x00\xeeB\x00\x00\x02C\x00\x00\x06C\x00\x00\tC\x00\x00\nC\x00\x00\x10C\x00\x00\x15C\x00\x00\x1cC\x00\x00.C\x00\x000C\x00\x005C\x00\x006C\x00\x00?C\x00\x00QC\x00\x00dC\x00\x00jC\x00\x80\x8fC\x00\x80\x96C\x00\x80\x9aC\x00\x80\x9eC\x00\x80\xa0C\x00\x80\xa3C\x00\x80\xa8C\x00\x00\xb6C\x00\x80\xc8C\x00\x80\xd3C\x00\x00\xd7C\x00\x00\xe0C\x00\x80\xe8C\x00\x80\xe9C\x00\x80\xeaC\x00\xc0\x02D\x00\x80\x0cD\x00@\x13D\x00\x00\x15D\x00\x00 A\x00\x00\x80A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x10B\x00\x00\\B\x00\x00\x80B\x00\x00\xa2B\x00\x00\x07C\x00\x00\x0eC\x00\x00\x19C\x00\x004C\x00\x00tC\x00\x00uC\x00\x00xC\x00\x00\x81C\x00\x00\x83C\x00\x80\x85C\x00\x00\x8bC\x00\x80\x8cC\x00\x00\x92C\x00\x80\x92C\x00\x80\x99C\x00\x00\xa5C\x00\x00\xb4C\x00\x00\xc0C\x00\x00\xc1C\x00\x00\xc4C\x00\x00\xd0C\x00\x00\xd2C\x00\x80\xdfC\x00\x00\xe9C\x00\x80\xedC\x00\x00\xf0C\x00\x00\xf6C\x00\x00\rD\x00\x80\rD\x00\xc0\rD\x00@\x12D\x00\x00\xc0@\x00\x00\x90A\x00\x00LB\x00\x00tB\x00\x00\xd8B\x00\x00\xe4B\x00\x00\xe8B\x00\x00\x03C\x00\x00\x1aC\x00\x00!C\x00\x00/C\x00\x00DC\x00\x00NC\x00\x00YC\x00\x00ZC\x00\x00_C\x00\x00`C\x00\x00fC\x00\x00kC\x00\x00lC\x00\x00\x86C\x00\x00\x8dC\x00\x00\x93C\x00\x80\xa7C\x00\x80\xb9C\x00\x00\xbcC\x00\x80\xbcC\x00\x00\xceC\x00\x80\xe3C\x00\x00\xf2C\x00@\x00D\x00\x80\x02D\x00\x00\x04D\x00@\tD\x00\x80\tD\x00\xc0\nD\x00\xc0\x0cD\x00\xc0\x0eD\x00\x80\x11D\x00\x80\x14D\x00\x00\xc0A\x00\x00\xd0A\x00\x000B\x00\x00PB\x00\x00TB\x00\x00\x8eB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xdeB\x00\x00\xeaB\x00\x00\x08C\x00\x00\x11C\x00\x00 C\x00\x00"C\x00\x00$C\x00\x00>C\x00\x00cC\x00\x00\x82C\x00\x80\x84C\x00\x00\x8aC\x00\x80\x8dC\x00\x00\x95C\x00\x80\xa2C\x00\x80\xa9C\x00\x00\xadC\x00\x80\xb6C\x00\x80\xb8C\x00\x00\xbaC\x00\x80\xc6C\x00\x80\xc9C\x00\x80\xd1C\x00\x00\xd5C\x00\x00\xdfC\x00\x80\xe1C\x00\x00\xe2C\x00\x00\xe6C\x00\x80\xf5C\x00\xc0\x03D\x00\xc0\x07D\x00@\x0eD\x00\x00@A\x00\x00DB\x00\x00|B\x00\x00\x86B\x00\x00\x88B\x00\x00\xa8B\x00\x00\xc8B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\x04C\x00\x00\rC\x00\x00\x1dC\x00\x00=C\x00\x00CC\x00\x00LC\x00\x00RC\x00\x00VC\x00\x00eC\x00\x80\x80C\x00\x00\x97C\x00\x00\xa3C\x00\x80\xa6C\x00\x80\xaaC\x00\x80\xb0C\x00\x00\xb3C\x00\x80\xb7C\x00\x00\xb9C\x00\x80\xbeC\x00\x00\xbfC\x00\x80\xc1C\x00\x00\xc6C\x00\x00\xcaC\x00\x80\xceC\x00\x80\xe6C\x00\x80\xf6C\x00\x80\xf7C\x00\x00\xfaC\x00\x80\xfaC\x00@\x08D\x00\x80\x13D\x00\x00\x00@\x00\x00\x00A\x00\x00\xceB\x00\x00\xd6B\x00\x00\x0bC\x00\x00\x17C\x00\x00\x1fC\x00\x009C\x00\x00IC\x00\x00MC\x00\x00OC\x00\x00rC\x00\x00yC\x00\x00\x80C\x00\x80\x86C\x00\x80\x8bC\x00\x00\x94C\x00\x80\x98C\x00\x80\x9dC\x00\x00\xa1C\x00\x80\xa5C\x00\x00\xbbC\x00\x80\xc2C\x00\x80\xc4C\x00\x00\xc7C\x00\x00\xc9C\x00\x80\xd4C\x00\x80\xd8C\x00\x80\xebC\x00\x80\xf0C\x00\x00\xf3C\x00\x00\xfbC\x00\xc0\x00D\x00\xc0\x01D\x00\x00\x03D\x00@\x04D\x00\x00\x08D\x00\x00\x0eD\x00\x80\x0eD\x00\xc0\x0fD\x00\x00\x00\x00\x00\x00pA\x00\x00\xf0A\x00\x008B\x00\x00HB\x00\x00\x90B\x00\x00\xb6B\x00\x00\xccB\x00\x00\xfeB\x00\x00\x0fC\x00\x00*C\x00\x00EC\x00\x00WC\x00\x00XC\x00\x00aC\x00\x00zC\x00\x80\x88C\x00\x00\x9aC\x00\x80\x9bC\x00\x00\xa2C\x00\x80\xacC\x00\x00\xb0C\x00\x80\xbaC\x00\x80\xbfC\x00\x80\xc0C\x00\x80\xc7C\x00\x00\xcdC\x00\x00\xd4C\x00\x80\xe0C\x00\x80\xe7C\x00\x80\xf3C\x00\x80\xf8C\x00\x80\xf9C\x00\x00\xfcC\x00\x00\xfeC\x00\xc0\x04D\x00\x00\nD\x00\xc0\x0bD\x00\x80\x10D\x00\x00\x12D\x00\x00\xe0A\x00\x00\x0cB\x00\x00xB\x00\x00\xb0B\x00\x00\xc2B\x00\x00\xecB\x00\x001C\x00\x00@C\x00\x00~C\x00\x80\x81C\x00\x80\x82C\x00\x00\x84C\x00\x00\x88C\x00\x80\x8eC\x00\x00\x8fC\x00\x00\x90C\x00\x80\x90C\x00\x80\x95C\x00\x80\x97C\x00\x00\x9bC\x00\x00\x9fC\x00\x00\xa4C\x00\x00\xb2C\x00\x80\xb4C\x00\x00\xb8C\x00\x00\xc8C\x00\x00\xcfC\x00\x80\xdeC\x00\x80\xecC\x00@\x01D\x00@\x02D\x00\x80\x03D\x00@\x06D\x00\x80\x07D\x00\xc0\x10D\x00@\x11D\x00\x80\x12D\x00\xc0\x12D\x00\xc0\x13D\x00\xc0\x14D\x00\x000A\x00\x00\x98A\x00\x00\xe8A\x00\x00\xf8A\x00\x00\x18B\x00\x00\x8aB\x00\x00\x9cB\x00\x00\xaaB\x00\x00\xb2B\x00\x00\xbcB\x00\x00\xc4B\x00\x00\xd4B\x00\x00\x01C\x00\x00\x0cC\x00\x00\x12C\x00\x00%C\x00\x00&C\x00\x00)C\x00\x00KC\x00\x00mC\x00\x00sC\x00\x00|C\x00\x00\x85C\x00\x00\x8cC\x00\x00\x9eC\x00\x00\xa6C\x00\x00\xafC\x00\x00\xc2C\x00\x00\xc5C\x00\x80\xcaC\x00\x80\xd7C\x00\x00\xdaC\x00\x00\xdcC\x00\x00\xdeC\x00\x80\xe2C\x00\x00\xefC\x00\x80\xf1C\x00@\x03D\x00\x00\x06D\x00\x80\x0fD\x00\x00\xe0@\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xd8A\x00\x00\x1cB\x00\x00(B\x00\x00`B\x00\x00hB\x00\x00lB\x00\x00\xfaB\x00\x00\x14C\x00\x00#C\x00\x00(C\x00\x00<C\x00\x00GC\x00\x00TC\x00\x00bC\x00\x00hC\x00\x00iC\x00\x00\x87C\x00\x80\x87C\x00\x80\x8aC\x00\x00\x91C\x00\x00\x9cC\x00\x00\xa0C\x00\x80\xa1C\x00\x00\xa7C\x00\x80\xadC\x00\x80\xafC\x00\x00\xb5C\x00\x00\xb7C\x00\x00\xd9C\x00\x00\xdbC\x00\x80\xdbC\x00\x80\xe5C\x00\x00\xf5C\x00\x80\x01D\x00\xc0\x06D\x00\x00\x0bD\x00@\rD'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp59
(dp60
S'isNumeric'
p61
(dp62
g49
I01
sg57
I01
ssS'trials'
p63
g37
sS'dataTypes'
p64
(lp65
g49
ag57
asS'dataShape'
p66
(lp67
I15
aI40
asbsS'method'
p68
S'fullRandom'
p69
sS'sequenceIndices'
p70
cnumpy.core.multiarray
_reconstruct
p71
(g52
(I0
tS'b'
tRp72
(I1
(I15
I40
tg55
(S'O4'
I0
I1
tRp73
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp74
I11
aI11
aI11
aI4
aI4
aI3
aI1
aI8
aI0
aI6
aI0
aI13
aI6
aI9
aI9
aI11
aI0
aI1
aI14
aI12
aI4
aI10
aI6
aI11
aI6
aI2
aI0
aI13
aI6
aI2
aI1
aI5
aI6
aI9
aI3
aI13
aI4
aI7
aI10
aI6
aI1
aI6
aI13
aI11
aI7
aI1
aI11
aI13
aI9
aI8
aI10
aI13
aI5
aI7
aI1
aI14
aI0
aI10
aI14
aI12
aI5
aI13
aI10
aI8
aI12
aI7
aI3
aI1
aI4
aI13
aI8
aI6
aI10
aI4
aI0
aI12
aI2
aI14
aI7
aI12
aI10
aI0
aI6
aI3
aI12
aI3
aI3
aI10
aI9
aI5
aI0
aI1
aI5
aI11
aI14
aI8
aI10
aI9
aI12
aI5
aI9
aI5
aI13
aI14
aI14
aI7
aI6
aI0
aI1
aI4
aI8
aI5
aI1
aI11
aI4
aI8
aI12
aI4
aI2
aI12
aI3
aI7
aI6
aI1
aI9
aI13
aI0
aI7
aI2
aI5
aI6
aI14
aI4
aI1
aI0
aI5
aI13
aI6
aI11
aI12
aI12
aI12
aI9
aI4
aI0
aI3
aI10
aI0
aI5
aI14
aI13
aI2
aI13
aI0
aI7
aI7
aI8
aI3
aI2
aI2
aI0
aI13
aI6
aI9
aI6
aI2
aI13
aI4
aI4
aI10
aI7
aI13
aI3
aI14
aI9
aI9
aI6
aI12
aI2
aI12
aI2
aI4
aI14
aI3
aI5
aI4
aI13
aI3
aI11
aI14
aI0
aI5
aI7
aI11
aI3
aI10
aI10
aI11
aI13
aI5
aI1
aI2
aI12
aI11
aI3
aI5
aI5
aI2
aI14
aI13
aI4
aI11
aI10
aI1
aI11
aI7
aI6
aI8
aI1
aI14
aI10
aI14
aI7
aI13
aI8
aI0
aI3
aI11
aI10
aI13
aI7
aI2
aI3
aI9
aI10
aI3
aI9
aI2
aI10
aI9
aI7
aI3
aI6
aI7
aI2
aI6
aI2
aI8
aI1
aI9
aI5
aI3
aI2
aI10
aI11
aI0
aI4
aI12
aI8
aI4
aI4
aI5
aI3
aI14
aI14
aI9
aI9
aI3
aI8
aI4
aI1
aI10
aI10
aI9
aI2
aI11
aI1
aI4
aI0
aI12
aI14
aI14
aI1
aI8
aI9
aI4
aI12
aI3
aI11
aI6
aI9
aI0
aI1
aI0
aI7
aI14
aI1
aI6
aI14
aI6
aI6
aI10
aI5
aI11
aI9
aI9
aI8
aI7
aI4
aI0
aI1
aI2
aI11
aI10
aI12
aI3
aI1
aI5
aI4
aI2
aI10
aI14
aI13
aI8
aI9
aI0
aI13
aI3
aI4
aI11
aI1
aI0
aI14
aI13
aI7
aI14
aI6
aI2
aI6
aI6
aI11
aI14
aI2
aI9
aI12
aI11
aI10
aI9
aI3
aI2
aI3
aI12
aI1
aI0
aI14
aI4
aI2
aI7
aI11
aI2
aI2
aI8
aI14
aI2
aI13
aI9
aI5
aI7
aI13
aI5
aI10
aI5
aI9
aI9
aI1
aI5
aI10
aI12
aI10
aI7
aI5
aI11
aI8
aI0
aI8
aI6
aI11
aI12
aI1
aI13
aI14
aI3
aI2
aI11
aI10
aI3
aI7
aI6
aI12
aI7
aI6
aI3
aI5
aI6
aI3
aI13
aI9
aI2
aI5
aI8
aI8
aI7
aI8
aI10
aI2
aI7
aI11
aI8
aI13
aI1
aI12
aI8
aI1
aI4
aI9
aI11
aI12
aI2
aI5
aI12
aI8
aI6
aI14
aI4
aI4
aI3
aI7
aI14
aI0
aI12
aI13
aI8
aI1
aI14
aI8
aI4
aI0
aI7
aI7
aI13
aI7
aI5
aI5
aI7
aI0
aI7
aI3
aI13
aI6
aI10
aI11
aI9
aI9
aI12
aI7
aI6
aI5
aI6
aI13
aI8
aI9
aI2
aI8
aI2
aI12
aI13
aI3
aI6
aI12
aI5
aI9
aI14
aI14
aI0
aI11
aI4
aI11
aI8
aI9
aI0
aI8
aI12
aI12
aI10
aI2
aI13
aI13
aI6
aI7
aI3
aI14
aI5
aI3
aI0
aI8
aI9
aI10
aI1
aI1
aI6
aI1
aI2
aI6
aI1
aI7
aI12
aI11
aI6
aI7
aI2
aI5
aI12
aI0
aI14
aI1
aI12
aI10
aI12
aI0
aI14
aI14
aI4
aI3
aI0
aI7
aI1
aI4
aI7
aI8
aI8
aI0
aI12
aI1
aI9
aI11
aI13
aI8
aI1
aI10
aI5
aI11
aI13
aI9
aI11
aI5
aI3
aI2
aI10
aI2
aI4
aI4
aI13
aI8
aI14
aI4
aI13
aI8
aI5
aI5
aI5
aI8
aI0
aI3
aI5
aI7
aI4
aI12
aI10
aI0
aI12
aI1
aI4
aI0
aI3
aI10
aI10
aI9
aI8
aI14
aI11
aI4
aI4
aI0
aI1
aI10
aI14
aI2
aI8
aI11
aI3
atbsS'finished'
p75
I00
sS'nReps'
p76
I40
sS'nRemaining'
p77
I0
sS'trialList'
p78
(lp79
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
asS'seed'
p80
NsS'thisIndex'
p81
I3
sS'thisN'
p82
I599
sS'thisTrialN'
p83
I14
sS'nTotal'
p84
I600
sS'_warnUseOfNext'
p85
I01
sbasS'saveWideText'
p86
I01
sS'thisEntry'
p87
(dp88
sS'version'
p89
S''
sS'_paramNamesSoFar'
p90
(lp91
sS'entries'
p92
(lp93
(dp94
g16
(lp95
S'd'
asS'.thisTrial'
p96
I11
sS'.thisRepN'
p97
I0
sg30
g31
sg32
g33
sS'.thisTrialN'
p98
I0
sS'.thisN'
p99
I0
sS'.thisIndex'
p100
I11
sg15
(lp101
S'k'
asg17
S'N'
sg14
I1
sa(dp102
g16
(lp103
S'd'
asg96
I1
sS'.thisRepN'
p104
I0
sg30
g31
sg32
g33
sS'.thisTrialN'
p105
I1
sS'.thisN'
p106
I1
sS'.thisIndex'
p107
I1
sg15
(lp108
S'k'
asg17
S'N'
sg14
I1
sa(dp109
g16
(lp110
S'd'
asg18
S'Y'
sS'.thisRepN'
p111
I0
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p112
I2
sS'.thisN'
p113
I2
sS'.thisIndex'
p114
I10
sg15
(lp115
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I10
sa(dp116
g16
(lp117
S'k'
asg18
S'N'
sS'.thisRepN'
p118
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p119
I3
sS'.thisN'
p120
I3
sS'.thisIndex'
p121
I3
sg15
(lp122
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I3
sa(dp123
g16
(lp124
S'd'
asg18
S'Y'
sS'.thisRepN'
p125
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p126
I4
sS'.thisN'
p127
I4
sS'.thisIndex'
p128
I0
sg15
(lp129
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp130
S'space'
p131
asg96
I0
sa(dp132
g16
(lp133
S'd'
asg18
S'N'
sS'.thisRepN'
p134
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p135
I5
sS'.thisN'
p136
I5
sS'.thisIndex'
p137
I1
sg15
(lp138
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I1
sa(dp139
g16
(lp140
S'k'
asg18
S'Y'
sS'.thisRepN'
p141
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p142
I6
sS'.thisN'
p143
I6
sS'.thisIndex'
p144
I7
sg15
(lp145
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp146
S'space'
p147
asg96
I7
sa(dp148
g16
(lp149
S'd'
asg18
S'Y'
sS'.thisRepN'
p150
I0
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p151
I7
sS'.thisN'
p152
I7
sS'.thisIndex'
p153
I14
sg15
(lp154
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I14
sa(dp155
g16
(lp156
S'd'
asg18
S'Y'
sS'.thisRepN'
p157
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p158
I8
sS'.thisN'
p159
I8
sS'.thisIndex'
p160
I10
sg15
(lp161
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp162
S'space'
p163
asg96
I10
sa(dp164
g16
(lp165
S'd'
asg18
S'Y'
sS'.thisRepN'
p166
I0
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p167
I9
sS'.thisN'
p168
I9
sS'.thisIndex'
p169
I2
sg15
(lp170
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I2
sa(dp171
g16
(lp172
S'k'
asg18
S'Y'
sS'.thisRepN'
p173
I0
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p174
I10
sS'.thisN'
p175
I10
sS'.thisIndex'
p176
I6
sg15
(lp177
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I6
sa(dp178
g16
(lp179
S'd'
asg18
S'Y'
sS'.thisRepN'
p180
I0
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p181
I11
sS'.thisN'
p182
I11
sS'.thisIndex'
p183
I13
sg15
(lp184
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I13
sa(dp185
g16
(lp186
S'k'
asg18
S'N'
sS'.thisRepN'
p187
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p188
I12
sS'.thisN'
p189
I12
sS'.thisIndex'
p190
I9
sg15
(lp191
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I9
sa(dp192
g16
(lp193
S'd'
asg18
S'N'
sS'.thisRepN'
p194
I0
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p195
I13
sS'.thisN'
p196
I13
sS'.thisIndex'
p197
I5
sg15
(lp198
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp199
S'space'
p200
asg96
I5
sa(dp201
g16
(lp202
S'd'
asg18
S'Y'
sS'.thisRepN'
p203
I0
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p204
I14
sS'.thisN'
p205
I14
sS'.thisIndex'
p206
I4
sg15
(lp207
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I4
sa(dp208
g16
(lp209
S'd'
asg18
S'N'
sS'.thisRepN'
p210
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p211
I0
sS'.thisN'
p212
I15
sS'.thisIndex'
p213
I11
sg15
(lp214
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp215
S'space'
p216
asg96
I11
sa(dp217
g16
(lp218
S'k'
asg18
S'Y'
sS'.thisRepN'
p219
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p220
I1
sS'.thisN'
p221
I16
sS'.thisIndex'
p222
I6
sg15
(lp223
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp224
S'space'
p225
asg96
I6
sa(dp226
g16
(lp227
S'k'
asg18
S'N'
sS'.thisRepN'
p228
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p229
I2
sS'.thisN'
p230
I17
sS'.thisIndex'
p231
I0
sg15
(lp232
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I0
sa(dp233
g16
(lp234
S'd'
asg18
S'N'
sS'.thisRepN'
p235
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p236
I3
sS'.thisN'
p237
I18
sS'.thisIndex'
p238
I7
sg15
(lp239
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp240
S'space'
p241
asg96
I7
sa(dp242
g16
(lp243
S'k'
asg18
S'N'
sS'.thisRepN'
p244
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p245
I4
sS'.thisN'
p246
I19
sS'.thisIndex'
p247
I13
sg15
(lp248
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp249
S'space'
p250
asg96
I13
sa(dp251
g16
(lp252
S'd'
asg18
S'Y'
sS'.thisRepN'
p253
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p254
I5
sS'.thisN'
p255
I20
sS'.thisIndex'
p256
I2
sg15
(lp257
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I2
sa(dp258
g16
(lp259
S'k'
asg18
S'N'
sS'.thisRepN'
p260
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p261
I6
sS'.thisN'
p262
I21
sS'.thisIndex'
p263
I3
sg15
(lp264
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp265
S'd'
asg96
I3
sa(dp266
g16
(lp267
S'k'
asg18
S'N'
sS'.thisRepN'
p268
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p269
I7
sS'.thisN'
p270
I22
sS'.thisIndex'
p271
I14
sg15
(lp272
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp273
S'space'
p274
asg96
I14
sa(dp275
g16
(lp276
S'k'
asg18
S'N'
sS'.thisRepN'
p277
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p278
I8
sS'.thisN'
p279
I23
sS'.thisIndex'
p280
I14
sg15
(lp281
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I14
sa(dp282
g16
(lp283
S'k'
asg18
S'Y'
sS'.thisRepN'
p284
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p285
I9
sS'.thisN'
p286
I24
sS'.thisIndex'
p287
I8
sg15
(lp288
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I8
sa(dp289
g16
(lp290
S'k'
asg18
S'N'
sS'.thisRepN'
p291
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p292
I10
sS'.thisN'
p293
I25
sS'.thisIndex'
p294
I3
sg15
(lp295
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I3
sa(dp296
g16
(lp297
S'k'
asg18
S'N'
sS'.thisRepN'
p298
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p299
I11
sS'.thisN'
p300
I26
sS'.thisIndex'
p301
I8
sg15
(lp302
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp303
S'space'
p304
asg96
I8
sa(dp305
g16
(lp306
S'd'
asg18
S'N'
sS'.thisRepN'
p307
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p308
I12
sS'.thisN'
p309
I27
sS'.thisIndex'
p310
I14
sg15
(lp311
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I14
sa(dp312
g16
(lp313
S'k'
asg18
S'Y'
sS'.thisRepN'
p314
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p315
I13
sS'.thisN'
p316
I28
sS'.thisIndex'
p317
I12
sg15
(lp318
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I12
sa(dp319
g16
(lp320
S'd'
asg18
S'Y'
sS'.thisRepN'
p321
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p322
I14
sS'.thisN'
p323
I29
sS'.thisIndex'
p324
I13
sg15
(lp325
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I13
sa(dp326
g16
(lp327
S'd'
asg18
S'Y'
sS'.thisRepN'
p328
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p329
I0
sS'.thisN'
p330
I30
sS'.thisIndex'
p331
I11
sg15
(lp332
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp333
S'space'
p334
asg96
I11
sa(dp335
g16
(lp336
S'k'
asg18
S'Y'
sS'.thisRepN'
p337
I2
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p338
I1
sS'.thisN'
p339
I31
sS'.thisIndex'
p340
I13
sg15
(lp341
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I13
sa(dp342
g16
(lp343
S'd'
asg18
S'Y'
sS'.thisRepN'
p344
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p345
I2
sS'.thisN'
p346
I32
sS'.thisIndex'
p347
I6
sg15
(lp348
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp349
S'space'
p350
asg96
I6
sa(dp351
g16
(lp352
S'k'
asg18
S'Y'
sS'.thisRepN'
p353
I2
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p354
I3
sS'.thisN'
p355
I33
sS'.thisIndex'
p356
I6
sg15
(lp357
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I6
sa(dp358
g16
(lp359
S'd'
asg18
S'N'
sS'.thisRepN'
p360
I2
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p361
I4
sS'.thisN'
p362
I34
sS'.thisIndex'
p363
I6
sg15
(lp364
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp365
S'space'
p366
asg96
I6
sa(dp367
g16
(lp368
S'd'
asg18
S'N'
sS'.thisRepN'
p369
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p370
I5
sS'.thisN'
p371
I35
sS'.thisIndex'
p372
I12
sg15
(lp373
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I12
sa(dp374
g16
(lp375
S'k'
asg18
S'Y'
sS'.thisRepN'
p376
I2
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p377
I6
sS'.thisN'
p378
I36
sS'.thisIndex'
p379
I6
sg15
(lp380
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I6
sa(dp381
g16
(lp382
S'k'
asg18
S'N'
sS'.thisRepN'
p383
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p384
I7
sS'.thisN'
p385
I37
sS'.thisIndex'
p386
I1
sg15
(lp387
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I1
sa(dp388
g16
(lp389
S'k'
asg18
S'Y'
sS'.thisRepN'
p390
I2
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p391
I8
sS'.thisN'
p392
I38
sS'.thisIndex'
p393
I13
sg15
(lp394
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I13
sa(dp395
g16
(lp396
S'd'
asg18
S'N'
sS'.thisRepN'
p397
I2
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p398
I9
sS'.thisN'
p399
I39
sS'.thisIndex'
p400
I14
sg15
(lp401
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp402
S'space'
p403
asg96
I14
sa(dp404
g16
(lp405
S'k'
asg18
S'Y'
sS'.thisRepN'
p406
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p407
I10
sS'.thisN'
p408
I40
sS'.thisIndex'
p409
I5
sg15
(lp410
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp411
S'space'
p412
asg96
I5
sa(dp413
g16
(lp414
S'k'
asg18
S'N'
sS'.thisRepN'
p415
I2
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p416
I11
sS'.thisN'
p417
I41
sS'.thisIndex'
p418
I1
sg15
(lp419
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp420
S'space'
p421
asg96
I1
sa(dp422
g16
(lp423
S'd'
asg18
S'Y'
sS'.thisRepN'
p424
I2
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p425
I12
sS'.thisN'
p426
I42
sS'.thisIndex'
p427
I14
sg15
(lp428
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I14
sa(dp429
g16
(lp430
S'd'
asg18
S'N'
sS'.thisRepN'
p431
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p432
I13
sS'.thisN'
p433
I43
sS'.thisIndex'
p434
I0
sg15
(lp435
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I0
sa(dp436
g16
(lp437
S'd'
asg18
S'N'
sS'.thisRepN'
p438
I2
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p439
I14
sS'.thisN'
p440
I44
sS'.thisIndex'
p441
I8
sg15
(lp442
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp443
S'space'
p444
asg96
I8
sa(dp445
g16
(lp446
S'd'
asg18
S'Y'
sS'.thisRepN'
p447
I3
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p448
I0
sS'.thisN'
p449
I45
sS'.thisIndex'
p450
I4
sg15
(lp451
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I4
sa(dp452
g16
(lp453
S'k'
asg18
S'N'
sS'.thisRepN'
p454
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p455
I1
sS'.thisN'
p456
I46
sS'.thisIndex'
p457
I11
sg15
(lp458
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I11
sa(dp459
g16
(lp460
S'd'
asg18
S'N'
sS'.thisRepN'
p461
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p462
I2
sS'.thisN'
p463
I47
sS'.thisIndex'
p464
I3
sg15
(lp465
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I3
sa(dp466
g16
(lp467
S'k'
asg18
S'Y'
sS'.thisRepN'
p468
I3
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p469
I3
sS'.thisN'
p470
I48
sS'.thisIndex'
p471
I1
sg15
(lp472
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I1
sa(dp473
g16
(lp474
S'k'
asg18
S'Y'
sg22
I19
sS'.thisN'
p475
I49
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p476
I4
sS'.thisRepN'
p477
I3
sg21
I25
sS'.thisIndex'
p478
I9
sg23
I25
sg15
(lp479
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I9
sa(dp480
g16
(lp481
S'k'
asg96
I11
sS'.thisRepN'
p482
I3
sg30
g31
sg32
g33
sS'.thisTrialN'
p483
I5
sS'.thisN'
p484
I50
sS'.thisIndex'
p485
I11
sg15
(lp486
S'd'
asg17
S'N'
sg14
I2
sa(dp487
g16
(lp488
S'd'
asg96
I7
sS'.thisRepN'
p489
I3
sg30
g31
sg32
g33
sS'.thisTrialN'
p490
I6
sS'.thisN'
p491
I51
sS'.thisIndex'
p492
I7
sg15
(lp493
S'd'
asg17
S'Y'
sg14
I2
sa(dp494
g16
(lp495
S'k'
asg18
S'Y'
sS'.thisRepN'
p496
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p497
I7
sS'.thisN'
p498
I52
sS'.thisIndex'
p499
I8
sg15
(lp500
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp501
S'space'
p502
asg96
I8
sa(dp503
g16
(lp504
S'd'
asg18
S'Y'
sS'.thisRepN'
p505
I3
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p506
I8
sS'.thisN'
p507
I53
sS'.thisIndex'
p508
I8
sg15
(lp509
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I8
sa(dp510
g16
(lp511
S'd'
asg18
S'Y'
sS'.thisRepN'
p512
I3
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p513
I9
sS'.thisN'
p514
I54
sS'.thisIndex'
p515
I2
sg15
(lp516
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I2
sa(dp517
g16
(lp518
S'd'
asg18
S'Y'
sS'.thisRepN'
p519
I3
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p520
I10
sS'.thisN'
p521
I55
sS'.thisIndex'
p522
I6
sg15
(lp523
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I6
sa(dp524
g16
(lp525
S'd'
asg18
S'Y'
sS'.thisRepN'
p526
I3
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p527
I11
sS'.thisN'
p528
I56
sS'.thisIndex'
p529
I14
sg15
(lp530
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I14
sa(dp531
g16
(lp532
S'k'
asg18
S'Y'
sS'.thisRepN'
p533
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p534
I12
sS'.thisN'
p535
I57
sS'.thisIndex'
p536
I0
sg15
(lp537
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp538
S'space'
p539
asg96
I0
sa(dp540
g16
(lp541
S'k'
asg18
S'Y'
sS'.thisRepN'
p542
I3
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p543
I13
sS'.thisN'
p544
I58
sS'.thisIndex'
p545
I14
sg15
(lp546
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I14
sa(dp547
g16
(lp548
S'd'
asg18
S'N'
sS'.thisRepN'
p549
I3
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p550
I14
sS'.thisN'
p551
I59
sS'.thisIndex'
p552
I14
sg15
(lp553
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp554
S'space'
p555
asg96
I14
sa(dp556
g16
(lp557
S'd'
asg18
S'Y'
sS'.thisRepN'
p558
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p559
I0
sS'.thisN'
p560
I60
sS'.thisIndex'
p561
I4
sg15
(lp562
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp563
S'space'
p564
asg96
I4
sa(dp565
g16
(lp566
S'd'
asg18
S'Y'
sS'.thisRepN'
p567
I4
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p568
I1
sS'.thisN'
p569
I61
sS'.thisIndex'
p570
I7
sg15
(lp571
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I7
sa(dp572
g16
(lp573
S'k'
asg18
S'N'
sS'.thisRepN'
p574
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p575
I2
sS'.thisN'
p576
I62
sS'.thisIndex'
p577
I12
sg15
(lp578
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I12
sa(dp579
g16
(lp580
S'd'
asg18
S'Y'
sS'.thisRepN'
p581
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p582
I3
sS'.thisN'
p583
I63
sS'.thisIndex'
p584
I9
sg15
(lp585
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp586
S'space'
p587
asg96
I9
sa(dp588
g16
(lp589
S'k'
asg18
S'N'
sS'.thisRepN'
p590
I4
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p591
I4
sS'.thisN'
p592
I64
sS'.thisIndex'
p593
I6
sg15
(lp594
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp595
S'space'
p596
asg96
I6
sa(dp597
g16
(lp598
S'k'
asg18
S'Y'
sS'.thisRepN'
p599
I4
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p600
I5
sS'.thisN'
p601
I65
sS'.thisIndex'
p602
I3
sg15
(lp603
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I3
sa(dp604
g16
(lp605
S'd'
asg18
S'Y'
sS'.thisRepN'
p606
I4
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p607
I6
sS'.thisN'
p608
I66
sS'.thisIndex'
p609
I2
sg15
(lp610
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I2
sa(dp611
g16
(lp612
S'd'
asg18
S'N'
sS'.thisRepN'
p613
I4
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p614
I7
sS'.thisN'
p615
I67
sS'.thisIndex'
p616
I9
sg15
(lp617
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp618
S'space'
p619
asg96
I9
sa(dp620
g16
(lp621
S'd'
asg18
S'Y'
sS'.thisRepN'
p622
I4
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p623
I8
sS'.thisN'
p624
I68
sS'.thisIndex'
p625
I9
sg15
(lp626
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp627
S'k'
asg96
I9
sa(dp628
g16
(lp629
S'k'
asg18
S'N'
sS'.thisRepN'
p630
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p631
I9
sS'.thisN'
p632
I69
sS'.thisIndex'
p633
I13
sg15
(lp634
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I13
sa(dp635
g16
(lp636
S'd'
asg18
S'N'
sS'.thisRepN'
p637
I4
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p638
I10
sS'.thisN'
p639
I70
sS'.thisIndex'
p640
I3
sg15
(lp641
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp642
S'space'
p643
asg96
I3
sa(dp644
g16
(lp645
S'd'
asg18
S'Y'
sS'.thisRepN'
p646
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p647
I11
sS'.thisN'
p648
I71
sS'.thisIndex'
p649
I8
sg15
(lp650
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp651
S'space'
p652
asg96
I8
sa(dp653
g16
(lp654
S'd'
asg18
S'N'
sS'.thisRepN'
p655
I4
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p656
I12
sS'.thisN'
p657
I72
sS'.thisIndex'
p658
I11
sg15
(lp659
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp660
S'space'
p661
asg96
I11
sa(dp662
g16
(lp663
S'd'
asg18
S'Y'
sS'.thisRepN'
p664
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p665
I13
sS'.thisN'
p666
I73
sS'.thisIndex'
p667
I1
sg15
(lp668
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp669
S'space'
p670
asg96
I1
sa(dp671
g16
(lp672
S'k'
asg18
S'Y'
sS'.thisRepN'
p673
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p674
I14
sS'.thisN'
p675
I74
sS'.thisIndex'
p676
I4
sg15
(lp677
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp678
S'space'
p679
asg96
I4
sa(dp680
g16
(lp681
S'k'
asg18
S'N'
sS'.thisRepN'
p682
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p683
I0
sS'.thisN'
p684
I75
sS'.thisIndex'
p685
I3
sg15
(lp686
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I3
sa(dp687
g16
(lp688
S'd'
asg18
S'N'
sS'.thisRepN'
p689
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p690
I1
sS'.thisN'
p691
I76
sS'.thisIndex'
p692
I1
sg15
(lp693
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I1
sa(dp694
g16
(lp695
S'k'
asg18
S'N'
sS'.thisRepN'
p696
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p697
I2
sS'.thisN'
p698
I77
sS'.thisIndex'
p699
I3
sg15
(lp700
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I3
sa(dp701
g16
(lp702
S'k'
asg18
S'Y'
sS'.thisRepN'
p703
I5
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p704
I3
sS'.thisN'
p705
I78
sS'.thisIndex'
p706
I13
sg15
(lp707
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I13
sa(dp708
g16
(lp709
S'd'
asg18
S'Y'
sS'.thisRepN'
p710
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p711
I4
sS'.thisN'
p712
I79
sS'.thisIndex'
p713
I2
sg15
(lp714
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp715
S'space'
p716
asg96
I2
sa(dp717
g16
(lp718
S'k'
asg18
S'N'
sS'.thisRepN'
p719
I5
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p720
I5
sS'.thisN'
p721
I80
sS'.thisIndex'
p722
I5
sg15
(lp723
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp724
S'space'
p725
asg96
I5
sa(dp726
g16
(lp727
S'k'
asg18
S'Y'
sS'.thisRepN'
p728
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p729
I6
sS'.thisN'
p730
I81
sS'.thisIndex'
p731
I6
sg15
(lp732
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp733
S'space'
p734
asg96
I6
sa(dp735
g16
(lp736
S'd'
asg18
S'N'
sS'.thisRepN'
p737
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p738
I7
sS'.thisN'
p739
I82
sS'.thisIndex'
p740
I4
sg15
(lp741
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I4
sa(dp742
g16
(lp743
S'k'
asg18
S'Y'
sS'.thisRepN'
p744
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p745
I8
sS'.thisN'
p746
I83
sS'.thisIndex'
p747
I0
sg15
(lp748
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp749
S'space'
p750
asg96
I0
sa(dp751
g16
(lp752
S'k'
asg18
S'N'
sS'.thisRepN'
p753
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p754
I9
sS'.thisN'
p755
I84
sS'.thisIndex'
p756
I9
sg15
(lp757
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I9
sa(dp758
g16
(lp759
S'd'
asg18
S'N'
sS'.thisRepN'
p760
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p761
I10
sS'.thisN'
p762
I85
sS'.thisIndex'
p763
I13
sg15
(lp764
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I13
sa(dp765
g16
(lp766
S'k'
asg18
S'Y'
sS'.thisRepN'
p767
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p768
I11
sS'.thisN'
p769
I86
sS'.thisIndex'
p770
I4
sg15
(lp771
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp772
S'space'
p773
asg96
I4
sa(dp774
g16
(lp775
S'd'
asg18
S'Y'
sS'.thisRepN'
p776
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p777
I12
sS'.thisN'
p778
I87
sS'.thisIndex'
p779
I4
sg15
(lp780
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp781
S'space'
p782
asg96
I4
sa(dp783
g16
(lp784
S'k'
asg18
S'N'
sS'.thisRepN'
p785
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p786
I13
sS'.thisN'
p787
I88
sS'.thisIndex'
p788
I12
sg15
(lp789
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I12
sa(dp790
g16
(lp791
S'd'
asg18
S'N'
sS'.thisRepN'
p792
I5
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p793
I14
sS'.thisN'
p794
I89
sS'.thisIndex'
p795
I13
sg15
(lp796
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp797
S'space'
p798
asg96
I13
sa(dp799
g16
(lp800
S'd'
asg18
S'N'
sS'.thisRepN'
p801
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p802
I0
sS'.thisN'
p803
I90
sS'.thisIndex'
p804
I1
sg15
(lp805
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I1
sa(dp806
g16
(lp807
S'k'
asg18
S'N'
sS'.thisRepN'
p808
I6
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p809
I1
sS'.thisN'
p810
I91
sS'.thisIndex'
p811
I11
sg15
(lp812
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp813
S'space'
p814
asg96
I11
sa(dp815
g16
(lp816
S'd'
asg18
S'Y'
sS'.thisRepN'
p817
I6
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p818
I2
sS'.thisN'
p819
I92
sS'.thisIndex'
p820
I3
sg15
(lp821
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I3
sa(dp822
g16
(lp823
S'd'
asg18
S'Y'
sS'.thisRepN'
p824
I6
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p825
I3
sS'.thisN'
p826
I93
sS'.thisIndex'
p827
I0
sg15
(lp828
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I0
sa(dp829
g16
(lp830
S'd'
asg18
S'Y'
sS'.thisRepN'
p831
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p832
I4
sS'.thisN'
p833
I94
sS'.thisIndex'
p834
I13
sg15
(lp835
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp836
S'space'
p837
asg96
I13
sa(dp838
g16
(lp839
S'd'
asg18
S'N'
sS'.thisRepN'
p840
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p841
I5
sS'.thisN'
p842
I95
sS'.thisIndex'
p843
I5
sg15
(lp844
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I5
sa(dp845
g16
(lp846
S'k'
asg18
S'N'
sS'.thisRepN'
p847
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p848
I6
sS'.thisN'
p849
I96
sS'.thisIndex'
p850
I2
sg15
(lp851
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I2
sa(dp852
g16
(lp853
S'd'
asg18
S'N'
sS'.thisRepN'
p854
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p855
I7
sS'.thisN'
p856
I97
sS'.thisIndex'
p857
I12
sg15
(lp858
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I12
sa(dp859
g16
(lp860
S'k'
asg18
S'N'
sS'.thisRepN'
p861
I6
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p862
I8
sS'.thisN'
p863
I98
sS'.thisIndex'
p864
I13
sg15
(lp865
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp866
S'space'
p867
asg96
I13
sa(dp868
g16
(lp869
S'd'
asg18
S'N'
sg22
I27
sS'.thisN'
p870
I99
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p871
I9
sS'.thisRepN'
p872
I6
sg21
I35
sS'.thisIndex'
p873
I5
sg23
I25
sg15
(lp874
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I5
sa(dp875
g16
(lp876
S'd'
asg96
I9
sS'.thisRepN'
p877
I6
sg30
g31
sg32
g33
sS'.thisTrialN'
p878
I10
sS'.thisN'
p879
I100
sS'.thisIndex'
p880
I9
sg15
(lp881
S'd'
asg17
S'Y'
sg14
I3
sa(dp882
g16
(lp883
S'd'
asg96
I0
sS'.thisRepN'
p884
I6
sg30
g31
sg32
g33
sS'.thisTrialN'
p885
I11
sS'.thisN'
p886
I101
sS'.thisIndex'
p887
I0
sg15
(lp888
S'd'
asg17
S'Y'
sg14
I3
sa(dp889
g16
(lp890
S'k'
asg18
S'N'
sS'.thisRepN'
p891
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p892
I12
sS'.thisN'
p893
I102
sS'.thisIndex'
p894
I11
sg15
(lp895
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I11
sa(dp896
g16
(lp897
S'd'
asg18
S'Y'
sS'.thisRepN'
p898
I6
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p899
I13
sS'.thisN'
p900
I103
sS'.thisIndex'
p901
I10
sg15
(lp902
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I10
sa(dp903
g16
(lp904
S'd'
asg18
S'N'
sS'.thisRepN'
p905
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p906
I14
sS'.thisN'
p907
I104
sS'.thisIndex'
p908
I8
sg15
(lp909
S'k'
asg30
g31
sg17
S'N'
sg14
I3
sg19
Nsg96
I8
sa(dp910
g16
(lp911
S'd'
asg18
S'Y'
sS'.thisRepN'
p912
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p913
I0
sS'.thisN'
p914
I105
sS'.thisIndex'
p915
I8
sg15
(lp916
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp917
S'space'
p918
asg96
I8
sa(dp919
g16
(lp920
S'd'
asg18
S'Y'
sS'.thisRepN'
p921
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p922
I1
sS'.thisN'
p923
I106
sS'.thisIndex'
p924
I13
sg15
(lp925
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp926
S'space'
p927
asg96
I13
sa(dp928
g16
(lp929
S'k'
asg18
S'N'
sS'.thisRepN'
p930
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p931
I2
sS'.thisN'
p932
I107
sS'.thisIndex'
p933
I10
sg15
(lp934
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I10
sa(dp935
g16
(lp936
S'd'
asg18
S'Y'
sS'.thisRepN'
p937
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p938
I3
sS'.thisN'
p939
I108
sS'.thisIndex'
p940
I7
sg15
(lp941
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp942
S'space'
p943
asg96
I7
sa(dp944
g16
(lp945
S'k'
asg18
S'Y'
sS'.thisRepN'
p946
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p947
I4
sS'.thisN'
p948
I109
sS'.thisIndex'
p949
I4
sg15
(lp950
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp951
S'space'
p952
asg96
I4
sa(dp953
g16
(lp954
S'k'
asg18
S'Y'
sS'.thisRepN'
p955
I7
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p956
I5
sS'.thisN'
p957
I110
sS'.thisIndex'
p958
I2
sg15
(lp959
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I2
sa(dp960
g16
(lp961
S'd'
asg18
S'Y'
sS'.thisRepN'
p962
I7
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p963
I6
sS'.thisN'
p964
I111
sS'.thisIndex'
p965
I8
sg15
(lp966
S'k'
asg30
g31
sg17
S'N'
sg14
I3
sg19
Nsg96
I8
sa(dp967
g16
(lp968
S'd'
asg18
S'Y'
sS'.thisRepN'
p969
I7
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p970
I7
sS'.thisN'
p971
I112
sS'.thisIndex'
p972
I3
sg15
(lp973
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I3
sa(dp974
g16
(lp975
S'k'
asg18
S'N'
sS'.thisRepN'
p976
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p977
I8
sS'.thisN'
p978
I113
sS'.thisIndex'
p979
I3
sg15
(lp980
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I3
sa(dp981
g16
(lp982
S'd'
asg18
S'N'
sS'.thisRepN'
p983
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p984
I9
sS'.thisN'
p985
I114
sS'.thisIndex'
p986
I7
sg15
(lp987
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I7
sa(dp988
g16
(lp989
S'd'
asg18
S'N'
sS'.thisRepN'
p990
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p991
I10
sS'.thisN'
p992
I115
sS'.thisIndex'
p993
I2
sg15
(lp994
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I2
sa(dp995
g16
(lp996
S'd'
asg18
S'Y'
sS'.thisRepN'
p997
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p998
I11
sS'.thisN'
p999
I116
sS'.thisIndex'
p1000
I7
sg15
(lp1001
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1002
S'space'
p1003
asg96
I7
sa(dp1004
g16
(lp1005
S'd'
asg18
S'Y'
sS'.thisRepN'
p1006
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1007
I12
sS'.thisN'
p1008
I117
sS'.thisIndex'
p1009
I8
sg15
(lp1010
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1011
S'space'
p1012
asg96
I8
sa(dp1013
g16
(lp1014
S'd'
asg18
S'Y'
sS'.thisRepN'
p1015
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1016
I13
sS'.thisN'
p1017
I118
sS'.thisIndex'
p1018
I12
sg15
(lp1019
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1020
S'space'
p1021
asg96
I12
sa(dp1022
g16
(lp1023
S'd'
asg18
S'N'
sS'.thisRepN'
p1024
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1025
I14
sS'.thisN'
p1026
I119
sS'.thisIndex'
p1027
I5
sg15
(lp1028
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I5
sa(dp1029
g16
(lp1030
S'k'
asg18
S'Y'
sS'.thisRepN'
p1031
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1032
I0
sS'.thisN'
p1033
I120
sS'.thisIndex'
p1034
I0
sg15
(lp1035
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1036
S'space'
p1037
asg96
I0
sa(dp1038
g16
(lp1039
S'd'
asg18
S'N'
sS'.thisRepN'
p1040
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1041
I1
sS'.thisN'
p1042
I121
sS'.thisIndex'
p1043
I9
sg15
(lp1044
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I9
sa(dp1045
g16
(lp1046
S'd'
asg18
S'Y'
sS'.thisRepN'
p1047
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1048
I2
sS'.thisN'
p1049
I122
sS'.thisIndex'
p1050
I9
sg15
(lp1051
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1052
S'space'
p1053
asg96
I9
sa(dp1054
g16
(lp1055
S'k'
asg18
S'N'
sS'.thisRepN'
p1056
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1057
I3
sS'.thisN'
p1058
I123
sS'.thisIndex'
p1059
I2
sg15
(lp1060
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I2
sa(dp1061
g16
(lp1062
S'd'
asg18
S'N'
sS'.thisRepN'
p1063
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1064
I4
sS'.thisN'
p1065
I124
sS'.thisIndex'
p1066
I4
sg15
(lp1067
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I4
sa(dp1068
g16
(lp1069
S'k'
asg18
S'N'
sS'.thisRepN'
p1070
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1071
I5
sS'.thisN'
p1072
I125
sS'.thisIndex'
p1073
I14
sg15
(lp1074
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I14
sa(dp1075
g16
(lp1076
S'k'
asg18
S'Y'
sS'.thisRepN'
p1077
I8
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1078
I6
sS'.thisN'
p1079
I126
sS'.thisIndex'
p1080
I1
sg15
(lp1081
S'd'
asg30
g31
sg17
S'N'
sg14
I3
sg19
Nsg96
I1
sa(dp1082
g16
(lp1083
S'k'
asg18
S'Y'
sS'.thisRepN'
p1084
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1085
I7
sS'.thisN'
p1086
I127
sS'.thisIndex'
p1087
I11
sg15
(lp1088
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1089
S'space'
p1090
asg96
I11
sa(dp1091
g16
(lp1092
S'k'
asg18
S'N'
sS'.thisRepN'
p1093
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1094
I8
sS'.thisN'
p1095
I128
sS'.thisIndex'
p1096
I4
sg15
(lp1097
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I4
sa(dp1098
g16
(lp1099
S'd'
asg18
S'Y'
sS'.thisRepN'
p1100
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1101
I9
sS'.thisN'
p1102
I129
sS'.thisIndex'
p1103
I13
sg15
(lp1104
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1105
S'space'
p1106
asg96
I13
sa(dp1107
g16
(lp1108
S'k'
asg18
S'N'
sS'.thisRepN'
p1109
I8
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1110
I10
sS'.thisN'
p1111
I130
sS'.thisIndex'
p1112
I5
sg15
(lp1113
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1114
S'space'
p1115
asg96
I5
sa(dp1116
g16
(lp1117
S'k'
asg18
S'N'
sS'.thisRepN'
p1118
I8
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1119
I11
sS'.thisN'
p1120
I131
sS'.thisIndex'
p1121
I7
sg15
(lp1122
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1123
S'space'
p1124
asg96
I7
sa(dp1125
g16
(lp1126
S'd'
asg18
S'N'
sS'.thisRepN'
p1127
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1128
I12
sS'.thisN'
p1129
I132
sS'.thisIndex'
p1130
I9
sg15
(lp1131
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I9
sa(dp1132
g16
(lp1133
S'k'
asg18
S'N'
sS'.thisRepN'
p1134
I8
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1135
I13
sS'.thisN'
p1136
I133
sS'.thisIndex'
p1137
I0
sg15
(lp1138
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1139
S'space'
p1140
asg96
I0
sa(dp1141
g16
(lp1142
S'k'
asg18
S'N'
sS'.thisRepN'
p1143
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1144
I14
sS'.thisN'
p1145
I134
sS'.thisIndex'
p1146
I5
sg15
(lp1147
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I5
sa(dp1148
g16
(lp1149
S'd'
asg18
S'Y'
sS'.thisRepN'
p1150
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1151
I0
sS'.thisN'
p1152
I135
sS'.thisIndex'
p1153
I6
sg15
(lp1154
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1155
S'space'
p1156
asg96
I6
sa(dp1157
g16
(lp1158
S'd'
asg18
S'N'
sS'.thisRepN'
p1159
I9
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1160
I1
sS'.thisN'
p1161
I136
sS'.thisIndex'
p1162
I8
sg15
(lp1163
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1164
S'space'
p1165
asg96
I8
sa(dp1166
g16
(lp1167
S'd'
asg18
S'N'
sS'.thisRepN'
p1168
I9
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1169
I2
sS'.thisN'
p1170
I137
sS'.thisIndex'
p1171
I5
sg15
(lp1172
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1173
S'space'
p1174
asg96
I5
sa(dp1175
g16
(lp1176
S'k'
asg18
S'Y'
sS'.thisRepN'
p1177
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1178
I3
sS'.thisN'
p1179
I138
sS'.thisIndex'
p1180
I5
sg15
(lp1181
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1182
S'space'
p1183
asg96
I5
sa(dp1184
g16
(lp1185
S'd'
asg18
S'Y'
sS'.thisRepN'
p1186
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1187
I4
sS'.thisN'
p1188
I139
sS'.thisIndex'
p1189
I10
sg15
(lp1190
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1191
S'space'
p1192
asg96
I10
sa(dp1193
g16
(lp1194
S'd'
asg18
S'N'
sS'.thisRepN'
p1195
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1196
I5
sS'.thisN'
p1197
I140
sS'.thisIndex'
p1198
I13
sg15
(lp1199
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I13
sa(dp1200
g16
(lp1201
S'd'
asg18
S'Y'
sS'.thisRepN'
p1202
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1203
I6
sS'.thisN'
p1204
I141
sS'.thisIndex'
p1205
I9
sg15
(lp1206
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1207
S'space'
p1208
asg96
I9
sa(dp1209
g16
(lp1210
S'k'
asg18
S'Y'
sS'.thisRepN'
p1211
I9
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1212
I7
sS'.thisN'
p1213
I142
sS'.thisIndex'
p1214
I6
sg15
(lp1215
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I6
sa(dp1216
g16
(lp1217
S'd'
asg18
S'Y'
sS'.thisRepN'
p1218
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1219
I8
sS'.thisN'
p1220
I143
sS'.thisIndex'
p1221
I11
sg15
(lp1222
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1223
S'space'
p1224
asg96
I11
sa(dp1225
g16
(lp1226
S'd'
asg18
S'Y'
sS'.thisRepN'
p1227
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1228
I9
sS'.thisN'
p1229
I144
sS'.thisIndex'
p1230
I5
sg15
(lp1231
S'k'
asg30
g31
sg17
S'N'
sg14
I3
sg19
(lp1232
S'space'
p1233
asg96
I5
sa(dp1234
g16
(lp1235
S'k'
asg18
S'Y'
sS'.thisRepN'
p1236
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1237
I10
sS'.thisN'
p1238
I145
sS'.thisIndex'
p1239
I8
sg15
(lp1240
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1241
S'space'
p1242
asg96
I8
sa(dp1243
g16
(lp1244
S'k'
asg18
S'Y'
sS'.thisRepN'
p1245
I9
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1246
I11
sS'.thisN'
p1247
I146
sS'.thisIndex'
p1248
I13
sg15
(lp1249
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I13
sa(dp1250
g16
(lp1251
S'd'
asg18
S'N'
sS'.thisRepN'
p1252
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1253
I12
sS'.thisN'
p1254
I147
sS'.thisIndex'
p1255
I0
sg15
(lp1256
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I0
sa(dp1257
g16
(lp1258
S'd'
asg18
S'N'
sS'.thisRepN'
p1259
I9
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1260
I13
sS'.thisN'
p1261
I148
sS'.thisIndex'
p1262
I14
sg15
(lp1263
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1264
S'space'
p1265
asg96
I14
sa(dp1266
g16
(lp1267
S'd'
asg18
S'N'
sg22
I35
sS'.thisN'
p1268
I149
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1269
I14
sS'.thisRepN'
p1270
I9
sg21
I46
sS'.thisIndex'
p1271
I5
sg23
I25
sg15
(lp1272
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I5
sa(dp1273
g16
(lp1274
S'd'
asg96
I0
sS'.thisRepN'
p1275
I10
sg30
g31
sg32
g33
sS'.thisTrialN'
p1276
I0
sS'.thisN'
p1277
I150
sS'.thisIndex'
p1278
I0
sg15
(lp1279
S'd'
asg17
S'Y'
sg14
I4
sa(dp1280
g16
(lp1281
S'k'
asg96
I10
sS'.thisRepN'
p1282
I10
sg30
g31
sg32
g33
sS'.thisTrialN'
p1283
I1
sS'.thisN'
p1284
I151
sS'.thisIndex'
p1285
I10
sg15
(lp1286
S'k'
asg17
S'Y'
sg14
I4
sa(dp1287
g16
(lp1288
S'k'
asg18
S'N'
sS'.thisRepN'
p1289
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1290
I2
sS'.thisN'
p1291
I152
sS'.thisIndex'
p1292
I0
sg15
(lp1293
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I0
sa(dp1294
g16
(lp1295
S'k'
asg18
S'N'
sS'.thisRepN'
p1296
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1297
I3
sS'.thisN'
p1298
I153
sS'.thisIndex'
p1299
I6
sg15
(lp1300
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I6
sa(dp1301
g16
(lp1302
S'k'
asg18
S'Y'
sS'.thisRepN'
p1303
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1304
I4
sS'.thisN'
p1305
I154
sS'.thisIndex'
p1306
I7
sg15
(lp1307
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1308
S'space'
p1309
asg96
I7
sa(dp1310
g16
(lp1311
S'd'
asg18
S'Y'
sS'.thisRepN'
p1312
I10
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1313
I5
sS'.thisN'
p1314
I155
sS'.thisIndex'
p1315
I4
sg15
(lp1316
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I4
sa(dp1317
g16
(lp1318
S'd'
asg18
S'N'
sS'.thisRepN'
p1319
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1320
I6
sS'.thisN'
p1321
I156
sS'.thisIndex'
p1322
I5
sg15
(lp1323
S'k'
asg30
g31
sg17
S'N'
sg14
I4
sg19
Nsg96
I5
sa(dp1324
g16
(lp1325
S'k'
asg18
S'N'
sS'.thisRepN'
p1326
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1327
I7
sS'.thisN'
p1328
I157
sS'.thisIndex'
p1329
I9
sg15
(lp1330
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I9
sa(dp1331
g16
(lp1332
S'd'
asg18
S'Y'
sS'.thisRepN'
p1333
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1334
I8
sS'.thisN'
p1335
I158
sS'.thisIndex'
p1336
I1
sg15
(lp1337
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1338
S'space'
p1339
asg96
I1
sa(dp1340
g16
(lp1341
S'd'
asg18
S'Y'
sS'.thisRepN'
p1342
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1343
I9
sS'.thisN'
p1344
I159
sS'.thisIndex'
p1345
I10
sg15
(lp1346
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1347
S'space'
p1348
asg96
I10
sa(dp1349
g16
(lp1350
S'k'
asg18
S'N'
sS'.thisRepN'
p1351
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1352
I10
sS'.thisN'
p1353
I160
sS'.thisIndex'
p1354
I8
sg15
(lp1355
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I8
sa(dp1356
g16
(lp1357
S'k'
asg18
S'N'
sS'.thisRepN'
p1358
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1359
I11
sS'.thisN'
p1360
I161
sS'.thisIndex'
p1361
I7
sg15
(lp1362
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I7
sa(dp1363
g16
(lp1364
S'd'
asg18
S'N'
sS'.thisRepN'
p1365
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1366
I12
sS'.thisN'
p1367
I162
sS'.thisIndex'
p1368
I8
sg15
(lp1369
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I8
sa(dp1370
g16
(lp1371
S'd'
asg18
S'Y'
sS'.thisRepN'
p1372
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1373
I13
sS'.thisN'
p1374
I163
sS'.thisIndex'
p1375
I14
sg15
(lp1376
S'k'
asg30
g31
sg17
S'N'
sg14
I4
sg19
(lp1377
S'space'
p1378
asg96
I14
sa(dp1379
g16
(lp1380
S'd'
asg18
S'N'
sS'.thisRepN'
p1381
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1382
I14
sS'.thisN'
p1383
I164
sS'.thisIndex'
p1384
I8
sg15
(lp1385
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I8
sa(dp1386
g16
(lp1387
S'k'
asg18
S'N'
sS'.thisRepN'
p1388
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1389
I0
sS'.thisN'
p1390
I165
sS'.thisIndex'
p1391
I13
sg15
(lp1392
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I13
sa(dp1393
g16
(lp1394
S'k'
asg18
S'N'
sS'.thisRepN'
p1395
I11
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1396
I1
sS'.thisN'
p1397
I166
sS'.thisIndex'
p1398
I13
sg15
(lp1399
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1400
S'space'
p1401
asg96
I13
sa(dp1402
g16
(lp1403
S'k'
asg18
S'N'
sS'.thisRepN'
p1404
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1405
I2
sS'.thisN'
p1406
I167
sS'.thisIndex'
p1407
I1
sg15
(lp1408
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I1
sa(dp1409
g16
(lp1410
S'k'
asg18
S'N'
sS'.thisRepN'
p1411
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1412
I3
sS'.thisN'
p1413
I168
sS'.thisIndex'
p1414
I14
sg15
(lp1415
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I14
sa(dp1416
g16
(lp1417
S'k'
asg18
S'N'
sS'.thisRepN'
p1418
I11
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1419
I4
sS'.thisN'
p1420
I169
sS'.thisIndex'
p1421
I13
sg15
(lp1422
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1423
S'space'
p1424
asg96
I13
sa(dp1425
g16
(lp1426
S'd'
asg18
S'Y'
sS'.thisRepN'
p1427
I11
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1428
I5
sS'.thisN'
p1429
I170
sS'.thisIndex'
p1430
I11
sg15
(lp1431
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I11
sa(dp1432
g16
(lp1433
S'k'
asg18
S'N'
sS'.thisRepN'
p1434
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1435
I6
sS'.thisN'
p1436
I171
sS'.thisIndex'
p1437
I3
sg15
(lp1438
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I3
sa(dp1439
g16
(lp1440
S'd'
asg18
S'Y'
sS'.thisRepN'
p1441
I11
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1442
I7
sS'.thisN'
p1443
I172
sS'.thisIndex'
p1444
I0
sg15
(lp1445
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I0
sa(dp1446
g16
(lp1447
S'k'
asg18
S'Y'
sS'.thisRepN'
p1448
I11
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1449
I8
sS'.thisN'
p1450
I173
sS'.thisIndex'
p1451
I0
sg15
(lp1452
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I0
sa(dp1453
g16
(lp1454
S'd'
asg18
S'N'
sS'.thisRepN'
p1455
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1456
I9
sS'.thisN'
p1457
I174
sS'.thisIndex'
p1458
I5
sg15
(lp1459
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I5
sa(dp1460
g16
(lp1461
S'k'
asg18
S'Y'
sS'.thisRepN'
p1462
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1463
I10
sS'.thisN'
p1464
I175
sS'.thisIndex'
p1465
I7
sg15
(lp1466
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1467
S'space'
p1468
asg96
I7
sa(dp1469
g16
(lp1470
S'k'
asg18
S'N'
sS'.thisRepN'
p1471
I11
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1472
I11
sS'.thisN'
p1473
I176
sS'.thisIndex'
p1474
I5
sg15
(lp1475
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1476
S'space'
p1477
asg96
I5
sa(dp1478
g16
(lp1479
S'k'
asg18
S'N'
sS'.thisRepN'
p1480
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1481
I12
sS'.thisN'
p1482
I177
sS'.thisIndex'
p1483
I12
sg15
(lp1484
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I12
sa(dp1485
g16
(lp1486
S'd'
asg18
S'N'
sS'.thisRepN'
p1487
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1488
I13
sS'.thisN'
p1489
I178
sS'.thisIndex'
p1490
I4
sg15
(lp1491
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I4
sa(dp1492
g16
(lp1493
S'k'
asg18
S'Y'
sS'.thisRepN'
p1494
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1495
I14
sS'.thisN'
p1496
I179
sS'.thisIndex'
p1497
I0
sg15
(lp1498
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1499
S'space'
p1500
asg96
I0
sa(dp1501
g16
(lp1502
S'd'
asg18
S'N'
sS'.thisRepN'
p1503
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1504
I0
sS'.thisN'
p1505
I180
sS'.thisIndex'
p1506
I6
sg15
(lp1507
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I6
sa(dp1508
g16
(lp1509
S'd'
asg18
S'N'
sS'.thisRepN'
p1510
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1511
I1
sS'.thisN'
p1512
I181
sS'.thisIndex'
p1513
I5
sg15
(lp1514
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I5
sa(dp1515
g16
(lp1516
S'd'
asg18
S'Y'
sS'.thisRepN'
p1517
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1518
I2
sS'.thisN'
p1519
I182
sS'.thisIndex'
p1520
I5
sg15
(lp1521
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1522
S'space'
p1523
asg96
I5
sa(dp1524
g16
(lp1525
S'k'
asg18
S'Y'
sS'.thisRepN'
p1526
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1527
I3
sS'.thisN'
p1528
I183
sS'.thisIndex'
p1529
I4
sg15
(lp1530
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1531
S'space'
p1532
asg96
I4
sa(dp1533
g16
(lp1534
S'd'
asg18
S'N'
sS'.thisRepN'
p1535
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1536
I4
sS'.thisN'
p1537
I184
sS'.thisIndex'
p1538
I3
sg15
(lp1539
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I3
sa(dp1540
g16
(lp1541
S'k'
asg18
S'N'
sS'.thisRepN'
p1542
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1543
I5
sS'.thisN'
p1544
I185
sS'.thisIndex'
p1545
I10
sg15
(lp1546
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I10
sa(dp1547
g16
(lp1548
S'd'
asg18
S'N'
sS'.thisRepN'
p1549
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1550
I6
sS'.thisN'
p1551
I186
sS'.thisIndex'
p1552
I2
sg15
(lp1553
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I2
sa(dp1554
g16
(lp1555
S'k'
asg18
S'N'
sS'.thisRepN'
p1556
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1557
I7
sS'.thisN'
p1558
I187
sS'.thisIndex'
p1559
I1
sg15
(lp1560
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I1
sa(dp1561
g16
(lp1562
S'd'
asg18
S'N'
sS'.thisRepN'
p1563
I12
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1564
I8
sS'.thisN'
p1565
I188
sS'.thisIndex'
p1566
I14
sg15
(lp1567
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1568
S'space'
p1569
asg96
I14
sa(dp1570
g16
(lp1571
S'k'
asg18
S'N'
sS'.thisRepN'
p1572
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1573
I9
sS'.thisN'
p1574
I189
sS'.thisIndex'
p1575
I9
sg15
(lp1576
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I9
sa(dp1577
g16
(lp1578
S'k'
asg18
S'N'
sS'.thisRepN'
p1579
I12
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1580
I10
sS'.thisN'
p1581
I190
sS'.thisIndex'
p1582
I8
sg15
(lp1583
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1584
S'space'
p1585
asg96
I8
sa(dp1586
g16
(lp1587
S'd'
asg18
S'Y'
sS'.thisRepN'
p1588
I12
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1589
I11
sS'.thisN'
p1590
I191
sS'.thisIndex'
p1591
I5
sg15
(lp1592
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I5
sa(dp1593
g16
(lp1594
S'd'
asg18
S'N'
sS'.thisRepN'
p1595
I12
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1596
I12
sS'.thisN'
p1597
I192
sS'.thisIndex'
p1598
I12
sg15
(lp1599
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1600
S'space'
p1601
asg96
I12
sa(dp1602
g16
(lp1603
S'k'
asg18
S'N'
sS'.thisRepN'
p1604
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1605
I13
sS'.thisN'
p1606
I193
sS'.thisIndex'
p1607
I3
sg15
(lp1608
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I3
sa(dp1609
g16
(lp1610
S'd'
asg18
S'Y'
sS'.thisRepN'
p1611
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1612
I14
sS'.thisN'
p1613
I194
sS'.thisIndex'
p1614
I3
sg15
(lp1615
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1616
S'space'
p1617
asg96
I3
sa(dp1618
g16
(lp1619
S'k'
asg18
S'N'
sS'.thisRepN'
p1620
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1621
I0
sS'.thisN'
p1622
I195
sS'.thisIndex'
p1623
I9
sg15
(lp1624
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I9
sa(dp1625
g16
(lp1626
S'k'
asg18
S'N'
sS'.thisRepN'
p1627
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1628
I1
sS'.thisN'
p1629
I196
sS'.thisIndex'
p1630
I7
sg15
(lp1631
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I7
sa(dp1632
g16
(lp1633
S'd'
asg18
S'Y'
sS'.thisRepN'
p1634
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1635
I2
sS'.thisN'
p1636
I197
sS'.thisIndex'
p1637
I11
sg15
(lp1638
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1639
S'space'
p1640
asg96
I11
sa(dp1641
g16
(lp1642
S'k'
asg18
S'Y'
sS'.thisRepN'
p1643
I13
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1644
I3
sS'.thisN'
p1645
I198
sS'.thisIndex'
p1646
I1
sg15
(lp1647
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I1
sa(dp1648
g16
(lp1649
S'd'
asg18
S'N'
sg22
I36
sS'.thisN'
p1650
I199
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1651
I4
sS'.thisRepN'
p1652
I13
sg21
I48
sS'.thisIndex'
p1653
I14
sg23
I16
sg15
(lp1654
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I14
sa(dp1655
g16
(lp1656
S'k'
asg96
I1
sS'.thisRepN'
p1657
I13
sg30
g31
sg32
g33
sS'.thisTrialN'
p1658
I5
sS'.thisN'
p1659
I200
sS'.thisIndex'
p1660
I1
sg15
(lp1661
S'k'
asg17
S'Y'
sg14
I5
sa(dp1662
g16
(lp1663
S'k'
asg96
I10
sS'.thisRepN'
p1664
I13
sg30
g31
sg32
g33
sS'.thisTrialN'
p1665
I6
sS'.thisN'
p1666
I201
sS'.thisIndex'
p1667
I10
sg15
(lp1668
S'k'
asg17
S'Y'
sg14
I5
sa(dp1669
g16
(lp1670
S'k'
asg18
S'Y'
sS'.thisRepN'
p1671
I13
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1672
I7
sS'.thisN'
p1673
I202
sS'.thisIndex'
p1674
I0
sg15
(lp1675
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I0
sa(dp1676
g16
(lp1677
S'k'
asg18
S'N'
sS'.thisRepN'
p1678
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1679
I8
sS'.thisN'
p1680
I203
sS'.thisIndex'
p1681
I13
sg15
(lp1682
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I13
sa(dp1683
g16
(lp1684
S'k'
asg18
S'N'
sS'.thisRepN'
p1685
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1686
I9
sS'.thisN'
p1687
I204
sS'.thisIndex'
p1688
I9
sg15
(lp1689
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I9
sa(dp1690
g16
(lp1691
S'd'
asg18
S'Y'
sS'.thisRepN'
p1692
I13
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1693
I10
sS'.thisN'
p1694
I205
sS'.thisIndex'
p1695
I10
sg15
(lp1696
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I10
sa(dp1697
g16
(lp1698
S'k'
asg18
S'Y'
sS'.thisRepN'
p1699
I13
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1700
I11
sS'.thisN'
p1701
I206
sS'.thisIndex'
p1702
I7
sg15
(lp1703
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I7
sa(dp1704
g16
(lp1705
S'k'
asg18
S'Y'
sS'.thisRepN'
p1706
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1707
I12
sS'.thisN'
p1708
I207
sS'.thisIndex'
p1709
I10
sg15
(lp1710
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1711
S'space'
p1712
asg96
I10
sa(dp1713
g16
(lp1714
S'k'
asg18
S'Y'
sS'.thisRepN'
p1715
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1716
I13
sS'.thisN'
p1717
I208
sS'.thisIndex'
p1718
I0
sg15
(lp1719
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1720
S'space'
p1721
asg96
I0
sa(dp1722
g16
(lp1723
S'd'
asg18
S'N'
sS'.thisRepN'
p1724
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1725
I14
sS'.thisN'
p1726
I209
sS'.thisIndex'
p1727
I5
sg15
(lp1728
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I5
sa(dp1729
g16
(lp1730
S'd'
asg18
S'Y'
sS'.thisRepN'
p1731
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1732
I0
sS'.thisN'
p1733
I210
sS'.thisIndex'
p1734
I9
sg15
(lp1735
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
(lp1736
S'space'
p1737
asg96
I9
sa(dp1738
g16
(lp1739
S'd'
asg18
S'N'
sS'.thisRepN'
p1740
I14
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1741
I1
sS'.thisN'
p1742
I211
sS'.thisIndex'
p1743
I1
sg15
(lp1744
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
(lp1745
S'space'
p1746
asg96
I1
sa(dp1747
g16
(lp1748
S'd'
asg18
S'Y'
sS'.thisRepN'
p1749
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1750
I2
sS'.thisN'
p1751
I212
sS'.thisIndex'
p1752
I14
sg15
(lp1753
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1754
S'space'
p1755
asg96
I14
sa(dp1756
g16
(lp1757
S'd'
asg18
S'N'
sS'.thisRepN'
p1758
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1759
I3
sS'.thisN'
p1760
I213
sS'.thisIndex'
p1761
I0
sg15
(lp1762
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I0
sa(dp1763
g16
(lp1764
S'd'
asg18
S'Y'
sS'.thisRepN'
p1765
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1766
I4
sS'.thisN'
p1767
I214
sS'.thisIndex'
p1768
I9
sg15
(lp1769
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1770
S'space'
p1771
asg96
I9
sa(dp1772
g16
(lp1773
S'd'
asg18
S'N'
sS'.thisRepN'
p1774
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1775
I5
sS'.thisN'
p1776
I215
sS'.thisIndex'
p1777
I11
sg15
(lp1778
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
Nsg96
I11
sa(dp1779
g16
(lp1780
S'd'
asg18
S'Y'
sS'.thisRepN'
p1781
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1782
I6
sS'.thisN'
p1783
I216
sS'.thisIndex'
p1784
I11
sg15
(lp1785
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
(lp1786
S'space'
p1787
asg96
I11
sa(dp1788
g16
(lp1789
S'k'
asg18
S'N'
sS'.thisRepN'
p1790
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1791
I7
sS'.thisN'
p1792
I217
sS'.thisIndex'
p1793
I7
sg15
(lp1794
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I7
sa(dp1795
g16
(lp1796
S'd'
asg18
S'Y'
sS'.thisRepN'
p1797
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1798
I8
sS'.thisN'
p1799
I218
sS'.thisIndex'
p1800
I7
sg15
(lp1801
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
(lp1802
S'space'
p1803
asg96
I7
sa(dp1804
g16
(lp1805
S'd'
asg18
S'N'
sS'.thisRepN'
p1806
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1807
I9
sS'.thisN'
p1808
I219
sS'.thisIndex'
p1809
I1
sg15
(lp1810
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I1
sa(dp1811
g16
(lp1812
S'd'
asg18
S'N'
sS'.thisRepN'
p1813
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1814
I10
sS'.thisN'
p1815
I220
sS'.thisIndex'
p1816
I2
sg15
(lp1817
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I2
sa(dp1818
g16
(lp1819
S'd'
asg18
S'N'
sS'.thisRepN'
p1820
I14
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1821
I11
sS'.thisN'
p1822
I221
sS'.thisIndex'
p1823
I0
sg15
(lp1824
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1825
S'space'
p1826
asg96
I0
sa(dp1827
g16
(lp1828
S'k'
asg18
S'Y'
sS'.thisRepN'
p1829
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1830
I12
sS'.thisN'
p1831
I222
sS'.thisIndex'
p1832
I2
sg15
(lp1833
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1834
S'space'
p1835
asg96
I2
sa(dp1836
g16
(lp1837
S'd'
asg18
S'Y'
sS'.thisRepN'
p1838
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1839
I13
sS'.thisN'
p1840
I223
sS'.thisIndex'
p1841
I7
sg15
(lp1842
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1843
S'space'
p1844
asg96
I7
sa(dp1845
g16
(lp1846
S'k'
asg18
S'N'
sS'.thisRepN'
p1847
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1848
I14
sS'.thisN'
p1849
I224
sS'.thisIndex'
p1850
I7
sg15
(lp1851
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I7
sa(dp1852
g16
(lp1853
S'k'
asg18
S'Y'
sS'.thisRepN'
p1854
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1855
I0
sS'.thisN'
p1856
I225
sS'.thisIndex'
p1857
I11
sg15
(lp1858
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1859
S'space'
p1860
asg96
I11
sa(dp1861
g16
(lp1862
S'k'
asg18
S'Y'
sS'.thisRepN'
p1863
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1864
I1
sS'.thisN'
p1865
I226
sS'.thisIndex'
p1866
I14
sg15
(lp1867
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1868
S'space'
p1869
asg96
I14
sa(dp1870
g16
(lp1871
S'k'
asg18
S'N'
sS'.thisRepN'
p1872
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1873
I2
sS'.thisN'
p1874
I227
sS'.thisIndex'
p1875
I8
sg15
(lp1876
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I8
sa(dp1877
g16
(lp1878
S'k'
asg18
S'Y'
sS'.thisRepN'
p1879
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1880
I3
sS'.thisN'
p1881
I228
sS'.thisIndex'
p1882
I5
sg15
(lp1883
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1884
S'space'
p1885
asg96
I5
sa(dp1886
g16
(lp1887
S'k'
asg18
S'N'
sS'.thisRepN'
p1888
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1889
I4
sS'.thisN'
p1890
I229
sS'.thisIndex'
p1891
I9
sg15
(lp1892
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I9
sa(dp1893
g16
(lp1894
S'k'
asg18
S'Y'
sS'.thisRepN'
p1895
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1896
I5
sS'.thisN'
p1897
I230
sS'.thisIndex'
p1898
I7
sg15
(lp1899
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1900
S'space'
p1901
asg96
I7
sa(dp1902
g16
(lp1903
S'd'
asg18
S'Y'
sS'.thisRepN'
p1904
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1905
I6
sS'.thisN'
p1906
I231
sS'.thisIndex'
p1907
I0
sg15
(lp1908
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
(lp1909
S'space'
p1910
asg96
I0
sa(dp1911
g16
(lp1912
S'd'
asg18
S'N'
sS'.thisRepN'
p1913
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1914
I7
sS'.thisN'
p1915
I232
sS'.thisIndex'
p1916
I14
sg15
(lp1917
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I14
sa(dp1918
g16
(lp1919
S'd'
asg18
S'Y'
sS'.thisRepN'
p1920
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1921
I8
sS'.thisN'
p1922
I233
sS'.thisIndex'
p1923
I14
sg15
(lp1924
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1925
S'space'
p1926
asg96
I14
sa(dp1927
g16
(lp1928
S'k'
asg18
S'N'
sS'.thisRepN'
p1929
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1930
I9
sS'.thisN'
p1931
I234
sS'.thisIndex'
p1932
I5
sg15
(lp1933
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I5
sa(dp1934
g16
(lp1935
S'd'
asg18
S'Y'
sS'.thisRepN'
p1936
I15
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1937
I10
sS'.thisN'
p1938
I235
sS'.thisIndex'
p1939
I7
sg15
(lp1940
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I7
sa(dp1941
g16
(lp1942
S'k'
asg18
S'Y'
sS'.thisRepN'
p1943
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1944
I11
sS'.thisN'
p1945
I236
sS'.thisIndex'
p1946
I7
sg15
(lp1947
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1948
S'space'
p1949
asg96
I7
sa(dp1950
g16
(lp1951
S'd'
asg18
S'N'
sS'.thisRepN'
p1952
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1953
I12
sS'.thisN'
p1954
I237
sS'.thisIndex'
p1955
I13
sg15
(lp1956
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I13
sa(dp1957
g16
(lp1958
S'd'
asg18
S'Y'
sS'.thisRepN'
p1959
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1960
I13
sS'.thisN'
p1961
I238
sS'.thisIndex'
p1962
I1
sg15
(lp1963
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1964
S'space'
p1965
asg96
I1
sa(dp1966
g16
(lp1967
S'd'
asg18
S'Y'
sS'.thisRepN'
p1968
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1969
I14
sS'.thisN'
p1970
I239
sS'.thisIndex'
p1971
I4
sg15
(lp1972
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1973
S'space'
p1974
asg96
I4
sa(dp1975
g16
(lp1976
S'd'
asg18
S'Y'
sS'.thisRepN'
p1977
I16
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1978
I0
sS'.thisN'
p1979
I240
sS'.thisIndex'
p1980
I0
sg15
(lp1981
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I0
sa(dp1982
g16
(lp1983
S'k'
asg18
S'N'
sS'.thisRepN'
p1984
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1985
I1
sS'.thisN'
p1986
I241
sS'.thisIndex'
p1987
I0
sg15
(lp1988
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I0
sa(dp1989
g16
(lp1990
S'k'
asg18
S'N'
sS'.thisRepN'
p1991
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1992
I2
sS'.thisN'
p1993
I242
sS'.thisIndex'
p1994
I10
sg15
(lp1995
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I10
sa(dp1996
g16
(lp1997
S'k'
asg18
S'Y'
sS'.thisRepN'
p1998
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1999
I3
sS'.thisN'
p2000
I243
sS'.thisIndex'
p2001
I13
sg15
(lp2002
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp2003
S'space'
p2004
asg96
I13
sa(dp2005
g16
(lp2006
S'd'
asg18
S'N'
sS'.thisRepN'
p2007
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2008
I4
sS'.thisN'
p2009
I244
sS'.thisIndex'
p2010
I6
sg15
(lp2011
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I6
sa(dp2012
g16
(lp2013
S'd'
asg18
S'Y'
sS'.thisRepN'
p2014
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2015
I5
sS'.thisN'
p2016
I245
sS'.thisIndex'
p2017
I6
sg15
(lp2018
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp2019
S'space'
p2020
asg96
I6
sa(dp2021
g16
(lp2022
S'd'
asg18
S'N'
sS'.thisRepN'
p2023
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2024
I6
sS'.thisN'
p2025
I246
sS'.thisIndex'
p2026
I4
sg15
(lp2027
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I4
sa(dp2028
g16
(lp2029
S'd'
asg18
S'N'
sS'.thisRepN'
p2030
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2031
I7
sS'.thisN'
p2032
I247
sS'.thisIndex'
p2033
I1
sg15
(lp2034
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
Nsg96
I1
sa(dp2035
g16
(lp2036
S'd'
asg18
S'N'
sS'.thisRepN'
p2037
I16
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2038
I8
sS'.thisN'
p2039
I248
sS'.thisIndex'
p2040
I6
sg15
(lp2041
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp2042
S'space'
p2043
asg96
I6
sa(dp2044
g16
(lp2045
S'd'
asg18
S'N'
sg22
I40
sS'.thisN'
p2046
I249
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2047
I9
sS'.thisRepN'
p2048
I16
sg21
I43
sS'.thisIndex'
p2049
I10
sg23
I25
sg15
(lp2050
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I10
sa(dp2051
g16
(lp2052
S'd'
asg96
I11
sS'.thisRepN'
p2053
I16
sg30
g31
sg32
g33
sS'.thisTrialN'
p2054
I10
sS'.thisN'
p2055
I250
sS'.thisIndex'
p2056
I11
sg15
(lp2057
S'd'
asg17
S'Y'
sg14
I6
sa(dp2058
g16
(lp2059
S'd'
asg96
I3
sS'.thisRepN'
p2060
I16
sg30
g31
sg32
g33
sS'.thisTrialN'
p2061
I11
sS'.thisN'
p2062
I251
sS'.thisIndex'
p2063
I3
sg15
(lp2064
S'd'
asg17
S'Y'
sg14
I6
sa(dp2065
g16
(lp2066
S'k'
asg18
S'N'
sS'.thisRepN'
p2067
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2068
I12
sS'.thisN'
p2069
I252
sS'.thisIndex'
p2070
I13
sg15
(lp2071
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I13
sa(dp2072
g16
(lp2073
S'd'
asg18
S'Y'
sS'.thisRepN'
p2074
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2075
I13
sS'.thisN'
p2076
I253
sS'.thisIndex'
p2077
I4
sg15
(lp2078
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2079
S'space'
p2080
asg96
I4
sa(dp2081
g16
(lp2082
S'd'
asg18
S'Y'
sS'.thisRepN'
p2083
I16
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2084
I14
sS'.thisN'
p2085
I254
sS'.thisIndex'
p2086
I12
sg15
(lp2087
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I12
sa(dp2088
g16
(lp2089
S'k'
asg18
S'N'
sS'.thisRepN'
p2090
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2091
I0
sS'.thisN'
p2092
I255
sS'.thisIndex'
p2093
I1
sg15
(lp2094
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I1
sa(dp2095
g16
(lp2096
S'd'
asg18
S'N'
sS'.thisRepN'
p2097
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2098
I1
sS'.thisN'
p2099
I256
sS'.thisIndex'
p2100
I10
sg15
(lp2101
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I10
sa(dp2102
g16
(lp2103
S'd'
asg18
S'Y'
sS'.thisRepN'
p2104
I17
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2105
I2
sS'.thisN'
p2106
I257
sS'.thisIndex'
p2107
I9
sg15
(lp2108
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I9
sa(dp2109
g16
(lp2110
S'k'
asg18
S'Y'
sS'.thisRepN'
p2111
I17
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2112
I3
sS'.thisN'
p2113
I258
sS'.thisIndex'
p2114
I6
sg15
(lp2115
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I6
sa(dp2116
g16
(lp2117
S'd'
asg18
S'Y'
sS'.thisRepN'
p2118
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2119
I4
sS'.thisN'
p2120
I259
sS'.thisIndex'
p2121
I12
sg15
(lp2122
S'k'
asg30
g31
sg17
S'N'
sg14
I6
sg19
(lp2123
S'space'
p2124
asg96
I12
sa(dp2125
g16
(lp2126
S'd'
asg18
S'N'
sS'.thisRepN'
p2127
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2128
I5
sS'.thisN'
p2129
I260
sS'.thisIndex'
p2130
I8
sg15
(lp2131
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I8
sa(dp2132
g16
(lp2133
S'k'
asg18
S'N'
sS'.thisRepN'
p2134
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2135
I6
sS'.thisN'
p2136
I261
sS'.thisIndex'
p2137
I12
sg15
(lp2138
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I12
sa(dp2139
g16
(lp2140
S'k'
asg18
S'N'
sS'.thisRepN'
p2141
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2142
I7
sS'.thisN'
p2143
I262
sS'.thisIndex'
p2144
I6
sg15
(lp2145
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I6
sa(dp2146
g16
(lp2147
S'k'
asg18
S'Y'
sS'.thisRepN'
p2148
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2149
I8
sS'.thisN'
p2150
I263
sS'.thisIndex'
p2151
I2
sg15
(lp2152
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2153
S'space'
p2154
asg96
I2
sa(dp2155
g16
(lp2156
S'k'
asg18
S'Y'
sS'.thisRepN'
p2157
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2158
I9
sS'.thisN'
p2159
I264
sS'.thisIndex'
p2160
I12
sg15
(lp2161
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2162
S'space'
p2163
asg96
I12
sa(dp2164
g16
(lp2165
S'd'
asg18
S'N'
sS'.thisRepN'
p2166
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2167
I10
sS'.thisN'
p2168
I265
sS'.thisIndex'
p2169
I8
sg15
(lp2170
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I8
sa(dp2171
g16
(lp2172
S'k'
asg18
S'N'
sS'.thisRepN'
p2173
I17
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2174
I11
sS'.thisN'
p2175
I266
sS'.thisIndex'
p2176
I13
sg15
(lp2177
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2178
S'space'
p2179
asg96
I13
sa(dp2180
g16
(lp2181
S'd'
asg18
S'Y'
sS'.thisRepN'
p2182
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2183
I12
sS'.thisN'
p2184
I267
sS'.thisIndex'
p2185
I6
sg15
(lp2186
S'k'
asg30
g31
sg17
S'N'
sg14
I6
sg19
(lp2187
S'space'
p2188
asg96
I6
sa(dp2189
g16
(lp2190
S'd'
asg18
S'N'
sS'.thisRepN'
p2191
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2192
I13
sS'.thisN'
p2193
I268
sS'.thisIndex'
p2194
I7
sg15
(lp2195
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I7
sa(dp2196
g16
(lp2197
S'd'
asg18
S'N'
sS'.thisRepN'
p2198
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2199
I14
sS'.thisN'
p2200
I269
sS'.thisIndex'
p2201
I10
sg15
(lp2202
S'k'
asg30
g31
sg17
S'N'
sg14
I6
sg19
Nsg96
I10
sa(dp2203
g16
(lp2204
S'k'
asg18
S'Y'
sS'.thisRepN'
p2205
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2206
I0
sS'.thisN'
p2207
I270
sS'.thisIndex'
p2208
I14
sg15
(lp2209
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2210
S'space'
p2211
asg96
I14
sa(dp2212
g16
(lp2213
S'k'
asg18
S'Y'
sS'.thisRepN'
p2214
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2215
I1
sS'.thisN'
p2216
I271
sS'.thisIndex'
p2217
I14
sg15
(lp2218
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2219
S'space'
p2220
asg96
I14
sa(dp2221
g16
(lp2222
S'k'
asg18
S'Y'
sS'.thisRepN'
p2223
I18
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2224
I2
sS'.thisN'
p2225
I272
sS'.thisIndex'
p2226
I12
sg15
(lp2227
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I12
sa(dp2228
g16
(lp2229
S'k'
asg18
S'Y'
sS'.thisRepN'
p2230
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2231
I3
sS'.thisN'
p2232
I273
sS'.thisIndex'
p2233
I11
sg15
(lp2234
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2235
S'space'
p2236
asg96
I11
sa(dp2237
g16
(lp2238
S'k'
asg18
S'N'
sS'.thisRepN'
p2239
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2240
I4
sS'.thisN'
p2241
I274
sS'.thisIndex'
p2242
I2
sg15
(lp2243
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I2
sa(dp2244
g16
(lp2245
S'k'
asg18
S'N'
sS'.thisRepN'
p2246
I18
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2247
I5
sS'.thisN'
p2248
I275
sS'.thisIndex'
p2249
I1
sg15
(lp2250
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2251
S'd'
asg96
I1
sa(dp2252
g16
(lp2253
S'k'
asg18
S'N'
sS'.thisRepN'
p2254
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2255
I6
sS'.thisN'
p2256
I276
sS'.thisIndex'
p2257
I8
sg15
(lp2258
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I8
sa(dp2259
g16
(lp2260
S'd'
asg18
S'N'
sS'.thisRepN'
p2261
I18
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2262
I7
sS'.thisN'
p2263
I277
sS'.thisIndex'
p2264
I14
sg15
(lp2265
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2266
S'space'
p2267
asg96
I14
sa(dp2268
g16
(lp2269
S'd'
asg18
S'N'
sS'.thisRepN'
p2270
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2271
I8
sS'.thisN'
p2272
I278
sS'.thisIndex'
p2273
I6
sg15
(lp2274
S'k'
asg30
g31
sg17
S'N'
sg14
I6
sg19
Nsg96
I6
sa(dp2275
g16
(lp2276
S'k'
asg18
S'Y'
sS'.thisRepN'
p2277
I18
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2278
I9
sS'.thisN'
p2279
I279
sS'.thisIndex'
p2280
I10
sg15
(lp2281
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I10
sa(dp2282
g16
(lp2283
S'k'
asg18
S'Y'
sS'.thisRepN'
p2284
I18
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2285
I10
sS'.thisN'
p2286
I280
sS'.thisIndex'
p2287
I13
sg15
(lp2288
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I13
sa(dp2289
g16
(lp2290
S'd'
asg18
S'Y'
sS'.thisRepN'
p2291
I18
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2292
I11
sS'.thisN'
p2293
I281
sS'.thisIndex'
p2294
I6
sg15
(lp2295
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I6
sa(dp2296
g16
(lp2297
S'd'
asg18
S'N'
sS'.thisRepN'
p2298
I18
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2299
I12
sS'.thisN'
p2300
I282
sS'.thisIndex'
p2301
I7
sg15
(lp2302
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2303
S'space'
p2304
asg96
I7
sa(dp2305
g16
(lp2306
S'd'
asg18
S'N'
sS'.thisRepN'
p2307
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2308
I13
sS'.thisN'
p2309
I283
sS'.thisIndex'
p2310
I8
sg15
(lp2311
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I8
sa(dp2312
g16
(lp2313
S'k'
asg18
S'N'
sS'.thisRepN'
p2314
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2315
I14
sS'.thisN'
p2316
I284
sS'.thisIndex'
p2317
I0
sg15
(lp2318
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I0
sa(dp2319
g16
(lp2320
S'k'
asg18
S'Y'
sS'.thisRepN'
p2321
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2322
I0
sS'.thisN'
p2323
I285
sS'.thisIndex'
p2324
I12
sg15
(lp2325
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2326
S'space'
p2327
asg96
I12
sa(dp2328
g16
(lp2329
S'd'
asg18
S'N'
sS'.thisRepN'
p2330
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2331
I1
sS'.thisN'
p2332
I286
sS'.thisIndex'
p2333
I12
sg15
(lp2334
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I12
sa(dp2335
g16
(lp2336
S'k'
asg18
S'N'
sS'.thisRepN'
p2337
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2338
I2
sS'.thisN'
p2339
I287
sS'.thisIndex'
p2340
I5
sg15
(lp2341
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I5
sa(dp2342
g16
(lp2343
S'k'
asg18
S'N'
sS'.thisRepN'
p2344
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2345
I3
sS'.thisN'
p2346
I288
sS'.thisIndex'
p2347
I12
sg15
(lp2348
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I12
sa(dp2349
g16
(lp2350
S'd'
asg18
S'N'
sS'.thisRepN'
p2351
I19
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2352
I4
sS'.thisN'
p2353
I289
sS'.thisIndex'
p2354
I12
sg15
(lp2355
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2356
S'space'
p2357
asg96
I12
sa(dp2358
g16
(lp2359
S'd'
asg18
S'N'
sS'.thisRepN'
p2360
I19
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2361
I5
sS'.thisN'
p2362
I290
sS'.thisIndex'
p2363
I14
sg15
(lp2364
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2365
S'space'
p2366
asg96
I14
sa(dp2367
g16
(lp2368
S'k'
asg18
S'N'
sS'.thisRepN'
p2369
I19
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2370
I6
sS'.thisN'
p2371
I291
sS'.thisIndex'
p2372
I4
sg15
(lp2373
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2374
S'space'
p2375
asg96
I4
sa(dp2376
g16
(lp2377
S'd'
asg18
S'Y'
sS'.thisRepN'
p2378
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2379
I7
sS'.thisN'
p2380
I292
sS'.thisIndex'
p2381
I6
sg15
(lp2382
S'k'
asg30
g31
sg17
S'N'
sg14
I6
sg19
(lp2383
S'space'
p2384
asg96
I6
sa(dp2385
g16
(lp2386
S'd'
asg18
S'N'
sS'.thisRepN'
p2387
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2388
I8
sS'.thisN'
p2389
I293
sS'.thisIndex'
p2390
I6
sg15
(lp2391
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I6
sa(dp2392
g16
(lp2393
S'd'
asg18
S'Y'
sS'.thisRepN'
p2394
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2395
I9
sS'.thisN'
p2396
I294
sS'.thisIndex'
p2397
I7
sg15
(lp2398
S'k'
asg30
g31
sg17
S'N'
sg14
I6
sg19
(lp2399
S'space'
p2400
asg96
I7
sa(dp2401
g16
(lp2402
S'd'
asg18
S'N'
sS'.thisRepN'
p2403
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2404
I10
sS'.thisN'
p2405
I295
sS'.thisIndex'
p2406
I1
sg15
(lp2407
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I1
sa(dp2408
g16
(lp2409
S'd'
asg18
S'N'
sS'.thisRepN'
p2410
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2411
I11
sS'.thisN'
p2412
I296
sS'.thisIndex'
p2413
I10
sg15
(lp2414
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I10
sa(dp2415
g16
(lp2416
S'k'
asg18
S'N'
sS'.thisRepN'
p2417
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2418
I12
sS'.thisN'
p2419
I297
sS'.thisIndex'
p2420
I3
sg15
(lp2421
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I3
sa(dp2422
g16
(lp2423
S'k'
asg18
S'N'
sS'.thisRepN'
p2424
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2425
I13
sS'.thisN'
p2426
I298
sS'.thisIndex'
p2427
I8
sg15
(lp2428
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I8
sa(dp2429
g16
(lp2430
S'd'
asg18
S'N'
sg22
I34
sS'.thisN'
p2431
I299
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2432
I14
sS'.thisRepN'
p2433
I19
sg21
I44
sS'.thisIndex'
p2434
I12
sg23
I18
sg15
(lp2435
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I12
sa(dp2436
g16
(lp2437
S'k'
asg96
I4
sS'.thisRepN'
p2438
I20
sg30
g31
sg32
g33
sS'.thisTrialN'
p2439
I0
sS'.thisN'
p2440
I300
sS'.thisIndex'
p2441
I4
sg15
(lp2442
S'k'
asg17
S'Y'
sg14
I7
sa(dp2443
g16
(lp2444
S'd'
asg96
I5
sS'.thisRepN'
p2445
I20
sg30
g31
sg32
g33
sS'.thisTrialN'
p2446
I1
sS'.thisN'
p2447
I301
sS'.thisIndex'
p2448
I5
sg15
(lp2449
S'd'
asg17
S'Y'
sg14
I7
sa(dp2450
g16
(lp2451
S'd'
asg18
S'Y'
sS'.thisRepN'
p2452
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2453
I2
sS'.thisN'
p2454
I302
sS'.thisIndex'
p2455
I9
sg15
(lp2456
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2457
S'space'
p2458
asg96
I9
sa(dp2459
g16
(lp2460
S'd'
asg18
S'N'
sS'.thisRepN'
p2461
I20
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2462
I3
sS'.thisN'
p2463
I303
sS'.thisIndex'
p2464
I12
sg15
(lp2465
S'k'
asg30
g31
sg17
S'N'
sg14
I7
sg19
(lp2466
S'space'
p2467
asg96
I12
sa(dp2468
g16
(lp2469
S'k'
asg18
S'Y'
sS'.thisRepN'
p2470
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2471
I4
sS'.thisN'
p2472
I304
sS'.thisIndex'
p2473
I2
sg15
(lp2474
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2475
S'space'
p2476
asg96
I2
sa(dp2477
g16
(lp2478
S'd'
asg18
S'Y'
sS'.thisRepN'
p2479
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2480
I5
sS'.thisN'
p2481
I305
sS'.thisIndex'
p2482
I10
sg15
(lp2483
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2484
S'space'
p2485
asg96
I10
sa(dp2486
g16
(lp2487
S'k'
asg18
S'N'
sS'.thisRepN'
p2488
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2489
I6
sS'.thisN'
p2490
I306
sS'.thisIndex'
p2491
I4
sg15
(lp2492
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I4
sa(dp2493
g16
(lp2494
S'k'
asg18
S'N'
sS'.thisRepN'
p2495
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2496
I7
sS'.thisN'
p2497
I307
sS'.thisIndex'
p2498
I6
sg15
(lp2499
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I6
sa(dp2500
g16
(lp2501
S'k'
asg18
S'Y'
sS'.thisRepN'
p2502
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2503
I8
sS'.thisN'
p2504
I308
sS'.thisIndex'
p2505
I11
sg15
(lp2506
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2507
S'space'
p2508
asg96
I11
sa(dp2509
g16
(lp2510
S'd'
asg18
S'N'
sS'.thisRepN'
p2511
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2512
I9
sS'.thisN'
p2513
I309
sS'.thisIndex'
p2514
I5
sg15
(lp2515
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I5
sa(dp2516
g16
(lp2517
S'k'
asg18
S'Y'
sS'.thisRepN'
p2518
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2519
I10
sS'.thisN'
p2520
I310
sS'.thisIndex'
p2521
I12
sg15
(lp2522
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2523
S'space'
p2524
asg96
I12
sa(dp2525
g16
(lp2526
S'k'
asg18
S'Y'
sS'.thisRepN'
p2527
I20
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2528
I11
sS'.thisN'
p2529
I311
sS'.thisIndex'
p2530
I11
sg15
(lp2531
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I11
sa(dp2532
g16
(lp2533
S'd'
asg18
S'N'
sS'.thisRepN'
p2534
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2535
I12
sS'.thisN'
p2536
I312
sS'.thisIndex'
p2537
I14
sg15
(lp2538
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I14
sa(dp2539
g16
(lp2540
S'd'
asg18
S'Y'
sS'.thisRepN'
p2541
I20
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2542
I13
sS'.thisN'
p2543
I313
sS'.thisIndex'
p2544
I0
sg15
(lp2545
S'k'
asg30
g31
sg17
S'N'
sg14
I7
sg19
Nsg96
I0
sa(dp2546
g16
(lp2547
S'd'
asg18
S'Y'
sS'.thisRepN'
p2548
I20
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2549
I14
sS'.thisN'
p2550
I314
sS'.thisIndex'
p2551
I1
sg15
(lp2552
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I1
sa(dp2553
g16
(lp2554
S'd'
asg18
S'N'
sS'.thisRepN'
p2555
I21
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2556
I0
sS'.thisN'
p2557
I315
sS'.thisIndex'
p2558
I10
sg15
(lp2559
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2560
S'space'
p2561
asg96
I10
sa(dp2562
g16
(lp2563
S'k'
asg18
S'N'
sS'.thisRepN'
p2564
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2565
I1
sS'.thisN'
p2566
I316
sS'.thisIndex'
p2567
I13
sg15
(lp2568
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I13
sa(dp2569
g16
(lp2570
S'k'
asg18
S'Y'
sS'.thisRepN'
p2571
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2572
I2
sS'.thisN'
p2573
I317
sS'.thisIndex'
p2574
I5
sg15
(lp2575
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2576
S'space'
p2577
asg96
I5
sa(dp2578
g16
(lp2579
S'd'
asg18
S'N'
sS'.thisRepN'
p2580
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2581
I3
sS'.thisN'
p2582
I318
sS'.thisIndex'
p2583
I12
sg15
(lp2584
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I12
sa(dp2585
g16
(lp2586
S'd'
asg18
S'N'
sS'.thisRepN'
p2587
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2588
I4
sS'.thisN'
p2589
I319
sS'.thisIndex'
p2590
I4
sg15
(lp2591
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I4
sa(dp2592
g16
(lp2593
S'd'
asg18
S'Y'
sS'.thisRepN'
p2594
I21
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2595
I5
sS'.thisN'
p2596
I320
sS'.thisIndex'
p2597
I14
sg15
(lp2598
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I14
sa(dp2599
g16
(lp2600
S'k'
asg18
S'Y'
sS'.thisRepN'
p2601
I21
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2602
I6
sS'.thisN'
p2603
I321
sS'.thisIndex'
p2604
I5
sg15
(lp2605
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I5
sa(dp2606
g16
(lp2607
S'd'
asg18
S'N'
sS'.thisRepN'
p2608
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2609
I7
sS'.thisN'
p2610
I322
sS'.thisIndex'
p2611
I10
sg15
(lp2612
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I10
sa(dp2613
g16
(lp2614
S'd'
asg18
S'N'
sS'.thisRepN'
p2615
I21
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2616
I8
sS'.thisN'
p2617
I323
sS'.thisIndex'
p2618
I14
sg15
(lp2619
S'k'
asg30
g31
sg17
S'N'
sg14
I7
sg19
(lp2620
S'space'
p2621
asg96
I14
sa(dp2622
g16
(lp2623
S'k'
asg18
S'Y'
sS'.thisRepN'
p2624
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2625
I9
sS'.thisN'
p2626
I324
sS'.thisIndex'
p2627
I11
sg15
(lp2628
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2629
S'space'
p2630
asg96
I11
sa(dp2631
g16
(lp2632
S'k'
asg18
S'N'
sS'.thisRepN'
p2633
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2634
I10
sS'.thisN'
p2635
I325
sS'.thisIndex'
p2636
I8
sg15
(lp2637
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I8
sa(dp2638
g16
(lp2639
S'k'
asg18
S'Y'
sS'.thisRepN'
p2640
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2641
I11
sS'.thisN'
p2642
I326
sS'.thisIndex'
p2643
I9
sg15
(lp2644
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2645
S'space'
p2646
asg96
I9
sa(dp2647
g16
(lp2648
S'k'
asg18
S'N'
sS'.thisRepN'
p2649
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2650
I12
sS'.thisN'
p2651
I327
sS'.thisIndex'
p2652
I5
sg15
(lp2653
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I5
sa(dp2654
g16
(lp2655
S'd'
asg18
S'Y'
sS'.thisRepN'
p2656
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2657
I13
sS'.thisN'
p2658
I328
sS'.thisIndex'
p2659
I12
sg15
(lp2660
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2661
S'space'
p2662
asg96
I12
sa(dp2663
g16
(lp2664
S'k'
asg18
S'N'
sS'.thisRepN'
p2665
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2666
I14
sS'.thisN'
p2667
I329
sS'.thisIndex'
p2668
I4
sg15
(lp2669
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I4
sa(dp2670
g16
(lp2671
S'k'
asg18
S'N'
sS'.thisRepN'
p2672
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2673
I0
sS'.thisN'
p2674
I330
sS'.thisIndex'
p2675
I6
sg15
(lp2676
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I6
sa(dp2677
g16
(lp2678
S'k'
asg18
S'N'
sS'.thisRepN'
p2679
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2680
I1
sS'.thisN'
p2681
I331
sS'.thisIndex'
p2682
I10
sg15
(lp2683
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I10
sa(dp2684
g16
(lp2685
S'k'
asg18
S'N'
sS'.thisRepN'
p2686
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2687
I2
sS'.thisN'
p2688
I332
sS'.thisIndex'
p2689
I13
sg15
(lp2690
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I13
sa(dp2691
g16
(lp2692
S'k'
asg18
S'Y'
sS'.thisRepN'
p2693
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2694
I3
sS'.thisN'
p2695
I333
sS'.thisIndex'
p2696
I9
sg15
(lp2697
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2698
S'space'
p2699
asg96
I9
sa(dp2700
g16
(lp2701
S'd'
asg18
S'Y'
sS'.thisRepN'
p2702
I22
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2703
I4
sS'.thisN'
p2704
I334
sS'.thisIndex'
p2705
I14
sg15
(lp2706
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I14
sa(dp2707
g16
(lp2708
S'k'
asg18
S'Y'
sS'.thisRepN'
p2709
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2710
I5
sS'.thisN'
p2711
I335
sS'.thisIndex'
p2712
I7
sg15
(lp2713
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2714
S'space'
p2715
asg96
I7
sa(dp2716
g16
(lp2717
S'k'
asg18
S'N'
sS'.thisRepN'
p2718
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2719
I6
sS'.thisN'
p2720
I336
sS'.thisIndex'
p2721
I3
sg15
(lp2722
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I3
sa(dp2723
g16
(lp2724
S'k'
asg18
S'Y'
sS'.thisRepN'
p2725
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2726
I7
sS'.thisN'
p2727
I337
sS'.thisIndex'
p2728
I5
sg15
(lp2729
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2730
S'space'
p2731
asg96
I5
sa(dp2732
g16
(lp2733
S'k'
asg18
S'N'
sS'.thisRepN'
p2734
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2735
I8
sS'.thisN'
p2736
I338
sS'.thisIndex'
p2737
I2
sg15
(lp2738
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I2
sa(dp2739
g16
(lp2740
S'k'
asg18
S'Y'
sS'.thisRepN'
p2741
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2742
I9
sS'.thisN'
p2743
I339
sS'.thisIndex'
p2744
I8
sg15
(lp2745
S'd'
asg30
g31
sg17
S'N'
sg14
I7
sg19
(lp2746
S'space'
p2747
asg96
I8
sa(dp2748
g16
(lp2749
S'k'
asg18
S'N'
sS'.thisRepN'
p2750
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2751
I10
sS'.thisN'
p2752
I340
sS'.thisIndex'
p2753
I1
sg15
(lp2754
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I1
sa(dp2755
g16
(lp2756
S'k'
asg18
S'Y'
sS'.thisRepN'
p2757
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2758
I11
sS'.thisN'
p2759
I341
sS'.thisIndex'
p2760
I9
sg15
(lp2761
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2762
S'space'
p2763
asg96
I9
sa(dp2764
g16
(lp2765
S'k'
asg18
S'Y'
sS'.thisRepN'
p2766
I22
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2767
I12
sS'.thisN'
p2768
I342
sS'.thisIndex'
p2769
I3
sg15
(lp2770
S'd'
asg30
g31
sg17
S'N'
sg14
I7
sg19
Nsg96
I3
sa(dp2771
g16
(lp2772
S'd'
asg18
S'N'
sS'.thisRepN'
p2773
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2774
I13
sS'.thisN'
p2775
I343
sS'.thisIndex'
p2776
I1
sg15
(lp2777
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I1
sa(dp2778
g16
(lp2779
S'd'
asg18
S'N'
sS'.thisRepN'
p2780
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2781
I14
sS'.thisN'
p2782
I344
sS'.thisIndex'
p2783
I0
sg15
(lp2784
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I0
sa(dp2785
g16
(lp2786
S'k'
asg18
S'Y'
sS'.thisRepN'
p2787
I23
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2788
I0
sS'.thisN'
p2789
I345
sS'.thisIndex'
p2790
I11
sg15
(lp2791
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I11
sa(dp2792
g16
(lp2793
S'k'
asg18
S'Y'
sS'.thisRepN'
p2794
I23
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2795
I1
sS'.thisN'
p2796
I346
sS'.thisIndex'
p2797
I8
sg15
(lp2798
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I8
sa(dp2799
g16
(lp2800
S'd'
asg18
S'Y'
sS'.thisRepN'
p2801
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2802
I2
sS'.thisN'
p2803
I347
sS'.thisIndex'
p2804
I14
sg15
(lp2805
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2806
S'space'
p2807
asg96
I14
sa(dp2808
g16
(lp2809
S'd'
asg18
S'N'
sS'.thisRepN'
p2810
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2811
I3
sS'.thisN'
p2812
I348
sS'.thisIndex'
p2813
I4
sg15
(lp2814
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I4
sa(dp2815
g16
(lp2816
S'd'
asg18
S'Y'
sg22
I36
sS'.thisN'
p2817
I349
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2818
I4
sS'.thisRepN'
p2819
I23
sg21
I45
sS'.thisIndex'
p2820
I3
sg23
I25
sg15
(lp2821
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2822
S'space'
p2823
asg96
I3
sa(dp2824
g16
(lp2825
S'k'
asg96
I13
sS'.thisRepN'
p2826
I23
sg30
g31
sg32
g33
sS'.thisTrialN'
p2827
I5
sS'.thisN'
p2828
I350
sS'.thisIndex'
p2829
I13
sg15
(lp2830
S'k'
asg17
S'Y'
sg14
I8
sa(dp2831
g16
(lp2832
S'd'
asg96
I14
sS'.thisRepN'
p2833
I23
sg30
g31
sg32
g33
sS'.thisTrialN'
p2834
I6
sS'.thisN'
p2835
I351
sS'.thisIndex'
p2836
I14
sg15
(lp2837
S'd'
asg17
S'Y'
sg14
I8
sa(dp2838
g16
(lp2839
S'k'
asg18
S'N'
sS'.thisRepN'
p2840
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2841
I7
sS'.thisN'
p2842
I352
sS'.thisIndex'
p2843
I11
sg15
(lp2844
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I11
sa(dp2845
g16
(lp2846
S'k'
asg18
S'Y'
sS'.thisRepN'
p2847
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2848
I8
sS'.thisN'
p2849
I353
sS'.thisIndex'
p2850
I9
sg15
(lp2851
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2852
S'space'
p2853
asg96
I9
sa(dp2854
g16
(lp2855
S'k'
asg18
S'Y'
sS'.thisRepN'
p2856
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2857
I9
sS'.thisN'
p2858
I354
sS'.thisIndex'
p2859
I0
sg15
(lp2860
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2861
S'space'
p2862
asg96
I0
sa(dp2863
g16
(lp2864
S'k'
asg18
S'Y'
sS'.thisRepN'
p2865
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2866
I10
sS'.thisN'
p2867
I355
sS'.thisIndex'
p2868
I4
sg15
(lp2869
S'd'
asg30
g31
sg17
S'N'
sg14
I8
sg19
(lp2870
S'space'
p2871
asg96
I4
sa(dp2872
g16
(lp2873
S'd'
asg18
S'N'
sS'.thisRepN'
p2874
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2875
I11
sS'.thisN'
p2876
I356
sS'.thisIndex'
p2877
I12
sg15
(lp2878
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I12
sa(dp2879
g16
(lp2880
S'd'
asg18
S'Y'
sS'.thisRepN'
p2881
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2882
I12
sS'.thisN'
p2883
I357
sS'.thisIndex'
p2884
I0
sg15
(lp2885
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2886
S'space'
p2887
asg96
I0
sa(dp2888
g16
(lp2889
S'd'
asg18
S'Y'
sS'.thisRepN'
p2890
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2891
I13
sS'.thisN'
p2892
I358
sS'.thisIndex'
p2893
I9
sg15
(lp2894
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
(lp2895
S'space'
p2896
asg96
I9
sa(dp2897
g16
(lp2898
S'k'
asg18
S'N'
sS'.thisRepN'
p2899
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2900
I14
sS'.thisN'
p2901
I359
sS'.thisIndex'
p2902
I3
sg15
(lp2903
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I3
sa(dp2904
g16
(lp2905
S'd'
asg18
S'N'
sS'.thisRepN'
p2906
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2907
I0
sS'.thisN'
p2908
I360
sS'.thisIndex'
p2909
I6
sg15
(lp2910
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I6
sa(dp2911
g16
(lp2912
S'k'
asg18
S'N'
sS'.thisRepN'
p2913
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2914
I1
sS'.thisN'
p2915
I361
sS'.thisIndex'
p2916
I12
sg15
(lp2917
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I12
sa(dp2918
g16
(lp2919
S'k'
asg18
S'N'
sS'.thisRepN'
p2920
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2921
I2
sS'.thisN'
p2922
I362
sS'.thisIndex'
p2923
I14
sg15
(lp2924
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I14
sa(dp2925
g16
(lp2926
S'k'
asg18
S'Y'
sS'.thisRepN'
p2927
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2928
I3
sS'.thisN'
p2929
I363
sS'.thisIndex'
p2930
I0
sg15
(lp2931
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2932
S'space'
p2933
asg96
I0
sa(dp2934
g16
(lp2935
S'k'
asg18
S'N'
sS'.thisRepN'
p2936
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2937
I4
sS'.thisN'
p2938
I364
sS'.thisIndex'
p2939
I5
sg15
(lp2940
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I5
sa(dp2941
g16
(lp2942
S'k'
asg18
S'Y'
sS'.thisRepN'
p2943
I24
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2944
I5
sS'.thisN'
p2945
I365
sS'.thisIndex'
p2946
I8
sg15
(lp2947
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I8
sa(dp2948
g16
(lp2949
S'd'
asg18
S'Y'
sS'.thisRepN'
p2950
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2951
I6
sS'.thisN'
p2952
I366
sS'.thisIndex'
p2953
I14
sg15
(lp2954
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
(lp2955
S'space'
p2956
asg96
I14
sa(dp2957
g16
(lp2958
S'd'
asg18
S'Y'
sS'.thisRepN'
p2959
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2960
I7
sS'.thisN'
p2961
I367
sS'.thisIndex'
p2962
I9
sg15
(lp2963
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2964
S'space'
p2965
asg96
I9
sa(dp2966
g16
(lp2967
S'd'
asg18
S'N'
sS'.thisRepN'
p2968
I24
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2969
I8
sS'.thisN'
p2970
I368
sS'.thisIndex'
p2971
I12
sg15
(lp2972
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
(lp2973
S'space'
p2974
asg96
I12
sa(dp2975
g16
(lp2976
S'd'
asg18
S'Y'
sS'.thisRepN'
p2977
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2978
I9
sS'.thisN'
p2979
I369
sS'.thisIndex'
p2980
I8
sg15
(lp2981
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2982
S'space'
p2983
asg96
I8
sa(dp2984
g16
(lp2985
S'k'
asg18
S'Y'
sS'.thisRepN'
p2986
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2987
I10
sS'.thisN'
p2988
I370
sS'.thisIndex'
p2989
I9
sg15
(lp2990
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2991
S'space'
p2992
asg96
I9
sa(dp2993
g16
(lp2994
S'k'
asg18
S'N'
sS'.thisRepN'
p2995
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2996
I11
sS'.thisN'
p2997
I371
sS'.thisIndex'
p2998
I7
sg15
(lp2999
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I7
sa(dp3000
g16
(lp3001
S'd'
asg18
S'N'
sS'.thisRepN'
p3002
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3003
I12
sS'.thisN'
p3004
I372
sS'.thisIndex'
p3005
I8
sg15
(lp3006
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I8
sa(dp3007
g16
(lp3008
S'k'
asg18
S'Y'
sS'.thisRepN'
p3009
I24
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3010
I13
sS'.thisN'
p3011
I373
sS'.thisIndex'
p3012
I11
sg15
(lp3013
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I11
sa(dp3014
g16
(lp3015
S'd'
asg18
S'N'
sS'.thisRepN'
p3016
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3017
I14
sS'.thisN'
p3018
I374
sS'.thisIndex'
p3019
I10
sg15
(lp3020
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I10
sa(dp3021
g16
(lp3022
S'd'
asg18
S'N'
sS'.thisRepN'
p3023
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3024
I0
sS'.thisN'
p3025
I375
sS'.thisIndex'
p3026
I2
sg15
(lp3027
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I2
sa(dp3028
g16
(lp3029
S'k'
asg18
S'Y'
sS'.thisRepN'
p3030
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3031
I1
sS'.thisN'
p3032
I376
sS'.thisIndex'
p3033
I7
sg15
(lp3034
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3035
S'space'
p3036
asg96
I7
sa(dp3037
g16
(lp3038
S'd'
asg18
S'N'
sS'.thisRepN'
p3039
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3040
I2
sS'.thisN'
p3041
I377
sS'.thisIndex'
p3042
I7
sg15
(lp3043
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I7
sa(dp3044
g16
(lp3045
S'd'
asg18
S'N'
sS'.thisRepN'
p3046
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3047
I3
sS'.thisN'
p3048
I378
sS'.thisIndex'
p3049
I3
sg15
(lp3050
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I3
sa(dp3051
g16
(lp3052
S'k'
asg18
S'Y'
sS'.thisRepN'
p3053
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3054
I4
sS'.thisN'
p3055
I379
sS'.thisIndex'
p3056
I4
sg15
(lp3057
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3058
S'space'
p3059
asg96
I4
sa(dp3060
g16
(lp3061
S'k'
asg18
S'N'
sS'.thisRepN'
p3062
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3063
I5
sS'.thisN'
p3064
I380
sS'.thisIndex'
p3065
I0
sg15
(lp3066
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I0
sa(dp3067
g16
(lp3068
S'k'
asg18
S'N'
sS'.thisRepN'
p3069
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3070
I6
sS'.thisN'
p3071
I381
sS'.thisIndex'
p3072
I9
sg15
(lp3073
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I9
sa(dp3074
g16
(lp3075
S'd'
asg18
S'Y'
sS'.thisRepN'
p3076
I25
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3077
I7
sS'.thisN'
p3078
I382
sS'.thisIndex'
p3079
I9
sg15
(lp3080
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I9
sa(dp3081
g16
(lp3082
S'k'
asg18
S'Y'
sS'.thisRepN'
p3083
I25
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3084
I8
sS'.thisN'
p3085
I383
sS'.thisIndex'
p3086
I11
sg15
(lp3087
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I11
sa(dp3088
g16
(lp3089
S'k'
asg18
S'N'
sS'.thisRepN'
p3090
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3091
I9
sS'.thisN'
p3092
I384
sS'.thisIndex'
p3093
I6
sg15
(lp3094
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I6
sa(dp3095
g16
(lp3096
S'd'
asg18
S'N'
sS'.thisRepN'
p3097
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3098
I10
sS'.thisN'
p3099
I385
sS'.thisIndex'
p3100
I11
sg15
(lp3101
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I11
sa(dp3102
g16
(lp3103
S'k'
asg18
S'N'
sS'.thisRepN'
p3104
I25
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3105
I11
sS'.thisN'
p3106
I386
sS'.thisIndex'
p3107
I6
sg15
(lp3108
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3109
S'space'
p3110
asg96
I6
sa(dp3111
g16
(lp3112
S'k'
asg18
S'N'
sS'.thisRepN'
p3113
I25
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3114
I12
sS'.thisN'
p3115
I387
sS'.thisIndex'
p3116
I9
sg15
(lp3117
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3118
S'space'
p3119
asg96
I9
sa(dp3120
g16
(lp3121
S'k'
asg18
S'Y'
sS'.thisRepN'
p3122
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3123
I13
sS'.thisN'
p3124
I388
sS'.thisIndex'
p3125
I13
sg15
(lp3126
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3127
S'space'
p3128
asg96
I13
sa(dp3129
g16
(lp3130
S'k'
asg18
S'N'
sS'.thisRepN'
p3131
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3132
I14
sS'.thisN'
p3133
I389
sS'.thisIndex'
p3134
I10
sg15
(lp3135
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I10
sa(dp3136
g16
(lp3137
S'd'
asg18
S'Y'
sS'.thisRepN'
p3138
I26
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3139
I0
sS'.thisN'
p3140
I390
sS'.thisIndex'
p3141
I0
sg15
(lp3142
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I0
sa(dp3143
g16
(lp3144
S'd'
asg18
S'Y'
sS'.thisRepN'
p3145
I26
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3146
I1
sS'.thisN'
p3147
I391
sS'.thisIndex'
p3148
I3
sg15
(lp3149
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
Nsg96
I3
sa(dp3150
g16
(lp3151
S'd'
asg18
S'N'
sS'.thisRepN'
p3152
I26
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3153
I2
sS'.thisN'
p3154
I392
sS'.thisIndex'
p3155
I6
sg15
(lp3156
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3157
S'space'
p3158
asg96
I6
sa(dp3159
g16
(lp3160
S'k'
asg18
S'N'
sS'.thisRepN'
p3161
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3162
I3
sS'.thisN'
p3163
I393
sS'.thisIndex'
p3164
I10
sg15
(lp3165
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I10
sa(dp3166
g16
(lp3167
S'd'
asg18
S'N'
sS'.thisRepN'
p3168
I26
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3169
I4
sS'.thisN'
p3170
I394
sS'.thisIndex'
p3171
I13
sg15
(lp3172
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3173
S'space'
p3174
asg96
I13
sa(dp3175
g16
(lp3176
S'd'
asg18
S'Y'
sS'.thisRepN'
p3177
I26
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3178
I5
sS'.thisN'
p3179
I395
sS'.thisIndex'
p3180
I3
sg15
(lp3181
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I3
sa(dp3182
g16
(lp3183
S'd'
asg18
S'Y'
sS'.thisRepN'
p3184
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3185
I6
sS'.thisN'
p3186
I396
sS'.thisIndex'
p3187
I9
sg15
(lp3188
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3189
S'space'
p3190
asg96
I9
sa(dp3191
g16
(lp3192
S'k'
asg18
S'N'
sS'.thisRepN'
p3193
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3194
I7
sS'.thisN'
p3195
I397
sS'.thisIndex'
p3196
I8
sg15
(lp3197
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I8
sa(dp3198
g16
(lp3199
S'k'
asg18
S'Y'
sS'.thisRepN'
p3200
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3201
I8
sS'.thisN'
p3202
I398
sS'.thisIndex'
p3203
I10
sg15
(lp3204
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3205
S'space'
p3206
asg96
I10
sa(dp3207
g16
(lp3208
S'd'
asg18
S'N'
sg22
I36
sS'.thisN'
p3209
I399
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3210
I9
sS'.thisRepN'
p3211
I26
sg21
I45
sS'.thisIndex'
p3212
I11
sg23
I22
sg15
(lp3213
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I11
sa(dp3214
g16
(lp3215
S'k'
asg96
I12
sS'.thisRepN'
p3216
I26
sg30
g31
sg32
g33
sS'.thisTrialN'
p3217
I10
sS'.thisN'
p3218
I400
sS'.thisIndex'
p3219
I12
sg15
(lp3220
S'k'
asg17
S'Y'
sg14
I9
sa(dp3221
g16
(lp3222
S'd'
asg96
I5
sS'.thisRepN'
p3223
I26
sg30
g31
sg32
g33
sS'.thisTrialN'
p3224
I11
sS'.thisN'
p3225
I401
sS'.thisIndex'
p3226
I5
sg15
(lp3227
S'd'
asg17
S'Y'
sg14
I9
sa(dp3228
g16
(lp3229
S'k'
asg18
S'N'
sS'.thisRepN'
p3230
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3231
I12
sS'.thisN'
p3232
I402
sS'.thisIndex'
p3233
I10
sg15
(lp3234
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I10
sa(dp3235
g16
(lp3236
S'd'
asg18
S'N'
sS'.thisRepN'
p3237
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3238
I13
sS'.thisN'
p3239
I403
sS'.thisIndex'
p3240
I8
sg15
(lp3241
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I8
sa(dp3242
g16
(lp3243
S'k'
asg18
S'N'
sS'.thisRepN'
p3244
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3245
I14
sS'.thisN'
p3246
I404
sS'.thisIndex'
p3247
I9
sg15
(lp3248
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I9
sa(dp3249
g16
(lp3250
S'd'
asg18
S'Y'
sS'.thisRepN'
p3251
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3252
I0
sS'.thisN'
p3253
I405
sS'.thisIndex'
p3254
I13
sg15
(lp3255
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3256
S'space'
p3257
asg96
I13
sa(dp3258
g16
(lp3259
S'd'
asg18
S'Y'
sS'.thisRepN'
p3260
I27
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3261
I1
sS'.thisN'
p3262
I406
sS'.thisIndex'
p3263
I1
sg15
(lp3264
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I1
sa(dp3265
g16
(lp3266
S'd'
asg18
S'N'
sS'.thisRepN'
p3267
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3268
I2
sS'.thisN'
p3269
I407
sS'.thisIndex'
p3270
I0
sg15
(lp3271
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I0
sa(dp3272
g16
(lp3273
S'd'
asg18
S'N'
sS'.thisRepN'
p3274
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3275
I3
sS'.thisN'
p3276
I408
sS'.thisIndex'
p3277
I0
sg15
(lp3278
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I0
sa(dp3279
g16
(lp3280
S'd'
asg18
S'Y'
sS'.thisRepN'
p3281
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3282
I4
sS'.thisN'
p3283
I409
sS'.thisIndex'
p3284
I3
sg15
(lp3285
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3286
S'space'
p3287
asg96
I3
sa(dp3288
g16
(lp3289
S'k'
asg18
S'N'
sS'.thisRepN'
p3290
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3291
I5
sS'.thisN'
p3292
I410
sS'.thisIndex'
p3293
I11
sg15
(lp3294
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I11
sa(dp3295
g16
(lp3296
S'd'
asg18
S'Y'
sS'.thisRepN'
p3297
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3298
I6
sS'.thisN'
p3299
I411
sS'.thisIndex'
p3300
I3
sg15
(lp3301
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3302
S'space'
p3303
asg96
I3
sa(dp3304
g16
(lp3305
S'k'
asg18
S'Y'
sS'.thisRepN'
p3306
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3307
I7
sS'.thisN'
p3308
I412
sS'.thisIndex'
p3309
I7
sg15
(lp3310
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3311
S'space'
p3312
asg96
I7
sa(dp3313
g16
(lp3314
S'k'
asg18
S'N'
sS'.thisRepN'
p3315
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3316
I8
sS'.thisN'
p3317
I413
sS'.thisIndex'
p3318
I9
sg15
(lp3319
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I9
sa(dp3320
g16
(lp3321
S'k'
asg18
S'Y'
sS'.thisRepN'
p3322
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3323
I9
sS'.thisN'
p3324
I414
sS'.thisIndex'
p3325
I12
sg15
(lp3326
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3327
S'space'
p3328
asg96
I12
sa(dp3329
g16
(lp3330
S'd'
asg18
S'Y'
sS'.thisRepN'
p3331
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3332
I10
sS'.thisN'
p3333
I415
sS'.thisIndex'
p3334
I2
sg15
(lp3335
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3336
S'space'
p3337
asg96
I2
sa(dp3338
g16
(lp3339
S'k'
asg18
S'Y'
sS'.thisRepN'
p3340
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3341
I11
sS'.thisN'
p3342
I416
sS'.thisIndex'
p3343
I6
sg15
(lp3344
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3345
S'space'
p3346
asg96
I6
sa(dp3347
g16
(lp3348
S'k'
asg18
S'Y'
sS'.thisRepN'
p3349
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3350
I12
sS'.thisN'
p3351
I417
sS'.thisIndex'
p3352
I1
sg15
(lp3353
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3354
S'space'
p3355
asg96
I1
sa(dp3356
g16
(lp3357
S'k'
asg18
S'Y'
sS'.thisRepN'
p3358
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3359
I13
sS'.thisN'
p3360
I418
sS'.thisIndex'
p3361
I1
sg15
(lp3362
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3363
S'space'
p3364
asg96
I1
sa(dp3365
g16
(lp3366
S'd'
asg18
S'N'
sS'.thisRepN'
p3367
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3368
I14
sS'.thisN'
p3369
I419
sS'.thisIndex'
p3370
I8
sg15
(lp3371
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I8
sa(dp3372
g16
(lp3373
S'k'
asg18
S'N'
sS'.thisRepN'
p3374
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3375
I0
sS'.thisN'
p3376
I420
sS'.thisIndex'
p3377
I6
sg15
(lp3378
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I6
sa(dp3379
g16
(lp3380
S'k'
asg18
S'N'
sS'.thisRepN'
p3381
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3382
I1
sS'.thisN'
p3383
I421
sS'.thisIndex'
p3384
I4
sg15
(lp3385
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I4
sa(dp3386
g16
(lp3387
S'd'
asg18
S'N'
sS'.thisRepN'
p3388
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3389
I2
sS'.thisN'
p3390
I422
sS'.thisIndex'
p3391
I1
sg15
(lp3392
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I1
sa(dp3393
g16
(lp3394
S'd'
asg18
S'Y'
sS'.thisRepN'
p3395
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3396
I3
sS'.thisN'
p3397
I423
sS'.thisIndex'
p3398
I5
sg15
(lp3399
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3400
S'space'
p3401
asg96
I5
sa(dp3402
g16
(lp3403
S'd'
asg18
S'N'
sS'.thisRepN'
p3404
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3405
I4
sS'.thisN'
p3406
I424
sS'.thisIndex'
p3407
I11
sg15
(lp3408
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I11
sa(dp3409
g16
(lp3410
S'k'
asg18
S'N'
sS'.thisRepN'
p3411
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3412
I5
sS'.thisN'
p3413
I425
sS'.thisIndex'
p3414
I10
sg15
(lp3415
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I10
sa(dp3416
g16
(lp3417
S'd'
asg18
S'N'
sS'.thisRepN'
p3418
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3419
I6
sS'.thisN'
p3420
I426
sS'.thisIndex'
p3421
I8
sg15
(lp3422
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I8
sa(dp3423
g16
(lp3424
S'k'
asg18
S'N'
sS'.thisRepN'
p3425
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3426
I7
sS'.thisN'
p3427
I427
sS'.thisIndex'
p3428
I4
sg15
(lp3429
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I4
sa(dp3430
g16
(lp3431
S'k'
asg18
S'Y'
sS'.thisRepN'
p3432
I28
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3433
I8
sS'.thisN'
p3434
I428
sS'.thisIndex'
p3435
I3
sg15
(lp3436
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I3
sa(dp3437
g16
(lp3438
S'k'
asg18
S'N'
sS'.thisRepN'
p3439
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3440
I9
sS'.thisN'
p3441
I429
sS'.thisIndex'
p3442
I1
sg15
(lp3443
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I1
sa(dp3444
g16
(lp3445
S'k'
asg18
S'N'
sS'.thisRepN'
p3446
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3447
I10
sS'.thisN'
p3448
I430
sS'.thisIndex'
p3449
I5
sg15
(lp3450
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I5
sa(dp3451
g16
(lp3452
S'k'
asg18
S'N'
sS'.thisRepN'
p3453
I28
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3454
I11
sS'.thisN'
p3455
I431
sS'.thisIndex'
p3456
I13
sg15
(lp3457
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3458
S'space'
p3459
asg96
I13
sa(dp3460
g16
(lp3461
S'k'
asg18
S'N'
sS'.thisRepN'
p3462
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3463
I12
sS'.thisN'
p3464
I432
sS'.thisIndex'
p3465
I1
sg15
(lp3466
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I1
sa(dp3467
g16
(lp3468
S'd'
asg18
S'N'
sS'.thisRepN'
p3469
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3470
I13
sS'.thisN'
p3471
I433
sS'.thisIndex'
p3472
I10
sg15
(lp3473
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I10
sa(dp3474
g16
(lp3475
S'k'
asg18
S'N'
sS'.thisRepN'
p3476
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3477
I14
sS'.thisN'
p3478
I434
sS'.thisIndex'
p3479
I14
sg15
(lp3480
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I14
sa(dp3481
g16
(lp3482
S'k'
asg18
S'Y'
sS'.thisRepN'
p3483
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3484
I0
sS'.thisN'
p3485
I435
sS'.thisIndex'
p3486
I2
sg15
(lp3487
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3488
S'space'
p3489
asg96
I2
sa(dp3490
g16
(lp3491
S'k'
asg18
S'Y'
sS'.thisRepN'
p3492
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3493
I1
sS'.thisN'
p3494
I436
sS'.thisIndex'
p3495
I13
sg15
(lp3496
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3497
S'space'
p3498
asg96
I13
sa(dp3499
g16
(lp3500
S'k'
asg18
S'Y'
sS'.thisRepN'
p3501
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3502
I2
sS'.thisN'
p3503
I437
sS'.thisIndex'
p3504
I4
sg15
(lp3505
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3506
S'space'
p3507
asg96
I4
sa(dp3508
g16
(lp3509
S'd'
asg18
S'N'
sS'.thisRepN'
p3510
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3511
I3
sS'.thisN'
p3512
I438
sS'.thisIndex'
p3513
I14
sg15
(lp3514
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I14
sa(dp3515
g16
(lp3516
S'd'
asg18
S'N'
sS'.thisRepN'
p3517
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3518
I4
sS'.thisN'
p3519
I439
sS'.thisIndex'
p3520
I14
sg15
(lp3521
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I14
sa(dp3522
g16
(lp3523
S'k'
asg18
S'N'
sS'.thisRepN'
p3524
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3525
I5
sS'.thisN'
p3526
I440
sS'.thisIndex'
p3527
I13
sg15
(lp3528
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I13
sa(dp3529
g16
(lp3530
S'd'
asg18
S'N'
sS'.thisRepN'
p3531
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3532
I6
sS'.thisN'
p3533
I441
sS'.thisIndex'
p3534
I4
sg15
(lp3535
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I4
sa(dp3536
g16
(lp3537
S'k'
asg18
S'Y'
sS'.thisRepN'
p3538
I29
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3539
I7
sS'.thisN'
p3540
I442
sS'.thisIndex'
p3541
I0
sg15
(lp3542
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I0
sa(dp3543
g16
(lp3544
S'k'
asg18
S'N'
sS'.thisRepN'
p3545
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3546
I8
sS'.thisN'
p3547
I443
sS'.thisIndex'
p3548
I2
sg15
(lp3549
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I2
sa(dp3550
g16
(lp3551
S'd'
asg18
S'Y'
sS'.thisRepN'
p3552
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3553
I9
sS'.thisN'
p3554
I444
sS'.thisIndex'
p3555
I13
sg15
(lp3556
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3557
S'space'
p3558
asg96
I13
sa(dp3559
g16
(lp3560
S'd'
asg18
S'Y'
sS'.thisRepN'
p3561
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3562
I10
sS'.thisN'
p3563
I445
sS'.thisIndex'
p3564
I12
sg15
(lp3565
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3566
S'space'
p3567
asg96
I12
sa(dp3568
g16
(lp3569
S'k'
asg18
S'N'
sS'.thisRepN'
p3570
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3571
I11
sS'.thisN'
p3572
I446
sS'.thisIndex'
p3573
I8
sg15
(lp3574
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I8
sa(dp3575
g16
(lp3576
S'k'
asg18
S'Y'
sS'.thisRepN'
p3577
I29
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3578
I12
sS'.thisN'
p3579
I447
sS'.thisIndex'
p3580
I6
sg15
(lp3581
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I6
sa(dp3582
g16
(lp3583
S'k'
asg18
S'Y'
sS'.thisRepN'
p3584
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3585
I13
sS'.thisN'
p3586
I448
sS'.thisIndex'
p3587
I5
sg15
(lp3588
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3589
S'space'
p3590
asg96
I5
sa(dp3591
g16
(lp3592
S'd'
asg18
S'N'
sg22
I43
sS'.thisN'
p3593
I449
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3594
I14
sS'.thisRepN'
p3595
I29
sg21
I50
sS'.thisIndex'
p3596
I11
sg23
I20
sg15
(lp3597
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I11
sa(dp3598
g16
(lp3599
S'd'
asg96
I1
sS'.thisRepN'
p3600
I30
sg30
g31
sg32
g33
sS'.thisTrialN'
p3601
I0
sS'.thisN'
p3602
I450
sS'.thisIndex'
p3603
I1
sg15
(lp3604
S'd'
asg17
S'Y'
sg14
I10
sa(dp3605
g16
(lp3606
S'k'
asg96
I8
sS'.thisRepN'
p3607
I30
sg30
g31
sg32
g33
sS'.thisTrialN'
p3608
I1
sS'.thisN'
p3609
I451
sS'.thisIndex'
p3610
I8
sg15
(lp3611
S'k'
asg17
S'Y'
sg14
I10
sa(dp3612
g16
(lp3613
S'k'
asg18
S'N'
sS'.thisRepN'
p3614
I30
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3615
I2
sS'.thisN'
p3616
I452
sS'.thisIndex'
p3617
I8
sg15
(lp3618
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3619
S'space'
p3620
asg96
I8
sa(dp3621
g16
(lp3622
S'k'
asg18
S'Y'
sS'.thisRepN'
p3623
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3624
I3
sS'.thisN'
p3625
I453
sS'.thisIndex'
p3626
I13
sg15
(lp3627
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3628
S'space'
p3629
asg96
I13
sa(dp3630
g16
(lp3631
S'k'
asg18
S'Y'
sS'.thisRepN'
p3632
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3633
I4
sS'.thisN'
p3634
I454
sS'.thisIndex'
p3635
I0
sg15
(lp3636
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3637
S'space'
p3638
asg96
I0
sa(dp3639
g16
(lp3640
S'd'
asg18
S'N'
sS'.thisRepN'
p3641
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3642
I5
sS'.thisN'
p3643
I455
sS'.thisIndex'
p3644
I7
sg15
(lp3645
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I7
sa(dp3646
g16
(lp3647
S'd'
asg18
S'Y'
sS'.thisRepN'
p3648
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3649
I6
sS'.thisN'
p3650
I456
sS'.thisIndex'
p3651
I1
sg15
(lp3652
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3653
S'space'
p3654
asg96
I1
sa(dp3655
g16
(lp3656
S'd'
asg18
S'Y'
sS'.thisRepN'
p3657
I30
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3658
I7
sS'.thisN'
p3659
I457
sS'.thisIndex'
p3660
I1
sg15
(lp3661
S'k'
asg30
g31
sg17
S'N'
sg14
I10
sg19
Nsg96
I1
sa(dp3662
g16
(lp3663
S'd'
asg18
S'Y'
sS'.thisRepN'
p3664
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3665
I8
sS'.thisN'
p3666
I458
sS'.thisIndex'
p3667
I3
sg15
(lp3668
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3669
S'space'
p3670
asg96
I3
sa(dp3671
g16
(lp3672
S'd'
asg18
S'N'
sS'.thisRepN'
p3673
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3674
I9
sS'.thisN'
p3675
I459
sS'.thisIndex'
p3676
I14
sg15
(lp3677
S'k'
asg30
g31
sg17
S'N'
sg14
I10
sg19
Nsg96
I14
sa(dp3678
g16
(lp3679
S'k'
asg18
S'Y'
sS'.thisRepN'
p3680
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3681
I10
sS'.thisN'
p3682
I460
sS'.thisIndex'
p3683
I8
sg15
(lp3684
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3685
S'space'
p3686
asg96
I8
sa(dp3687
g16
(lp3688
S'd'
asg18
S'Y'
sS'.thisRepN'
p3689
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3690
I11
sS'.thisN'
p3691
I461
sS'.thisIndex'
p3692
I9
sg15
(lp3693
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3694
S'space'
p3695
asg96
I9
sa(dp3696
g16
(lp3697
S'd'
asg18
S'Y'
sS'.thisRepN'
p3698
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3699
I12
sS'.thisN'
p3700
I462
sS'.thisIndex'
p3701
I1
sg15
(lp3702
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3703
S'space'
p3704
asg96
I1
sa(dp3705
g16
(lp3706
S'd'
asg18
S'N'
sS'.thisRepN'
p3707
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3708
I13
sS'.thisN'
p3709
I463
sS'.thisIndex'
p3710
I11
sg15
(lp3711
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I11
sa(dp3712
g16
(lp3713
S'd'
asg18
S'N'
sS'.thisRepN'
p3714
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3715
I14
sS'.thisN'
p3716
I464
sS'.thisIndex'
p3717
I4
sg15
(lp3718
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I4
sa(dp3719
g16
(lp3720
S'k'
asg18
S'Y'
sS'.thisRepN'
p3721
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3722
I0
sS'.thisN'
p3723
I465
sS'.thisIndex'
p3724
I5
sg15
(lp3725
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3726
S'space'
p3727
asg96
I5
sa(dp3728
g16
(lp3729
S'k'
asg18
S'N'
sS'.thisRepN'
p3730
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3731
I1
sS'.thisN'
p3732
I466
sS'.thisIndex'
p3733
I6
sg15
(lp3734
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I6
sa(dp3735
g16
(lp3736
S'd'
asg18
S'Y'
sS'.thisRepN'
p3737
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3738
I2
sS'.thisN'
p3739
I467
sS'.thisIndex'
p3740
I5
sg15
(lp3741
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3742
S'space'
p3743
asg96
I5
sa(dp3744
g16
(lp3745
S'k'
asg18
S'N'
sS'.thisRepN'
p3746
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3747
I3
sS'.thisN'
p3748
I468
sS'.thisIndex'
p3749
I2
sg15
(lp3750
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I2
sa(dp3751
g16
(lp3752
S'd'
asg18
S'N'
sS'.thisRepN'
p3753
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3754
I4
sS'.thisN'
p3755
I469
sS'.thisIndex'
p3756
I5
sg15
(lp3757
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I5
sa(dp3758
g16
(lp3759
S'k'
asg18
S'N'
sS'.thisRepN'
p3760
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3761
I5
sS'.thisN'
p3762
I470
sS'.thisIndex'
p3763
I2
sg15
(lp3764
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I2
sa(dp3765
g16
(lp3766
S'd'
asg18
S'N'
sS'.thisRepN'
p3767
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3768
I6
sS'.thisN'
p3769
I471
sS'.thisIndex'
p3770
I10
sg15
(lp3771
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I10
sa(dp3772
g16
(lp3773
S'k'
asg18
S'Y'
sS'.thisRepN'
p3774
I31
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3775
I7
sS'.thisN'
p3776
I472
sS'.thisIndex'
p3777
I2
sg15
(lp3778
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I2
sa(dp3779
g16
(lp3780
S'k'
asg18
S'Y'
sS'.thisRepN'
p3781
I31
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3782
I8
sS'.thisN'
p3783
I473
sS'.thisIndex'
p3784
I12
sg15
(lp3785
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I12
sa(dp3786
g16
(lp3787
S'd'
asg18
S'Y'
sS'.thisRepN'
p3788
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3789
I9
sS'.thisN'
p3790
I474
sS'.thisIndex'
p3791
I3
sg15
(lp3792
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3793
S'space'
p3794
asg96
I3
sa(dp3795
g16
(lp3796
S'k'
asg18
S'Y'
sS'.thisRepN'
p3797
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3798
I10
sS'.thisN'
p3799
I475
sS'.thisIndex'
p3800
I6
sg15
(lp3801
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3802
S'space'
p3803
asg96
I6
sa(dp3804
g16
(lp3805
S'd'
asg18
S'N'
sS'.thisRepN'
p3806
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3807
I11
sS'.thisN'
p3808
I476
sS'.thisIndex'
p3809
I2
sg15
(lp3810
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I2
sa(dp3811
g16
(lp3812
S'k'
asg18
S'N'
sS'.thisRepN'
p3813
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3814
I12
sS'.thisN'
p3815
I477
sS'.thisIndex'
p3816
I2
sg15
(lp3817
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I2
sa(dp3818
g16
(lp3819
S'd'
asg18
S'N'
sS'.thisRepN'
p3820
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3821
I13
sS'.thisN'
p3822
I478
sS'.thisIndex'
p3823
I13
sg15
(lp3824
S'k'
asg30
g31
sg17
S'N'
sg14
I10
sg19
Nsg96
I13
sa(dp3825
g16
(lp3826
S'k'
asg18
S'N'
sS'.thisRepN'
p3827
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3828
I14
sS'.thisN'
p3829
I479
sS'.thisIndex'
p3830
I4
sg15
(lp3831
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I4
sa(dp3832
g16
(lp3833
S'k'
asg18
S'N'
sS'.thisRepN'
p3834
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3835
I0
sS'.thisN'
p3836
I480
sS'.thisIndex'
p3837
I6
sg15
(lp3838
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I6
sa(dp3839
g16
(lp3840
S'k'
asg18
S'N'
sS'.thisRepN'
p3841
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3842
I1
sS'.thisN'
p3843
I481
sS'.thisIndex'
p3844
I10
sg15
(lp3845
S'd'
asg30
g31
sg17
S'N'
sg14
I10
sg19
Nsg96
I10
sa(dp3846
g16
(lp3847
S'k'
asg18
S'N'
sS'.thisRepN'
p3848
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3849
I2
sS'.thisN'
p3850
I482
sS'.thisIndex'
p3851
I1
sg15
(lp3852
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I1
sa(dp3853
g16
(lp3854
S'd'
asg18
S'Y'
sS'.thisRepN'
p3855
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3856
I3
sS'.thisN'
p3857
I483
sS'.thisIndex'
p3858
I13
sg15
(lp3859
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3860
S'space'
p3861
asg96
I13
sa(dp3862
g16
(lp3863
S'k'
asg18
S'N'
sS'.thisRepN'
p3864
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3865
I4
sS'.thisN'
p3866
I484
sS'.thisIndex'
p3867
I7
sg15
(lp3868
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I7
sa(dp3869
g16
(lp3870
S'k'
asg18
S'Y'
sS'.thisRepN'
p3871
I32
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3872
I5
sS'.thisN'
p3873
I485
sS'.thisIndex'
p3874
I3
sg15
(lp3875
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I3
sa(dp3876
g16
(lp3877
S'k'
asg18
S'Y'
sS'.thisRepN'
p3878
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3879
I6
sS'.thisN'
p3880
I486
sS'.thisIndex'
p3881
I10
sg15
(lp3882
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3883
S'space'
p3884
asg96
I10
sa(dp3885
g16
(lp3886
S'd'
asg18
S'N'
sS'.thisRepN'
p3887
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3888
I7
sS'.thisN'
p3889
I487
sS'.thisIndex'
p3890
I11
sg15
(lp3891
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I11
sa(dp3892
g16
(lp3893
S'k'
asg18
S'Y'
sS'.thisRepN'
p3894
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3895
I8
sS'.thisN'
p3896
I488
sS'.thisIndex'
p3897
I1
sg15
(lp3898
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3899
S'space'
p3900
asg96
I1
sa(dp3901
g16
(lp3902
S'd'
asg18
S'Y'
sS'.thisRepN'
p3903
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3904
I9
sS'.thisN'
p3905
I489
sS'.thisIndex'
p3906
I2
sg15
(lp3907
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3908
S'space'
p3909
asg96
I2
sa(dp3910
g16
(lp3911
S'd'
asg18
S'Y'
sS'.thisRepN'
p3912
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3913
I10
sS'.thisN'
p3914
I490
sS'.thisIndex'
p3915
I14
sg15
(lp3916
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3917
S'space'
p3918
asg96
I14
sa(dp3919
g16
(lp3920
S'k'
asg18
S'N'
sS'.thisRepN'
p3921
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3922
I11
sS'.thisN'
p3923
I491
sS'.thisIndex'
p3924
I8
sg15
(lp3925
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I8
sa(dp3926
g16
(lp3927
S'd'
asg18
S'Y'
sS'.thisRepN'
p3928
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3929
I12
sS'.thisN'
p3930
I492
sS'.thisIndex'
p3931
I6
sg15
(lp3932
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3933
S'space'
p3934
asg96
I6
sa(dp3935
g16
(lp3936
S'd'
asg18
S'N'
sS'.thisRepN'
p3937
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3938
I13
sS'.thisN'
p3939
I493
sS'.thisIndex'
p3940
I9
sg15
(lp3941
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I9
sa(dp3942
g16
(lp3943
S'k'
asg18
S'N'
sS'.thisRepN'
p3944
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3945
I14
sS'.thisN'
p3946
I494
sS'.thisIndex'
p3947
I0
sg15
(lp3948
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I0
sa(dp3949
g16
(lp3950
S'k'
asg18
S'N'
sS'.thisRepN'
p3951
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3952
I0
sS'.thisN'
p3953
I495
sS'.thisIndex'
p3954
I9
sg15
(lp3955
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I9
sa(dp3956
g16
(lp3957
S'k'
asg18
S'N'
sS'.thisRepN'
p3958
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3959
I1
sS'.thisN'
p3960
I496
sS'.thisIndex'
p3961
I4
sg15
(lp3962
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I4
sa(dp3963
g16
(lp3964
S'd'
asg18
S'N'
sS'.thisRepN'
p3965
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3966
I2
sS'.thisN'
p3967
I497
sS'.thisIndex'
p3968
I11
sg15
(lp3969
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I11
sa(dp3970
g16
(lp3971
S'd'
asg18
S'N'
sS'.thisRepN'
p3972
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3973
I3
sS'.thisN'
p3974
I498
sS'.thisIndex'
p3975
I0
sg15
(lp3976
S'k'
asg30
g31
sg17
S'N'
sg14
I10
sg19
Nsg96
I0
sa(dp3977
g16
(lp3978
S'k'
asg18
S'Y'
sg22
I42
sS'.thisN'
p3979
I499
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3980
I4
sS'.thisRepN'
p3981
I33
sg21
I45
sS'.thisIndex'
p3982
I11
sg23
I22
sg15
(lp3983
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I11
sa(dp3984
g16
(lp3985
S'k'
asS'.thisIndex'
p3986
I9
sS'.thisRepN'
p3987
I33
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p3988
I5
sS'.thisN'
p3989
I500
sg25
S'Y'
sg24
S'Y'
sg15
(lp3990
S'd'
asg17
S'Y'
sg14
I11
sg96
I9
sa(dp3991
g16
(lp3992
S'k'
asS'.thisIndex'
p3993
I9
sS'.thisRepN'
p3994
I33
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p3995
I6
sS'.thisN'
p3996
I501
sg25
S'Y'
sg15
(lp3997
S'd'
asg17
S'Y'
sg14
I11
sg96
I9
sa(dp3998
g16
(lp3999
S'd'
asg18
S'Y'
sS'.thisRepN'
p4000
I33
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4001
I7
sS'.thisN'
p4002
I502
sg25
S'Y'
sg15
(lp4003
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I10
sS'.thisIndex'
p4004
I10
sa(dp4005
g16
(lp4006
S'd'
asg18
S'N'
sS'.thisRepN'
p4007
I33
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4008
I8
sS'.thisN'
p4009
I503
sg25
S'Y'
sg15
(lp4010
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I0
sS'.thisIndex'
p4011
I0
sa(dp4012
g16
(lp4013
S'd'
asg18
S'N'
sS'.thisRepN'
p4014
I33
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4015
I9
sS'.thisN'
p4016
I504
sg25
S'Y'
sg15
(lp4017
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I11
sS'.thisIndex'
p4018
I11
sa(dp4019
g16
(lp4020
S'd'
asg18
S'N'
sS'.thisRepN'
p4021
I33
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4022
I10
sS'.thisN'
p4023
I505
sg25
S'Y'
sg15
(lp4024
S'd'
asg30
g31
sg17
S'N'
sg14
I11
sg19
(lp4025
S'space'
p4026
asg96
I4
sS'.thisIndex'
p4027
I4
sa(dp4028
g16
(lp4029
S'd'
asg18
S'Y'
sS'.thisRepN'
p4030
I33
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4031
I11
sS'.thisN'
p4032
I506
sg25
S'Y'
sg15
(lp4033
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4034
S'space'
p4035
asg96
I2
sS'.thisIndex'
p4036
I2
sa(dp4037
g16
(lp4038
S'd'
asg18
S'Y'
sS'.thisRepN'
p4039
I33
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4040
I12
sS'.thisN'
p4041
I507
sg25
S'Y'
sg15
(lp4042
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4043
S'space'
p4044
asg96
I1
sS'.thisIndex'
p4045
I1
sa(dp4046
g16
(lp4047
S'd'
asg18
S'Y'
sS'.thisRepN'
p4048
I33
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4049
I13
sS'.thisN'
p4050
I508
sg25
S'Y'
sg15
(lp4051
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4052
S'space'
p4053
asg96
I11
sS'.thisIndex'
p4054
I11
sa(dp4055
g16
(lp4056
S'k'
asg18
S'N'
sS'.thisRepN'
p4057
I33
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4058
I14
sS'.thisN'
p4059
I509
sg25
S'Y'
sg15
(lp4060
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I1
sS'.thisIndex'
p4061
I1
sa(dp4062
g16
(lp4063
S'd'
asg18
S'Y'
sS'.thisRepN'
p4064
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4065
I0
sS'.thisN'
p4066
I510
sg25
S'Y'
sg15
(lp4067
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4068
S'space'
p4069
asg96
I3
sS'.thisIndex'
p4070
I3
sa(dp4071
g16
(lp4072
S'k'
asg18
S'Y'
sS'.thisRepN'
p4073
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4074
I1
sS'.thisN'
p4075
I511
sg25
S'Y'
sg15
(lp4076
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4077
S'space'
p4078
asg96
I0
sS'.thisIndex'
p4079
I0
sa(dp4080
g16
(lp4081
S'k'
asg18
S'Y'
sS'.thisRepN'
p4082
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4083
I2
sS'.thisN'
p4084
I512
sg25
S'Y'
sg15
(lp4085
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4086
S'space'
p4087
asg96
I4
sS'.thisIndex'
p4088
I4
sa(dp4089
g16
(lp4090
S'k'
asg18
S'Y'
sS'.thisRepN'
p4091
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4092
I3
sS'.thisN'
p4093
I513
sg25
S'Y'
sg15
(lp4094
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4095
S'space'
p4096
asg96
I7
sS'.thisIndex'
p4097
I7
sa(dp4098
g16
(lp4099
S'k'
asg18
S'Y'
sS'.thisRepN'
p4100
I34
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4101
I4
sS'.thisN'
p4102
I514
sg25
S'Y'
sg15
(lp4103
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I3
sS'.thisIndex'
p4104
I3
sa(dp4105
g16
(lp4106
S'k'
asg18
S'N'
sS'.thisRepN'
p4107
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4108
I5
sS'.thisN'
p4109
I515
sg25
S'Y'
sg15
(lp4110
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I10
sS'.thisIndex'
p4111
I10
sa(dp4112
g16
(lp4113
S'k'
asg18
S'Y'
sS'.thisRepN'
p4114
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4115
I6
sS'.thisN'
p4116
I516
sg25
S'Y'
sg15
(lp4117
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4118
S'space'
p4119
asg96
I2
sS'.thisIndex'
p4120
I2
sa(dp4121
g16
(lp4122
S'd'
asg18
S'Y'
sS'.thisRepN'
p4123
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4124
I7
sS'.thisN'
p4125
I517
sg25
S'Y'
sg15
(lp4126
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4127
S'space'
p4128
asg96
I12
sS'.thisIndex'
p4129
I12
sa(dp4130
g16
(lp4131
S'd'
asg18
S'Y'
sS'.thisRepN'
p4132
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4133
I8
sS'.thisN'
p4134
I518
sg25
S'Y'
sg15
(lp4135
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4136
S'space'
p4137
asg96
I14
sS'.thisIndex'
p4138
I14
sa(dp4139
g16
(lp4140
S'k'
asg18
S'Y'
sS'.thisRepN'
p4141
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4142
I9
sS'.thisN'
p4143
I519
sg25
S'Y'
sg15
(lp4144
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4145
S'space'
p4146
asg96
I10
sS'.thisIndex'
p4147
I10
sa(dp4148
g16
(lp4149
S'k'
asg18
S'N'
sS'.thisRepN'
p4150
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4151
I10
sS'.thisN'
p4152
I520
sg25
S'Y'
sg15
(lp4153
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I4
sS'.thisIndex'
p4154
I4
sa(dp4155
g16
(lp4156
S'd'
asg18
S'N'
sS'.thisRepN'
p4157
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4158
I11
sS'.thisN'
p4159
I521
sg25
S'Y'
sg15
(lp4160
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I12
sS'.thisIndex'
p4161
I12
sa(dp4162
g18
S'N'
sS'.thisRepN'
p4163
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4164
I12
sS'.thisN'
p4165
I522
sg25
S'Y'
sg15
Nsg30
g31
sg17
S'Timed out'
p4166
sg14
I11
sg19
Nsg96
I7
sS'.thisIndex'
p4167
I7
sa(dp4168
g16
(lp4169
S'd'
asg18
S'Y'
sS'.thisRepN'
p4170
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4171
I13
sS'.thisN'
p4172
I523
sg25
S'Y'
sg15
(lp4173
S'd'
asg30
g31
sg17
S'N'
sg14
I11
sg19
(lp4174
S'space'
p4175
asg96
I5
sS'.thisIndex'
p4176
I5
sa(dp4177
g16
(lp4178
S'k'
asg18
S'Y'
sS'.thisRepN'
p4179
I34
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4180
I14
sS'.thisN'
p4181
I524
sg25
S'Y'
sg15
(lp4182
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4183
S'space'
p4184
asg96
I10
sS'.thisIndex'
p4185
I10
sa(dp4186
g16
(lp4187
S'd'
asg18
S'Y'
sS'.thisRepN'
p4188
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4189
I0
sS'.thisN'
p4190
I525
sg25
S'Y'
sg15
(lp4191
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4192
S'space'
p4193
asg96
I13
sS'.thisIndex'
p4194
I13
sa(dp4195
g16
(lp4196
S'd'
asg18
S'Y'
sS'.thisRepN'
p4197
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4198
I1
sS'.thisN'
p4199
I526
sg25
S'Y'
sg15
(lp4200
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4201
S'space'
p4202
asg96
I12
sS'.thisIndex'
p4203
I12
sa(dp4204
g16
(lp4205
S'k'
asg18
S'N'
sS'.thisRepN'
p4206
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4207
I2
sS'.thisN'
p4208
I527
sg25
S'Y'
sg15
(lp4209
S'k'
asg30
g31
sg17
S'N'
sg14
I11
sg19
Nsg96
I8
sS'.thisIndex'
p4210
I8
sa(dp4211
g16
(lp4212
S'd'
asg18
S'N'
sS'.thisRepN'
p4213
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4214
I3
sS'.thisN'
p4215
I528
sg25
S'Y'
sg15
(lp4216
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I7
sS'.thisIndex'
p4217
I7
sa(dp4218
g16
(lp4219
S'k'
asg18
S'Y'
sS'.thisRepN'
p4220
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4221
I4
sS'.thisN'
p4222
I529
sg25
S'Y'
sg15
(lp4223
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4224
S'space'
p4225
asg96
I10
sS'.thisIndex'
p4226
I10
sa(dp4227
g16
(lp4228
S'd'
asg18
S'Y'
sS'.thisRepN'
p4229
I35
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4230
I5
sS'.thisN'
p4231
I530
sg25
S'Y'
sg15
(lp4232
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I3
sS'.thisIndex'
p4233
I3
sa(dp4234
g16
(lp4235
S'd'
asg18
S'N'
sS'.thisRepN'
p4236
I35
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4237
I6
sS'.thisN'
p4238
I531
sg25
S'Y'
sg15
(lp4239
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4240
S'space'
p4241
asg96
I11
sS'.thisIndex'
p4242
I11
sa(dp4243
g16
(lp4244
S'd'
asg18
S'Y'
sS'.thisRepN'
p4245
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4246
I7
sS'.thisN'
p4247
I532
sg25
S'Y'
sg15
(lp4248
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4249
S'space'
p4250
asg96
I3
sS'.thisIndex'
p4251
I3
sa(dp4252
g16
(lp4253
S'k'
asg18
S'N'
sS'.thisRepN'
p4254
I35
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4255
I8
sS'.thisN'
p4256
I533
sg25
S'Y'
sg15
(lp4257
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4258
S'space'
p4259
asg96
I4
sS'.thisIndex'
p4260
I4
sa(dp4261
g16
(lp4262
S'd'
asg18
S'Y'
sS'.thisRepN'
p4263
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4264
I9
sS'.thisN'
p4265
I534
sg25
S'Y'
sg15
(lp4266
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4267
S'space'
p4268
asg96
I3
sS'.thisIndex'
p4269
I3
sa(dp4270
g16
(lp4271
S'k'
asg18
S'Y'
sS'.thisRepN'
p4272
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4273
I10
sS'.thisN'
p4274
I535
sg25
S'Y'
sg15
(lp4275
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4276
S'space'
p4277
asg96
I3
sS'.thisIndex'
p4278
I3
sa(dp4279
g18
S'N'
sS'.thisRepN'
p4280
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4281
I11
sS'.thisN'
p4282
I536
sg25
S'Y'
sg15
Nsg30
g31
sg17
g4166
sg14
I11
sg19
Nsg96
I13
sS'.thisIndex'
p4283
I13
sa(dp4284
g16
(lp4285
S'k'
asg18
S'N'
sS'.thisRepN'
p4286
I35
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4287
I12
sS'.thisN'
p4288
I537
sg25
S'Y'
sg15
(lp4289
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4290
S'space'
p4291
asg96
I12
sS'.thisIndex'
p4292
I12
sa(dp4293
g16
(lp4294
S'd'
asg18
S'N'
sS'.thisRepN'
p4295
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4296
I13
sS'.thisN'
p4297
I538
sg25
S'Y'
sg15
(lp4298
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I3
sS'.thisIndex'
p4299
I3
sa(dp4300
g16
(lp4301
S'k'
asg18
S'Y'
sS'.thisRepN'
p4302
I35
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4303
I14
sS'.thisN'
p4304
I539
sg25
S'Y'
sg15
(lp4305
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4306
S'space'
p4307
asg96
I14
sS'.thisIndex'
p4308
I14
sa(dp4309
g16
(lp4310
S'd'
asg18
S'N'
sS'.thisRepN'
p4311
I36
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4312
I0
sS'.thisN'
p4313
I540
sg25
S'Y'
sg15
(lp4314
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4315
S'space'
p4316
asg96
I4
sS'.thisIndex'
p4317
I4
sa(dp4318
g16
(lp4319
S'd'
asg18
S'N'
sS'.thisRepN'
p4320
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4321
I1
sS'.thisN'
p4322
I541
sg25
S'Y'
sg15
(lp4323
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I2
sS'.thisIndex'
p4324
I2
sa(dp4325
g16
(lp4326
S'k'
asg18
S'Y'
sS'.thisRepN'
p4327
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4328
I2
sS'.thisN'
p4329
I542
sg25
S'Y'
sg15
(lp4330
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4331
S'space'
p4332
asg96
I12
sS'.thisIndex'
p4333
I12
sa(dp4334
g16
(lp4335
S'k'
asg18
S'Y'
sS'.thisRepN'
p4336
I36
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4337
I3
sS'.thisN'
p4338
I543
sg25
S'Y'
sg15
(lp4339
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I8
sS'.thisIndex'
p4340
I8
sa(dp4341
g16
(lp4342
S'k'
asg18
S'N'
sS'.thisRepN'
p4343
I36
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4344
I4
sS'.thisN'
p4345
I544
sg25
S'Y'
sg15
(lp4346
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4347
S'space'
p4348
asg96
I10
sS'.thisIndex'
p4349
I10
sa(dp4350
g16
(lp4351
S'd'
asg18
S'N'
sS'.thisRepN'
p4352
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4353
I5
sS'.thisN'
p4354
I545
sg25
S'Y'
sg15
(lp4355
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I9
sS'.thisIndex'
p4356
I9
sa(dp4357
g16
(lp4358
S'k'
asg18
S'N'
sS'.thisRepN'
p4359
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4360
I6
sS'.thisN'
p4361
I546
sg25
S'Y'
sg15
(lp4362
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I1
sS'.thisIndex'
p4363
I1
sa(dp4364
g16
(lp4365
S'd'
asg18
S'N'
sS'.thisRepN'
p4366
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4367
I7
sS'.thisN'
p4368
I547
sg25
S'Y'
sg15
(lp4369
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I1
sS'.thisIndex'
p4370
I1
sa(dp4371
g16
(lp4372
S'd'
asg18
S'N'
sS'.thisRepN'
p4373
I36
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4374
I8
sS'.thisN'
p4375
I548
sg25
S'Y'
sg15
(lp4376
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4377
S'space'
p4378
asg96
I2
sS'.thisIndex'
p4379
I2
sa(dp4380
g16
(lp4381
S'k'
asg18
S'N'
sg22
I36
sg26
S'Y'
sS'.thisN'
p4382
I549
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4383
I9
sS'.thisRepN'
p4384
I36
sg21
I45
sg25
S'Y'
sg23
I25
sg15
(lp4385
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4386
S'space'
p4387
asg96
I7
sS'.thisIndex'
p4388
I7
sa(dp4389
g16
(lp4390
S'k'
asS'.thisIndex'
p4391
I7
sS'.thisRepN'
p4392
I36
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p4393
I10
sS'.thisN'
p4394
I550
sg25
S'Y'
sg15
(lp4395
S'd'
asg17
S'Y'
sg14
I12
sg96
I7
sa(dp4396
g16
(lp4397
S'k'
asS'.thisIndex'
p4398
I3
sS'.thisRepN'
p4399
I36
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p4400
I11
sS'.thisN'
p4401
I551
sg25
S'Y'
sg15
(lp4402
S'd'
asg17
S'Y'
sg14
I12
sg96
I3
sa(dp4403
g16
(lp4404
S'd'
asg18
S'N'
sS'.thisRepN'
p4405
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4406
I12
sS'.thisN'
p4407
I552
sg25
S'Y'
sg15
(lp4408
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I11
sS'.thisIndex'
p4409
I11
sa(dp4410
g16
(lp4411
S'k'
asg18
S'N'
sS'.thisRepN'
p4412
I36
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4413
I13
sS'.thisN'
p4414
I553
sg25
S'Y'
sg15
(lp4415
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4416
S'space'
p4417
asg96
I2
sS'.thisIndex'
p4418
I2
sa(dp4419
g18
S'N'
sS'.thisRepN'
p4420
I36
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4421
I14
sS'.thisN'
p4422
I554
sg25
S'Y'
sg15
Nsg30
g31
sg17
g4166
sg14
I12
sg19
Nsg96
I2
sS'.thisIndex'
p4423
I2
sa(dp4424
g16
(lp4425
S'd'
asg18
S'Y'
sS'.thisRepN'
p4426
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4427
I0
sS'.thisN'
p4428
I555
sg25
S'Y'
sg15
(lp4429
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4430
S'space'
p4431
asg96
I7
sS'.thisIndex'
p4432
I7
sa(dp4433
g16
(lp4434
S'k'
asg18
S'N'
sS'.thisRepN'
p4435
I37
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4436
I1
sS'.thisN'
p4437
I556
sg25
S'Y'
sg15
(lp4438
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4439
S'space'
p4440
asg96
I14
sS'.thisIndex'
p4441
I14
sa(dp4442
g16
(lp4443
S'k'
asg18
S'Y'
sS'.thisRepN'
p4444
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4445
I2
sS'.thisN'
p4446
I557
sg25
S'Y'
sg15
(lp4447
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4448
S'space'
p4449
asg96
I4
sS'.thisIndex'
p4450
I4
sa(dp4451
g16
(lp4452
S'k'
asg18
S'N'
sS'.thisRepN'
p4453
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4454
I3
sS'.thisN'
p4455
I558
sg25
S'Y'
sg15
(lp4456
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I3
sS'.thisIndex'
p4457
I3
sa(dp4458
g16
(lp4459
S'd'
asg18
S'Y'
sS'.thisRepN'
p4460
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4461
I4
sS'.thisN'
p4462
I559
sg25
S'Y'
sg15
(lp4463
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4464
S'space'
p4465
asg96
I11
sS'.thisIndex'
p4466
I11
sa(dp4467
g16
(lp4468
S'k'
asg18
S'Y'
sS'.thisRepN'
p4469
I37
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4470
I5
sS'.thisN'
p4471
I560
sg25
S'Y'
sg15
(lp4472
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I2
sS'.thisIndex'
p4473
I2
sa(dp4474
g16
(lp4475
S'k'
asg18
S'Y'
sS'.thisRepN'
p4476
I37
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4477
I6
sS'.thisN'
p4478
I561
sg25
S'Y'
sg15
(lp4479
S'k'
asg30
g31
sg17
S'N'
sg14
I12
sg19
Nsg96
I4
sS'.thisIndex'
p4480
I4
sa(dp4481
g16
(lp4482
S'd'
asg18
S'N'
sS'.thisRepN'
p4483
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4484
I7
sS'.thisN'
p4485
I562
sg25
S'Y'
sg15
(lp4486
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I5
sS'.thisIndex'
p4487
I5
sa(dp4488
g16
(lp4489
S'd'
asg18
S'N'
sS'.thisRepN'
p4490
I37
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4491
I8
sS'.thisN'
p4492
I563
sg25
S'Y'
sg15
(lp4493
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4494
S'space'
p4495
asg96
I7
sS'.thisIndex'
p4496
I7
sa(dp4497
g16
(lp4498
S'k'
asg18
S'N'
sS'.thisRepN'
p4499
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4500
I9
sS'.thisN'
p4501
I564
sg25
S'Y'
sg15
(lp4502
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I6
sS'.thisIndex'
p4503
I6
sa(dp4504
g16
(lp4505
S'd'
asg18
S'Y'
sS'.thisRepN'
p4506
I37
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4507
I10
sS'.thisN'
p4508
I565
sg25
S'Y'
sg15
(lp4509
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I14
sS'.thisIndex'
p4510
I14
sa(dp4511
g16
(lp4512
S'k'
asg18
S'Y'
sS'.thisRepN'
p4513
I37
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4514
I11
sS'.thisN'
p4515
I566
sg25
S'Y'
sg15
(lp4516
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I6
sS'.thisIndex'
p4517
I6
sa(dp4518
g16
(lp4519
S'k'
asg18
S'Y'
sS'.thisRepN'
p4520
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4521
I12
sS'.thisN'
p4522
I567
sg25
S'Y'
sg15
(lp4523
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4524
S'space'
p4525
asg96
I6
sS'.thisIndex'
p4526
I6
sa(dp4527
g16
(lp4528
S'k'
asg18
S'Y'
sS'.thisRepN'
p4529
I37
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4530
I13
sS'.thisN'
p4531
I568
sg25
S'Y'
sg15
(lp4532
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I10
sS'.thisIndex'
p4533
I10
sa(dp4534
g16
(lp4535
S'd'
asg18
S'Y'
sS'.thisRepN'
p4536
I37
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4537
I14
sS'.thisN'
p4538
I569
sg25
S'Y'
sg15
(lp4539
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4540
S'space'
p4541
asg96
I8
sS'.thisIndex'
p4542
I8
sa(dp4543
g16
(lp4544
S'k'
asg18
S'Y'
sS'.thisRepN'
p4545
I38
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4546
I0
sS'.thisN'
p4547
I570
sg25
S'Y'
sg15
(lp4548
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I10
sS'.thisIndex'
p4549
I10
sa(dp4550
g16
(lp4551
S'd'
asg18
S'Y'
sS'.thisRepN'
p4552
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4553
I1
sS'.thisN'
p4554
I571
sg25
S'Y'
sg15
(lp4555
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4556
S'space'
p4557
asg96
I7
sS'.thisIndex'
p4558
I7
sa(dp4559
g16
(lp4560
S'd'
asg18
S'Y'
sS'.thisRepN'
p4561
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4562
I2
sS'.thisN'
p4563
I572
sg25
S'Y'
sg15
(lp4564
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4565
S'space'
p4566
asg96
I2
sS'.thisIndex'
p4567
I2
sa(dp4568
g16
(lp4569
S'k'
asg18
S'Y'
sS'.thisRepN'
p4570
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4571
I3
sS'.thisN'
p4572
I573
sg25
S'Y'
sg15
(lp4573
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4574
S'space'
p4575
asg96
I2
sS'.thisIndex'
p4576
I2
sa(dp4577
g16
(lp4578
S'd'
asg18
S'N'
sS'.thisRepN'
p4579
I38
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4580
I4
sS'.thisN'
p4581
I574
sg25
S'Y'
sg15
(lp4582
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4583
S'space'
p4584
asg96
I13
sS'.thisIndex'
p4585
I13
sa(dp4586
g16
(lp4587
S'd'
asg18
S'N'
sS'.thisRepN'
p4588
I38
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4589
I5
sS'.thisN'
p4590
I575
sg25
S'Y'
sg15
(lp4591
S'd'
asg30
g31
sg17
S'N'
sg14
I12
sg19
(lp4592
S'space'
p4593
asg96
I10
sS'.thisIndex'
p4594
I10
sa(dp4595
g16
(lp4596
S'k'
asg18
S'N'
sS'.thisRepN'
p4597
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4598
I6
sS'.thisN'
p4599
I576
sg25
S'Y'
sg15
(lp4600
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I0
sS'.thisIndex'
p4601
I0
sa(dp4602
g16
(lp4603
S'd'
asg18
S'N'
sS'.thisRepN'
p4604
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4605
I7
sS'.thisN'
p4606
I577
sg25
S'Y'
sg15
(lp4607
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I4
sS'.thisIndex'
p4608
I4
sa(dp4609
g16
(lp4610
S'k'
asg18
S'Y'
sS'.thisRepN'
p4611
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4612
I8
sS'.thisN'
p4613
I578
sg25
S'Y'
sg15
(lp4614
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4615
S'space'
p4616
asg96
I11
sS'.thisIndex'
p4617
I11
sa(dp4618
g16
(lp4619
S'k'
asg18
S'Y'
sS'.thisRepN'
p4620
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4621
I9
sS'.thisN'
p4622
I579
sg25
S'Y'
sg15
(lp4623
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4624
S'space'
p4625
asg96
I12
sS'.thisIndex'
p4626
I12
sa(dp4627
g16
(lp4628
S'k'
asg18
S'N'
sS'.thisRepN'
p4629
I38
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4630
I10
sS'.thisN'
p4631
I580
sg25
S'Y'
sg15
(lp4632
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4633
S'space'
p4634
asg96
I0
sS'.thisIndex'
p4635
I0
sa(dp4636
g16
(lp4637
S'k'
asg18
S'N'
sS'.thisRepN'
p4638
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4639
I11
sS'.thisN'
p4640
I581
sg25
S'Y'
sg15
(lp4641
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I12
sS'.thisIndex'
p4642
I12
sa(dp4643
g16
(lp4644
S'd'
asg18
S'N'
sS'.thisRepN'
p4645
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4646
I12
sS'.thisN'
p4647
I582
sg25
S'Y'
sg15
(lp4648
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I7
sS'.thisIndex'
p4649
I7
sa(dp4650
g16
(lp4651
S'd'
asg18
S'Y'
sS'.thisRepN'
p4652
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4653
I13
sS'.thisN'
p4654
I583
sg25
S'Y'
sg15
(lp4655
S'd'
asg30
g31
sg17
S'N'
sg14
I12
sg19
(lp4656
S'space'
p4657
asg96
I2
sS'.thisIndex'
p4658
I2
sa(dp4659
g16
(lp4660
S'k'
asg18
S'N'
sS'.thisRepN'
p4661
I38
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4662
I14
sS'.thisN'
p4663
I584
sg25
S'Y'
sg15
(lp4664
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I11
sS'.thisIndex'
p4665
I11
sa(dp4666
g16
(lp4667
S'k'
asg18
S'N'
sS'.thisRepN'
p4668
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4669
I0
sS'.thisN'
p4670
I585
sg25
S'Y'
sg15
(lp4671
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I6
sS'.thisIndex'
p4672
I6
sa(dp4673
g16
(lp4674
S'k'
asg18
S'Y'
sS'.thisRepN'
p4675
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4676
I1
sS'.thisN'
p4677
I586
sg25
S'Y'
sg15
(lp4678
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4679
S'space'
p4680
asg96
I12
sS'.thisIndex'
p4681
I12
sa(dp4682
g16
(lp4683
S'd'
asg18
S'Y'
sS'.thisRepN'
p4684
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4685
I2
sS'.thisN'
p4686
I587
sg25
S'Y'
sg15
(lp4687
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4688
S'space'
p4689
asg96
I12
sS'.thisIndex'
p4690
I12
sa(dp4691
g16
(lp4692
S'd'
asg18
S'Y'
sS'.thisRepN'
p4693
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4694
I3
sS'.thisN'
p4695
I588
sg25
S'Y'
sg15
(lp4696
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4697
S'space'
p4698
asg96
I2
sS'.thisIndex'
p4699
I2
sa(dp4700
g16
(lp4701
S'k'
asg18
S'N'
sS'.thisRepN'
p4702
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4703
I4
sS'.thisN'
p4704
I589
sg25
S'Y'
sg15
(lp4705
S'k'
asg30
g31
sg17
S'N'
sg14
I12
sg19
Nsg96
I5
sS'.thisIndex'
p4706
I5
sa(dp4707
g16
(lp4708
S'd'
asg18
S'N'
sS'.thisRepN'
p4709
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4710
I5
sS'.thisN'
p4711
I590
sg25
S'Y'
sg15
(lp4712
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I9
sS'.thisIndex'
p4713
I9
sa(dp4714
g16
(lp4715
S'd'
asg18
S'N'
sS'.thisRepN'
p4716
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4717
I6
sS'.thisN'
p4718
I591
sg25
S'Y'
sg15
(lp4719
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I12
sS'.thisIndex'
p4720
I12
sa(dp4721
g16
(lp4722
S'k'
asg18
S'N'
sS'.thisRepN'
p4723
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4724
I7
sS'.thisN'
p4725
I592
sg25
S'Y'
sg15
(lp4726
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I2
sS'.thisIndex'
p4727
I2
sa(dp4728
g16
(lp4729
S'k'
asg18
S'N'
sS'.thisRepN'
p4730
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4731
I8
sS'.thisN'
p4732
I593
sg25
S'Y'
sg15
(lp4733
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I2
sS'.thisIndex'
p4734
I2
sa(dp4735
g18
S'Y'
sS'.thisRepN'
p4736
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4737
I9
sS'.thisN'
p4738
I594
sg25
S'Y'
sg15
Nsg30
g31
sg17
g4166
sg14
I12
sg19
(lp4739
S'space'
p4740
asg96
I7
sS'.thisIndex'
p4741
I7
sa(dp4742
g16
(lp4743
S'k'
asg18
S'N'
sS'.thisRepN'
p4744
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4745
I10
sS'.thisN'
p4746
I595
sg25
S'Y'
sg15
(lp4747
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I12
sS'.thisIndex'
p4748
I12
sa(dp4749
g16
(lp4750
S'k'
asg18
S'Y'
sS'.thisRepN'
p4751
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4752
I11
sS'.thisN'
p4753
I596
sg25
S'Y'
sg15
(lp4754
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4755
S'space'
p4756
asg96
I5
sS'.thisIndex'
p4757
I5
sa(dp4758
g16
(lp4759
S'd'
asg18
S'Y'
sS'.thisRepN'
p4760
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4761
I12
sS'.thisN'
p4762
I597
sg25
S'Y'
sg15
(lp4763
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4764
S'space'
p4765
asg96
I2
sS'.thisIndex'
p4766
I2
sa(dp4767
g16
(lp4768
S'd'
asg18
S'Y'
sS'.thisRepN'
p4769
I39
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4770
I13
sS'.thisN'
p4771
I598
sg25
S'Y'
sg15
(lp4772
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4773
S'space'
p4774
asg96
I4
sS'.thisIndex'
p4775
I4
sa(dp4776
g16
(lp4777
S'k'
asg18
S'Y'
sg22
I36
sg26
S'Y'
sS'.thisN'
p4778
I599
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4779
I14
sS'.thisRepN'
p4780
I39
sg21
I44
sg25
S'Y'
sg23
I25
sg15
(lp4781
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4782
S'space'
p4783
asg96
I3
sS'.thisIndex'
p4784
I3
sasS'loops'
p4785
(lp4786
g1
(g36
g3
NtRp4787
(dp4788
g39
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4789
sg41
(lp4790
sg42
I74693168
sg10
S''
sg6
g43
sg44
I1
sg27
I01
sg28
Nsg45
g1
(g46
g47
(dp4791
g49
g50
(g51
g52
g53
S'b'
tRp4792
(I1
(I600
I1
tg56
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg57
g50
(g51
g52
g53
S'b'
tRp4793
(I1
(I600
I1
tg56
I00
S'\x00\x00<B\x00\x00\xc6C\x00\x80\x85C\x00\x00\xb7C\x00\x00\x80?\x00\x00\x8bC\x00\x80\xf4C\x00\x80\xaeC\x00\x00\x0fD\x00\x80\x0fD\x00\x00\xa4B\x00\x80\x80C\x00\x00\x93C\x00\x00nC\x00\x00\x98B\x00\x80\xfcC\x00\x80\xd1C\x00\x80\xabC\x00\x80\x96C\x00\x00\xf5C\x00\x00pB\x00\x80\xebC\x00\x80\xc7C\x00\x00`A\x00\x00\x00@\x00\x00\xfbC\x00\x80\x0cD\x00\x80\xe4C\x00\x00\xd5C\x00\x00iC\x00\x80\xfdC\x00\x00\x0bC\x00\x00\xecB\x00\x00\xeaB\x00\x00\xd3C\x00\x00\x88B\x00\x00\xc2B\x00\x80\xeaC\x00\x00mC\x00\x80\x84C\x00@\x08D\x00\x00\xb8B\x00\x00\xc6B\x00\x00\xa0A\x00\x00\xf2B\x00\x00\xd8A\x00\x002C\x00\x80\xadC\x00\x005C\x00\x80\xe0C\x00\x00\x1fC\x00\x00\x00A\x00\x00\x1eC\x00\x00\xbcB\x00\x00<C\x00\x00\xe5C\x00\x000B\x00\x00"C\x00\x00\xe8C\x00\xc0\x0cD\x00\x00XC\x00\x80\x06D\x00\x00\x82C\x00\x00\x15C\x00\x00\xf8B\x00\x00\xfdC\x00\x80\x98C\x00\x00@C\x00\x00\x1cB\x00\x80\x90C\x00\x00\xbaC\x00\x80\x14D\x00\x00RC\x00\x80\xb2C\x00\x00\xeeC\x00\x00$C\x00\x80\xc9C\x00\x00\x04D\x00\x80\xccC\x00\x00\xe8B\x00\x80\xfbC\x00\x00ZC\x00\x80\x02D\x00\x00\x01C\x00\x80\xbcC\x00\x80\xa1C\x00\x00,C\x00\x00oC\x00\x00\nD\x00\x00\x00\x00\x00\x00_C\x00\x00\xaaB\x00\x80\x92C\x00\xc0\x0fD\x00\x80\xc3C\x00\x00?C\x00\x00xC\x00\x00\xd2B\x00\x80\xbbC\x00\x00{C\x00\x00\x05D\x00\x00\x08C\x00\x00\xe0B\x00@\x0eD\x00\x00\xf9C\x00\x00XB\x00\x004B\x00@\x10D\x00\x80\xdeC\x00\xc0\x08D\x00\x80\xb8C\x00\x80\x03D\x00\x00\x9fC\x00\x00\xc5C\x00\x00\x84B\x00\x80\xf3C\x00\x80\xd8C\x00\x00\xb4C\x00\x00\xf4B\x00\x00BC\x00\x00\x07C\x00\x00\x9eB\x00\x008C\x00\x80\x04D\x00\x00\xacC\x00\x00\xe7C\x00\x80\x05D\x00\x00\x8dC\x00\x80\x9cC\x00\x00TC\x00\x00\x1bC\x00\x80\x11D\x00\xc0\x02D\x00@\x15D\x00\x00\xf0A\x00\x00\xe8A\x00\x00\xe4C\x00\x00\xd0B\x00\x00\xefC\x00\x00\xdbC\x00\x00\xbaB\x00\x00\x10A\x00\x00\x92B\x00\x00\xccC\x00\x80\xcaC\x00\x80\xcbC\x00\x80\x15D\x00\x80\xe5C\x00\x00\xbfC\x00\xc0\x13D\x00\x00\xcaB\x00\x00\xa0@\x00\x00MC\x00\x00\xc8B\x00\x004C\x00\x00\x13D\x00\x00\xfcC\x00\x80\xe3C\x00\x00\xe6B\x00\x00tB\x00\x00kC\x00\x00\xb2B\x00\x00\xf6C\x00\x80\xc8C\x00\x00EC\x00\x00~C\x00\xc0\x0bD\x00\x00\x0cB\x00\x00\xaeC\x00\x00.C\x00\x00pA\x00\x000A\x00\x00\x8eB\x00\x00\x1cC\x00\x00\xeeB\x00\x00\x94C\x00\x00}C\x00\x00\xbdC\x00@\x01D\x00\x00\xb3C\x00\x00\xbbC\x00\x00\xdeB\x00\x00\xedC\x00@\x03D\x00\x00\xb2C\x00\x00\xe1C\x00\xc0\nD\x00\x00\xb4B\x00\x80\x8aC\x00\x80\xf1C\x00\x00\x97C\x00\x80\xafC\x00\x00\xcbC\x00\x00\x0fC\x00\x00\x9dC\x00\x00\x13C\x00\x00\x07D\x00\x00\x0cC\x00\x00zC\x00\x00:C\x00\x00\xa1C\x00\x00PA\x00\x00\tC\x00\x00\x16C\x00\x00VC\x00\x00UC\x00\x00(B\x00\x00\xfeC\x00\x00#C\x00\x80\xc5C\x00\x80\xe7C\x00\x00\xd4B\x00\x00QC\x00\x00\rC\x00\x80\xe9C\x00\x00wC\x00\x80\x13D\x00\x00\tD\x00\x00\x92C\x00\x00\xffC\x00\x00gC\x00\x80\xdcC\x00\x00\xe0@\x00\x00\xd4C\x00\x80\x8dC\x00\x00\x10C\x00\x00\xe4B\x00\x00\x8fC\x00\x80\x9fC\x00\x00\xa0C\x00\x006C\x00\x00\xc4C\x00\x80\x97C\x00\x00,B\x00\x00*C\x00\x00\xd8B\x00\x00\xceB\x00\x00\x80@\x00\x80\xd3C\x00\x00hC\x00\x00yC\x00\x80\xf8C\x00\x00LB\x00\x00\x91C\x00\x80\xc0C\x00\x00|B\x00\x00\x80C\x00\x00\x14C\x00\xc0\x0eD\x00\x00\x06D\x00\x80\xf6C\x00\x00SC\x00\x00\x04C\x00\x80\x01D\x00\x80\xcdC\x00\x00[C\x00\x80\x8cC\x00\x80\xdbC\x00\x80\xe6C\x00\x00\xdeC\x00\x00\x8cB\x00\x80\x86C\x00@\x02D\x00\x00\x08B\x00\x00\xc3C\x00\x80\x93C\x00\x00TB\x00\x00lB\x00\xc0\x04D\x00\x00WC\x00\xc0\x11D\x00\x00`B\x00\x00pC\x00\x00\xb8C\x00\x00vC\x00\x00\xa4C\x00\x00uC\x00\x00\x86B\x00\x00\x86C\x00\xc0\x12D\x00@\rD\x00\x00\\B\x00\x00\x9cC\x00\x00]C\x00\x00\x90B\x00\x00tC\x00\x80\x81C\x00\x00GC\x00\x80\x9dC\x00\x00\\C\x00\x00\xa7C\x00\x00\x90A\x00\x80\x95C\x00\x00\xaeB\x00@\x07D\x00\x00\xbeB\x00\x80\x9aC\x00\x00\x00B\x00\x80\xcfC\x00\x80\xb7C\x00\x80\xd4C\x00\x00\xa9C\x00\x00\xfaB\x00\x00\x88C\x00\x80\xd5C\x00\x00\xceC\x00\x80\xa5C\x00\x80\xedC\x00\x00qC\x00\x80\x87C\x00\x00dB\x00\x00>C\x00\x00\xc9C\x00\x80\xd7C\x00\x00\xb0B\x00\x00\x03C\x00\x00\xf2C\x00\x00\xd8C\x00\x80\xa6C\x00\x80\xecC\x00\x00\xc8C\x00@\x0bD\x00\x00\xc7C\x00\x00IC\x00\x00\xa8A\x00\x00\xdfC\x00\x00\xdcB\x00\x00\xcaC\x00\x00HB\x00\x00DC\x00\x80\x94C\x00\x00eC\x00\x80\xe8C\x00\x80\xceC\x00\x00\xa5C\x00\x00\xb8A\x00\x00\xa3C\x00\x00\xd9C\x00\x00PC\x00\x00\x12D\x00\x00\x18B\x00\x80\xaaC\x00\x00\x00C\x00@\tD\x00\x00\x0cD\x00\x00-C\x00\x80\xf0C\x00\xc0\tD\x00\x80\x07D\x00\x00\xbeC\x00\x80\xc1C\x00\x00\xd6B\x00\x00\xc2C\x00\x00rC\x00\x00\x19C\x00\x80\xd0C\x00\x00\xd0A\x00\xc0\x05D\x00\x00\xf0B\x00\x00^C\x00\x00\x90C\x00\x00$B\x00\x00\xb6C\x00\x00\x12C\x00@\nD\x00\x00xB\x00\x00\xc4B\x00\x80\xa8C\x00\x80\tD\x00\x00%C\x00\x80\xb0C\x00\x00\x8aB\x00\x00 B\x00\x00\xd6C\x00@\x13D\x00@\x05D\x00\x00\xf1C\x00@\x0fD\x00\x00\x9eC\x00\x00|C\x00\x00\x9cB\x00\x80\xd2C\x00\x00\xc0@\x00\x001C\x00\x80\xacC\x00\x00\xdcC\x00\x00\x14B\x00\x00dC\x00\x00\x80B\x00\x00\xfaC\x00\x00\x14D\x00\x00 A\x00\x007C\x00\x00\x94B\x00\x00\x89C\x00@\x04D\x00\x80\xa9C\x00\x00\x08D\x00\x00\rD\x00\x00\xb0A\x00\x00\x98A\x00\x80\xf9C\x00\x00\x02D\x00\x00\x18C\x00\xc0\x03D\x00\x00(C\x00\x00\x17C\x00\x80\x12D\x00\x00\x05C\x00\x00\xadC\x00\xc0\rD\x00\x00\xc0B\x00\x00\x11D\x00\x00NC\x00\x00JC\x00\x80\xb3C\x00\x000C\x00\x80\xa4C\x00\x00/C\x00\x00\xe2B\x00\x00sC\x00\x00\x9aC\x00\x00\xe2C\x00\x80\x88C\x00\x00\xeaC\x00\x00\xbcC\x00\x00\xf4C\x00\x80\xf7C\x00\x80\xfeC\x00\x00\x7fC\x00\x009C\x00\x00\nC\x00\x80\x91C\x00\x00bC\x00\x00\xa6C\x00\x00\x1dC\x00\x80\xeeC\x00\x80\xddC\x00\x00\x1aC\x00@\x0cD\x00\x00KC\x00\x00\xd2C\x00\x00\x10D\x00\x00\xfcB\x00\x80\xefC\x00\x80\xa3C\x00\x00PB\x00\x80\xb4C\x00\x80\xd6C\x00\x80\xbeC\x00\x80\xb1C\x00\x00&C\x00\x00\xb5C\x00\x80\rD\x00\x00\xf6B\x00\x00\xa6B\x00\x00`C\x00\x00\xe0C\x00\x80\xdfC\x00\x00\x9aB\x00\x00\x0eD\x00\x00\x11C\x00\x00\xb6B\x00\xc0\x06D\x00\x00@A\x00\x80\xa2C\x00\x80\xa0C\x00\x00\x88A\x00\xc0\x00D\x00\x00\xd0C\x00\x00!C\x00\x00\xddC\x00\x00\xa2B\x00\x00\xf7C\x00\x80\xbdC\x00\x00\xf3C\x00\x00\xf0C\x00\x00\xebC\x00\x00\xa0B\x00\x00\x8cC\x00\x00\x0eC\x00\x00DB\x00\x00hB\x00\x00\xe6C\x00\x80\xc2C\x00\x00CC\x00\x00\xc0A\x00\x00\xf8C\x00\x00\xdaC\x00\x00\x06C\x00\x008B\x00@\x14D\x00\x00\x98C\x00\x00\xb9C\x00\x00lC\x00\x80\x8bC\x00@\x06D\x00\x80\xbaC\x00\x80\x9eC\x00\x00\x87C\x00\x00\xacB\x00\x00\x15D\x00\x00\x80A\x00\x00\xd7C\x00\x80\x0eD\x00\x00\x96B\x00\x00fC\x00\x00OC\x00\xc0\x01D\x00\x00 C\x00\x00\x10B\x00\x00\x83C\x00\x80\xa7C\x00\x00AC\x00\x80\x89C\x00\x00\xdaB\x00\x00@B\x00\x00\x85C\x00\x00\xa8B\x00\x00+C\x00\x00\'C\x00\x00\xd1C\x00\x80\x83C\x00\x80\x9bC\x00\x80\x82C\x00\x00\xa8C\x00\x00@@\x00\x80\xb9C\x00\x00\x99C\x00\x00\x8aC\x00\x00\xc8A\x00\x80\xdaC\x00\x00\x02C\x00\x00cC\x00\x00\x03D\x00\x00)C\x00\x00\x84C\x00\x00\x81C\x00\x00\x9bC\x00\x80\x00D\x00\x00\xf8A\x00\x80\xb5C\x00\x00\x82B\x00\x00\x04B\x00\x00\x0bD\x00\x00\x96C\x00@\x11D\x00\x00=C\x00\x00;C\x00\x00\xe9C\x00\x80\x99C\x00\x80\x10D\x00\x00\xb0C\x00\x003C\x00\x00\xe3C\x00\x80\xc4C\x00@\x12D\x00\x00LC\x00\x00\xc1C\x00\x80\xf5C\x00\x80\xb6C\x00\x00\xccB\x00\x00YC\x00\x80\xe1C\x00@\x00D\x00\xc0\x14D\x00\x00\x01D\x00\x00\xabC\x00\x00jC\x00\x00\x8eC\x00\x00FC\x00\x00\xaaC\x00\x80\xf2C\x00\x80\xbfC\x00\x00\xe0A\x00\x80\x8eC\x00\x00\xafC\x00\x80\xe2C\x00\x00\xfeB\x00\x80\xffC\x00\x00\xc0C\x00\x80\x0bD\x00\x80\xd9C\x00\x00\xcdC\x00\x80\xc6C\x00\xc0\x10D\x00\xc0\x15D\x00\x80\nD\x00\x00\xecC\x00\x00\x95C\x00\x00\xb1C\x00\xc0\x07D\x00\x00\xcfC\x00\x00HC\x00\x80\x8fC\x00\x00\xa2C\x00\x00aC\x00\x80\x08D\x00\x00\x00D\x00\x80\xfaC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4794
(dp4795
g61
(dp4796
g49
I01
sg57
I01
ssg63
g4787
sg64
(lp4797
g49
ag57
asg66
(lp4798
I600
aI1
asbsg68
S'random'
p4799
sg70
g71
(g52
(I0
tS'b'
tRp4800
(I1
(I600
I1
tg55
(S'i4'
I0
I1
tRp4801
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'Y\x00\x00\x00\x04\x00\x00\x00\x18\x00\x00\x00\x0e\x02\x00\x00\xed\x00\x00\x00\x97\x00\x00\x00~\x01\x00\x00\xde\x00\x00\x003\x00\x00\x00\x8d\x00\x00\x00\x87\x01\x00\x00\xab\x00\x00\x00\xd0\x01\x00\x00\xc9\x00\x00\x00\x17\x00\x00\x00\xaa\x00\x00\x00\xf6\x01\x00\x00\xd3\x01\x00\x00#\x01\x00\x00\x90\x01\x00\x00+\x00\x00\x00D\x01\x00\x00\x8f\x01\x00\x00O\x01\x00\x00\xe6\x01\x00\x00\x12\x02\x00\x00d\x01\x00\x00-\x00\x00\x00>\x02\x00\x00\x87\x00\x00\x00\x86\x00\x00\x00\x1c\x02\x00\x00)\x01\x00\x00\x1f\x02\x00\x00\x07\x01\x00\x00\xa7\x00\x00\x00\xfe\x01\x00\x00\x82\x01\x00\x00T\x01\x00\x00D\x00\x00\x00t\x01\x00\x00i\x01\x00\x00\xce\x00\x00\x00\xe9\x00\x00\x008\x00\x00\x00j\x00\x00\x00\xea\x01\x00\x00\x00\x00\x00\x00\x04\x02\x00\x00\xe1\x01\x00\x00H\x01\x00\x00\xf2\x00\x00\x00\xbe\x01\x00\x00\n\x01\x00\x00i\x00\x00\x00\x19\x01\x00\x00\x0f\x01\x00\x006\x01\x00\x00\xe2\x01\x00\x00\x0b\x01\x00\x00\x14\x00\x00\x00\x9f\x00\x00\x00m\x01\x00\x00\xf5\x00\x00\x00\x84\x01\x00\x00\x1e\x02\x00\x00r\x00\x00\x00\x15\x01\x00\x00#\x00\x00\x00s\x01\x00\x00\x04\x01\x00\x00\xac\x00\x00\x00\x1c\x01\x00\x00\x8e\x00\x00\x00\x89\x01\x00\x00\xf9\x01\x00\x00\x0e\x00\x00\x00\xcb\x01\x00\x00|\x01\x00\x00y\x00\x00\x00\xde\x01\x00\x00\xd8\x01\x00\x00\n\x00\x00\x00\xc7\x01\x00\x00\x06\x02\x00\x00[\x00\x00\x00\xf4\x01\x00\x00%\x01\x00\x00:\x01\x00\x00\xa1\x00\x00\x00\xbb\x00\x00\x00\xce\x01\x00\x00)\x00\x00\x00\x8c\x00\x00\x005\x00\x00\x00\'\x01\x00\x00\x9b\x01\x00\x00$\x00\x00\x00n\x01\x00\x00*\x00\x00\x00\x99\x00\x00\x00\x96\x00\x00\x001\x02\x00\x00\xec\x00\x00\x00\x89\x00\x00\x00a\x00\x00\x00\xd3\x00\x00\x00_\x01\x00\x00\xeb\x00\x00\x00\x03\x02\x00\x00F\x01\x00\x00\xb5\x00\x00\x00f\x00\x00\x00\xa3\x01\x00\x00\xe2\x00\x00\x00\x9e\x00\x00\x00O\x00\x00\x00!\x00\x00\x00 \x00\x00\x00\xae\x00\x00\x00f\x01\x00\x00,\x00\x00\x00v\x00\x00\x00\xc6\x01\x00\x00@\x00\x00\x00.\x01\x00\x00\xbb\x01\x00\x00B\x02\x00\x00V\x01\x00\x00S\x00\x00\x00\x14\x02\x00\x00;\x01\x00\x00\xfc\x00\x00\x00\x98\x01\x00\x00\xe9\x01\x00\x00x\x00\x00\x00e\x00\x00\x00\xca\x00\x00\x00\xaf\x01\x00\x00\x1f\x00\x00\x00\xc5\x00\x00\x00\xd5\x00\x00\x00\xe0\x01\x00\x00\xc1\x00\x00\x00\xe1\x00\x00\x00\xcd\x01\x00\x00k\x01\x00\x00\xc3\x00\x00\x00\xf7\x00\x00\x00?\x00\x00\x00\xcb\x00\x00\x00\x96\x01\x00\x00\x93\x01\x00\x00b\x01\x00\x00\xb6\x01\x00\x00\x82\x00\x00\x00\xad\x00\x00\x00\xb3\x01\x00\x004\x00\x00\x002\x00\x00\x00\xfd\x01\x00\x00\xd6\x01\x00\x009\x00\x00\x00\xd0\x00\x00\x00K\x00\x00\x00q\x01\x00\x00\xc3\x01\x00\x00\x08\x02\x00\x00\x95\x01\x00\x00\x17\x02\x00\x00\xea\x00\x00\x00\x07\x02\x00\x00V\x00\x00\x00Y\x01\x00\x00\xa9\x00\x00\x00\xa2\x01\x00\x00\xa0\x01\x00\x00\x7f\x01\x00\x00.\x00\x00\x00)\x02\x00\x00\x9a\x00\x00\x000\x00\x00\x00\xe6\x00\x00\x00\x88\x01\x00\x00z\x00\x00\x00\xae\x01\x00\x00\xc7\x00\x00\x00$\x02\x00\x006\x00\x00\x00#\x02\x00\x007\x01\x00\x00_\x00\x00\x00C\x00\x00\x00\x01\x02\x00\x00w\x00\x00\x00\xe5\x01\x00\x00I\x01\x00\x00\xa4\x00\x00\x00:\x02\x00\x00\x1f\x01\x00\x00Q\x02\x00\x00C\x01\x00\x00\x9e\x01\x00\x00\xb8\x01\x00\x00-\x02\x00\x00\x98\x00\x00\x00\x9d\x01\x00\x00\xfb\x01\x00\x00R\x01\x00\x00\xd4\x00\x00\x00H\x00\x00\x00\xfb\x00\x00\x00\x81\x00\x00\x00\xcd\x00\x00\x00\xcc\x00\x00\x00\r\x01\x00\x00<\x00\x00\x002\x02\x00\x00Q\x00\x00\x00\xff\x00\x00\x00!\x01\x00\x00\x1b\x01\x00\x00g\x01\x00\x00Z\x00\x00\x00\xc8\x01\x00\x00T\x02\x00\x00\xb1\x01\x00\x00\x15\x02\x00\x00\x83\x01\x00\x00K\x01\x00\x00\xfa\x01\x00\x00\xdc\x00\x00\x00\xef\x00\x00\x00\x1d\x00\x00\x008\x02\x00\x00\xa0\x00\x00\x00\xee\x01\x00\x00&\x00\x00\x00\r\x00\x00\x00W\x00\x00\x00\x10\x01\x00\x004\x01\x00\x00a\x01\x00\x00\xa4\x01\x00\x00\x1d\x01\x00\x00\x14\x01\x00\x00\x12\x01\x00\x00\xd7\x00\x00\x00`\x00\x00\x00\xf0\x00\x00\x00\xc6\x00\x00\x00c\x00\x00\x00{\x01\x00\x00\xb0\x00\x00\x00\xa5\x00\x00\x00\xad\x01\x00\x00\xf6\x00\x00\x00\x0b\x00\x00\x00\x19\x02\x00\x00\x1e\x01\x00\x00>\x00\x00\x00\x0c\x02\x00\x00\xff\x01\x00\x00\n\x02\x00\x00\x18\x02\x00\x00\'\x00\x00\x00\x05\x02\x00\x00\x02\x00\x00\x00\x16\x01\x00\x00\x05\x01\x00\x00\xf3\x01\x00\x005\x01\x00\x00/\x01\x00\x00\xa7\x01\x00\x00\x8a\x01\x00\x00\x02\x02\x00\x00\x11\x02\x00\x00\xbc\x00\x00\x00\x05\x00\x00\x00\xef\x01\x00\x00\xdf\x01\x00\x00\x00\x01\x00\x00\x7f\x00\x00\x00\xe0\x00\x00\x009\x02\x00\x00?\x02\x00\x00\xe3\x00\x00\x00R\x02\x00\x00h\x01\x00\x00E\x00\x00\x00\xf3\x00\x00\x00\xb0\x01\x00\x00\xda\x00\x00\x00\\\x00\x00\x00\x0c\x00\x00\x00\t\x01\x00\x00\xaf\x00\x00\x00J\x01\x00\x00M\x02\x00\x00$\x01\x00\x00!\x02\x00\x00\x12\x00\x00\x00\xbe\x00\x00\x00\xe8\x00\x00\x00\xec\x01\x00\x00B\x00\x00\x00\x10\x02\x00\x00&\x02\x00\x00\xa5\x01\x00\x00(\x01\x00\x00\x1a\x02\x00\x00\x0b\x02\x00\x00\x1a\x01\x00\x00\x80\x00\x00\x00\xc2\x00\x00\x00 \x01\x00\x00z\x01\x00\x00\xf2\x01\x00\x00p\x00\x00\x00\xe4\x00\x00\x00\xe5\x00\x00\x00\xd2\x01\x00\x00\xc8\x00\x00\x00U\x00\x00\x00S\x02\x00\x00\xd1\x01\x00\x00P\x01\x00\x00\xbd\x01\x00\x00\x13\x01\x00\x00\xa1\x01\x00\x00N\x01\x00\x002\x01\x00\x00\xb2\x01\x00\x00>\x01\x00\x00"\x01\x00\x00\x00\x02\x00\x00\r\x02\x00\x00o\x01\x00\x00-\x01\x00\x00\x8c\x01\x00\x00;\x02\x00\x00U\x01\x00\x007\x02\x00\x00\x11\x00\x00\x00|\x00\x00\x00\x80\x01\x00\x00\x99\x01\x00\x00/\x00\x00\x00\xa8\x00\x00\x00\x07\x00\x00\x00@\x02\x00\x00\xbf\x00\x00\x00(\x02\x00\x00r\x01\x00\x00N\x02\x00\x00\xc2\x01\x00\x00\xb8\x00\x00\x00I\x00\x00\x00\xb3\x00\x00\x00\x9f\x01\x00\x00u\x00\x00\x00\xbf\x01\x00\x00\xc4\x01\x00\x00\x1d\x02\x00\x00j\x01\x00\x000\x02\x00\x00\x03\x00\x00\x00+\x01\x00\x00\x11\x01\x00\x00n\x00\x00\x00\xed\x01\x00\x00\x0f\x02\x00\x00F\x00\x00\x00\xf1\x01\x00\x00\xb4\x00\x00\x00b\x00\x00\x00\xa9\x01\x00\x00T\x00\x00\x00\xb1\x00\x00\x00\xda\x01\x00\x00]\x01\x00\x00\xc1\x01\x00\x00\x94\x00\x00\x00=\x02\x00\x00D\x02\x00\x00\xf4\x00\x00\x00.\x02\x00\x00^\x01\x00\x00`\x01\x00\x00\xe4\x01\x00\x00\x08\x01\x00\x00^\x00\x00\x00\xe7\x00\x00\x00+\x02\x00\x00q\x00\x00\x00\xd1\x00\x00\x00\x01\x00\x00\x00H\x02\x00\x00B\x01\x00\x00\x16\x00\x00\x00@\x01\x00\x00\xa3\x00\x00\x008\x01\x00\x00L\x00\x00\x00G\x01\x00\x00\x90\x00\x00\x00\xc0\x00\x00\x00\x91\x00\x00\x00\x8f\x00\x00\x00N\x00\x00\x00G\x02\x00\x00\xfe\x00\x00\x001\x01\x00\x00M\x01\x00\x00P\x02\x00\x00*\x01\x00\x00\xd5\x01\x00\x00c\x01\x00\x00\t\x02\x00\x00\x10\x00\x00\x00\xb9\x01\x00\x00}\x01\x00\x00"\x00\x00\x00\xee\x00\x00\x00\xdf\x00\x00\x00,\x01\x00\x00\x1c\x00\x00\x000\x01\x00\x00u\x01\x00\x00\xc0\x01\x00\x00\xf7\x01\x00\x009\x01\x00\x00=\x01\x00\x00t\x00\x00\x00Q\x01\x00\x00F\x02\x00\x00\xe8\x01\x00\x00\x13\x02\x00\x00\x8b\x00\x00\x00\x01\x01\x00\x00\x81\x01\x00\x00\xdd\x00\x00\x00\xd7\x01\x00\x00\xb5\x01\x00\x00\x03\x01\x00\x00l\x00\x00\x00E\x01\x00\x00\xca\x01\x00\x00\xc9\x01\x00\x001\x00\x00\x00\xb9\x00\x00\x003\x02\x00\x00\xa6\x01\x00\x00A\x02\x00\x00*\x02\x00\x00\x9d\x00\x00\x00\x88\x00\x00\x00\x1b\x00\x00\x007\x00\x00\x00\x93\x00\x00\x00\xe3\x01\x00\x00\x02\x01\x00\x00}\x00\x00\x00\xd2\x00\x00\x00:\x00\x00\x00L\x01\x00\x00%\x02\x00\x00\xd6\x00\x00\x00\xa8\x01\x00\x00%\x00\x00\x00\xdd\x01\x00\x00\x15\x00\x00\x00L\x02\x00\x00?\x01\x00\x00\xb6\x00\x00\x003\x01\x00\x00J\x00\x00\x00\xb4\x01\x00\x00\x8a\x00\x00\x00\xbc\x01\x00\x00\xdc\x01\x00\x00Z\x01\x00\x00x\x01\x00\x00\xbd\x00\x00\x00<\x01\x00\x00<\x02\x00\x00\xdb\x01\x00\x00s\x00\x00\x00\xaa\x01\x00\x00\x06\x00\x00\x00\x13\x00\x00\x00/\x02\x00\x00\xa2\x00\x00\x00\xfa\x00\x00\x00\xd9\x01\x00\x00\xab\x01\x00\x00\xe7\x01\x00\x00\xf1\x00\x00\x00h\x00\x00\x00\x91\x01\x00\x00\x85\x01\x00\x00W\x02\x00\x00\x19\x00\x00\x00P\x00\x00\x00\x9c\x00\x00\x00\x0f\x00\x00\x00A\x00\x00\x00\x1e\x00\x00\x00\xcf\x00\x00\x00\xac\x01\x00\x00\xdb\x00\x00\x00C\x02\x00\x00V\x02\x00\x004\x02\x00\x00\x1b\x02\x00\x00\xd4\x01\x00\x006\x02\x00\x00\xb2\x00\x00\x00\xfd\x00\x00\x00\xfc\x01\x00\x00\x92\x01\x00\x00\x06\x01\x00\x00R\x00\x00\x00\x84\x00\x00\x00\x16\x02\x00\x00\xb7\x00\x00\x00o\x00\x00\x00\x94\x01\x00\x00M\x00\x00\x00\x8b\x01\x00\x00{\x00\x00\x00\x0c\x01\x00\x00d\x00\x00\x00w\x01\x00\x00~\x00\x00\x00e\x01\x00\x00\xf9\x00\x00\x00\xf0\x01\x00\x00=\x00\x00\x00\xcf\x01\x00\x00\xc4\x00\x00\x00&\x01\x00\x00\\\x01\x00\x00O\x02\x00\x00\x8d\x01\x00\x00(\x00\x00\x00U\x02\x00\x00m\x00\x00\x00\xd9\x00\x00\x00W\x01\x00\x00p\x01\x00\x00[\x01\x00\x00X\x00\x00\x00l\x01\x00\x00K\x02\x00\x00\xba\x00\x00\x00 \x02\x00\x00A\x01\x00\x00E\x02\x00\x00\xa6\x00\x00\x00X\x01\x00\x00\xb7\x01\x00\x00\x1a\x00\x00\x00;\x00\x00\x00\x8e\x01\x00\x00\x18\x01\x00\x00\xc5\x01\x00\x00\x9a\x01\x00\x00\xcc\x01\x00\x00g\x00\x00\x00\xf8\x01\x00\x00\xf8\x00\x00\x00\x08\x00\x00\x00y\x01\x00\x00\t\x00\x00\x00]\x00\x00\x00\xba\x01\x00\x00k\x00\x00\x00\'\x02\x00\x00I\x02\x00\x00\x9c\x01\x00\x00"\x02\x00\x00\x83\x00\x00\x00\x0e\x01\x00\x00S\x01\x00\x00,\x02\x00\x00\x97\x01\x00\x00\x17\x01\x00\x00\x9b\x00\x00\x00v\x01\x00\x00\xd8\x00\x00\x00\x95\x00\x00\x00\x86\x01\x00\x00\xeb\x01\x00\x00G\x00\x00\x005\x02\x00\x00\xf5\x01\x00\x00\x85\x00\x00\x00\x92\x00\x00\x00J\x02\x00\x00'
tbsg75
I01
sg76
I1
sg77
I-1
sg78
(lp4802
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg80
Nsg81
cnumpy.core.multiarray
scalar
p4803
(g4801
S'J\x02\x00\x00'
tRp4804
sg82
I600
sg83
I0
sg84
I600
sg85
I01
sbag37
asS'savePickle'
p4805
I01
sb.