ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject816
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 816
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
VM
sS'age'
p31
V20
p32
ssS'loopsUnfinished'
p33
(lp34
g1
(cpsychopy.data
TrialHandler
p35
g3
NtRp36
(dp37
S'origin'
p38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p39
sS'thisTrial'
p40
I5
sS'_exp'
p41
I72763696
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p42
sS'thisRepN'
p43
I54
sg27
I01
sg28
NsS'data'
p44
g1
(cpsychopy.data
DataHandler
p45
c__builtin__
dict
p46
(dp47
S'ran'
p48
cnumpy.ma.core
_mareconstruct
p49
(cnumpy.ma.core
MaskedArray
p50
cnumpy
ndarray
p51
(I0
tp52
S'b'
tRp53
(I1
(I11
I55
tcnumpy
dtype
p54
(S'f4'
I0
I1
tRp55
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p56
g49
(g50
g51
g52
S'b'
tRp57
(I1
(I11
I55
tg55
I00
S'\x00\x00\x10A\x00\x00\xa8A\x00\x00\x14B\x00\x00\x88B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\xa4B\x00\x00\xb4B\x00\x00\xc0B\x00\x00\x00C\x00\x00\x02C\x00\x00\x13C\x00\x00\x1dC\x00\x00#C\x00\x00&C\x00\x00/C\x00\x003C\x00\x00=C\x00\x00?C\x00\x00_C\x00\x00fC\x00\x00gC\x00\x00kC\x00\x00mC\x00\x00qC\x00\x00wC\x00\x80\x84C\x00\x00\x88C\x00\x80\x8bC\x00\x80\x94C\x00\x80\x95C\x00\x00\x97C\x00\x80\x97C\x00\x00\x98C\x00\x80\x9bC\x00\x00\x9cC\x00\x00\xa2C\x00\x00\xa5C\x00\x00\xb0C\x00\x80\xb6C\x00\x80\xbfC\x00\x80\xc3C\x00\x80\xd0C\x00\x00\xd1C\x00\x80\xd1C\x00\x80\xd4C\x00\x80\xd9C\x00\x80\xf5C\x00\x80\xf6C\x00\x80\xf7C\x00\x00\xfbC\x00\xc0\x03D\x00\xc0\x0bD\x00\x00\x0eD\x00\xc0\x10D\x00\x00\x04B\x00\x00PB\x00\x00XB\x00\x00\x90B\x00\x00\x94B\x00\x00\xa0B\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb8B\x00\x00\xc4B\x00\x00\xdaB\x00\x00\xfeB\x00\x00\x03C\x00\x00\x07C\x00\x00\x0cC\x00\x00\x17C\x00\x00"C\x00\x00+C\x00\x004C\x00\x00NC\x00\x00nC\x00\x00rC\x00\x00xC\x00\x00zC\x00\x80\x88C\x00\x00\x8aC\x00\x80\x8dC\x00\x80\x8eC\x00\x80\x98C\x00\x00\x99C\x00\x00\xa4C\x00\x00\xadC\x00\x80\xafC\x00\x80\xb4C\x00\x00\xb5C\x00\x80\xb7C\x00\x80\xc0C\x00\x00\xc4C\x00\x80\xc7C\x00\x80\xd5C\x00\x00\xd6C\x00\x00\xdbC\x00\x80\xdeC\x00\x80\xe1C\x00\x80\xe3C\x00\x00\xeaC\x00\x80\xeeC\x00\x00\xefC\x00\x80\xefC\x00\x00\xfeC\x00\x80\x03D\x00@\x06D\x00\xc0\x11D\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00PA\x00\x00\xa0A\x00\x00\xb8A\x00\x00TB\x00\x00dB\x00\x00\xbaB\x00\x00\xfaB\x00\x00\x06C\x00\x00\x18C\x00\x002C\x00\x006C\x00\x00:C\x00\x00GC\x00\x00WC\x00\x00ZC\x00\x00\\C\x00\x00lC\x00\x00vC\x00\x00\x86C\x00\x80\x87C\x00\x00\x90C\x00\x00\x92C\x00\x00\xa8C\x00\x00\xb3C\x00\x00\xb8C\x00\x80\xbaC\x00\x00\xbcC\x00\x00\xbfC\x00\x80\xc2C\x00\x00\xc6C\x00\x80\xcaC\x00\x00\xcbC\x00\x80\xcbC\x00\x80\xcdC\x00\x00\xd0C\x00\x80\xddC\x00\x00\xdfC\x00\x80\xe4C\x00\x00\xe7C\x00\x80\xeaC\x00\x00\xebC\x00\x00\xedC\x00\x80\xfdC\x00\x00\x00D\x00\x80\x00D\x00\x80\x02D\x00\x00\x03D\x00\xc0\x07D\x00\x80\x08D\x00\x00\x0cD\x00@\rD\x00\xc0\rD\x00\x80\x0eD\x00\x80\x0fD\x00@\x10D\x00\x00 A\x00\x00\xc0A\x00\x00\xf0A\x00\x00\x0cB\x00\x00$B\x00\x008B\x00\x00HB\x00\x00\x92B\x00\x00\xb2B\x00\x00\xb6B\x00\x00\xbeB\x00\x00\xd6B\x00\x00\xe0B\x00\x00\x08C\x00\x00\tC\x00\x00\rC\x00\x00\x0eC\x00\x00\x12C\x00\x00\x19C\x00\x00\x1bC\x00\x00DC\x00\x00FC\x00\x00KC\x00\x00eC\x00\x00pC\x00\x80\x82C\x00\x80\x83C\x00\x00\x85C\x00\x80\x85C\x00\x00\x8cC\x00\x00\x93C\x00\x80\x99C\x00\x00\x9eC\x00\x80\xa1C\x00\x80\xa6C\x00\x00\xa7C\x00\x80\xa7C\x00\x80\xbeC\x00\x00\xc2C\x00\x00\xc3C\x00\x00\xcdC\x00\x00\xd5C\x00\x80\xd8C\x00\x00\xe1C\x00\x00\xe4C\x00\x00\xe9C\x00\x00\xf4C\x00\x80\xf4C\x00\x80\xf8C\x00\x00\xfcC\x00\x80\xfcC\x00\xc0\x02D\x00\x00\x04D\x00\xc0\tD\x00@\x0eD\x00\x00\x80?\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xb0A\x00\x00\xd8A\x00\x00 B\x00\x00tB\x00\x00\x80B\x00\x00\x84B\x00\x00\x86B\x00\x00\x8eB\x00\x00\xc6B\x00\x00\xecB\x00\x00\x01C\x00\x00\x1aC\x00\x00!C\x00\x00)C\x00\x00*C\x00\x00,C\x00\x00.C\x00\x000C\x00\x00JC\x00\x00LC\x00\x00PC\x00\x00UC\x00\x00XC\x00\x00^C\x00\x00}C\x00\x80\x86C\x00\x80\x8cC\x00\x00\x8dC\x00\x00\x9bC\x00\x80\x9eC\x00\x80\xa5C\x00\x80\xaeC\x00\x80\xb5C\x00\x00\xb9C\x00\x00\xbbC\x00\x00\xc1C\x00\x80\xc8C\x00\x80\xd6C\x00\x80\xdcC\x00\x00\xdeC\x00\x80\xe0C\x00\x80\xf1C\x00\x00\xf2C\x00\x80\xfaC\x00\x80\xfeC\x00@\x02D\x00\x80\x06D\x00\x00\x0bD\x00\x80\x0cD\x00\xc0\x0cD\x00\x00\x15D\x00\x00\x80@\x00\x00\xc0@\x00\x00@A\x00\x00\x80A\x00\x00\xd0A\x00\x00\xe8A\x00\x00\x82B\x00\x00\x8cB\x00\x00\xaaB\x00\x00\xc2B\x00\x00\xcaB\x00\x00\x0bC\x00\x00\'C\x00\x00VC\x00\x00YC\x00\x00aC\x00\x00yC\x00\x00\x84C\x00\x00\x8eC\x00\x00\x95C\x00\x00\x96C\x00\x80\x96C\x00\x80\x9fC\x00\x80\xb1C\x00\x00\xb2C\x00\x00\xb7C\x00\x80\xb9C\x00\x80\xc4C\x00\x80\xc5C\x00\x80\xc6C\x00\x00\xcaC\x00\x00\xccC\x00\x00\xceC\x00\x00\xd9C\x00\x80\xdfC\x00\x80\xe6C\x00\x80\xebC\x00\x00\xf1C\x00\x00\xf8C\x00\x80\xfbC\x00\x80\x01D\x00\x00\x05D\x00\x00\x06D\x00\x00\x08D\x00@\x0bD\x00\xc0\x0eD\x00\x80\x10D\x00\x00\x11D\x00@\x11D\x00@\x13D\x00\x80\x13D\x00\xc0\x14D\x00@\x15D\x00\x80\x15D\x00\xc0\x15D\x00\x00\x00@\x00\x00\xe0@\x00\x000A\x00\x00LB\x00\x00\x8aB\x00\x00\x9eB\x00\x00\xa2B\x00\x00\xccB\x00\x00\xd8B\x00\x00\xe8B\x00\x00\xf6B\x00\x00\x0fC\x00\x00\x16C\x00\x00\x1cC\x00\x00;C\x00\x00@C\x00\x00BC\x00\x00CC\x00\x00RC\x00\x00bC\x00\x00dC\x00\x00jC\x00\x00sC\x00\x00\x80C\x00\x00\x81C\x00\x00\x94C\x00\x00\x9aC\x00\x80\xa2C\x00\x80\xa9C\x00\x80\xadC\x00\x80\xbbC\x00\x00\xbdC\x00\x80\xbdC\x00\x00\xbeC\x00\x80\xccC\x00\x80\xdaC\x00\x80\xf2C\x00\x80\xf3C\x00\x00\xffC\x00\xc0\x01D\x00\x80\x05D\x00\xc0\x05D\x00\xc0\x06D\x00\x00\x07D\x00@\x07D\x00\x80\x07D\x00\x00\nD\x00\x00\x0fD\x00\x00\x10D\x00\x00\x12D\x00\x00\x13D\x00\xc0\x13D\x00@\x14D\x00\x80\x14D\x00\x00\x00\x00\x00\x00\xa0@\x00\x00\xe0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x08B\x00\x00\x18B\x00\x00(B\x00\x00pB\x00\x00\x96B\x00\x00\x98B\x00\x00\xc8B\x00\x00\xe2B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\x05C\x00\x001C\x00\x008C\x00\x009C\x00\x00<C\x00\x00HC\x00\x00OC\x00\x00cC\x00\x00iC\x00\x00uC\x00\x00{C\x00\x00|C\x00\x00\x83C\x00\x80\x8fC\x00\x00\x91C\x00\x80\x9aC\x00\x80\x9cC\x00\x80\xa4C\x00\x80\xaaC\x00\x80\xabC\x00\x00\xb6C\x00\x80\xbcC\x00\x80\xc1C\x00\x00\xc9C\x00\x00\xd7C\x00\x00\xe3C\x00\x00\xe5C\x00\x80\xe5C\x00\x00\xe8C\x00\x00\xeeC\x00\x00\xf9C\x00@\x01D\x00\x80\x04D\x00@\x05D\x00@\x08D\x00@\tD\x00@\nD\x00\x80\nD\x00\x80\x0bD\x00\x80\x11D\x00\x00\x00\x00\x00\x00`A\x00\x000B\x00\x00\\B\x00\x00\xacB\x00\x00\xbcB\x00\x00\xd2B\x00\x00\xdeB\x00\x00\xeaB\x00\x00\xeeB\x00\x00\xf8B\x00\x00\x04C\x00\x00\nC\x00\x00\x10C\x00\x00\x14C\x00\x00(C\x00\x00>C\x00\x00MC\x00\x00TC\x00\x00]C\x00\x00`C\x00\x00oC\x00\x00~C\x00\x00\x7fC\x00\x00\x82C\x00\x00\x89C\x00\x00\x8fC\x00\x80\x9dC\x00\x80\xa0C\x00\x00\xa3C\x00\x80\xa8C\x00\x00\xa9C\x00\x00\xaaC\x00\x00\xacC\x00\x80\xacC\x00\x00\xaeC\x00\x00\xafC\x00\x80\xb0C\x00\x00\xb4C\x00\x00\xbaC\x00\x00\xc0C\x00\x00\xcfC\x00\x00\xdaC\x00\x80\xe2C\x00\x00\xe6C\x00\x80\xe7C\x00\x80\xe9C\x00\x80\xf9C\x00\x80\xffC\x00@\x00D\x00\xc0\x00D\x00\xc0\x08D\x00\x00\tD\x00\xc0\nD\x00@\x0fD\x00@\x12D\x00\x00pA\x00\x00\x1cB\x00\x00,B\x00\x004B\x00\x00<B\x00\x00@B\x00\x00lB\x00\x00|B\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd4B\x00\x00\x15C\x00\x00\x1eC\x00\x00 C\x00\x00$C\x00\x005C\x00\x007C\x00\x00AC\x00\x00EC\x00\x00IC\x00\x00tC\x00\x80\x80C\x00\x00\x87C\x00\x80\x89C\x00\x80\x91C\x00\x00\x9dC\x00\x00\x9fC\x00\x80\xa3C\x00\x00\xabC\x00\x00\xb1C\x00\x80\xb3C\x00\x00\xc5C\x00\x80\xc9C\x00\x00\xd2C\x00\x00\xd3C\x00\x80\xd3C\x00\x00\xd4C\x00\x80\xd7C\x00\x80\xdbC\x00\x00\xdcC\x00\x00\xddC\x00\x00\xe0C\x00\x00\xecC\x00\x80\xecC\x00\x80\xedC\x00\x00\xf7C\x00\x00\xfaC\x00\x00\x01D\x00@\x03D\x00@\x04D\x00\xc0\x04D\x00\x80\tD\x00\x80\rD\x00\x80\x12D\x00\xc0\x12D\x00\x00\x00\x00\x00\x00@@\x00\x00\x00A\x00\x00\xc8A\x00\x00\x10B\x00\x00DB\x00\x00`B\x00\x00hB\x00\x00xB\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xdcB\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xf0B\x00\x00\xfcB\x00\x00\x11C\x00\x00\x1fC\x00\x00%C\x00\x00-C\x00\x00QC\x00\x00SC\x00\x00[C\x00\x00hC\x00\x80\x81C\x00\x80\x8aC\x00\x00\x8bC\x00\x80\x90C\x00\x80\x92C\x00\x80\x93C\x00\x00\xa0C\x00\x00\xa1C\x00\x00\xa6C\x00\x80\xb2C\x00\x80\xb8C\x00\x00\xc7C\x00\x00\xc8C\x00\x80\xceC\x00\x80\xcfC\x00\x80\xd2C\x00\x00\xd8C\x00\x00\xe2C\x00\x80\xe8C\x00\x00\xf0C\x00\x80\xf0C\x00\x00\xf3C\x00\x00\xf5C\x00\x00\xf6C\x00\x00\xfdC\x00\x00\x02D\x00@\x0cD\x00\x00\rD\x00\xc0\x0fD\x00\x00\x14D\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01'
NtbstRp58
(dp59
S'isNumeric'
p60
(dp61
g48
I01
sg56
I01
ssS'trials'
p62
g36
sS'dataTypes'
p63
(lp64
g48
ag56
asS'dataShape'
p65
(lp66
I11
aI55
asbsS'method'
p67
S'fullRandom'
p68
sS'sequenceIndices'
p69
cnumpy.core.multiarray
_reconstruct
p70
(g51
(I0
tS'b'
tRp71
(I1
(I11
I55
tg54
(S'O4'
I0
I1
tRp72
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp73
I10
aI6
aI4
aI1
aI8
aI8
aI4
aI0
aI1
aI4
aI10
aI7
aI8
aI6
aI4
aI10
aI4
aI6
aI3
aI10
aI2
aI0
aI1
aI4
aI5
aI9
aI8
aI0
aI6
aI5
aI0
aI7
aI0
aI4
aI4
aI1
aI2
aI2
aI0
aI4
aI9
aI1
aI2
aI9
aI4
aI0
aI10
aI7
aI3
aI6
aI9
aI10
aI6
aI1
aI6
aI4
aI5
aI2
aI7
aI9
aI10
aI4
aI0
aI3
aI7
aI8
aI7
aI7
aI8
aI3
aI0
aI7
aI7
aI2
aI6
aI8
aI10
aI6
aI8
aI0
aI1
aI7
aI5
aI7
aI10
aI4
aI9
aI8
aI7
aI6
aI4
aI5
aI5
aI0
aI7
aI4
aI10
aI8
aI2
aI6
aI5
aI2
aI5
aI9
aI6
aI3
aI4
aI8
aI6
aI5
aI6
aI2
aI3
aI3
aI3
aI2
aI0
aI6
aI0
aI5
aI3
aI6
aI2
aI10
aI6
aI5
aI2
aI0
aI7
aI10
aI4
aI7
aI9
aI8
aI3
aI10
aI2
aI0
aI4
aI8
aI10
aI7
aI9
aI0
aI2
aI7
aI10
aI6
aI9
aI9
aI9
aI8
aI7
aI9
aI10
aI3
aI1
aI6
aI7
aI6
aI6
aI4
aI2
aI8
aI4
aI10
aI8
aI10
aI10
aI9
aI10
aI6
aI1
aI3
aI6
aI7
aI8
aI1
aI3
aI0
aI8
aI0
aI8
aI9
aI8
aI0
aI6
aI7
aI6
aI3
aI10
aI10
aI5
aI0
aI10
aI3
aI8
aI5
aI5
aI7
aI3
aI1
aI3
aI10
aI10
aI2
aI7
aI10
aI7
aI6
aI7
aI4
aI10
aI9
aI6
aI7
aI10
aI10
aI9
aI5
aI5
aI9
aI5
aI0
aI9
aI9
aI5
aI6
aI1
aI9
aI10
aI2
aI3
aI0
aI9
aI4
aI1
aI0
aI4
aI4
aI8
aI0
aI2
aI9
aI2
aI0
aI7
aI5
aI0
aI3
aI3
aI8
aI5
aI1
aI6
aI2
aI10
aI2
aI9
aI3
aI4
aI1
aI3
aI1
aI3
aI8
aI6
aI4
aI5
aI2
aI7
aI2
aI6
aI9
aI5
aI7
aI5
aI4
aI7
aI10
aI7
aI4
aI0
aI2
aI9
aI10
aI10
aI3
aI8
aI10
aI4
aI9
aI6
aI3
aI5
aI5
aI2
aI0
aI6
aI4
aI3
aI9
aI0
aI7
aI0
aI3
aI1
aI10
aI2
aI6
aI3
aI4
aI5
aI9
aI5
aI1
aI3
aI8
aI1
aI3
aI9
aI8
aI2
aI7
aI5
aI8
aI9
aI2
aI6
aI5
aI5
aI4
aI7
aI9
aI3
aI4
aI1
aI10
aI8
aI8
aI6
aI1
aI8
aI9
aI9
aI1
aI2
aI9
aI4
aI2
aI6
aI0
aI1
aI10
aI9
aI4
aI2
aI0
aI9
aI6
aI2
aI6
aI2
aI10
aI6
aI0
aI7
aI10
aI9
aI0
aI2
aI2
aI1
aI1
aI10
aI4
aI2
aI3
aI6
aI7
aI4
aI2
aI5
aI5
aI10
aI6
aI4
aI5
aI4
aI6
aI10
aI3
aI10
aI3
aI9
aI8
aI0
aI5
aI6
aI4
aI4
aI9
aI6
aI8
aI4
aI7
aI1
aI5
aI8
aI2
aI4
aI10
aI0
aI8
aI8
aI8
aI8
aI9
aI4
aI3
aI1
aI9
aI8
aI0
aI8
aI5
aI7
aI2
aI10
aI0
aI0
aI8
aI2
aI6
aI2
aI5
aI0
aI0
aI5
aI7
aI10
aI4
aI3
aI3
aI1
aI9
aI1
aI5
aI0
aI3
aI4
aI4
aI1
aI1
aI1
aI10
aI7
aI6
aI1
aI5
aI6
aI8
aI1
aI3
aI0
aI1
aI3
aI1
aI3
aI9
aI8
aI4
aI8
aI5
aI2
aI5
aI5
aI10
aI3
aI6
aI9
aI7
aI2
aI10
aI10
aI5
aI2
aI9
aI5
aI8
aI7
aI3
aI5
aI6
aI1
aI0
aI2
aI7
aI7
aI2
aI4
aI7
aI8
aI5
aI6
aI8
aI0
aI3
aI2
aI0
aI4
aI7
aI3
aI7
aI2
aI3
aI3
aI7
aI7
aI1
aI5
aI10
aI1
aI4
aI1
aI6
aI8
aI1
aI8
aI0
aI9
aI2
aI2
aI1
aI1
aI4
aI8
aI5
aI5
aI0
aI3
aI8
aI1
aI1
aI8
aI0
aI2
aI5
aI10
aI6
aI3
aI0
aI7
aI9
aI1
aI5
aI7
aI1
aI1
aI1
aI10
aI1
aI3
aI3
aI9
aI0
aI2
aI9
aI4
aI10
aI0
aI0
aI7
aI3
aI8
aI1
aI6
aI3
aI9
aI7
aI8
aI1
aI1
aI2
aI8
aI5
aI2
aI0
aI1
aI9
aI3
aI5
aI9
aI4
aI9
aI3
aI9
aI0
aI4
aI7
aI2
aI5
aI7
aI6
aI1
atbsS'finished'
p74
I00
sS'nReps'
p75
I55
sS'nRemaining'
p76
I5
sS'trialList'
p77
(lp78
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
asS'seed'
p79
NsS'thisIndex'
p80
I5
sS'thisN'
p81
I599
sS'thisTrialN'
p82
I5
sS'nTotal'
p83
I605
sS'_warnUseOfNext'
p84
I01
sbasS'saveWideText'
p85
I01
sS'thisEntry'
p86
(dp87
sS'version'
p88
S''
sS'_paramNamesSoFar'
p89
(lp90
sS'entries'
p91
(lp92
(dp93
g16
(lp94
S'k'
asS'.thisTrial'
p95
I10
sS'.thisRepN'
p96
I0
sg30
VM
sg31
g32
sS'.thisTrialN'
p97
I0
sS'.thisN'
p98
I0
sS'.thisIndex'
p99
I10
sg15
(lp100
S'k'
asg17
S'Y'
sg14
I1
sa(dp101
g16
(lp102
S'd'
asg95
I4
sS'.thisRepN'
p103
I0
sg30
VM
sg31
g32
sS'.thisTrialN'
p104
I1
sS'.thisN'
p105
I1
sS'.thisIndex'
p106
I4
sg15
(lp107
S'd'
asg17
S'Y'
sg14
I1
sa(dp108
g16
(lp109
S'd'
asg18
S'N'
sS'.thisRepN'
p110
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p111
I2
sS'.thisN'
p112
I2
sS'.thisIndex'
p113
I6
sg15
(lp114
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I6
sa(dp115
g16
(lp116
S'd'
asg18
S'Y'
sS'.thisRepN'
p117
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p118
I3
sS'.thisN'
p119
I3
sS'.thisIndex'
p120
I10
sg15
(lp121
S'k'
asg30
VM
sg17
S'N'
sg14
I1
sg19
(lp122
S'space'
p123
asg95
I10
sa(dp124
g16
(lp125
S'k'
asg18
S'N'
sS'.thisRepN'
p126
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p127
I4
sS'.thisN'
p128
I4
sS'.thisIndex'
p129
I5
sg15
(lp130
S'd'
asg30
VM
sg17
S'N'
sg14
I1
sg19
Nsg95
I5
sa(dp131
g16
(lp132
S'd'
asg18
S'Y'
sS'.thisRepN'
p133
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p134
I5
sS'.thisN'
p135
I5
sS'.thisIndex'
p136
I7
sg15
(lp137
S'k'
asg30
VM
sg17
S'N'
sg14
I1
sg19
(lp138
S'space'
p139
asg95
I7
sa(dp140
g16
(lp141
S'k'
asg18
S'Y'
sS'.thisRepN'
p142
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p143
I6
sS'.thisN'
p144
I6
sS'.thisIndex'
p145
I5
sg15
(lp146
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp147
S'space'
p148
asg95
I5
sa(dp149
g16
(lp150
S'k'
asg18
S'N'
sS'.thisRepN'
p151
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p152
I7
sS'.thisN'
p153
I7
sS'.thisIndex'
p154
I6
sg15
(lp155
S'd'
asg30
VM
sg17
S'N'
sg14
I1
sg19
(lp156
S'space'
p157
asg95
I6
sa(dp158
g16
(lp159
S'k'
asg18
S'N'
sS'.thisRepN'
p160
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p161
I8
sS'.thisN'
p162
I8
sS'.thisIndex'
p163
I10
sg15
(lp164
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp165
S'space'
p166
asg95
I10
sa(dp167
g16
(lp168
S'k'
asg18
S'N'
sS'.thisRepN'
p169
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p170
I9
sS'.thisN'
p171
I9
sS'.thisIndex'
p172
I0
sg15
(lp173
S'd'
asg30
VM
sg17
S'N'
sg14
I1
sg19
Nsg95
I0
sa(dp174
g16
(lp175
S'd'
asg18
S'N'
sS'.thisRepN'
p176
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p177
I10
sS'.thisN'
p178
I10
sS'.thisIndex'
p179
I3
sg15
(lp180
S'k'
asg30
VM
sg17
S'N'
sg14
I1
sg19
Nsg95
I3
sa(dp181
g16
(lp182
S'd'
asg18
S'N'
sS'.thisRepN'
p183
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p184
I0
sS'.thisN'
p185
I11
sS'.thisIndex'
p186
I6
sg15
(lp187
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I6
sa(dp188
g16
(lp189
S'k'
asg18
S'Y'
sS'.thisRepN'
p190
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p191
I1
sS'.thisN'
p192
I12
sS'.thisIndex'
p193
I5
sg15
(lp194
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp195
S'space'
p196
asg95
I5
sa(dp197
g16
(lp198
S'k'
asg18
S'Y'
sS'.thisRepN'
p199
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p200
I2
sS'.thisN'
p201
I13
sS'.thisIndex'
p202
I2
sg15
(lp203
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp204
S'space'
p205
asg95
I2
sa(dp206
g16
(lp207
S'd'
asg18
S'Y'
sS'.thisRepN'
p208
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p209
I3
sS'.thisN'
p210
I14
sS'.thisIndex'
p211
I8
sg15
(lp212
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp213
S'space'
p214
asg95
I8
sa(dp215
g16
(lp216
S'd'
asg18
S'N'
sS'.thisRepN'
p217
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p218
I4
sS'.thisN'
p219
I15
sS'.thisIndex'
p220
I9
sg15
(lp221
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp222
S'space'
p223
asg95
I9
sa(dp224
g16
(lp225
S'k'
asg18
S'Y'
sS'.thisRepN'
p226
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p227
I5
sS'.thisN'
p228
I16
sS'.thisIndex'
p229
I5
sg15
(lp230
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp231
S'space'
p232
asg95
I5
sa(dp233
g16
(lp234
S'd'
asg18
S'N'
sS'.thisRepN'
p235
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p236
I6
sS'.thisN'
p237
I17
sS'.thisIndex'
p238
I4
sg15
(lp239
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp240
g16
(lp241
S'k'
asg18
S'Y'
sS'.thisRepN'
p242
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p243
I7
sS'.thisN'
p244
I18
sS'.thisIndex'
p245
I4
sg15
(lp246
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp247
S'space'
p248
asg95
I4
sa(dp249
g16
(lp250
S'd'
asg18
S'N'
sS'.thisRepN'
p251
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p252
I8
sS'.thisN'
p253
I19
sS'.thisIndex'
p254
I4
sg15
(lp255
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp256
g16
(lp257
S'k'
asg18
S'N'
sS'.thisRepN'
p258
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p259
I9
sS'.thisN'
p260
I20
sS'.thisIndex'
p261
I2
sg15
(lp262
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I2
sa(dp263
g16
(lp264
S'd'
asg18
S'Y'
sS'.thisRepN'
p265
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p266
I10
sS'.thisN'
p267
I21
sS'.thisIndex'
p268
I0
sg15
(lp269
S'k'
asg30
VM
sg17
S'N'
sg14
I1
sg19
Nsg95
I0
sa(dp270
g16
(lp271
S'd'
asg18
S'N'
sS'.thisRepN'
p272
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p273
I0
sS'.thisN'
p274
I22
sS'.thisIndex'
p275
I4
sg15
(lp276
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp277
g16
(lp278
S'k'
asg18
S'N'
sS'.thisRepN'
p279
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p280
I1
sS'.thisN'
p281
I23
sS'.thisIndex'
p282
I2
sg15
(lp283
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp284
S'space'
p285
asg95
I2
sa(dp286
g16
(lp287
S'k'
asg18
S'Y'
sS'.thisRepN'
p288
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p289
I2
sS'.thisN'
p290
I24
sS'.thisIndex'
p291
I3
sg15
(lp292
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp293
S'space'
p294
asg95
I3
sa(dp295
g16
(lp296
S'k'
asg18
S'Y'
sS'.thisRepN'
p297
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p298
I3
sS'.thisN'
p299
I25
sS'.thisIndex'
p300
I10
sg15
(lp301
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp302
S'space'
p303
asg95
I10
sa(dp304
g16
(lp305
S'd'
asg18
S'Y'
sS'.thisRepN'
p306
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p307
I4
sS'.thisN'
p308
I26
sS'.thisIndex'
p309
I5
sg15
(lp310
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp311
S'space'
p312
asg95
I5
sa(dp313
g16
(lp314
S'k'
asg18
S'Y'
sS'.thisRepN'
p315
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p316
I5
sS'.thisN'
p317
I27
sS'.thisIndex'
p318
I4
sg15
(lp319
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp320
S'space'
p321
asg95
I4
sa(dp322
g16
(lp323
S'd'
asg18
S'Y'
sS'.thisRepN'
p324
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p325
I6
sS'.thisN'
p326
I28
sS'.thisIndex'
p327
I7
sg15
(lp328
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp329
S'space'
p330
asg95
I7
sa(dp331
g16
(lp332
S'k'
asg18
S'Y'
sS'.thisRepN'
p333
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p334
I7
sS'.thisN'
p335
I29
sS'.thisIndex'
p336
I5
sg15
(lp337
S'd'
asg30
VM
sg17
S'N'
sg14
I1
sg19
(lp338
S'space'
p339
asg95
I5
sa(dp340
g16
(lp341
S'd'
asg18
S'N'
sS'.thisRepN'
p342
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p343
I8
sS'.thisN'
p344
I30
sS'.thisIndex'
p345
I3
sg15
(lp346
S'k'
asg30
VM
sg17
S'N'
sg14
I1
sg19
Nsg95
I3
sa(dp347
g16
(lp348
S'k'
asg18
S'N'
sS'.thisRepN'
p349
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p350
I9
sS'.thisN'
p351
I31
sS'.thisIndex'
p352
I7
sg15
(lp353
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp354
g16
(lp355
S'k'
asg18
S'N'
sS'.thisRepN'
p356
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p357
I10
sS'.thisN'
p358
I32
sS'.thisIndex'
p359
I7
sg15
(lp360
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp361
S'space'
p362
asg95
I7
sa(dp363
g16
(lp364
S'd'
asg18
S'Y'
sS'.thisRepN'
p365
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p366
I0
sS'.thisN'
p367
I33
sS'.thisIndex'
p368
I1
sg15
(lp369
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp370
S'space'
p371
asg95
I1
sa(dp372
g16
(lp373
S'k'
asg18
S'Y'
sS'.thisRepN'
p374
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p375
I1
sS'.thisN'
p376
I34
sS'.thisIndex'
p377
I7
sg15
(lp378
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp379
g16
(lp380
S'k'
asg18
S'Y'
sS'.thisRepN'
p381
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p382
I2
sS'.thisN'
p383
I35
sS'.thisIndex'
p384
I3
sg15
(lp385
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp386
S'space'
p387
asg95
I3
sa(dp388
g16
(lp389
S'k'
asg18
S'Y'
sS'.thisRepN'
p390
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p391
I3
sS'.thisN'
p392
I36
sS'.thisIndex'
p393
I10
sg15
(lp394
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp395
S'space'
p396
asg95
I10
sa(dp397
g16
(lp398
S'k'
asg18
S'Y'
sS'.thisRepN'
p399
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p400
I4
sS'.thisN'
p401
I37
sS'.thisIndex'
p402
I0
sg15
(lp403
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp404
S'space'
p405
asg95
I0
sa(dp406
g16
(lp407
S'k'
asg18
S'Y'
sS'.thisRepN'
p408
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p409
I5
sS'.thisN'
p410
I38
sS'.thisIndex'
p411
I7
sg15
(lp412
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp413
S'space'
p414
asg95
I7
sa(dp415
g16
(lp416
S'k'
asg18
S'Y'
sS'.thisRepN'
p417
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p418
I6
sS'.thisN'
p419
I39
sS'.thisIndex'
p420
I9
sg15
(lp421
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp422
S'space'
p423
asg95
I9
sa(dp424
g16
(lp425
S'd'
asg18
S'N'
sS'.thisRepN'
p426
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p427
I7
sS'.thisN'
p428
I40
sS'.thisIndex'
p429
I4
sg15
(lp430
S'k'
asg30
VM
sg17
S'N'
sg14
I1
sg19
Nsg95
I4
sa(dp431
g16
(lp432
S'd'
asg18
S'N'
sS'.thisRepN'
p433
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p434
I8
sS'.thisN'
p435
I41
sS'.thisIndex'
p436
I3
sg15
(lp437
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I3
sa(dp438
g16
(lp439
S'd'
asg18
S'N'
sS'.thisRepN'
p440
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p441
I9
sS'.thisN'
p442
I42
sS'.thisIndex'
p443
I7
sg15
(lp444
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp445
S'space'
p446
asg95
I7
sa(dp447
g16
(lp448
S'd'
asg18
S'Y'
sS'.thisRepN'
p449
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p450
I10
sS'.thisN'
p451
I43
sS'.thisIndex'
p452
I9
sg15
(lp453
S'k'
asg30
VM
sg17
S'N'
sg14
I1
sg19
(lp454
S'space'
p455
asg95
I9
sa(dp456
g16
(lp457
S'k'
asg18
S'Y'
sS'.thisRepN'
p458
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p459
I0
sS'.thisN'
p460
I44
sS'.thisIndex'
p461
I8
sg15
(lp462
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp463
S'space'
p464
asg95
I8
sa(dp465
g16
(lp466
S'k'
asg18
S'Y'
sS'.thisRepN'
p467
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p468
I1
sS'.thisN'
p469
I45
sS'.thisIndex'
p470
I9
sg15
(lp471
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp472
S'space'
p473
asg95
I9
sa(dp474
g16
(lp475
S'k'
asg18
S'N'
sS'.thisRepN'
p476
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p477
I2
sS'.thisN'
p478
I46
sS'.thisIndex'
p479
I3
sg15
(lp480
S'k'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I3
sa(dp481
g16
(lp482
S'd'
asg18
S'N'
sS'.thisRepN'
p483
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p484
I3
sS'.thisN'
p485
I47
sS'.thisIndex'
p486
I9
sg15
(lp487
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I9
sa(dp488
g16
(lp489
S'd'
asg18
S'N'
sS'.thisRepN'
p490
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p491
I4
sS'.thisN'
p492
I48
sS'.thisIndex'
p493
I9
sg15
(lp494
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
(lp495
S'space'
p496
asg95
I9
sa(dp497
g16
(lp498
S'd'
asg18
S'N'
sg22
I39
sS'.thisN'
p499
I49
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p500
I5
sS'.thisRepN'
p501
I4
sg21
I39
sS'.thisIndex'
p502
I10
sg23
I25
sg15
(lp503
S'd'
asg30
VM
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp504
g16
(lp505
S'k'
asg95
I3
sS'.thisRepN'
p506
I4
sg30
VM
sg31
g32
sS'.thisTrialN'
p507
I6
sS'.thisN'
p508
I50
sS'.thisIndex'
p509
I3
sg15
(lp510
S'k'
asg17
S'Y'
sg14
I2
sa(dp511
g16
(lp512
S'd'
asg95
I6
sS'.thisRepN'
p513
I4
sg30
VM
sg31
g32
sS'.thisTrialN'
p514
I7
sS'.thisN'
p515
I51
sS'.thisIndex'
p516
I6
sg15
(lp517
S'd'
asg17
S'Y'
sg14
I2
sa(dp518
g16
(lp519
S'k'
asg18
S'N'
sS'.thisRepN'
p520
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p521
I8
sS'.thisN'
p522
I52
sS'.thisIndex'
p523
I1
sg15
(lp524
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp525
g16
(lp526
S'd'
asg18
S'Y'
sS'.thisRepN'
p527
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p528
I9
sS'.thisN'
p529
I53
sS'.thisIndex'
p530
I2
sg15
(lp531
S'k'
asg30
VM
sg17
S'N'
sg14
I2
sg19
(lp532
S'space'
p533
asg95
I2
sa(dp534
g16
(lp535
S'k'
asg18
S'N'
sS'.thisRepN'
p536
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p537
I10
sS'.thisN'
p538
I54
sS'.thisIndex'
p539
I1
sg15
(lp540
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp541
g16
(lp542
S'k'
asg18
S'Y'
sS'.thisRepN'
p543
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p544
I0
sS'.thisN'
p545
I55
sS'.thisIndex'
p546
I8
sg15
(lp547
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp548
S'space'
p549
asg95
I8
sa(dp550
g16
(lp551
S'd'
asg18
S'N'
sS'.thisRepN'
p552
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p553
I1
sS'.thisN'
p554
I56
sS'.thisIndex'
p555
I10
sg15
(lp556
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp557
g16
(lp558
S'd'
asg18
S'Y'
sS'.thisRepN'
p559
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p560
I2
sS'.thisN'
p561
I57
sS'.thisIndex'
p562
I2
sg15
(lp563
S'k'
asg30
VM
sg17
S'N'
sg14
I2
sg19
(lp564
S'space'
p565
asg95
I2
sa(dp566
g16
(lp567
S'd'
asg18
S'N'
sS'.thisRepN'
p568
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p569
I3
sS'.thisN'
p570
I58
sS'.thisIndex'
p571
I10
sg15
(lp572
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp573
g16
(lp574
S'd'
asg18
S'N'
sS'.thisRepN'
p575
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p576
I4
sS'.thisN'
p577
I59
sS'.thisIndex'
p578
I9
sg15
(lp579
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp580
g16
(lp581
S'd'
asg18
S'N'
sS'.thisRepN'
p582
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p583
I5
sS'.thisN'
p584
I60
sS'.thisIndex'
p585
I7
sg15
(lp586
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp587
g16
(lp588
S'd'
asg18
S'Y'
sS'.thisRepN'
p589
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p590
I6
sS'.thisN'
p591
I61
sS'.thisIndex'
p592
I4
sg15
(lp593
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp594
g16
(lp595
S'd'
asg18
S'Y'
sS'.thisRepN'
p596
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p597
I7
sS'.thisN'
p598
I62
sS'.thisIndex'
p599
I10
sg15
(lp600
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp601
S'space'
p602
asg95
I10
sa(dp603
g16
(lp604
S'k'
asg18
S'Y'
sS'.thisRepN'
p605
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p606
I8
sS'.thisN'
p607
I63
sS'.thisIndex'
p608
I9
sg15
(lp609
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp610
g16
(lp611
S'd'
asg18
S'N'
sS'.thisRepN'
p612
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p613
I9
sS'.thisN'
p614
I64
sS'.thisIndex'
p615
I4
sg15
(lp616
S'k'
asg30
VM
sg17
S'N'
sg14
I2
sg19
(lp617
S'space'
p618
asg95
I4
sa(dp619
g16
(lp620
S'k'
asg18
S'N'
sS'.thisRepN'
p621
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p622
I10
sS'.thisN'
p623
I65
sS'.thisIndex'
p624
I5
sg15
(lp625
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp626
g16
(lp627
S'k'
asg18
S'Y'
sS'.thisRepN'
p628
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p629
I0
sS'.thisN'
p630
I66
sS'.thisIndex'
p631
I4
sg15
(lp632
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp633
S'space'
p634
asg95
I4
sa(dp635
g16
(lp636
S'k'
asg18
S'Y'
sS'.thisRepN'
p637
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p638
I1
sS'.thisN'
p639
I67
sS'.thisIndex'
p640
I4
sg15
(lp641
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp642
g16
(lp643
S'k'
asg18
S'Y'
sS'.thisRepN'
p644
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p645
I2
sS'.thisN'
p646
I68
sS'.thisIndex'
p647
I0
sg15
(lp648
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp649
S'space'
p650
asg95
I0
sa(dp651
g16
(lp652
S'd'
asg18
S'Y'
sS'.thisRepN'
p653
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p654
I3
sS'.thisN'
p655
I69
sS'.thisIndex'
p656
I6
sg15
(lp657
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp658
S'space'
p659
asg95
I6
sa(dp660
g16
(lp661
S'k'
asg18
S'Y'
sS'.thisRepN'
p662
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p663
I4
sS'.thisN'
p664
I70
sS'.thisIndex'
p665
I5
sg15
(lp666
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp667
S'space'
p668
asg95
I5
sa(dp669
g16
(lp670
S'k'
asg18
S'N'
sS'.thisRepN'
p671
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p672
I5
sS'.thisN'
p673
I71
sS'.thisIndex'
p674
I4
sg15
(lp675
S'd'
asg30
VM
sg17
S'N'
sg14
I2
sg19
(lp676
S'space'
p677
asg95
I4
sa(dp678
g16
(lp679
S'd'
asg18
S'Y'
sS'.thisRepN'
p680
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p681
I6
sS'.thisN'
p682
I72
sS'.thisIndex'
p683
I1
sg15
(lp684
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp685
g16
(lp686
S'd'
asg18
S'Y'
sS'.thisRepN'
p687
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p688
I7
sS'.thisN'
p689
I73
sS'.thisIndex'
p690
I3
sg15
(lp691
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp692
g16
(lp693
S'd'
asg18
S'Y'
sS'.thisRepN'
p694
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p695
I8
sS'.thisN'
p696
I74
sS'.thisIndex'
p697
I1
sg15
(lp698
S'k'
asg30
VM
sg17
S'N'
sg14
I2
sg19
(lp699
S'space'
p700
asg95
I1
sa(dp701
g16
(lp702
S'd'
asg18
S'Y'
sS'.thisRepN'
p703
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p704
I9
sS'.thisN'
p705
I75
sS'.thisIndex'
p706
I7
sg15
(lp707
S'k'
asg30
VM
sg17
S'N'
sg14
I2
sg19
(lp708
S'space'
p709
asg95
I7
sa(dp710
g16
(lp711
S'd'
asg18
S'N'
sS'.thisRepN'
p712
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p713
I10
sS'.thisN'
p714
I76
sS'.thisIndex'
p715
I7
sg15
(lp716
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp717
g16
(lp718
S'k'
asg18
S'Y'
sS'.thisRepN'
p719
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p720
I0
sS'.thisN'
p721
I77
sS'.thisIndex'
p722
I0
sg15
(lp723
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp724
S'space'
p725
asg95
I0
sa(dp726
g16
(lp727
S'k'
asg18
S'N'
sS'.thisRepN'
p728
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p729
I1
sS'.thisN'
p730
I78
sS'.thisIndex'
p731
I0
sg15
(lp732
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp733
g16
(lp734
S'd'
asg18
S'N'
sS'.thisRepN'
p735
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p736
I2
sS'.thisN'
p737
I79
sS'.thisIndex'
p738
I6
sg15
(lp739
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I6
sa(dp740
g16
(lp741
S'd'
asg18
S'N'
sS'.thisRepN'
p742
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p743
I3
sS'.thisN'
p744
I80
sS'.thisIndex'
p745
I1
sg15
(lp746
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp747
g16
(lp748
S'd'
asg18
S'Y'
sS'.thisRepN'
p749
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p750
I4
sS'.thisN'
p751
I81
sS'.thisIndex'
p752
I6
sg15
(lp753
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp754
S'space'
p755
asg95
I6
sa(dp756
g16
(lp757
S'k'
asg18
S'Y'
sS'.thisRepN'
p758
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p759
I5
sS'.thisN'
p760
I82
sS'.thisIndex'
p761
I0
sg15
(lp762
S'd'
asg30
VM
sg17
S'N'
sg14
I2
sg19
(lp763
S'space'
p764
asg95
I0
sa(dp765
g16
(lp766
S'k'
asg18
S'Y'
sS'.thisRepN'
p767
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p768
I6
sS'.thisN'
p769
I83
sS'.thisIndex'
p770
I10
sg15
(lp771
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp772
S'space'
p773
asg95
I10
sa(dp774
g16
(lp775
S'k'
asg18
S'Y'
sS'.thisRepN'
p776
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p777
I7
sS'.thisN'
p778
I84
sS'.thisIndex'
p779
I10
sg15
(lp780
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp781
S'space'
p782
asg95
I10
sa(dp783
g16
(lp784
S'k'
asg18
S'Y'
sS'.thisRepN'
p785
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p786
I8
sS'.thisN'
p787
I85
sS'.thisIndex'
p788
I5
sg15
(lp789
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp790
S'space'
p791
asg95
I5
sa(dp792
g16
(lp793
S'd'
asg18
S'N'
sS'.thisRepN'
p794
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p795
I9
sS'.thisN'
p796
I86
sS'.thisIndex'
p797
I8
sg15
(lp798
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp799
g16
(lp800
S'k'
asg18
S'N'
sS'.thisRepN'
p801
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p802
I10
sS'.thisN'
p803
I87
sS'.thisIndex'
p804
I1
sg15
(lp805
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp806
S'space'
p807
asg95
I1
sa(dp808
g16
(lp809
S'k'
asg18
S'N'
sS'.thisRepN'
p810
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p811
I0
sS'.thisN'
p812
I88
sS'.thisIndex'
p813
I1
sg15
(lp814
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp815
S'space'
p816
asg95
I1
sa(dp817
g16
(lp818
S'd'
asg18
S'N'
sS'.thisRepN'
p819
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p820
I1
sS'.thisN'
p821
I89
sS'.thisIndex'
p822
I3
sg15
(lp823
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp824
g16
(lp825
S'd'
asg18
S'Y'
sS'.thisRepN'
p826
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p827
I2
sS'.thisN'
p828
I90
sS'.thisIndex'
p829
I0
sg15
(lp830
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp831
S'space'
p832
asg95
I0
sa(dp833
g16
(lp834
S'd'
asg18
S'N'
sS'.thisRepN'
p835
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p836
I3
sS'.thisN'
p837
I91
sS'.thisIndex'
p838
I3
sg15
(lp839
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp840
g16
(lp841
S'k'
asg18
S'Y'
sS'.thisRepN'
p842
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p843
I4
sS'.thisN'
p844
I92
sS'.thisIndex'
p845
I1
sg15
(lp846
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp847
g16
(lp848
S'd'
asg18
S'Y'
sS'.thisRepN'
p849
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p850
I5
sS'.thisN'
p851
I93
sS'.thisIndex'
p852
I2
sg15
(lp853
S'k'
asg30
VM
sg17
S'N'
sg14
I2
sg19
(lp854
S'space'
p855
asg95
I2
sa(dp856
g16
(lp857
S'k'
asg18
S'N'
sS'.thisRepN'
p858
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p859
I6
sS'.thisN'
p860
I94
sS'.thisIndex'
p861
I8
sg15
(lp862
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp863
g16
(lp864
S'k'
asg18
S'N'
sS'.thisRepN'
p865
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p866
I7
sS'.thisN'
p867
I95
sS'.thisIndex'
p868
I3
sg15
(lp869
S'd'
asg30
VM
sg17
S'N'
sg14
I2
sg19
(lp870
S'space'
p871
asg95
I3
sa(dp872
g16
(lp873
S'k'
asg18
S'N'
sS'.thisRepN'
p874
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p875
I8
sS'.thisN'
p876
I96
sS'.thisIndex'
p877
I0
sg15
(lp878
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp879
g16
(lp880
S'd'
asg18
S'N'
sS'.thisRepN'
p881
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p882
I9
sS'.thisN'
p883
I97
sS'.thisIndex'
p884
I5
sg15
(lp885
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp886
S'space'
p887
asg95
I5
sa(dp888
g16
(lp889
S'd'
asg18
S'Y'
sS'.thisRepN'
p890
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p891
I10
sS'.thisN'
p892
I98
sS'.thisIndex'
p893
I1
sg15
(lp894
S'd'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp895
S'space'
p896
asg95
I1
sa(dp897
g16
(lp898
S'k'
asg18
S'N'
sg22
I35
sS'.thisN'
p899
I99
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p900
I0
sS'.thisRepN'
p901
I9
sg21
I41
sS'.thisIndex'
p902
I4
sg23
I25
sg15
(lp903
S'k'
asg30
VM
sg17
S'Y'
sg14
I2
sg19
(lp904
S'space'
p905
asg95
I4
sa(dp906
g16
(lp907
S'k'
asg95
I7
sS'.thisRepN'
p908
I9
sg30
VM
sg31
g32
sS'.thisTrialN'
p909
I1
sS'.thisN'
p910
I100
sS'.thisIndex'
p911
I7
sg15
(lp912
S'k'
asg17
S'Y'
sg14
I3
sa(dp913
g16
(lp914
S'd'
asg95
I5
sS'.thisRepN'
p915
I9
sg30
VM
sg31
g32
sS'.thisTrialN'
p916
I2
sS'.thisN'
p917
I101
sS'.thisIndex'
p918
I5
sg15
(lp919
S'd'
asg17
S'Y'
sg14
I3
sa(dp920
g16
(lp921
S'k'
asg18
S'Y'
sS'.thisRepN'
p922
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p923
I3
sS'.thisN'
p924
I102
sS'.thisIndex'
p925
I6
sg15
(lp926
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp927
g16
(lp928
S'k'
asg18
S'N'
sS'.thisRepN'
p929
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p930
I4
sS'.thisN'
p931
I103
sS'.thisIndex'
p932
I9
sg15
(lp933
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I9
sa(dp934
g16
(lp935
S'd'
asg18
S'N'
sS'.thisRepN'
p936
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p937
I5
sS'.thisN'
p938
I104
sS'.thisIndex'
p939
I9
sg15
(lp940
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp941
S'space'
p942
asg95
I9
sa(dp943
g16
(lp944
S'k'
asg18
S'Y'
sS'.thisRepN'
p945
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p946
I6
sS'.thisN'
p947
I105
sS'.thisIndex'
p948
I8
sg15
(lp949
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp950
S'space'
p951
asg95
I8
sa(dp952
g16
(lp953
S'k'
asg18
S'N'
sS'.thisRepN'
p954
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p955
I7
sS'.thisN'
p956
I106
sS'.thisIndex'
p957
I9
sg15
(lp958
S'd'
asg30
VM
sg17
S'N'
sg14
I3
sg19
Nsg95
I9
sa(dp959
g16
(lp960
S'd'
asg18
S'N'
sS'.thisRepN'
p961
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p962
I8
sS'.thisN'
p963
I107
sS'.thisIndex'
p964
I3
sg15
(lp965
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp966
g16
(lp967
S'k'
asg18
S'N'
sS'.thisRepN'
p968
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p969
I9
sS'.thisN'
p970
I108
sS'.thisIndex'
p971
I6
sg15
(lp972
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp973
g16
(lp974
S'k'
asg18
S'Y'
sS'.thisRepN'
p975
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p976
I10
sS'.thisN'
p977
I109
sS'.thisIndex'
p978
I1
sg15
(lp979
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp980
S'space'
p981
asg95
I1
sa(dp982
g16
(lp983
S'k'
asg18
S'Y'
sS'.thisRepN'
p984
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p985
I0
sS'.thisN'
p986
I110
sS'.thisIndex'
p987
I10
sg15
(lp988
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp989
g16
(lp990
S'd'
asg18
S'Y'
sS'.thisRepN'
p991
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p992
I1
sS'.thisN'
p993
I111
sS'.thisIndex'
p994
I8
sg15
(lp995
S'k'
asg30
VM
sg17
S'N'
sg14
I3
sg19
(lp996
S'space'
p997
asg95
I8
sa(dp998
g16
(lp999
S'k'
asg18
S'N'
sS'.thisRepN'
p1000
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1001
I2
sS'.thisN'
p1002
I112
sS'.thisIndex'
p1003
I3
sg15
(lp1004
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp1005
g16
(lp1006
S'd'
asg18
S'N'
sS'.thisRepN'
p1007
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1008
I3
sS'.thisN'
p1009
I113
sS'.thisIndex'
p1010
I7
sg15
(lp1011
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I7
sa(dp1012
g16
(lp1013
S'd'
asg18
S'Y'
sS'.thisRepN'
p1014
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1015
I4
sS'.thisN'
p1016
I114
sS'.thisIndex'
p1017
I10
sg15
(lp1018
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp1019
S'space'
p1020
asg95
I10
sa(dp1021
g16
(lp1022
S'k'
asg18
S'N'
sS'.thisRepN'
p1023
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1024
I5
sS'.thisN'
p1025
I115
sS'.thisIndex'
p1026
I10
sg15
(lp1027
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1028
g16
(lp1029
S'd'
asg18
S'N'
sS'.thisRepN'
p1030
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1031
I6
sS'.thisN'
p1032
I116
sS'.thisIndex'
p1033
I6
sg15
(lp1034
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp1035
g16
(lp1036
S'k'
asg18
S'N'
sS'.thisRepN'
p1037
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1038
I7
sS'.thisN'
p1039
I117
sS'.thisIndex'
p1040
I8
sg15
(lp1041
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp1042
g16
(lp1043
S'd'
asg18
S'Y'
sS'.thisRepN'
p1044
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1045
I8
sS'.thisN'
p1046
I118
sS'.thisIndex'
p1047
I4
sg15
(lp1048
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I4
sa(dp1049
g16
(lp1050
S'k'
asg18
S'Y'
sS'.thisRepN'
p1051
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1052
I9
sS'.thisN'
p1053
I119
sS'.thisIndex'
p1054
I8
sg15
(lp1055
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp1056
S'space'
p1057
asg95
I8
sa(dp1058
g16
(lp1059
S'd'
asg18
S'N'
sS'.thisRepN'
p1060
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1061
I10
sS'.thisN'
p1062
I120
sS'.thisIndex'
p1063
I10
sg15
(lp1064
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1065
g16
(lp1066
S'd'
asg18
S'N'
sS'.thisRepN'
p1067
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1068
I0
sS'.thisN'
p1069
I121
sS'.thisIndex'
p1070
I7
sg15
(lp1071
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I7
sa(dp1072
g16
(lp1073
S'k'
asg18
S'N'
sS'.thisRepN'
p1074
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1075
I1
sS'.thisN'
p1076
I122
sS'.thisIndex'
p1077
I7
sg15
(lp1078
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I7
sa(dp1079
g16
(lp1080
S'k'
asg18
S'Y'
sS'.thisRepN'
p1081
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1082
I2
sS'.thisN'
p1083
I123
sS'.thisIndex'
p1084
I6
sg15
(lp1085
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp1086
S'space'
p1087
asg95
I6
sa(dp1088
g16
(lp1089
S'k'
asg18
S'Y'
sS'.thisRepN'
p1090
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1091
I3
sS'.thisN'
p1092
I124
sS'.thisIndex'
p1093
I8
sg15
(lp1094
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp1095
S'space'
p1096
asg95
I8
sa(dp1097
g16
(lp1098
S'k'
asg18
S'Y'
sS'.thisRepN'
p1099
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1100
I4
sS'.thisN'
p1101
I125
sS'.thisIndex'
p1102
I2
sg15
(lp1103
S'd'
asg30
VM
sg17
S'N'
sg14
I3
sg19
(lp1104
S'space'
p1105
asg95
I2
sa(dp1106
g16
(lp1107
S'd'
asg18
S'Y'
sS'.thisRepN'
p1108
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1109
I5
sS'.thisN'
p1110
I126
sS'.thisIndex'
p1111
I10
sg15
(lp1112
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp1113
S'space'
p1114
asg95
I10
sa(dp1115
g16
(lp1116
S'd'
asg18
S'N'
sS'.thisRepN'
p1117
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1118
I6
sS'.thisN'
p1119
I127
sS'.thisIndex'
p1120
I1
sg15
(lp1121
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp1122
g16
(lp1123
S'd'
asg18
S'Y'
sS'.thisRepN'
p1124
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1125
I7
sS'.thisN'
p1126
I128
sS'.thisIndex'
p1127
I0
sg15
(lp1128
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp1129
S'space'
p1130
asg95
I0
sa(dp1131
g16
(lp1132
S'd'
asg18
S'N'
sS'.thisRepN'
p1133
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1134
I8
sS'.thisN'
p1135
I129
sS'.thisIndex'
p1136
I4
sg15
(lp1137
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I4
sa(dp1138
g16
(lp1139
S'k'
asg18
S'Y'
sS'.thisRepN'
p1140
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1141
I9
sS'.thisN'
p1142
I130
sS'.thisIndex'
p1143
I0
sg15
(lp1144
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp1145
S'space'
p1146
asg95
I0
sa(dp1147
g16
(lp1148
S'd'
asg18
S'N'
sS'.thisRepN'
p1149
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1150
I10
sS'.thisN'
p1151
I131
sS'.thisIndex'
p1152
I1
sg15
(lp1153
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp1154
S'space'
p1155
asg95
I1
sa(dp1156
g16
(lp1157
S'd'
asg18
S'Y'
sS'.thisRepN'
p1158
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1159
I0
sS'.thisN'
p1160
I132
sS'.thisIndex'
p1161
I8
sg15
(lp1162
S'k'
asg30
VM
sg17
S'N'
sg14
I3
sg19
(lp1163
S'space'
p1164
asg95
I8
sa(dp1165
g16
(lp1166
S'd'
asg18
S'N'
sS'.thisRepN'
p1167
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1168
I1
sS'.thisN'
p1169
I133
sS'.thisIndex'
p1170
I7
sg15
(lp1171
S'k'
asg30
VM
sg17
S'N'
sg14
I3
sg19
Nsg95
I7
sa(dp1172
g16
(lp1173
S'k'
asg18
S'Y'
sS'.thisRepN'
p1174
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1175
I2
sS'.thisN'
p1176
I134
sS'.thisIndex'
p1177
I2
sg15
(lp1178
S'd'
asg30
VM
sg17
S'N'
sg14
I3
sg19
Nsg95
I2
sa(dp1179
g16
(lp1180
S'k'
asg18
S'N'
sS'.thisRepN'
p1181
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1182
I3
sS'.thisN'
p1183
I135
sS'.thisIndex'
p1184
I1
sg15
(lp1185
S'd'
asg30
VM
sg17
S'N'
sg14
I3
sg19
Nsg95
I1
sa(dp1186
g16
(lp1187
S'd'
asg18
S'N'
sS'.thisRepN'
p1188
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1189
I4
sS'.thisN'
p1190
I136
sS'.thisIndex'
p1191
I3
sg15
(lp1192
S'k'
asg30
VM
sg17
S'N'
sg14
I3
sg19
Nsg95
I3
sa(dp1193
g16
(lp1194
S'k'
asg18
S'Y'
sS'.thisRepN'
p1195
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1196
I5
sS'.thisN'
p1197
I137
sS'.thisIndex'
p1198
I3
sg15
(lp1199
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp1200
S'space'
p1201
asg95
I3
sa(dp1202
g16
(lp1203
S'd'
asg18
S'Y'
sS'.thisRepN'
p1204
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1205
I6
sS'.thisN'
p1206
I138
sS'.thisIndex'
p1207
I8
sg15
(lp1208
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp1209
S'space'
p1210
asg95
I8
sa(dp1211
g16
(lp1212
S'k'
asg18
S'N'
sS'.thisRepN'
p1213
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1214
I7
sS'.thisN'
p1215
I139
sS'.thisIndex'
p1216
I5
sg15
(lp1217
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I5
sa(dp1218
g16
(lp1219
S'k'
asg18
S'Y'
sS'.thisRepN'
p1220
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1221
I8
sS'.thisN'
p1222
I140
sS'.thisIndex'
p1223
I1
sg15
(lp1224
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp1225
S'space'
p1226
asg95
I1
sa(dp1227
g16
(lp1228
S'k'
asg18
S'N'
sS'.thisRepN'
p1229
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1230
I9
sS'.thisN'
p1231
I141
sS'.thisIndex'
p1232
I3
sg15
(lp1233
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp1234
g16
(lp1235
S'k'
asg18
S'N'
sS'.thisRepN'
p1236
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1237
I10
sS'.thisN'
p1238
I142
sS'.thisIndex'
p1239
I3
sg15
(lp1240
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp1241
g16
(lp1242
S'k'
asg18
S'N'
sS'.thisRepN'
p1243
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1244
I0
sS'.thisN'
p1245
I143
sS'.thisIndex'
p1246
I6
sg15
(lp1247
S'd'
asg30
VM
sg17
S'N'
sg14
I3
sg19
Nsg95
I6
sa(dp1248
g16
(lp1249
S'd'
asg18
S'Y'
sS'.thisRepN'
p1250
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1251
I1
sS'.thisN'
p1252
I144
sS'.thisIndex'
p1253
I8
sg15
(lp1254
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp1255
g16
(lp1256
S'k'
asg18
S'N'
sS'.thisRepN'
p1257
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1258
I2
sS'.thisN'
p1259
I145
sS'.thisIndex'
p1260
I10
sg15
(lp1261
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1262
g16
(lp1263
S'k'
asg18
S'Y'
sS'.thisRepN'
p1264
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1265
I3
sS'.thisN'
p1266
I146
sS'.thisIndex'
p1267
I3
sg15
(lp1268
S'd'
asg30
VM
sg17
S'N'
sg14
I3
sg19
Nsg95
I3
sa(dp1269
g16
(lp1270
S'd'
asg18
S'Y'
sS'.thisRepN'
p1271
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1272
I4
sS'.thisN'
p1273
I147
sS'.thisIndex'
p1274
I0
sg15
(lp1275
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
(lp1276
S'space'
p1277
asg95
I0
sa(dp1278
g16
(lp1279
S'd'
asg18
S'Y'
sS'.thisRepN'
p1280
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1281
I5
sS'.thisN'
p1282
I148
sS'.thisIndex'
p1283
I8
sg15
(lp1284
S'd'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp1285
g16
(lp1286
S'k'
asg18
S'N'
sg22
I39
sS'.thisN'
p1287
I149
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1288
I6
sS'.thisRepN'
p1289
I13
sg21
I40
sS'.thisIndex'
p1290
I9
sg23
I23
sg15
(lp1291
S'k'
asg30
VM
sg17
S'Y'
sg14
I3
sg19
Nsg95
I9
sa(dp1292
g16
(lp1293
S'd'
asg95
I6
sS'.thisRepN'
p1294
I13
sg30
VM
sg31
g32
sS'.thisTrialN'
p1295
I7
sS'.thisN'
p1296
I150
sS'.thisIndex'
p1297
I6
sg15
(lp1298
S'k'
asg17
S'N'
sg14
I4
sa(dp1299
g16
(lp1300
S'd'
asg95
I1
sS'.thisRepN'
p1301
I13
sg30
VM
sg31
g32
sS'.thisTrialN'
p1302
I8
sS'.thisN'
p1303
I151
sS'.thisIndex'
p1304
I1
sg15
(lp1305
S'd'
asg17
S'Y'
sg14
I4
sa(dp1306
g16
(lp1307
S'd'
asg18
S'N'
sS'.thisRepN'
p1308
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1309
I9
sS'.thisN'
p1310
I152
sS'.thisIndex'
p1311
I2
sg15
(lp1312
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I2
sa(dp1313
g16
(lp1314
S'd'
asg18
S'Y'
sS'.thisRepN'
p1315
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1316
I10
sS'.thisN'
p1317
I153
sS'.thisIndex'
p1318
I3
sg15
(lp1319
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1320
g16
(lp1321
S'd'
asg18
S'N'
sS'.thisRepN'
p1322
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1323
I0
sS'.thisN'
p1324
I154
sS'.thisIndex'
p1325
I4
sg15
(lp1326
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1327
g16
(lp1328
S'k'
asg18
S'Y'
sS'.thisRepN'
p1329
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1330
I1
sS'.thisN'
p1331
I155
sS'.thisIndex'
p1332
I3
sg15
(lp1333
S'd'
asg30
VM
sg17
S'N'
sg14
I4
sg19
Nsg95
I3
sa(dp1334
g16
(lp1335
S'd'
asg18
S'Y'
sS'.thisRepN'
p1336
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1337
I2
sS'.thisN'
p1338
I156
sS'.thisIndex'
p1339
I6
sg15
(lp1340
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
(lp1341
S'space'
p1342
asg95
I6
sa(dp1343
g16
(lp1344
S'd'
asg18
S'N'
sS'.thisRepN'
p1345
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1346
I3
sS'.thisN'
p1347
I157
sS'.thisIndex'
p1348
I0
sg15
(lp1349
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1350
g16
(lp1351
S'd'
asg18
S'N'
sS'.thisRepN'
p1352
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1353
I4
sS'.thisN'
p1354
I158
sS'.thisIndex'
p1355
I9
sg15
(lp1356
S'k'
asg30
VM
sg17
S'N'
sg14
I4
sg19
Nsg95
I9
sa(dp1357
g16
(lp1358
S'd'
asg18
S'Y'
sS'.thisRepN'
p1359
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1360
I5
sS'.thisN'
p1361
I159
sS'.thisIndex'
p1362
I10
sg15
(lp1363
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
(lp1364
S'space'
p1365
asg95
I10
sa(dp1366
g16
(lp1367
S'k'
asg18
S'Y'
sS'.thisRepN'
p1368
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1369
I6
sS'.thisN'
p1370
I160
sS'.thisIndex'
p1371
I9
sg15
(lp1372
S'd'
asg30
VM
sg17
S'N'
sg14
I4
sg19
(lp1373
S'space'
p1374
asg95
I9
sa(dp1375
g16
(lp1376
S'k'
asg18
S'Y'
sS'.thisRepN'
p1377
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1378
I7
sS'.thisN'
p1379
I161
sS'.thisIndex'
p1380
I4
sg15
(lp1381
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1382
g16
(lp1383
S'k'
asg18
S'Y'
sS'.thisRepN'
p1384
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1385
I8
sS'.thisN'
p1386
I162
sS'.thisIndex'
p1387
I1
sg15
(lp1388
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
(lp1389
S'space'
p1390
asg95
I1
sa(dp1391
g16
(lp1392
S'd'
asg18
S'N'
sS'.thisRepN'
p1393
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1394
I9
sS'.thisN'
p1395
I163
sS'.thisIndex'
p1396
I0
sg15
(lp1397
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1398
g16
(lp1399
S'k'
asg18
S'N'
sS'.thisRepN'
p1400
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1401
I10
sS'.thisN'
p1402
I164
sS'.thisIndex'
p1403
I9
sg15
(lp1404
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1405
g16
(lp1406
S'k'
asg18
S'N'
sS'.thisRepN'
p1407
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1408
I0
sS'.thisN'
p1409
I165
sS'.thisIndex'
p1410
I10
sg15
(lp1411
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1412
g16
(lp1413
S'd'
asg18
S'Y'
sS'.thisRepN'
p1414
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1415
I1
sS'.thisN'
p1416
I166
sS'.thisIndex'
p1417
I0
sg15
(lp1418
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
(lp1419
S'space'
p1420
asg95
I0
sa(dp1421
g16
(lp1422
S'k'
asg18
S'N'
sS'.thisRepN'
p1423
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1424
I2
sS'.thisN'
p1425
I167
sS'.thisIndex'
p1426
I5
sg15
(lp1427
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1428
g16
(lp1429
S'k'
asg18
S'Y'
sS'.thisRepN'
p1430
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1431
I3
sS'.thisN'
p1432
I168
sS'.thisIndex'
p1433
I8
sg15
(lp1434
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1435
g16
(lp1436
S'k'
asg18
S'N'
sS'.thisRepN'
p1437
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1438
I4
sS'.thisN'
p1439
I169
sS'.thisIndex'
p1440
I4
sg15
(lp1441
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1442
g16
(lp1443
S'k'
asg18
S'N'
sS'.thisRepN'
p1444
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1445
I5
sS'.thisN'
p1446
I170
sS'.thisIndex'
p1447
I4
sg15
(lp1448
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
(lp1449
S'space'
p1450
asg95
I4
sa(dp1451
g16
(lp1452
S'd'
asg18
S'N'
sS'.thisRepN'
p1453
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1454
I6
sS'.thisN'
p1455
I171
sS'.thisIndex'
p1456
I1
sg15
(lp1457
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I1
sa(dp1458
g16
(lp1459
S'd'
asg18
S'Y'
sS'.thisRepN'
p1460
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1461
I7
sS'.thisN'
p1462
I172
sS'.thisIndex'
p1463
I4
sg15
(lp1464
S'k'
asg30
VM
sg17
S'N'
sg14
I4
sg19
(lp1465
S'space'
p1466
asg95
I4
sa(dp1467
g16
(lp1468
S'k'
asg18
S'N'
sS'.thisRepN'
p1469
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1470
I8
sS'.thisN'
p1471
I173
sS'.thisIndex'
p1472
I10
sg15
(lp1473
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1474
g16
(lp1475
S'd'
asg18
S'N'
sS'.thisRepN'
p1476
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1477
I9
sS'.thisN'
p1478
I174
sS'.thisIndex'
p1479
I4
sg15
(lp1480
S'k'
asg30
VM
sg17
S'N'
sg14
I4
sg19
Nsg95
I4
sa(dp1481
g16
(lp1482
S'd'
asg18
S'N'
sS'.thisRepN'
p1483
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1484
I10
sS'.thisN'
p1485
I175
sS'.thisIndex'
p1486
I0
sg15
(lp1487
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1488
g16
(lp1489
S'k'
asg18
S'N'
sS'.thisRepN'
p1490
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1491
I0
sS'.thisN'
p1492
I176
sS'.thisIndex'
p1493
I4
sg15
(lp1494
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1495
g16
(lp1496
S'k'
asg18
S'Y'
sS'.thisRepN'
p1497
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1498
I1
sS'.thisN'
p1499
I177
sS'.thisIndex'
p1500
I7
sg15
(lp1501
S'd'
asg30
VM
sg17
S'N'
sg14
I4
sg19
(lp1502
S'space'
p1503
asg95
I7
sa(dp1504
g16
(lp1505
S'd'
asg18
S'Y'
sS'.thisRepN'
p1506
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1507
I2
sS'.thisN'
p1508
I178
sS'.thisIndex'
p1509
I2
sg15
(lp1510
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I2
sa(dp1511
g16
(lp1512
S'd'
asg18
S'Y'
sS'.thisRepN'
p1513
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1514
I3
sS'.thisN'
p1515
I179
sS'.thisIndex'
p1516
I0
sg15
(lp1517
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1518
g16
(lp1519
S'k'
asg18
S'N'
sS'.thisRepN'
p1520
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1521
I4
sS'.thisN'
p1522
I180
sS'.thisIndex'
p1523
I1
sg15
(lp1524
S'd'
asg30
VM
sg17
S'N'
sg14
I4
sg19
Nsg95
I1
sa(dp1525
g16
(lp1526
S'k'
asg18
S'Y'
sS'.thisRepN'
p1527
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1528
I5
sS'.thisN'
p1529
I181
sS'.thisIndex'
p1530
I9
sg15
(lp1531
S'd'
asg30
VM
sg17
S'N'
sg14
I4
sg19
Nsg95
I9
sa(dp1532
g16
(lp1533
S'd'
asg18
S'N'
sS'.thisRepN'
p1534
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1535
I6
sS'.thisN'
p1536
I182
sS'.thisIndex'
p1537
I2
sg15
(lp1538
S'k'
asg30
VM
sg17
S'N'
sg14
I4
sg19
Nsg95
I2
sa(dp1539
g16
(lp1540
S'k'
asg18
S'N'
sS'.thisRepN'
p1541
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1542
I7
sS'.thisN'
p1543
I183
sS'.thisIndex'
p1544
I9
sg15
(lp1545
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
(lp1546
S'space'
p1547
asg95
I9
sa(dp1548
g16
(lp1549
S'd'
asg18
S'Y'
sS'.thisRepN'
p1550
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1551
I8
sS'.thisN'
p1552
I184
sS'.thisIndex'
p1553
I7
sg15
(lp1554
S'k'
asg30
VM
sg17
S'N'
sg14
I4
sg19
Nsg95
I7
sa(dp1555
g16
(lp1556
S'd'
asg18
S'N'
sS'.thisRepN'
p1557
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1558
I9
sS'.thisN'
p1559
I185
sS'.thisIndex'
p1560
I7
sg15
(lp1561
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1562
g16
(lp1563
S'd'
asg18
S'N'
sS'.thisRepN'
p1564
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1565
I10
sS'.thisN'
p1566
I186
sS'.thisIndex'
p1567
I2
sg15
(lp1568
S'k'
asg30
VM
sg17
S'N'
sg14
I4
sg19
(lp1569
S'space'
p1570
asg95
I2
sa(dp1571
g16
(lp1572
S'k'
asg18
S'N'
sS'.thisRepN'
p1573
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1574
I0
sS'.thisN'
p1575
I187
sS'.thisIndex'
p1576
I6
sg15
(lp1577
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1578
g16
(lp1579
S'k'
asg18
S'Y'
sS'.thisRepN'
p1580
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1581
I1
sS'.thisN'
p1582
I188
sS'.thisIndex'
p1583
I7
sg15
(lp1584
S'd'
asg30
VM
sg17
S'N'
sg14
I4
sg19
Nsg95
I7
sa(dp1585
g16
(lp1586
S'd'
asg18
S'N'
sS'.thisRepN'
p1587
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1588
I2
sS'.thisN'
p1589
I189
sS'.thisIndex'
p1590
I0
sg15
(lp1591
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1592
g16
(lp1593
S'd'
asg18
S'N'
sS'.thisRepN'
p1594
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1595
I3
sS'.thisN'
p1596
I190
sS'.thisIndex'
p1597
I8
sg15
(lp1598
S'k'
asg30
VM
sg17
S'N'
sg14
I4
sg19
Nsg95
I8
sa(dp1599
g16
(lp1600
S'k'
asg18
S'Y'
sS'.thisRepN'
p1601
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1602
I4
sS'.thisN'
p1603
I191
sS'.thisIndex'
p1604
I0
sg15
(lp1605
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1606
g16
(lp1607
S'd'
asg18
S'Y'
sS'.thisRepN'
p1608
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1609
I5
sS'.thisN'
p1610
I192
sS'.thisIndex'
p1611
I6
sg15
(lp1612
S'd'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
(lp1613
S'space'
p1614
asg95
I6
sa(dp1615
g16
(lp1616
S'k'
asg18
S'Y'
sS'.thisRepN'
p1617
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1618
I6
sS'.thisN'
p1619
I193
sS'.thisIndex'
p1620
I9
sg15
(lp1621
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1622
g16
(lp1623
S'k'
asg18
S'N'
sS'.thisRepN'
p1624
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1625
I7
sS'.thisN'
p1626
I194
sS'.thisIndex'
p1627
I6
sg15
(lp1628
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1629
g16
(lp1630
S'd'
asg18
S'Y'
sS'.thisRepN'
p1631
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1632
I8
sS'.thisN'
p1633
I195
sS'.thisIndex'
p1634
I6
sg15
(lp1635
S'k'
asg30
VM
sg17
S'N'
sg14
I4
sg19
(lp1636
S'space'
p1637
asg95
I6
sa(dp1638
g16
(lp1639
S'k'
asg18
S'N'
sS'.thisRepN'
p1640
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1641
I9
sS'.thisN'
p1642
I196
sS'.thisIndex'
p1643
I3
sg15
(lp1644
S'd'
asg30
VM
sg17
S'N'
sg14
I4
sg19
Nsg95
I3
sa(dp1645
g16
(lp1646
S'k'
asg18
S'N'
sS'.thisRepN'
p1647
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1648
I10
sS'.thisN'
p1649
I197
sS'.thisIndex'
p1650
I9
sg15
(lp1651
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1652
g16
(lp1653
S'k'
asg18
S'Y'
sS'.thisRepN'
p1654
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1655
I0
sS'.thisN'
p1656
I198
sS'.thisIndex'
p1657
I3
sg15
(lp1658
S'd'
asg30
VM
sg17
S'N'
sg14
I4
sg19
Nsg95
I3
sa(dp1659
g16
(lp1660
S'k'
asg18
S'N'
sg22
I33
sS'.thisN'
p1661
I199
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1662
I1
sS'.thisRepN'
p1663
I18
sg21
I33
sS'.thisIndex'
p1664
I2
sg23
I21
sg15
(lp1665
S'k'
asg30
VM
sg17
S'Y'
sg14
I4
sg19
Nsg95
I2
sa(dp1666
g16
(lp1667
S'd'
asg95
I7
sS'.thisRepN'
p1668
I18
sg30
VM
sg31
g32
sS'.thisTrialN'
p1669
I2
sS'.thisN'
p1670
I200
sS'.thisIndex'
p1671
I7
sg15
(lp1672
S'd'
asg17
S'Y'
sg14
I5
sa(dp1673
g16
(lp1674
S'd'
asg95
I9
sS'.thisRepN'
p1675
I18
sg30
VM
sg31
g32
sS'.thisTrialN'
p1676
I3
sS'.thisN'
p1677
I201
sS'.thisIndex'
p1678
I9
sg15
(lp1679
S'd'
asg17
S'Y'
sg14
I5
sa(dp1680
g16
(lp1681
S'k'
asg18
S'N'
sS'.thisRepN'
p1682
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1683
I4
sS'.thisN'
p1684
I202
sS'.thisIndex'
p1685
I4
sg15
(lp1686
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1687
g16
(lp1688
S'd'
asg18
S'N'
sS'.thisRepN'
p1689
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1690
I5
sS'.thisN'
p1691
I203
sS'.thisIndex'
p1692
I3
sg15
(lp1693
S'k'
asg30
VM
sg17
S'N'
sg14
I5
sg19
Nsg95
I3
sa(dp1694
g16
(lp1695
S'k'
asg18
S'Y'
sS'.thisRepN'
p1696
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1697
I6
sS'.thisN'
p1698
I204
sS'.thisIndex'
p1699
I4
sg15
(lp1700
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1701
S'space'
p1702
asg95
I4
sa(dp1703
g16
(lp1704
S'k'
asg18
S'N'
sS'.thisRepN'
p1705
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1706
I7
sS'.thisN'
p1707
I205
sS'.thisIndex'
p1708
I8
sg15
(lp1709
S'd'
asg30
VM
sg17
S'N'
sg14
I5
sg19
Nsg95
I8
sa(dp1710
g16
(lp1711
S'd'
asg18
S'N'
sS'.thisRepN'
p1712
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1713
I8
sS'.thisN'
p1714
I206
sS'.thisIndex'
p1715
I1
sg15
(lp1716
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1717
g16
(lp1718
S'k'
asg18
S'Y'
sS'.thisRepN'
p1719
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1720
I9
sS'.thisN'
p1721
I207
sS'.thisIndex'
p1722
I7
sg15
(lp1723
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp1724
g16
(lp1725
S'd'
asg18
S'Y'
sS'.thisRepN'
p1726
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1727
I10
sS'.thisN'
p1728
I208
sS'.thisIndex'
p1729
I4
sg15
(lp1730
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1731
g16
(lp1732
S'd'
asg18
S'N'
sS'.thisRepN'
p1733
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1734
I0
sS'.thisN'
p1735
I209
sS'.thisIndex'
p1736
I10
sg15
(lp1737
S'k'
asg30
VM
sg17
S'N'
sg14
I5
sg19
Nsg95
I10
sa(dp1738
g16
(lp1739
S'k'
asg18
S'Y'
sS'.thisRepN'
p1740
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1741
I1
sS'.thisN'
p1742
I210
sS'.thisIndex'
p1743
I6
sg15
(lp1744
S'd'
asg30
VM
sg17
S'N'
sg14
I5
sg19
Nsg95
I6
sa(dp1745
g16
(lp1746
S'd'
asg18
S'N'
sS'.thisRepN'
p1747
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1748
I2
sS'.thisN'
p1749
I211
sS'.thisIndex'
p1750
I10
sg15
(lp1751
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp1752
g16
(lp1753
S'd'
asg18
S'Y'
sS'.thisRepN'
p1754
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1755
I3
sS'.thisN'
p1756
I212
sS'.thisIndex'
p1757
I8
sg15
(lp1758
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1759
S'space'
p1760
asg95
I8
sa(dp1761
g16
(lp1762
S'k'
asg18
S'N'
sS'.thisRepN'
p1763
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1764
I4
sS'.thisN'
p1765
I213
sS'.thisIndex'
p1766
I4
sg15
(lp1767
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1768
g16
(lp1769
S'k'
asg18
S'N'
sS'.thisRepN'
p1770
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1771
I5
sS'.thisN'
p1772
I214
sS'.thisIndex'
p1773
I5
sg15
(lp1774
S'd'
asg30
VM
sg17
S'N'
sg14
I5
sg19
Nsg95
I5
sa(dp1775
g16
(lp1776
S'd'
asg18
S'Y'
sS'.thisRepN'
p1777
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1778
I6
sS'.thisN'
p1779
I215
sS'.thisIndex'
p1780
I2
sg15
(lp1781
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1782
S'space'
p1783
asg95
I2
sa(dp1784
g16
(lp1785
S'd'
asg18
S'N'
sS'.thisRepN'
p1786
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1787
I7
sS'.thisN'
p1788
I216
sS'.thisIndex'
p1789
I4
sg15
(lp1790
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1791
S'space'
p1792
asg95
I4
sa(dp1793
g16
(lp1794
S'd'
asg18
S'N'
sS'.thisRepN'
p1795
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1796
I8
sS'.thisN'
p1797
I217
sS'.thisIndex'
p1798
I5
sg15
(lp1799
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I5
sa(dp1800
g16
(lp1801
S'k'
asg18
S'N'
sS'.thisRepN'
p1802
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1803
I9
sS'.thisN'
p1804
I218
sS'.thisIndex'
p1805
I2
sg15
(lp1806
S'd'
asg30
VM
sg17
S'N'
sg14
I5
sg19
Nsg95
I2
sa(dp1807
g16
(lp1808
S'k'
asg18
S'N'
sS'.thisRepN'
p1809
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1810
I10
sS'.thisN'
p1811
I219
sS'.thisIndex'
p1812
I10
sg15
(lp1813
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp1814
g16
(lp1815
S'k'
asg18
S'N'
sS'.thisRepN'
p1816
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1817
I0
sS'.thisN'
p1818
I220
sS'.thisIndex'
p1819
I2
sg15
(lp1820
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1821
g16
(lp1822
S'k'
asg18
S'N'
sS'.thisRepN'
p1823
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1824
I1
sS'.thisN'
p1825
I221
sS'.thisIndex'
p1826
I8
sg15
(lp1827
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1828
g16
(lp1829
S'k'
asg18
S'N'
sS'.thisRepN'
p1830
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1831
I2
sS'.thisN'
p1832
I222
sS'.thisIndex'
p1833
I4
sg15
(lp1834
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1835
g16
(lp1836
S'd'
asg18
S'N'
sS'.thisRepN'
p1837
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1838
I3
sS'.thisN'
p1839
I223
sS'.thisIndex'
p1840
I0
sg15
(lp1841
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I0
sa(dp1842
g16
(lp1843
S'k'
asg18
S'Y'
sS'.thisRepN'
p1844
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1845
I4
sS'.thisN'
p1846
I224
sS'.thisIndex'
p1847
I8
sg15
(lp1848
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1849
S'space'
p1850
asg95
I8
sa(dp1851
g16
(lp1852
S'd'
asg18
S'Y'
sS'.thisRepN'
p1853
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1854
I5
sS'.thisN'
p1855
I225
sS'.thisIndex'
p1856
I5
sg15
(lp1857
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1858
S'space'
p1859
asg95
I5
sa(dp1860
g16
(lp1861
S'd'
asg18
S'Y'
sS'.thisRepN'
p1862
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1863
I6
sS'.thisN'
p1864
I226
sS'.thisIndex'
p1865
I6
sg15
(lp1866
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1867
S'space'
p1868
asg95
I6
sa(dp1869
g16
(lp1870
S'k'
asg18
S'Y'
sS'.thisRepN'
p1871
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1872
I7
sS'.thisN'
p1873
I227
sS'.thisIndex'
p1874
I7
sg15
(lp1875
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1876
S'space'
p1877
asg95
I7
sa(dp1878
g16
(lp1879
S'd'
asg18
S'N'
sS'.thisRepN'
p1880
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1881
I8
sS'.thisN'
p1882
I228
sS'.thisIndex'
p1883
I6
sg15
(lp1884
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp1885
g16
(lp1886
S'd'
asg18
S'N'
sS'.thisRepN'
p1887
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1888
I9
sS'.thisN'
p1889
I229
sS'.thisIndex'
p1890
I3
sg15
(lp1891
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1892
g16
(lp1893
S'k'
asg18
S'N'
sS'.thisRepN'
p1894
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1895
I10
sS'.thisN'
p1896
I230
sS'.thisIndex'
p1897
I0
sg15
(lp1898
S'd'
asg30
VM
sg17
S'N'
sg14
I5
sg19
Nsg95
I0
sa(dp1899
g16
(lp1900
S'k'
asg18
S'N'
sS'.thisRepN'
p1901
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1902
I0
sS'.thisN'
p1903
I231
sS'.thisIndex'
p1904
I0
sg15
(lp1905
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1906
S'space'
p1907
asg95
I0
sa(dp1908
g16
(lp1909
S'k'
asg18
S'N'
sS'.thisRepN'
p1910
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1911
I1
sS'.thisN'
p1912
I232
sS'.thisIndex'
p1913
I10
sg15
(lp1914
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp1915
g16
(lp1916
S'd'
asg18
S'N'
sS'.thisRepN'
p1917
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1918
I2
sS'.thisN'
p1919
I233
sS'.thisIndex'
p1920
I7
sg15
(lp1921
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp1922
g16
(lp1923
S'd'
asg18
S'N'
sS'.thisRepN'
p1924
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1925
I3
sS'.thisN'
p1926
I234
sS'.thisIndex'
p1927
I6
sg15
(lp1928
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp1929
g16
(lp1930
S'd'
asg18
S'Y'
sS'.thisRepN'
p1931
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1932
I4
sS'.thisN'
p1933
I235
sS'.thisIndex'
p1934
I0
sg15
(lp1935
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I0
sa(dp1936
g16
(lp1937
S'k'
asg18
S'N'
sS'.thisRepN'
p1938
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1939
I5
sS'.thisN'
p1940
I236
sS'.thisIndex'
p1941
I2
sg15
(lp1942
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1943
g16
(lp1944
S'k'
asg18
S'Y'
sS'.thisRepN'
p1945
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1946
I6
sS'.thisN'
p1947
I237
sS'.thisIndex'
p1948
I0
sg15
(lp1949
S'd'
asg30
VM
sg17
S'N'
sg14
I5
sg19
Nsg95
I0
sa(dp1950
g16
(lp1951
S'k'
asg18
S'Y'
sS'.thisRepN'
p1952
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1953
I7
sS'.thisN'
p1954
I238
sS'.thisIndex'
p1955
I1
sg15
(lp1956
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1957
g16
(lp1958
S'k'
asg18
S'Y'
sS'.thisRepN'
p1959
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1960
I8
sS'.thisN'
p1961
I239
sS'.thisIndex'
p1962
I8
sg15
(lp1963
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1964
g16
(lp1965
S'd'
asg18
S'N'
sS'.thisRepN'
p1966
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1967
I9
sS'.thisN'
p1968
I240
sS'.thisIndex'
p1969
I3
sg15
(lp1970
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1971
g16
(lp1972
S'd'
asg18
S'N'
sS'.thisRepN'
p1973
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1974
I10
sS'.thisN'
p1975
I241
sS'.thisIndex'
p1976
I0
sg15
(lp1977
S'k'
asg30
VM
sg17
S'N'
sg14
I5
sg19
Nsg95
I0
sa(dp1978
g16
(lp1979
S'd'
asg18
S'Y'
sS'.thisRepN'
p1980
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1981
I0
sS'.thisN'
p1982
I242
sS'.thisIndex'
p1983
I1
sg15
(lp1984
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1985
S'space'
p1986
asg95
I1
sa(dp1987
g16
(lp1988
S'd'
asg18
S'Y'
sS'.thisRepN'
p1989
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1990
I1
sS'.thisN'
p1991
I243
sS'.thisIndex'
p1992
I6
sg15
(lp1993
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp1994
S'space'
p1995
asg95
I6
sa(dp1996
g16
(lp1997
S'd'
asg18
S'N'
sS'.thisRepN'
p1998
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1999
I2
sS'.thisN'
p2000
I244
sS'.thisIndex'
p2001
I9
sg15
(lp2002
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp2003
g16
(lp2004
S'd'
asg18
S'Y'
sS'.thisRepN'
p2005
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2006
I3
sS'.thisN'
p2007
I245
sS'.thisIndex'
p2008
I7
sg15
(lp2009
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp2010
S'space'
p2011
asg95
I7
sa(dp2012
g16
(lp2013
S'd'
asg18
S'Y'
sS'.thisRepN'
p2014
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2015
I4
sS'.thisN'
p2016
I246
sS'.thisIndex'
p2017
I2
sg15
(lp2018
S'd'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
(lp2019
S'space'
p2020
asg95
I2
sa(dp2021
g16
(lp2022
S'k'
asg18
S'N'
sS'.thisRepN'
p2023
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2024
I5
sS'.thisN'
p2025
I247
sS'.thisIndex'
p2026
I0
sg15
(lp2027
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I0
sa(dp2028
g16
(lp2029
S'k'
asg18
S'N'
sS'.thisRepN'
p2030
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2031
I6
sS'.thisN'
p2032
I248
sS'.thisIndex'
p2033
I1
sg15
(lp2034
S'k'
asg30
VM
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp2035
g16
(lp2036
S'k'
asg18
S'Y'
sg22
I39
sS'.thisN'
p2037
I249
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2038
I7
sS'.thisRepN'
p2039
I22
sg21
I40
sS'.thisIndex'
p2040
I5
sg23
I19
sg15
(lp2041
S'd'
asg30
VM
sg17
S'N'
sg14
I5
sg19
(lp2042
S'space'
p2043
asg95
I5
sa(dp2044
g16
(lp2045
S'k'
asg95
I1
sS'.thisRepN'
p2046
I22
sg30
VM
sg31
g32
sS'.thisTrialN'
p2047
I8
sS'.thisN'
p2048
I250
sS'.thisIndex'
p2049
I1
sg15
(lp2050
S'k'
asg17
S'Y'
sg14
I6
sa(dp2051
g16
(lp2052
S'k'
asg95
I7
sS'.thisRepN'
p2053
I22
sg30
VM
sg31
g32
sS'.thisTrialN'
p2054
I9
sS'.thisN'
p2055
I251
sS'.thisIndex'
p2056
I7
sg15
(lp2057
S'k'
asg17
S'Y'
sg14
I6
sa(dp2058
g16
(lp2059
S'k'
asg18
S'N'
sS'.thisRepN'
p2060
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2061
I10
sS'.thisN'
p2062
I252
sS'.thisIndex'
p2063
I7
sg15
(lp2064
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2065
g16
(lp2066
S'k'
asg18
S'N'
sS'.thisRepN'
p2067
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2068
I0
sS'.thisN'
p2069
I253
sS'.thisIndex'
p2070
I4
sg15
(lp2071
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2072
g16
(lp2073
S'k'
asg18
S'Y'
sS'.thisRepN'
p2074
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2075
I1
sS'.thisN'
p2076
I254
sS'.thisIndex'
p2077
I8
sg15
(lp2078
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2079
S'space'
p2080
asg95
I8
sa(dp2081
g16
(lp2082
S'k'
asg18
S'N'
sS'.thisRepN'
p2083
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2084
I2
sS'.thisN'
p2085
I255
sS'.thisIndex'
p2086
I8
sg15
(lp2087
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I8
sa(dp2088
g16
(lp2089
S'k'
asg18
S'Y'
sS'.thisRepN'
p2090
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2091
I3
sS'.thisN'
p2092
I256
sS'.thisIndex'
p2093
I6
sg15
(lp2094
S'd'
asg30
VM
sg17
S'N'
sg14
I6
sg19
Nsg95
I6
sa(dp2095
g16
(lp2096
S'k'
asg18
S'N'
sS'.thisRepN'
p2097
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2098
I4
sS'.thisN'
p2099
I257
sS'.thisIndex'
p2100
I9
sg15
(lp2101
S'd'
asg30
VM
sg17
S'N'
sg14
I6
sg19
Nsg95
I9
sa(dp2102
g16
(lp2103
S'k'
asg18
S'N'
sS'.thisRepN'
p2104
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2105
I5
sS'.thisN'
p2106
I258
sS'.thisIndex'
p2107
I6
sg15
(lp2108
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2109
g16
(lp2110
S'd'
asg18
S'Y'
sS'.thisRepN'
p2111
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2112
I6
sS'.thisN'
p2113
I259
sS'.thisIndex'
p2114
I10
sg15
(lp2115
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2116
g16
(lp2117
S'k'
asg18
S'N'
sS'.thisRepN'
p2118
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2119
I7
sS'.thisN'
p2120
I260
sS'.thisIndex'
p2121
I8
sg15
(lp2122
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I8
sa(dp2123
g16
(lp2124
S'd'
asg18
S'Y'
sS'.thisRepN'
p2125
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2126
I8
sS'.thisN'
p2127
I261
sS'.thisIndex'
p2128
I3
sg15
(lp2129
S'k'
asg30
VM
sg17
S'N'
sg14
I6
sg19
(lp2130
S'space'
p2131
asg95
I3
sa(dp2132
g16
(lp2133
S'k'
asg18
S'N'
sS'.thisRepN'
p2134
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2135
I9
sS'.thisN'
p2136
I262
sS'.thisIndex'
p2137
I7
sg15
(lp2138
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2139
g16
(lp2140
S'd'
asg18
S'Y'
sS'.thisRepN'
p2141
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2142
I10
sS'.thisN'
p2143
I263
sS'.thisIndex'
p2144
I3
sg15
(lp2145
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2146
S'space'
p2147
asg95
I3
sa(dp2148
g16
(lp2149
S'd'
asg18
S'Y'
sS'.thisRepN'
p2150
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2151
I0
sS'.thisN'
p2152
I264
sS'.thisIndex'
p2153
I5
sg15
(lp2154
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I5
sa(dp2155
g16
(lp2156
S'd'
asg18
S'Y'
sS'.thisRepN'
p2157
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2158
I1
sS'.thisN'
p2159
I265
sS'.thisIndex'
p2160
I0
sg15
(lp2161
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2162
g16
(lp2163
S'k'
asg18
S'N'
sS'.thisRepN'
p2164
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2165
I2
sS'.thisN'
p2166
I266
sS'.thisIndex'
p2167
I3
sg15
(lp2168
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2169
g16
(lp2170
S'k'
asg18
S'N'
sS'.thisRepN'
p2171
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2172
I3
sS'.thisN'
p2173
I267
sS'.thisIndex'
p2174
I3
sg15
(lp2175
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2176
S'space'
p2177
asg95
I3
sa(dp2178
g16
(lp2179
S'k'
asg18
S'Y'
sS'.thisRepN'
p2180
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2181
I4
sS'.thisN'
p2182
I268
sS'.thisIndex'
p2183
I2
sg15
(lp2184
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2185
S'space'
p2186
asg95
I2
sa(dp2187
g16
(lp2188
S'k'
asg18
S'N'
sS'.thisRepN'
p2189
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2190
I5
sS'.thisN'
p2191
I269
sS'.thisIndex'
p2192
I4
sg15
(lp2193
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2194
g16
(lp2195
S'k'
asg18
S'Y'
sS'.thisRepN'
p2196
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2197
I6
sS'.thisN'
p2198
I270
sS'.thisIndex'
p2199
I9
sg15
(lp2200
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2201
S'space'
p2202
asg95
I9
sa(dp2203
g16
(lp2204
S'd'
asg18
S'Y'
sS'.thisRepN'
p2205
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2206
I7
sS'.thisN'
p2207
I271
sS'.thisIndex'
p2208
I2
sg15
(lp2209
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I2
sa(dp2210
g16
(lp2211
S'd'
asg18
S'Y'
sS'.thisRepN'
p2212
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2213
I8
sS'.thisN'
p2214
I272
sS'.thisIndex'
p2215
I0
sg15
(lp2216
S'k'
asg30
VM
sg17
S'N'
sg14
I6
sg19
(lp2217
S'space'
p2218
asg95
I0
sa(dp2219
g16
(lp2220
S'k'
asg18
S'Y'
sS'.thisRepN'
p2221
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2222
I9
sS'.thisN'
p2223
I273
sS'.thisIndex'
p2224
I1
sg15
(lp2225
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I1
sa(dp2226
g16
(lp2227
S'd'
asg18
S'Y'
sS'.thisRepN'
p2228
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2229
I10
sS'.thisN'
p2230
I274
sS'.thisIndex'
p2231
I8
sg15
(lp2232
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2233
S'space'
p2234
asg95
I8
sa(dp2235
g16
(lp2236
S'd'
asg18
S'N'
sS'.thisRepN'
p2237
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2238
I0
sS'.thisN'
p2239
I275
sS'.thisIndex'
p2240
I9
sg15
(lp2241
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2242
g16
(lp2243
S'k'
asg18
S'N'
sS'.thisRepN'
p2244
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2245
I1
sS'.thisN'
p2246
I276
sS'.thisIndex'
p2247
I1
sg15
(lp2248
S'd'
asg30
VM
sg17
S'N'
sg14
I6
sg19
Nsg95
I1
sa(dp2249
g16
(lp2250
S'k'
asg18
S'Y'
sS'.thisRepN'
p2251
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2252
I2
sS'.thisN'
p2253
I277
sS'.thisIndex'
p2254
I10
sg15
(lp2255
S'd'
asg30
VM
sg17
S'N'
sg14
I6
sg19
(lp2256
S'space'
p2257
asg95
I10
sa(dp2258
g16
(lp2259
S'd'
asg18
S'N'
sS'.thisRepN'
p2260
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2261
I3
sS'.thisN'
p2262
I278
sS'.thisIndex'
p2263
I10
sg15
(lp2264
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2265
g16
(lp2266
S'd'
asg18
S'N'
sS'.thisRepN'
p2267
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2268
I4
sS'.thisN'
p2269
I279
sS'.thisIndex'
p2270
I0
sg15
(lp2271
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2272
g16
(lp2273
S'd'
asg18
S'N'
sS'.thisRepN'
p2274
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2275
I5
sS'.thisN'
p2276
I280
sS'.thisIndex'
p2277
I3
sg15
(lp2278
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2279
g16
(lp2280
S'k'
asg18
S'N'
sS'.thisRepN'
p2281
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2282
I6
sS'.thisN'
p2283
I281
sS'.thisIndex'
p2284
I4
sg15
(lp2285
S'd'
asg30
VM
sg17
S'N'
sg14
I6
sg19
Nsg95
I4
sa(dp2286
g16
(lp2287
S'd'
asg18
S'N'
sS'.thisRepN'
p2288
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2289
I7
sS'.thisN'
p2290
I282
sS'.thisIndex'
p2291
I4
sg15
(lp2292
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2293
S'space'
p2294
asg95
I4
sa(dp2295
g16
(lp2296
S'k'
asg18
S'Y'
sS'.thisRepN'
p2297
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2298
I8
sS'.thisN'
p2299
I283
sS'.thisIndex'
p2300
I1
sg15
(lp2301
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2302
S'space'
p2303
asg95
I1
sa(dp2304
g16
(lp2305
S'd'
asg18
S'Y'
sS'.thisRepN'
p2306
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2307
I9
sS'.thisN'
p2308
I284
sS'.thisIndex'
p2309
I5
sg15
(lp2310
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2311
S'space'
p2312
asg95
I5
sa(dp2313
g16
(lp2314
S'd'
asg18
S'N'
sS'.thisRepN'
p2315
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2316
I10
sS'.thisN'
p2317
I285
sS'.thisIndex'
p2318
I1
sg15
(lp2319
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I1
sa(dp2320
g16
(lp2321
S'd'
asg18
S'Y'
sS'.thisRepN'
p2322
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2323
I0
sS'.thisN'
p2324
I286
sS'.thisIndex'
p2325
I8
sg15
(lp2326
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2327
S'space'
p2328
asg95
I8
sa(dp2329
g16
(lp2330
S'd'
asg18
S'Y'
sS'.thisRepN'
p2331
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2332
I1
sS'.thisN'
p2333
I287
sS'.thisIndex'
p2334
I7
sg15
(lp2335
S'k'
asg30
VM
sg17
S'N'
sg14
I6
sg19
(lp2336
S'space'
p2337
asg95
I7
sa(dp2338
g16
(lp2339
S'k'
asg18
S'Y'
sS'.thisRepN'
p2340
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2341
I2
sS'.thisN'
p2342
I288
sS'.thisIndex'
p2343
I2
sg15
(lp2344
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2345
S'space'
p2346
asg95
I2
sa(dp2347
g16
(lp2348
S'k'
asg18
S'N'
sS'.thisRepN'
p2349
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2350
I3
sS'.thisN'
p2351
I289
sS'.thisIndex'
p2352
I10
sg15
(lp2353
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2354
g16
(lp2355
S'd'
asg18
S'N'
sS'.thisRepN'
p2356
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2357
I4
sS'.thisN'
p2358
I290
sS'.thisIndex'
p2359
I7
sg15
(lp2360
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2361
g16
(lp2362
S'k'
asg18
S'N'
sS'.thisRepN'
p2363
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2364
I5
sS'.thisN'
p2365
I291
sS'.thisIndex'
p2366
I9
sg15
(lp2367
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2368
g16
(lp2369
S'k'
asg18
S'N'
sS'.thisRepN'
p2370
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2371
I6
sS'.thisN'
p2372
I292
sS'.thisIndex'
p2373
I2
sg15
(lp2374
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I2
sa(dp2375
g16
(lp2376
S'd'
asg18
S'Y'
sS'.thisRepN'
p2377
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2378
I7
sS'.thisN'
p2379
I293
sS'.thisIndex'
p2380
I10
sg15
(lp2381
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2382
S'space'
p2383
asg95
I10
sa(dp2384
g16
(lp2385
S'k'
asg18
S'Y'
sS'.thisRepN'
p2386
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2387
I8
sS'.thisN'
p2388
I294
sS'.thisIndex'
p2389
I3
sg15
(lp2390
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2391
g16
(lp2392
S'd'
asg18
S'N'
sS'.thisRepN'
p2393
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2394
I9
sS'.thisN'
p2395
I295
sS'.thisIndex'
p2396
I10
sg15
(lp2397
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2398
g16
(lp2399
S'k'
asg18
S'Y'
sS'.thisRepN'
p2400
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2401
I10
sS'.thisN'
p2402
I296
sS'.thisIndex'
p2403
I6
sg15
(lp2404
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2405
S'space'
p2406
asg95
I6
sa(dp2407
g16
(lp2408
S'k'
asg18
S'N'
sS'.thisRepN'
p2409
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2410
I0
sS'.thisN'
p2411
I297
sS'.thisIndex'
p2412
I0
sg15
(lp2413
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2414
g16
(lp2415
S'd'
asg18
S'Y'
sS'.thisRepN'
p2416
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2417
I1
sS'.thisN'
p2418
I298
sS'.thisIndex'
p2419
I5
sg15
(lp2420
S'd'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
Nsg95
I5
sa(dp2421
g16
(lp2422
S'k'
asg18
S'Y'
sg22
I38
sS'.thisN'
p2423
I299
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2424
I2
sS'.thisRepN'
p2425
I27
sg21
I42
sS'.thisIndex'
p2426
I0
sg23
I24
sg15
(lp2427
S'k'
asg30
VM
sg17
S'Y'
sg14
I6
sg19
(lp2428
S'space'
p2429
asg95
I0
sa(dp2430
g16
(lp2431
S'k'
asg95
I5
sS'.thisRepN'
p2432
I27
sg30
VM
sg31
g32
sS'.thisTrialN'
p2433
I3
sS'.thisN'
p2434
I300
sS'.thisIndex'
p2435
I5
sg15
(lp2436
S'k'
asg17
S'Y'
sg14
I7
sa(dp2437
g16
(lp2438
S'd'
asg95
I5
sS'.thisRepN'
p2439
I27
sg30
VM
sg31
g32
sS'.thisTrialN'
p2440
I4
sS'.thisN'
p2441
I301
sS'.thisIndex'
p2442
I5
sg15
(lp2443
S'd'
asg17
S'Y'
sg14
I7
sa(dp2444
g16
(lp2445
S'k'
asg18
S'N'
sS'.thisRepN'
p2446
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2447
I5
sS'.thisN'
p2448
I302
sS'.thisIndex'
p2449
I0
sg15
(lp2450
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2451
g16
(lp2452
S'k'
asg18
S'Y'
sS'.thisRepN'
p2453
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2454
I6
sS'.thisN'
p2455
I303
sS'.thisIndex'
p2456
I0
sg15
(lp2457
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2458
S'space'
p2459
asg95
I0
sa(dp2460
g16
(lp2461
S'k'
asg18
S'Y'
sS'.thisRepN'
p2462
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2463
I7
sS'.thisN'
p2464
I304
sS'.thisIndex'
p2465
I0
sg15
(lp2466
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2467
S'space'
p2468
asg95
I0
sa(dp2469
g16
(lp2470
S'd'
asg18
S'N'
sS'.thisRepN'
p2471
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2472
I8
sS'.thisN'
p2473
I305
sS'.thisIndex'
p2474
I1
sg15
(lp2475
S'k'
asg30
VM
sg17
S'N'
sg14
I7
sg19
Nsg95
I1
sa(dp2476
g16
(lp2477
S'd'
asg18
S'Y'
sS'.thisRepN'
p2478
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2479
I9
sS'.thisN'
p2480
I306
sS'.thisIndex'
p2481
I1
sg15
(lp2482
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2483
S'space'
p2484
asg95
I1
sa(dp2485
g16
(lp2486
S'k'
asg18
S'N'
sS'.thisRepN'
p2487
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2488
I10
sS'.thisN'
p2489
I307
sS'.thisIndex'
p2490
I3
sg15
(lp2491
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I3
sa(dp2492
g16
(lp2493
S'd'
asg18
S'Y'
sS'.thisRepN'
p2494
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2495
I0
sS'.thisN'
p2496
I308
sS'.thisIndex'
p2497
I6
sg15
(lp2498
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2499
S'space'
p2500
asg95
I6
sa(dp2501
g16
(lp2502
S'd'
asg18
S'Y'
sS'.thisRepN'
p2503
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2504
I1
sS'.thisN'
p2505
I309
sS'.thisIndex'
p2506
I7
sg15
(lp2507
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2508
g16
(lp2509
S'd'
asg18
S'Y'
sS'.thisRepN'
p2510
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2511
I2
sS'.thisN'
p2512
I310
sS'.thisIndex'
p2513
I4
sg15
(lp2514
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2515
S'space'
p2516
asg95
I4
sa(dp2517
g16
(lp2518
S'd'
asg18
S'Y'
sS'.thisRepN'
p2519
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2520
I3
sS'.thisN'
p2521
I311
sS'.thisIndex'
p2522
I0
sg15
(lp2523
S'k'
asg30
VM
sg17
S'N'
sg14
I7
sg19
(lp2524
S'space'
p2525
asg95
I0
sa(dp2526
g16
(lp2527
S'd'
asg18
S'N'
sS'.thisRepN'
p2528
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2529
I4
sS'.thisN'
p2530
I312
sS'.thisIndex'
p2531
I0
sg15
(lp2532
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2533
g16
(lp2534
S'd'
asg18
S'Y'
sS'.thisRepN'
p2535
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2536
I5
sS'.thisN'
p2537
I313
sS'.thisIndex'
p2538
I7
sg15
(lp2539
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2540
g16
(lp2541
S'd'
asg18
S'N'
sS'.thisRepN'
p2542
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2543
I6
sS'.thisN'
p2544
I314
sS'.thisIndex'
p2545
I9
sg15
(lp2546
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2547
S'space'
p2548
asg95
I9
sa(dp2549
g16
(lp2550
S'd'
asg18
S'N'
sS'.thisRepN'
p2551
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2552
I7
sS'.thisN'
p2553
I315
sS'.thisIndex'
p2554
I8
sg15
(lp2555
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2556
g16
(lp2557
S'd'
asg18
S'Y'
sS'.thisRepN'
p2558
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2559
I8
sS'.thisN'
p2560
I316
sS'.thisIndex'
p2561
I3
sg15
(lp2562
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2563
S'space'
p2564
asg95
I3
sa(dp2565
g16
(lp2566
S'd'
asg18
S'Y'
sS'.thisRepN'
p2567
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2568
I9
sS'.thisN'
p2569
I317
sS'.thisIndex'
p2570
I4
sg15
(lp2571
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2572
S'space'
p2573
asg95
I4
sa(dp2574
g16
(lp2575
S'k'
asg18
S'Y'
sS'.thisRepN'
p2576
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2577
I10
sS'.thisN'
p2578
I318
sS'.thisIndex'
p2579
I9
sg15
(lp2580
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2581
S'space'
p2582
asg95
I9
sa(dp2583
g16
(lp2584
S'k'
asg18
S'Y'
sS'.thisRepN'
p2585
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2586
I0
sS'.thisN'
p2587
I319
sS'.thisIndex'
p2588
I5
sg15
(lp2589
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2590
g16
(lp2591
S'd'
asg18
S'N'
sS'.thisRepN'
p2592
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2593
I1
sS'.thisN'
p2594
I320
sS'.thisIndex'
p2595
I10
sg15
(lp2596
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2597
g16
(lp2598
S'd'
asg18
S'N'
sS'.thisRepN'
p2599
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2600
I2
sS'.thisN'
p2601
I321
sS'.thisIndex'
p2602
I8
sg15
(lp2603
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2604
g16
(lp2605
S'k'
asg18
S'N'
sS'.thisRepN'
p2606
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2607
I3
sS'.thisN'
p2608
I322
sS'.thisIndex'
p2609
I10
sg15
(lp2610
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2611
g16
(lp2612
S'k'
asg18
S'N'
sS'.thisRepN'
p2613
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2614
I4
sS'.thisN'
p2615
I323
sS'.thisIndex'
p2616
I3
sg15
(lp2617
S'd'
asg30
VM
sg17
S'N'
sg14
I7
sg19
Nsg95
I3
sa(dp2618
g16
(lp2619
S'k'
asg18
S'N'
sS'.thisRepN'
p2620
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2621
I5
sS'.thisN'
p2622
I324
sS'.thisIndex'
p2623
I0
sg15
(lp2624
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2625
g16
(lp2626
S'd'
asg18
S'Y'
sS'.thisRepN'
p2627
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2628
I6
sS'.thisN'
p2629
I325
sS'.thisIndex'
p2630
I6
sg15
(lp2631
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2632
S'space'
p2633
asg95
I6
sa(dp2634
g16
(lp2635
S'k'
asg18
S'N'
sS'.thisRepN'
p2636
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2637
I7
sS'.thisN'
p2638
I326
sS'.thisIndex'
p2639
I8
sg15
(lp2640
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2641
g16
(lp2642
S'd'
asg18
S'N'
sS'.thisRepN'
p2643
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2644
I8
sS'.thisN'
p2645
I327
sS'.thisIndex'
p2646
I9
sg15
(lp2647
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I9
sa(dp2648
g16
(lp2649
S'd'
asg18
S'N'
sS'.thisRepN'
p2650
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2651
I9
sS'.thisN'
p2652
I328
sS'.thisIndex'
p2653
I1
sg15
(lp2654
S'k'
asg30
VM
sg17
S'N'
sg14
I7
sg19
Nsg95
I1
sa(dp2655
g16
(lp2656
S'd'
asg18
S'Y'
sS'.thisRepN'
p2657
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2658
I10
sS'.thisN'
p2659
I329
sS'.thisIndex'
p2660
I7
sg15
(lp2661
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2662
S'space'
p2663
asg95
I7
sa(dp2664
g16
(lp2665
S'd'
asg18
S'N'
sS'.thisRepN'
p2666
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2667
I0
sS'.thisN'
p2668
I330
sS'.thisIndex'
p2669
I0
sg15
(lp2670
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2671
S'space'
p2672
asg95
I0
sa(dp2673
g16
(lp2674
S'd'
asg18
S'Y'
sS'.thisRepN'
p2675
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2676
I1
sS'.thisN'
p2677
I331
sS'.thisIndex'
p2678
I4
sg15
(lp2679
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2680
S'space'
p2681
asg95
I4
sa(dp2682
g16
(lp2683
S'd'
asg18
S'Y'
sS'.thisRepN'
p2684
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2685
I2
sS'.thisN'
p2686
I332
sS'.thisIndex'
p2687
I10
sg15
(lp2688
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2689
S'space'
p2690
asg95
I10
sa(dp2691
g16
(lp2692
S'k'
asg18
S'Y'
sS'.thisRepN'
p2693
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2694
I3
sS'.thisN'
p2695
I333
sS'.thisIndex'
p2696
I3
sg15
(lp2697
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2698
S'space'
p2699
asg95
I3
sa(dp2700
g16
(lp2701
S'd'
asg18
S'Y'
sS'.thisRepN'
p2702
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2703
I4
sS'.thisN'
p2704
I334
sS'.thisIndex'
p2705
I3
sg15
(lp2706
S'k'
asg30
VM
sg17
S'N'
sg14
I7
sg19
(lp2707
S'space'
p2708
asg95
I3
sa(dp2709
g16
(lp2710
S'k'
asg18
S'Y'
sS'.thisRepN'
p2711
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2712
I5
sS'.thisN'
p2713
I335
sS'.thisIndex'
p2714
I3
sg15
(lp2715
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2716
S'd'
asg95
I3
sa(dp2717
g16
(lp2718
S'k'
asg18
S'N'
sS'.thisRepN'
p2719
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2720
I6
sS'.thisN'
p2721
I336
sS'.thisIndex'
p2722
I2
sg15
(lp2723
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2724
g16
(lp2725
S'd'
asg18
S'Y'
sS'.thisRepN'
p2726
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2727
I7
sS'.thisN'
p2728
I337
sS'.thisIndex'
p2729
I8
sg15
(lp2730
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2731
g16
(lp2732
S'd'
asg18
S'Y'
sS'.thisRepN'
p2733
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2734
I8
sS'.thisN'
p2735
I338
sS'.thisIndex'
p2736
I8
sg15
(lp2737
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2738
S'space'
p2739
asg95
I8
sa(dp2740
g16
(lp2741
S'd'
asg18
S'Y'
sS'.thisRepN'
p2742
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2743
I9
sS'.thisN'
p2744
I339
sS'.thisIndex'
p2745
I6
sg15
(lp2746
S'k'
asg30
VM
sg17
S'N'
sg14
I7
sg19
Nsg95
I6
sa(dp2747
g16
(lp2748
S'd'
asg18
S'Y'
sS'.thisRepN'
p2749
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2750
I10
sS'.thisN'
p2751
I340
sS'.thisIndex'
p2752
I8
sg15
(lp2753
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2754
g16
(lp2755
S'd'
asg18
S'N'
sS'.thisRepN'
p2756
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2757
I0
sS'.thisN'
p2758
I341
sS'.thisIndex'
p2759
I7
sg15
(lp2760
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2761
g16
(lp2762
S'k'
asg18
S'Y'
sS'.thisRepN'
p2763
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2764
I1
sS'.thisN'
p2765
I342
sS'.thisIndex'
p2766
I9
sg15
(lp2767
S'd'
asg30
VM
sg17
S'N'
sg14
I7
sg19
Nsg95
I9
sa(dp2768
g16
(lp2769
S'k'
asg18
S'N'
sS'.thisRepN'
p2770
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2771
I2
sS'.thisN'
p2772
I343
sS'.thisIndex'
p2773
I7
sg15
(lp2774
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2775
g16
(lp2776
S'd'
asg18
S'Y'
sS'.thisRepN'
p2777
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2778
I3
sS'.thisN'
p2779
I344
sS'.thisIndex'
p2780
I8
sg15
(lp2781
S'd'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
(lp2782
S'space'
p2783
asg95
I8
sa(dp2784
g16
(lp2785
S'k'
asg18
S'N'
sS'.thisRepN'
p2786
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2787
I4
sS'.thisN'
p2788
I345
sS'.thisIndex'
p2789
I8
sg15
(lp2790
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2791
g16
(lp2792
S'k'
asg18
S'N'
sS'.thisRepN'
p2793
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2794
I5
sS'.thisN'
p2795
I346
sS'.thisIndex'
p2796
I1
sg15
(lp2797
S'd'
asg30
VM
sg17
S'N'
sg14
I7
sg19
Nsg95
I1
sa(dp2798
g16
(lp2799
S'k'
asg18
S'N'
sS'.thisRepN'
p2800
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2801
I6
sS'.thisN'
p2802
I347
sS'.thisIndex'
p2803
I6
sg15
(lp2804
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2805
g16
(lp2806
S'k'
asg18
S'N'
sS'.thisRepN'
p2807
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2808
I7
sS'.thisN'
p2809
I348
sS'.thisIndex'
p2810
I8
sg15
(lp2811
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2812
g16
(lp2813
S'k'
asg18
S'N'
sg22
I38
sS'.thisN'
p2814
I349
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2815
I8
sS'.thisRepN'
p2816
I31
sg21
I42
sS'.thisIndex'
p2817
I4
sg23
I25
sg15
(lp2818
S'k'
asg30
VM
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2819
g16
(lp2820
S'd'
asg95
I8
sS'.thisRepN'
p2821
I31
sg30
VM
sg31
g32
sS'.thisTrialN'
p2822
I9
sS'.thisN'
p2823
I350
sS'.thisIndex'
p2824
I8
sg15
(lp2825
S'd'
asg17
S'Y'
sg14
I8
sa(dp2826
g16
(lp2827
S'd'
asg95
I1
sS'.thisRepN'
p2828
I31
sg30
VM
sg31
g32
sS'.thisTrialN'
p2829
I10
sS'.thisN'
p2830
I351
sS'.thisIndex'
p2831
I1
sg15
(lp2832
S'd'
asg17
S'Y'
sg14
I8
sa(dp2833
g16
(lp2834
S'k'
asg18
S'Y'
sS'.thisRepN'
p2835
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2836
I0
sS'.thisN'
p2837
I352
sS'.thisIndex'
p2838
I0
sg15
(lp2839
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp2840
S'space'
p2841
asg95
I0
sa(dp2842
g16
(lp2843
S'k'
asg18
S'Y'
sS'.thisRepN'
p2844
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2845
I1
sS'.thisN'
p2846
I353
sS'.thisIndex'
p2847
I8
sg15
(lp2848
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp2849
S'space'
p2850
asg95
I8
sa(dp2851
g16
(lp2852
S'k'
asg18
S'N'
sS'.thisRepN'
p2853
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2854
I2
sS'.thisN'
p2855
I354
sS'.thisIndex'
p2856
I9
sg15
(lp2857
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp2858
g16
(lp2859
S'k'
asg18
S'Y'
sS'.thisRepN'
p2860
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2861
I3
sS'.thisN'
p2862
I355
sS'.thisIndex'
p2863
I5
sg15
(lp2864
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp2865
S'space'
p2866
asg95
I5
sa(dp2867
g16
(lp2868
S'k'
asg18
S'Y'
sS'.thisRepN'
p2869
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2870
I4
sS'.thisN'
p2871
I356
sS'.thisIndex'
p2872
I5
sg15
(lp2873
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp2874
S'space'
p2875
asg95
I5
sa(dp2876
g16
(lp2877
S'd'
asg18
S'Y'
sS'.thisRepN'
p2878
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2879
I5
sS'.thisN'
p2880
I357
sS'.thisIndex'
p2881
I10
sg15
(lp2882
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp2883
S'space'
p2884
asg95
I10
sa(dp2885
g16
(lp2886
S'd'
asg18
S'Y'
sS'.thisRepN'
p2887
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2888
I6
sS'.thisN'
p2889
I358
sS'.thisIndex'
p2890
I2
sg15
(lp2891
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp2892
S'space'
p2893
asg95
I2
sa(dp2894
g16
(lp2895
S'd'
asg18
S'N'
sS'.thisRepN'
p2896
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2897
I7
sS'.thisN'
p2898
I359
sS'.thisIndex'
p2899
I9
sg15
(lp2900
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp2901
S'space'
p2902
asg95
I9
sa(dp2903
g16
(lp2904
S'k'
asg18
S'Y'
sS'.thisRepN'
p2905
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2906
I8
sS'.thisN'
p2907
I360
sS'.thisIndex'
p2908
I8
sg15
(lp2909
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp2910
S'space'
p2911
asg95
I8
sa(dp2912
g16
(lp2913
S'k'
asg18
S'N'
sS'.thisRepN'
p2914
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2915
I9
sS'.thisN'
p2916
I361
sS'.thisIndex'
p2917
I1
sg15
(lp2918
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp2919
g16
(lp2920
S'd'
asg18
S'N'
sS'.thisRepN'
p2921
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2922
I10
sS'.thisN'
p2923
I362
sS'.thisIndex'
p2924
I1
sg15
(lp2925
S'k'
asg30
VM
sg17
S'N'
sg14
I8
sg19
Nsg95
I1
sa(dp2926
g16
(lp2927
S'd'
asg18
S'Y'
sS'.thisRepN'
p2928
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2929
I0
sS'.thisN'
p2930
I363
sS'.thisIndex'
p2931
I4
sg15
(lp2932
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp2933
S'space'
p2934
asg95
I4
sa(dp2935
g16
(lp2936
S'd'
asg18
S'N'
sS'.thisRepN'
p2937
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2938
I1
sS'.thisN'
p2939
I364
sS'.thisIndex'
p2940
I7
sg15
(lp2941
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp2942
g16
(lp2943
S'd'
asg18
S'Y'
sS'.thisRepN'
p2944
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2945
I2
sS'.thisN'
p2946
I365
sS'.thisIndex'
p2947
I0
sg15
(lp2948
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp2949
g16
(lp2950
S'k'
asg18
S'N'
sS'.thisRepN'
p2951
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2952
I3
sS'.thisN'
p2953
I366
sS'.thisIndex'
p2954
I5
sg15
(lp2955
S'd'
asg30
VM
sg17
S'N'
sg14
I8
sg19
Nsg95
I5
sa(dp2956
g16
(lp2957
S'd'
asg18
S'N'
sS'.thisRepN'
p2958
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2959
I4
sS'.thisN'
p2960
I367
sS'.thisIndex'
p2961
I1
sg15
(lp2962
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp2963
g16
(lp2964
S'd'
asg18
S'N'
sS'.thisRepN'
p2965
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2966
I5
sS'.thisN'
p2967
I368
sS'.thisIndex'
p2968
I2
sg15
(lp2969
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp2970
g16
(lp2971
S'd'
asg18
S'Y'
sS'.thisRepN'
p2972
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2973
I6
sS'.thisN'
p2974
I369
sS'.thisIndex'
p2975
I10
sg15
(lp2976
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I10
sa(dp2977
g16
(lp2978
S'k'
asg18
S'N'
sS'.thisRepN'
p2979
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2980
I7
sS'.thisN'
p2981
I370
sS'.thisIndex'
p2982
I4
sg15
(lp2983
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp2984
g16
(lp2985
S'd'
asg18
S'N'
sS'.thisRepN'
p2986
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2987
I8
sS'.thisN'
p2988
I371
sS'.thisIndex'
p2989
I5
sg15
(lp2990
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp2991
S'space'
p2992
asg95
I5
sa(dp2993
g16
(lp2994
S'k'
asg18
S'N'
sS'.thisRepN'
p2995
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2996
I9
sS'.thisN'
p2997
I372
sS'.thisIndex'
p2998
I8
sg15
(lp2999
S'd'
asg30
VM
sg17
S'N'
sg14
I8
sg19
Nsg95
I8
sa(dp3000
g16
(lp3001
S'd'
asg18
S'N'
sS'.thisRepN'
p3002
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3003
I10
sS'.thisN'
p3004
I373
sS'.thisIndex'
p3005
I2
sg15
(lp3006
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp3007
g16
(lp3008
S'k'
asg18
S'Y'
sS'.thisRepN'
p3009
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3010
I0
sS'.thisN'
p3011
I374
sS'.thisIndex'
p3012
I4
sg15
(lp3013
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp3014
S'space'
p3015
asg95
I4
sa(dp3016
g16
(lp3017
S'k'
asg18
S'Y'
sS'.thisRepN'
p3018
I34
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3019
I1
sS'.thisN'
p3020
I375
sS'.thisIndex'
p3021
I6
sg15
(lp3022
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp3023
g16
(lp3024
S'k'
asg18
S'N'
sS'.thisRepN'
p3025
I34
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3026
I2
sS'.thisN'
p3027
I376
sS'.thisIndex'
p3028
I2
sg15
(lp3029
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp3030
S'space'
p3031
asg95
I2
sa(dp3032
g16
(lp3033
S'd'
asg18
S'Y'
sS'.thisRepN'
p3034
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3035
I3
sS'.thisN'
p3036
I377
sS'.thisIndex'
p3037
I7
sg15
(lp3038
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp3039
S'space'
p3040
asg95
I7
sa(dp3041
g16
(lp3042
S'd'
asg18
S'Y'
sS'.thisRepN'
p3043
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3044
I4
sS'.thisN'
p3045
I378
sS'.thisIndex'
p3046
I6
sg15
(lp3047
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp3048
S'space'
p3049
asg95
I6
sa(dp3050
g16
(lp3051
S'd'
asg18
S'Y'
sS'.thisRepN'
p3052
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3053
I5
sS'.thisN'
p3054
I379
sS'.thisIndex'
p3055
I6
sg15
(lp3056
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp3057
S'space'
p3058
asg95
I6
sa(dp3059
g16
(lp3060
S'k'
asg18
S'Y'
sS'.thisRepN'
p3061
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3062
I6
sS'.thisN'
p3063
I380
sS'.thisIndex'
p3064
I6
sg15
(lp3065
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp3066
S'space'
p3067
asg95
I6
sa(dp3068
g16
(lp3069
S'k'
asg18
S'N'
sS'.thisRepN'
p3070
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3071
I7
sS'.thisN'
p3072
I381
sS'.thisIndex'
p3073
I3
sg15
(lp3074
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp3075
g16
(lp3076
S'd'
asg18
S'N'
sS'.thisRepN'
p3077
I34
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3078
I8
sS'.thisN'
p3079
I382
sS'.thisIndex'
p3080
I2
sg15
(lp3081
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp3082
S'space'
p3083
asg95
I2
sa(dp3084
g16
(lp3085
S'd'
asg18
S'Y'
sS'.thisRepN'
p3086
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3087
I9
sS'.thisN'
p3088
I383
sS'.thisIndex'
p3089
I0
sg15
(lp3090
S'k'
asg30
VM
sg17
S'N'
sg14
I8
sg19
(lp3091
S'space'
p3092
asg95
I0
sa(dp3093
g16
(lp3094
S'k'
asg18
S'Y'
sS'.thisRepN'
p3095
I34
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3096
I10
sS'.thisN'
p3097
I384
sS'.thisIndex'
p3098
I8
sg15
(lp3099
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp3100
S'space'
p3101
asg95
I8
sa(dp3102
g16
(lp3103
S'd'
asg18
S'Y'
sS'.thisRepN'
p3104
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3105
I0
sS'.thisN'
p3106
I385
sS'.thisIndex'
p3107
I1
sg15
(lp3108
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp3109
S'space'
p3110
asg95
I1
sa(dp3111
g16
(lp3112
S'd'
asg18
S'Y'
sS'.thisRepN'
p3113
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3114
I1
sS'.thisN'
p3115
I386
sS'.thisIndex'
p3116
I4
sg15
(lp3117
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp3118
S'space'
p3119
asg95
I4
sa(dp3120
g16
(lp3121
S'd'
asg18
S'Y'
sS'.thisRepN'
p3122
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3123
I2
sS'.thisN'
p3124
I387
sS'.thisIndex'
p3125
I7
sg15
(lp3126
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
(lp3127
S'space'
p3128
asg95
I7
sa(dp3129
g16
(lp3130
S'd'
asg18
S'N'
sS'.thisRepN'
p3131
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3132
I3
sS'.thisN'
p3133
I388
sS'.thisIndex'
p3134
I3
sg15
(lp3135
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp3136
g16
(lp3137
S'd'
asg18
S'Y'
sS'.thisRepN'
p3138
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3139
I4
sS'.thisN'
p3140
I389
sS'.thisIndex'
p3141
I2
sg15
(lp3142
S'k'
asg30
VM
sg17
S'N'
sg14
I8
sg19
(lp3143
S'space'
p3144
asg95
I2
sa(dp3145
g16
(lp3146
S'k'
asg18
S'Y'
sS'.thisRepN'
p3147
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3148
I5
sS'.thisN'
p3149
I390
sS'.thisIndex'
p3150
I3
sg15
(lp3151
S'd'
asg30
VM
sg17
S'N'
sg14
I8
sg19
(lp3152
S'space'
p3153
asg95
I3
sa(dp3154
g16
(lp3155
S'k'
asg18
S'N'
sS'.thisRepN'
p3156
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3157
I6
sS'.thisN'
p3158
I391
sS'.thisIndex'
p3159
I0
sg15
(lp3160
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp3161
g16
(lp3162
S'd'
asg18
S'N'
sS'.thisRepN'
p3163
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3164
I7
sS'.thisN'
p3165
I392
sS'.thisIndex'
p3166
I1
sg15
(lp3167
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp3168
g16
(lp3169
S'd'
asg18
S'N'
sS'.thisRepN'
p3170
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3171
I8
sS'.thisN'
p3172
I393
sS'.thisIndex'
p3173
I5
sg15
(lp3174
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp3175
g16
(lp3176
S'd'
asg18
S'N'
sS'.thisRepN'
p3177
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3178
I9
sS'.thisN'
p3179
I394
sS'.thisIndex'
p3180
I9
sg15
(lp3181
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp3182
g16
(lp3183
S'd'
asg18
S'N'
sS'.thisRepN'
p3184
I35
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3185
I10
sS'.thisN'
p3186
I395
sS'.thisIndex'
p3187
I5
sg15
(lp3188
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp3189
g16
(lp3190
S'd'
asg18
S'N'
sS'.thisRepN'
p3191
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3192
I0
sS'.thisN'
p3193
I396
sS'.thisIndex'
p3194
I2
sg15
(lp3195
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp3196
g16
(lp3197
S'k'
asg18
S'N'
sS'.thisRepN'
p3198
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3199
I1
sS'.thisN'
p3200
I397
sS'.thisIndex'
p3201
I5
sg15
(lp3202
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp3203
g16
(lp3204
S'k'
asg18
S'N'
sS'.thisRepN'
p3205
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3206
I2
sS'.thisN'
p3207
I398
sS'.thisIndex'
p3208
I10
sg15
(lp3209
S'k'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I10
sa(dp3210
g16
(lp3211
S'd'
asg18
S'N'
sg22
I41
sS'.thisN'
p3212
I399
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3213
I3
sS'.thisRepN'
p3214
I36
sg21
I44
sS'.thisIndex'
p3215
I1
sg23
I23
sg15
(lp3216
S'd'
asg30
VM
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp3217
g16
(lp3218
S'k'
asg95
I10
sS'.thisRepN'
p3219
I36
sg30
VM
sg31
g32
sS'.thisTrialN'
p3220
I4
sS'.thisN'
p3221
I400
sS'.thisIndex'
p3222
I10
sg15
(lp3223
S'k'
asg17
S'Y'
sg14
I9
sa(dp3224
g16
(lp3225
S'd'
asg95
I4
sS'.thisRepN'
p3226
I36
sg30
VM
sg31
g32
sS'.thisTrialN'
p3227
I5
sS'.thisN'
p3228
I401
sS'.thisIndex'
p3229
I4
sg15
(lp3230
S'd'
asg17
S'Y'
sg14
I9
sa(dp3231
g16
(lp3232
S'd'
asg18
S'N'
sS'.thisRepN'
p3233
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3234
I6
sS'.thisN'
p3235
I402
sS'.thisIndex'
p3236
I7
sg15
(lp3237
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I7
sa(dp3238
g16
(lp3239
S'd'
asg18
S'N'
sS'.thisRepN'
p3240
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3241
I7
sS'.thisN'
p3242
I403
sS'.thisIndex'
p3243
I9
sg15
(lp3244
S'k'
asg30
VM
sg17
S'N'
sg14
I9
sg19
Nsg95
I9
sa(dp3245
g16
(lp3246
S'k'
asg18
S'Y'
sS'.thisRepN'
p3247
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3248
I8
sS'.thisN'
p3249
I404
sS'.thisIndex'
p3250
I5
sg15
(lp3251
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3252
S'space'
p3253
asg95
I5
sa(dp3254
g16
(lp3255
S'd'
asg18
S'N'
sS'.thisRepN'
p3256
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3257
I9
sS'.thisN'
p3258
I405
sS'.thisIndex'
p3259
I2
sg15
(lp3260
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3261
g16
(lp3262
S'd'
asg18
S'N'
sS'.thisRepN'
p3263
I36
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3264
I10
sS'.thisN'
p3265
I406
sS'.thisIndex'
p3266
I2
sg15
(lp3267
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3268
g16
(lp3269
S'k'
asg18
S'Y'
sS'.thisRepN'
p3270
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3271
I0
sS'.thisN'
p3272
I407
sS'.thisIndex'
p3273
I2
sg15
(lp3274
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3275
S'space'
p3276
asg95
I2
sa(dp3277
g16
(lp3278
S'd'
asg18
S'N'
sS'.thisRepN'
p3279
I37
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3280
I1
sS'.thisN'
p3281
I408
sS'.thisIndex'
p3282
I5
sg15
(lp3283
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3284
S'space'
p3285
asg95
I5
sa(dp3286
g16
(lp3287
S'd'
asg18
S'N'
sS'.thisRepN'
p3288
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3289
I2
sS'.thisN'
p3290
I409
sS'.thisIndex'
p3291
I6
sg15
(lp3292
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3293
g16
(lp3294
S'd'
asg18
S'N'
sS'.thisRepN'
p3295
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3296
I3
sS'.thisN'
p3297
I410
sS'.thisIndex'
p3298
I3
sg15
(lp3299
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3300
g16
(lp3301
S'd'
asg18
S'N'
sS'.thisRepN'
p3302
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3303
I4
sS'.thisN'
p3304
I411
sS'.thisIndex'
p3305
I2
sg15
(lp3306
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3307
g16
(lp3308
S'd'
asg18
S'Y'
sS'.thisRepN'
p3309
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3310
I5
sS'.thisN'
p3311
I412
sS'.thisIndex'
p3312
I5
sg15
(lp3313
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3314
S'space'
p3315
asg95
I5
sa(dp3316
g16
(lp3317
S'k'
asg18
S'Y'
sS'.thisRepN'
p3318
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3319
I6
sS'.thisN'
p3320
I413
sS'.thisIndex'
p3321
I10
sg15
(lp3322
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3323
S'space'
p3324
asg95
I10
sa(dp3325
g16
(lp3326
S'k'
asg18
S'N'
sS'.thisRepN'
p3327
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3328
I7
sS'.thisN'
p3329
I414
sS'.thisIndex'
p3330
I8
sg15
(lp3331
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I8
sa(dp3332
g16
(lp3333
S'k'
asg18
S'Y'
sS'.thisRepN'
p3334
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3335
I8
sS'.thisN'
p3336
I415
sS'.thisIndex'
p3337
I10
sg15
(lp3338
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3339
S'space'
p3340
asg95
I10
sa(dp3341
g16
(lp3342
S'k'
asg18
S'Y'
sS'.thisRepN'
p3343
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3344
I9
sS'.thisN'
p3345
I416
sS'.thisIndex'
p3346
I2
sg15
(lp3347
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3348
S'space'
p3349
asg95
I2
sa(dp3350
g16
(lp3351
S'k'
asg18
S'N'
sS'.thisRepN'
p3352
I37
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3353
I10
sS'.thisN'
p3354
I417
sS'.thisIndex'
p3355
I0
sg15
(lp3356
S'd'
asg30
VM
sg17
S'N'
sg14
I9
sg19
Nsg95
I0
sa(dp3357
g16
(lp3358
S'd'
asg18
S'N'
sS'.thisRepN'
p3359
I38
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3360
I0
sS'.thisN'
p3361
I418
sS'.thisIndex'
p3362
I0
sg15
(lp3363
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3364
S'space'
p3365
asg95
I0
sa(dp3366
g16
(lp3367
S'd'
asg18
S'Y'
sS'.thisRepN'
p3368
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3369
I1
sS'.thisN'
p3370
I419
sS'.thisIndex'
p3371
I0
sg15
(lp3372
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3373
S'space'
p3374
asg95
I0
sa(dp3375
g16
(lp3376
S'd'
asg18
S'N'
sS'.thisRepN'
p3377
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3378
I2
sS'.thisN'
p3379
I420
sS'.thisIndex'
p3380
I9
sg15
(lp3381
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3382
g16
(lp3383
S'k'
asg18
S'Y'
sS'.thisRepN'
p3384
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3385
I3
sS'.thisN'
p3386
I421
sS'.thisIndex'
p3387
I10
sg15
(lp3388
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3389
S'space'
p3390
asg95
I10
sa(dp3391
g16
(lp3392
S'd'
asg18
S'N'
sS'.thisRepN'
p3393
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3394
I4
sS'.thisN'
p3395
I422
sS'.thisIndex'
p3396
I9
sg15
(lp3397
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3398
g16
(lp3399
S'k'
asg18
S'N'
sS'.thisRepN'
p3400
I38
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3401
I5
sS'.thisN'
p3402
I423
sS'.thisIndex'
p3403
I9
sg15
(lp3404
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3405
S'space'
p3406
asg95
I9
sa(dp3407
g16
(lp3408
S'd'
asg18
S'Y'
sS'.thisRepN'
p3409
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3410
I6
sS'.thisN'
p3411
I424
sS'.thisIndex'
p3412
I9
sg15
(lp3413
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3414
S'space'
p3415
asg95
I9
sa(dp3416
g16
(lp3417
S'd'
asg18
S'Y'
sS'.thisRepN'
p3418
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3419
I7
sS'.thisN'
p3420
I425
sS'.thisIndex'
p3421
I0
sg15
(lp3422
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3423
S'space'
p3424
asg95
I0
sa(dp3425
g16
(lp3426
S'd'
asg18
S'Y'
sS'.thisRepN'
p3427
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3428
I8
sS'.thisN'
p3429
I426
sS'.thisIndex'
p3430
I3
sg15
(lp3431
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3432
S'space'
p3433
asg95
I3
sa(dp3434
g16
(lp3435
S'k'
asg18
S'N'
sS'.thisRepN'
p3436
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3437
I9
sS'.thisN'
p3438
I427
sS'.thisIndex'
p3439
I1
sg15
(lp3440
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3441
g16
(lp3442
S'd'
asg18
S'N'
sS'.thisRepN'
p3443
I38
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3444
I10
sS'.thisN'
p3445
I428
sS'.thisIndex'
p3446
I1
sg15
(lp3447
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3448
g16
(lp3449
S'd'
asg18
S'Y'
sS'.thisRepN'
p3450
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3451
I0
sS'.thisN'
p3452
I429
sS'.thisIndex'
p3453
I4
sg15
(lp3454
S'k'
asg30
VM
sg17
S'N'
sg14
I9
sg19
(lp3455
S'space'
p3456
asg95
I4
sa(dp3457
g16
(lp3458
S'k'
asg18
S'Y'
sS'.thisRepN'
p3459
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3460
I1
sS'.thisN'
p3461
I430
sS'.thisIndex'
p3462
I7
sg15
(lp3463
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3464
S'space'
p3465
asg95
I7
sa(dp3466
g16
(lp3467
S'k'
asg18
S'N'
sS'.thisRepN'
p3468
I39
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3469
I2
sS'.thisN'
p3470
I431
sS'.thisIndex'
p3471
I9
sg15
(lp3472
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3473
S'd'
asg95
I9
sa(dp3474
g16
(lp3475
S'k'
asg18
S'Y'
sS'.thisRepN'
p3476
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3477
I3
sS'.thisN'
p3478
I432
sS'.thisIndex'
p3479
I10
sg15
(lp3480
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3481
S'space'
p3482
asg95
I10
sa(dp3483
g16
(lp3484
S'd'
asg18
S'N'
sS'.thisRepN'
p3485
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3486
I4
sS'.thisN'
p3487
I433
sS'.thisIndex'
p3488
I3
sg15
(lp3489
S'k'
asg30
VM
sg17
S'N'
sg14
I9
sg19
Nsg95
I3
sa(dp3490
g16
(lp3491
S'k'
asg18
S'N'
sS'.thisRepN'
p3492
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3493
I5
sS'.thisN'
p3494
I434
sS'.thisIndex'
p3495
I5
sg15
(lp3496
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3497
g16
(lp3498
S'k'
asg18
S'Y'
sS'.thisRepN'
p3499
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3500
I6
sS'.thisN'
p3501
I435
sS'.thisIndex'
p3502
I0
sg15
(lp3503
S'd'
asg30
VM
sg17
S'N'
sg14
I9
sg19
(lp3504
S'space'
p3505
asg95
I0
sa(dp3506
g16
(lp3507
S'd'
asg18
S'N'
sS'.thisRepN'
p3508
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3509
I7
sS'.thisN'
p3510
I436
sS'.thisIndex'
p3511
I8
sg15
(lp3512
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I8
sa(dp3513
g16
(lp3514
S'k'
asg18
S'N'
sS'.thisRepN'
p3515
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3516
I8
sS'.thisN'
p3517
I437
sS'.thisIndex'
p3518
I6
sg15
(lp3519
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3520
g16
(lp3521
S'd'
asg18
S'N'
sS'.thisRepN'
p3522
I39
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3523
I9
sS'.thisN'
p3524
I438
sS'.thisIndex'
p3525
I1
sg15
(lp3526
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3527
S'space'
p3528
asg95
I1
sa(dp3529
g16
(lp3530
S'd'
asg18
S'N'
sS'.thisRepN'
p3531
I39
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3532
I10
sS'.thisN'
p3533
I439
sS'.thisIndex'
p3534
I9
sg15
(lp3535
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3536
g16
(lp3537
S'k'
asg18
S'N'
sS'.thisRepN'
p3538
I40
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3539
I0
sS'.thisN'
p3540
I440
sS'.thisIndex'
p3541
I9
sg15
(lp3542
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3543
S'space'
p3544
asg95
I9
sa(dp3545
g16
(lp3546
S'k'
asg18
S'Y'
sS'.thisRepN'
p3547
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3548
I1
sS'.thisN'
p3549
I441
sS'.thisIndex'
p3550
I4
sg15
(lp3551
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3552
S'space'
p3553
asg95
I4
sa(dp3554
g16
(lp3555
S'd'
asg18
S'N'
sS'.thisRepN'
p3556
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3557
I2
sS'.thisN'
p3558
I442
sS'.thisIndex'
p3559
I9
sg15
(lp3560
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3561
g16
(lp3562
S'k'
asg18
S'N'
sS'.thisRepN'
p3563
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3564
I3
sS'.thisN'
p3565
I443
sS'.thisIndex'
p3566
I2
sg15
(lp3567
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3568
g16
(lp3569
S'k'
asg18
S'Y'
sS'.thisRepN'
p3570
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3571
I4
sS'.thisN'
p3572
I444
sS'.thisIndex'
p3573
I4
sg15
(lp3574
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3575
S'space'
p3576
asg95
I4
sa(dp3577
g16
(lp3578
S'k'
asg18
S'Y'
sS'.thisRepN'
p3579
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3580
I5
sS'.thisN'
p3581
I445
sS'.thisIndex'
p3582
I1
sg15
(lp3583
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3584
S'space'
p3585
asg95
I1
sa(dp3586
g16
(lp3587
S'k'
asg18
S'N'
sS'.thisRepN'
p3588
I40
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3589
I6
sS'.thisN'
p3590
I446
sS'.thisIndex'
p3591
I2
sg15
(lp3592
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
(lp3593
S'space'
p3594
asg95
I2
sa(dp3595
g16
(lp3596
S'k'
asg18
S'N'
sS'.thisRepN'
p3597
I40
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3598
I7
sS'.thisN'
p3599
I447
sS'.thisIndex'
p3600
I5
sg15
(lp3601
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3602
g16
(lp3603
S'k'
asg18
S'Y'
sS'.thisRepN'
p3604
I40
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3605
I8
sS'.thisN'
p3606
I448
sS'.thisIndex'
p3607
I9
sg15
(lp3608
S'k'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3609
g16
(lp3610
S'd'
asg18
S'N'
sg22
I40
sS'.thisN'
p3611
I449
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3612
I9
sS'.thisRepN'
p3613
I40
sg21
I45
sS'.thisIndex'
p3614
I4
sg23
I19
sg15
(lp3615
S'd'
asg30
VM
sg17
S'Y'
sg14
I9
sg19
Nsg95
I4
sa(dp3616
g16
(lp3617
S'd'
asg95
I3
sS'.thisRepN'
p3618
I40
sg30
VM
sg31
g32
sS'.thisTrialN'
p3619
I10
sS'.thisN'
p3620
I450
sS'.thisIndex'
p3621
I3
sg15
(lp3622
S'k'
asg17
S'N'
sg14
I10
sa(dp3623
g16
(lp3624
S'k'
asg95
I1
sS'.thisRepN'
p3625
I41
sg30
VM
sg31
g32
sS'.thisTrialN'
p3626
I0
sS'.thisN'
p3627
I451
sS'.thisIndex'
p3628
I1
sg15
(lp3629
S'k'
asg17
S'Y'
sg14
I10
sa(dp3630
g16
(lp3631
S'k'
asg18
S'N'
sS'.thisRepN'
p3632
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3633
I1
sS'.thisN'
p3634
I452
sS'.thisIndex'
p3635
I10
sg15
(lp3636
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I10
sa(dp3637
g16
(lp3638
S'k'
asg18
S'N'
sS'.thisRepN'
p3639
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3640
I2
sS'.thisN'
p3641
I453
sS'.thisIndex'
p3642
I8
sg15
(lp3643
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3644
g16
(lp3645
S'k'
asg18
S'Y'
sS'.thisRepN'
p3646
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3647
I3
sS'.thisN'
p3648
I454
sS'.thisIndex'
p3649
I7
sg15
(lp3650
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3651
S'space'
p3652
asg95
I7
sa(dp3653
g16
(lp3654
S'k'
asg18
S'N'
sS'.thisRepN'
p3655
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3656
I4
sS'.thisN'
p3657
I455
sS'.thisIndex'
p3658
I1
sg15
(lp3659
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3660
g16
(lp3661
S'k'
asg18
S'Y'
sS'.thisRepN'
p3662
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3663
I5
sS'.thisN'
p3664
I456
sS'.thisIndex'
p3665
I3
sg15
(lp3666
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3667
S'space'
p3668
asg95
I3
sa(dp3669
g16
(lp3670
S'd'
asg18
S'N'
sS'.thisRepN'
p3671
I41
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3672
I6
sS'.thisN'
p3673
I457
sS'.thisIndex'
p3674
I2
sg15
(lp3675
S'k'
asg30
VM
sg17
S'N'
sg14
I10
sg19
(lp3676
S'space'
p3677
asg95
I2
sa(dp3678
g16
(lp3679
S'd'
asg18
S'N'
sS'.thisRepN'
p3680
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3681
I7
sS'.thisN'
p3682
I458
sS'.thisIndex'
p3683
I7
sg15
(lp3684
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I7
sa(dp3685
g16
(lp3686
S'd'
asg18
S'N'
sS'.thisRepN'
p3687
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3688
I8
sS'.thisN'
p3689
I459
sS'.thisIndex'
p3690
I7
sg15
(lp3691
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I7
sa(dp3692
g16
(lp3693
S'k'
asg18
S'Y'
sS'.thisRepN'
p3694
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3695
I9
sS'.thisN'
p3696
I460
sS'.thisIndex'
p3697
I8
sg15
(lp3698
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3699
S'space'
p3700
asg95
I8
sa(dp3701
g16
(lp3702
S'd'
asg18
S'N'
sS'.thisRepN'
p3703
I41
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3704
I10
sS'.thisN'
p3705
I461
sS'.thisIndex'
p3706
I5
sg15
(lp3707
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3708
g16
(lp3709
S'd'
asg18
S'N'
sS'.thisRepN'
p3710
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3711
I0
sS'.thisN'
p3712
I462
sS'.thisIndex'
p3713
I2
sg15
(lp3714
S'k'
asg30
VM
sg17
S'N'
sg14
I10
sg19
Nsg95
I2
sa(dp3715
g16
(lp3716
S'k'
asg18
S'N'
sS'.thisRepN'
p3717
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3718
I1
sS'.thisN'
p3719
I463
sS'.thisIndex'
p3720
I8
sg15
(lp3721
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3722
g16
(lp3723
S'k'
asg18
S'N'
sS'.thisRepN'
p3724
I42
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3725
I2
sS'.thisN'
p3726
I464
sS'.thisIndex'
p3727
I7
sg15
(lp3728
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3729
S'space'
p3730
asg95
I7
sa(dp3731
g16
(lp3732
S'k'
asg18
S'Y'
sS'.thisRepN'
p3733
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3734
I3
sS'.thisN'
p3735
I465
sS'.thisIndex'
p3736
I10
sg15
(lp3737
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3738
S'space'
p3739
asg95
I10
sa(dp3740
g16
(lp3741
S'd'
asg18
S'N'
sS'.thisRepN'
p3742
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3743
I4
sS'.thisN'
p3744
I466
sS'.thisIndex'
p3745
I3
sg15
(lp3746
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3747
g16
(lp3748
S'd'
asg18
S'Y'
sS'.thisRepN'
p3749
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3750
I5
sS'.thisN'
p3751
I467
sS'.thisIndex'
p3752
I8
sg15
(lp3753
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3754
S'space'
p3755
asg95
I8
sa(dp3756
g16
(lp3757
S'd'
asg18
S'Y'
sS'.thisRepN'
p3758
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3759
I6
sS'.thisN'
p3760
I468
sS'.thisIndex'
p3761
I1
sg15
(lp3762
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3763
S'space'
p3764
asg95
I1
sa(dp3765
g16
(lp3766
S'k'
asg18
S'Y'
sS'.thisRepN'
p3767
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3768
I7
sS'.thisN'
p3769
I469
sS'.thisIndex'
p3770
I2
sg15
(lp3771
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3772
S'space'
p3773
asg95
I2
sa(dp3774
g16
(lp3775
S'k'
asg18
S'Y'
sS'.thisRepN'
p3776
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3777
I8
sS'.thisN'
p3778
I470
sS'.thisIndex'
p3779
I2
sg15
(lp3780
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3781
S'space'
p3782
asg95
I2
sa(dp3783
g16
(lp3784
S'k'
asg18
S'N'
sS'.thisRepN'
p3785
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3786
I9
sS'.thisN'
p3787
I471
sS'.thisIndex'
p3788
I5
sg15
(lp3789
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3790
g16
(lp3791
S'd'
asg18
S'N'
sS'.thisRepN'
p3792
I42
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3793
I10
sS'.thisN'
p3794
I472
sS'.thisIndex'
p3795
I9
sg15
(lp3796
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3797
g16
(lp3798
S'd'
asg18
S'N'
sS'.thisRepN'
p3799
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3800
I0
sS'.thisN'
p3801
I473
sS'.thisIndex'
p3802
I9
sg15
(lp3803
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3804
g16
(lp3805
S'k'
asg18
S'Y'
sS'.thisRepN'
p3806
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3807
I1
sS'.thisN'
p3808
I474
sS'.thisIndex'
p3809
I2
sg15
(lp3810
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3811
S'space'
p3812
asg95
I2
sa(dp3813
g16
(lp3814
S'k'
asg18
S'Y'
sS'.thisRepN'
p3815
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3816
I2
sS'.thisN'
p3817
I475
sS'.thisIndex'
p3818
I9
sg15
(lp3819
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3820
S'space'
p3821
asg95
I9
sa(dp3822
g16
(lp3823
S'd'
asg18
S'Y'
sS'.thisRepN'
p3824
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3825
I3
sS'.thisN'
p3826
I476
sS'.thisIndex'
p3827
I7
sg15
(lp3828
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3829
S'space'
p3830
asg95
I7
sa(dp3831
g16
(lp3832
S'k'
asg18
S'N'
sS'.thisRepN'
p3833
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3834
I4
sS'.thisN'
p3835
I477
sS'.thisIndex'
p3836
I1
sg15
(lp3837
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3838
g16
(lp3839
S'd'
asg18
S'Y'
sS'.thisRepN'
p3840
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3841
I5
sS'.thisN'
p3842
I478
sS'.thisIndex'
p3843
I1
sg15
(lp3844
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3845
S'space'
p3846
asg95
I1
sa(dp3847
g16
(lp3848
S'd'
asg18
S'Y'
sS'.thisRepN'
p3849
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3850
I6
sS'.thisN'
p3851
I479
sS'.thisIndex'
p3852
I1
sg15
(lp3853
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3854
S'space'
p3855
asg95
I1
sa(dp3856
g16
(lp3857
S'd'
asg18
S'N'
sS'.thisRepN'
p3858
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3859
I7
sS'.thisN'
p3860
I480
sS'.thisIndex'
p3861
I10
sg15
(lp3862
S'k'
asg30
VM
sg17
S'N'
sg14
I10
sg19
Nsg95
I10
sa(dp3863
g16
(lp3864
S'k'
asg18
S'Y'
sS'.thisRepN'
p3865
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3866
I8
sS'.thisN'
p3867
I481
sS'.thisIndex'
p3868
I10
sg15
(lp3869
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3870
S'space'
p3871
asg95
I10
sa(dp3872
g16
(lp3873
S'd'
asg18
S'Y'
sS'.thisRepN'
p3874
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3875
I9
sS'.thisN'
p3876
I482
sS'.thisIndex'
p3877
I5
sg15
(lp3878
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3879
S'space'
p3880
asg95
I5
sa(dp3881
g16
(lp3882
S'k'
asg18
S'N'
sS'.thisRepN'
p3883
I43
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3884
I10
sS'.thisN'
p3885
I483
sS'.thisIndex'
p3886
I4
sg15
(lp3887
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I4
sa(dp3888
g16
(lp3889
S'd'
asg18
S'N'
sS'.thisRepN'
p3890
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3891
I0
sS'.thisN'
p3892
I484
sS'.thisIndex'
p3893
I4
sg15
(lp3894
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I4
sa(dp3895
g16
(lp3896
S'k'
asg18
S'Y'
sS'.thisRepN'
p3897
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3898
I1
sS'.thisN'
p3899
I485
sS'.thisIndex'
p3900
I6
sg15
(lp3901
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3902
S'space'
p3903
asg95
I6
sa(dp3904
g16
(lp3905
S'k'
asg18
S'N'
sS'.thisRepN'
p3906
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3907
I2
sS'.thisN'
p3908
I486
sS'.thisIndex'
p3909
I10
sg15
(lp3910
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I10
sa(dp3911
g16
(lp3912
S'd'
asg18
S'N'
sS'.thisRepN'
p3913
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3914
I3
sS'.thisN'
p3915
I487
sS'.thisIndex'
p3916
I6
sg15
(lp3917
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I6
sa(dp3918
g16
(lp3919
S'k'
asg18
S'Y'
sS'.thisRepN'
p3920
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3921
I4
sS'.thisN'
p3922
I488
sS'.thisIndex'
p3923
I3
sg15
(lp3924
S'd'
asg30
VM
sg17
S'N'
sg14
I10
sg19
(lp3925
S'space'
p3926
asg95
I3
sa(dp3927
g16
(lp3928
S'd'
asg18
S'N'
sS'.thisRepN'
p3929
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3930
I5
sS'.thisN'
p3931
I489
sS'.thisIndex'
p3932
I3
sg15
(lp3933
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3934
g16
(lp3935
S'd'
asg18
S'Y'
sS'.thisRepN'
p3936
I44
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3937
I6
sS'.thisN'
p3938
I490
sS'.thisIndex'
p3939
I10
sg15
(lp3940
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I10
sa(dp3941
g16
(lp3942
S'k'
asg18
S'N'
sS'.thisRepN'
p3943
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3944
I7
sS'.thisN'
p3945
I491
sS'.thisIndex'
p3946
I0
sg15
(lp3947
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp3948
g16
(lp3949
S'd'
asg18
S'Y'
sS'.thisRepN'
p3950
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3951
I8
sS'.thisN'
p3952
I492
sS'.thisIndex'
p3953
I10
sg15
(lp3954
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3955
S'space'
p3956
asg95
I10
sa(dp3957
g16
(lp3958
S'd'
asg18
S'Y'
sS'.thisRepN'
p3959
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3960
I9
sS'.thisN'
p3961
I493
sS'.thisIndex'
p3962
I0
sg15
(lp3963
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3964
S'space'
p3965
asg95
I0
sa(dp3966
g16
(lp3967
S'd'
asg18
S'N'
sS'.thisRepN'
p3968
I44
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3969
I10
sS'.thisN'
p3970
I494
sS'.thisIndex'
p3971
I9
sg15
(lp3972
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3973
g16
(lp3974
S'd'
asg18
S'Y'
sS'.thisRepN'
p3975
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3976
I0
sS'.thisN'
p3977
I495
sS'.thisIndex'
p3978
I0
sg15
(lp3979
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp3980
S'space'
p3981
asg95
I0
sa(dp3982
g16
(lp3983
S'k'
asg18
S'N'
sS'.thisRepN'
p3984
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3985
I1
sS'.thisN'
p3986
I496
sS'.thisIndex'
p3987
I5
sg15
(lp3988
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3989
g16
(lp3990
S'k'
asg18
S'N'
sS'.thisRepN'
p3991
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3992
I2
sS'.thisN'
p3993
I497
sS'.thisIndex'
p3994
I3
sg15
(lp3995
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3996
g16
(lp3997
S'k'
asg18
S'Y'
sS'.thisRepN'
p3998
I45
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3999
I3
sS'.thisN'
p4000
I498
sS'.thisIndex'
p4001
I7
sg15
(lp4002
S'k'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
(lp4003
S'space'
p4004
asg95
I7
sa(dp4005
g16
(lp4006
S'd'
asg18
S'N'
sg22
I45
sS'.thisN'
p4007
I499
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4008
I4
sS'.thisRepN'
p4009
I45
sg21
I45
sS'.thisIndex'
p4010
I8
sg23
I22
sg15
(lp4011
S'd'
asg30
VM
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp4012
g16
(lp4013
S'k'
asS'.thisIndex'
p4014
I9
sS'.thisRepN'
p4015
I45
sg26
S'Y'
sg30
VM
sg31
g32
sS'.thisTrialN'
p4016
I5
sS'.thisN'
p4017
I500
sg25
S'Y'
sg24
S'Y'
sg15
(lp4018
S'k'
asg17
S'N'
sg14
I11
sg95
I9
sa(dp4019
g16
(lp4020
S'd'
asS'.thisIndex'
p4021
I4
sS'.thisRepN'
p4022
I45
sg26
S'Y'
sg30
VM
sg31
g32
sS'.thisTrialN'
p4023
I6
sS'.thisN'
p4024
I501
sg25
S'Y'
sg15
(lp4025
S'k'
asg17
S'Y'
sg14
I11
sg95
I4
sa(dp4026
g16
(lp4027
S'd'
asg18
S'Y'
sS'.thisRepN'
p4028
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4029
I7
sS'.thisN'
p4030
I502
sg25
S'Y'
sg15
(lp4031
S'd'
asg30
VM
sg17
S'N'
sg14
I11
sg19
(lp4032
S'space'
p4033
asg95
I0
sS'.thisIndex'
p4034
I0
sa(dp4035
g16
(lp4036
S'd'
asg18
S'Y'
sS'.thisRepN'
p4037
I45
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4038
I8
sS'.thisN'
p4039
I503
sg25
S'Y'
sg15
(lp4040
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4041
I5
sa(dp4042
g16
(lp4043
S'k'
asg18
S'Y'
sS'.thisRepN'
p4044
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4045
I9
sS'.thisN'
p4046
I504
sg25
S'Y'
sg15
(lp4047
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4048
S'space'
p4049
asg95
I3
sS'.thisIndex'
p4050
I3
sa(dp4051
g16
(lp4052
S'd'
asg18
S'N'
sS'.thisRepN'
p4053
I45
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4054
I10
sS'.thisN'
p4055
I505
sg25
S'Y'
sg15
(lp4056
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4057
I3
sa(dp4058
g16
(lp4059
S'k'
asg18
S'Y'
sS'.thisRepN'
p4060
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4061
I0
sS'.thisN'
p4062
I506
sg25
S'Y'
sg15
(lp4063
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4064
S'space'
p4065
asg95
I10
sS'.thisIndex'
p4066
I10
sa(dp4067
g16
(lp4068
S'k'
asg18
S'N'
sS'.thisRepN'
p4069
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4070
I1
sS'.thisN'
p4071
I507
sg25
S'Y'
sg15
(lp4072
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4073
I2
sa(dp4074
g16
(lp4075
S'd'
asg18
S'Y'
sS'.thisRepN'
p4076
I46
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4077
I2
sS'.thisN'
p4078
I508
sg25
S'Y'
sg15
(lp4079
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4080
I1
sa(dp4081
g16
(lp4082
S'k'
asg18
S'Y'
sS'.thisRepN'
p4083
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4084
I3
sS'.thisN'
p4085
I509
sg25
S'Y'
sg15
(lp4086
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4087
S'space'
p4088
asg95
I4
sS'.thisIndex'
p4089
I4
sa(dp4090
g16
(lp4091
S'd'
asg18
S'Y'
sS'.thisRepN'
p4092
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4093
I4
sS'.thisN'
p4094
I510
sg25
S'Y'
sg15
(lp4095
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4096
S'space'
p4097
asg95
I6
sS'.thisIndex'
p4098
I6
sa(dp4099
g16
(lp4100
S'k'
asg18
S'N'
sS'.thisRepN'
p4101
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4102
I5
sS'.thisN'
p4103
I511
sg25
S'Y'
sg15
(lp4104
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4105
I8
sa(dp4106
g16
(lp4107
S'd'
asg18
S'N'
sS'.thisRepN'
p4108
I46
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4109
I6
sS'.thisN'
p4110
I512
sg25
S'Y'
sg15
(lp4111
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4112
S'space'
p4113
asg95
I2
sS'.thisIndex'
p4114
I2
sa(dp4115
g16
(lp4116
S'k'
asg18
S'Y'
sS'.thisRepN'
p4117
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4118
I7
sS'.thisN'
p4119
I513
sg25
S'Y'
sg15
(lp4120
S'k'
asg30
VM
sg17
S'N'
sg14
I11
sg19
(lp4121
S'space'
p4122
asg95
I8
sS'.thisIndex'
p4123
I8
sa(dp4124
g16
(lp4125
S'd'
asg18
S'N'
sS'.thisRepN'
p4126
I46
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4127
I8
sS'.thisN'
p4128
I514
sg25
S'Y'
sg15
(lp4129
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4130
S'space'
p4131
asg95
I2
sS'.thisIndex'
p4132
I2
sa(dp4133
g16
(lp4134
S'd'
asg18
S'N'
sS'.thisRepN'
p4135
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4136
I9
sS'.thisN'
p4137
I515
sg25
S'Y'
sg15
(lp4138
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4139
I8
sa(dp4140
g16
(lp4141
S'k'
asg18
S'N'
sS'.thisRepN'
p4142
I46
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4143
I10
sS'.thisN'
p4144
I516
sg25
S'Y'
sg15
(lp4145
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4146
I9
sa(dp4147
g16
(lp4148
S'd'
asg18
S'N'
sS'.thisRepN'
p4149
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4150
I0
sS'.thisN'
p4151
I517
sg25
S'Y'
sg15
(lp4152
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4153
I7
sa(dp4154
g16
(lp4155
S'k'
asg18
S'N'
sS'.thisRepN'
p4156
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4157
I1
sS'.thisN'
p4158
I518
sg25
S'Y'
sg15
(lp4159
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4160
I5
sa(dp4161
g16
(lp4162
S'k'
asg18
S'Y'
sS'.thisRepN'
p4163
I47
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4164
I2
sS'.thisN'
p4165
I519
sg25
S'Y'
sg15
(lp4166
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4167
I6
sa(dp4168
g16
(lp4169
S'd'
asg18
S'N'
sS'.thisRepN'
p4170
I47
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4171
I3
sS'.thisN'
p4172
I520
sg25
S'Y'
sg15
(lp4173
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4174
S'space'
p4175
asg95
I10
sS'.thisIndex'
p4176
I10
sa(dp4177
g16
(lp4178
S'd'
asg18
S'Y'
sS'.thisRepN'
p4179
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4180
I4
sS'.thisN'
p4181
I521
sg25
S'Y'
sg15
(lp4182
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4183
S'space'
p4184
asg95
I4
sS'.thisIndex'
p4185
I4
sa(dp4186
g16
(lp4187
S'd'
asg18
S'Y'
sS'.thisRepN'
p4188
I47
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4189
I5
sS'.thisN'
p4190
I522
sg25
S'Y'
sg15
(lp4191
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4192
S'k'
asg95
I2
sS'.thisIndex'
p4193
I2
sa(dp4194
g16
(lp4195
S'k'
asg18
S'N'
sS'.thisRepN'
p4196
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4197
I6
sS'.thisN'
p4198
I523
sg25
S'Y'
sg15
(lp4199
S'k'
asg30
VM
sg17
S'N'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4200
I3
sa(dp4201
g16
(lp4202
S'd'
asg18
S'N'
sS'.thisRepN'
p4203
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4204
I7
sS'.thisN'
p4205
I524
sg25
S'Y'
sg15
(lp4206
S'd'
asg30
VM
sg17
S'N'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4207
I2
sa(dp4208
g16
(lp4209
S'd'
asg18
S'Y'
sS'.thisRepN'
p4210
I47
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4211
I8
sS'.thisN'
p4212
I525
sg25
S'Y'
sg15
(lp4213
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4214
I9
sa(dp4215
g16
(lp4216
S'k'
asg18
S'Y'
sS'.thisRepN'
p4217
I47
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4218
I9
sS'.thisN'
p4219
I526
sg25
S'Y'
sg15
(lp4220
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4221
I1
sa(dp4222
g16
(lp4223
S'k'
asg18
S'N'
sS'.thisRepN'
p4224
I47
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4225
I10
sS'.thisN'
p4226
I527
sg25
S'Y'
sg15
(lp4227
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4228
I0
sa(dp4229
g16
(lp4230
S'k'
asg18
S'Y'
sS'.thisRepN'
p4231
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4232
I0
sS'.thisN'
p4233
I528
sg25
S'Y'
sg15
(lp4234
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4235
S'space'
p4236
asg95
I3
sS'.thisIndex'
p4237
I3
sa(dp4238
g16
(lp4239
S'k'
asg18
S'Y'
sS'.thisRepN'
p4240
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4241
I1
sS'.thisN'
p4242
I529
sg25
S'Y'
sg15
(lp4243
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4244
S'space'
p4245
asg95
I9
sS'.thisIndex'
p4246
I9
sa(dp4247
g16
(lp4248
S'k'
asg18
S'N'
sS'.thisRepN'
p4249
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4250
I2
sS'.thisN'
p4251
I530
sg25
S'Y'
sg15
(lp4252
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4253
I7
sa(dp4254
g16
(lp4255
S'd'
asg18
S'Y'
sS'.thisRepN'
p4256
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4257
I3
sS'.thisN'
p4258
I531
sg25
S'Y'
sg15
(lp4259
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4260
S'space'
p4261
asg95
I9
sS'.thisIndex'
p4262
I9
sa(dp4263
g16
(lp4264
S'd'
asg18
S'Y'
sS'.thisRepN'
p4265
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4266
I4
sS'.thisN'
p4267
I532
sg25
S'Y'
sg15
(lp4268
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4269
S'space'
p4270
asg95
I5
sS'.thisIndex'
p4271
I5
sa(dp4272
g16
(lp4273
S'k'
asg18
S'Y'
sS'.thisRepN'
p4274
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4275
I5
sS'.thisN'
p4276
I533
sg25
S'Y'
sg15
(lp4277
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4278
S'space'
p4279
asg95
I7
sS'.thisIndex'
p4280
I7
sa(dp4281
g16
(lp4282
S'k'
asg18
S'N'
sS'.thisRepN'
p4283
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4284
I6
sS'.thisN'
p4285
I534
sg25
S'Y'
sg15
(lp4286
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4287
I6
sa(dp4288
g16
(lp4289
S'k'
asg18
S'N'
sS'.thisRepN'
p4290
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4291
I7
sS'.thisN'
p4292
I535
sg25
S'Y'
sg15
(lp4293
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4294
I6
sa(dp4295
g16
(lp4296
S'd'
asg18
S'Y'
sS'.thisRepN'
p4297
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4298
I8
sS'.thisN'
p4299
I536
sg25
S'Y'
sg15
(lp4300
S'd'
asg30
VM
sg17
S'N'
sg14
I11
sg19
(lp4301
S'space'
p4302
asg95
I5
sS'.thisIndex'
p4303
I5
sa(dp4304
g16
(lp4305
S'k'
asg18
S'Y'
sS'.thisRepN'
p4306
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4307
I9
sS'.thisN'
p4308
I537
sg25
S'Y'
sg15
(lp4309
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4310
S'space'
p4311
asg95
I1
sS'.thisIndex'
p4312
I1
sa(dp4313
g16
(lp4314
S'd'
asg18
S'N'
sS'.thisRepN'
p4315
I48
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4316
I10
sS'.thisN'
p4317
I538
sg25
S'Y'
sg15
(lp4318
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4319
I4
sa(dp4320
g16
(lp4321
S'k'
asg18
S'N'
sS'.thisRepN'
p4322
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4323
I0
sS'.thisN'
p4324
I539
sg25
S'Y'
sg15
(lp4325
S'k'
asg30
VM
sg17
S'N'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4326
I6
sa(dp4327
g16
(lp4328
S'd'
asg18
S'Y'
sS'.thisRepN'
p4329
I49
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4330
I1
sS'.thisN'
p4331
I540
sg25
S'Y'
sg15
(lp4332
S'd'
asg30
VM
sg17
S'N'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4333
I6
sa(dp4334
g16
(lp4335
S'd'
asg18
S'Y'
sS'.thisRepN'
p4336
I49
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4337
I2
sS'.thisN'
p4338
I541
sg25
S'Y'
sg15
(lp4339
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4340
I6
sa(dp4341
g16
(lp4342
S'd'
asg18
S'N'
sS'.thisRepN'
p4343
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4344
I3
sS'.thisN'
p4345
I542
sg25
S'Y'
sg15
(lp4346
S'd'
asg30
VM
sg17
S'N'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4347
I6
sa(dp4348
g16
(lp4349
S'd'
asg18
S'Y'
sS'.thisRepN'
p4350
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4351
I4
sS'.thisN'
p4352
I543
sg25
S'Y'
sg15
(lp4353
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4354
S'space'
p4355
asg95
I2
sS'.thisIndex'
p4356
I2
sa(dp4357
g16
(lp4358
S'd'
asg18
S'N'
sS'.thisRepN'
p4359
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4360
I5
sS'.thisN'
p4361
I544
sg25
S'Y'
sg15
(lp4362
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4363
I5
sa(dp4364
g16
(lp4365
S'd'
asg18
S'N'
sS'.thisRepN'
p4366
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4367
I6
sS'.thisN'
p4368
I545
sg25
S'Y'
sg15
(lp4369
S'd'
asg30
VM
sg17
S'N'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4370
I7
sa(dp4371
g16
(lp4372
S'd'
asg18
S'N'
sS'.thisRepN'
p4373
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4374
I7
sS'.thisN'
p4375
I546
sg25
S'Y'
sg15
(lp4376
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4377
I2
sa(dp4378
g16
(lp4379
S'k'
asg18
S'N'
sS'.thisRepN'
p4380
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4381
I8
sS'.thisN'
p4382
I547
sg25
S'Y'
sg15
(lp4383
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4384
I8
sa(dp4385
g16
(lp4386
S'k'
asg18
S'Y'
sS'.thisRepN'
p4387
I49
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4388
I9
sS'.thisN'
p4389
I548
sg25
S'Y'
sg15
(lp4390
S'd'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4391
S'space'
p4392
asg95
I8
sS'.thisIndex'
p4393
I8
sa(dp4394
g16
(lp4395
S'd'
asg18
S'Y'
sg22
I37
sg26
S'Y'
sS'.thisN'
p4396
I549
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4397
I10
sS'.thisRepN'
p4398
I49
sg21
I40
sg25
S'Y'
sg23
I25
sg15
(lp4399
S'k'
asg30
VM
sg17
S'Y'
sg14
I11
sg19
(lp4400
S'space'
p4401
asg95
I7
sS'.thisIndex'
p4402
I7
sa(dp4403
g16
(lp4404
S'k'
asS'.thisIndex'
p4405
I9
sS'.thisRepN'
p4406
I50
sg26
S'Y'
sg30
VM
sg31
g32
sS'.thisTrialN'
p4407
I0
sS'.thisN'
p4408
I550
sg25
S'Y'
sg15
(lp4409
S'd'
asg17
S'Y'
sg14
I12
sg95
I9
sa(dp4410
g16
(lp4411
S'k'
asS'.thisIndex'
p4412
I3
sS'.thisRepN'
p4413
I50
sg26
S'Y'
sg30
VM
sg31
g32
sS'.thisTrialN'
p4414
I1
sS'.thisN'
p4415
I551
sg25
S'Y'
sg15
(lp4416
S'd'
asg17
S'Y'
sg14
I12
sg95
I3
sa(dp4417
g16
(lp4418
S'k'
asg18
S'Y'
sS'.thisRepN'
p4419
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4420
I2
sS'.thisN'
p4421
I552
sg25
S'Y'
sg15
(lp4422
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4423
S'space'
p4424
asg95
I6
sS'.thisIndex'
p4425
I6
sa(dp4426
g16
(lp4427
S'k'
asg18
S'Y'
sS'.thisRepN'
p4428
I50
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4429
I3
sS'.thisN'
p4430
I553
sg25
S'Y'
sg15
(lp4431
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4432
I7
sa(dp4433
g16
(lp4434
S'k'
asg18
S'Y'
sS'.thisRepN'
p4435
I50
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4436
I4
sS'.thisN'
p4437
I554
sg25
S'Y'
sg15
(lp4438
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4439
I7
sa(dp4440
g16
(lp4441
S'k'
asg18
S'Y'
sS'.thisRepN'
p4442
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4443
I5
sS'.thisN'
p4444
I555
sg25
S'Y'
sg15
(lp4445
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4446
S'space'
p4447
asg95
I8
sS'.thisIndex'
p4448
I8
sa(dp4449
g16
(lp4450
S'k'
asg18
S'N'
sS'.thisRepN'
p4451
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4452
I6
sS'.thisN'
p4453
I556
sg25
S'Y'
sg15
(lp4454
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4455
I4
sa(dp4456
g16
(lp4457
S'k'
asg18
S'Y'
sS'.thisRepN'
p4458
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4459
I7
sS'.thisN'
p4460
I557
sg25
S'Y'
sg15
(lp4461
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4462
S'space'
p4463
asg95
I5
sS'.thisIndex'
p4464
I5
sa(dp4465
g16
(lp4466
S'd'
asg18
S'N'
sS'.thisRepN'
p4467
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4468
I8
sS'.thisN'
p4469
I558
sg25
S'Y'
sg15
(lp4470
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4471
I7
sa(dp4472
g16
(lp4473
S'k'
asg18
S'N'
sS'.thisRepN'
p4474
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4475
I9
sS'.thisN'
p4476
I559
sg25
S'Y'
sg15
(lp4477
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4478
I0
sa(dp4479
g16
(lp4480
S'd'
asg18
S'Y'
sS'.thisRepN'
p4481
I50
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4482
I10
sS'.thisN'
p4483
I560
sg25
S'Y'
sg15
(lp4484
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4485
S'space'
p4486
asg95
I2
sS'.thisIndex'
p4487
I2
sa(dp4488
g16
(lp4489
S'd'
asg18
S'N'
sS'.thisRepN'
p4490
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4491
I0
sS'.thisN'
p4492
I561
sg25
S'Y'
sg15
(lp4493
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4494
I10
sa(dp4495
g16
(lp4496
S'd'
asg18
S'N'
sS'.thisRepN'
p4497
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4498
I1
sS'.thisN'
p4499
I562
sg25
S'Y'
sg15
(lp4500
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4501
I4
sa(dp4502
g16
(lp4503
S'k'
asg18
S'Y'
sS'.thisRepN'
p4504
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4505
I2
sS'.thisN'
p4506
I563
sg25
S'Y'
sg15
(lp4507
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4508
S'space'
p4509
asg95
I4
sS'.thisIndex'
p4510
I4
sa(dp4511
g18
S'N'
sS'.thisRepN'
p4512
I51
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4513
I3
sS'.thisN'
p4514
I564
sg25
S'Y'
sg15
Nsg30
VM
sg17
S'Timed out'
p4515
sg14
I12
sg19
(lp4516
S'space'
p4517
asg95
I10
sS'.thisIndex'
p4518
I10
sa(dp4519
g16
(lp4520
S'k'
asg18
S'Y'
sS'.thisRepN'
p4521
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4522
I4
sS'.thisN'
p4523
I565
sg25
S'Y'
sg15
(lp4524
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4525
S'space'
p4526
asg95
I2
sS'.thisIndex'
p4527
I2
sa(dp4528
g16
(lp4529
S'd'
asg18
S'Y'
sS'.thisRepN'
p4530
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4531
I5
sS'.thisN'
p4532
I566
sg25
S'Y'
sg15
(lp4533
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4534
S'space'
p4535
asg95
I9
sS'.thisIndex'
p4536
I9
sa(dp4537
g16
(lp4538
S'k'
asg18
S'N'
sS'.thisRepN'
p4539
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4540
I6
sS'.thisN'
p4541
I567
sg25
S'Y'
sg15
(lp4542
S'k'
asg30
VM
sg17
S'N'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4543
I2
sa(dp4544
g16
(lp4545
S'd'
asg18
S'N'
sS'.thisRepN'
p4546
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4547
I7
sS'.thisN'
p4548
I568
sg25
S'Y'
sg15
(lp4549
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4550
I0
sa(dp4551
g16
(lp4552
S'k'
asg18
S'Y'
sS'.thisRepN'
p4553
I51
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4554
I8
sS'.thisN'
p4555
I569
sg25
S'Y'
sg15
(lp4556
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4557
I3
sa(dp4558
g16
(lp4559
S'k'
asg18
S'N'
sS'.thisRepN'
p4560
I51
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4561
I9
sS'.thisN'
p4562
I570
sg25
S'Y'
sg15
(lp4563
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4564
S'k'
asg95
I2
sS'.thisIndex'
p4565
I2
sa(dp4566
g16
(lp4567
S'd'
asg18
S'N'
sS'.thisRepN'
p4568
I51
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4569
I10
sS'.thisN'
p4570
I571
sg25
S'Y'
sg15
(lp4571
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4572
I5
sa(dp4573
g16
(lp4574
S'k'
asg18
S'Y'
sS'.thisRepN'
p4575
I52
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4576
I0
sS'.thisN'
p4577
I572
sg25
S'Y'
sg15
(lp4578
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4579
I6
sa(dp4580
g16
(lp4581
S'd'
asg18
S'N'
sS'.thisRepN'
p4582
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4583
I1
sS'.thisN'
p4584
I573
sg25
S'Y'
sg15
(lp4585
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4586
I8
sa(dp4587
g16
(lp4588
S'd'
asg18
S'Y'
sS'.thisRepN'
p4589
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4590
I2
sS'.thisN'
p4591
I574
sg25
S'Y'
sg15
(lp4592
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4593
S'space'
p4594
asg95
I2
sS'.thisIndex'
p4595
I2
sa(dp4596
g16
(lp4597
S'd'
asg18
S'Y'
sS'.thisRepN'
p4598
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4599
I3
sS'.thisN'
p4600
I575
sg25
S'Y'
sg15
(lp4601
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4602
S'space'
p4603
asg95
I10
sS'.thisIndex'
p4604
I10
sa(dp4605
g16
(lp4606
S'k'
asg18
S'N'
sS'.thisRepN'
p4607
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4608
I4
sS'.thisN'
p4609
I576
sg25
S'Y'
sg15
(lp4610
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4611
I6
sa(dp4612
g16
(lp4613
S'k'
asg18
S'Y'
sS'.thisRepN'
p4614
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4615
I5
sS'.thisN'
p4616
I577
sg25
S'Y'
sg15
(lp4617
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4618
S'space'
p4619
asg95
I2
sS'.thisIndex'
p4620
I2
sa(dp4621
g16
(lp4622
S'd'
asg18
S'Y'
sS'.thisRepN'
p4623
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4624
I6
sS'.thisN'
p4625
I578
sg25
S'Y'
sg15
(lp4626
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4627
S'space'
p4628
asg95
I5
sS'.thisIndex'
p4629
I5
sa(dp4630
g16
(lp4631
S'd'
asg18
S'Y'
sS'.thisRepN'
p4632
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4633
I7
sS'.thisN'
p4634
I579
sg25
S'Y'
sg15
(lp4635
S'd'
asg30
VM
sg17
S'N'
sg14
I12
sg19
(lp4636
S'space'
p4637
asg95
I0
sS'.thisIndex'
p4638
I0
sa(dp4639
g16
(lp4640
S'k'
asg18
S'Y'
sS'.thisRepN'
p4641
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4642
I8
sS'.thisN'
p4643
I580
sg25
S'Y'
sg15
(lp4644
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4645
S'space'
p4646
asg95
I5
sS'.thisIndex'
p4647
I5
sa(dp4648
g16
(lp4649
S'd'
asg18
S'Y'
sS'.thisRepN'
p4650
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4651
I9
sS'.thisN'
p4652
I581
sg25
S'Y'
sg15
(lp4653
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4654
S'space'
p4655
asg95
I5
sS'.thisIndex'
p4656
I5
sa(dp4657
g16
(lp4658
S'd'
asg18
S'Y'
sS'.thisRepN'
p4659
I52
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4660
I10
sS'.thisN'
p4661
I582
sg25
S'Y'
sg15
(lp4662
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4663
S'space'
p4664
asg95
I7
sS'.thisIndex'
p4665
I7
sa(dp4666
g16
(lp4667
S'k'
asg18
S'Y'
sS'.thisRepN'
p4668
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4669
I0
sS'.thisN'
p4670
I583
sg25
S'Y'
sg15
(lp4671
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4672
S'space'
p4673
asg95
I1
sS'.thisIndex'
p4674
I1
sa(dp4675
g16
(lp4676
S'k'
asg18
S'Y'
sS'.thisRepN'
p4677
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4678
I1
sS'.thisN'
p4679
I584
sg25
S'Y'
sg15
(lp4680
S'k'
asg30
VM
sg17
S'N'
sg14
I12
sg19
(lp4681
S'space'
p4682
asg95
I6
sS'.thisIndex'
p4683
I6
sa(dp4684
g16
(lp4685
S'd'
asg18
S'N'
sS'.thisRepN'
p4686
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4687
I2
sS'.thisN'
p4688
I585
sg25
S'Y'
sg15
(lp4689
S'd'
asg30
VM
sg17
S'N'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4690
I8
sa(dp4691
g16
(lp4692
S'k'
asg18
S'N'
sS'.thisRepN'
p4693
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4694
I3
sS'.thisN'
p4695
I586
sg25
S'Y'
sg15
(lp4696
S'k'
asg30
VM
sg17
S'N'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4697
I9
sa(dp4698
g16
(lp4699
S'k'
asg18
S'N'
sS'.thisRepN'
p4700
I53
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4701
I4
sS'.thisN'
p4702
I587
sg25
S'Y'
sg15
(lp4703
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4704
S'space'
p4705
asg95
I9
sS'.thisIndex'
p4706
I9
sa(dp4707
g16
(lp4708
S'k'
asg18
S'Y'
sS'.thisRepN'
p4709
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4710
I5
sS'.thisN'
p4711
I588
sg25
S'Y'
sg15
(lp4712
S'k'
asg30
VM
sg17
S'N'
sg14
I12
sg19
(lp4713
S'space'
p4714
asg95
I6
sS'.thisIndex'
p4715
I6
sa(dp4716
g16
(lp4717
S'k'
asg18
S'N'
sS'.thisRepN'
p4718
I53
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4719
I6
sS'.thisN'
p4720
I589
sg25
S'Y'
sg15
(lp4721
S'k'
asg30
VM
sg17
S'N'
sg14
I12
sg19
(lp4722
S'space'
p4723
asg95
I5
sS'.thisIndex'
p4724
I5
sa(dp4725
g16
(lp4726
S'd'
asg18
S'Y'
sS'.thisRepN'
p4727
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4728
I7
sS'.thisN'
p4729
I590
sg25
S'Y'
sg15
(lp4730
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
(lp4731
S'space'
p4732
asg95
I5
sS'.thisIndex'
p4733
I5
sa(dp4734
g16
(lp4735
S'd'
asg18
S'N'
sS'.thisRepN'
p4736
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4737
I8
sS'.thisN'
p4738
I591
sg25
S'Y'
sg15
(lp4739
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4740
I6
sa(dp4741
g16
(lp4742
S'k'
asg18
S'N'
sS'.thisRepN'
p4743
I53
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4744
I9
sS'.thisN'
p4745
I592
sg25
S'Y'
sg15
(lp4746
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4747
I10
sa(dp4748
g16
(lp4749
S'd'
asg18
S'Y'
sS'.thisRepN'
p4750
I53
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4751
I10
sS'.thisN'
p4752
I593
sg25
S'Y'
sg15
(lp4753
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4754
I6
sa(dp4755
g16
(lp4756
S'k'
asg18
S'Y'
sS'.thisRepN'
p4757
I54
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4758
I0
sS'.thisN'
p4759
I594
sg25
S'Y'
sg15
(lp4760
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4761
I6
sa(dp4762
g16
(lp4763
S'd'
asg18
S'N'
sS'.thisRepN'
p4764
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4765
I1
sS'.thisN'
p4766
I595
sg25
S'Y'
sg15
(lp4767
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4768
I5
sa(dp4769
g16
(lp4770
S'k'
asg18
S'N'
sS'.thisRepN'
p4771
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4772
I2
sS'.thisN'
p4773
I596
sg25
S'Y'
sg15
(lp4774
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4775
I4
sa(dp4776
g16
(lp4777
S'k'
asg18
S'N'
sS'.thisRepN'
p4778
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4779
I3
sS'.thisN'
p4780
I597
sg25
S'Y'
sg15
(lp4781
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4782
I5
sa(dp4783
g16
(lp4784
S'd'
asg18
S'N'
sS'.thisRepN'
p4785
I54
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4786
I4
sS'.thisN'
p4787
I598
sg25
S'Y'
sg15
(lp4788
S'k'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4789
I5
sa(dp4790
g16
(lp4791
S'k'
asg18
S'N'
sg22
I38
sg26
S'Y'
sS'.thisN'
p4792
I599
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4793
I5
sS'.thisRepN'
p4794
I54
sg21
I42
sg25
S'Y'
sg23
I25
sg15
(lp4795
S'd'
asg30
VM
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4796
I5
sasS'loops'
p4797
(lp4798
g1
(g35
g3
NtRp4799
(dp4800
g38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4801
sg40
(lp4802
sg41
I72763696
sg10
S''
sg6
g42
sg43
I1
sg27
I01
sg28
Nsg44
g1
(g45
g46
(dp4803
g48
g49
(g50
g51
g52
S'b'
tRp4804
(I1
(I600
I1
tg55
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg56
g49
(g50
g51
g52
S'b'
tRp4805
(I1
(I600
I1
tg55
I00
S'\x00\x00\x03C\x00\x00\x1aC\x00\x80\xe4C\x00\x00\xf2C\x00\x00\xc9C\x00\x80\xd4C\x00\x00\xc4B\x00\x00\xc2B\x00\x00/C\x00\x00\x08D\x00\x00\xefC\x00\x00\xd1C\x00\x00\x98B\x00\x00\xd6B\x00\x00\x89C\x00\x00\xb2B\x00\x80\xafC\x00\x00\xcaB\x00\x00\xccC\x00@\x0cD\x00\x00\x9bC\x00\x00\xe2B\x00\x00\xcdC\x00\x80\x9bC\x00\x80\x98C\x00\x80\x10D\x00\x00\x88C\x00\x00\xa4C\x00\x00\xcbC\x00@\x07D\x00@\x11D\x00\x00\xb3C\x00\x00DB\x00\x00\xd3C\x00\xc0\x10D\x00\x00\xafC\x00\x80\xe0C\x00\x00\xbdC\x00\x80\xa5C\x00\x80\xd6C\x00\x00\xc5C\x00\x00\xd0B\x00\x00rC\x00\x00\xfeB\x00\x80\x0cD\x00\xc0\x13D\x00\x00\xa9C\x00\x00\xdaC\x00\x80\xecC\x00\x00\x96B\x00\x00\x17C\x00\x00\x00D\x00\x80\x00D\x00\x80\xc5C\x00\x80\xb9C\x00\x00WC\x00\x00sC\x00\x80\x06D\x00\x80\xa9C\x00\x00qC\x00\x00\x1dC\x00\x00\x05D\x00\x00PC\x00\x80\xb6C\x00\x00\x1cC\x00\x00\xf5C\x00\x80\x13D\x00\x00\xb6B\x00\x00\xd6C\x00\x00\xaaC\x00\x00TB\x00\x00\xe0A\x00\x80\xe5C\x00\x00>C\x00\x00\xf1C\x00\x00\x90B\x00\x80\x81C\x00\x00#C\x00\x00.C\x00@\x14D\x00\x80\x96C\x00\x00QC\x00\x00\x98A\x00\x00,B\x00\x80\xb7C\x00\x00\x06D\x00\x80\x83C\x00\x00dC\x00\x00\x08C\x00\x00CC\x00\x00\xbaB\x00\x00\xceC\x00\x80\xfcC\x00\x00\xb0A\x00\x00XC\x00\x00\x88A\x00@\x0fD\x00\x00\x92B\x00\x00\nC\x00\x00pC\x00\x00\xffC\x00\x003C\x00\x00jC\x00\x00\x13C\x00\x00eC\x00\x80\xa4C\x00\x80\xf4C\x00\x00\x80?\x00\x00\x95C\x00\x00xB\x00\x80\x02D\x00\x80\xa2C\x00\x00lB\x00@\x03D\x00\x00\x14C\x00\x00\xf7C\x00\x00dB\x00\x00\x07D\x00\x00@B\x00\x00\x9aC\x00\x80\xd8C\x00\x80\xb5C\x00\x80\xbdC\x00\x00\x8fC\x00\xc0\x07D\x00\x80\x0bD\x00\x80\xf6C\x00\x00\xacB\x00\x00TC\x00\x00\x03D\x00\x00\x9cC\x00\x80\x08D\x00\x80\x89C\x00\x80\xf7C\x00\x00\x04B\x00\x00IC\x00\x80\xc4C\x00\x80\xc9C\x00\x00\xe1C\x00\x00\xd4C\x00\x80\xa3C\x00\x80\x0fD\x00\x80\xb2C\x00\x00\x0eD\x00\x00\xf2B\x00\x00`A\x00\x00\xe4B\x00\x00tB\x00\x00+C\x00\x00\xb5C\x00\x00bC\x00\x80\xe6C\x00\x80\xc8C\x00@\x01D\x00\x80\x92C\x00\x00\x8eC\x00\x00`B\x00@\x12D\x00\x009C\x00\x00\xa0C\x00\x00\x8bC\x00\x00\x10C\x00\x80\xb8C\x00\x00\x9eB\x00\x00\x02D\x00\x00\x16C\x00\x00=C\x00\x00\xfeC\x00\x00\xecB\x00\x00\xc2C\x00\x00\x91C\x00\x80\x84C\x00\x00\xd0A\x00\x00\x04C\x00\x00\xa0@\x00\x00\xa5C\x00\x00\xa6C\x00\x00\xb6C\x00\x00\xd5C\x00\x00\xa7C\x00\x80\xaaC\x00\x80\xc1C\x00\x00HC\x00\x00\xa8A\x00\x00\x94B\x00\x80\xbcC\x00\x00uC\x00\x00\xc4C\x00\x00\x9eC\x00\x00\x80B\x00\x00\xfbC\x00\x00\xc1C\x00\x00\rD\x00\x00\xa0B\x00\x00\x1eC\x00\x00\x19C\x00\x00\xe8B\x00\x00NC\x00\x00hB\x00\x80\xf3C\x00\x80\x15D\x00\x80\x07D\x00\x00tC\x00\x80\x8bC\x00\x80\xccC\x00\x80\x9eC\x00\x00\x01C\x00\x000A\x00\x00\xf6C\x00\x00YC\x00\x00\x8dC\x00\x00\xf0B\x00\x00\xd2C\x00\x80\xf9C\x00\x80\xc7C\x00\x80\x9aC\x00\x00\xe7C\x00\x00@@\x00\x00\xe5C\x00\x00\x00@\x00\x00\xddC\x00\x00\xdbC\x00\x00,C\x00\x00@C\x00\x80\xefC\x00\x80\xbfC\x00\x80\xdbC\x00\x80\xc0C\x00\xc0\x0eD\x00\x00kC\x00\x80\xe9C\x00\x00LB\x00\x80\xcdC\x00\x00\x05C\x00\x00\x9dC\x00\x00\x0cD\x00\x80\xcaC\x00\x00\xc6C\x00\x00\xf0C\x00\x00\xe9C\x00@\x02D\x00\x80\xd1C\x00\x00\x84C\x00\xc0\x0fD\x00\x002C\x00\x80\xa0C\x00\x00\x18C\x00\x80\x11D\x00\x00iC\x00\x00\xb8C\x00\x80\x9dC\x00\x80\x87C\x00\xc0\x00D\x00\x80\x82C\x00\x00\x99C\x00\x00KC\x00\x80\xfaC\x00\x80\xfbC\x00\x80\x8eC\x00\x00\xdeB\x00\x80\xbaC\x00\x00$B\x00\x00_C\x00\x00\xecC\x00\x00\x1fC\x00\x80\xb3C\x00\x80\xa8C\x00\x00\xbfC\x00\x00<B\x00\x80\rD\x00\x00&C\x00\x00\xeaC\x00\x00 B\x00\x00\xf0A\x00\x00 A\x00\x80\x9cC\x00\x00pB\x00\x00\x00C\x00\x00aC\x00\x80\x8fC\x00\x00\xeeC\x00\x00vC\x00\x00SC\x00\x008C\x00\xc0\x04D\x00\xc0\x14D\x00@\tD\x00\x00\xb4B\x00\x006C\x00\x00:C\x00\x00\xacC\x00@\x08D\x00\x80\xc2C\x00\x00\x8aB\x00\x00pA\x00\x80\x93C\x00\x00\xfcB\x00\x00(B\x00\x00\x8cC\x00\x00\xa2B\x00\x00\xb8B\x00\x00\xc0A\x00@\x04D\x00\x00"C\x00\x00@A\x00\x80\xddC\x00\x001C\x00\x80\xe1C\x00\x00\xf8B\x00\x00\x14D\x00\xc0\x15D\x00\xc0\rD\x00\x80\xe8C\x00\x00\x11D\x00\x00wC\x00\x00\xceB\x00\x80\xd2C\x00\x00\xd0C\x00\x80\xbeC\x00\x00GC\x00\x00\x13D\x00\x00PB\x00\x80\x88C\x00\x00\x07C\x00\x00`C\x00\x00\xfdC\x00\x00\x83C\x00\x00\xfcC\x00\x00 C\x00\x00hC\x00\x00\xbaC\x00\x00xC\x00\x00\xc3C\x00\x00\x9aB\x00\xc0\x0cD\x00\x00\x15C\x00\x00\x8cB\x00\x00\xfaC\x00\x80\tD\x00\x00\xc0@\x00\x00MC\x00\x00\x12C\x00\x00\x00\x00\x00\x00\xe4C\x00\x80\xe2C\x00\x00\xcfC\x00\x00\xabC\x00\x00\x0bD\x00\x00VC\x00@\x13D\x00\x80\x99C\x00\x00^C\x00\x80\x91C\x00\x80\xcfC\x00\x00\tD\x00\x004C\x00@\x10D\x00\x00\x8eB\x00\xc0\x03D\x00\x00ZC\x00\x00\xdcB\x00\x00\xa8C\x00\x80\xdfC\x00\x80\xdcC\x00\x00AC\x00\x00\x10B\x00\x00\xa0A\x00\x00\x12D\x00\x00PA\x00\x00EC\x00\x80\xc3C\x00\x00\x86B\x00\x80\xacC\x00\x80\x80C\x00\x00mC\x00\x00\\C\x00\x00\x10A\x00\x00DC\x00\x00\x97C\x00\x00\xbeB\x00\x00\x00A\x00\x00\x14B\x00\x80\x01D\x00\x00\xbcB\x00\x008B\x00\x00LC\x00\x00oC\x00\x00\x0cC\x00\x80\x97C\x00\x00\xdcC\x00\x80\xadC\x00\x00)C\x00\x80\xd5C\x00\x00\xcaC\x00\x80\xc6C\x00\x00\x9fC\x00\x80\xd3C\x00\x80\xd0C\x00\x00\xb9C\x00\x00\x82B\x00\x80\xffC\x00\x00?C\x00\x00*C\x00\xc0\x06D\x00\x00\x0fC\x00\x00$C\x00\x00\xd2B\x00\x000B\x00\x00\xaaB\x00\x00\xebC\x00\x00\x90C\x00\x00\xdaB\x00\x005C\x00\x00[C\x00\x00RC\x00\x00\x00B\x00@\x05D\x00\x00\x80C\x00\x00\xf8A\x00\x00\x80A\x00\x00\xb1C\x00\x00\x81C\x00\xc0\x0bD\x00\x00\x7fC\x00\x80\xb1C\x00\x00BC\x00\x00\xf3C\x00\x00\xc6B\x00\x00\xfaB\x00\x00\xc0C\x00\x004B\x00\x80\xb4C\x00\x00]C\x00\x00\xadC\x00\x00\x87C\x00\x00\xb8A\x00\x00\xb7C\x00\x00\xdeC\x00\x00\xc7C\x00\x00\xf6B\x00\x00\x86C\x00\x00}C\x00\x00OC\x00\x00<C\x00\x00\x96C\x00\x00\xa1C\x00\xc0\x01D\x00\x80\x90C\x00\x00\x88B\x00\x00\'C\x00\x80\xa1C\x00\x00\xe0C\x00\x00%C\x00\x80\xeaC\x00\x00\x08B\x00\xc0\x12D\x00\x00\xb4C\x00\x00\x90A\x00\x00\x98C\x00\x00\x92C\x00\x00\x80@\x00\x00\x93C\x00\x00\x06C\x00\x00\xaeC\x00\x00\xc8C\x00\x00\x94C\x00\x00JC\x00\x00|B\x00\x00\x84B\x00\x80\xa7C\x00\x00\xb0B\x00\x00\xd4B\x00\x00(C\x00\x00\xb2C\x00\x80\xf2C\x00\x00\xa4B\x00\x00;C\x00\x00gC\x00\x00\tC\x00\x00HB\x00\x00!C\x00\x80\x94C\x00\x80\xfeC\x00\x00\xe0@\x00\x80\xceC\x00\x00\x11C\x00\x80\xd7C\x00\x00\xe8C\x00\x00\x85C\x00\x00yC\x00\x80\xf0C\x00\x00\x0bC\x00\x00\\B\x00\x00\xeaB\x00\x80\xdaC\x00\x80\xd9C\x00\x00\xf9C\x00\x80\xe3C\x00\x00\xe6B\x00\xc0\nD\x00\xc0\x02D\x00\x00\xd8C\x00\x80\xf5C\x00\x00\xdfC\x00\x80\xedC\x00\x00\xf4C\x00\x80\x85C\x00\x00\x04D\x00@\x06D\x00\x80\x14D\x00\x00\xf8C\x00\x00\x0fD\x00\x00{C\x00\xc0\x08D\x00\x00\xe2C\x00\x00\x01D\x00\x00|C\x00@\rD\x00\x80\nD\x00\x000C\x00\x80\xaeC\x00\x00fC\x00\x00\xe8A\x00\x80\xe7C\x00\xc0\tD\x00@\x0eD\x00\x80\x03D\x00\x00\xc0B\x00\x00\nD\x00\x00\xe0B\x00\x00\xc8A\x00\x80\xb0C\x00\x80\xbbC\x00\x00XB\x00\x00\xa8B\x00\x80\x04D\x00\x00\xbcC\x00\x80\xfdC\x00\x00lC\x00\x00zC\x00\x80\xcbC\x00\x00~C\x00\x00\xa2C\x00@\nD\x00\x80\x0eD\x00\x00\x1cB\x00\x00\xe3C\x00\x00\x0cB\x00\x00-C\x00\x00\xd7C\x00\x00nC\x00\x00\xb0C\x00\x00\rC\x00\xc0\x11D\x00\x007C\x00\x80\x05D\x00\x80\x95C\x00\x00\xedC\x00\x00\xbeC\x00\x80\x86C\x00\x00UC\x00\x00\x18B\x00\x80\xeeC\x00\x00\x9cB\x00\x00\x1bC\x00\x00\xbbC\x00\x00\xe6C\x00\x80\x8cC\x00\x80\xa6C\x00\x00\xeeB\x00\xc0\x05D\x00\x80\xdeC\x00\x80\x9fC\x00\x00\xaeB\x00\x00\x8aC\x00\x00\xc8B\x00\x00\xd9C\x00\x80\x12D\x00\x00\xd8A\x00@\x00D\x00\x00\xf4B\x00\x00cC\x00\x00\xa6B\x00\x00\x82C\x00\x00\x02C\x00\x80\x8dC\x00\x80\xabC\x00@\x0bD\x00@\x15D\x00\x80\x8aC\x00\x00\x0eC\x00\x80\xebC\x00\x00\xccB\x00\x00\x15D\x00\x00FC\x00\x00\x10D\x00\x00\xd8B\x00\x80\xf1C\x00\x00\xa3C\x00\x80\xf8C'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4806
(dp4807
g60
(dp4808
g48
I01
sg56
I01
ssg62
g4799
sg63
(lp4809
g48
ag56
asg65
(lp4810
I600
aI1
asbsg67
S'random'
p4811
sg69
g70
(g51
(I0
tS'b'
tRp4812
(I1
(I600
I1
tg54
(S'i4'
I0
I1
tRp4813
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'V\x01\x00\x00k\x00\x00\x00\xdb\x00\x00\x00\xd9\x00\x00\x00\xcc\x01\x00\x00\xae\x00\x00\x00S\x01\x00\x00\xe3\x01\x00\x00|\x01\x00\x00x\x01\x00\x00\x12\x01\x00\x00\xcf\x00\x00\x000\x01\x00\x00p\x01\x00\x00\x91\x00\x00\x00&\x01\x00\x00\xa3\x01\x00\x00_\x00\x00\x00\xc9\x01\x00\x00R\x00\x00\x00n\x01\x00\x00\xb7\x00\x00\x00]\x00\x00\x00\xb3\x01\x00\x00-\x01\x00\x00\x12\x02\x00\x00\xac\x00\x00\x00B\x02\x00\x00G\x00\x00\x00\n\x02\x00\x00\x11\x01\x00\x00\xa2\x01\x00\x00\x9f\x01\x00\x00\x86\x00\x00\x00\xc6\x01\x00\x00#\x02\x00\x00m\x01\x00\x00}\x01\x00\x001\x02\x00\x00!\x02\x00\x00\x10\x01\x00\x00\x05\x01\x00\x00)\x01\x00\x00S\x00\x00\x00\x97\x01\x00\x00\xae\x01\x00\x00\x80\x01\x00\x00\x0c\x01\x00\x00v\x00\x00\x00 \x00\x00\x00\xdf\x01\x00\x00\xe7\x00\x00\x00A\x01\x00\x00F\x00\x00\x00\x15\x02\x00\x00\xec\x01\x00\x00\x9c\x00\x00\x00t\x00\x00\x00\xc6\x00\x00\x00p\x00\x00\x00\x14\x01\x00\x00\x93\x00\x00\x00m\x00\x00\x00\xd3\x01\x00\x00\xbd\x00\x00\x00\x8f\x01\x00\x00\xd4\x01\x00\x00s\x01\x00\x00\xc0\x01\x00\x00%\x01\x00\x00P\x01\x00\x00e\x01\x00\x00K\x00\x00\x00a\x00\x00\x00\xb8\x00\x00\x001\x00\x00\x00\x0c\x00\x00\x00M\x01\x00\x003\x02\x00\x00\xa3\x00\x00\x00\xc1\x00\x00\x00+\x01\x00\x00\xdb\x01\x00\x00F\x02\x00\x00\x16\x02\x00\x00\x98\x01\x00\x00\x7f\x00\x00\x00=\x02\x00\x00\xd6\x01\x00\x00\x0f\x00\x00\x00\x1f\x01\x00\x00C\x00\x00\x00,\x01\x00\x00Z\x00\x00\x00\x7f\x01\x00\x00{\x01\x00\x00\x0f\x02\x00\x00\x07\x00\x00\x00\x06\x00\x00\x00\xab\x01\x00\x00?\x02\x00\x00\x11\x00\x00\x00P\x02\x00\x00;\x01\x00\x00)\x00\x00\x00\x96\x01\x00\x00\xd7\x01\x00\x00\r\x00\x00\x00T\x02\x00\x00\x9b\x01\x00\x00h\x01\x00\x00\x03\x01\x00\x00\x11\x02\x00\x00\x15\x00\x00\x00\x92\x00\x00\x00\xf2\x01\x00\x00\xc4\x00\x00\x00\xed\x01\x00\x00\xa8\x00\x00\x009\x02\x00\x00\xd3\x00\x00\x00\x90\x00\x00\x00D\x02\x00\x00\xb7\x01\x00\x004\x01\x00\x00\xac\x01\x00\x00(\x01\x00\x00+\x00\x00\x00\x15\x01\x00\x00\xce\x00\x00\x00H\x02\x00\x00\x00\x00\x00\x00\xad\x00\x00\x00\xe9\x00\x00\x00\xce\x01\x00\x00C\x01\x00\x00X\x00\x00\x00\xde\x01\x00\x00b\x00\x00\x00\xeb\x01\x00\x00\x83\x01\x00\x00(\x02\x00\x00N\x02\x00\x00\x94\x01\x00\x00\xa1\x00\x00\x00\xe5\x01\x00\x00U\x01\x00\x00g\x00\x00\x00r\x00\x00\x00O\x01\x00\x00\xa5\x00\x00\x002\x00\x00\x00\xf6\x00\x00\x00\xc3\x00\x00\x00\x01\x00\x00\x004\x02\x00\x00@\x00\x00\x00<\x00\x00\x00\xc2\x00\x00\x00\x08\x01\x00\x00H\x01\x00\x00\xe0\x01\x00\x00/\x01\x00\x00M\x00\x00\x00\x95\x01\x00\x00\xc4\x01\x00\x00\x0e\x01\x00\x00\xc1\x01\x00\x00\xd8\x01\x00\x00\x87\x01\x00\x00\x92\x01\x00\x00\x94\x00\x00\x00\xde\x00\x00\x00$\x02\x00\x00N\x00\x00\x00\x08\x00\x00\x00\x07\x02\x00\x002\x01\x00\x00\xf4\x00\x00\x00e\x00\x00\x00c\x01\x00\x00\x9c\x01\x00\x00 \x01\x00\x00*\x02\x00\x00\x1b\x01\x00\x00\x9e\x00\x00\x00!\x01\x00\x00\xdc\x01\x00\x00\xbb\x01\x00\x00\xa6\x00\x00\x00I\x00\x00\x00\x91\x01\x00\x00\xdf\x00\x00\x00l\x01\x00\x00\xa9\x01\x00\x00Y\x00\x00\x00y\x01\x00\x00q\x01\x00\x00R\x02\x00\x00?\x01\x00\x00\xb6\x00\x00\x00\x87\x00\x00\x00\xd2\x01\x00\x00\xff\x00\x00\x00\x81\x01\x00\x00T\x01\x00\x00\xc5\x00\x00\x00\xba\x01\x00\x00>\x00\x00\x00Q\x00\x00\x00\x9e\x01\x00\x00\x1a\x01\x00\x00\x80\x00\x00\x000\x02\x00\x00\\\x01\x00\x007\x00\x00\x00^\x00\x00\x00\xd1\x00\x00\x00g\x01\x00\x00\x9d\x01\x00\x00w\x01\x00\x00\xb0\x01\x00\x00_\x01\x00\x00\x06\x01\x00\x00D\x01\x00\x00\x16\x01\x00\x00\x96\x00\x00\x00E\x02\x00\x00W\x00\x00\x00h\x00\x00\x00\t\x02\x00\x00\xdd\x01\x00\x00I\x01\x00\x00\xf8\x00\x00\x00f\x00\x00\x00\xe5\x00\x00\x00\x1a\x02\x00\x00v\x01\x00\x00&\x02\x00\x00\x82\x01\x00\x00c\x00\x00\x00;\x00\x00\x00*\x00\x00\x008\x00\x00\x00\xca\x00\x00\x00\xba\x00\x00\x00\x19\x01\x00\x00:\x01\x00\x00K\x01\x00\x00\xe9\x01\x00\x00\x1b\x02\x00\x00\x00\x02\x00\x00\x04\x02\x00\x00\xb9\x01\x00\x00\x1d\x02\x00\x00\xa7\x01\x00\x00\xa1\x01\x00\x00u\x01\x00\x00\xa5\x01\x00\x00L\x00\x00\x00G\x02\x00\x00\xfd\x00\x00\x00F\x01\x00\x00V\x00\x00\x00\xf2\x00\x00\x00\xab\x00\x00\x00\xe8\x01\x00\x00\xfa\x01\x00\x00\xb8\x01\x00\x00/\x02\x00\x00\xb2\x01\x00\x00\xfb\x00\x00\x00\x1a\x00\x00\x00B\x01\x00\x00\x0e\x00\x00\x00\x84\x00\x00\x00>\x02\x00\x00M\x02\x00\x00\xa0\x00\x00\x00\xcb\x00\x00\x00*\x01\x00\x007\x02\x00\x00\xd2\x00\x00\x00I\x02\x00\x00\x9b\x00\x00\x00\x02\x01\x00\x00{\x00\x00\x00\x17\x01\x00\x00\x9a\x01\x00\x00\xbf\x01\x00\x00\xaa\x00\x00\x00`\x01\x00\x00\xcb\x01\x00\x00\x9a\x00\x00\x00\xcd\x01\x00\x00\'\x01\x00\x00\xd1\x01\x00\x00\xe1\x01\x00\x00l\x00\x00\x00,\x02\x00\x00\xbc\x01\x00\x00P\x00\x00\x00z\x01\x00\x00\x84\x01\x00\x00\xca\x01\x00\x00\x18\x00\x00\x00\xfe\x00\x00\x00^\x01\x00\x00w\x00\x00\x00\xd7\x00\x00\x00\x14\x00\x00\x00\x17\x00\x00\x00\x82\x00\x00\x00\x13\x01\x00\x00\xea\x00\x00\x00\xfa\x00\x00\x00\xbc\x00\x00\x00\xcd\x00\x00\x00\x8b\x01\x00\x00<\x02\x00\x00\x9f\x00\x00\x00\xf5\x00\x00\x00\xbd\x01\x00\x00\xc2\x01\x00\x00\x1e\x02\x00\x00o\x00\x00\x00V\x02\x00\x00\x8c\x00\x00\x00\x1b\x00\x00\x00i\x00\x00\x00\xaf\x00\x00\x00&\x00\x00\x00\xb0\x00\x00\x008\x02\x00\x00\xb3\x00\x00\x00\xd5\x01\x00\x00i\x01\x00\x00\n\x01\x00\x00.\x00\x00\x00:\x00\x00\x00E\x00\x00\x00\xb4\x00\x00\x00Z\x01\x00\x00J\x02\x00\x00"\x01\x00\x00t\x01\x00\x00\xb1\x01\x00\x00\x86\x01\x00\x00\xcf\x01\x00\x00\x08\x02\x00\x00#\x00\x00\x00\x10\x00\x00\x00\'\x02\x00\x00\x13\x02\x00\x00\xa4\x01\x00\x00\xa8\x01\x00\x00\xd9\x01\x00\x00\x8e\x00\x00\x00\x1f\x00\x00\x00\t\x01\x00\x00\xc8\x01\x00\x00\xaf\x01\x00\x00\x95\x00\x00\x00y\x00\x00\x00\xb1\x00\x00\x00?\x00\x00\x00\xb4\x01\x00\x00T\x00\x00\x00\xf9\x00\x00\x00\xa2\x00\x00\x00\x8e\x01\x00\x006\x00\x00\x00J\x01\x00\x00\x04\x01\x00\x005\x02\x00\x00\x14\x02\x00\x00\x18\x02\x00\x00\xb9\x00\x00\x00%\x00\x00\x00z\x00\x00\x00.\x02\x00\x00>\x01\x00\x00\x0b\x01\x00\x00\xe1\x00\x00\x00\xad\x01\x00\x00\xe3\x00\x00\x00\xbf\x00\x00\x00\xb5\x00\x00\x00\xa9\x00\x00\x00$\x01\x00\x00L\x01\x00\x00r\x01\x00\x00\xbb\x00\x00\x00\x88\x00\x00\x00(\x00\x00\x005\x00\x00\x00\xed\x00\x00\x00\x8a\x01\x00\x00\xb6\x01\x00\x00\xd6\x00\x00\x00\xd0\x01\x00\x00\x98\x00\x00\x00\x04\x00\x00\x00\x89\x00\x00\x00\x89\x01\x00\x00\xec\x00\x00\x00\x1c\x00\x00\x00\x1c\x02\x00\x00\x12\x00\x00\x00\xcc\x00\x00\x00\x16\x00\x00\x00\xe8\x00\x00\x00[\x00\x00\x00\xe4\x01\x00\x00Y\x01\x00\x00a\x01\x00\x00=\x01\x00\x00\x8d\x01\x00\x00\x0b\x00\x00\x00\xf1\x00\x00\x00\xd4\x00\x00\x00<\x01\x00\x00!\x00\x00\x00\x8c\x01\x00\x00\x8b\x00\x00\x00\x05\x00\x00\x00\xb2\x00\x00\x00\x88\x01\x00\x00D\x00\x00\x00\'\x00\x00\x00%\x02\x00\x00\xe6\x01\x00\x00\xf5\x01\x00\x00x\x00\x00\x00@\x02\x00\x00\xef\x01\x00\x00/\x00\x00\x00\xee\x01\x00\x00\xdd\x00\x00\x00\xe2\x00\x00\x00\x85\x01\x00\x00k\x01\x00\x00\xdc\x00\x00\x001\x01\x00\x00\xb5\x01\x00\x00;\x02\x00\x00\xf7\x01\x00\x00j\x01\x00\x00\xc3\x01\x00\x00$\x00\x00\x00\x8a\x00\x00\x003\x01\x00\x00\x02\x02\x00\x00X\x01\x00\x00"\x02\x00\x00\xf1\x01\x00\x00W\x01\x00\x00\x02\x00\x00\x00\xda\x00\x00\x00H\x00\x00\x006\x02\x00\x00\x97\x00\x00\x00\xd8\x00\x00\x00\x0b\x02\x00\x00\xe7\x01\x00\x008\x01\x00\x00\xef\x00\x00\x00\xe6\x00\x00\x00\x0f\x01\x00\x00\xc5\x01\x00\x00\x99\x01\x00\x00O\x02\x00\x00\x07\x01\x00\x000\x00\x00\x00-\x02\x00\x00\xf8\x01\x00\x00\x18\x01\x00\x002\x02\x00\x00\n\x00\x00\x00\xe0\x00\x00\x00\xee\x00\x00\x00\xea\x01\x00\x00J\x00\x00\x00U\x02\x00\x00\x03\x00\x00\x00\xda\x01\x00\x00\xaa\x01\x00\x00\xc7\x00\x00\x00\xf9\x01\x00\x00j\x00\x00\x00A\x00\x00\x00\xf6\x01\x00\x00\xd0\x00\x00\x00~\x00\x00\x00s\x00\x00\x00\x85\x00\x00\x00\xfe\x01\x00\x00W\x02\x00\x00\xf0\x01\x00\x00\xd5\x00\x00\x00Q\x01\x00\x00\x00\x01\x00\x00\xbe\x00\x00\x00\x01\x01\x00\x00G\x01\x00\x00\\\x00\x00\x00E\x01\x00\x00\x19\x02\x00\x00\xa7\x00\x00\x00\xe2\x01\x00\x00d\x00\x00\x00\x90\x01\x00\x003\x00\x00\x00C\x02\x00\x004\x00\x00\x00\xfc\x00\x00\x00\x03\x02\x00\x00\x99\x00\x00\x00~\x01\x00\x00\xbe\x01\x00\x00\xa4\x00\x00\x00\xf0\x00\x00\x00n\x00\x00\x00\xf4\x01\x00\x00\x81\x00\x00\x00q\x00\x00\x00\x0e\x02\x00\x00f\x01\x00\x00\xfb\x01\x00\x00.\x01\x00\x00\x17\x02\x00\x00\x1c\x01\x00\x00=\x00\x00\x00\xa0\x01\x00\x00+\x02\x00\x00:\x02\x00\x00U\x00\x00\x00\xfc\x01\x00\x009\x00\x00\x00\x93\x01\x00\x00u\x00\x00\x00\x1d\x00\x00\x00\xc9\x00\x00\x00|\x00\x00\x00\t\x00\x00\x00#\x01\x00\x00\x83\x00\x00\x00\x01\x02\x00\x00b\x01\x00\x00\x1e\x01\x00\x00R\x01\x00\x00\x0c\x02\x00\x00\x10\x02\x00\x00\x1f\x02\x00\x00\x06\x02\x00\x00\xf3\x01\x00\x00[\x01\x00\x00K\x02\x00\x00}\x00\x00\x00\xa6\x01\x00\x00\xeb\x00\x00\x00\x13\x00\x00\x00,\x00\x00\x00N\x01\x00\x00\xc0\x00\x00\x00\x05\x02\x00\x00\r\x01\x00\x007\x01\x00\x00\x8f\x00\x00\x00\r\x02\x00\x00 \x02\x00\x00\xe4\x00\x00\x00\xff\x01\x00\x00`\x00\x00\x00\x8d\x00\x00\x00\xf3\x00\x00\x00S\x02\x00\x00d\x01\x00\x00\x19\x00\x00\x00"\x00\x00\x009\x01\x00\x00\x1e\x00\x00\x00\xf7\x00\x00\x00)\x02\x00\x00o\x01\x00\x00\x9d\x00\x00\x00A\x02\x00\x00\xc7\x01\x00\x00@\x01\x00\x00]\x01\x00\x00B\x00\x00\x00-\x00\x00\x005\x01\x00\x00O\x00\x00\x00\xfd\x01\x00\x00\x1d\x01\x00\x00Q\x02\x00\x00L\x02\x00\x00\xc8\x00\x00\x006\x01\x00\x00'
tbsg74
I01
sg75
I1
sg76
I-1
sg77
(lp4814
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg79
Nsg80
cnumpy.core.multiarray
scalar
p4815
(g4813
S'6\x01\x00\x00'
tRp4816
sg81
I600
sg82
I0
sg83
I600
sg84
I01
sbag36
asS'savePickle'
p4817
I01
sb.