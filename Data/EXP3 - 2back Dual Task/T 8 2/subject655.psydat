ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject6505
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 6505
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
Vmale
p31
sS'age'
p32
V19
p33
ssS'loopsUnfinished'
p34
(lp35
g1
(cpsychopy.data
TrialHandler
p36
g3
NtRp37
(dp38
S'origin'
p39
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p40
sS'thisTrial'
p41
I5
sS'_exp'
p42
I74996048
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p43
sS'thisRepN'
p44
I54
sg27
I01
sg28
NsS'data'
p45
g1
(cpsychopy.data
DataHandler
p46
c__builtin__
dict
p47
(dp48
S'ran'
p49
cnumpy.ma.core
_mareconstruct
p50
(cnumpy.ma.core
MaskedArray
p51
cnumpy
ndarray
p52
(I0
tp53
S'b'
tRp54
(I1
(I11
I55
tcnumpy
dtype
p55
(S'f4'
I0
I1
tRp56
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p57
g50
(g51
g52
g53
S'b'
tRp58
(I1
(I11
I55
tg56
I00
S'\x00\x00\x80?\x00\x00\x00@\x00\x00`A\x00\x00\x88A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\x08B\x00\x000B\x00\x00\x8aB\x00\x00\x90B\x00\x00\xa6B\x00\x00\xacB\x00\x00\xbaB\x00\x00\xc6B\x00\x00\x0bC\x00\x00\x16C\x00\x00+C\x00\x003C\x00\x009C\x00\x00OC\x00\x00PC\x00\x00dC\x00\x00oC\x00\x00~C\x00\x00\x83C\x00\x00\x8eC\x00\x00\x8fC\x00\x00\x92C\x00\x80\x98C\x00\x00\x9cC\x00\x80\xa8C\x00\x80\xaeC\x00\x00\xafC\x00\x80\xafC\x00\x80\xb0C\x00\x80\xb1C\x00\x80\xb6C\x00\x80\xb7C\x00\x80\xbdC\x00\x00\xc3C\x00\x00\xc8C\x00\x00\xd7C\x00\x80\xdeC\x00\x80\xf4C\x00\x00\xf6C\x00\x00\xf8C\x00\x00\xffC\x00\x00\x04D\x00\x00\x05D\x00\x80\x06D\x00\xc0\x06D\x00\x00\tD\x00@\rD\x00\x80\x11D\x00\xc0\x14D\x00\x00\x90A\x00\x00\xc0A\x00\x00\x14B\x00\x00HB\x00\x00pB\x00\x00|B\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xaaB\x00\x00\xb4B\x00\x00\xc2B\x00\x00\xd2B\x00\x00\xeaB\x00\x00\x06C\x00\x00\x08C\x00\x00\x17C\x00\x00\x1aC\x00\x00\x1cC\x00\x00 C\x00\x005C\x00\x006C\x00\x00;C\x00\x00AC\x00\x00LC\x00\x00RC\x00\x00UC\x00\x00YC\x00\x00_C\x00\x00iC\x00\x00mC\x00\x00nC\x00\x00\x7fC\x00\x80\x8bC\x00\x80\x8dC\x00\x80\x9eC\x00\x00\xa2C\x00\x80\xb5C\x00\x00\xb8C\x00\x00\xb9C\x00\x80\xc2C\x00\x00\xd0C\x00\x80\xe0C\x00\x80\xe3C\x00\x80\xe9C\x00\x00\xf1C\x00\x00\xf4C\x00\x00\xfbC\x00\x80\xfbC\x00@\x01D\x00\x80\x01D\x00\x80\x03D\x00\x00\rD\x00\x00\x0fD\x00@\x15D\x00\x00\x00\x00\x00\x000A\x00\x00PA\x00\x00\x00B\x00\x00\x10B\x00\x00TB\x00\x00dB\x00\x00\x82B\x00\x00\x9cB\x00\x00\xcaB\x00\x00\xf2B\x00\x00\xf8B\x00\x00\xfeB\x00\x00\x03C\x00\x00*C\x00\x00.C\x00\x00<C\x00\x00>C\x00\x00DC\x00\x00GC\x00\x00bC\x00\x00fC\x00\x00gC\x00\x00\x81C\x00\x00\x89C\x00\x80\x94C\x00\x00\x99C\x00\x00\x9eC\x00\x80\xa2C\x00\x00\xa8C\x00\x80\xaaC\x00\x00\xbaC\x00\x80\xbbC\x00\x00\xbeC\x00\x80\xbeC\x00\x80\xc0C\x00\x00\xc1C\x00\x00\xc4C\x00\x00\xd8C\x00\x80\xd8C\x00\x00\xdbC\x00\x00\xe2C\x00\x00\xe3C\x00\x80\xeaC\x00\x00\xecC\x00\x80\xf7C\x00\x80\xf8C\x00\x00\xfeC\x00\x80\xfeC\x00@\x06D\x00\x00\x07D\x00\xc0\x08D\x00\xc0\x0eD\x00@\x10D\x00\x80\x14D\x00\x00\x00\x00\x00\x00 A\x00\x00\xb0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xe8A\x00\x00tB\x00\x00\x8cB\x00\x00\x92B\x00\x00\x96B\x00\x00\xa4B\x00\x00\xb2B\x00\x00\xb6B\x00\x00\xceB\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xfaB\x00\x00\x0cC\x00\x00\x11C\x00\x00)C\x00\x00/C\x00\x000C\x00\x00HC\x00\x00NC\x00\x00[C\x00\x00aC\x00\x00lC\x00\x00qC\x00\x00sC\x00\x00vC\x00\x00}C\x00\x00\x85C\x00\x80\x86C\x00\x80\x8aC\x00\x00\x97C\x00\x00\x98C\x00\x00\x9bC\x00\x00\xa5C\x00\x00\xaaC\x00\x00\xacC\x00\x00\xb4C\x00\x00\xb5C\x00\x00\xb6C\x00\x80\xbaC\x00\x00\xc2C\x00\x80\xc6C\x00\x00\xcaC\x00\x80\xcaC\x00\x00\xe1C\x00\x80\xe8C\x00\x80\xecC\x00\x80\xf6C\x00\x80\x00D\x00\x80\x0eD\x00@\x0fD\x00\x00\x13D\x00\x00\x80@\x00\x00\x1cB\x00\x00(B\x00\x00\x9eB\x00\x00\xdcB\x00\x00\xe6B\x00\x00\xecB\x00\x00\x12C\x00\x00\x14C\x00\x00\x18C\x00\x00\x1bC\x00\x00!C\x00\x00$C\x00\x00FC\x00\x00\\C\x00\x00tC\x00\x00wC\x00\x80\x81C\x00\x80\x83C\x00\x00\x84C\x00\x00\x8cC\x00\x80\x97C\x00\x80\x9dC\x00\x80\x9fC\x00\x00\xa1C\x00\x00\xa3C\x00\x00\xa4C\x00\x00\xa9C\x00\x00\xb3C\x00\x80\xb4C\x00\x00\xbbC\x00\x80\xc7C\x00\x80\xc8C\x00\x00\xccC\x00\x00\xd6C\x00\x00\xdfC\x00\x80\xefC\x00\x80\xf1C\x00\x00\xf5C\x00\x00\xf9C\x00\x80\xffC\x00@\x02D\x00\xc0\x04D\x00@\x08D\x00\x00\nD\x00\x80\nD\x00\xc0\nD\x00\xc0\x0cD\x00\x80\rD\x00\x80\x0fD\x00\xc0\x11D\x00@\x12D\x00\xc0\x12D\x00\xc0\x13D\x00\x00\x00\x00\x00\x00\x10A\x00\x00\xf0A\x00\x00xB\x00\x00\x98B\x00\x00\x9aB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xdaB\x00\x00\xe4B\x00\x00\xf6B\x00\x00\x02C\x00\x00\x04C\x00\x00\x0eC\x00\x00\x15C\x00\x00\x19C\x00\x00\x1fC\x00\x002C\x00\x008C\x00\x00:C\x00\x00@C\x00\x00TC\x00\x00hC\x00\x00xC\x00\x80\x87C\x00\x80\x99C\x00\x80\x9bC\x00\x00\x9dC\x00\x00\xa0C\x00\x80\xa4C\x00\x80\xa7C\x00\x80\xabC\x00\x00\xaeC\x00\x00\xb2C\x00\x80\xb3C\x00\x00\xbcC\x00\x00\xbdC\x00\x80\xc1C\x00\x00\xcfC\x00\x80\xd2C\x00\x00\xd5C\x00\x00\xdcC\x00\x80\xe2C\x00\x00\xe4C\x00\x00\xe5C\x00\x80\xf3C\x00\x80\xf5C\x00\xc0\x00D\x00\x00\x08D\x00@\x0eD\x00\xc0\x0fD\x00\xc0\x10D\x00\x00\x11D\x00@\x14D\x00\xc0\x15D\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\xa0A\x00\x00\x18B\x00\x00 B\x00\x00`B\x00\x00\x84B\x00\x00\xc4B\x00\x00\xc8B\x00\x00\xd0B\x00\x00\xfcB\x00\x00\x00C\x00\x00\nC\x00\x00\rC\x00\x00\x0fC\x00\x00\'C\x00\x00(C\x00\x00?C\x00\x00WC\x00\x00XC\x00\x00]C\x00\x00jC\x00\x80\x80C\x00\x80\x82C\x00\x80\x85C\x00\x00\x8dC\x00\x80\x90C\x00\x80\x92C\x00\x80\xa6C\x00\x00\xa7C\x00\x80\xb8C\x00\x80\xc4C\x00\x80\xc5C\x00\x00\xc6C\x00\x80\xc9C\x00\x80\xd0C\x00\x00\xd1C\x00\x80\xd1C\x00\x80\xd3C\x00\x00\xdaC\x00\x00\xdeC\x00\x80\xe5C\x00\x00\xe8C\x00\x80\xebC\x00\x00\xf0C\x00\x00\xf2C\x00\x00\xfcC\x00\x00\xfdC\x00\xc0\x02D\x00@\x03D\x00\xc0\tD\x00@\x0cD\x00\x00\x0eD\x00\x00\xc0@\x00\x00\xf8A\x00\x00\x04B\x00\x00$B\x00\x00,B\x00\x00\x86B\x00\x00\x8eB\x00\x00\xb0B\x00\x00\xb8B\x00\x00\xd4B\x00\x00\xf4B\x00\x00\tC\x00\x00\x10C\x00\x00=C\x00\x00BC\x00\x00EC\x00\x00JC\x00\x00QC\x00\x00SC\x00\x00^C\x00\x00\x80C\x00\x00\x82C\x00\x80\x84C\x00\x00\x95C\x00\x00\x9fC\x00\x80\xa5C\x00\x00\xabC\x00\x80\xadC\x00\x00\xb0C\x00\x80\xb2C\x00\x00\xc5C\x00\x00\xc9C\x00\x80\xccC\x00\x80\xcdC\x00\x00\xd2C\x00\x00\xd4C\x00\x80\xd6C\x00\x80\xdfC\x00\x00\xe0C\x00\x80\xe1C\x00\x00\xe6C\x00\x80\xe6C\x00\x80\xe7C\x00\x00\xeeC\x00\x80\xf0C\x00\x00\x03D\x00\xc0\x05D\x00\x00\x06D\x00\xc0\x07D\x00\x80\x0bD\x00\x80\x0cD\x00@\x11D\x00\x80\x12D\x00@\x13D\x00\x00\x14D\x00\x00@@\x00\x00@A\x00\x00pA\x00\x00\x98A\x00\x00\xb8A\x00\x004B\x00\x00@B\x00\x00PB\x00\x00XB\x00\x00lB\x00\x00\x80B\x00\x00\xa8B\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe8B\x00\x00\x13C\x00\x00\x1eC\x00\x00#C\x00\x00KC\x00\x00MC\x00\x00cC\x00\x00kC\x00\x00uC\x00\x00yC\x00\x00\x87C\x00\x80\x89C\x00\x00\x8aC\x00\x00\x8bC\x00\x80\x8eC\x00\x80\x8fC\x00\x80\x93C\x00\x80\x9aC\x00\x80\xa1C\x00\x00\xb1C\x00\x80\xb9C\x00\x80\xbcC\x00\x00\xc0C\x00\x00\xcdC\x00\x00\xceC\x00\x80\xd4C\x00\x00\xd9C\x00\x80\xd9C\x00\x80\xdaC\x00\x80\xdbC\x00\x00\xddC\x00\x00\xebC\x00\x00\xedC\x00\x80\xeeC\x00\x80\xf2C\x00\x80\xfaC\x00\x00\x01D\x00\xc0\x01D\x00\x80\x08D\x00\x00\x10D\x00\x00\x15D\x00\x00\x0cB\x00\x008B\x00\x00DB\x00\x00\\B\x00\x00\xaeB\x00\x00\xccB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\x07C\x00\x00\x1dC\x00\x00%C\x00\x00,C\x00\x00-C\x00\x001C\x00\x007C\x00\x00CC\x00\x00VC\x00\x00eC\x00\x00zC\x00\x00{C\x00\x80\x88C\x00\x80\x91C\x00\x00\x93C\x00\x00\x94C\x00\x80\x95C\x00\x80\x96C\x00\x80\xa0C\x00\x80\xa3C\x00\x00\xa6C\x00\x80\xa9C\x00\x80\xacC\x00\x00\xc7C\x00\x00\xcbC\x00\x80\xcbC\x00\x80\xcfC\x00\x80\xd5C\x00\x80\xe4C\x00\x00\xe7C\x00\x00\xefC\x00\x00\xf3C\x00\x00\xf7C\x00\x00\xfaC\x00\x80\xfcC\x00\x00\x00D\x00@\x04D\x00\x80\x05D\x00@\x07D\x00\x80\tD\x00@\nD\x00\x00\x0bD\x00\xc0\x0bD\x00\x00\x0cD\x00\x80\x10D\x00\x80\x15D\x00\x00\x00\x00\x00\x00\x80A\x00\x00\xa8A\x00\x00<B\x00\x00LB\x00\x00hB\x00\x00\x88B\x00\x00\x94B\x00\x00\xc0B\x00\x00\xe2B\x00\x00\x01C\x00\x00\x05C\x00\x00"C\x00\x00&C\x00\x004C\x00\x00IC\x00\x00ZC\x00\x00`C\x00\x00pC\x00\x00rC\x00\x00|C\x00\x00\x86C\x00\x00\x88C\x00\x80\x8cC\x00\x00\x90C\x00\x00\x91C\x00\x00\x96C\x00\x00\x9aC\x00\x80\x9cC\x00\x00\xadC\x00\x00\xb7C\x00\x00\xbfC\x00\x80\xbfC\x00\x80\xc3C\x00\x80\xceC\x00\x00\xd3C\x00\x80\xd7C\x00\x80\xdcC\x00\x80\xddC\x00\x00\xe9C\x00\x00\xeaC\x00\x80\xedC\x00\x80\xf9C\x00\x80\xfdC\x00@\x00D\x00\x00\x02D\x00\x80\x02D\x00\xc0\x03D\x00\x80\x04D\x00@\x05D\x00\x80\x07D\x00@\tD\x00@\x0bD\x00\xc0\rD\x00\x00\x12D\x00\x80\x13D'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp59
(dp60
S'isNumeric'
p61
(dp62
g49
I01
sg57
I01
ssS'trials'
p63
g37
sS'dataTypes'
p64
(lp65
g49
ag57
asS'dataShape'
p66
(lp67
I11
aI55
asbsS'method'
p68
S'fullRandom'
p69
sS'sequenceIndices'
p70
cnumpy.core.multiarray
_reconstruct
p71
(g52
(I0
tS'b'
tRp72
(I1
(I11
I55
tg55
(S'O4'
I0
I1
tRp73
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp74
I6
aI2
aI3
aI7
aI0
aI9
aI6
aI5
aI7
aI0
aI4
aI2
aI5
aI6
aI1
aI9
aI3
aI1
aI4
aI7
aI4
aI2
aI10
aI3
aI4
aI8
aI0
aI2
aI10
aI4
aI3
aI2
aI7
aI1
aI4
aI2
aI6
aI9
aI6
aI7
aI5
aI7
aI9
aI3
aI6
aI2
aI6
aI1
aI0
aI0
aI9
aI6
aI1
aI4
aI2
aI0
aI8
aI8
aI0
aI8
aI6
aI7
aI2
aI3
aI6
aI8
aI7
aI10
aI7
aI4
aI10
aI9
aI2
aI2
aI1
aI6
aI5
aI3
aI0
aI7
aI8
aI8
aI7
aI8
aI5
aI7
aI7
aI0
aI3
aI2
aI2
aI3
aI4
aI6
aI0
aI10
aI2
aI7
aI8
aI8
aI0
aI10
aI1
aI9
aI2
aI6
aI7
aI3
aI10
aI0
aI0
aI2
aI1
aI9
aI9
aI2
aI10
aI4
aI1
aI2
aI8
aI5
aI1
aI3
aI1
aI6
aI5
aI7
aI3
aI7
aI7
aI1
aI4
aI1
aI3
aI3
aI10
aI9
aI3
aI9
aI9
aI5
aI8
aI0
aI5
aI5
aI9
aI7
aI7
aI10
aI8
aI5
aI6
aI10
aI9
aI2
aI2
aI8
aI10
aI9
aI4
aI4
aI4
aI4
aI8
aI8
aI0
aI3
aI2
aI10
aI10
aI0
aI1
aI3
aI9
aI10
aI2
aI9
aI4
aI9
aI6
aI0
aI2
aI10
aI5
aI1
aI6
aI8
aI7
aI6
aI8
aI6
aI10
aI5
aI4
aI6
aI3
aI0
aI10
aI8
aI3
aI4
aI8
aI5
aI2
aI10
aI2
aI3
aI7
aI5
aI4
aI2
aI10
aI4
aI10
aI9
aI1
aI5
aI7
aI1
aI4
aI8
aI3
aI1
aI8
aI8
aI3
aI1
aI7
aI3
aI5
aI3
aI1
aI8
aI8
aI3
aI10
aI6
aI7
aI1
aI10
aI8
aI3
aI6
aI10
aI1
aI10
aI9
aI0
aI8
aI6
aI9
aI5
aI0
aI5
aI1
aI0
aI7
aI10
aI2
aI6
aI1
aI10
aI8
aI1
aI10
aI0
aI4
aI0
aI7
aI4
aI0
aI8
aI4
aI9
aI6
aI10
aI0
aI6
aI9
aI1
aI7
aI3
aI0
aI6
aI4
aI6
aI7
aI4
aI5
aI2
aI1
aI5
aI8
aI9
aI3
aI3
aI4
aI2
aI3
aI4
aI9
aI3
aI10
aI1
aI5
aI10
aI7
aI1
aI0
aI0
aI4
aI8
aI6
aI8
aI0
aI5
aI1
aI9
aI0
aI9
aI4
aI10
aI10
aI5
aI4
aI4
aI2
aI3
aI5
aI7
aI0
aI0
aI4
aI1
aI3
aI0
aI0
aI5
aI1
aI8
aI2
aI6
aI5
aI1
aI0
aI1
aI1
aI1
aI6
aI2
aI1
aI5
aI4
aI8
aI10
aI0
aI4
aI5
aI2
aI2
aI7
aI4
aI6
aI2
aI10
aI7
aI10
aI7
aI8
aI4
aI9
aI10
aI4
aI4
aI8
aI9
aI6
aI9
aI4
aI9
aI10
aI9
aI7
aI1
aI6
aI1
aI3
aI6
aI10
aI5
aI3
aI8
aI5
aI7
aI1
aI6
aI0
aI0
aI4
aI9
aI9
aI7
aI8
aI6
aI8
aI1
aI8
aI7
aI5
aI6
aI6
aI3
aI4
aI4
aI0
aI5
aI5
aI1
aI2
aI2
aI6
aI5
aI8
aI6
aI7
aI5
aI2
aI6
aI5
aI1
aI10
aI7
aI7
aI8
aI10
aI6
aI5
aI10
aI5
aI6
aI8
aI5
aI7
aI8
aI1
aI10
aI1
aI10
aI3
aI4
aI10
aI3
aI1
aI10
aI9
aI5
aI9
aI3
aI1
aI0
aI0
aI9
aI6
aI10
aI1
aI9
aI0
aI2
aI9
aI4
aI0
aI3
aI8
aI10
aI6
aI3
aI9
aI5
aI8
aI7
aI6
aI8
aI7
aI0
aI1
aI3
aI6
aI7
aI2
aI7
aI5
aI5
aI4
aI2
aI5
aI6
aI7
aI4
aI2
aI8
aI3
aI0
aI1
aI3
aI9
aI5
aI6
aI4
aI8
aI2
aI0
aI2
aI0
aI10
aI9
aI10
aI9
aI0
aI9
aI0
aI8
aI2
aI1
aI4
aI9
aI0
aI4
aI2
aI10
aI7
aI3
aI1
aI9
aI2
aI1
aI7
aI6
aI1
aI3
aI6
aI5
aI1
aI2
aI0
aI9
aI3
aI7
aI7
aI4
aI3
aI10
aI2
aI7
aI8
aI2
aI5
aI9
aI6
aI5
aI9
aI2
aI5
aI5
aI4
aI3
aI5
aI7
aI0
aI3
aI2
aI3
aI10
aI4
aI2
aI8
aI9
aI5
aI7
aI5
aI3
aI0
aI3
aI3
aI8
aI6
aI9
aI6
aI4
aI8
aI3
aI7
aI2
aI4
aI9
aI9
aI8
aI10
aI0
aI10
aI9
aI2
aI0
aI5
aI9
atbsS'finished'
p75
I00
sS'nReps'
p76
I55
sS'nRemaining'
p77
I5
sS'trialList'
p78
(lp79
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
asS'seed'
p80
NsS'thisIndex'
p81
I5
sS'thisN'
p82
I599
sS'thisTrialN'
p83
I5
sS'nTotal'
p84
I605
sS'_warnUseOfNext'
p85
I01
sbasS'saveWideText'
p86
I01
sS'thisEntry'
p87
(dp88
sS'version'
p89
S''
sS'_paramNamesSoFar'
p90
(lp91
sS'entries'
p92
(lp93
(dp94
g16
(lp95
S'd'
asS'.thisTrial'
p96
I6
sS'.thisRepN'
p97
I0
sg30
g31
sg32
g33
sS'.thisTrialN'
p98
I0
sS'.thisN'
p99
I0
sS'.thisIndex'
p100
I6
sg15
(lp101
S'd'
asg17
S'Y'
sg14
I1
sa(dp102
g16
(lp103
S'd'
asg96
I0
sS'.thisRepN'
p104
I0
sg30
g31
sg32
g33
sS'.thisTrialN'
p105
I1
sS'.thisN'
p106
I1
sS'.thisIndex'
p107
I0
sg15
(lp108
S'k'
asg17
S'N'
sg14
I1
sa(dp109
g16
(lp110
S'd'
asg18
S'N'
sS'.thisRepN'
p111
I0
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p112
I2
sS'.thisN'
p113
I2
sS'.thisIndex'
p114
I0
sg15
(lp115
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp116
S'd'
asg96
I0
sa(dp117
g16
(lp118
S'k'
asg18
S'Y'
sS'.thisRepN'
p119
I0
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p120
I3
sS'.thisN'
p121
I3
sS'.thisIndex'
p122
I8
sg15
(lp123
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp124
S'k'
asg96
I8
sa(dp125
g16
(lp126
S'd'
asg18
S'Y'
sS'.thisRepN'
p127
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p128
I4
sS'.thisN'
p129
I4
sS'.thisIndex'
p130
I4
sg15
(lp131
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp132
S'space'
p133
asg96
I4
sa(dp134
g16
(lp135
S'k'
asg18
S'N'
sS'.thisRepN'
p136
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p137
I5
sS'.thisN'
p138
I5
sS'.thisIndex'
p139
I6
sg15
(lp140
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I6
sa(dp141
g16
(lp142
S'd'
asg18
S'Y'
sS'.thisRepN'
p143
I0
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p144
I6
sS'.thisN'
p145
I6
sS'.thisIndex'
p146
I7
sg15
(lp147
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I7
sa(dp148
g16
(lp149
S'k'
asg18
S'Y'
sS'.thisRepN'
p150
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p151
I7
sS'.thisN'
p152
I7
sS'.thisIndex'
p153
I6
sg15
(lp154
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp155
S'space'
p156
asg96
I6
sa(dp157
g16
(lp158
S'k'
asg18
S'N'
sS'.thisRepN'
p159
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p160
I8
sS'.thisN'
p161
I8
sS'.thisIndex'
p162
I6
sg15
(lp163
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I6
sa(dp164
g16
(lp165
S'k'
asg18
S'N'
sS'.thisRepN'
p166
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p167
I9
sS'.thisN'
p168
I9
sS'.thisIndex'
p169
I5
sg15
(lp170
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I5
sa(dp171
g16
(lp172
S'k'
asg18
S'N'
sS'.thisRepN'
p173
I0
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p174
I10
sS'.thisN'
p175
I10
sS'.thisIndex'
p176
I3
sg15
(lp177
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I3
sa(dp178
g16
(lp179
S'd'
asg18
S'N'
sS'.thisRepN'
p180
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p181
I0
sS'.thisN'
p182
I11
sS'.thisIndex'
p183
I2
sg15
(lp184
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I2
sa(dp185
g16
(lp186
S'd'
asg18
S'N'
sS'.thisRepN'
p187
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p188
I1
sS'.thisN'
p189
I12
sS'.thisIndex'
p190
I8
sg15
(lp191
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I8
sa(dp192
g16
(lp193
S'k'
asg18
S'Y'
sS'.thisRepN'
p194
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p195
I2
sS'.thisN'
p196
I13
sS'.thisIndex'
p197
I2
sg15
(lp198
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I2
sa(dp199
g16
(lp200
S'k'
asg18
S'N'
sS'.thisRepN'
p201
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p202
I3
sS'.thisN'
p203
I14
sS'.thisIndex'
p204
I0
sg15
(lp205
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I0
sa(dp206
g16
(lp207
S'd'
asg18
S'N'
sS'.thisRepN'
p208
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p209
I4
sS'.thisN'
p210
I15
sS'.thisIndex'
p211
I8
sg15
(lp212
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I8
sa(dp213
g16
(lp214
S'k'
asg18
S'Y'
sS'.thisRepN'
p215
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p216
I5
sS'.thisN'
p217
I16
sS'.thisIndex'
p218
I10
sg15
(lp219
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I10
sa(dp220
g16
(lp221
S'd'
asg18
S'N'
sS'.thisRepN'
p222
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p223
I6
sS'.thisN'
p224
I17
sS'.thisIndex'
p225
I0
sg15
(lp226
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp227
S'k'
asg96
I0
sa(dp228
g16
(lp229
S'k'
asg18
S'Y'
sS'.thisRepN'
p230
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p231
I7
sS'.thisN'
p232
I18
sS'.thisIndex'
p233
I1
sg15
(lp234
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I1
sa(dp235
g16
(lp236
S'd'
asg18
S'Y'
sS'.thisRepN'
p237
I1
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p238
I8
sS'.thisN'
p239
I19
sS'.thisIndex'
p240
I8
sg15
(lp241
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I8
sa(dp242
g16
(lp243
S'k'
asg18
S'N'
sS'.thisRepN'
p244
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p245
I9
sS'.thisN'
p246
I20
sS'.thisIndex'
p247
I6
sg15
(lp248
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I6
sa(dp249
g16
(lp250
S'k'
asg18
S'N'
sS'.thisRepN'
p251
I1
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p252
I10
sS'.thisN'
p253
I21
sS'.thisIndex'
p254
I10
sg15
(lp255
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I10
sa(dp256
g16
(lp257
S'd'
asg18
S'Y'
sS'.thisRepN'
p258
I2
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p259
I0
sS'.thisN'
p260
I22
sS'.thisIndex'
p261
I3
sg15
(lp262
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp263
S'k'
asg96
I3
sa(dp264
g16
(lp265
S'k'
asg18
S'Y'
sS'.thisRepN'
p266
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p267
I1
sS'.thisN'
p268
I23
sS'.thisIndex'
p269
I8
sg15
(lp270
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp271
S'space'
p272
asg96
I8
sa(dp273
g16
(lp274
S'd'
asg18
S'N'
sS'.thisRepN'
p275
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p276
I2
sS'.thisN'
p277
I24
sS'.thisIndex'
p278
I1
sg15
(lp279
S'k'
asg30
g31
sg17
S'N'
sg14
I1
sg19
Nsg96
I1
sa(dp280
g16
(lp281
S'd'
asg18
S'Y'
sS'.thisRepN'
p282
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p283
I3
sS'.thisN'
p284
I25
sS'.thisIndex'
p285
I3
sg15
(lp286
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp287
S'space'
p288
asg96
I3
sa(dp289
g16
(lp290
S'k'
asg18
S'Y'
sS'.thisRepN'
p291
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p292
I4
sS'.thisN'
p293
I26
sS'.thisIndex'
p294
I3
sg15
(lp295
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp296
S'space'
p297
asg96
I3
sa(dp298
g16
(lp299
S'k'
asg18
S'Y'
sS'.thisRepN'
p300
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p301
I5
sS'.thisN'
p302
I27
sS'.thisIndex'
p303
I0
sg15
(lp304
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp305
S'space'
p306
asg96
I0
sa(dp307
g16
(lp308
S'k'
asg18
S'N'
sS'.thisRepN'
p309
I2
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p310
I6
sS'.thisN'
p311
I28
sS'.thisIndex'
p312
I0
sg15
(lp313
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp314
S'd'
asg96
I0
sa(dp315
g16
(lp316
S'k'
asg18
S'Y'
sS'.thisRepN'
p317
I2
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p318
I7
sS'.thisN'
p319
I29
sS'.thisIndex'
p320
I3
sg15
(lp321
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I3
sa(dp322
g16
(lp323
S'k'
asg18
S'N'
sS'.thisRepN'
p324
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p325
I8
sS'.thisN'
p326
I30
sS'.thisIndex'
p327
I5
sg15
(lp328
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I5
sa(dp329
g16
(lp330
S'k'
asg18
S'Y'
sS'.thisRepN'
p331
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p332
I9
sS'.thisN'
p333
I31
sS'.thisIndex'
p334
I7
sg15
(lp335
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp336
S'space'
p337
asg96
I7
sa(dp338
g16
(lp339
S'd'
asg18
S'N'
sS'.thisRepN'
p340
I2
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p341
I10
sS'.thisN'
p342
I32
sS'.thisIndex'
p343
I2
sg15
(lp344
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I2
sa(dp345
g16
(lp346
S'k'
asg18
S'N'
sS'.thisRepN'
p347
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p348
I0
sS'.thisN'
p349
I33
sS'.thisIndex'
p350
I7
sg15
(lp351
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I7
sa(dp352
g16
(lp353
S'k'
asg18
S'Y'
sS'.thisRepN'
p354
I3
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p355
I1
sS'.thisN'
p356
I34
sS'.thisIndex'
p357
I0
sg15
(lp358
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I0
sa(dp359
g16
(lp360
S'k'
asg18
S'Y'
sS'.thisRepN'
p361
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p362
I2
sS'.thisN'
p363
I35
sS'.thisIndex'
p364
I9
sg15
(lp365
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp366
S'space'
p367
asg96
I9
sa(dp368
g16
(lp369
S'k'
asg18
S'N'
sS'.thisRepN'
p370
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p371
I3
sS'.thisN'
p372
I36
sS'.thisIndex'
p373
I2
sg15
(lp374
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I2
sa(dp375
g16
(lp376
S'k'
asg18
S'Y'
sS'.thisRepN'
p377
I3
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p378
I4
sS'.thisN'
p379
I37
sS'.thisIndex'
p380
I1
sg15
(lp381
S'd'
asg30
g31
sg17
S'N'
sg14
I1
sg19
(lp382
S'k'
asg96
I1
sa(dp383
g16
(lp384
S'k'
asg18
S'N'
sS'.thisRepN'
p385
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p386
I5
sS'.thisN'
p387
I38
sS'.thisIndex'
p388
I6
sg15
(lp389
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I6
sa(dp390
g16
(lp391
S'k'
asg18
S'Y'
sS'.thisRepN'
p392
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p393
I6
sS'.thisN'
p394
I39
sS'.thisIndex'
p395
I4
sg15
(lp396
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp397
S'space'
p398
asg96
I4
sa(dp399
g16
(lp400
S'k'
asg18
S'N'
sS'.thisRepN'
p401
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p402
I7
sS'.thisN'
p403
I40
sS'.thisIndex'
p404
I6
sg15
(lp405
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I6
sa(dp406
g16
(lp407
S'd'
asg18
S'N'
sS'.thisRepN'
p408
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p409
I8
sS'.thisN'
p410
I41
sS'.thisIndex'
p411
I7
sg15
(lp412
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I7
sa(dp413
g16
(lp414
S'd'
asg18
S'Y'
sS'.thisRepN'
p415
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p416
I9
sS'.thisN'
p417
I42
sS'.thisIndex'
p418
I4
sg15
(lp419
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp420
S'space'
p421
asg96
I4
sa(dp422
g16
(lp423
S'd'
asg18
S'N'
sS'.thisRepN'
p424
I3
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p425
I10
sS'.thisN'
p426
I43
sS'.thisIndex'
p427
I7
sg15
(lp428
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I7
sa(dp429
g16
(lp430
S'd'
asg18
S'N'
sS'.thisRepN'
p431
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p432
I0
sS'.thisN'
p433
I44
sS'.thisIndex'
p434
I0
sg15
(lp435
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I0
sa(dp436
g16
(lp437
S'd'
asg18
S'Y'
sS'.thisRepN'
p438
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p439
I1
sS'.thisN'
p440
I45
sS'.thisIndex'
p441
I8
sg15
(lp442
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp443
S'space'
p444
asg96
I8
sa(dp445
g16
(lp446
S'd'
asg18
S'N'
sS'.thisRepN'
p447
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p448
I2
sS'.thisN'
p449
I46
sS'.thisIndex'
p450
I9
sg15
(lp451
S'd'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I9
sa(dp452
g16
(lp453
S'k'
asg18
S'N'
sS'.thisRepN'
p454
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p455
I3
sS'.thisN'
p456
I47
sS'.thisIndex'
p457
I10
sg15
(lp458
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
Nsg96
I10
sa(dp459
g16
(lp460
S'k'
asg18
S'Y'
sS'.thisRepN'
p461
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p462
I4
sS'.thisN'
p463
I48
sS'.thisIndex'
p464
I8
sg15
(lp465
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp466
S'space'
p467
asg96
I8
sa(dp468
g16
(lp469
S'k'
asg18
S'Y'
sg22
I35
sS'.thisN'
p470
I49
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p471
I5
sS'.thisRepN'
p472
I4
sg21
I32
sS'.thisIndex'
p473
I9
sg23
I23
sg15
(lp474
S'k'
asg30
g31
sg17
S'Y'
sg14
I1
sg19
(lp475
S'space'
p476
asg96
I9
sa(dp477
g16
(lp478
S'k'
asg96
I1
sS'.thisRepN'
p479
I4
sg30
g31
sg32
g33
sS'.thisTrialN'
p480
I6
sS'.thisN'
p481
I50
sS'.thisIndex'
p482
I1
sg15
(lp483
S'k'
asg17
S'Y'
sg14
I2
sa(dp484
g16
(lp485
S'd'
asg96
I10
sS'.thisRepN'
p486
I4
sg30
g31
sg32
g33
sS'.thisTrialN'
p487
I7
sS'.thisN'
p488
I51
sS'.thisIndex'
p489
I10
sg15
(lp490
S'd'
asg17
S'Y'
sg14
I2
sa(dp491
g16
(lp492
S'k'
asg18
S'Y'
sS'.thisRepN'
p493
I4
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p494
I8
sS'.thisN'
p495
I52
sS'.thisIndex'
p496
I8
sg15
(lp497
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I8
sa(dp498
g16
(lp499
S'k'
asg18
S'Y'
sS'.thisRepN'
p500
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p501
I9
sS'.thisN'
p502
I53
sS'.thisIndex'
p503
I2
sg15
(lp504
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp505
S'space'
p506
asg96
I2
sa(dp507
g16
(lp508
S'd'
asg18
S'Y'
sS'.thisRepN'
p509
I4
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p510
I10
sS'.thisN'
p511
I54
sS'.thisIndex'
p512
I8
sg15
(lp513
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp514
S'space'
p515
asg96
I8
sa(dp516
g16
(lp517
S'd'
asg18
S'Y'
sS'.thisRepN'
p518
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p519
I0
sS'.thisN'
p520
I55
sS'.thisIndex'
p521
I9
sg15
(lp522
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp523
S'space'
p524
asg96
I9
sa(dp525
g16
(lp526
S'k'
asg18
S'Y'
sS'.thisRepN'
p527
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p528
I1
sS'.thisN'
p529
I56
sS'.thisIndex'
p530
I6
sg15
(lp531
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp532
S'space'
p533
asg96
I6
sa(dp534
g16
(lp535
S'd'
asg18
S'N'
sS'.thisRepN'
p536
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p537
I2
sS'.thisN'
p538
I57
sS'.thisIndex'
p539
I2
sg15
(lp540
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I2
sa(dp541
g16
(lp542
S'k'
asg18
S'N'
sS'.thisRepN'
p543
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p544
I3
sS'.thisN'
p545
I58
sS'.thisIndex'
p546
I10
sg15
(lp547
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I10
sa(dp548
g16
(lp549
S'k'
asg18
S'Y'
sS'.thisRepN'
p550
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p551
I4
sS'.thisN'
p552
I59
sS'.thisIndex'
p553
I8
sg15
(lp554
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp555
S'space'
p556
asg96
I8
sa(dp557
g16
(lp558
S'k'
asg18
S'Y'
sS'.thisRepN'
p559
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p560
I5
sS'.thisN'
p561
I60
sS'.thisIndex'
p562
I1
sg15
(lp563
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp564
S'space'
p565
asg96
I1
sa(dp566
g16
(lp567
S'd'
asg18
S'N'
sS'.thisRepN'
p568
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p569
I6
sS'.thisN'
p570
I61
sS'.thisIndex'
p571
I3
sg15
(lp572
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I3
sa(dp573
g16
(lp574
S'd'
asg18
S'Y'
sS'.thisRepN'
p575
I5
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p576
I7
sS'.thisN'
p577
I62
sS'.thisIndex'
p578
I5
sg15
(lp579
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I5
sa(dp580
g16
(lp581
S'k'
asg18
S'Y'
sS'.thisRepN'
p582
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p583
I8
sS'.thisN'
p584
I63
sS'.thisIndex'
p585
I1
sg15
(lp586
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp587
S'space'
p588
asg96
I1
sa(dp589
g16
(lp590
S'k'
asg18
S'Y'
sS'.thisRepN'
p591
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p592
I9
sS'.thisN'
p593
I64
sS'.thisIndex'
p594
I8
sg15
(lp595
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp596
S'space'
p597
asg96
I8
sa(dp598
g16
(lp599
S'k'
asg18
S'N'
sS'.thisRepN'
p600
I5
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p601
I10
sS'.thisN'
p602
I65
sS'.thisIndex'
p603
I2
sg15
(lp604
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I2
sa(dp605
g16
(lp606
S'k'
asg18
S'Y'
sS'.thisRepN'
p607
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p608
I0
sS'.thisN'
p609
I66
sS'.thisIndex'
p610
I6
sg15
(lp611
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp612
S'space'
p613
asg96
I6
sa(dp614
g16
(lp615
S'k'
asg18
S'Y'
sS'.thisRepN'
p616
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p617
I1
sS'.thisN'
p618
I67
sS'.thisIndex'
p619
I7
sg15
(lp620
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp621
S'space'
p622
asg96
I7
sa(dp623
g16
(lp624
S'k'
asg18
S'Y'
sS'.thisRepN'
p625
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p626
I2
sS'.thisN'
p627
I68
sS'.thisIndex'
p628
I10
sg15
(lp629
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp630
S'space'
p631
asg96
I10
sa(dp632
g16
(lp633
S'd'
asg18
S'N'
sS'.thisRepN'
p634
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p635
I3
sS'.thisN'
p636
I69
sS'.thisIndex'
p637
I0
sg15
(lp638
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I0
sa(dp639
g16
(lp640
S'k'
asg18
S'Y'
sS'.thisRepN'
p641
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p642
I4
sS'.thisN'
p643
I70
sS'.thisIndex'
p644
I3
sg15
(lp645
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp646
S'space'
p647
asg96
I3
sa(dp648
g16
(lp649
S'k'
asg18
S'N'
sS'.thisRepN'
p650
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p651
I5
sS'.thisN'
p652
I71
sS'.thisIndex'
p653
I7
sg15
(lp654
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I7
sa(dp655
g16
(lp656
S'd'
asg18
S'N'
sS'.thisRepN'
p657
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p658
I6
sS'.thisN'
p659
I72
sS'.thisIndex'
p660
I0
sg15
(lp661
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I0
sa(dp662
g16
(lp663
S'k'
asg18
S'N'
sS'.thisRepN'
p664
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p665
I7
sS'.thisN'
p666
I73
sS'.thisIndex'
p667
I3
sg15
(lp668
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I3
sa(dp669
g16
(lp670
S'd'
asg18
S'Y'
sS'.thisRepN'
p671
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p672
I8
sS'.thisN'
p673
I74
sS'.thisIndex'
p674
I10
sg15
(lp675
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp676
S'space'
p677
asg96
I10
sa(dp678
g16
(lp679
S'k'
asg18
S'N'
sS'.thisRepN'
p680
I6
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p681
I9
sS'.thisN'
p682
I75
sS'.thisIndex'
p683
I3
sg15
(lp684
S'd'
asg30
g31
sg17
S'N'
sg14
I2
sg19
Nsg96
I3
sa(dp685
g16
(lp686
S'k'
asg18
S'Y'
sS'.thisRepN'
p687
I6
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p688
I10
sS'.thisN'
p689
I76
sS'.thisIndex'
p690
I5
sg15
(lp691
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp692
S'k'
asg96
I5
sa(dp693
g16
(lp694
S'd'
asg18
S'N'
sS'.thisRepN'
p695
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p696
I0
sS'.thisN'
p697
I77
sS'.thisIndex'
p698
I5
sg15
(lp699
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I5
sa(dp700
g16
(lp701
S'd'
asg18
S'Y'
sS'.thisRepN'
p702
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p703
I1
sS'.thisN'
p704
I78
sS'.thisIndex'
p705
I2
sg15
(lp706
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp707
S'space'
p708
asg96
I2
sa(dp709
g16
(lp710
S'd'
asg18
S'Y'
sS'.thisRepN'
p711
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p712
I2
sS'.thisN'
p713
I79
sS'.thisIndex'
p714
I4
sg15
(lp715
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp716
S'space'
p717
asg96
I4
sa(dp718
g16
(lp719
S'k'
asg18
S'N'
sS'.thisRepN'
p720
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p721
I3
sS'.thisN'
p722
I80
sS'.thisIndex'
p723
I1
sg15
(lp724
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I1
sa(dp725
g16
(lp726
S'd'
asg18
S'N'
sS'.thisRepN'
p727
I7
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p728
I4
sS'.thisN'
p729
I81
sS'.thisIndex'
p730
I1
sg15
(lp731
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp732
S'space'
p733
asg96
I1
sa(dp734
g16
(lp735
S'k'
asg18
S'N'
sS'.thisRepN'
p736
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p737
I5
sS'.thisN'
p738
I82
sS'.thisIndex'
p739
I3
sg15
(lp740
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I3
sa(dp741
g16
(lp742
S'd'
asg18
S'Y'
sS'.thisRepN'
p743
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p744
I6
sS'.thisN'
p745
I83
sS'.thisIndex'
p746
I0
sg15
(lp747
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp748
S'space'
p749
asg96
I0
sa(dp750
g16
(lp751
S'k'
asg18
S'Y'
sS'.thisRepN'
p752
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p753
I7
sS'.thisN'
p754
I84
sS'.thisIndex'
p755
I8
sg15
(lp756
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp757
S'space'
p758
asg96
I8
sa(dp759
g16
(lp760
S'd'
asg18
S'Y'
sS'.thisRepN'
p761
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p762
I8
sS'.thisN'
p763
I85
sS'.thisIndex'
p764
I1
sg15
(lp765
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp766
S'space'
p767
asg96
I1
sa(dp768
g16
(lp769
S'd'
asg18
S'N'
sS'.thisRepN'
p770
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p771
I9
sS'.thisN'
p772
I86
sS'.thisIndex'
p773
I0
sg15
(lp774
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I0
sa(dp775
g16
(lp776
S'k'
asg18
S'N'
sS'.thisRepN'
p777
I7
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p778
I10
sS'.thisN'
p779
I87
sS'.thisIndex'
p780
I9
sg15
(lp781
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I9
sa(dp782
g16
(lp783
S'd'
asg18
S'N'
sS'.thisRepN'
p784
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p785
I0
sS'.thisN'
p786
I88
sS'.thisIndex'
p787
I7
sg15
(lp788
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I7
sa(dp789
g16
(lp790
S'k'
asg18
S'N'
sS'.thisRepN'
p791
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p792
I1
sS'.thisN'
p793
I89
sS'.thisIndex'
p794
I3
sg15
(lp795
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I3
sa(dp796
g16
(lp797
S'd'
asg18
S'Y'
sS'.thisRepN'
p798
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p799
I2
sS'.thisN'
p800
I90
sS'.thisIndex'
p801
I1
sg15
(lp802
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp803
S'space'
p804
asg96
I1
sa(dp805
g16
(lp806
S'd'
asg18
S'Y'
sS'.thisRepN'
p807
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p808
I3
sS'.thisN'
p809
I91
sS'.thisIndex'
p810
I3
sg15
(lp811
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp812
S'space'
p813
asg96
I3
sa(dp814
g16
(lp815
S'd'
asg18
S'Y'
sS'.thisRepN'
p816
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p817
I4
sS'.thisN'
p818
I92
sS'.thisIndex'
p819
I7
sg15
(lp820
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp821
S'space'
p822
asg96
I7
sa(dp823
g16
(lp824
S'd'
asg18
S'N'
sS'.thisRepN'
p825
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p826
I5
sS'.thisN'
p827
I93
sS'.thisIndex'
p828
I0
sg15
(lp829
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I0
sa(dp830
g16
(lp831
S'k'
asg18
S'N'
sS'.thisRepN'
p832
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p833
I6
sS'.thisN'
p834
I94
sS'.thisIndex'
p835
I5
sg15
(lp836
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I5
sa(dp837
g16
(lp838
S'd'
asg18
S'Y'
sS'.thisRepN'
p839
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p840
I7
sS'.thisN'
p841
I95
sS'.thisIndex'
p842
I5
sg15
(lp843
S'k'
asg30
g31
sg17
S'N'
sg14
I2
sg19
(lp844
S'space'
p845
asg96
I5
sa(dp846
g16
(lp847
S'd'
asg18
S'N'
sS'.thisRepN'
p848
I8
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p849
I8
sS'.thisN'
p850
I96
sS'.thisIndex'
p851
I10
sg15
(lp852
S'd'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I10
sa(dp853
g16
(lp854
S'k'
asg18
S'N'
sS'.thisRepN'
p855
I8
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p856
I9
sS'.thisN'
p857
I97
sS'.thisIndex'
p858
I1
sg15
(lp859
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp860
S'k'
asg96
I1
sa(dp861
g16
(lp862
S'k'
asg18
S'N'
sS'.thisRepN'
p863
I8
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p864
I10
sS'.thisN'
p865
I98
sS'.thisIndex'
p866
I6
sg15
(lp867
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
(lp868
S'space'
p869
asg96
I6
sa(dp870
g16
(lp871
S'k'
asg18
S'N'
sg22
I42
sS'.thisN'
p872
I99
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p873
I0
sS'.thisRepN'
p874
I9
sg21
I45
sS'.thisIndex'
p875
I0
sg23
I25
sg15
(lp876
S'k'
asg30
g31
sg17
S'Y'
sg14
I2
sg19
Nsg96
I0
sa(dp877
g16
(lp878
S'd'
asg96
I6
sS'.thisRepN'
p879
I9
sg30
g31
sg32
g33
sS'.thisTrialN'
p880
I1
sS'.thisN'
p881
I100
sS'.thisIndex'
p882
I6
sg15
(lp883
S'd'
asg17
S'Y'
sg14
I3
sa(dp884
g16
(lp885
S'd'
asg96
I2
sS'.thisRepN'
p886
I9
sg30
g31
sg32
g33
sS'.thisTrialN'
p887
I2
sS'.thisN'
p888
I101
sS'.thisIndex'
p889
I2
sg15
(lp890
S'd'
asg17
S'Y'
sg14
I3
sa(dp891
g16
(lp892
S'k'
asg18
S'N'
sS'.thisRepN'
p893
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p894
I3
sS'.thisN'
p895
I102
sS'.thisIndex'
p896
I9
sg15
(lp897
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I9
sa(dp898
g16
(lp899
S'd'
asg18
S'Y'
sS'.thisRepN'
p900
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p901
I4
sS'.thisN'
p902
I103
sS'.thisIndex'
p903
I3
sg15
(lp904
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp905
S'space'
p906
asg96
I3
sa(dp907
g16
(lp908
S'd'
asg18
S'N'
sS'.thisRepN'
p909
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p910
I5
sS'.thisN'
p911
I104
sS'.thisIndex'
p912
I6
sg15
(lp913
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I6
sa(dp914
g16
(lp915
S'k'
asg18
S'N'
sS'.thisRepN'
p916
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p917
I6
sS'.thisN'
p918
I105
sS'.thisIndex'
p919
I1
sg15
(lp920
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I1
sa(dp921
g16
(lp922
S'd'
asg18
S'Y'
sS'.thisRepN'
p923
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p924
I7
sS'.thisN'
p925
I106
sS'.thisIndex'
p926
I7
sg15
(lp927
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp928
S'space'
p929
asg96
I7
sa(dp930
g16
(lp931
S'k'
asg18
S'Y'
sS'.thisRepN'
p932
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p933
I8
sS'.thisN'
p934
I107
sS'.thisIndex'
p935
I3
sg15
(lp936
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp937
S'space'
p938
asg96
I3
sa(dp939
g16
(lp940
S'd'
asg18
S'N'
sS'.thisRepN'
p941
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p942
I9
sS'.thisN'
p943
I108
sS'.thisIndex'
p944
I3
sg15
(lp945
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I3
sa(dp946
g16
(lp947
S'k'
asg18
S'Y'
sS'.thisRepN'
p948
I9
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p949
I10
sS'.thisN'
p950
I109
sS'.thisIndex'
p951
I5
sg15
(lp952
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp953
S'space'
p954
asg96
I5
sa(dp955
g16
(lp956
S'd'
asg18
S'Y'
sS'.thisRepN'
p957
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p958
I0
sS'.thisN'
p959
I110
sS'.thisIndex'
p960
I4
sg15
(lp961
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp962
S'space'
p963
asg96
I4
sa(dp964
g16
(lp965
S'k'
asg18
S'N'
sS'.thisRepN'
p966
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p967
I1
sS'.thisN'
p968
I111
sS'.thisIndex'
p969
I8
sg15
(lp970
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I8
sa(dp971
g16
(lp972
S'k'
asg18
S'Y'
sS'.thisRepN'
p973
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p974
I2
sS'.thisN'
p975
I112
sS'.thisIndex'
p976
I8
sg15
(lp977
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp978
S'space'
p979
asg96
I8
sa(dp980
g16
(lp981
S'd'
asg18
S'Y'
sS'.thisRepN'
p982
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p983
I3
sS'.thisN'
p984
I113
sS'.thisIndex'
p985
I10
sg15
(lp986
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp987
S'space'
p988
asg96
I10
sa(dp989
g16
(lp990
S'd'
asg18
S'Y'
sS'.thisRepN'
p991
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p992
I4
sS'.thisN'
p993
I114
sS'.thisIndex'
p994
I5
sg15
(lp995
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp996
S'space'
p997
asg96
I5
sa(dp998
g16
(lp999
S'd'
asg18
S'N'
sS'.thisRepN'
p1000
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1001
I5
sS'.thisN'
p1002
I115
sS'.thisIndex'
p1003
I4
sg15
(lp1004
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I4
sa(dp1005
g16
(lp1006
S'k'
asg18
S'Y'
sS'.thisRepN'
p1007
I10
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1008
I6
sS'.thisN'
p1009
I116
sS'.thisIndex'
p1010
I8
sg15
(lp1011
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I8
sa(dp1012
g16
(lp1013
S'k'
asg18
S'N'
sS'.thisRepN'
p1014
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1015
I7
sS'.thisN'
p1016
I117
sS'.thisIndex'
p1017
I1
sg15
(lp1018
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I1
sa(dp1019
g16
(lp1020
S'k'
asg18
S'Y'
sS'.thisRepN'
p1021
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1022
I8
sS'.thisN'
p1023
I118
sS'.thisIndex'
p1024
I4
sg15
(lp1025
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1026
S'space'
p1027
asg96
I4
sa(dp1028
g16
(lp1029
S'd'
asg18
S'Y'
sS'.thisRepN'
p1030
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1031
I9
sS'.thisN'
p1032
I119
sS'.thisIndex'
p1033
I9
sg15
(lp1034
S'k'
asg30
g31
sg17
S'N'
sg14
I3
sg19
(lp1035
S'space'
p1036
asg96
I9
sa(dp1037
g16
(lp1038
S'd'
asg18
S'Y'
sS'.thisRepN'
p1039
I10
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1040
I10
sS'.thisN'
p1041
I120
sS'.thisIndex'
p1042
I9
sg15
(lp1043
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1044
S'space'
p1045
asg96
I9
sa(dp1046
g16
(lp1047
S'k'
asg18
S'Y'
sS'.thisRepN'
p1048
I11
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1049
I0
sS'.thisN'
p1050
I121
sS'.thisIndex'
p1051
I2
sg15
(lp1052
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I2
sa(dp1053
g16
(lp1054
S'k'
asg18
S'N'
sS'.thisRepN'
p1055
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1056
I1
sS'.thisN'
p1057
I122
sS'.thisIndex'
p1058
I7
sg15
(lp1059
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I7
sa(dp1060
g16
(lp1061
S'k'
asg18
S'Y'
sS'.thisRepN'
p1062
I11
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1063
I2
sS'.thisN'
p1064
I123
sS'.thisIndex'
p1065
I5
sg15
(lp1066
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I5
sa(dp1067
g16
(lp1068
S'k'
asg18
S'Y'
sS'.thisRepN'
p1069
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1070
I3
sS'.thisN'
p1071
I124
sS'.thisIndex'
p1072
I2
sg15
(lp1073
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1074
S'space'
p1075
asg96
I2
sa(dp1076
g16
(lp1077
S'k'
asg18
S'N'
sS'.thisRepN'
p1078
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1079
I4
sS'.thisN'
p1080
I125
sS'.thisIndex'
p1081
I3
sg15
(lp1082
S'd'
asg30
g31
sg17
S'N'
sg14
I3
sg19
Nsg96
I3
sa(dp1083
g16
(lp1084
S'k'
asg18
S'N'
sS'.thisRepN'
p1085
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1086
I5
sS'.thisN'
p1087
I126
sS'.thisIndex'
p1088
I6
sg15
(lp1089
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I6
sa(dp1090
g16
(lp1091
S'k'
asg18
S'Y'
sS'.thisRepN'
p1092
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1093
I6
sS'.thisN'
p1094
I127
sS'.thisIndex'
p1095
I2
sg15
(lp1096
S'd'
asg30
g31
sg17
S'N'
sg14
I3
sg19
(lp1097
S'space'
p1098
asg96
I2
sa(dp1099
g16
(lp1100
S'd'
asg18
S'Y'
sS'.thisRepN'
p1101
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1102
I7
sS'.thisN'
p1103
I128
sS'.thisIndex'
p1104
I6
sg15
(lp1105
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1106
S'space'
p1107
asg96
I6
sa(dp1108
g16
(lp1109
S'd'
asg18
S'N'
sS'.thisRepN'
p1110
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1111
I8
sS'.thisN'
p1112
I129
sS'.thisIndex'
p1113
I10
sg15
(lp1114
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I10
sa(dp1115
g16
(lp1116
S'k'
asg18
S'N'
sS'.thisRepN'
p1117
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1118
I9
sS'.thisN'
p1119
I130
sS'.thisIndex'
p1120
I5
sg15
(lp1121
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I5
sa(dp1122
g16
(lp1123
S'd'
asg18
S'Y'
sS'.thisRepN'
p1124
I11
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1125
I10
sS'.thisN'
p1126
I131
sS'.thisIndex'
p1127
I2
sg15
(lp1128
S'k'
asg30
g31
sg17
S'N'
sg14
I3
sg19
(lp1129
S'space'
p1130
asg96
I2
sa(dp1131
g16
(lp1132
S'd'
asg18
S'N'
sS'.thisRepN'
p1133
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1134
I0
sS'.thisN'
p1135
I132
sS'.thisIndex'
p1136
I5
sg15
(lp1137
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I5
sa(dp1138
g16
(lp1139
S'd'
asg18
S'Y'
sS'.thisRepN'
p1140
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1141
I1
sS'.thisN'
p1142
I133
sS'.thisIndex'
p1143
I10
sg15
(lp1144
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1145
S'space'
p1146
asg96
I10
sa(dp1147
g16
(lp1148
S'k'
asg18
S'Y'
sS'.thisRepN'
p1149
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1150
I2
sS'.thisN'
p1151
I134
sS'.thisIndex'
p1152
I1
sg15
(lp1153
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1154
S'space'
p1155
asg96
I1
sa(dp1156
g16
(lp1157
S'k'
asg18
S'N'
sS'.thisRepN'
p1158
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1159
I3
sS'.thisN'
p1160
I135
sS'.thisIndex'
p1161
I9
sg15
(lp1162
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I9
sa(dp1163
g16
(lp1164
S'k'
asg18
S'N'
sS'.thisRepN'
p1165
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1166
I4
sS'.thisN'
p1167
I136
sS'.thisIndex'
p1168
I1
sg15
(lp1169
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I1
sa(dp1170
g16
(lp1171
S'k'
asg18
S'N'
sS'.thisRepN'
p1172
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1173
I5
sS'.thisN'
p1174
I137
sS'.thisIndex'
p1175
I7
sg15
(lp1176
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I7
sa(dp1177
g16
(lp1178
S'd'
asg18
S'N'
sS'.thisRepN'
p1179
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1180
I6
sS'.thisN'
p1181
I138
sS'.thisIndex'
p1182
I6
sg15
(lp1183
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I6
sa(dp1184
g16
(lp1185
S'd'
asg18
S'N'
sS'.thisRepN'
p1186
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1187
I7
sS'.thisN'
p1188
I139
sS'.thisIndex'
p1189
I0
sg15
(lp1190
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I0
sa(dp1191
g16
(lp1192
S'k'
asg18
S'N'
sS'.thisRepN'
p1193
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1194
I8
sS'.thisN'
p1195
I140
sS'.thisIndex'
p1196
I3
sg15
(lp1197
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I3
sa(dp1198
g16
(lp1199
S'k'
asg18
S'N'
sS'.thisRepN'
p1200
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1201
I9
sS'.thisN'
p1202
I141
sS'.thisIndex'
p1203
I6
sg15
(lp1204
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I6
sa(dp1205
g16
(lp1206
S'd'
asg18
S'N'
sS'.thisRepN'
p1207
I12
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1208
I10
sS'.thisN'
p1209
I142
sS'.thisIndex'
p1210
I5
sg15
(lp1211
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I5
sa(dp1212
g16
(lp1213
S'd'
asg18
S'N'
sS'.thisRepN'
p1214
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1215
I0
sS'.thisN'
p1216
I143
sS'.thisIndex'
p1217
I6
sg15
(lp1218
S'k'
asg30
g31
sg17
S'N'
sg14
I3
sg19
Nsg96
I6
sa(dp1219
g16
(lp1220
S'k'
asg18
S'N'
sS'.thisRepN'
p1221
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1222
I1
sS'.thisN'
p1223
I144
sS'.thisIndex'
p1224
I7
sg15
(lp1225
S'd'
asg30
g31
sg17
S'N'
sg14
I3
sg19
Nsg96
I7
sa(dp1226
g16
(lp1227
S'd'
asg18
S'N'
sS'.thisRepN'
p1228
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1229
I2
sS'.thisN'
p1230
I145
sS'.thisIndex'
p1231
I3
sg15
(lp1232
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I3
sa(dp1233
g16
(lp1234
S'k'
asg18
S'Y'
sS'.thisRepN'
p1235
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1236
I3
sS'.thisN'
p1237
I146
sS'.thisIndex'
p1238
I4
sg15
(lp1239
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1240
S'space'
p1241
asg96
I4
sa(dp1242
g16
(lp1243
S'k'
asg18
S'Y'
sS'.thisRepN'
p1244
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1245
I4
sS'.thisN'
p1246
I147
sS'.thisIndex'
p1247
I8
sg15
(lp1248
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
(lp1249
S'space'
p1250
asg96
I8
sa(dp1251
g16
(lp1252
S'd'
asg18
S'N'
sS'.thisRepN'
p1253
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1254
I5
sS'.thisN'
p1255
I148
sS'.thisIndex'
p1256
I4
sg15
(lp1257
S'd'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I4
sa(dp1258
g16
(lp1259
S'k'
asg18
S'N'
sg22
I45
sS'.thisN'
p1260
I149
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1261
I6
sS'.thisRepN'
p1262
I13
sg21
I44
sS'.thisIndex'
p1263
I5
sg23
I22
sg15
(lp1264
S'k'
asg30
g31
sg17
S'Y'
sg14
I3
sg19
Nsg96
I5
sa(dp1265
g16
(lp1266
S'd'
asg96
I0
sS'.thisRepN'
p1267
I13
sg30
g31
sg32
g33
sS'.thisTrialN'
p1268
I7
sS'.thisN'
p1269
I150
sS'.thisIndex'
p1270
I0
sg15
(lp1271
S'd'
asg17
S'Y'
sg14
I4
sa(dp1272
g16
(lp1273
S'd'
asg96
I1
sS'.thisRepN'
p1274
I13
sg30
g31
sg32
g33
sS'.thisTrialN'
p1275
I8
sS'.thisN'
p1276
I151
sS'.thisIndex'
p1277
I1
sg15
(lp1278
S'k'
asg17
S'N'
sg14
I4
sa(dp1279
g16
(lp1280
S'd'
asg18
S'N'
sS'.thisRepN'
p1281
I13
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1282
I9
sS'.thisN'
p1283
I152
sS'.thisIndex'
p1284
I4
sg15
(lp1285
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1286
S'space'
p1287
asg96
I4
sa(dp1288
g16
(lp1289
S'd'
asg18
S'Y'
sS'.thisRepN'
p1290
I13
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1291
I10
sS'.thisN'
p1292
I153
sS'.thisIndex'
p1293
I5
sg15
(lp1294
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1295
S'space'
p1296
asg96
I5
sa(dp1297
g16
(lp1298
S'k'
asg18
S'Y'
sS'.thisRepN'
p1299
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1300
I0
sS'.thisN'
p1301
I154
sS'.thisIndex'
p1302
I1
sg15
(lp1303
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1304
S'space'
p1305
asg96
I1
sa(dp1306
g16
(lp1307
S'd'
asg18
S'Y'
sS'.thisRepN'
p1308
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1309
I1
sS'.thisN'
p1310
I155
sS'.thisIndex'
p1311
I4
sg15
(lp1312
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1313
S'space'
p1314
asg96
I4
sa(dp1315
g16
(lp1316
S'd'
asg18
S'Y'
sS'.thisRepN'
p1317
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1318
I2
sS'.thisN'
p1319
I156
sS'.thisIndex'
p1320
I1
sg15
(lp1321
S'k'
asg30
g31
sg17
S'N'
sg14
I4
sg19
(lp1322
S'space'
p1323
asg96
I1
sa(dp1324
g16
(lp1325
S'k'
asg18
S'N'
sS'.thisRepN'
p1326
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1327
I3
sS'.thisN'
p1328
I157
sS'.thisIndex'
p1329
I9
sg15
(lp1330
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I9
sa(dp1331
g16
(lp1332
S'd'
asg18
S'N'
sS'.thisRepN'
p1333
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1334
I4
sS'.thisN'
p1335
I158
sS'.thisIndex'
p1336
I8
sg15
(lp1337
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I8
sa(dp1338
g16
(lp1339
S'd'
asg18
S'Y'
sS'.thisRepN'
p1340
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1341
I5
sS'.thisN'
p1342
I159
sS'.thisIndex'
p1343
I5
sg15
(lp1344
S'k'
asg30
g31
sg17
S'N'
sg14
I4
sg19
(lp1345
S'space'
p1346
asg96
I5
sa(dp1347
g16
(lp1348
S'd'
asg18
S'N'
sS'.thisRepN'
p1349
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1350
I6
sS'.thisN'
p1351
I160
sS'.thisIndex'
p1352
I1
sg15
(lp1353
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I1
sa(dp1354
g16
(lp1355
S'k'
asg18
S'N'
sS'.thisRepN'
p1356
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1357
I7
sS'.thisN'
p1358
I161
sS'.thisIndex'
p1359
I4
sg15
(lp1360
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I4
sa(dp1361
g16
(lp1362
S'd'
asg18
S'N'
sS'.thisRepN'
p1363
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1364
I8
sS'.thisN'
p1365
I162
sS'.thisIndex'
p1366
I10
sg15
(lp1367
S'k'
asg30
g31
sg17
S'N'
sg14
I4
sg19
Nsg96
I10
sa(dp1368
g16
(lp1369
S'd'
asg18
S'N'
sS'.thisRepN'
p1370
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1371
I9
sS'.thisN'
p1372
I163
sS'.thisIndex'
p1373
I8
sg15
(lp1374
S'k'
asg30
g31
sg17
S'N'
sg14
I4
sg19
Nsg96
I8
sa(dp1375
g16
(lp1376
S'k'
asg18
S'N'
sS'.thisRepN'
p1377
I14
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1378
I10
sS'.thisN'
p1379
I164
sS'.thisIndex'
p1380
I4
sg15
(lp1381
S'd'
asg30
g31
sg17
S'N'
sg14
I4
sg19
Nsg96
I4
sa(dp1382
g16
(lp1383
S'd'
asg18
S'Y'
sS'.thisRepN'
p1384
I15
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1385
I0
sS'.thisN'
p1386
I165
sS'.thisIndex'
p1387
I9
sg15
(lp1388
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1389
S'k'
asg96
I9
sa(dp1390
g16
(lp1391
S'k'
asg18
S'N'
sS'.thisRepN'
p1392
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1393
I1
sS'.thisN'
p1394
I166
sS'.thisIndex'
p1395
I10
sg15
(lp1396
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I10
sa(dp1397
g16
(lp1398
S'd'
asg18
S'N'
sS'.thisRepN'
p1399
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1400
I2
sS'.thisN'
p1401
I167
sS'.thisIndex'
p1402
I6
sg15
(lp1403
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I6
sa(dp1404
g16
(lp1405
S'k'
asg18
S'N'
sS'.thisRepN'
p1406
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1407
I3
sS'.thisN'
p1408
I168
sS'.thisIndex'
p1409
I6
sg15
(lp1410
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I6
sa(dp1411
g16
(lp1412
S'd'
asg18
S'Y'
sS'.thisRepN'
p1413
I15
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1414
I4
sS'.thisN'
p1415
I169
sS'.thisIndex'
p1416
I3
sg15
(lp1417
S'k'
asg30
g31
sg17
S'N'
sg14
I4
sg19
Nsg96
I3
sa(dp1418
g16
(lp1419
S'd'
asg18
S'N'
sS'.thisRepN'
p1420
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1421
I5
sS'.thisN'
p1422
I170
sS'.thisIndex'
p1423
I2
sg15
(lp1424
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I2
sa(dp1425
g16
(lp1426
S'd'
asg18
S'Y'
sS'.thisRepN'
p1427
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1428
I6
sS'.thisN'
p1429
I171
sS'.thisIndex'
p1430
I0
sg15
(lp1431
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1432
S'space'
p1433
asg96
I0
sa(dp1434
g16
(lp1435
S'k'
asg18
S'N'
sS'.thisRepN'
p1436
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1437
I7
sS'.thisN'
p1438
I172
sS'.thisIndex'
p1439
I9
sg15
(lp1440
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I9
sa(dp1441
g16
(lp1442
S'k'
asg18
S'Y'
sS'.thisRepN'
p1443
I15
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1444
I8
sS'.thisN'
p1445
I173
sS'.thisIndex'
p1446
I9
sg15
(lp1447
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I9
sa(dp1448
g16
(lp1449
S'd'
asg18
S'N'
sS'.thisRepN'
p1450
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1451
I9
sS'.thisN'
p1452
I174
sS'.thisIndex'
p1453
I2
sg15
(lp1454
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I2
sa(dp1455
g16
(lp1456
S'd'
asg18
S'Y'
sS'.thisRepN'
p1457
I15
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1458
I10
sS'.thisN'
p1459
I175
sS'.thisIndex'
p1460
I3
sg15
(lp1461
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1462
S'space'
p1463
asg96
I3
sa(dp1464
g16
(lp1465
S'd'
asg18
S'Y'
sS'.thisRepN'
p1466
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1467
I0
sS'.thisN'
p1468
I176
sS'.thisIndex'
p1469
I3
sg15
(lp1470
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1471
S'space'
p1472
asg96
I3
sa(dp1473
g16
(lp1474
S'd'
asg18
S'N'
sS'.thisRepN'
p1475
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1476
I1
sS'.thisN'
p1477
I177
sS'.thisIndex'
p1478
I9
sg15
(lp1479
S'k'
asg30
g31
sg17
S'N'
sg14
I4
sg19
Nsg96
I9
sa(dp1480
g16
(lp1481
S'd'
asg18
S'Y'
sS'.thisRepN'
p1482
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1483
I2
sS'.thisN'
p1484
I178
sS'.thisIndex'
p1485
I5
sg15
(lp1486
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1487
S'space'
p1488
asg96
I5
sa(dp1489
g16
(lp1490
S'd'
asg18
S'Y'
sS'.thisRepN'
p1491
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1492
I3
sS'.thisN'
p1493
I179
sS'.thisIndex'
p1494
I0
sg15
(lp1495
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1496
S'space'
p1497
asg96
I0
sa(dp1498
g16
(lp1499
S'k'
asg18
S'N'
sS'.thisRepN'
p1500
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1501
I4
sS'.thisN'
p1502
I180
sS'.thisIndex'
p1503
I10
sg15
(lp1504
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I10
sa(dp1505
g16
(lp1506
S'k'
asg18
S'N'
sS'.thisRepN'
p1507
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1508
I5
sS'.thisN'
p1509
I181
sS'.thisIndex'
p1510
I1
sg15
(lp1511
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I1
sa(dp1512
g16
(lp1513
S'k'
asg18
S'N'
sS'.thisRepN'
p1514
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1515
I6
sS'.thisN'
p1516
I182
sS'.thisIndex'
p1517
I1
sg15
(lp1518
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I1
sa(dp1519
g16
(lp1520
S'd'
asg18
S'N'
sS'.thisRepN'
p1521
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1522
I7
sS'.thisN'
p1523
I183
sS'.thisIndex'
p1524
I9
sg15
(lp1525
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I9
sa(dp1526
g16
(lp1527
S'd'
asg18
S'Y'
sS'.thisRepN'
p1528
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1529
I8
sS'.thisN'
p1530
I184
sS'.thisIndex'
p1531
I5
sg15
(lp1532
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1533
S'space'
p1534
asg96
I5
sa(dp1535
g16
(lp1536
S'd'
asg18
S'N'
sS'.thisRepN'
p1537
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1538
I9
sS'.thisN'
p1539
I185
sS'.thisIndex'
p1540
I0
sg15
(lp1541
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I0
sa(dp1542
g16
(lp1543
S'k'
asg18
S'Y'
sS'.thisRepN'
p1544
I16
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1545
I10
sS'.thisN'
p1546
I186
sS'.thisIndex'
p1547
I5
sg15
(lp1548
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1549
S'space'
p1550
asg96
I5
sa(dp1551
g16
(lp1552
S'd'
asg18
S'N'
sS'.thisRepN'
p1553
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1554
I0
sS'.thisN'
p1555
I187
sS'.thisIndex'
p1556
I1
sg15
(lp1557
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I1
sa(dp1558
g16
(lp1559
S'k'
asg18
S'Y'
sS'.thisRepN'
p1560
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1561
I1
sS'.thisN'
p1562
I188
sS'.thisIndex'
p1563
I2
sg15
(lp1564
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1565
S'space'
p1566
asg96
I2
sa(dp1567
g16
(lp1568
S'k'
asg18
S'Y'
sS'.thisRepN'
p1569
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1570
I2
sS'.thisN'
p1571
I189
sS'.thisIndex'
p1572
I7
sg15
(lp1573
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1574
S'space'
p1575
asg96
I7
sa(dp1576
g16
(lp1577
S'k'
asg18
S'Y'
sS'.thisRepN'
p1578
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1579
I3
sS'.thisN'
p1580
I190
sS'.thisIndex'
p1581
I2
sg15
(lp1582
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1583
S'space'
p1584
asg96
I2
sa(dp1585
g16
(lp1586
S'd'
asg18
S'N'
sS'.thisRepN'
p1587
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1588
I4
sS'.thisN'
p1589
I191
sS'.thisIndex'
p1590
I6
sg15
(lp1591
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I6
sa(dp1592
g16
(lp1593
S'd'
asg18
S'Y'
sS'.thisRepN'
p1594
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1595
I5
sS'.thisN'
p1596
I192
sS'.thisIndex'
p1597
I5
sg15
(lp1598
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1599
S'space'
p1600
asg96
I5
sa(dp1601
g16
(lp1602
S'd'
asg18
S'N'
sS'.thisRepN'
p1603
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1604
I6
sS'.thisN'
p1605
I193
sS'.thisIndex'
p1606
I1
sg15
(lp1607
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I1
sa(dp1608
g16
(lp1609
S'd'
asg18
S'N'
sS'.thisRepN'
p1610
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1611
I7
sS'.thisN'
p1612
I194
sS'.thisIndex'
p1613
I7
sg15
(lp1614
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I7
sa(dp1615
g16
(lp1616
S'd'
asg18
S'N'
sS'.thisRepN'
p1617
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1618
I8
sS'.thisN'
p1619
I195
sS'.thisIndex'
p1620
I9
sg15
(lp1621
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I9
sa(dp1622
g16
(lp1623
S'k'
asg18
S'N'
sS'.thisRepN'
p1624
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1625
I9
sS'.thisN'
p1626
I196
sS'.thisIndex'
p1627
I2
sg15
(lp1628
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I2
sa(dp1629
g16
(lp1630
S'k'
asg18
S'Y'
sS'.thisRepN'
p1631
I17
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1632
I10
sS'.thisN'
p1633
I197
sS'.thisIndex'
p1634
I7
sg15
(lp1635
S'k'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1636
S'space'
p1637
asg96
I7
sa(dp1638
g16
(lp1639
S'd'
asg18
S'N'
sS'.thisRepN'
p1640
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1641
I0
sS'.thisN'
p1642
I198
sS'.thisIndex'
p1643
I4
sg15
(lp1644
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
Nsg96
I4
sa(dp1645
g16
(lp1646
S'd'
asg18
S'Y'
sg22
I44
sS'.thisN'
p1647
I199
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1648
I1
sS'.thisRepN'
p1649
I18
sg21
I42
sS'.thisIndex'
p1650
I2
sg23
I21
sg15
(lp1651
S'd'
asg30
g31
sg17
S'Y'
sg14
I4
sg19
(lp1652
S'space'
p1653
asg96
I2
sa(dp1654
g16
(lp1655
S'd'
asg96
I3
sS'.thisRepN'
p1656
I18
sg30
g31
sg32
g33
sS'.thisTrialN'
p1657
I2
sS'.thisN'
p1658
I200
sS'.thisIndex'
p1659
I3
sg15
(lp1660
S'k'
asg17
S'N'
sg14
I5
sa(dp1661
g16
(lp1662
S'd'
asg96
I10
sS'.thisRepN'
p1663
I18
sg30
g31
sg32
g33
sS'.thisTrialN'
p1664
I3
sS'.thisN'
p1665
I201
sS'.thisIndex'
p1666
I10
sg15
(lp1667
S'd'
asg17
S'Y'
sg14
I5
sa(dp1668
g16
(lp1669
S'd'
asg18
S'N'
sS'.thisRepN'
p1670
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1671
I4
sS'.thisN'
p1672
I202
sS'.thisIndex'
p1673
I7
sg15
(lp1674
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I7
sa(dp1675
g16
(lp1676
S'd'
asg18
S'N'
sS'.thisRepN'
p1677
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1678
I5
sS'.thisN'
p1679
I203
sS'.thisIndex'
p1680
I8
sg15
(lp1681
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I8
sa(dp1682
g16
(lp1683
S'k'
asg18
S'Y'
sS'.thisRepN'
p1684
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1685
I6
sS'.thisN'
p1686
I204
sS'.thisIndex'
p1687
I1
sg15
(lp1688
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1689
S'space'
p1690
asg96
I1
sa(dp1691
g16
(lp1692
S'k'
asg18
S'Y'
sS'.thisRepN'
p1693
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1694
I7
sS'.thisN'
p1695
I205
sS'.thisIndex'
p1696
I8
sg15
(lp1697
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1698
S'space'
p1699
asg96
I8
sa(dp1700
g16
(lp1701
S'd'
asg18
S'Y'
sS'.thisRepN'
p1702
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1703
I8
sS'.thisN'
p1704
I206
sS'.thisIndex'
p1705
I3
sg15
(lp1706
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
(lp1707
S'space'
p1708
asg96
I3
sa(dp1709
g16
(lp1710
S'd'
asg18
S'Y'
sS'.thisRepN'
p1711
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1712
I9
sS'.thisN'
p1713
I207
sS'.thisIndex'
p1714
I0
sg15
(lp1715
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1716
S'space'
p1717
asg96
I0
sa(dp1718
g16
(lp1719
S'd'
asg18
S'Y'
sS'.thisRepN'
p1720
I18
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1721
I10
sS'.thisN'
p1722
I208
sS'.thisIndex'
p1723
I0
sg15
(lp1724
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1725
S'space'
p1726
asg96
I0
sa(dp1727
g16
(lp1728
S'k'
asg18
S'Y'
sS'.thisRepN'
p1729
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1730
I0
sS'.thisN'
p1731
I209
sS'.thisIndex'
p1732
I7
sg15
(lp1733
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1734
S'space'
p1735
asg96
I7
sa(dp1736
g16
(lp1737
S'd'
asg18
S'Y'
sS'.thisRepN'
p1738
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1739
I1
sS'.thisN'
p1740
I210
sS'.thisIndex'
p1741
I1
sg15
(lp1742
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1743
S'space'
p1744
asg96
I1
sa(dp1745
g16
(lp1746
S'd'
asg18
S'N'
sS'.thisRepN'
p1747
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1748
I2
sS'.thisN'
p1749
I211
sS'.thisIndex'
p1750
I7
sg15
(lp1751
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
Nsg96
I7
sa(dp1752
g16
(lp1753
S'k'
asg18
S'Y'
sS'.thisRepN'
p1754
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1755
I3
sS'.thisN'
p1756
I212
sS'.thisIndex'
p1757
I5
sg15
(lp1758
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1759
S'space'
p1760
asg96
I5
sa(dp1761
g16
(lp1762
S'd'
asg18
S'N'
sS'.thisRepN'
p1763
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1764
I4
sS'.thisN'
p1765
I213
sS'.thisIndex'
p1766
I1
sg15
(lp1767
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
Nsg96
I1
sa(dp1768
g16
(lp1769
S'k'
asg18
S'N'
sS'.thisRepN'
p1770
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1771
I5
sS'.thisN'
p1772
I214
sS'.thisIndex'
p1773
I9
sg15
(lp1774
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I9
sa(dp1775
g16
(lp1776
S'k'
asg18
S'N'
sS'.thisRepN'
p1777
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1778
I6
sS'.thisN'
p1779
I215
sS'.thisIndex'
p1780
I6
sg15
(lp1781
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I6
sa(dp1782
g16
(lp1783
S'k'
asg18
S'Y'
sS'.thisRepN'
p1784
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1785
I7
sS'.thisN'
p1786
I216
sS'.thisIndex'
p1787
I6
sg15
(lp1788
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1789
S'space'
p1790
asg96
I6
sa(dp1791
g16
(lp1792
S'k'
asg18
S'Y'
sS'.thisRepN'
p1793
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1794
I8
sS'.thisN'
p1795
I217
sS'.thisIndex'
p1796
I1
sg15
(lp1797
S'd'
asg30
g31
sg17
S'N'
sg14
I5
sg19
(lp1798
S'space'
p1799
asg96
I1
sa(dp1800
g16
(lp1801
S'k'
asg18
S'Y'
sS'.thisRepN'
p1802
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1803
I9
sS'.thisN'
p1804
I218
sS'.thisIndex'
p1805
I10
sg15
(lp1806
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1807
S'space'
p1808
asg96
I10
sa(dp1809
g16
(lp1810
S'd'
asg18
S'N'
sS'.thisRepN'
p1811
I19
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1812
I10
sS'.thisN'
p1813
I219
sS'.thisIndex'
p1814
I3
sg15
(lp1815
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I3
sa(dp1816
g16
(lp1817
S'k'
asg18
S'N'
sS'.thisRepN'
p1818
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1819
I0
sS'.thisN'
p1820
I220
sS'.thisIndex'
p1821
I4
sg15
(lp1822
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I4
sa(dp1823
g16
(lp1824
S'd'
asg18
S'N'
sS'.thisRepN'
p1825
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1826
I1
sS'.thisN'
p1827
I221
sS'.thisIndex'
p1828
I6
sg15
(lp1829
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I6
sa(dp1830
g16
(lp1831
S'k'
asg18
S'N'
sS'.thisRepN'
p1832
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1833
I2
sS'.thisN'
p1834
I222
sS'.thisIndex'
p1835
I7
sg15
(lp1836
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I7
sa(dp1837
g16
(lp1838
S'k'
asg18
S'N'
sS'.thisRepN'
p1839
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1840
I3
sS'.thisN'
p1841
I223
sS'.thisIndex'
p1842
I1
sg15
(lp1843
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I1
sa(dp1844
g16
(lp1845
S'k'
asg18
S'Y'
sS'.thisRepN'
p1846
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1847
I4
sS'.thisN'
p1848
I224
sS'.thisIndex'
p1849
I10
sg15
(lp1850
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1851
S'space'
p1852
asg96
I10
sa(dp1853
g16
(lp1854
S'k'
asg18
S'N'
sS'.thisRepN'
p1855
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1856
I5
sS'.thisN'
p1857
I225
sS'.thisIndex'
p1858
I3
sg15
(lp1859
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I3
sa(dp1860
g16
(lp1861
S'd'
asg18
S'N'
sS'.thisRepN'
p1862
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1863
I6
sS'.thisN'
p1864
I226
sS'.thisIndex'
p1865
I2
sg15
(lp1866
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I2
sa(dp1867
g16
(lp1868
S'k'
asg18
S'Y'
sS'.thisRepN'
p1869
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1870
I7
sS'.thisN'
p1871
I227
sS'.thisIndex'
p1872
I8
sg15
(lp1873
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1874
S'space'
p1875
asg96
I8
sa(dp1876
g16
(lp1877
S'k'
asg18
S'Y'
sS'.thisRepN'
p1878
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1879
I8
sS'.thisN'
p1880
I228
sS'.thisIndex'
p1881
I0
sg15
(lp1882
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1883
S'space'
p1884
asg96
I0
sa(dp1885
g16
(lp1886
S'k'
asg18
S'N'
sS'.thisRepN'
p1887
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1888
I9
sS'.thisN'
p1889
I229
sS'.thisIndex'
p1890
I9
sg15
(lp1891
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I9
sa(dp1892
g16
(lp1893
S'k'
asg18
S'N'
sS'.thisRepN'
p1894
I20
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1895
I10
sS'.thisN'
p1896
I230
sS'.thisIndex'
p1897
I2
sg15
(lp1898
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I2
sa(dp1899
g16
(lp1900
S'k'
asg18
S'Y'
sS'.thisRepN'
p1901
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1902
I0
sS'.thisN'
p1903
I231
sS'.thisIndex'
p1904
I2
sg15
(lp1905
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1906
S'space'
p1907
asg96
I2
sa(dp1908
g16
(lp1909
S'd'
asg18
S'Y'
sS'.thisRepN'
p1910
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1911
I1
sS'.thisN'
p1912
I232
sS'.thisIndex'
p1913
I5
sg15
(lp1914
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1915
S'space'
p1916
asg96
I5
sa(dp1917
g16
(lp1918
S'd'
asg18
S'N'
sS'.thisRepN'
p1919
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1920
I2
sS'.thisN'
p1921
I233
sS'.thisIndex'
p1922
I1
sg15
(lp1923
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
Nsg96
I1
sa(dp1924
g16
(lp1925
S'k'
asg18
S'Y'
sS'.thisRepN'
p1926
I21
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p1927
I3
sS'.thisN'
p1928
I234
sS'.thisIndex'
p1929
I6
sg15
(lp1930
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1931
S'd'
asg96
I6
sa(dp1932
g16
(lp1933
S'k'
asg18
S'N'
sS'.thisRepN'
p1934
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1935
I4
sS'.thisN'
p1936
I235
sS'.thisIndex'
p1937
I8
sg15
(lp1938
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I8
sa(dp1939
g16
(lp1940
S'k'
asg18
S'N'
sS'.thisRepN'
p1941
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1942
I5
sS'.thisN'
p1943
I236
sS'.thisIndex'
p1944
I3
sg15
(lp1945
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I3
sa(dp1946
g16
(lp1947
S'd'
asg18
S'Y'
sS'.thisRepN'
p1948
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1949
I6
sS'.thisN'
p1950
I237
sS'.thisIndex'
p1951
I1
sg15
(lp1952
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1953
S'space'
p1954
asg96
I1
sa(dp1955
g16
(lp1956
S'd'
asg18
S'Y'
sS'.thisRepN'
p1957
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1958
I7
sS'.thisN'
p1959
I238
sS'.thisIndex'
p1960
I1
sg15
(lp1961
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1962
S'space'
p1963
asg96
I1
sa(dp1964
g16
(lp1965
S'd'
asg18
S'Y'
sS'.thisRepN'
p1966
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1967
I8
sS'.thisN'
p1968
I239
sS'.thisIndex'
p1969
I0
sg15
(lp1970
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1971
S'space'
p1972
asg96
I0
sa(dp1973
g16
(lp1974
S'd'
asg18
S'Y'
sS'.thisRepN'
p1975
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1976
I9
sS'.thisN'
p1977
I240
sS'.thisIndex'
p1978
I10
sg15
(lp1979
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1980
S'space'
p1981
asg96
I10
sa(dp1982
g16
(lp1983
S'd'
asg18
S'N'
sS'.thisRepN'
p1984
I21
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1985
I10
sS'.thisN'
p1986
I241
sS'.thisIndex'
p1987
I3
sg15
(lp1988
S'k'
asg30
g31
sg17
S'N'
sg14
I5
sg19
Nsg96
I3
sa(dp1989
g16
(lp1990
S'd'
asg18
S'Y'
sS'.thisRepN'
p1991
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p1992
I0
sS'.thisN'
p1993
I242
sS'.thisIndex'
p1994
I10
sg15
(lp1995
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp1996
S'space'
p1997
asg96
I10
sa(dp1998
g16
(lp1999
S'd'
asg18
S'Y'
sS'.thisRepN'
p2000
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2001
I1
sS'.thisN'
p2002
I243
sS'.thisIndex'
p2003
I3
sg15
(lp2004
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp2005
S'space'
p2006
asg96
I3
sa(dp2007
g16
(lp2008
S'k'
asg18
S'N'
sS'.thisRepN'
p2009
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2010
I2
sS'.thisN'
p2011
I244
sS'.thisIndex'
p2012
I4
sg15
(lp2013
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I4
sa(dp2014
g16
(lp2015
S'k'
asg18
S'N'
sS'.thisRepN'
p2016
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2017
I3
sS'.thisN'
p2018
I245
sS'.thisIndex'
p2019
I8
sg15
(lp2020
S'd'
asg30
g31
sg17
S'N'
sg14
I5
sg19
Nsg96
I8
sa(dp2021
g16
(lp2022
S'k'
asg18
S'Y'
sS'.thisRepN'
p2023
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2024
I4
sS'.thisN'
p2025
I246
sS'.thisIndex'
p2026
I3
sg15
(lp2027
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
(lp2028
S'space'
p2029
asg96
I3
sa(dp2030
g16
(lp2031
S'd'
asg18
S'N'
sS'.thisRepN'
p2032
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2033
I5
sS'.thisN'
p2034
I247
sS'.thisIndex'
p2035
I4
sg15
(lp2036
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I4
sa(dp2037
g16
(lp2038
S'k'
asg18
S'N'
sS'.thisRepN'
p2039
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2040
I6
sS'.thisN'
p2041
I248
sS'.thisIndex'
p2042
I5
sg15
(lp2043
S'k'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I5
sa(dp2044
g16
(lp2045
S'd'
asg18
S'N'
sg22
I47
sS'.thisN'
p2046
I249
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2047
I7
sS'.thisRepN'
p2048
I22
sg21
I42
sS'.thisIndex'
p2049
I8
sg23
I24
sg15
(lp2050
S'd'
asg30
g31
sg17
S'Y'
sg14
I5
sg19
Nsg96
I8
sa(dp2051
g16
(lp2052
S'k'
asg96
I9
sS'.thisRepN'
p2053
I22
sg30
g31
sg32
g33
sS'.thisTrialN'
p2054
I8
sS'.thisN'
p2055
I250
sS'.thisIndex'
p2056
I9
sg15
(lp2057
S'k'
asg17
S'Y'
sg14
I6
sa(dp2058
g16
(lp2059
S'd'
asg96
I9
sS'.thisRepN'
p2060
I22
sg30
g31
sg32
g33
sS'.thisTrialN'
p2061
I9
sS'.thisN'
p2062
I251
sS'.thisIndex'
p2063
I9
sg15
(lp2064
S'd'
asg17
S'Y'
sg14
I6
sa(dp2065
g16
(lp2066
S'd'
asg18
S'N'
sS'.thisRepN'
p2067
I22
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2068
I10
sS'.thisN'
p2069
I252
sS'.thisIndex'
p2070
I10
sg15
(lp2071
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I10
sa(dp2072
g16
(lp2073
S'k'
asg18
S'Y'
sS'.thisRepN'
p2074
I23
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2075
I0
sS'.thisN'
p2076
I253
sS'.thisIndex'
p2077
I3
sg15
(lp2078
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I3
sa(dp2079
g16
(lp2080
S'k'
asg18
S'N'
sS'.thisRepN'
p2081
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2082
I1
sS'.thisN'
p2083
I254
sS'.thisIndex'
p2084
I0
sg15
(lp2085
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I0
sa(dp2086
g16
(lp2087
S'd'
asg18
S'N'
sS'.thisRepN'
p2088
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2089
I2
sS'.thisN'
p2090
I255
sS'.thisIndex'
p2091
I1
sg15
(lp2092
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I1
sa(dp2093
g16
(lp2094
S'k'
asg18
S'Y'
sS'.thisRepN'
p2095
I23
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2096
I3
sS'.thisN'
p2097
I256
sS'.thisIndex'
p2098
I7
sg15
(lp2099
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I7
sa(dp2100
g16
(lp2101
S'k'
asg18
S'Y'
sS'.thisRepN'
p2102
I23
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2103
I4
sS'.thisN'
p2104
I257
sS'.thisIndex'
p2105
I6
sg15
(lp2106
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I6
sa(dp2107
g16
(lp2108
S'd'
asg18
S'Y'
sS'.thisRepN'
p2109
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2110
I5
sS'.thisN'
p2111
I258
sS'.thisIndex'
p2112
I2
sg15
(lp2113
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2114
S'space'
p2115
asg96
I2
sa(dp2116
g16
(lp2117
S'k'
asg18
S'Y'
sS'.thisRepN'
p2118
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2119
I6
sS'.thisN'
p2120
I259
sS'.thisIndex'
p2121
I4
sg15
(lp2122
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2123
S'space'
p2124
asg96
I4
sa(dp2125
g16
(lp2126
S'k'
asg18
S'Y'
sS'.thisRepN'
p2127
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2128
I7
sS'.thisN'
p2129
I260
sS'.thisIndex'
p2130
I7
sg15
(lp2131
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2132
S'space'
p2133
asg96
I7
sa(dp2134
g16
(lp2135
S'k'
asg18
S'N'
sS'.thisRepN'
p2136
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2137
I8
sS'.thisN'
p2138
I261
sS'.thisIndex'
p2139
I6
sg15
(lp2140
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I6
sa(dp2141
g16
(lp2142
S'd'
asg18
S'Y'
sS'.thisRepN'
p2143
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2144
I9
sS'.thisN'
p2145
I262
sS'.thisIndex'
p2146
I0
sg15
(lp2147
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2148
S'space'
p2149
asg96
I0
sa(dp2150
g16
(lp2151
S'k'
asg18
S'N'
sS'.thisRepN'
p2152
I23
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2153
I10
sS'.thisN'
p2154
I263
sS'.thisIndex'
p2155
I4
sg15
(lp2156
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I4
sa(dp2157
g16
(lp2158
S'k'
asg18
S'N'
sS'.thisRepN'
p2159
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2160
I0
sS'.thisN'
p2161
I264
sS'.thisIndex'
p2162
I4
sg15
(lp2163
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I4
sa(dp2164
g16
(lp2165
S'k'
asg18
S'Y'
sS'.thisRepN'
p2166
I24
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2167
I1
sS'.thisN'
p2168
I265
sS'.thisIndex'
p2169
I7
sg15
(lp2170
S'd'
asg30
g31
sg17
S'N'
sg14
I6
sg19
(lp2171
S'k'
asg96
I7
sa(dp2172
g16
(lp2173
S'k'
asg18
S'Y'
sS'.thisRepN'
p2174
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2175
I2
sS'.thisN'
p2176
I266
sS'.thisIndex'
p2177
I3
sg15
(lp2178
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2179
S'space'
p2180
asg96
I3
sa(dp2181
g16
(lp2182
S'k'
asg18
S'N'
sS'.thisRepN'
p2183
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2184
I3
sS'.thisN'
p2185
I267
sS'.thisIndex'
p2186
I6
sg15
(lp2187
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I6
sa(dp2188
g16
(lp2189
S'k'
asg18
S'N'
sS'.thisRepN'
p2190
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2191
I4
sS'.thisN'
p2192
I268
sS'.thisIndex'
p2193
I10
sg15
(lp2194
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I10
sa(dp2195
g16
(lp2196
S'k'
asg18
S'N'
sS'.thisRepN'
p2197
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2198
I5
sS'.thisN'
p2199
I269
sS'.thisIndex'
p2200
I3
sg15
(lp2201
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I3
sa(dp2202
g16
(lp2203
S'd'
asg18
S'Y'
sS'.thisRepN'
p2204
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2205
I6
sS'.thisN'
p2206
I270
sS'.thisIndex'
p2207
I8
sg15
(lp2208
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2209
S'space'
p2210
asg96
I8
sa(dp2211
g16
(lp2212
S'd'
asg18
S'Y'
sS'.thisRepN'
p2213
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2214
I7
sS'.thisN'
p2215
I271
sS'.thisIndex'
p2216
I5
sg15
(lp2217
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2218
S'space'
p2219
asg96
I5
sa(dp2220
g16
(lp2221
S'd'
asg18
S'Y'
sS'.thisRepN'
p2222
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2223
I8
sS'.thisN'
p2224
I272
sS'.thisIndex'
p2225
I10
sg15
(lp2226
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2227
S'space'
p2228
asg96
I10
sa(dp2229
g16
(lp2230
S'k'
asg18
S'N'
sS'.thisRepN'
p2231
I24
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2232
I9
sS'.thisN'
p2233
I273
sS'.thisIndex'
p2234
I9
sg15
(lp2235
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I9
sa(dp2236
g16
(lp2237
S'k'
asg18
S'Y'
sS'.thisRepN'
p2238
I24
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2239
I10
sS'.thisN'
p2240
I274
sS'.thisIndex'
p2241
I2
sg15
(lp2242
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I2
sa(dp2243
g16
(lp2244
S'd'
asg18
S'N'
sS'.thisRepN'
p2245
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2246
I0
sS'.thisN'
p2247
I275
sS'.thisIndex'
p2248
I8
sg15
(lp2249
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I8
sa(dp2250
g16
(lp2251
S'd'
asg18
S'Y'
sS'.thisRepN'
p2252
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2253
I1
sS'.thisN'
p2254
I276
sS'.thisIndex'
p2255
I8
sg15
(lp2256
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2257
S'space'
p2258
asg96
I8
sa(dp2259
g16
(lp2260
S'k'
asg18
S'Y'
sS'.thisRepN'
p2261
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2262
I2
sS'.thisN'
p2263
I277
sS'.thisIndex'
p2264
I3
sg15
(lp2265
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2266
S'space'
p2267
asg96
I3
sa(dp2268
g16
(lp2269
S'd'
asg18
S'N'
sS'.thisRepN'
p2270
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2271
I3
sS'.thisN'
p2272
I278
sS'.thisIndex'
p2273
I8
sg15
(lp2274
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I8
sa(dp2275
g16
(lp2276
S'd'
asg18
S'N'
sS'.thisRepN'
p2277
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2278
I4
sS'.thisN'
p2279
I279
sS'.thisIndex'
p2280
I1
sg15
(lp2281
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I1
sa(dp2282
g16
(lp2283
S'd'
asg18
S'N'
sS'.thisRepN'
p2284
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2285
I5
sS'.thisN'
p2286
I280
sS'.thisIndex'
p2287
I4
sg15
(lp2288
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I4
sa(dp2289
g16
(lp2290
S'd'
asg18
S'N'
sS'.thisRepN'
p2291
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2292
I6
sS'.thisN'
p2293
I281
sS'.thisIndex'
p2294
I10
sg15
(lp2295
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I10
sa(dp2296
g16
(lp2297
S'd'
asg18
S'Y'
sS'.thisRepN'
p2298
I25
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2299
I7
sS'.thisN'
p2300
I282
sS'.thisIndex'
p2301
I6
sg15
(lp2302
S'k'
asg30
g31
sg17
S'N'
sg14
I6
sg19
Nsg96
I6
sa(dp2303
g16
(lp2304
S'd'
asg18
S'N'
sS'.thisRepN'
p2305
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2306
I8
sS'.thisN'
p2307
I283
sS'.thisIndex'
p2308
I1
sg15
(lp2309
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I1
sa(dp2310
g16
(lp2311
S'd'
asg18
S'N'
sS'.thisRepN'
p2312
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2313
I9
sS'.thisN'
p2314
I284
sS'.thisIndex'
p2315
I0
sg15
(lp2316
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I0
sa(dp2317
g16
(lp2318
S'k'
asg18
S'N'
sS'.thisRepN'
p2319
I25
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2320
I10
sS'.thisN'
p2321
I285
sS'.thisIndex'
p2322
I8
sg15
(lp2323
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I8
sa(dp2324
g16
(lp2325
S'k'
asg18
S'Y'
sS'.thisRepN'
p2326
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2327
I0
sS'.thisN'
p2328
I286
sS'.thisIndex'
p2329
I0
sg15
(lp2330
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2331
S'space'
p2332
asg96
I0
sa(dp2333
g16
(lp2334
S'k'
asg18
S'N'
sS'.thisRepN'
p2335
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2336
I1
sS'.thisN'
p2337
I287
sS'.thisIndex'
p2338
I8
sg15
(lp2339
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I8
sa(dp2340
g16
(lp2341
S'd'
asg18
S'Y'
sS'.thisRepN'
p2342
I26
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2343
I2
sS'.thisN'
p2344
I288
sS'.thisIndex'
p2345
I10
sg15
(lp2346
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2347
S'k'
asg96
I10
sa(dp2348
g16
(lp2349
S'd'
asg18
S'N'
sS'.thisRepN'
p2350
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2351
I3
sS'.thisN'
p2352
I289
sS'.thisIndex'
p2353
I6
sg15
(lp2354
S'k'
asg30
g31
sg17
S'N'
sg14
I6
sg19
Nsg96
I6
sa(dp2355
g16
(lp2356
S'd'
asg18
S'Y'
sS'.thisRepN'
p2357
I26
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2358
I4
sS'.thisN'
p2359
I290
sS'.thisIndex'
p2360
I10
sg15
(lp2361
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I10
sa(dp2362
g18
S'N'
sS'.thisRepN'
p2363
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2364
I5
sS'.thisN'
p2365
I291
sS'.thisIndex'
p2366
I9
sg15
Nsg30
g31
sg17
S'Timed out'
p2367
sg14
I6
sg19
Nsg96
I9
sa(dp2368
g16
(lp2369
S'k'
asg18
S'Y'
sS'.thisRepN'
p2370
I26
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2371
I6
sS'.thisN'
p2372
I292
sS'.thisIndex'
p2373
I0
sg15
(lp2374
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I0
sa(dp2375
g16
(lp2376
S'k'
asg18
S'N'
sS'.thisRepN'
p2377
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2378
I7
sS'.thisN'
p2379
I293
sS'.thisIndex'
p2380
I6
sg15
(lp2381
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I6
sa(dp2382
g16
(lp2383
S'k'
asg18
S'N'
sS'.thisRepN'
p2384
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2385
I8
sS'.thisN'
p2386
I294
sS'.thisIndex'
p2387
I9
sg15
(lp2388
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I9
sa(dp2389
g16
(lp2390
S'd'
asg18
S'N'
sS'.thisRepN'
p2391
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2392
I9
sS'.thisN'
p2393
I295
sS'.thisIndex'
p2394
I8
sg15
(lp2395
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I8
sa(dp2396
g16
(lp2397
S'd'
asg18
S'N'
sS'.thisRepN'
p2398
I26
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2399
I10
sS'.thisN'
p2400
I296
sS'.thisIndex'
p2401
I9
sg15
(lp2402
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I9
sa(dp2403
g16
(lp2404
S'k'
asg18
S'Y'
sS'.thisRepN'
p2405
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2406
I0
sS'.thisN'
p2407
I297
sS'.thisIndex'
p2408
I2
sg15
(lp2409
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2410
S'space'
p2411
asg96
I2
sa(dp2412
g16
(lp2413
S'k'
asg18
S'Y'
sS'.thisRepN'
p2414
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2415
I1
sS'.thisN'
p2416
I298
sS'.thisIndex'
p2417
I7
sg15
(lp2418
S'k'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
(lp2419
S'space'
p2420
asg96
I7
sa(dp2421
g16
(lp2422
S'd'
asg18
S'N'
sg22
I39
sS'.thisN'
p2423
I299
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2424
I2
sS'.thisRepN'
p2425
I27
sg21
I46
sS'.thisIndex'
p2426
I9
sg23
I22
sg15
(lp2427
S'd'
asg30
g31
sg17
S'Y'
sg14
I6
sg19
Nsg96
I9
sa(dp2428
g16
(lp2429
S'd'
asg96
I10
sS'.thisRepN'
p2430
I27
sg30
g31
sg32
g33
sS'.thisTrialN'
p2431
I3
sS'.thisN'
p2432
I300
sS'.thisIndex'
p2433
I10
sg15
(lp2434
S'd'
asg17
S'Y'
sg14
I7
sa(dp2435
g16
(lp2436
S'k'
asg96
I9
sS'.thisRepN'
p2437
I27
sg30
g31
sg32
g33
sS'.thisTrialN'
p2438
I4
sS'.thisN'
p2439
I301
sS'.thisIndex'
p2440
I9
sg15
(lp2441
S'k'
asg17
S'Y'
sg14
I7
sa(dp2442
g16
(lp2443
S'k'
asg18
S'N'
sS'.thisRepN'
p2444
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2445
I5
sS'.thisN'
p2446
I302
sS'.thisIndex'
p2447
I3
sg15
(lp2448
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I3
sa(dp2449
g16
(lp2450
S'd'
asg18
S'Y'
sS'.thisRepN'
p2451
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2452
I6
sS'.thisN'
p2453
I303
sS'.thisIndex'
p2454
I4
sg15
(lp2455
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2456
S'space'
p2457
asg96
I4
sa(dp2458
g16
(lp2459
S'd'
asg18
S'N'
sS'.thisRepN'
p2460
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2461
I7
sS'.thisN'
p2462
I304
sS'.thisIndex'
p2463
I3
sg15
(lp2464
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I3
sa(dp2465
g16
(lp2466
S'd'
asg18
S'Y'
sS'.thisRepN'
p2467
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2468
I8
sS'.thisN'
p2469
I305
sS'.thisIndex'
p2470
I0
sg15
(lp2471
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2472
S'space'
p2473
asg96
I0
sa(dp2474
g16
(lp2475
S'd'
asg18
S'N'
sS'.thisRepN'
p2476
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2477
I9
sS'.thisN'
p2478
I306
sS'.thisIndex'
p2479
I2
sg15
(lp2480
S'k'
asg30
g31
sg17
S'N'
sg14
I7
sg19
Nsg96
I2
sa(dp2481
g16
(lp2482
S'd'
asg18
S'N'
sS'.thisRepN'
p2483
I27
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2484
I10
sS'.thisN'
p2485
I307
sS'.thisIndex'
p2486
I5
sg15
(lp2487
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I5
sa(dp2488
g16
(lp2489
S'k'
asg18
S'N'
sS'.thisRepN'
p2490
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2491
I0
sS'.thisN'
p2492
I308
sS'.thisIndex'
p2493
I10
sg15
(lp2494
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I10
sa(dp2495
g16
(lp2496
S'k'
asg18
S'N'
sS'.thisRepN'
p2497
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2498
I1
sS'.thisN'
p2499
I309
sS'.thisIndex'
p2500
I8
sg15
(lp2501
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I8
sa(dp2502
g16
(lp2503
S'k'
asg18
S'Y'
sS'.thisRepN'
p2504
I28
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2505
I2
sS'.thisN'
p2506
I310
sS'.thisIndex'
p2507
I3
sg15
(lp2508
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I3
sa(dp2509
g16
(lp2510
S'd'
asg18
S'Y'
sS'.thisRepN'
p2511
I28
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2512
I3
sS'.thisN'
p2513
I311
sS'.thisIndex'
p2514
I5
sg15
(lp2515
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2516
S'd'
asg96
I5
sa(dp2517
g16
(lp2518
S'k'
asg18
S'Y'
sS'.thisRepN'
p2519
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2520
I4
sS'.thisN'
p2521
I312
sS'.thisIndex'
p2522
I0
sg15
(lp2523
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2524
S'space'
p2525
asg96
I0
sa(dp2526
g16
(lp2527
S'd'
asg18
S'Y'
sS'.thisRepN'
p2528
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2529
I5
sS'.thisN'
p2530
I313
sS'.thisIndex'
p2531
I10
sg15
(lp2532
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2533
S'space'
p2534
asg96
I10
sa(dp2535
g16
(lp2536
S'k'
asg18
S'Y'
sS'.thisRepN'
p2537
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2538
I6
sS'.thisN'
p2539
I314
sS'.thisIndex'
p2540
I5
sg15
(lp2541
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2542
S'space'
p2543
asg96
I5
sa(dp2544
g16
(lp2545
S'k'
asg18
S'Y'
sS'.thisRepN'
p2546
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2547
I7
sS'.thisN'
p2548
I315
sS'.thisIndex'
p2549
I4
sg15
(lp2550
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2551
S'space'
p2552
asg96
I4
sa(dp2553
g16
(lp2554
S'k'
asg18
S'Y'
sS'.thisRepN'
p2555
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2556
I8
sS'.thisN'
p2557
I316
sS'.thisIndex'
p2558
I2
sg15
(lp2559
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2560
S'space'
p2561
asg96
I2
sa(dp2562
g16
(lp2563
S'd'
asg18
S'N'
sS'.thisRepN'
p2564
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2565
I9
sS'.thisN'
p2566
I317
sS'.thisIndex'
p2567
I1
sg15
(lp2568
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I1
sa(dp2569
g16
(lp2570
S'k'
asg18
S'N'
sS'.thisRepN'
p2571
I28
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2572
I10
sS'.thisN'
p2573
I318
sS'.thisIndex'
p2574
I7
sg15
(lp2575
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I7
sa(dp2576
g16
(lp2577
S'd'
asg18
S'N'
sS'.thisRepN'
p2578
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2579
I0
sS'.thisN'
p2580
I319
sS'.thisIndex'
p2581
I4
sg15
(lp2582
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I4
sa(dp2583
g16
(lp2584
S'k'
asg18
S'Y'
sS'.thisRepN'
p2585
I29
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2586
I1
sS'.thisN'
p2587
I320
sS'.thisIndex'
p2588
I5
sg15
(lp2589
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I5
sa(dp2590
g16
(lp2591
S'd'
asg18
S'Y'
sS'.thisRepN'
p2592
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2593
I2
sS'.thisN'
p2594
I321
sS'.thisIndex'
p2595
I9
sg15
(lp2596
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2597
S'space'
p2598
asg96
I9
sa(dp2599
g16
(lp2600
S'k'
asg18
S'Y'
sS'.thisRepN'
p2601
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2602
I3
sS'.thisN'
p2603
I322
sS'.thisIndex'
p2604
I4
sg15
(lp2605
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2606
S'space'
p2607
asg96
I4
sa(dp2608
g16
(lp2609
S'd'
asg18
S'Y'
sS'.thisRepN'
p2610
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2611
I4
sS'.thisN'
p2612
I323
sS'.thisIndex'
p2613
I8
sg15
(lp2614
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2615
S'space'
p2616
asg96
I8
sa(dp2617
g16
(lp2618
S'd'
asg18
S'N'
sS'.thisRepN'
p2619
I29
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2620
I5
sS'.thisN'
p2621
I324
sS'.thisIndex'
p2622
I1
sg15
(lp2623
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2624
S'k'
asg96
I1
sa(dp2625
g16
(lp2626
S'd'
asg18
S'N'
sS'.thisRepN'
p2627
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2628
I6
sS'.thisN'
p2629
I325
sS'.thisIndex'
p2630
I2
sg15
(lp2631
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I2
sa(dp2632
g16
(lp2633
S'k'
asg18
S'Y'
sS'.thisRepN'
p2634
I29
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2635
I7
sS'.thisN'
p2636
I326
sS'.thisIndex'
p2637
I4
sg15
(lp2638
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I4
sa(dp2639
g16
(lp2640
S'd'
asg18
S'Y'
sS'.thisRepN'
p2641
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2642
I8
sS'.thisN'
p2643
I327
sS'.thisIndex'
p2644
I9
sg15
(lp2645
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2646
S'space'
p2647
asg96
I9
sa(dp2648
g16
(lp2649
S'k'
asg18
S'N'
sS'.thisRepN'
p2650
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2651
I9
sS'.thisN'
p2652
I328
sS'.thisIndex'
p2653
I4
sg15
(lp2654
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I4
sa(dp2655
g16
(lp2656
S'd'
asg18
S'Y'
sS'.thisRepN'
p2657
I29
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2658
I10
sS'.thisN'
p2659
I329
sS'.thisIndex'
p2660
I5
sg15
(lp2661
S'k'
asg30
g31
sg17
S'N'
sg14
I7
sg19
(lp2662
S'space'
p2663
asg96
I5
sa(dp2664
g16
(lp2665
S'k'
asg18
S'N'
sS'.thisRepN'
p2666
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2667
I0
sS'.thisN'
p2668
I330
sS'.thisIndex'
p2669
I3
sg15
(lp2670
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I3
sa(dp2671
g16
(lp2672
S'd'
asg18
S'N'
sS'.thisRepN'
p2673
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2674
I1
sS'.thisN'
p2675
I331
sS'.thisIndex'
p2676
I7
sg15
(lp2677
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I7
sa(dp2678
g16
(lp2679
S'k'
asg18
S'N'
sS'.thisRepN'
p2680
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2681
I2
sS'.thisN'
p2682
I332
sS'.thisIndex'
p2683
I9
sg15
(lp2684
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I9
sa(dp2685
g16
(lp2686
S'k'
asg18
S'Y'
sS'.thisRepN'
p2687
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2688
I3
sS'.thisN'
p2689
I333
sS'.thisIndex'
p2690
I6
sg15
(lp2691
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2692
S'space'
p2693
asg96
I6
sa(dp2694
g16
(lp2695
S'k'
asg18
S'N'
sS'.thisRepN'
p2696
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2697
I4
sS'.thisN'
p2698
I334
sS'.thisIndex'
p2699
I6
sg15
(lp2700
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I6
sa(dp2701
g16
(lp2702
S'd'
asg18
S'N'
sS'.thisRepN'
p2703
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2704
I5
sS'.thisN'
p2705
I335
sS'.thisIndex'
p2706
I5
sg15
(lp2707
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I5
sa(dp2708
g16
(lp2709
S'k'
asg18
S'Y'
sS'.thisRepN'
p2710
I30
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2711
I6
sS'.thisN'
p2712
I336
sS'.thisIndex'
p2713
I2
sg15
(lp2714
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I2
sa(dp2715
g16
(lp2716
S'k'
asg18
S'N'
sS'.thisRepN'
p2717
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2718
I7
sS'.thisN'
p2719
I337
sS'.thisIndex'
p2720
I0
sg15
(lp2721
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I0
sa(dp2722
g16
(lp2723
S'k'
asg18
S'Y'
sS'.thisRepN'
p2724
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2725
I8
sS'.thisN'
p2726
I338
sS'.thisIndex'
p2727
I4
sg15
(lp2728
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2729
S'space'
p2730
asg96
I4
sa(dp2731
g16
(lp2732
S'd'
asg18
S'Y'
sS'.thisRepN'
p2733
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2734
I9
sS'.thisN'
p2735
I339
sS'.thisIndex'
p2736
I9
sg15
(lp2737
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2738
S'space'
p2739
asg96
I9
sa(dp2740
g18
S'N'
sS'.thisRepN'
p2741
I30
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2742
I10
sS'.thisN'
p2743
I340
sS'.thisIndex'
p2744
I3
sg15
Nsg30
g31
sg17
g2367
sg14
I7
sg19
Nsg96
I3
sa(dp2745
g16
(lp2746
S'k'
asg18
S'N'
sS'.thisRepN'
p2747
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2748
I0
sS'.thisN'
p2749
I341
sS'.thisIndex'
p2750
I2
sg15
(lp2751
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I2
sa(dp2752
g16
(lp2753
S'k'
asg18
S'Y'
sS'.thisRepN'
p2754
I31
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2755
I1
sS'.thisN'
p2756
I342
sS'.thisIndex'
p2757
I7
sg15
(lp2758
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I7
sa(dp2759
g16
(lp2760
S'k'
asg18
S'Y'
sS'.thisRepN'
p2761
I31
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2762
I2
sS'.thisN'
p2763
I343
sS'.thisIndex'
p2764
I5
sg15
(lp2765
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I5
sa(dp2766
g16
(lp2767
S'd'
asg18
S'N'
sS'.thisRepN'
p2768
I31
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p2769
I3
sS'.thisN'
p2770
I344
sS'.thisIndex'
p2771
I3
sg15
(lp2772
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2773
S'space'
p2774
asg96
I3
sa(dp2775
g16
(lp2776
S'k'
asg18
S'Y'
sS'.thisRepN'
p2777
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2778
I4
sS'.thisN'
p2779
I345
sS'.thisIndex'
p2780
I9
sg15
(lp2781
S'k'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2782
S'space'
p2783
asg96
I9
sa(dp2784
g16
(lp2785
S'd'
asg18
S'N'
sS'.thisRepN'
p2786
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2787
I5
sS'.thisN'
p2788
I346
sS'.thisIndex'
p2789
I10
sg15
(lp2790
S'k'
asg30
g31
sg17
S'N'
sg14
I7
sg19
Nsg96
I10
sa(dp2791
g16
(lp2792
S'd'
asg18
S'Y'
sS'.thisRepN'
p2793
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2794
I6
sS'.thisN'
p2795
I347
sS'.thisIndex'
p2796
I7
sg15
(lp2797
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2798
S'space'
p2799
asg96
I7
sa(dp2800
g16
(lp2801
S'd'
asg18
S'Y'
sS'.thisRepN'
p2802
I31
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2803
I7
sS'.thisN'
p2804
I348
sS'.thisIndex'
p2805
I5
sg15
(lp2806
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
(lp2807
S'space'
p2808
asg96
I5
sa(dp2809
g16
(lp2810
S'd'
asg18
S'N'
sg22
I39
sS'.thisN'
p2811
I349
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2812
I8
sS'.thisRepN'
p2813
I31
sg21
I46
sS'.thisIndex'
p2814
I0
sg23
I25
sg15
(lp2815
S'd'
asg30
g31
sg17
S'Y'
sg14
I7
sg19
Nsg96
I0
sa(dp2816
g16
(lp2817
S'd'
asg96
I0
sS'.thisRepN'
p2818
I31
sg30
g31
sg32
g33
sS'.thisTrialN'
p2819
I9
sS'.thisN'
p2820
I350
sS'.thisIndex'
p2821
I0
sg15
(lp2822
S'd'
asg17
S'Y'
sg14
I8
sa(dp2823
g16
(lp2824
S'k'
asg96
I0
sS'.thisRepN'
p2825
I31
sg30
g31
sg32
g33
sS'.thisTrialN'
p2826
I10
sS'.thisN'
p2827
I351
sS'.thisIndex'
p2828
I0
sg15
(lp2829
S'k'
asg17
S'Y'
sg14
I8
sa(dp2830
g16
(lp2831
S'd'
asg18
S'Y'
sS'.thisRepN'
p2832
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2833
I0
sS'.thisN'
p2834
I352
sS'.thisIndex'
p2835
I7
sg15
(lp2836
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2837
S'space'
p2838
asg96
I7
sa(dp2839
g16
(lp2840
S'k'
asg18
S'N'
sS'.thisRepN'
p2841
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2842
I1
sS'.thisN'
p2843
I353
sS'.thisIndex'
p2844
I0
sg15
(lp2845
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I0
sa(dp2846
g16
(lp2847
S'd'
asg18
S'Y'
sS'.thisRepN'
p2848
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2849
I2
sS'.thisN'
p2850
I354
sS'.thisIndex'
p2851
I8
sg15
(lp2852
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2853
S'space'
p2854
asg96
I8
sa(dp2855
g16
(lp2856
S'k'
asg18
S'N'
sS'.thisRepN'
p2857
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2858
I3
sS'.thisN'
p2859
I355
sS'.thisIndex'
p2860
I0
sg15
(lp2861
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I0
sa(dp2862
g16
(lp2863
S'k'
asg18
S'Y'
sS'.thisRepN'
p2864
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2865
I4
sS'.thisN'
p2866
I356
sS'.thisIndex'
p2867
I5
sg15
(lp2868
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2869
S'space'
p2870
asg96
I5
sa(dp2871
g16
(lp2872
S'k'
asg18
S'N'
sS'.thisRepN'
p2873
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2874
I5
sS'.thisN'
p2875
I357
sS'.thisIndex'
p2876
I7
sg15
(lp2877
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I7
sa(dp2878
g16
(lp2879
S'k'
asg18
S'Y'
sS'.thisRepN'
p2880
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2881
I6
sS'.thisN'
p2882
I358
sS'.thisIndex'
p2883
I4
sg15
(lp2884
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2885
S'space'
p2886
asg96
I4
sa(dp2887
g16
(lp2888
S'd'
asg18
S'Y'
sS'.thisRepN'
p2889
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2890
I7
sS'.thisN'
p2891
I359
sS'.thisIndex'
p2892
I5
sg15
(lp2893
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2894
S'space'
p2895
asg96
I5
sa(dp2896
g16
(lp2897
S'k'
asg18
S'N'
sS'.thisRepN'
p2898
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2899
I8
sS'.thisN'
p2900
I360
sS'.thisIndex'
p2901
I3
sg15
(lp2902
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I3
sa(dp2903
g16
(lp2904
S'd'
asg18
S'Y'
sS'.thisRepN'
p2905
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2906
I9
sS'.thisN'
p2907
I361
sS'.thisIndex'
p2908
I4
sg15
(lp2909
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2910
S'space'
p2911
asg96
I4
sa(dp2912
g16
(lp2913
S'k'
asg18
S'N'
sS'.thisRepN'
p2914
I32
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2915
I10
sS'.thisN'
p2916
I362
sS'.thisIndex'
p2917
I3
sg15
(lp2918
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I3
sa(dp2919
g16
(lp2920
S'k'
asg18
S'N'
sS'.thisRepN'
p2921
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2922
I0
sS'.thisN'
p2923
I363
sS'.thisIndex'
p2924
I1
sg15
(lp2925
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I1
sa(dp2926
g16
(lp2927
S'k'
asg18
S'N'
sS'.thisRepN'
p2928
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2929
I1
sS'.thisN'
p2930
I364
sS'.thisIndex'
p2931
I3
sg15
(lp2932
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I3
sa(dp2933
g16
(lp2934
S'd'
asg18
S'N'
sS'.thisRepN'
p2935
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2936
I2
sS'.thisN'
p2937
I365
sS'.thisIndex'
p2938
I0
sg15
(lp2939
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I0
sa(dp2940
g16
(lp2941
S'd'
asg18
S'Y'
sS'.thisRepN'
p2942
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2943
I3
sS'.thisN'
p2944
I366
sS'.thisIndex'
p2945
I10
sg15
(lp2946
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2947
S'space'
p2948
asg96
I10
sa(dp2949
g16
(lp2950
S'k'
asg18
S'Y'
sS'.thisRepN'
p2951
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2952
I4
sS'.thisN'
p2953
I367
sS'.thisIndex'
p2954
I0
sg15
(lp2955
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2956
S'space'
p2957
asg96
I0
sa(dp2958
g16
(lp2959
S'k'
asg18
S'Y'
sS'.thisRepN'
p2960
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2961
I5
sS'.thisN'
p2962
I368
sS'.thisIndex'
p2963
I1
sg15
(lp2964
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2965
S'space'
p2966
asg96
I1
sa(dp2967
g16
(lp2968
S'k'
asg18
S'Y'
sS'.thisRepN'
p2969
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2970
I6
sS'.thisN'
p2971
I369
sS'.thisIndex'
p2972
I6
sg15
(lp2973
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2974
S'space'
p2975
asg96
I6
sa(dp2976
g16
(lp2977
S'k'
asg18
S'N'
sS'.thisRepN'
p2978
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2979
I7
sS'.thisN'
p2980
I370
sS'.thisIndex'
p2981
I1
sg15
(lp2982
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I1
sa(dp2983
g16
(lp2984
S'k'
asg18
S'N'
sS'.thisRepN'
p2985
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2986
I8
sS'.thisN'
p2987
I371
sS'.thisIndex'
p2988
I8
sg15
(lp2989
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I8
sa(dp2990
g16
(lp2991
S'k'
asg18
S'Y'
sS'.thisRepN'
p2992
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p2993
I9
sS'.thisN'
p2994
I372
sS'.thisIndex'
p2995
I2
sg15
(lp2996
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp2997
S'space'
p2998
asg96
I2
sa(dp2999
g16
(lp3000
S'd'
asg18
S'N'
sS'.thisRepN'
p3001
I33
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3002
I10
sS'.thisN'
p3003
I373
sS'.thisIndex'
p3004
I3
sg15
(lp3005
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I3
sa(dp3006
g16
(lp3007
S'k'
asg18
S'Y'
sS'.thisRepN'
p3008
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3009
I0
sS'.thisN'
p3010
I374
sS'.thisIndex'
p3011
I4
sg15
(lp3012
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3013
S'space'
p3014
asg96
I4
sa(dp3015
g16
(lp3016
S'k'
asg18
S'Y'
sS'.thisRepN'
p3017
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3018
I1
sS'.thisN'
p3019
I375
sS'.thisIndex'
p3020
I2
sg15
(lp3021
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3022
S'space'
p3023
asg96
I2
sa(dp3024
g16
(lp3025
S'k'
asg18
S'N'
sS'.thisRepN'
p3026
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3027
I2
sS'.thisN'
p3028
I376
sS'.thisIndex'
p3029
I5
sg15
(lp3030
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I5
sa(dp3031
g16
(lp3032
S'd'
asg18
S'Y'
sS'.thisRepN'
p3033
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3034
I3
sS'.thisN'
p3035
I377
sS'.thisIndex'
p3036
I8
sg15
(lp3037
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3038
S'space'
p3039
asg96
I8
sa(dp3040
g16
(lp3041
S'd'
asg18
S'N'
sS'.thisRepN'
p3042
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3043
I4
sS'.thisN'
p3044
I378
sS'.thisIndex'
p3045
I5
sg15
(lp3046
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I5
sa(dp3047
g16
(lp3048
S'k'
asg18
S'N'
sS'.thisRepN'
p3049
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3050
I5
sS'.thisN'
p3051
I379
sS'.thisIndex'
p3052
I0
sg15
(lp3053
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I0
sa(dp3054
g16
(lp3055
S'd'
asg18
S'Y'
sS'.thisRepN'
p3056
I34
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3057
I6
sS'.thisN'
p3058
I380
sS'.thisIndex'
p3059
I2
sg15
(lp3060
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I2
sa(dp3061
g16
(lp3062
S'k'
asg18
S'N'
sS'.thisRepN'
p3063
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3064
I7
sS'.thisN'
p3065
I381
sS'.thisIndex'
p3066
I2
sg15
(lp3067
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I2
sa(dp3068
g16
(lp3069
S'k'
asg18
S'Y'
sS'.thisRepN'
p3070
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3071
I8
sS'.thisN'
p3072
I382
sS'.thisIndex'
p3073
I10
sg15
(lp3074
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3075
S'space'
p3076
asg96
I10
sa(dp3077
g16
(lp3078
S'd'
asg18
S'Y'
sS'.thisRepN'
p3079
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3080
I9
sS'.thisN'
p3081
I383
sS'.thisIndex'
p3082
I10
sg15
(lp3083
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
(lp3084
S'space'
p3085
asg96
I10
sa(dp3086
g16
(lp3087
S'k'
asg18
S'Y'
sS'.thisRepN'
p3088
I34
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3089
I10
sS'.thisN'
p3090
I384
sS'.thisIndex'
p3091
I8
sg15
(lp3092
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3093
S'space'
p3094
asg96
I8
sa(dp3095
g16
(lp3096
S'd'
asg18
S'Y'
sS'.thisRepN'
p3097
I35
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3098
I0
sS'.thisN'
p3099
I385
sS'.thisIndex'
p3100
I2
sg15
(lp3101
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I2
sa(dp3102
g16
(lp3103
S'd'
asg18
S'N'
sS'.thisRepN'
p3104
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3105
I1
sS'.thisN'
p3106
I386
sS'.thisIndex'
p3107
I2
sg15
(lp3108
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I2
sa(dp3109
g16
(lp3110
S'd'
asg18
S'Y'
sS'.thisRepN'
p3111
I35
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3112
I2
sS'.thisN'
p3113
I387
sS'.thisIndex'
p3114
I5
sg15
(lp3115
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3116
S'd'
asg96
I5
sa(dp3117
g16
(lp3118
S'k'
asg18
S'N'
sS'.thisRepN'
p3119
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3120
I3
sS'.thisN'
p3121
I388
sS'.thisIndex'
p3122
I3
sg15
(lp3123
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I3
sa(dp3124
g16
(lp3125
S'k'
asg18
S'N'
sS'.thisRepN'
p3126
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3127
I4
sS'.thisN'
p3128
I389
sS'.thisIndex'
p3129
I1
sg15
(lp3130
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I1
sa(dp3131
g16
(lp3132
S'd'
asg18
S'N'
sS'.thisRepN'
p3133
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3134
I5
sS'.thisN'
p3135
I390
sS'.thisIndex'
p3136
I0
sg15
(lp3137
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
Nsg96
I0
sa(dp3138
g16
(lp3139
S'k'
asg18
S'Y'
sS'.thisRepN'
p3140
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3141
I6
sS'.thisN'
p3142
I391
sS'.thisIndex'
p3143
I10
sg15
(lp3144
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3145
S'space'
p3146
asg96
I10
sa(dp3147
g16
(lp3148
S'k'
asg18
S'Y'
sS'.thisRepN'
p3149
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3150
I7
sS'.thisN'
p3151
I392
sS'.thisIndex'
p3152
I2
sg15
(lp3153
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3154
S'space'
p3155
asg96
I2
sa(dp3156
g16
(lp3157
S'k'
asg18
S'Y'
sS'.thisRepN'
p3158
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3159
I8
sS'.thisN'
p3160
I393
sS'.thisIndex'
p3161
I6
sg15
(lp3162
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3163
S'space'
p3164
asg96
I6
sa(dp3165
g16
(lp3166
S'd'
asg18
S'N'
sS'.thisRepN'
p3167
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3168
I9
sS'.thisN'
p3169
I394
sS'.thisIndex'
p3170
I7
sg15
(lp3171
S'k'
asg30
g31
sg17
S'N'
sg14
I8
sg19
Nsg96
I7
sa(dp3172
g16
(lp3173
S'k'
asg18
S'Y'
sS'.thisRepN'
p3174
I35
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3175
I10
sS'.thisN'
p3176
I395
sS'.thisIndex'
p3177
I6
sg15
(lp3178
S'd'
asg30
g31
sg17
S'N'
sg14
I8
sg19
(lp3179
S'space'
p3180
asg96
I6
sa(dp3181
g16
(lp3182
S'd'
asg18
S'Y'
sS'.thisRepN'
p3183
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3184
I0
sS'.thisN'
p3185
I396
sS'.thisIndex'
p3186
I6
sg15
(lp3187
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
(lp3188
S'space'
p3189
asg96
I6
sa(dp3190
g16
(lp3191
S'k'
asg18
S'N'
sS'.thisRepN'
p3192
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3193
I1
sS'.thisN'
p3194
I397
sS'.thisIndex'
p3195
I3
sg15
(lp3196
S'k'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I3
sa(dp3197
g16
(lp3198
S'd'
asg18
S'N'
sS'.thisRepN'
p3199
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3200
I2
sS'.thisN'
p3201
I398
sS'.thisIndex'
p3202
I9
sg15
(lp3203
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I9
sa(dp3204
g16
(lp3205
S'd'
asg18
S'N'
sg22
I45
sS'.thisN'
p3206
I399
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3207
I3
sS'.thisRepN'
p3208
I36
sg21
I46
sS'.thisIndex'
p3209
I4
sg23
I25
sg15
(lp3210
S'd'
asg30
g31
sg17
S'Y'
sg14
I8
sg19
Nsg96
I4
sa(dp3211
g16
(lp3212
S'd'
asg96
I0
sS'.thisRepN'
p3213
I36
sg30
g31
sg32
g33
sS'.thisTrialN'
p3214
I4
sS'.thisN'
p3215
I400
sS'.thisIndex'
p3216
I0
sg15
(lp3217
S'd'
asg17
S'Y'
sg14
I9
sa(dp3218
g16
(lp3219
S'd'
asg96
I4
sS'.thisRepN'
p3220
I36
sg30
g31
sg32
g33
sS'.thisTrialN'
p3221
I5
sS'.thisN'
p3222
I401
sS'.thisIndex'
p3223
I4
sg15
(lp3224
S'd'
asg17
S'Y'
sg14
I9
sa(dp3225
g16
(lp3226
S'k'
asg18
S'Y'
sS'.thisRepN'
p3227
I36
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3228
I6
sS'.thisN'
p3229
I402
sS'.thisIndex'
p3230
I7
sg15
(lp3231
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I7
sa(dp3232
g16
(lp3233
S'd'
asg18
S'Y'
sS'.thisRepN'
p3234
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3235
I7
sS'.thisN'
p3236
I403
sS'.thisIndex'
p3237
I6
sg15
(lp3238
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3239
S'space'
p3240
asg96
I6
sa(dp3241
g16
(lp3242
S'k'
asg18
S'Y'
sS'.thisRepN'
p3243
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3244
I8
sS'.thisN'
p3245
I404
sS'.thisIndex'
p3246
I3
sg15
(lp3247
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3248
S'space'
p3249
asg96
I3
sa(dp3250
g16
(lp3251
S'k'
asg18
S'N'
sS'.thisRepN'
p3252
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3253
I9
sS'.thisN'
p3254
I405
sS'.thisIndex'
p3255
I3
sg15
(lp3256
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I3
sa(dp3257
g16
(lp3258
S'k'
asg18
S'Y'
sS'.thisRepN'
p3259
I36
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3260
I10
sS'.thisN'
p3261
I406
sS'.thisIndex'
p3262
I9
sg15
(lp3263
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3264
S'space'
p3265
asg96
I9
sa(dp3266
g16
(lp3267
S'd'
asg18
S'Y'
sS'.thisRepN'
p3268
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3269
I0
sS'.thisN'
p3270
I407
sS'.thisIndex'
p3271
I9
sg15
(lp3272
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3273
S'space'
p3274
asg96
I9
sa(dp3275
g16
(lp3276
S'k'
asg18
S'Y'
sS'.thisRepN'
p3277
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3278
I1
sS'.thisN'
p3279
I408
sS'.thisIndex'
p3280
I4
sg15
(lp3281
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3282
S'space'
p3283
asg96
I4
sa(dp3284
g16
(lp3285
S'k'
asg18
S'Y'
sS'.thisRepN'
p3286
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3287
I2
sS'.thisN'
p3288
I409
sS'.thisIndex'
p3289
I7
sg15
(lp3290
S'd'
asg30
g31
sg17
S'N'
sg14
I9
sg19
(lp3291
S'space'
p3292
asg96
I7
sa(dp3293
g16
(lp3294
S'd'
asg18
S'Y'
sS'.thisRepN'
p3295
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3296
I3
sS'.thisN'
p3297
I410
sS'.thisIndex'
p3298
I8
sg15
(lp3299
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3300
S'space'
p3301
asg96
I8
sa(dp3302
g16
(lp3303
S'k'
asg18
S'N'
sS'.thisRepN'
p3304
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3305
I4
sS'.thisN'
p3306
I411
sS'.thisIndex'
p3307
I7
sg15
(lp3308
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I7
sa(dp3309
g16
(lp3310
S'd'
asg18
S'Y'
sS'.thisRepN'
p3311
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3312
I5
sS'.thisN'
p3313
I412
sS'.thisIndex'
p3314
I8
sg15
(lp3315
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3316
S'space'
p3317
asg96
I8
sa(dp3318
g16
(lp3319
S'k'
asg18
S'N'
sS'.thisRepN'
p3320
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3321
I6
sS'.thisN'
p3322
I413
sS'.thisIndex'
p3323
I10
sg15
(lp3324
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I10
sa(dp3325
g16
(lp3326
S'd'
asg18
S'Y'
sS'.thisRepN'
p3327
I37
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3328
I7
sS'.thisN'
p3329
I414
sS'.thisIndex'
p3330
I5
sg15
(lp3331
S'k'
asg30
g31
sg17
S'N'
sg14
I9
sg19
(lp3332
S'k'
asg96
I5
sa(dp3333
g16
(lp3334
S'd'
asg18
S'N'
sS'.thisRepN'
p3335
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3336
I8
sS'.thisN'
p3337
I415
sS'.thisIndex'
p3338
I9
sg15
(lp3339
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I9
sa(dp3340
g16
(lp3341
S'k'
asg18
S'Y'
sS'.thisRepN'
p3342
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3343
I9
sS'.thisN'
p3344
I416
sS'.thisIndex'
p3345
I1
sg15
(lp3346
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3347
S'space'
p3348
asg96
I1
sa(dp3349
g16
(lp3350
S'd'
asg18
S'N'
sS'.thisRepN'
p3351
I37
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3352
I10
sS'.thisN'
p3353
I417
sS'.thisIndex'
p3354
I6
sg15
(lp3355
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I6
sa(dp3356
g16
(lp3357
S'k'
asg18
S'Y'
sS'.thisRepN'
p3358
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3359
I0
sS'.thisN'
p3360
I418
sS'.thisIndex'
p3361
I6
sg15
(lp3362
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3363
S'space'
p3364
asg96
I6
sa(dp3365
g16
(lp3366
S'd'
asg18
S'N'
sS'.thisRepN'
p3367
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3368
I1
sS'.thisN'
p3369
I419
sS'.thisIndex'
p3370
I6
sg15
(lp3371
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I6
sa(dp3372
g16
(lp3373
S'k'
asg18
S'Y'
sS'.thisRepN'
p3374
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3375
I2
sS'.thisN'
p3376
I420
sS'.thisIndex'
p3377
I7
sg15
(lp3378
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3379
S'space'
p3380
asg96
I7
sa(dp3381
g16
(lp3382
S'd'
asg18
S'N'
sS'.thisRepN'
p3383
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3384
I3
sS'.thisN'
p3385
I421
sS'.thisIndex'
p3386
I5
sg15
(lp3387
S'k'
asg30
g31
sg17
S'N'
sg14
I9
sg19
Nsg96
I5
sa(dp3388
g16
(lp3389
S'd'
asg18
S'Y'
sS'.thisRepN'
p3390
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3391
I4
sS'.thisN'
p3392
I422
sS'.thisIndex'
p3393
I10
sg15
(lp3394
S'k'
asg30
g31
sg17
S'N'
sg14
I9
sg19
(lp3395
S'space'
p3396
asg96
I10
sa(dp3397
g16
(lp3398
S'k'
asg18
S'N'
sS'.thisRepN'
p3399
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3400
I5
sS'.thisN'
p3401
I423
sS'.thisIndex'
p3402
I6
sg15
(lp3403
S'd'
asg30
g31
sg17
S'N'
sg14
I9
sg19
Nsg96
I6
sa(dp3404
g16
(lp3405
S'k'
asg18
S'N'
sS'.thisRepN'
p3406
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3407
I6
sS'.thisN'
p3408
I424
sS'.thisIndex'
p3409
I7
sg15
(lp3410
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I7
sa(dp3411
g16
(lp3412
S'd'
asg18
S'N'
sS'.thisRepN'
p3413
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3414
I7
sS'.thisN'
p3415
I425
sS'.thisIndex'
p3416
I8
sg15
(lp3417
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I8
sa(dp3418
g16
(lp3419
S'k'
asg18
S'N'
sS'.thisRepN'
p3420
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3421
I8
sS'.thisN'
p3422
I426
sS'.thisIndex'
p3423
I5
sg15
(lp3424
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I5
sa(dp3425
g16
(lp3426
S'd'
asg18
S'Y'
sS'.thisRepN'
p3427
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3428
I9
sS'.thisN'
p3429
I427
sS'.thisIndex'
p3430
I9
sg15
(lp3431
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3432
S'space'
p3433
asg96
I9
sa(dp3434
g16
(lp3435
S'd'
asg18
S'Y'
sS'.thisRepN'
p3436
I38
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3437
I10
sS'.thisN'
p3438
I428
sS'.thisIndex'
p3439
I4
sg15
(lp3440
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3441
S'space'
p3442
asg96
I4
sa(dp3443
g16
(lp3444
S'd'
asg18
S'N'
sS'.thisRepN'
p3445
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3446
I0
sS'.thisN'
p3447
I429
sS'.thisIndex'
p3448
I7
sg15
(lp3449
S'k'
asg30
g31
sg17
S'N'
sg14
I9
sg19
Nsg96
I7
sa(dp3450
g16
(lp3451
S'd'
asg18
S'Y'
sS'.thisRepN'
p3452
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3453
I1
sS'.thisN'
p3454
I430
sS'.thisIndex'
p3455
I0
sg15
(lp3456
S'k'
asg30
g31
sg17
S'N'
sg14
I9
sg19
(lp3457
S'space'
p3458
asg96
I0
sa(dp3459
g16
(lp3460
S'd'
asg18
S'Y'
sS'.thisRepN'
p3461
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3462
I2
sS'.thisN'
p3463
I431
sS'.thisIndex'
p3464
I10
sg15
(lp3465
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3466
S'space'
p3467
asg96
I10
sa(dp3468
g16
(lp3469
S'k'
asg18
S'N'
sS'.thisRepN'
p3470
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3471
I3
sS'.thisN'
p3472
I432
sS'.thisIndex'
p3473
I2
sg15
(lp3474
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I2
sa(dp3475
g16
(lp3476
S'd'
asg18
S'N'
sS'.thisRepN'
p3477
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3478
I4
sS'.thisN'
p3479
I433
sS'.thisIndex'
p3480
I2
sg15
(lp3481
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I2
sa(dp3482
g16
(lp3483
S'd'
asg18
S'N'
sS'.thisRepN'
p3484
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3485
I5
sS'.thisN'
p3486
I434
sS'.thisIndex'
p3487
I8
sg15
(lp3488
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I8
sa(dp3489
g16
(lp3490
S'd'
asg18
S'Y'
sS'.thisRepN'
p3491
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3492
I6
sS'.thisN'
p3493
I435
sS'.thisIndex'
p3494
I8
sg15
(lp3495
S'k'
asg30
g31
sg17
S'N'
sg14
I9
sg19
(lp3496
S'space'
p3497
asg96
I8
sa(dp3498
g16
(lp3499
S'd'
asg18
S'Y'
sS'.thisRepN'
p3500
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3501
I7
sS'.thisN'
p3502
I436
sS'.thisIndex'
p3503
I6
sg15
(lp3504
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3505
S'space'
p3506
asg96
I6
sa(dp3507
g16
(lp3508
S'd'
asg18
S'Y'
sS'.thisRepN'
p3509
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3510
I8
sS'.thisN'
p3511
I437
sS'.thisIndex'
p3512
I8
sg15
(lp3513
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3514
S'space'
p3515
asg96
I8
sa(dp3516
g16
(lp3517
S'k'
asg18
S'N'
sS'.thisRepN'
p3518
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3519
I9
sS'.thisN'
p3520
I438
sS'.thisIndex'
p3521
I2
sg15
(lp3522
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I2
sa(dp3523
g16
(lp3524
S'k'
asg18
S'Y'
sS'.thisRepN'
p3525
I39
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3526
I10
sS'.thisN'
p3527
I439
sS'.thisIndex'
p3528
I8
sg15
(lp3529
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3530
S'space'
p3531
asg96
I8
sa(dp3532
g16
(lp3533
S'k'
asg18
S'Y'
sS'.thisRepN'
p3534
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3535
I0
sS'.thisN'
p3536
I440
sS'.thisIndex'
p3537
I5
sg15
(lp3538
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3539
S'space'
p3540
asg96
I5
sa(dp3541
g16
(lp3542
S'd'
asg18
S'N'
sS'.thisRepN'
p3543
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3544
I1
sS'.thisN'
p3545
I441
sS'.thisIndex'
p3546
I10
sg15
(lp3547
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I10
sa(dp3548
g16
(lp3549
S'd'
asg18
S'N'
sS'.thisRepN'
p3550
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3551
I2
sS'.thisN'
p3552
I442
sS'.thisIndex'
p3553
I8
sg15
(lp3554
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I8
sa(dp3555
g16
(lp3556
S'd'
asg18
S'Y'
sS'.thisRepN'
p3557
I40
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3558
I3
sS'.thisN'
p3559
I443
sS'.thisIndex'
p3560
I10
sg15
(lp3561
S'k'
asg30
g31
sg17
S'N'
sg14
I9
sg19
(lp3562
S'd'
asg96
I10
sa(dp3563
g16
(lp3564
S'd'
asg18
S'Y'
sS'.thisRepN'
p3565
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3566
I4
sS'.thisN'
p3567
I444
sS'.thisIndex'
p3568
I6
sg15
(lp3569
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
(lp3570
S'space'
p3571
asg96
I6
sa(dp3572
g16
(lp3573
S'd'
asg18
S'N'
sS'.thisRepN'
p3574
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3575
I5
sS'.thisN'
p3576
I445
sS'.thisIndex'
p3577
I0
sg15
(lp3578
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I0
sa(dp3579
g16
(lp3580
S'd'
asg18
S'N'
sS'.thisRepN'
p3581
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3582
I6
sS'.thisN'
p3583
I446
sS'.thisIndex'
p3584
I4
sg15
(lp3585
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I4
sa(dp3586
g16
(lp3587
S'k'
asg18
S'N'
sS'.thisRepN'
p3588
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3589
I7
sS'.thisN'
p3590
I447
sS'.thisIndex'
p3591
I7
sg15
(lp3592
S'k'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I7
sa(dp3593
g16
(lp3594
S'd'
asg18
S'N'
sS'.thisRepN'
p3595
I40
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3596
I8
sS'.thisN'
p3597
I448
sS'.thisIndex'
p3598
I7
sg15
(lp3599
S'd'
asg30
g31
sg17
S'Y'
sg14
I9
sg19
Nsg96
I7
sa(dp3600
g16
(lp3601
S'd'
asg18
S'N'
sg22
I45
sS'.thisN'
p3602
I449
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3603
I9
sS'.thisRepN'
p3604
I40
sg21
I40
sS'.thisIndex'
p3605
I1
sg23
I25
sg15
(lp3606
S'k'
asg30
g31
sg17
S'N'
sg14
I9
sg19
Nsg96
I1
sa(dp3607
g16
(lp3608
S'd'
asg96
I3
sS'.thisRepN'
p3609
I40
sg30
g31
sg32
g33
sS'.thisTrialN'
p3610
I10
sS'.thisN'
p3611
I450
sS'.thisIndex'
p3612
I3
sg15
(lp3613
S'd'
asg17
S'Y'
sg14
I10
sa(dp3614
g16
(lp3615
S'k'
asg96
I7
sS'.thisRepN'
p3616
I41
sg30
g31
sg32
g33
sS'.thisTrialN'
p3617
I0
sS'.thisN'
p3618
I451
sS'.thisIndex'
p3619
I7
sg15
(lp3620
S'k'
asg17
S'Y'
sg14
I10
sa(dp3621
g16
(lp3622
S'k'
asg18
S'N'
sS'.thisRepN'
p3623
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3624
I1
sS'.thisN'
p3625
I452
sS'.thisIndex'
p3626
I2
sg15
(lp3627
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I2
sa(dp3628
g16
(lp3629
S'k'
asg18
S'N'
sS'.thisRepN'
p3630
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3631
I2
sS'.thisN'
p3632
I453
sS'.thisIndex'
p3633
I5
sg15
(lp3634
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I5
sa(dp3635
g16
(lp3636
S'k'
asg18
S'Y'
sS'.thisRepN'
p3637
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3638
I3
sS'.thisN'
p3639
I454
sS'.thisIndex'
p3640
I2
sg15
(lp3641
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3642
S'space'
p3643
asg96
I2
sa(dp3644
g16
(lp3645
S'k'
asg18
S'N'
sS'.thisRepN'
p3646
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3647
I4
sS'.thisN'
p3648
I455
sS'.thisIndex'
p3649
I1
sg15
(lp3650
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I1
sa(dp3651
g16
(lp3652
S'k'
asg18
S'N'
sS'.thisRepN'
p3653
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3654
I5
sS'.thisN'
p3655
I456
sS'.thisIndex'
p3656
I5
sg15
(lp3657
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I5
sa(dp3658
g16
(lp3659
S'k'
asg18
S'N'
sS'.thisRepN'
p3660
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3661
I6
sS'.thisN'
p3662
I457
sS'.thisIndex'
p3663
I9
sg15
(lp3664
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I9
sa(dp3665
g16
(lp3666
S'd'
asg18
S'N'
sS'.thisRepN'
p3667
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3668
I7
sS'.thisN'
p3669
I458
sS'.thisIndex'
p3670
I5
sg15
(lp3671
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I5
sa(dp3672
g16
(lp3673
S'k'
asg18
S'Y'
sS'.thisRepN'
p3674
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3675
I8
sS'.thisN'
p3676
I459
sS'.thisIndex'
p3677
I6
sg15
(lp3678
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3679
S'space'
p3680
asg96
I6
sa(dp3681
g16
(lp3682
S'k'
asg18
S'Y'
sS'.thisRepN'
p3683
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3684
I9
sS'.thisN'
p3685
I460
sS'.thisIndex'
p3686
I7
sg15
(lp3687
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3688
S'space'
p3689
asg96
I7
sa(dp3690
g16
(lp3691
S'd'
asg18
S'Y'
sS'.thisRepN'
p3692
I41
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3693
I10
sS'.thisN'
p3694
I461
sS'.thisIndex'
p3695
I7
sg15
(lp3696
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3697
S'space'
p3698
asg96
I7
sa(dp3699
g16
(lp3700
S'k'
asg18
S'Y'
sS'.thisRepN'
p3701
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3702
I0
sS'.thisN'
p3703
I462
sS'.thisIndex'
p3704
I9
sg15
(lp3705
S'd'
asg30
g31
sg17
S'N'
sg14
I10
sg19
(lp3706
S'space'
p3707
asg96
I9
sa(dp3708
g16
(lp3709
S'k'
asg18
S'N'
sS'.thisRepN'
p3710
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3711
I1
sS'.thisN'
p3712
I463
sS'.thisIndex'
p3713
I7
sg15
(lp3714
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I7
sa(dp3715
g16
(lp3716
S'k'
asg18
S'N'
sS'.thisRepN'
p3717
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3718
I2
sS'.thisN'
p3719
I464
sS'.thisIndex'
p3720
I6
sg15
(lp3721
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I6
sa(dp3722
g16
(lp3723
S'd'
asg18
S'Y'
sS'.thisRepN'
p3724
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3725
I3
sS'.thisN'
p3726
I465
sS'.thisIndex'
p3727
I3
sg15
(lp3728
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3729
S'space'
p3730
asg96
I3
sa(dp3731
g16
(lp3732
S'k'
asg18
S'N'
sS'.thisRepN'
p3733
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3734
I4
sS'.thisN'
p3735
I466
sS'.thisIndex'
p3736
I10
sg15
(lp3737
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I10
sa(dp3738
g16
(lp3739
S'k'
asg18
S'N'
sS'.thisRepN'
p3740
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3741
I5
sS'.thisN'
p3742
I467
sS'.thisIndex'
p3743
I1
sg15
(lp3744
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I1
sa(dp3745
g16
(lp3746
S'd'
asg18
S'N'
sS'.thisRepN'
p3747
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3748
I6
sS'.thisN'
p3749
I468
sS'.thisIndex'
p3750
I10
sg15
(lp3751
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I10
sa(dp3752
g16
(lp3753
S'k'
asg18
S'Y'
sS'.thisRepN'
p3754
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3755
I7
sS'.thisN'
p3756
I469
sS'.thisIndex'
p3757
I2
sg15
(lp3758
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3759
S'space'
p3760
asg96
I2
sa(dp3761
g16
(lp3762
S'd'
asg18
S'N'
sS'.thisRepN'
p3763
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3764
I8
sS'.thisN'
p3765
I470
sS'.thisIndex'
p3766
I8
sg15
(lp3767
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I8
sa(dp3768
g16
(lp3769
S'd'
asg18
S'Y'
sS'.thisRepN'
p3770
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3771
I9
sS'.thisN'
p3772
I471
sS'.thisIndex'
p3773
I6
sg15
(lp3774
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3775
S'space'
p3776
asg96
I6
sa(dp3777
g16
(lp3778
S'd'
asg18
S'Y'
sS'.thisRepN'
p3779
I42
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3780
I10
sS'.thisN'
p3781
I472
sS'.thisIndex'
p3782
I2
sg15
(lp3783
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3784
S'space'
p3785
asg96
I2
sa(dp3786
g16
(lp3787
S'd'
asg18
S'Y'
sS'.thisRepN'
p3788
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3789
I0
sS'.thisN'
p3790
I473
sS'.thisIndex'
p3791
I3
sg15
(lp3792
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3793
S'space'
p3794
asg96
I3
sa(dp3795
g16
(lp3796
S'd'
asg18
S'Y'
sS'.thisRepN'
p3797
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3798
I1
sS'.thisN'
p3799
I474
sS'.thisIndex'
p3800
I8
sg15
(lp3801
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3802
S'space'
p3803
asg96
I8
sa(dp3804
g16
(lp3805
S'k'
asg18
S'N'
sS'.thisRepN'
p3806
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3807
I2
sS'.thisN'
p3808
I475
sS'.thisIndex'
p3809
I10
sg15
(lp3810
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I10
sa(dp3811
g16
(lp3812
S'd'
asg18
S'Y'
sS'.thisRepN'
p3813
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3814
I3
sS'.thisN'
p3815
I476
sS'.thisIndex'
p3816
I7
sg15
(lp3817
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3818
S'space'
p3819
asg96
I7
sa(dp3820
g16
(lp3821
S'k'
asg18
S'N'
sS'.thisRepN'
p3822
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3823
I4
sS'.thisN'
p3824
I477
sS'.thisIndex'
p3825
I8
sg15
(lp3826
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I8
sa(dp3827
g16
(lp3828
S'k'
asg18
S'N'
sS'.thisRepN'
p3829
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3830
I5
sS'.thisN'
p3831
I478
sS'.thisIndex'
p3832
I9
sg15
(lp3833
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I9
sa(dp3834
g16
(lp3835
S'd'
asg18
S'N'
sS'.thisRepN'
p3836
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3837
I6
sS'.thisN'
p3838
I479
sS'.thisIndex'
p3839
I4
sg15
(lp3840
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I4
sa(dp3841
g16
(lp3842
S'k'
asg18
S'N'
sS'.thisRepN'
p3843
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3844
I7
sS'.thisN'
p3845
I480
sS'.thisIndex'
p3846
I6
sg15
(lp3847
S'd'
asg30
g31
sg17
S'N'
sg14
I10
sg19
Nsg96
I6
sa(dp3848
g18
S'Y'
sS'.thisRepN'
p3849
I43
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3850
I8
sS'.thisN'
p3851
I481
sS'.thisIndex'
p3852
I7
sg15
Nsg30
g31
sg17
g2367
sg14
I10
sg19
(lp3853
S'space'
p3854
asg96
I7
sa(dp3855
g16
(lp3856
S'd'
asg18
S'N'
sS'.thisRepN'
p3857
I43
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3858
I9
sS'.thisN'
p3859
I482
sS'.thisIndex'
p3860
I1
sg15
(lp3861
S'k'
asg30
g31
sg17
S'N'
sg14
I10
sg19
(lp3862
S'k'
asg96
I1
sa(dp3863
g16
(lp3864
S'd'
asg18
S'Y'
sS'.thisRepN'
p3865
I43
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3866
I10
sS'.thisN'
p3867
I483
sS'.thisIndex'
p3868
I4
sg15
(lp3869
S'd'
aS'k'
asg30
g31
sg17
S'N'
sg14
I10
sg19
Nsg96
I4
sa(dp3870
g16
(lp3871
S'k'
asg18
S'Y'
sS'.thisRepN'
p3872
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3873
I0
sS'.thisN'
p3874
I484
sS'.thisIndex'
p3875
I6
sg15
(lp3876
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3877
S'space'
p3878
asg96
I6
sa(dp3879
g16
(lp3880
S'k'
asg18
S'N'
sS'.thisRepN'
p3881
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3882
I1
sS'.thisN'
p3883
I485
sS'.thisIndex'
p3884
I8
sg15
(lp3885
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I8
sa(dp3886
g16
(lp3887
S'd'
asg18
S'Y'
sS'.thisRepN'
p3888
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3889
I2
sS'.thisN'
p3890
I486
sS'.thisIndex'
p3891
I9
sg15
(lp3892
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3893
S'space'
p3894
asg96
I9
sa(dp3895
g16
(lp3896
S'd'
asg18
S'N'
sS'.thisRepN'
p3897
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3898
I3
sS'.thisN'
p3899
I487
sS'.thisIndex'
p3900
I5
sg15
(lp3901
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I5
sa(dp3902
g16
(lp3903
S'd'
asg18
S'Y'
sS'.thisRepN'
p3904
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3905
I4
sS'.thisN'
p3906
I488
sS'.thisIndex'
p3907
I1
sg15
(lp3908
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3909
S'space'
p3910
asg96
I1
sa(dp3911
g16
(lp3912
S'k'
asg18
S'Y'
sS'.thisRepN'
p3913
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3914
I5
sS'.thisN'
p3915
I489
sS'.thisIndex'
p3916
I0
sg15
(lp3917
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3918
S'space'
p3919
asg96
I0
sa(dp3920
g16
(lp3921
S'k'
asg18
S'Y'
sS'.thisRepN'
p3922
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3923
I6
sS'.thisN'
p3924
I490
sS'.thisIndex'
p3925
I4
sg15
(lp3926
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3927
S'space'
p3928
asg96
I4
sa(dp3929
g16
(lp3930
S'd'
asg18
S'N'
sS'.thisRepN'
p3931
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3932
I7
sS'.thisN'
p3933
I491
sS'.thisIndex'
p3934
I5
sg15
(lp3935
S'k'
asg30
g31
sg17
S'N'
sg14
I10
sg19
Nsg96
I5
sa(dp3936
g16
(lp3937
S'k'
asg18
S'Y'
sS'.thisRepN'
p3938
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3939
I8
sS'.thisN'
p3940
I492
sS'.thisIndex'
p3941
I0
sg15
(lp3942
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
(lp3943
S'space'
p3944
asg96
I0
sa(dp3945
g16
(lp3946
S'd'
asg18
S'N'
sS'.thisRepN'
p3947
I44
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3948
I9
sS'.thisN'
p3949
I493
sS'.thisIndex'
p3950
I3
sg15
(lp3951
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I3
sa(dp3952
g16
(lp3953
S'k'
asg18
S'Y'
sS'.thisRepN'
p3954
I44
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p3955
I10
sS'.thisN'
p3956
I494
sS'.thisIndex'
p3957
I9
sg15
(lp3958
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I9
sa(dp3959
g16
(lp3960
S'd'
asg18
S'N'
sS'.thisRepN'
p3961
I45
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3962
I0
sS'.thisN'
p3963
I495
sS'.thisIndex'
p3964
I2
sg15
(lp3965
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I2
sa(dp3966
g16
(lp3967
S'd'
asg18
S'N'
sS'.thisRepN'
p3968
I45
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3969
I1
sS'.thisN'
p3970
I496
sS'.thisIndex'
p3971
I0
sg15
(lp3972
S'k'
asg30
g31
sg17
S'N'
sg14
I10
sg19
Nsg96
I0
sa(dp3973
g16
(lp3974
S'd'
asg18
S'N'
sS'.thisRepN'
p3975
I45
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3976
I2
sS'.thisN'
p3977
I497
sS'.thisIndex'
p3978
I2
sg15
(lp3979
S'd'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I2
sa(dp3980
g16
(lp3981
S'k'
asg18
S'Y'
sS'.thisRepN'
p3982
I45
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3983
I3
sS'.thisN'
p3984
I498
sS'.thisIndex'
p3985
I4
sg15
(lp3986
S'd'
asg30
g31
sg17
S'N'
sg14
I10
sg19
(lp3987
S'space'
p3988
asg96
I4
sa(dp3989
g16
(lp3990
S'k'
asg18
S'N'
sg22
I45
sS'.thisN'
p3991
I499
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p3992
I4
sS'.thisRepN'
p3993
I45
sg21
I42
sS'.thisIndex'
p3994
I10
sg23
I22
sg15
(lp3995
S'k'
asg30
g31
sg17
S'Y'
sg14
I10
sg19
Nsg96
I10
sa(dp3996
g16
(lp3997
S'd'
asS'.thisIndex'
p3998
I9
sS'.thisRepN'
p3999
I45
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p4000
I5
sS'.thisN'
p4001
I500
sg25
S'Y'
sg24
S'Y'
sg15
(lp4002
S'k'
asg17
S'Y'
sg14
I11
sg96
I9
sa(dp4003
g16
(lp4004
S'k'
asS'.thisIndex'
p4005
I8
sS'.thisRepN'
p4006
I45
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p4007
I6
sS'.thisN'
p4008
I501
sg25
S'Y'
sg15
(lp4009
S'k'
asg17
S'N'
sg14
I11
sg96
I8
sa(dp4010
g16
(lp4011
S'k'
asg18
S'Y'
sS'.thisRepN'
p4012
I45
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4013
I7
sS'.thisN'
p4014
I502
sg25
S'Y'
sg15
(lp4015
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4016
S'd'
asg96
I1
sS'.thisIndex'
p4017
I1
sa(dp4018
g16
(lp4019
S'k'
asg18
S'N'
sS'.thisRepN'
p4020
I45
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4021
I8
sS'.thisN'
p4022
I503
sg25
S'Y'
sg15
(lp4023
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I1
sS'.thisIndex'
p4024
I1
sa(dp4025
g16
(lp4026
S'k'
asg18
S'Y'
sS'.thisRepN'
p4027
I45
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4028
I9
sS'.thisN'
p4029
I504
sg25
S'Y'
sg15
(lp4030
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4031
S'space'
p4032
asg96
I6
sS'.thisIndex'
p4033
I6
sa(dp4034
g16
(lp4035
S'k'
asg18
S'Y'
sS'.thisRepN'
p4036
I45
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4037
I10
sS'.thisN'
p4038
I505
sg25
S'Y'
sg15
(lp4039
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4040
S'space'
p4041
asg96
I9
sS'.thisIndex'
p4042
I9
sa(dp4043
g16
(lp4044
S'd'
asg18
S'Y'
sS'.thisRepN'
p4045
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4046
I0
sS'.thisN'
p4047
I506
sg25
S'Y'
sg15
(lp4048
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4049
S'space'
p4050
asg96
I6
sS'.thisIndex'
p4051
I6
sa(dp4052
g16
(lp4053
S'k'
asg18
S'N'
sS'.thisRepN'
p4054
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4055
I1
sS'.thisN'
p4056
I507
sg25
S'Y'
sg15
(lp4057
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I10
sS'.thisIndex'
p4058
I10
sa(dp4059
g16
(lp4060
S'k'
asg18
S'Y'
sS'.thisRepN'
p4061
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4062
I2
sS'.thisN'
p4063
I508
sg25
S'Y'
sg15
(lp4064
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4065
S'space'
p4066
asg96
I2
sS'.thisIndex'
p4067
I2
sa(dp4068
g16
(lp4069
S'k'
asg18
S'Y'
sS'.thisRepN'
p4070
I46
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4071
I3
sS'.thisN'
p4072
I509
sg25
S'Y'
sg15
(lp4073
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4074
S'k'
asg96
I2
sS'.thisIndex'
p4075
I2
sa(dp4076
g16
(lp4077
S'k'
asg18
S'Y'
sS'.thisRepN'
p4078
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4079
I4
sS'.thisN'
p4080
I510
sg25
S'Y'
sg15
(lp4081
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4082
S'space'
p4083
asg96
I0
sS'.thisIndex'
p4084
I0
sa(dp4085
g16
(lp4086
S'd'
asg18
S'N'
sS'.thisRepN'
p4087
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4088
I5
sS'.thisN'
p4089
I511
sg25
S'Y'
sg15
(lp4090
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I4
sS'.thisIndex'
p4091
I4
sa(dp4092
g16
(lp4093
S'd'
asg18
S'Y'
sS'.thisRepN'
p4094
I46
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4095
I6
sS'.thisN'
p4096
I512
sg25
S'Y'
sg15
(lp4097
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4098
S'd'
asg96
I9
sS'.thisIndex'
p4099
I9
sa(dp4100
g16
(lp4101
S'k'
asg18
S'N'
sS'.thisRepN'
p4102
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4103
I7
sS'.thisN'
p4104
I513
sg25
S'Y'
sg15
(lp4105
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I10
sS'.thisIndex'
p4106
I10
sa(dp4107
g16
(lp4108
S'd'
asg18
S'Y'
sS'.thisRepN'
p4109
I46
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4110
I8
sS'.thisN'
p4111
I514
sg25
S'Y'
sg15
(lp4112
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I3
sS'.thisIndex'
p4113
I3
sa(dp4114
g16
(lp4115
S'd'
asg18
S'N'
sS'.thisRepN'
p4116
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4117
I9
sS'.thisN'
p4118
I515
sg25
S'Y'
sg15
(lp4119
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I5
sS'.thisIndex'
p4120
I5
sa(dp4121
g16
(lp4122
S'd'
asg18
S'Y'
sS'.thisRepN'
p4123
I46
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4124
I10
sS'.thisN'
p4125
I516
sg25
S'Y'
sg15
(lp4126
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4127
S'space'
p4128
asg96
I8
sS'.thisIndex'
p4129
I8
sa(dp4130
g16
(lp4131
S'k'
asg18
S'Y'
sS'.thisRepN'
p4132
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4133
I0
sS'.thisN'
p4134
I517
sg25
S'Y'
sg15
(lp4135
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4136
S'space'
p4137
asg96
I1
sS'.thisIndex'
p4138
I1
sa(dp4139
g16
(lp4140
S'k'
asg18
S'N'
sS'.thisRepN'
p4141
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4142
I1
sS'.thisN'
p4143
I518
sg25
S'Y'
sg15
(lp4144
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I1
sS'.thisIndex'
p4145
I1
sa(dp4146
g16
(lp4147
S'd'
asg18
S'N'
sS'.thisRepN'
p4148
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4149
I2
sS'.thisN'
p4150
I519
sg25
S'Y'
sg15
(lp4151
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I8
sS'.thisIndex'
p4152
I8
sa(dp4153
g16
(lp4154
S'k'
asg18
S'Y'
sS'.thisRepN'
p4155
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4156
I3
sS'.thisN'
p4157
I520
sg25
S'Y'
sg15
(lp4158
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4159
S'space'
p4160
asg96
I10
sS'.thisIndex'
p4161
I10
sa(dp4162
g16
(lp4163
S'd'
asg18
S'Y'
sS'.thisRepN'
p4164
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4165
I4
sS'.thisN'
p4166
I521
sg25
S'Y'
sg15
(lp4167
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4168
S'space'
p4169
asg96
I4
sS'.thisIndex'
p4170
I4
sa(dp4171
g16
(lp4172
S'k'
asg18
S'Y'
sS'.thisRepN'
p4173
I47
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4174
I5
sS'.thisN'
p4175
I522
sg25
S'Y'
sg15
(lp4176
S'k'
asg30
g31
sg17
S'N'
sg14
I11
sg19
(lp4177
S'd'
asg96
I10
sS'.thisIndex'
p4178
I10
sa(dp4179
g16
(lp4180
S'd'
asg18
S'Y'
sS'.thisRepN'
p4181
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4182
I6
sS'.thisN'
p4183
I523
sg25
S'Y'
sg15
(lp4184
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4185
S'space'
p4186
asg96
I6
sS'.thisIndex'
p4187
I6
sa(dp4188
g16
(lp4189
S'd'
asg18
S'N'
sS'.thisRepN'
p4190
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4191
I7
sS'.thisN'
p4192
I524
sg25
S'Y'
sg15
(lp4193
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I7
sS'.thisIndex'
p4194
I7
sa(dp4195
g16
(lp4196
S'k'
asg18
S'Y'
sS'.thisRepN'
p4197
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4198
I8
sS'.thisN'
p4199
I525
sg25
S'Y'
sg15
(lp4200
S'k'
asg30
g31
sg17
S'N'
sg14
I11
sg19
(lp4201
S'space'
p4202
asg96
I6
sS'.thisIndex'
p4203
I6
sa(dp4204
g16
(lp4205
S'k'
asg18
S'N'
sS'.thisRepN'
p4206
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4207
I9
sS'.thisN'
p4208
I526
sg25
S'Y'
sg15
(lp4209
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I1
sS'.thisIndex'
p4210
I1
sa(dp4211
g16
(lp4212
S'd'
asg18
S'Y'
sS'.thisRepN'
p4213
I47
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4214
I10
sS'.thisN'
p4215
I527
sg25
S'Y'
sg15
(lp4216
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4217
S'space'
p4218
asg96
I10
sS'.thisIndex'
p4219
I10
sa(dp4220
g16
(lp4221
S'd'
asg18
S'Y'
sS'.thisRepN'
p4222
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4223
I0
sS'.thisN'
p4224
I528
sg25
S'Y'
sg15
(lp4225
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4226
S'space'
p4227
asg96
I0
sS'.thisIndex'
p4228
I0
sa(dp4229
g16
(lp4230
S'd'
asg18
S'N'
sS'.thisRepN'
p4231
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4232
I1
sS'.thisN'
p4233
I529
sg25
S'Y'
sg15
(lp4234
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I9
sS'.thisIndex'
p4235
I9
sa(dp4236
g16
(lp4237
S'k'
asg18
S'N'
sS'.thisRepN'
p4238
I48
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4239
I2
sS'.thisN'
p4240
I530
sg25
S'Y'
sg15
(lp4241
S'k'
asg30
g31
sg17
S'N'
sg14
I11
sg19
(lp4242
S'space'
p4243
asg96
I10
sS'.thisIndex'
p4244
I10
sa(dp4245
g16
(lp4246
S'd'
asg18
S'Y'
sS'.thisRepN'
p4247
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4248
I3
sS'.thisN'
p4249
I531
sg25
S'Y'
sg15
(lp4250
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4251
S'space'
p4252
asg96
I4
sS'.thisIndex'
p4253
I4
sa(dp4254
g16
(lp4255
S'd'
asg18
S'Y'
sS'.thisRepN'
p4256
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4257
I4
sS'.thisN'
p4258
I532
sg25
S'Y'
sg15
(lp4259
S'd'
asg30
g31
sg17
S'N'
sg14
I11
sg19
(lp4260
S'space'
p4261
asg96
I0
sS'.thisIndex'
p4262
I0
sa(dp4263
g16
(lp4264
S'd'
asg18
S'Y'
sS'.thisRepN'
p4265
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4266
I5
sS'.thisN'
p4267
I533
sg25
S'Y'
sg15
(lp4268
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4269
S'space'
p4270
asg96
I10
sS'.thisIndex'
p4271
I10
sa(dp4272
g16
(lp4273
S'k'
asg18
S'N'
sS'.thisRepN'
p4274
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4275
I6
sS'.thisN'
p4276
I534
sg25
S'Y'
sg15
(lp4277
S'k'
asg30
g31
sg17
S'N'
sg14
I11
sg19
Nsg96
I9
sS'.thisIndex'
p4278
I9
sa(dp4279
g16
(lp4280
S'd'
asg18
S'N'
sS'.thisRepN'
p4281
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4282
I7
sS'.thisN'
p4283
I535
sg25
S'Y'
sg15
(lp4284
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I7
sS'.thisIndex'
p4285
I7
sa(dp4286
g16
(lp4287
S'd'
asg18
S'N'
sS'.thisRepN'
p4288
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4289
I8
sS'.thisN'
p4290
I536
sg25
S'Y'
sg15
(lp4291
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I7
sS'.thisIndex'
p4292
I7
sa(dp4293
g16
(lp4294
S'k'
asg18
S'N'
sS'.thisRepN'
p4295
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4296
I9
sS'.thisN'
p4297
I537
sg25
S'Y'
sg15
(lp4298
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I2
sS'.thisIndex'
p4299
I2
sa(dp4300
g16
(lp4301
S'k'
asg18
S'N'
sS'.thisRepN'
p4302
I48
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4303
I10
sS'.thisN'
p4304
I538
sg25
S'Y'
sg15
(lp4305
S'k'
asg30
g31
sg17
S'N'
sg14
I11
sg19
Nsg96
I0
sS'.thisIndex'
p4306
I0
sa(dp4307
g16
(lp4308
S'd'
asg18
S'Y'
sS'.thisRepN'
p4309
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4310
I0
sS'.thisN'
p4311
I539
sg25
S'Y'
sg15
(lp4312
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4313
S'space'
p4314
asg96
I0
sS'.thisIndex'
p4315
I0
sa(dp4316
g16
(lp4317
S'd'
asg18
S'Y'
sS'.thisRepN'
p4318
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4319
I1
sS'.thisN'
p4320
I540
sg25
S'Y'
sg15
(lp4321
S'd'
asg30
g31
sg17
S'N'
sg14
I11
sg19
(lp4322
S'space'
p4323
asg96
I2
sS'.thisIndex'
p4324
I2
sa(dp4325
g16
(lp4326
S'd'
asg18
S'N'
sS'.thisRepN'
p4327
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4328
I2
sS'.thisN'
p4329
I541
sg25
S'Y'
sg15
(lp4330
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I9
sS'.thisIndex'
p4331
I9
sa(dp4332
g16
(lp4333
S'd'
asg18
S'Y'
sS'.thisRepN'
p4334
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4335
I3
sS'.thisN'
p4336
I542
sg25
S'Y'
sg15
(lp4337
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
(lp4338
S'space'
p4339
asg96
I10
sS'.thisIndex'
p4340
I10
sa(dp4341
g16
(lp4342
S'd'
asg18
S'N'
sS'.thisRepN'
p4343
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4344
I4
sS'.thisN'
p4345
I543
sg25
S'Y'
sg15
(lp4346
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I7
sS'.thisIndex'
p4347
I7
sa(dp4348
g16
(lp4349
S'd'
asg18
S'Y'
sS'.thisRepN'
p4350
I49
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4351
I5
sS'.thisN'
p4352
I544
sg25
S'Y'
sg15
(lp4353
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I5
sS'.thisIndex'
p4354
I5
sa(dp4355
g16
(lp4356
S'd'
asg18
S'N'
sS'.thisRepN'
p4357
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4358
I6
sS'.thisN'
p4359
I545
sg25
S'Y'
sg15
(lp4360
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I4
sS'.thisIndex'
p4361
I4
sa(dp4362
g16
(lp4363
S'k'
asg18
S'N'
sS'.thisRepN'
p4364
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4365
I7
sS'.thisN'
p4366
I546
sg25
S'Y'
sg15
(lp4367
S'd'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I8
sS'.thisIndex'
p4368
I8
sa(dp4369
g16
(lp4370
S'd'
asg18
S'N'
sS'.thisRepN'
p4371
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4372
I8
sS'.thisN'
p4373
I547
sg25
S'Y'
sg15
(lp4374
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I2
sS'.thisIndex'
p4375
I2
sa(dp4376
g16
(lp4377
S'd'
asg18
S'N'
sS'.thisRepN'
p4378
I49
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4379
I9
sS'.thisN'
p4380
I548
sg25
S'Y'
sg15
(lp4381
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I0
sS'.thisIndex'
p4382
I0
sa(dp4383
g16
(lp4384
S'd'
asg18
S'N'
sg22
I41
sg26
S'Y'
sS'.thisN'
p4385
I549
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4386
I10
sS'.thisRepN'
p4387
I49
sg21
I42
sg25
S'Y'
sg23
I25
sg15
(lp4388
S'k'
asg30
g31
sg17
S'Y'
sg14
I11
sg19
Nsg96
I10
sS'.thisIndex'
p4389
I10
sa(dp4390
g16
(lp4391
S'd'
asS'.thisIndex'
p4392
I9
sS'.thisRepN'
p4393
I50
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p4394
I0
sS'.thisN'
p4395
I550
sg25
S'Y'
sg15
(lp4396
S'k'
asg17
S'Y'
sg14
I12
sg96
I9
sa(dp4397
g16
(lp4398
S'd'
asS'.thisIndex'
p4399
I6
sS'.thisRepN'
p4400
I50
sg26
S'Y'
sg30
g31
sg32
g33
sS'.thisTrialN'
p4401
I1
sS'.thisN'
p4402
I551
sg25
S'Y'
sg15
(lp4403
S'k'
asg17
S'Y'
sg14
I12
sg96
I6
sa(dp4404
g16
(lp4405
S'k'
asg18
S'Y'
sS'.thisRepN'
p4406
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4407
I2
sS'.thisN'
p4408
I552
sg25
S'Y'
sg15
(lp4409
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4410
S'space'
p4411
asg96
I4
sS'.thisIndex'
p4412
I4
sa(dp4413
g16
(lp4414
S'd'
asg18
S'N'
sS'.thisRepN'
p4415
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4416
I3
sS'.thisN'
p4417
I553
sg25
S'Y'
sg15
(lp4418
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I9
sS'.thisIndex'
p4419
I9
sa(dp4420
g16
(lp4421
S'k'
asg18
S'Y'
sS'.thisRepN'
p4422
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4423
I4
sS'.thisN'
p4424
I554
sg25
S'Y'
sg15
(lp4425
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4426
S'space'
p4427
asg96
I4
sS'.thisIndex'
p4428
I4
sa(dp4429
g16
(lp4430
S'd'
asg18
S'N'
sS'.thisRepN'
p4431
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4432
I5
sS'.thisN'
p4433
I555
sg25
S'Y'
sg15
(lp4434
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I4
sS'.thisIndex'
p4435
I4
sa(dp4436
g16
(lp4437
S'k'
asg18
S'N'
sS'.thisRepN'
p4438
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4439
I6
sS'.thisN'
p4440
I556
sg25
S'Y'
sg15
(lp4441
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I9
sS'.thisIndex'
p4442
I9
sa(dp4443
g16
(lp4444
S'd'
asg18
S'Y'
sS'.thisRepN'
p4445
I50
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4446
I7
sS'.thisN'
p4447
I557
sg25
S'Y'
sg15
(lp4448
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I10
sS'.thisIndex'
p4449
I10
sa(dp4450
g16
(lp4451
S'd'
asg18
S'N'
sS'.thisRepN'
p4452
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4453
I8
sS'.thisN'
p4454
I558
sg25
S'Y'
sg15
(lp4455
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I7
sS'.thisIndex'
p4456
I7
sa(dp4457
g16
(lp4458
S'd'
asg18
S'N'
sS'.thisRepN'
p4459
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4460
I9
sS'.thisN'
p4461
I559
sg25
S'Y'
sg15
(lp4462
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I9
sS'.thisIndex'
p4463
I9
sa(dp4464
g16
(lp4465
S'k'
asg18
S'N'
sS'.thisRepN'
p4466
I50
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4467
I10
sS'.thisN'
p4468
I560
sg25
S'Y'
sg15
(lp4469
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I9
sS'.thisIndex'
p4470
I9
sa(dp4471
g16
(lp4472
S'k'
asg18
S'Y'
sS'.thisRepN'
p4473
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4474
I0
sS'.thisN'
p4475
I561
sg25
S'Y'
sg15
(lp4476
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4477
S'space'
p4478
asg96
I6
sS'.thisIndex'
p4479
I6
sa(dp4480
g16
(lp4481
S'd'
asg18
S'N'
sS'.thisRepN'
p4482
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4483
I1
sS'.thisN'
p4484
I562
sg25
S'Y'
sg15
(lp4485
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I7
sS'.thisIndex'
p4486
I7
sa(dp4487
g16
(lp4488
S'd'
asg18
S'Y'
sS'.thisRepN'
p4489
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4490
I2
sS'.thisN'
p4491
I563
sg25
S'Y'
sg15
(lp4492
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4493
S'space'
p4494
asg96
I4
sS'.thisIndex'
p4495
I4
sa(dp4496
g16
(lp4497
S'k'
asg18
S'Y'
sS'.thisRepN'
p4498
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4499
I3
sS'.thisN'
p4500
I564
sg25
S'Y'
sg15
(lp4501
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4502
S'space'
p4503
asg96
I1
sS'.thisIndex'
p4504
I1
sa(dp4505
g16
(lp4506
S'd'
asg18
S'Y'
sS'.thisRepN'
p4507
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4508
I4
sS'.thisN'
p4509
I565
sg25
S'Y'
sg15
(lp4510
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4511
S'space'
p4512
asg96
I0
sS'.thisIndex'
p4513
I0
sa(dp4514
g16
(lp4515
S'd'
asg18
S'N'
sS'.thisRepN'
p4516
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4517
I5
sS'.thisN'
p4518
I566
sg25
S'Y'
sg15
(lp4519
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I4
sS'.thisIndex'
p4520
I4
sa(dp4521
g16
(lp4522
S'd'
asg18
S'N'
sS'.thisRepN'
p4523
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4524
I6
sS'.thisN'
p4525
I567
sg25
S'Y'
sg15
(lp4526
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I10
sS'.thisIndex'
p4527
I10
sa(dp4528
g16
(lp4529
S'k'
asg18
S'Y'
sS'.thisRepN'
p4530
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4531
I7
sS'.thisN'
p4532
I568
sg25
S'Y'
sg15
(lp4533
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4534
S'space'
p4535
asg96
I6
sS'.thisIndex'
p4536
I6
sa(dp4537
g16
(lp4538
S'd'
asg18
S'Y'
sS'.thisRepN'
p4539
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4540
I8
sS'.thisN'
p4541
I569
sg25
S'Y'
sg15
(lp4542
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4543
S'space'
p4544
asg96
I5
sS'.thisIndex'
p4545
I5
sa(dp4546
g16
(lp4547
S'k'
asg18
S'Y'
sS'.thisRepN'
p4548
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4549
I9
sS'.thisN'
p4550
I570
sg25
S'Y'
sg15
(lp4551
S'k'
asg30
g31
sg17
S'N'
sg14
I12
sg19
(lp4552
S'space'
p4553
asg96
I3
sS'.thisIndex'
p4554
I3
sa(dp4555
g16
(lp4556
S'k'
asg18
S'N'
sS'.thisRepN'
p4557
I51
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4558
I10
sS'.thisN'
p4559
I571
sg25
S'Y'
sg15
(lp4560
S'k'
asg30
g31
sg17
S'N'
sg14
I12
sg19
Nsg96
I2
sS'.thisIndex'
p4561
I2
sa(dp4562
g16
(lp4563
S'd'
asg18
S'N'
sS'.thisRepN'
p4564
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4565
I0
sS'.thisN'
p4566
I572
sg25
S'Y'
sg15
(lp4567
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I1
sS'.thisIndex'
p4568
I1
sa(dp4569
g16
(lp4570
S'k'
asg18
S'N'
sS'.thisRepN'
p4571
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4572
I1
sS'.thisN'
p4573
I573
sg25
S'Y'
sg15
(lp4574
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I3
sS'.thisIndex'
p4575
I3
sa(dp4576
g16
(lp4577
S'k'
asg18
S'Y'
sS'.thisRepN'
p4578
I52
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4579
I2
sS'.thisN'
p4580
I574
sg25
S'Y'
sg15
(lp4581
S'k'
asg30
g31
sg17
S'N'
sg14
I12
sg19
Nsg96
I4
sS'.thisIndex'
p4582
I4
sa(dp4583
g16
(lp4584
S'd'
asg18
S'N'
sS'.thisRepN'
p4585
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4586
I3
sS'.thisN'
p4587
I575
sg25
S'Y'
sg15
(lp4588
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I5
sS'.thisIndex'
p4589
I5
sa(dp4590
g16
(lp4591
S'd'
asg18
S'Y'
sS'.thisRepN'
p4592
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4593
I4
sS'.thisN'
p4594
I576
sg25
S'Y'
sg15
(lp4595
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4596
S'space'
p4597
asg96
I8
sS'.thisIndex'
p4598
I8
sa(dp4599
g16
(lp4600
S'd'
asg18
S'N'
sS'.thisRepN'
p4601
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4602
I5
sS'.thisN'
p4603
I577
sg25
S'Y'
sg15
(lp4604
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I2
sS'.thisIndex'
p4605
I2
sa(dp4606
g16
(lp4607
S'k'
asg18
S'N'
sS'.thisRepN'
p4608
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4609
I6
sS'.thisN'
p4610
I578
sg25
S'Y'
sg15
(lp4611
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I9
sS'.thisIndex'
p4612
I9
sa(dp4613
g16
(lp4614
S'k'
asg18
S'N'
sS'.thisRepN'
p4615
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4616
I7
sS'.thisN'
p4617
I579
sg25
S'Y'
sg15
(lp4618
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I5
sS'.thisIndex'
p4619
I5
sa(dp4620
g16
(lp4621
S'k'
asg18
S'Y'
sS'.thisRepN'
p4622
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4623
I8
sS'.thisN'
p4624
I580
sg25
S'Y'
sg15
(lp4625
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4626
S'space'
p4627
asg96
I5
sS'.thisIndex'
p4628
I5
sa(dp4629
g16
(lp4630
S'k'
asg18
S'Y'
sS'.thisRepN'
p4631
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4632
I9
sS'.thisN'
p4633
I581
sg25
S'Y'
sg15
(lp4634
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4635
S'space'
p4636
asg96
I7
sS'.thisIndex'
p4637
I7
sa(dp4638
g16
(lp4639
S'k'
asg18
S'N'
sS'.thisRepN'
p4640
I52
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4641
I10
sS'.thisN'
p4642
I582
sg25
S'Y'
sg15
(lp4643
S'k'
asg30
g31
sg17
S'N'
sg14
I12
sg19
Nsg96
I0
sS'.thisIndex'
p4644
I0
sa(dp4645
g16
(lp4646
S'd'
asg18
S'N'
sS'.thisRepN'
p4647
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4648
I0
sS'.thisN'
p4649
I583
sg25
S'Y'
sg15
(lp4650
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I4
sS'.thisIndex'
p4651
I4
sa(dp4652
g16
(lp4653
S'k'
asg18
S'N'
sS'.thisRepN'
p4654
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4655
I1
sS'.thisN'
p4656
I584
sg25
S'Y'
sg15
(lp4657
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I10
sS'.thisIndex'
p4658
I10
sa(dp4659
g16
(lp4660
S'd'
asg18
S'Y'
sS'.thisRepN'
p4661
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4662
I2
sS'.thisN'
p4663
I585
sg25
S'Y'
sg15
(lp4664
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4665
S'space'
p4666
asg96
I4
sS'.thisIndex'
p4667
I4
sa(dp4668
g16
(lp4669
S'd'
asg18
S'N'
sS'.thisRepN'
p4670
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4671
I3
sS'.thisN'
p4672
I586
sg25
S'Y'
sg15
(lp4673
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I7
sS'.thisIndex'
p4674
I7
sa(dp4675
g16
(lp4676
S'd'
asg18
S'N'
sS'.thisRepN'
p4677
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4678
I4
sS'.thisN'
p4679
I587
sg25
S'Y'
sg15
(lp4680
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I4
sS'.thisIndex'
p4681
I4
sa(dp4682
g16
(lp4683
S'k'
asg18
S'N'
sS'.thisRepN'
p4684
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4685
I5
sS'.thisN'
p4686
I588
sg25
S'Y'
sg15
(lp4687
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I3
sS'.thisIndex'
p4688
I3
sa(dp4689
g16
(lp4690
S'd'
asg18
S'N'
sS'.thisRepN'
p4691
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4692
I6
sS'.thisN'
p4693
I589
sg25
S'Y'
sg15
(lp4694
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I7
sS'.thisIndex'
p4695
I7
sa(dp4696
g16
(lp4697
S'd'
asg18
S'N'
sS'.thisRepN'
p4698
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4699
I7
sS'.thisN'
p4700
I590
sg25
S'Y'
sg15
(lp4701
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I10
sS'.thisIndex'
p4702
I10
sa(dp4703
g16
(lp4704
S'd'
asg18
S'N'
sS'.thisRepN'
p4705
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4706
I8
sS'.thisN'
p4707
I591
sg25
S'Y'
sg15
(lp4708
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I4
sS'.thisIndex'
p4709
I4
sa(dp4710
g16
(lp4711
S'd'
asg18
S'N'
sS'.thisRepN'
p4712
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4713
I9
sS'.thisN'
p4714
I592
sg25
S'Y'
sg15
(lp4715
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I7
sS'.thisIndex'
p4716
I7
sa(dp4717
g16
(lp4718
S'd'
asg18
S'N'
sS'.thisRepN'
p4719
I53
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4720
I10
sS'.thisN'
p4721
I593
sg25
S'Y'
sg15
(lp4722
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I5
sS'.thisIndex'
p4723
I5
sa(dp4724
g16
(lp4725
S'd'
asg18
S'Y'
sS'.thisRepN'
p4726
I54
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4727
I0
sS'.thisN'
p4728
I594
sg25
S'Y'
sg15
(lp4729
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
(lp4730
S'space'
p4731
asg96
I2
sS'.thisIndex'
p4732
I2
sa(dp4733
g16
(lp4734
S'k'
asg18
S'N'
sS'.thisRepN'
p4735
I54
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4736
I1
sS'.thisN'
p4737
I595
sg25
S'Y'
sg15
(lp4738
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I0
sS'.thisIndex'
p4739
I0
sa(dp4740
g16
(lp4741
S'k'
asg18
S'N'
sS'.thisRepN'
p4742
I54
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4743
I2
sS'.thisN'
p4744
I596
sg25
S'Y'
sg15
(lp4745
S'k'
asg30
g31
sg17
S'N'
sg14
I12
sg19
Nsg96
I8
sS'.thisIndex'
p4746
I8
sa(dp4747
g16
(lp4748
S'k'
asg18
S'Y'
sS'.thisRepN'
p4749
I54
sg26
S'Y'
sg20
S'N'
sg32
g33
sS'.thisTrialN'
p4750
I3
sS'.thisN'
p4751
I597
sg25
S'Y'
sg15
(lp4752
S'd'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I1
sS'.thisIndex'
p4753
I1
sa(dp4754
g16
(lp4755
S'k'
asg18
S'Y'
sS'.thisRepN'
p4756
I54
sg26
S'Y'
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4757
I4
sS'.thisN'
p4758
I598
sg25
S'Y'
sg15
(lp4759
S'k'
asg30
g31
sg17
S'N'
sg14
I12
sg19
(lp4760
S'space'
p4761
asg96
I9
sS'.thisIndex'
p4762
I9
sa(dp4763
g16
(lp4764
S'd'
asg18
S'N'
sg22
I45
sg26
S'Y'
sS'.thisN'
p4765
I599
sg20
S'Y'
sg32
g33
sS'.thisTrialN'
p4766
I5
sS'.thisRepN'
p4767
I54
sg21
I44
sg25
S'Y'
sg23
I18
sg15
(lp4768
S'k'
asg30
g31
sg17
S'Y'
sg14
I12
sg19
Nsg96
I5
sS'.thisIndex'
p4769
I5
sasS'loops'
p4770
(lp4771
g1
(g36
g3
NtRp4772
(dp4773
g39
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4774
sg41
(lp4775
sg42
I74996048
sg10
S''
sg6
g43
sg44
I1
sg27
I01
sg28
Nsg45
g1
(g46
g47
(dp4776
g49
g50
(g51
g52
g53
S'b'
tRp4777
(I1
(I600
I1
tg56
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg57
g50
(g51
g52
g53
S'b'
tRp4778
(I1
(I600
I1
tg56
I00
S'\x00\x00\xdaC\x00\x00\xd9C\x00\x00\'C\x00\x80\xf6C\x00\x00\x06D\x00\x00\x9aB\x00\xc0\x0cD\x00\x80\x90C\x00\x00\xbdC\x00\x00\xfaC\x00\x00wC\x00@\rD\x00\x00UC\x00\x80\xd5C\x00\x80\x00D\x00\x00\x0eC\x00\x00{C\x00\x00\x8aB\x00\x80\xbcC\x00\x00\xb1C\x00\xc0\x0bD\x00\x00\x03C\x00\x80\xa0C\x00\x00\xe1C\x00\x00\xd4B\x00\xc0\x03D\x00\x00 C\x00\x80\xf5C\x00\xc0\x00D\x00\x00\x94C\x00\x00\x04D\x00\x00\xaeC\x00\x00*C\x00\x00\xdcB\x00\x00\\B\x00\x80\xaeC\x00\xc0\nD\x00\x00\xe4B\x00\x80\xd0C\x00\x00@A\x00\x00iC\x00\x80\xcbC\x00\x00$B\x00\x00\x07D\x00\x00\x1cC\x00\x00CC\x00\x00\x91C\x00\x00GC\x00\x00#C\x00\x80\x89C\x00@\x13D\x00\x00)C\x00\x00\xd6C\x00\x00\x8bC\x00\x00\xf1C\x00\x80\xd2C\x00\x00\xcfC\x00\x000A\x00\x00\x05C\x00\x00\xe0C\x00\x80\xa4C\x00\x00\x9eB\x00\x00bC\x00\x80\xc0C\x00\x00\x00\x00\x00\x00\x04C\x00\x00\xc0A\x00\x00\x87C\x00\x00\x98C\x00\x00\x08D\x00\x00\xddC\x00\x00\x11C\x00\xc0\x13D\x00\x80\x0bD\x00\x00\x18C\x00\x00\x90B\x00\x80\x13D\x00\x00\xb0A\x00\x80\x8bC\x00@\x05D\x00\x00[C\x00\x80\xe0C\x00\x00nC\x00\x00\xbeB\x00\x00@C\x00\xc0\x06D\x00\x00\xacB\x00\x80\x9cC\x00\x00\xc0@\x00\x00"C\x00\x00\x00C\x00\x00\xeeC\x00\xc0\x02D\x00\x00\xb6B\x00\x00\xcaB\x00\x00\nC\x00\xc0\x12D\x00\x00\xeeB\x00\x80\xddC\x00\x002C\x00\x80\x93C\x00\x00\xedC\x00\x80\xefC\x00\x00dB\x00\x00\x81C\x00\x80\xd1C\x00\x00RC\x00\x80\xebC\x00\x007C\x00\x00\x03D\x00\x00XB\x00\x00\xa2C\x00\x00FC\x00@\x10D\x00\x00\xc6C\x00\x00\xc8C\x00\x00\x01C\x00\x00\xc1C\x00\x00JC\x00\x00\x00D\x00\x009C\x00\x00\xd3C\x00\x80\xbfC\x00\x80\x9fC\x00\x00\xd7C\x00@\x0bD\x00\x00\x1bC\x00\x00\x00@\x00\x80\xd9C\x00\x00oC\x00\xc0\x04D\x00@\tD\x00@\x04D\x00\x00sC\x00\x00mC\x00\xc0\x15D\x00\x80\xc1C\x00@\x02D\x00\x00\x88A\x00\x008C\x00\x003C\x00\x00\xafC\x00\x00\x98A\x00\x00\x88C\x00\x00\xdeC\x00\x00\x19C\x00\x00KC\x00\x00\xc7C\x00\x00\x8aC\x00\x80\xbaC\x00\x80\xadC\x00\x00\x80?\x00\x00\xf4C\x00@\x14D\x00\x00\xb0C\x00\x00\x0bC\x00\x80\xd8C\x00\xc0\x01D\x00\x00\xc8B\x00\x80\xcfC\x00\x00\xb4B\x00\x80\tD\x00@\x0eD\x00\x00\x99C\x00\x00\xaaB\x00\x00\xe2B\x00\x00\xb7C\x00\x00\xc0B\x00\x80\xa2C\x00\x00\x9cB\x00\x80\x9eC\x00\x80\xa9C\x00\x80\xb6C\x00\x00AC\x00\xc0\x05D\x00\x00\xbaB\x00\x80\xb3C\x00\xc0\rD\x00\x80\xb4C\x00\x80\xc7C\x00\x80\x87C\x00\x00\xc5C\x00\x00IC\x00\x00\x8cC\x00\x80\rD\x00\x00\xeaC\x00\x80\x9bC\x00\x00\xf3C\x00\x00\x05D\x00\x00\x01D\x00\x000C\x00\x00?C\x00\x00\xe6B\x00\x00\x90C\x00\x00\x1fC\x00\x80\xe6C\x00\x80\xf1C\x00\x00SC\x00\x00\xceB\x00\xc0\x11D\x00\x80\xecC\x00\x00\x8eC\x00\x00BC\x00@\x08D\x00\x00\xf8C\x00\x00%C\x00\x80\x8dC\x00\x80\x12D\x00\x00qC\x00\x00\xe5C\x00\x00pA\x00\x00.C\x00\x00LB\x00\x00;C\x00@\x07D\x00\x80\x07D\x00\x008B\x00\x00\x94B\x00\x00tB\x00\x00(B\x00\x00\xacC\x00\x80\xd4C\x00\x00pC\x00\x00\xadC\x00\x80\x99C\x00\x00\x0fC\x00\x80\x95C\x00\xc0\tD\x00\x00rC\x00\x00\x0fD\x00\x00\xebC\x00\x80\xa3C\x00\x80\x97C\x00\x80\xf8C\x00\xc0\x08D\x00\x80\xd7C\x00\x00/C\x00\x00\xbeC\x00\x00xB\x00\x00\xdfC\x00\x00\x80@\x00\x80\xdeC\x00\x00\xc8A\x00\x80\xc9C\x00\x00\xf0B\x00\x80\xdaC\x00\x00\x14C\x00\x00\xfdC\x00\x00\xecC\x00\x00|C\x00\x00OC\x00\x001C\x00\x00\x8dC\x00@\x12D\x00\x80\xdcC\x00\x00\x7fC\x00\x00\x96C\x00\x80\xf3C\x00\x00NC\x00\x000B\x00\x00\xceC\x00\x00\xa6B\x00\x00\xb8B\x00@\nD\x00\x80\xe8C\x00\x00\x16C\x00\x004B\x00\x00hC\x00\x80\xc8C\x00\xc0\x07D\x00\x00\x1eC\x00\x00\x14D\x00\x00yC\x00\x00HC\x00\x80\xffC\x00\x80\xa7C\x00\x00PC\x00\x00\x83C\x00\x00\tD\x00\xc0\x0fD\x00\x00\x17C\x00\x00\x00B\x00\x00\xc3C\x00\x00,B\x00\x80\xd6C\x00\x00\xcdC\x00\x80\x8cC\x00\x80\x14D\x00\x00\xd8B\x00\x80\x0cD\x00\x80\x98C\x00\x00\xb0B\x00\x00\xa2B\x00\x80\xa1C\x00\x00]C\x00\x00+C\x00\x80\xa5C\x00\x00\xd0B\x00\x00\x10D\x00\x80\xf7C\x00\x80\x15D\x00@\x15D\x00\x00\xd5C\x00\x00\x9cC\x00\x00zC\x00\x00tC\x00\x00\xfaB\x00\x00\xa9C\x00\x80\xafC\x00\x00ZC\x00\x00\xd2C\x00\x00\xdcC\x00\x80\x82C\x00\x80\x85C\x00\x00\xe2C\x00@\x11D\x00\x00\xc6B\x00\x00WC\x00\x00\x8cB\x00\x80\x92C\x00\x80\x02D\x00\x00\xf5C\x00\x00^C\x00\x00-C\x00\x00vC\x00\x80\x9aC\x00\x80\xbdC\x00\x00\x0cC\x00\x00\x02C\x00@\x00D\x00\x80\xb5C\x00\xc0\x14D\x00\x00\x15C\x00\x80\xabC\x00\x00\xd0C\x00\x00uC\x00\x00\x18B\x00\x00\xc9C\x00\x00\x10C\x00\x00hB\x00\x80\x81C\x00\x00\x80A\x00\x00aC\x00\x00PA\x00\x80\x10D\x00\x00\xb4C\x00\x00\xe7C\x00\x00\x0cD\x00\x00\x13C\x00\x00\xfeC\x00\x80\xa8C\x00\x00\x82C\x00\x80\xe3C\x00\x00\x0eD\x00\x80\x11D\x00@\x0fD\x00\x80\xa6C\x00\x00\xe8A\x00\x00\x86B\x00\x00\x9dC\x00\x80\xfcC\x00\x80\xeaC\x00\x80\xe4C\x00\x00\xf8B\x00\x80\xfeC\x00\x00\x9bC\x00\x00\x0bD\x00\x80\xe7C\x00\x80\xfdC\x00\x00$C\x00\x00\xb5C\x00\x00\xe4C\x00\x00\xf7C\x00\x00\x86C\x00\x80\x84C\x00\x00\xc4B\x00\x00\x9fC\x00\x80\xbeC\x00\x00\x84B\x00\x00\xffC\x00\x00\xfcB\x00\x00\xa4B\x00\x00\x04B\x00\x00\x0cB\x00\x00XC\x00\x00YC\x00\x00\tC\x00\x00\xf4B\x00\x00:C\x00\x80\xb9C\x00\x00\xc0C\x00\x00\xa0C\x00\x80\x8fC\x00\x00\xccB\x00\x00\x84C\x00\x00\xf0C\x00\x80\x08D\x00\x00\xb3C\x00\x80\x05D\x00@\x0cD\x00\x00\rD\x00\x80\xc6C\x00\x80\xedC\x00\x00\xa4C\x00\x00\x97C\x00\x80\xc3C\x00\x00\xefC\x00\x00pB\x00\x00\xa8C\x00\x005C\x00\x00\x13D\x00\x00\x10B\x00\x00lB\x00\x00|B\x00\x00TC\x00\x00&C\x00\x00\xd1C\x00\x00\xa8B\x00\x00DB\x00\x00\x12C\x00\x00\x88B\x00\x80\x0fD\x00\x00@B\x00\x00\xa8A\x00\x80\xfbC\x00\x00\xdbC\x00\x00DC\x00@\x01D\x00\x80\xfaC\x00\x00gC\x00\x00lC\x00\x00\xb9C\x00\x00!C\x00\x00\x96B\x00\x00\x08C\x00\x00\x00A\x00\x80\nD\x00\x00\xd8C\x00\x00\xa0A\x00\x006C\x00\x00\xa1C\x00\x80\xf2C\x00\x80\xf9C\x00\x00\x8eB\x00\x80\xbbC\x00\x80\xaaC\x00\x00@@\x00\x00\x9eC\x00\x00\x14B\x00\x80\xdfC\x00\x00\xbcB\x00\x00\xf8A\x00\x00\xecB\x00\x00\xbbC\x00\x00 B\x00\x00\xdaB\x00\x00 A\x00\x00\xc2B\x00\x00\xb2B\x00\x80\xc4C\x00\x00\xb8C\x00@\x06D\x00\x00\xa0@\x00\x00\xc2C\x00\x00\xa5C\x00\x80\x80C\x00\x00\xb6C\x00\x80\x9dC\x00\x80\x88C\x00\x80\x04D\x00\x00\xaaC\x00\x00\xe8B\x00\x00\xe0A\x00\x00\xe9C\x00\x00\xa0B\x00\x00\x9aC\x00\x00jC\x00\x00QC\x00\x00\x93C\x00\x00(C\x00\x00\xdeB\x00\x00xC\x00\x00=C\x00\x00\xcaC\x00\x00\xf9C\x00\x80\x01D\x00\x00~C\x00\x80\xc2C\x00\x00kC\x00\x00\xe3C\x00\x00\x92C\x00\x00\x82B\x00\x004C\x00\x00\xa7C\x00\x00\nD\x00\x00fC\x00\x00\xd4C\x00\x80\xe1C\x00\x00\x98B\x00\x00EC\x00\x00\xd0A\x00\x00\x10A\x00@\x03D\x00\x00\x1aC\x00\x00\xe0B\x00\x00\xb2C\x00\x00\xe8C\x00\x00\x06C\x00\x00\xabC\x00\x80\xe2C\x00\x80\x86C\x00\x00\xa3C\x00\x80\xeeC\x00\x00LC\x00\x00\x85C\x00\x00dC\x00\x80\x06D\x00\x80\x91C\x00\x80\xb7C\x00\x80\xe5C\x00\x00<C\x00\x00\x02D\x00\x00\x8fC\x00\x00\xf0A\x00\x80\xf0C\x00\x00\x1dC\x00\x00HB\x00\x00\x89C\x00\x80\x0eD\x00\x00\xa6C\x00\x00\x95C\x00\x00\xd2B\x00\x00\\C\x00\x80\xcdC\x00\x00\xd8A\x00\x00\x90A\x00\x00\xf2C\x00\x00\rC\x00\x00\x80C\x00\x00_C\x00\x80\x94C\x00\xc0\x10D\x00\x00\xfcC\x00\x00\xf6B\x00\x00\xf2B\x00\x00\xf6C\x00\x80\xd3C\x00\x00`A\x00\x80\xe9C\x00\x00\xeaB\x00\x80\x8aC\x00\xc0\x0eD\x00\x00>C\x00\x00\xbcC\x00\x00\x92B\x00\x00\x07C\x00\x00\x15D\x00\x80\xb0C\x00\x00\xe0@\x00\x80\xccC\x00\x80\xcaC\x00\x80\xdbC\x00\x80\xb2C\x00\x00\x12D\x00\x80\x8eC\x00\x00\x80B\x00\x00\xfbC\x00\x80\x83C\x00\x00\x1cB\x00\x00cC\x00\x80\xc5C\x00\x00\xcbC\x00\x00\xccC\x00\x00,C\x00\x00PB\x00\x00\xbaC\x00\x00\x08B\x00\x00\xbfC\x00\x80\xb8C\x00\x80\xb1C\x00\x00}C\x00\x00VC\x00\x80\xacC\x00\x80\xceC\x00\x00\xfeB\x00\x00TB\x00\x00\x11D\x00\x80\x03D\x00\x00\xe6C\x00\x80\xf4C\x00\x00`B\x00\x00\xb8A\x00\x00\xd6B\x00\x00<B\x00\x80\x96C\x00\x00\xc4C\x00\x00eC\x00\x00MC\x00\x00\xaeB\x00\x00`C'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4779
(dp4780
g61
(dp4781
g49
I01
sg57
I01
ssg63
g4772
sg64
(lp4782
g49
ag57
asg66
(lp4783
I600
aI1
asbsg68
S'random'
p4784
sg70
g71
(g52
(I0
tS'b'
tRp4785
(I1
(I600
I1
tg55
(S'i4'
I0
I1
tRp4786
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'@\x00\x00\x00\x97\x00\x00\x00\x7f\x00\x00\x00\xbe\x01\x00\x00\xf0\x00\x00\x00\xce\x01\x00\x00X\x00\x00\x00.\x02\x00\x00\xb3\x01\x00\x00\xf5\x01\x00\x00\xc8\x01\x00\x009\x00\x00\x00\'\x00\x00\x00W\x01\x00\x00#\x02\x00\x00\xd2\x00\x00\x00U\x01\x00\x00\x8a\x00\x00\x00\x17\x02\x00\x00\x8e\x00\x00\x00\xb6\x01\x00\x00\xa7\x01\x00\x00M\x00\x00\x00O\x02\x00\x00B\x00\x00\x00\xf2\x00\x00\x00\xf4\x01\x00\x00\x16\x02\x00\x00\xd8\x01\x00\x00e\x01\x00\x00\x0b\x02\x00\x00\xc3\x01\x00\x00\x19\x01\x00\x00~\x01\x00\x00@\x02\x00\x00\x7f\x01\x00\x00\x9b\x01\x00\x00\xc0\x01\x00\x00P\x01\x00\x008\x02\x00\x00\xc6\x01\x00\x00*\x00\x00\x00\xdb\x00\x00\x00\x1b\x01\x00\x00\x03\x01\x00\x00\n\x01\x00\x00\xd8\x00\x00\x00Q\x02\x00\x00\xa6\x01\x00\x00\xa2\x01\x00\x00\x0e\x02\x00\x00\xd4\x00\x00\x00>\x02\x00\x00I\x02\x00\x00n\x00\x00\x00"\x00\x00\x00N\x02\x00\x00g\x00\x00\x00S\x01\x00\x00\x9c\x01\x00\x00\x97\x01\x00\x00\xda\x00\x00\x00\xee\x00\x00\x00\x9d\x01\x00\x005\x02\x00\x00\xeb\x01\x00\x00z\x01\x00\x00f\x01\x00\x00\xa4\x01\x00\x00\x11\x00\x00\x00>\x01\x00\x00\xbb\x01\x00\x00K\x00\x00\x00*\x02\x00\x00\xd9\x00\x00\x00\xb1\x01\x00\x00\xf2\x01\x00\x00\x05\x00\x00\x00\xa9\x00\x00\x00=\x00\x00\x00\xda\x01\x00\x00$\x01\x00\x00}\x01\x00\x00\x05\x01\x00\x00\xa1\x01\x00\x00\xa4\x00\x00\x00V\x00\x00\x00V\x02\x00\x00#\x01\x00\x00\xca\x01\x00\x00\xa0\x00\x00\x00]\x00\x00\x00\x06\x01\x00\x00\xaf\x00\x00\x00\xc2\x01\x00\x00S\x00\x00\x00\xa7\x00\x00\x00\xc9\x01\x00\x00w\x01\x00\x00<\x01\x00\x00\x9e\x00\x00\x00^\x00\x00\x00\x89\x01\x00\x00\xc6\x00\x00\x00)\x01\x00\x00\x13\x02\x00\x00\x18\x00\x00\x00P\x02\x00\x00 \x01\x00\x00\xc7\x01\x00\x00!\x00\x00\x00\xe0\x01\x00\x00\xf8\x01\x00\x00\xa5\x00\x00\x00%\x00\x00\x00\xc0\x00\x00\x00\xd7\x01\x00\x00%\x02\x00\x00\xc4\x01\x00\x00a\x00\x00\x00\xf4\x00\x00\x00 \x02\x00\x00\x83\x01\x00\x00\x1f\x02\x00\x00k\x01\x00\x002\x01\x00\x00|\x01\x00\x00H\x02\x00\x00Z\x00\x00\x00t\x00\x00\x00H\x01\x00\x00\x15\x00\x00\x00A\x00\x00\x00:\x00\x00\x00\xfb\x01\x00\x00+\x02\x00\x00\xb2\x01\x00\x00\x82\x01\x00\x00_\x00\x00\x00\x9b\x00\x00\x00G\x01\x00\x00\x19\x02\x00\x00\x0f\x00\x00\x00\xe1\x00\x00\x00R\x01\x00\x00G\x00\x00\x00\xa3\x01\x00\x00\\\x01\x00\x00\xf6\x00\x00\x00L\x01\x00\x00\t\x01\x00\x00\x18\x01\x00\x00J\x00\x00\x00\x91\x00\x00\x00\xf7\x01\x00\x00~\x00\x00\x00,\x00\x00\x00\r\x02\x00\x00\x0e\x01\x00\x00\xc2\x00\x00\x00\x1a\x00\x00\x00\xb0\x01\x00\x00Y\x00\x00\x000\x00\x00\x00q\x01\x00\x00\xcd\x00\x00\x00\x9f\x01\x00\x00\x02\x00\x00\x00\xdf\x01\x00\x003\x00\x00\x00 \x00\x00\x00\'\x01\x00\x00=\x02\x00\x00C\x01\x00\x00\xd3\x00\x00\x00\xec\x00\x00\x00\xbe\x00\x00\x00\xfb\x00\x00\x00c\x00\x00\x00\x8c\x00\x00\x00\xec\x01\x00\x00\x99\x01\x00\x00\xb7\x01\x00\x00l\x00\x00\x00\x8b\x00\x00\x00x\x00\x00\x00\x84\x01\x00\x00\xd5\x00\x00\x00\x08\x02\x00\x00\xe2\x01\x00\x00(\x02\x00\x00\xbf\x00\x00\x00T\x00\x00\x00\xad\x00\x00\x00\xca\x00\x00\x00-\x00\x00\x00\xaa\x01\x00\x00\xf3\x01\x00\x00p\x00\x00\x00/\x00\x00\x00\x11\x01\x00\x00\xb6\x00\x00\x00v\x00\x00\x00\x92\x00\x00\x00\x01\x02\x00\x00U\x02\x00\x00\x02\x01\x00\x00\xfa\x00\x00\x00\x14\x01\x00\x00\xdd\x01\x00\x00j\x00\x00\x00\xc5\x00\x00\x00\x9e\x01\x00\x00\x0c\x00\x00\x00E\x02\x00\x00=\x01\x00\x00\x80\x01\x00\x00\x81\x01\x00\x005\x01\x00\x00P\x00\x00\x00\x14\x02\x00\x00&\x01\x00\x00B\x01\x00\x00\x1b\x02\x00\x00W\x02\x00\x00V\x01\x00\x00>\x00\x00\x009\x02\x00\x00\x03\x02\x00\x00T\x02\x00\x00\xef\x01\x00\x00\xad\x01\x00\x00\x0b\x01\x00\x00(\x00\x00\x00\xdc\x01\x00\x00\xe8\x01\x00\x00\xae\x01\x00\x00\x86\x00\x00\x00R\x00\x00\x00\x81\x00\x00\x00\xde\x00\x00\x00\xd0\x00\x00\x00\xe4\x00\x00\x00\x85\x00\x00\x001\x01\x00\x00O\x01\x00\x00D\x01\x00\x00\n\x00\x00\x00\xe1\x01\x00\x00\x10\x01\x00\x000\x01\x00\x00\x10\x00\x00\x00\xf9\x00\x00\x00D\x02\x00\x00\xe6\x01\x00\x00\xff\x00\x00\x00\x1a\x02\x00\x00\xd1\x01\x00\x00h\x00\x00\x00T\x01\x00\x00_\x01\x00\x008\x01\x00\x00\x15\x01\x00\x007\x02\x00\x00\x8a\x01\x00\x00v\x01\x00\x00\x02\x02\x00\x009\x01\x00\x00u\x01\x00\x00\xfe\x01\x00\x00C\x00\x00\x00\xb4\x00\x00\x00\x8f\x00\x00\x00\xd4\x01\x00\x00\x0f\x02\x00\x001\x00\x00\x00\x94\x00\x00\x00&\x02\x00\x005\x00\x00\x00N\x00\x00\x00\xb7\x00\x00\x00\x1e\x01\x00\x00\xfc\x00\x00\x00\xce\x00\x00\x00\xc9\x00\x00\x004\x02\x00\x00\n\x02\x00\x00\x88\x01\x00\x00\xc1\x00\x00\x00\x07\x00\x00\x00.\x00\x00\x00\x05\x02\x00\x00\xea\x01\x00\x00?\x01\x00\x00\xde\x01\x00\x00d\x00\x00\x00\x1d\x00\x00\x00\x1c\x02\x00\x00\x12\x02\x00\x00\xe2\x00\x00\x00\x00\x01\x00\x00R\x02\x00\x00\x94\x01\x00\x00\xe8\x00\x00\x00D\x00\x00\x00"\x01\x00\x00\xa3\x00\x00\x00\xe0\x00\x00\x00\xdb\x01\x00\x00E\x01\x00\x00m\x01\x00\x00\xba\x00\x00\x00/\x01\x00\x00W\x00\x00\x00g\x01\x00\x00\xd3\x01\x00\x00\xbf\x01\x00\x00\xaa\x00\x00\x00x\x01\x00\x00{\x00\x00\x00\x87\x01\x00\x00\x16\x00\x00\x00\xb8\x01\x00\x00%\x01\x00\x00o\x00\x00\x00\xa8\x00\x00\x00\xff\x01\x00\x00\xe7\x00\x00\x00\x93\x01\x00\x00<\x00\x00\x00\xd0\x01\x00\x00(\x01\x00\x00\x11\x02\x00\x00d\x01\x00\x00\xed\x01\x00\x00\x13\x01\x00\x00\x98\x01\x00\x00^\x01\x00\x003\x01\x00\x00\xab\x00\x00\x00\xd6\x01\x00\x00\xbd\x01\x00\x00\xfc\x01\x00\x00M\x01\x00\x00\xdc\x00\x00\x00F\x02\x00\x00\xdf\x00\x00\x00\x96\x00\x00\x00\x1f\x00\x00\x00#\x00\x00\x00\x8d\x00\x00\x004\x01\x00\x00\x9a\x00\x00\x00-\x02\x00\x00\x13\x00\x00\x00C\x02\x00\x00\xf9\x01\x00\x002\x02\x00\x00\x8d\x01\x00\x00\xb0\x00\x00\x00Y\x01\x00\x00\xb2\x00\x00\x00r\x01\x00\x00J\x01\x00\x00\xd2\x01\x00\x00\xac\x00\x00\x00\xa6\x00\x00\x00\x06\x02\x00\x00\xcc\x01\x00\x00B\x02\x00\x00\xaf\x01\x00\x00\x85\x01\x00\x00?\x02\x00\x00\x95\x00\x00\x00\xc5\x01\x00\x00\xbc\x01\x00\x00)\x02\x00\x00\x12\x00\x00\x00\x08\x00\x00\x00F\x01\x00\x00\xed\x00\x00\x00y\x01\x00\x00A\x02\x00\x00z\x00\x00\x00\x86\x01\x00\x00?\x00\x00\x00u\x00\x00\x00\x88\x00\x00\x00\xcf\x01\x00\x00\xe7\x01\x00\x00\x1a\x01\x00\x00\x95\x01\x00\x00S\x02\x00\x00\xcb\x01\x00\x00\xb5\x00\x00\x00:\x02\x00\x00r\x00\x00\x00\x91\x01\x00\x00\x93\x00\x00\x00\xb3\x00\x00\x00s\x00\x00\x00\x0c\x01\x00\x00Q\x01\x00\x00\xf3\x00\x00\x00\xe3\x01\x00\x000\x02\x00\x00;\x02\x00\x00)\x00\x00\x00<\x02\x00\x00/\x02\x00\x00\x1d\x01\x00\x00\x15\x02\x00\x00\x04\x01\x00\x00G\x02\x00\x008\x00\x00\x00\x9f\x00\x00\x00N\x01\x00\x00&\x00\x00\x00\xa0\x01\x00\x00i\x00\x00\x006\x01\x00\x007\x00\x00\x00y\x00\x00\x00"\x02\x00\x00\xf0\x01\x00\x00\xdd\x00\x00\x00.\x01\x00\x00\r\x00\x00\x004\x00\x00\x00\x1c\x01\x00\x00|\x00\x00\x00\xeb\x00\x00\x00\xb5\x01\x00\x00\x9c\x00\x00\x00\x01\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\xf5\x00\x00\x00\xa9\x01\x00\x001\x02\x00\x007\x01\x00\x00\xfe\x00\x00\x00F\x00\x00\x00b\x00\x00\x00\x90\x00\x00\x00\xf1\x00\x00\x00\xef\x00\x00\x00\xc1\x01\x00\x00;\x00\x00\x00Q\x00\x00\x00\x17\x00\x00\x00\xf1\x01\x00\x00:\x01\x00\x00\xfd\x01\x00\x00\xe9\x01\x00\x00`\x01\x00\x00s\x01\x00\x00j\x01\x00\x00\xd1\x00\x00\x00\x07\x02\x00\x00L\x02\x00\x00\xc3\x00\x00\x00Z\x01\x00\x00o\x01\x00\x00\xfa\x01\x00\x00\x08\x01\x00\x00\xd9\x01\x00\x00$\x02\x00\x00\xb9\x00\x00\x00i\x01\x00\x00\xe6\x00\x00\x00k\x00\x00\x00\xf8\x00\x00\x00\xc8\x00\x00\x00e\x00\x00\x00\x92\x01\x00\x00[\x00\x00\x00\x00\x02\x00\x00\x96\x01\x00\x00f\x00\x00\x00\x8b\x01\x00\x00\x0c\x02\x00\x006\x00\x00\x00\xc4\x00\x00\x00\x18\x02\x00\x00\xb9\x01\x00\x00\xbb\x00\x00\x00\x01\x01\x00\x00\x98\x00\x00\x00M\x02\x00\x00A\x01\x00\x00\x1b\x00\x00\x00!\x02\x00\x00\x03\x00\x00\x00t\x01\x00\x00+\x01\x00\x00\xcc\x00\x00\x00\xe9\x00\x00\x00\xe4\x01\x00\x00\xba\x01\x00\x00\t\x00\x00\x00\xac\x01\x00\x006\x02\x00\x00\xa8\x01\x00\x00\x1e\x02\x00\x00h\x01\x00\x00\xf7\x00\x00\x00p\x01\x00\x00]\x01\x00\x00l\x01\x00\x00{\x01\x00\x00\x12\x01\x00\x00w\x00\x00\x00I\x01\x00\x00\x0e\x00\x00\x00\x1c\x00\x00\x00\xbd\x00\x00\x00\xab\x01\x00\x00\xe5\x01\x00\x00\x9d\x00\x00\x00\t\x02\x00\x00\x89\x00\x00\x00@\x01\x00\x00\\\x00\x00\x00m\x00\x00\x00\xf6\x01\x00\x00K\x02\x00\x00\x19\x00\x00\x00\x1e\x00\x00\x00\x84\x00\x00\x00\xd5\x01\x00\x00\x82\x00\x00\x00\xbc\x00\x00\x00O\x00\x00\x00\x8e\x01\x00\x00\xae\x00\x00\x00\x04\x00\x00\x00\xcd\x01\x00\x00\x04\x02\x00\x00U\x00\x00\x00+\x00\x00\x00\xd6\x00\x00\x00\xd7\x00\x00\x00\r\x01\x00\x00E\x00\x00\x00\xcb\x00\x00\x00\x8c\x01\x00\x00\xea\x00\x00\x00\x16\x01\x00\x00\x83\x00\x00\x00\xa1\x00\x00\x00\xe3\x00\x00\x00\xee\x01\x00\x00\x07\x01\x00\x00\xb4\x01\x00\x00$\x00\x00\x00n\x01\x00\x00}\x00\x00\x00I\x00\x00\x00\x14\x00\x00\x00[\x01\x00\x00\x8f\x01\x00\x00!\x01\x00\x00\x06\x00\x00\x00\x90\x01\x00\x00\x0b\x00\x00\x00\xb8\x00\x00\x00\xb1\x00\x00\x00a\x01\x00\x00\xa2\x00\x00\x00\x10\x02\x00\x00\'\x02\x00\x00\xe5\x00\x00\x00c\x01\x00\x00\xa5\x01\x00\x00\x17\x01\x00\x00*\x01\x00\x00q\x00\x00\x00X\x01\x00\x00\x1d\x02\x00\x00J\x02\x00\x00;\x01\x00\x00b\x01\x00\x00\xc7\x00\x00\x003\x02\x00\x00\xfd\x00\x00\x00\xcf\x00\x00\x00`\x00\x00\x00\x9a\x01\x00\x002\x00\x00\x00L\x00\x00\x00H\x00\x00\x00\x0f\x01\x00\x00\x99\x00\x00\x00\x1f\x01\x00\x00K\x01\x00\x00,\x02\x00\x00-\x01\x00\x00,\x01\x00\x00\x87\x00\x00\x00'
tbsg75
I01
sg76
I1
sg77
I-1
sg78
(lp4787
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg80
Nsg81
cnumpy.core.multiarray
scalar
p4788
(g4786
S'\x87\x00\x00\x00'
tRp4789
sg82
I600
sg83
I0
sg84
I600
sg85
I01
sbag37
asS'savePickle'
p4790
I01
sb.