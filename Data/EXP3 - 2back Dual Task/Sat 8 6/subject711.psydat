ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject711
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 711
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
Vm
sS'age'
p31
V20
p32
ssS'loopsUnfinished'
p33
(lp34
g1
(cpsychopy.data
TrialHandler
p35
g3
NtRp36
(dp37
S'origin'
p38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p39
sS'thisTrial'
p40
I4
sS'_exp'
p41
I73861680
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p42
sS'thisRepN'
p43
I39
sg27
I01
sg28
NsS'data'
p44
g1
(cpsychopy.data
DataHandler
p45
c__builtin__
dict
p46
(dp47
S'ran'
p48
cnumpy.ma.core
_mareconstruct
p49
(cnumpy.ma.core
MaskedArray
p50
cnumpy
ndarray
p51
(I0
tp52
S'b'
tRp53
(I1
(I15
I40
tcnumpy
dtype
p54
(S'f4'
I0
I1
tRp55
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p56
g49
(g50
g51
g52
S'b'
tRp57
(I1
(I15
I40
tg55
I00
S'\x00\x00\x80@\x00\x00\xb8A\x00\x00\x08B\x00\x00(B\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00|B\x00\x00\xacB\x00\x00\xcaB\x00\x00\xdaB\x00\x00\xf8B\x00\x00\xfaB\x00\x00\x14C\x00\x00\x17C\x00\x00\x1aC\x00\x00/C\x00\x007C\x00\x00;C\x00\x00TC\x00\x00WC\x00\x00[C\x00\x00aC\x00\x00dC\x00\x00tC\x00\x80\x8aC\x00\x00\x96C\x00\x00\xa0C\x00\x80\xa1C\x00\x80\xceC\x00\x80\xe5C\x00\x80\xe6C\x00\x00\xe7C\x00\x00\xfcC\x00\x80\xfcC\x00\x80\x01D\x00\xc0\x05D\x00\x80\nD\x00\x00\x0fD\x00\x80\x10D\x00\x000A\x00\x00`A\x00\x00pA\x00\x00\x98A\x00\x00XB\x00\x00\x86B\x00\x00\x8cB\x00\x00\x92B\x00\x00\x9eB\x00\x00\xd8B\x00\x00\xdcB\x00\x00\xe6B\x00\x00\x16C\x00\x00FC\x00\x00GC\x00\x00QC\x00\x00YC\x00\x00eC\x00\x00wC\x00\x00\x7fC\x00\x80\x8cC\x00\x00\x8eC\x00\x80\x8fC\x00\x00\x99C\x00\x80\x99C\x00\x80\xa4C\x00\x00\xa9C\x00\x80\xb6C\x00\x00\xbeC\x00\x00\xc4C\x00\x00\xc7C\x00\x00\xd3C\x00\x00\xd4C\x00\x80\xe0C\x00\x80\xe3C\x00\x00\xf0C\x00\x00\xf8C\x00\x80\x00D\x00\x80\x02D\x00\x00\x0eD\x00\x00\xa8A\x00\x00\xd0A\x00\x00\x90B\x00\x00\xecB\x00\x00\x01C\x00\x00\rC\x00\x001C\x00\x00<C\x00\x00DC\x00\x00MC\x00\x00PC\x00\x00fC\x00\x00nC\x00\x80\x85C\x00\x00\x90C\x00\x80\x97C\x00\x00\xa7C\x00\x80\xa7C\x00\x00\xa8C\x00\x80\xa9C\x00\x00\xabC\x00\x00\xafC\x00\x00\xb2C\x00\x00\xb9C\x00\x80\xbaC\x00\x00\xc1C\x00\x00\xcbC\x00\x80\xdaC\x00\x00\xdfC\x00\x00\xe4C\x00\x00\xecC\x00\x80\xedC\x00\x00\xfaC\x00\x80\xfeC\x00\x80\x07D\x00\xc0\x0cD\x00\x80\x0fD\x00@\x10D\x00\x80\x14D\x00\x80\x15D\x00\x00\x80B\x00\x00\x84B\x00\x00\x98B\x00\x00\xc4B\x00\x00\xe4B\x00\x00\xe8B\x00\x00\xfeB\x00\x00\x04C\x00\x00\x07C\x00\x00\x19C\x00\x00\x1bC\x00\x009C\x00\x00=C\x00\x00BC\x00\x00jC\x00\x00lC\x00\x80\x80C\x00\x80\x8dC\x00\x00\x8fC\x00\x80\x91C\x00\x80\x9aC\x00\x80\x9bC\x00\x80\x9fC\x00\x00\xbcC\x00\x80\xbdC\x00\x00\xc0C\x00\x80\xd2C\x00\x00\xd5C\x00\x00\xd6C\x00\x00\xe2C\x00\x80\xe4C\x00\x00\xe6C\x00\x00\xe9C\x00\x80\xfaC\x00\x00\x02D\x00\x80\tD\x00@\x0bD\x00@\x0eD\x00@\x0fD\x00\x80\x13D\x00\x00,B\x00\x00hB\x00\x00xB\x00\x00\xa8B\x00\x00\xbcB\x00\x00\xceB\x00\x00\xeaB\x00\x00\x0cC\x00\x00\x15C\x00\x004C\x00\x00AC\x00\x00XC\x00\x00yC\x00\x00\x87C\x00\x00\x88C\x00\x80\x88C\x00\x80\x89C\x00\x00\x97C\x00\x80\x9cC\x00\x80\x9eC\x00\x80\xadC\x00\x00\xb6C\x00\x80\xc3C\x00\x00\xc6C\x00\x80\xc8C\x00\x80\xd6C\x00\x80\xe2C\x00\x80\xe7C\x00\x00\xfdC\x00\x80\xffC\x00@\x03D\x00\x00\nD\x00\x80\rD\x00\xc0\rD\x00\xc0\x0fD\x00\x00\x12D\x00\xc0\x12D\x00\x00\x14D\x00\x00\x15D\x00\xc0\x15D\x00\x00\x00\x00\x00\x00\xc0@\x00\x00\x88A\x00\x00DB\x00\x00lB\x00\x00\x88B\x00\x00\xa0B\x00\x00\xaaB\x00\x00\xc0B\x00\x00\xc8B\x00\x00\xccB\x00\x00\xf2B\x00\x00\x00C\x00\x00\tC\x00\x00(C\x00\x000C\x00\x00@C\x00\x00OC\x00\x00SC\x00\x00_C\x00\x80\x95C\x00\x00\xacC\x00\x00\xadC\x00\x80\xb4C\x00\x00\xc3C\x00\x80\xd4C\x00\x80\xdeC\x00\x80\xdfC\x00\x00\xe5C\x00\x00\xe8C\x00\x80\xf3C\x00\x80\x03D\x00\x00\x06D\x00\xc0\x07D\x00\xc0\x08D\x00\x00\tD\x00\xc0\nD\x00\x00\rD\x00@\x11D\x00@\x13D\x00\x00\xb0A\x00\x00\xd8A\x00\x00\xf0A\x00\x00\x8aB\x00\x00\x8eB\x00\x00\xa2B\x00\x00\xa6B\x00\x00\xbaB\x00\x00\xc2B\x00\x00\xc6B\x00\x00\xe2B\x00\x00\xf0B\x00\x00\nC\x00\x00\x0bC\x00\x00\x11C\x00\x00\x18C\x00\x00\x1eC\x00\x00>C\x00\x00RC\x00\x80\x93C\x00\x80\x98C\x00\x00\x9cC\x00\x00\xa3C\x00\x80\xa5C\x00\x80\xacC\x00\x00\xb8C\x00\x80\xc6C\x00\x80\xd0C\x00\x00\xd1C\x00\x80\xd7C\x00\x00\xd9C\x00\x00\xe1C\x00\x80\xe9C\x00\x00\xeeC\x00\x80\xeeC\x00\x80\xf0C\x00\x00\x01D\x00@\x07D\x00\xc0\x11D\x00\xc0\x13D\x00\x00\x00@\x00\x00\x90A\x00\x00\xa0A\x00\x00\x1cB\x00\x000B\x00\x00<B\x00\x00\xb4B\x00\x00\xb8B\x00\x00\xd4B\x00\x00\xeeB\x00\x005C\x00\x00:C\x00\x00JC\x00\x00]C\x00\x00cC\x00\x00{C\x00\x00}C\x00\x80\x83C\x00\x80\x87C\x00\x80\x8eC\x00\x00\x91C\x00\x80\x96C\x00\x00\xa1C\x00\x80\xa6C\x00\x00\xaeC\x00\x00\xb0C\x00\x00\xcaC\x00\x80\xccC\x00\x00\xcfC\x00\x00\xd0C\x00\x80\xd1C\x00\x80\xd9C\x00\x00\xebC\x00\x80\xebC\x00\x80\xfdC\x00\x00\xfeC\x00\x00\x00D\x00\xc0\x00D\x00\xc0\x0eD\x00@\x12D\x00\x00 A\x00\x00\xc8A\x00\x00\xe8A\x00\x00HB\x00\x00\x9aB\x00\x00\xbeB\x00\x00\xdeB\x00\x00\xfcB\x00\x00\x1dC\x00\x00-C\x00\x006C\x00\x00CC\x00\x00KC\x00\x00`C\x00\x00gC\x00\x00iC\x00\x00mC\x00\x00rC\x00\x00\x8bC\x00\x80\x92C\x00\x00\x9dC\x00\x80\x9dC\x00\x80\xa0C\x00\x80\xb1C\x00\x80\xb8C\x00\x80\xc4C\x00\x00\xc9C\x00\x80\xcbC\x00\x00\xdbC\x00\x00\xe3C\x00\x80\xe8C\x00\x80\xecC\x00\x00\xf1C\x00\x00\xf7C\x00\x80\xfbC\x00\x80\x06D\x00\xc0\tD\x00\x80\x0bD\x00\xc0\x0bD\x00@\x0cD\x00\x00\xe0@\x00\x00@A\x00\x00$B\x00\x00\\B\x00\x00`B\x00\x00\xa4B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\x03C\x00\x00\x06C\x00\x00\x1cC\x00\x00$C\x00\x00*C\x00\x003C\x00\x00hC\x00\x00qC\x00\x00zC\x00\x80\x82C\x00\x80\x86C\x00\x00\x8cC\x00\x80\x90C\x00\x00\x9eC\x00\x00\xa6C\x00\x80\xaeC\x00\x00\xc2C\x00\x00\xccC\x00\x00\xcdC\x00\x00\xceC\x00\x80\xcfC\x00\x80\xd3C\x00\x80\xd5C\x00\x00\xe0C\x00\x80\xeaC\x00\x00\xf5C\x00\x80\xf8C\x00\x00\x04D\x00\x00\x07D\x00\x00\x08D\x00@\x08D\x00@\nD\x00\x00\x80?\x00\x00\x10A\x00\x004B\x00\x008B\x00\x00@B\x00\x00pB\x00\x00\x94B\x00\x00\xaeB\x00\x00\xb2B\x00\x00\xd6B\x00\x00\x12C\x00\x00EC\x00\x00IC\x00\x00NC\x00\x00oC\x00\x00~C\x00\x00\x84C\x00\x00\x89C\x00\x00\x8aC\x00\x80\x94C\x00\x00\xa4C\x00\x00\xbaC\x00\x00\xbbC\x00\x00\xbdC\x00\x00\xbfC\x00\x80\xbfC\x00\x80\xdbC\x00\x80\xdcC\x00\x00\xddC\x00\x00\xdeC\x00@\x02D\x00\x00\x03D\x00\xc0\x03D\x00\x80\x05D\x00\xc0\x06D\x00@\tD\x00\xc0\x10D\x00\x80\x12D\x00\x00\x13D\x00@\x15D\x00\x00\x80A\x00\x00\xc0A\x00\x00\x00B\x00\x00\x10B\x00\x00 B\x00\x00dB\x00\x00tB\x00\x00\x10C\x00\x00"C\x00\x00)C\x00\x00+C\x00\x00.C\x00\x002C\x00\x00LC\x00\x00UC\x00\x00VC\x00\x00^C\x00\x00pC\x00\x00\x85C\x00\x00\x98C\x00\x00\xa5C\x00\x80\xafC\x00\x00\xb3C\x00\x80\xb3C\x00\x00\xb5C\x00\x80\xbcC\x00\x80\xc1C\x00\x80\xc5C\x00\x80\xd8C\x00\x80\xf5C\x00\x80\xf7C\x00\x00\xf9C\x00\x00\xfbC\x00\xc0\x01D\x00\xc0\x04D\x00\x00\x05D\x00@\x06D\x00\x00\x0cD\x00\x80\x0cD\x00@\rD\x00\x00@@\x00\x00\xa0@\x00\x00\x00A\x00\x00\xe0A\x00\x00\xb0B\x00\x00\xe0B\x00\x00\x0eC\x00\x00#C\x00\x00,C\x00\x008C\x00\x00\\C\x00\x00bC\x00\x00kC\x00\x00uC\x00\x00xC\x00\x00\x83C\x00\x00\x8dC\x00\x80\xa2C\x00\x80\xabC\x00\x80\xb0C\x00\x00\xb1C\x00\x80\xb5C\x00\x00\xb7C\x00\x80\xb9C\x00\x00\xc5C\x00\x00\xc8C\x00\x80\xcdC\x00\x00\xd7C\x00\x80\xe1C\x00\x00\xefC\x00\x00\xf2C\x00\x80\xf4C\x00\xc0\x02D\x00@\x04D\x00@\x05D\x00\x80\x08D\x00\x00\x10D\x00\x00\x11D\x00@\x14D\x00\xc0\x14D\x00\x00PA\x00\x00\x04B\x00\x00\x0cB\x00\x00\x18B\x00\x00\x82B\x00\x00\xb6B\x00\x00\xd0B\x00\x00\xd2B\x00\x00\x08C\x00\x00\x0fC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00%C\x00\x00?C\x00\x00HC\x00\x00ZC\x00\x00sC\x00\x00vC\x00\x00|C\x00\x80\x84C\x00\x80\x8bC\x00\x00\x92C\x00\x00\x94C\x00\x00\x9aC\x00\x00\x9bC\x00\x00\x9fC\x00\x00\xa2C\x00\x80\xb2C\x00\x80\xbbC\x00\x00\xd8C\x00\x00\xeaC\x00\x80\xf2C\x00\x00\xf3C\x00\x00\xf4C\x00\x80\xf9C\x00@\x00D\x00\x80\x04D\x00\x80\x0eD\x00\x80\x11D\x00\x00\xf8A\x00\x00\x14B\x00\x00\x96B\x00\x00\x9cB\x00\x00\x02C\x00\x00\x05C\x00\x00\x13C\x00\x00&C\x00\x00\'C\x00\x00\x80C\x00\x00\x81C\x00\x80\x81C\x00\x00\x82C\x00\x00\x86C\x00\x00\x93C\x00\x00\x95C\x00\x80\xa3C\x00\x80\xa8C\x00\x00\xaaC\x00\x80\xaaC\x00\x00\xb4C\x00\x80\xb7C\x00\x80\xbeC\x00\x80\xc0C\x00\x80\xc2C\x00\x80\xc7C\x00\x80\xc9C\x00\x80\xcaC\x00\x00\xd2C\x00\x00\xdaC\x00\x00\xdcC\x00\x80\xddC\x00\x00\xedC\x00\x80\xefC\x00\x80\xf1C\x00\x00\xf6C\x00\x80\xf6C\x00\x00\xffC\x00@\x01D\x00\x00\x0bD'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp58
(dp59
S'isNumeric'
p60
(dp61
g48
I01
sg56
I01
ssS'trials'
p62
g36
sS'dataTypes'
p63
(lp64
g48
ag56
asS'dataShape'
p65
(lp66
I15
aI40
asbsS'method'
p67
S'fullRandom'
p68
sS'sequenceIndices'
p69
cnumpy.core.multiarray
_reconstruct
p70
(g51
(I0
tS'b'
tRp71
(I1
(I15
I40
tg54
(S'O4'
I0
I1
tRp72
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp73
I5
aI1
aI6
aI10
aI10
aI14
aI7
aI13
aI6
aI3
aI1
aI13
aI4
aI8
aI6
aI0
aI11
aI1
aI4
aI7
aI0
aI8
aI11
aI6
aI14
aI13
aI5
aI14
aI14
aI7
aI6
aI8
aI1
aI11
aI14
aI4
aI9
aI5
aI13
aI7
aI10
aI11
aI14
aI10
aI11
aI3
aI13
aI7
aI5
aI13
aI0
aI14
aI7
aI2
aI5
aI12
aI9
aI14
aI7
aI3
aI7
aI9
aI6
aI5
aI5
aI3
aI4
aI2
aI3
aI14
aI12
aI3
aI6
aI1
aI4
aI5
aI6
aI14
aI7
aI10
aI7
aI5
aI11
aI7
aI4
aI8
aI7
aI10
aI9
aI5
aI6
aI14
aI8
aI10
aI0
aI7
aI8
aI3
aI4
aI1
aI4
aI4
aI9
aI4
aI11
aI11
aI1
aI8
aI1
aI2
aI3
aI6
aI8
aI9
aI7
aI10
aI2
aI3
aI0
aI4
aI12
aI7
aI13
aI10
aI0
aI14
aI6
aI1
aI9
aI6
aI3
aI5
aI0
aI1
aI11
aI0
aI13
aI14
aI4
aI2
aI2
aI13
aI7
aI7
aI12
aI10
aI8
aI9
aI9
aI8
aI4
aI13
aI14
aI11
aI13
aI9
aI5
aI8
aI3
aI10
aI0
aI1
aI0
aI5
aI3
aI1
aI4
aI0
aI0
aI6
aI0
aI11
aI12
aI1
aI11
aI1
aI0
aI14
aI10
aI9
aI11
aI3
aI2
aI9
aI4
aI3
aI12
aI7
aI1
aI10
aI8
aI9
aI12
aI13
aI1
aI12
aI9
aI8
aI2
aI5
aI12
aI7
aI13
aI8
aI13
aI5
aI8
aI1
aI0
aI4
aI3
aI9
aI3
aI13
aI0
aI2
aI12
aI14
aI4
aI7
aI6
aI0
aI2
aI2
aI1
aI1
aI11
aI9
aI5
aI14
aI1
aI7
aI13
aI2
aI7
aI13
aI9
aI11
aI4
aI3
aI5
aI2
aI11
aI0
aI3
aI6
aI5
aI8
aI8
aI2
aI9
aI11
aI7
aI10
aI4
aI8
aI13
aI9
aI10
aI3
aI1
aI8
aI2
aI11
aI12
aI14
aI4
aI12
aI3
aI10
aI2
aI7
aI13
aI3
aI6
aI11
aI12
aI8
aI12
aI6
aI9
aI6
aI14
aI0
aI1
aI9
aI6
aI12
aI3
aI12
aI8
aI12
aI0
aI7
aI1
aI9
aI1
aI12
aI0
aI13
aI1
aI7
aI14
aI7
aI14
aI10
aI6
aI9
aI9
aI10
aI3
aI2
aI5
aI11
aI14
aI11
aI5
aI11
aI2
aI4
aI12
aI0
aI13
aI0
aI5
aI6
aI3
aI6
aI5
aI13
aI6
aI8
aI2
aI8
aI13
aI8
aI12
aI7
aI8
aI8
aI13
aI0
aI1
aI12
aI6
aI10
aI1
aI0
aI3
aI14
aI5
aI8
aI13
aI8
aI0
aI12
aI5
aI2
aI0
aI12
aI10
aI11
aI7
aI1
aI6
aI4
aI6
aI3
aI2
aI11
aI13
aI11
aI3
aI11
aI0
aI3
aI4
aI10
aI13
aI14
aI3
aI13
aI2
aI12
aI8
aI3
aI14
aI7
aI4
aI10
aI0
aI14
aI12
aI0
aI11
aI10
aI10
aI5
aI10
aI2
aI8
aI8
aI11
aI9
aI1
aI5
aI5
aI1
aI14
aI6
aI13
aI0
aI6
aI2
aI12
aI12
aI9
aI13
aI9
aI6
aI13
aI12
aI14
aI8
aI2
aI14
aI12
aI9
aI12
aI5
aI3
aI2
aI9
aI0
aI3
aI0
aI3
aI11
aI12
aI12
aI1
aI2
aI9
aI9
aI6
aI0
aI0
aI3
aI9
aI10
aI13
aI5
aI13
aI10
aI7
aI3
aI7
aI11
aI1
aI13
aI3
aI6
aI14
aI2
aI12
aI2
aI4
aI7
aI6
aI2
aI0
aI6
aI11
aI4
aI10
aI5
aI8
aI4
aI5
aI4
aI9
aI6
aI0
aI11
aI2
aI10
aI5
aI4
aI3
aI14
aI11
aI2
aI5
aI5
aI11
aI8
aI13
aI2
aI12
aI10
aI6
aI14
aI2
aI13
aI10
aI11
aI8
aI6
aI13
aI5
aI0
aI6
aI14
aI7
aI1
aI11
aI4
aI4
aI13
aI10
aI13
aI12
aI4
aI4
aI1
aI12
aI4
aI2
aI14
aI0
aI12
aI11
aI4
aI2
aI5
aI2
aI7
aI14
aI3
aI14
aI4
aI10
aI12
aI11
aI2
aI9
aI14
aI6
aI11
aI9
aI4
aI12
aI14
aI7
aI12
aI8
aI9
aI1
aI6
aI2
aI1
aI8
aI7
aI5
aI10
aI10
aI13
aI7
aI9
aI4
aI9
aI9
aI3
aI1
aI8
aI10
aI10
aI9
aI1
aI5
aI8
aI1
aI5
aI11
aI10
aI14
aI7
aI7
aI6
aI1
aI5
aI14
aI8
aI2
aI10
aI10
aI0
aI3
aI4
aI4
atbsS'finished'
p74
I00
sS'nReps'
p75
I40
sS'nRemaining'
p76
I0
sS'trialList'
p77
(lp78
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
asS'seed'
p79
NsS'thisIndex'
p80
I4
sS'thisN'
p81
I599
sS'thisTrialN'
p82
I14
sS'nTotal'
p83
I600
sS'_warnUseOfNext'
p84
I01
sbasS'saveWideText'
p85
I01
sS'thisEntry'
p86
(dp87
sS'version'
p88
S''
sS'_paramNamesSoFar'
p89
(lp90
sS'entries'
p91
(lp92
(dp93
g16
(lp94
S'k'
asS'.thisTrial'
p95
I5
sS'.thisRepN'
p96
I0
sg30
Vm
sg31
g32
sS'.thisTrialN'
p97
I0
sS'.thisN'
p98
I0
sS'.thisIndex'
p99
I5
sg15
(lp100
S'k'
asg17
S'Y'
sg14
I1
sa(dp101
g16
(lp102
S'k'
asg95
I10
sS'.thisRepN'
p103
I0
sg30
Vm
sg31
g32
sS'.thisTrialN'
p104
I1
sS'.thisN'
p105
I1
sS'.thisIndex'
p106
I10
sg15
(lp107
S'd'
asg17
S'N'
sg14
I1
sa(dp108
g16
(lp109
S'k'
asg18
S'Y'
sS'.thisRepN'
p110
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p111
I2
sS'.thisN'
p112
I2
sS'.thisIndex'
p113
I7
sg15
(lp114
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp115
g16
(lp116
S'd'
asg18
S'Y'
sS'.thisRepN'
p117
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p118
I3
sS'.thisN'
p119
I3
sS'.thisIndex'
p120
I12
sg15
(lp121
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
(lp122
S'space'
p123
asg95
I12
sa(dp124
g16
(lp125
S'k'
asg18
S'Y'
sS'.thisRepN'
p126
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p127
I4
sS'.thisN'
p128
I4
sS'.thisIndex'
p129
I0
sg15
(lp130
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp131
g16
(lp132
S'k'
asg18
S'Y'
sS'.thisRepN'
p133
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p134
I5
sS'.thisN'
p135
I5
sS'.thisIndex'
p136
I12
sg15
(lp137
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I12
sa(dp138
g16
(lp139
S'd'
asg18
S'N'
sS'.thisRepN'
p140
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p141
I6
sS'.thisN'
p142
I6
sS'.thisIndex'
p143
I5
sg15
(lp144
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp145
g16
(lp146
S'k'
asg18
S'Y'
sS'.thisRepN'
p147
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p148
I7
sS'.thisN'
p149
I7
sS'.thisIndex'
p150
I9
sg15
(lp151
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I9
sa(dp152
g16
(lp153
S'd'
asg18
S'Y'
sS'.thisRepN'
p154
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p155
I8
sS'.thisN'
p156
I8
sS'.thisIndex'
p157
I12
sg15
(lp158
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I12
sa(dp159
g16
(lp160
S'k'
asg18
S'Y'
sS'.thisRepN'
p161
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p162
I9
sS'.thisN'
p163
I9
sS'.thisIndex'
p164
I10
sg15
(lp165
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
(lp166
S'space'
p167
asg95
I10
sa(dp168
g16
(lp169
S'k'
asg18
S'Y'
sS'.thisRepN'
p170
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p171
I10
sS'.thisN'
p172
I10
sS'.thisIndex'
p173
I8
sg15
(lp174
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I8
sa(dp175
g16
(lp176
S'k'
asg18
S'N'
sS'.thisRepN'
p177
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p178
I11
sS'.thisN'
p179
I11
sS'.thisIndex'
p180
I1
sg15
(lp181
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I1
sa(dp182
g16
(lp183
S'k'
asg18
S'N'
sS'.thisRepN'
p184
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p185
I12
sS'.thisN'
p186
I12
sS'.thisIndex'
p187
I9
sg15
(lp188
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I9
sa(dp189
g16
(lp190
S'd'
asg18
S'Y'
sS'.thisRepN'
p191
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p192
I13
sS'.thisN'
p193
I13
sS'.thisIndex'
p194
I13
sg15
(lp195
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
(lp196
S'space'
p197
asg95
I13
sa(dp198
g16
(lp199
S'd'
asg18
S'Y'
sS'.thisRepN'
p200
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p201
I14
sS'.thisN'
p202
I14
sS'.thisIndex'
p203
I1
sg15
(lp204
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I1
sa(dp205
g16
(lp206
S'd'
asg18
S'Y'
sS'.thisRepN'
p207
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p208
I0
sS'.thisN'
p209
I15
sS'.thisIndex'
p210
I1
sg15
(lp211
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I1
sa(dp212
g16
(lp213
S'd'
asg18
S'Y'
sS'.thisRepN'
p214
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p215
I1
sS'.thisN'
p216
I16
sS'.thisIndex'
p217
I11
sg15
(lp218
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
(lp219
S'space'
p220
asg95
I11
sa(dp221
g16
(lp222
S'd'
asg18
S'N'
sS'.thisRepN'
p223
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p224
I2
sS'.thisN'
p225
I17
sS'.thisIndex'
p226
I5
sg15
(lp227
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp228
g16
(lp229
S'k'
asg18
S'Y'
sS'.thisRepN'
p230
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p231
I3
sS'.thisN'
p232
I18
sS'.thisIndex'
p233
I7
sg15
(lp234
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
(lp235
S'space'
p236
asg95
I7
sa(dp237
g16
(lp238
S'd'
asg18
S'N'
sS'.thisRepN'
p239
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p240
I4
sS'.thisN'
p241
I19
sS'.thisIndex'
p242
I1
sg15
(lp243
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
(lp244
S'space'
p245
asg95
I1
sa(dp246
g16
(lp247
S'k'
asg18
S'N'
sS'.thisRepN'
p248
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p249
I5
sS'.thisN'
p250
I20
sS'.thisIndex'
p251
I7
sg15
(lp252
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
(lp253
S'space'
p254
asg95
I7
sa(dp255
g16
(lp256
S'k'
asg18
S'N'
sS'.thisRepN'
p257
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p258
I6
sS'.thisN'
p259
I21
sS'.thisIndex'
p260
I2
sg15
(lp261
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I2
sa(dp262
g16
(lp263
S'k'
asg18
S'Y'
sS'.thisRepN'
p264
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p265
I7
sS'.thisN'
p266
I22
sS'.thisIndex'
p267
I6
sg15
(lp268
S'd'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I6
sa(dp269
g16
(lp270
S'd'
asg18
S'N'
sS'.thisRepN'
p271
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p272
I8
sS'.thisN'
p273
I23
sS'.thisIndex'
p274
I0
sg15
(lp275
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I0
sa(dp276
g16
(lp277
S'k'
asg18
S'N'
sS'.thisRepN'
p278
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p279
I9
sS'.thisN'
p280
I24
sS'.thisIndex'
p281
I11
sg15
(lp282
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I11
sa(dp283
g16
(lp284
S'd'
asg18
S'Y'
sS'.thisRepN'
p285
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p286
I10
sS'.thisN'
p287
I25
sS'.thisIndex'
p288
I8
sg15
(lp289
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
(lp290
S'space'
p291
asg95
I8
sa(dp292
g16
(lp293
S'd'
asg18
S'N'
sS'.thisRepN'
p294
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p295
I11
sS'.thisN'
p296
I26
sS'.thisIndex'
p297
I2
sg15
(lp298
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I2
sa(dp299
g16
(lp300
S'd'
asg18
S'Y'
sS'.thisRepN'
p301
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p302
I12
sS'.thisN'
p303
I27
sS'.thisIndex'
p304
I6
sg15
(lp305
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
(lp306
S'space'
p307
asg95
I6
sa(dp308
g16
(lp309
S'd'
asg18
S'N'
sS'.thisRepN'
p310
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p311
I13
sS'.thisN'
p312
I28
sS'.thisIndex'
p313
I12
sg15
(lp314
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I12
sa(dp315
g16
(lp316
S'k'
asg18
S'Y'
sS'.thisRepN'
p317
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p318
I14
sS'.thisN'
p319
I29
sS'.thisIndex'
p320
I8
sg15
(lp321
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
(lp322
S'space'
p323
asg95
I8
sa(dp324
g16
(lp325
S'k'
asg18
S'N'
sS'.thisRepN'
p326
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p327
I0
sS'.thisN'
p328
I30
sS'.thisIndex'
p329
I6
sg15
(lp330
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I6
sa(dp331
g16
(lp332
S'd'
asg18
S'Y'
sS'.thisRepN'
p333
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p334
I1
sS'.thisN'
p335
I31
sS'.thisIndex'
p336
I14
sg15
(lp337
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
(lp338
S'space'
p339
asg95
I14
sa(dp340
g16
(lp341
S'd'
asg18
S'Y'
sS'.thisRepN'
p342
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p343
I2
sS'.thisN'
p344
I32
sS'.thisIndex'
p345
I11
sg15
(lp346
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
(lp347
S'space'
p348
asg95
I11
sa(dp349
g16
(lp350
S'd'
asg18
S'N'
sS'.thisRepN'
p351
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p352
I3
sS'.thisN'
p353
I33
sS'.thisIndex'
p354
I13
sg15
(lp355
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I13
sa(dp356
g16
(lp357
S'k'
asg18
S'Y'
sS'.thisRepN'
p358
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p359
I4
sS'.thisN'
p360
I34
sS'.thisIndex'
p361
I0
sg15
(lp362
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp363
g16
(lp364
S'd'
asg18
S'N'
sS'.thisRepN'
p365
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p366
I5
sS'.thisN'
p367
I35
sS'.thisIndex'
p368
I13
sg15
(lp369
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
(lp370
S'space'
p371
asg95
I13
sa(dp372
g16
(lp373
S'k'
asg18
S'Y'
sS'.thisRepN'
p374
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p375
I6
sS'.thisN'
p376
I36
sS'.thisIndex'
p377
I11
sg15
(lp378
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
(lp379
S'space'
p380
asg95
I11
sa(dp381
g16
(lp382
S'k'
asg18
S'Y'
sS'.thisRepN'
p383
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p384
I7
sS'.thisN'
p385
I37
sS'.thisIndex'
p386
I14
sg15
(lp387
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
(lp388
S'space'
p389
asg95
I14
sa(dp390
g16
(lp391
S'd'
asg18
S'N'
sS'.thisRepN'
p392
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p393
I8
sS'.thisN'
p394
I38
sS'.thisIndex'
p395
I13
sg15
(lp396
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I13
sa(dp397
g16
(lp398
S'd'
asg18
S'N'
sS'.thisRepN'
p399
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p400
I9
sS'.thisN'
p401
I39
sS'.thisIndex'
p402
I7
sg15
(lp403
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp404
g16
(lp405
S'd'
asg18
S'N'
sS'.thisRepN'
p406
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p407
I10
sS'.thisN'
p408
I40
sS'.thisIndex'
p409
I11
sg15
(lp410
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I11
sa(dp411
g16
(lp412
S'k'
asg18
S'N'
sS'.thisRepN'
p413
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p414
I11
sS'.thisN'
p415
I41
sS'.thisIndex'
p416
I9
sg15
(lp417
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
(lp418
S'space'
p419
asg95
I9
sa(dp420
g16
(lp421
S'k'
asg18
S'N'
sS'.thisRepN'
p422
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p423
I12
sS'.thisN'
p424
I42
sS'.thisIndex'
p425
I0
sg15
(lp426
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
(lp427
S'space'
p428
asg95
I0
sa(dp429
g16
(lp430
S'd'
asg18
S'N'
sS'.thisRepN'
p431
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p432
I13
sS'.thisN'
p433
I43
sS'.thisIndex'
p434
I4
sg15
(lp435
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I4
sa(dp436
g16
(lp437
S'd'
asg18
S'Y'
sS'.thisRepN'
p438
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p439
I14
sS'.thisN'
p440
I44
sS'.thisIndex'
p441
I7
sg15
(lp442
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
(lp443
S'space'
p444
asg95
I7
sa(dp445
g16
(lp446
S'd'
asg18
S'Y'
sS'.thisRepN'
p447
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p448
I0
sS'.thisN'
p449
I45
sS'.thisIndex'
p450
I10
sg15
(lp451
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
(lp452
S'space'
p453
asg95
I10
sa(dp454
g16
(lp455
S'k'
asg18
S'N'
sS'.thisRepN'
p456
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p457
I1
sS'.thisN'
p458
I46
sS'.thisIndex'
p459
I10
sg15
(lp460
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp461
g16
(lp462
S'd'
asg18
S'Y'
sS'.thisRepN'
p463
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p464
I2
sS'.thisN'
p465
I47
sS'.thisIndex'
p466
I7
sg15
(lp467
S'd'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
(lp468
S'space'
p469
asg95
I7
sa(dp470
g16
(lp471
S'd'
asg18
S'N'
sS'.thisRepN'
p472
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p473
I3
sS'.thisN'
p474
I48
sS'.thisIndex'
p475
I10
sg15
(lp476
S'k'
asg30
Vm
sg17
S'N'
sg14
I1
sg19
Nsg95
I10
sa(dp477
g16
(lp478
S'k'
asg18
S'N'
sg22
I33
sS'.thisN'
p479
I49
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p480
I4
sS'.thisRepN'
p481
I3
sg21
I28
sS'.thisIndex'
p482
I5
sg23
I25
sg15
(lp483
S'k'
asg30
Vm
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp484
g16
(lp485
S'k'
asg95
I8
sS'.thisRepN'
p486
I3
sg30
Vm
sg31
g32
sS'.thisTrialN'
p487
I5
sS'.thisN'
p488
I50
sS'.thisIndex'
p489
I8
sg15
(lp490
S'k'
asg17
S'Y'
sg14
I2
sa(dp491
g16
(lp492
S'k'
asg95
I0
sS'.thisRepN'
p493
I3
sg30
Vm
sg31
g32
sS'.thisTrialN'
p494
I6
sS'.thisN'
p495
I51
sS'.thisIndex'
p496
I0
sg15
(lp497
S'd'
asg17
S'N'
sg14
I2
sa(dp498
g16
(lp499
S'd'
asg18
S'Y'
sS'.thisRepN'
p500
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p501
I7
sS'.thisN'
p502
I52
sS'.thisIndex'
p503
I0
sg15
(lp504
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp505
S'space'
p506
asg95
I0
sa(dp507
g16
(lp508
S'k'
asg18
S'Y'
sS'.thisRepN'
p509
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p510
I8
sS'.thisN'
p511
I53
sS'.thisIndex'
p512
I0
sg15
(lp513
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp514
S'space'
p515
asg95
I0
sa(dp516
g16
(lp517
S'd'
asg18
S'Y'
sS'.thisRepN'
p518
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p519
I9
sS'.thisN'
p520
I54
sS'.thisIndex'
p521
I1
sg15
(lp522
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
(lp523
S'space'
p524
asg95
I1
sa(dp525
g16
(lp526
S'd'
asg18
S'N'
sS'.thisRepN'
p527
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p528
I10
sS'.thisN'
p529
I55
sS'.thisIndex'
p530
I9
sg15
(lp531
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I9
sa(dp532
g16
(lp533
S'd'
asg18
S'N'
sS'.thisRepN'
p534
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p535
I11
sS'.thisN'
p536
I56
sS'.thisIndex'
p537
I9
sg15
(lp538
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp539
g16
(lp540
S'd'
asg18
S'N'
sS'.thisRepN'
p541
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p542
I12
sS'.thisN'
p543
I57
sS'.thisIndex'
p544
I11
sg15
(lp545
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I11
sa(dp546
g16
(lp547
S'k'
asg18
S'N'
sS'.thisRepN'
p548
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p549
I13
sS'.thisN'
p550
I58
sS'.thisIndex'
p551
I4
sg15
(lp552
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp553
g16
(lp554
S'd'
asg18
S'Y'
sS'.thisRepN'
p555
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p556
I14
sS'.thisN'
p557
I59
sS'.thisIndex'
p558
I5
sg15
(lp559
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp560
S'space'
p561
asg95
I5
sa(dp562
g16
(lp563
S'k'
asg18
S'Y'
sS'.thisRepN'
p564
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p565
I0
sS'.thisN'
p566
I60
sS'.thisIndex'
p567
I10
sg15
(lp568
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp569
S'space'
p570
asg95
I10
sa(dp571
g16
(lp572
S'd'
asg18
S'Y'
sS'.thisRepN'
p573
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p574
I1
sS'.thisN'
p575
I61
sS'.thisIndex'
p576
I11
sg15
(lp577
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
(lp578
S'space'
p579
asg95
I11
sa(dp580
g16
(lp581
S'k'
asg18
S'N'
sS'.thisRepN'
p582
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p583
I2
sS'.thisN'
p584
I62
sS'.thisIndex'
p585
I4
sg15
(lp586
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp587
g16
(lp588
S'k'
asg18
S'N'
sS'.thisRepN'
p589
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p590
I3
sS'.thisN'
p591
I63
sS'.thisIndex'
p592
I0
sg15
(lp593
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp594
S'space'
p595
asg95
I0
sa(dp596
g16
(lp597
S'k'
asg18
S'Y'
sS'.thisRepN'
p598
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p599
I4
sS'.thisN'
p600
I64
sS'.thisIndex'
p601
I3
sg15
(lp602
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp603
S'space'
p604
asg95
I3
sa(dp605
g16
(lp606
S'd'
asg18
S'Y'
sS'.thisRepN'
p607
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p608
I5
sS'.thisN'
p609
I65
sS'.thisIndex'
p610
I13
sg15
(lp611
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp612
S'space'
p613
asg95
I13
sa(dp614
g16
(lp615
S'k'
asg18
S'Y'
sS'.thisRepN'
p616
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p617
I6
sS'.thisN'
p618
I66
sS'.thisIndex'
p619
I3
sg15
(lp620
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp621
S'space'
p622
asg95
I3
sa(dp623
g16
(lp624
S'k'
asg18
S'Y'
sS'.thisRepN'
p625
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p626
I7
sS'.thisN'
p627
I67
sS'.thisIndex'
p628
I1
sg15
(lp629
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp630
S'space'
p631
asg95
I1
sa(dp632
g16
(lp633
S'k'
asg18
S'N'
sS'.thisRepN'
p634
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p635
I8
sS'.thisN'
p636
I68
sS'.thisIndex'
p637
I5
sg15
(lp638
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp639
g16
(lp640
S'k'
asg18
S'N'
sS'.thisRepN'
p641
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p642
I9
sS'.thisN'
p643
I69
sS'.thisIndex'
p644
I6
sg15
(lp645
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp646
S'space'
p647
asg95
I6
sa(dp648
g16
(lp649
S'd'
asg18
S'N'
sS'.thisRepN'
p650
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p651
I10
sS'.thisN'
p652
I70
sS'.thisIndex'
p653
I1
sg15
(lp654
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I1
sa(dp655
g16
(lp656
S'k'
asg18
S'Y'
sS'.thisRepN'
p657
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p658
I11
sS'.thisN'
p659
I71
sS'.thisIndex'
p660
I6
sg15
(lp661
S'd'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
(lp662
S'space'
p663
asg95
I6
sa(dp664
g16
(lp665
S'd'
asg18
S'Y'
sS'.thisRepN'
p666
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p667
I12
sS'.thisN'
p668
I72
sS'.thisIndex'
p669
I2
sg15
(lp670
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
(lp671
S'space'
p672
asg95
I2
sa(dp673
g16
(lp674
S'k'
asg18
S'Y'
sS'.thisRepN'
p675
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p676
I13
sS'.thisN'
p677
I73
sS'.thisIndex'
p678
I1
sg15
(lp679
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp680
S'space'
p681
asg95
I1
sa(dp682
g16
(lp683
S'd'
asg18
S'N'
sS'.thisRepN'
p684
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p685
I14
sS'.thisN'
p686
I74
sS'.thisIndex'
p687
I10
sg15
(lp688
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I10
sa(dp689
g16
(lp690
S'k'
asg18
S'Y'
sS'.thisRepN'
p691
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p692
I0
sS'.thisN'
p693
I75
sS'.thisIndex'
p694
I14
sg15
(lp695
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp696
S'space'
p697
asg95
I14
sa(dp698
g16
(lp699
S'k'
asg18
S'Y'
sS'.thisRepN'
p700
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p701
I1
sS'.thisN'
p702
I76
sS'.thisIndex'
p703
I3
sg15
(lp704
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp705
S'space'
p706
asg95
I3
sa(dp707
g16
(lp708
S'd'
asg18
S'N'
sS'.thisRepN'
p709
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p710
I2
sS'.thisN'
p711
I77
sS'.thisIndex'
p712
I8
sg15
(lp713
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp714
g16
(lp715
S'k'
asg18
S'Y'
sS'.thisRepN'
p716
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p717
I3
sS'.thisN'
p718
I78
sS'.thisIndex'
p719
I14
sg15
(lp720
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp721
S'space'
p722
asg95
I14
sa(dp723
g16
(lp724
S'k'
asg18
S'N'
sS'.thisRepN'
p725
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p726
I4
sS'.thisN'
p727
I79
sS'.thisIndex'
p728
I1
sg15
(lp729
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp730
g16
(lp731
S'k'
asg18
S'N'
sS'.thisRepN'
p732
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p733
I5
sS'.thisN'
p734
I80
sS'.thisIndex'
p735
I5
sg15
(lp736
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp737
g16
(lp738
S'k'
asg18
S'N'
sS'.thisRepN'
p739
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p740
I6
sS'.thisN'
p741
I81
sS'.thisIndex'
p742
I6
sg15
(lp743
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I6
sa(dp744
g16
(lp745
S'k'
asg18
S'Y'
sS'.thisRepN'
p746
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p747
I7
sS'.thisN'
p748
I82
sS'.thisIndex'
p749
I9
sg15
(lp750
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp751
S'space'
p752
asg95
I9
sa(dp753
g16
(lp754
S'k'
asg18
S'N'
sS'.thisRepN'
p755
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p756
I8
sS'.thisN'
p757
I83
sS'.thisIndex'
p758
I6
sg15
(lp759
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp760
S'd'
asg95
I6
sa(dp761
g16
(lp762
S'd'
asg18
S'N'
sS'.thisRepN'
p763
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p764
I9
sS'.thisN'
p765
I84
sS'.thisIndex'
p766
I4
sg15
(lp767
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I4
sa(dp768
g16
(lp769
S'd'
asg18
S'Y'
sS'.thisRepN'
p770
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p771
I10
sS'.thisN'
p772
I85
sS'.thisIndex'
p773
I5
sg15
(lp774
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
(lp775
S'space'
p776
asg95
I5
sa(dp777
g16
(lp778
S'd'
asg18
S'N'
sS'.thisRepN'
p779
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p780
I11
sS'.thisN'
p781
I86
sS'.thisIndex'
p782
I0
sg15
(lp783
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I0
sa(dp784
g16
(lp785
S'd'
asg18
S'Y'
sS'.thisRepN'
p786
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p787
I12
sS'.thisN'
p788
I87
sS'.thisIndex'
p789
I10
sg15
(lp790
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
(lp791
S'space'
p792
asg95
I10
sa(dp793
g16
(lp794
S'd'
asg18
S'N'
sS'.thisRepN'
p795
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p796
I13
sS'.thisN'
p797
I88
sS'.thisIndex'
p798
I12
sg15
(lp799
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
(lp800
S'space'
p801
asg95
I12
sa(dp802
g16
(lp803
S'k'
asg18
S'Y'
sS'.thisRepN'
p804
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p805
I14
sS'.thisN'
p806
I89
sS'.thisIndex'
p807
I10
sg15
(lp808
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp809
S'space'
p810
asg95
I10
sa(dp811
g16
(lp812
S'd'
asg18
S'N'
sS'.thisRepN'
p813
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p814
I0
sS'.thisN'
p815
I90
sS'.thisIndex'
p816
I7
sg15
(lp817
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp818
g16
(lp819
S'd'
asg18
S'N'
sS'.thisRepN'
p820
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p821
I1
sS'.thisN'
p822
I91
sS'.thisIndex'
p823
I13
sg15
(lp824
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I13
sa(dp825
g16
(lp826
S'k'
asg18
S'Y'
sS'.thisRepN'
p827
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p828
I2
sS'.thisN'
p829
I92
sS'.thisIndex'
p830
I7
sg15
(lp831
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp832
S'space'
p833
asg95
I7
sa(dp834
g16
(lp835
S'd'
asg18
S'Y'
sS'.thisRepN'
p836
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p837
I3
sS'.thisN'
p838
I93
sS'.thisIndex'
p839
I6
sg15
(lp840
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
(lp841
S'space'
p842
asg95
I6
sa(dp843
g16
(lp844
S'd'
asg18
S'Y'
sS'.thisRepN'
p845
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p846
I4
sS'.thisN'
p847
I94
sS'.thisIndex'
p848
I4
sg15
(lp849
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
(lp850
S'k'
asg95
I4
sa(dp851
g16
(lp852
S'd'
asg18
S'Y'
sS'.thisRepN'
p853
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p854
I5
sS'.thisN'
p855
I95
sS'.thisIndex'
p856
I8
sg15
(lp857
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
(lp858
S'space'
p859
asg95
I8
sa(dp860
g16
(lp861
S'd'
asg18
S'N'
sS'.thisRepN'
p862
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p863
I6
sS'.thisN'
p864
I96
sS'.thisIndex'
p865
I5
sg15
(lp866
S'k'
asg30
Vm
sg17
S'N'
sg14
I2
sg19
Nsg95
I5
sa(dp867
g16
(lp868
S'k'
asg18
S'Y'
sS'.thisRepN'
p869
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p870
I7
sS'.thisN'
p871
I97
sS'.thisIndex'
p872
I6
sg15
(lp873
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
(lp874
S'space'
p875
asg95
I6
sa(dp876
g16
(lp877
S'd'
asg18
S'N'
sS'.thisRepN'
p878
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p879
I8
sS'.thisN'
p880
I98
sS'.thisIndex'
p881
I3
sg15
(lp882
S'd'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp883
g16
(lp884
S'k'
asg18
S'N'
sg22
I43
sS'.thisN'
p885
I99
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p886
I9
sS'.thisRepN'
p887
I6
sg21
I31
sS'.thisIndex'
p888
I6
sg23
I25
sg15
(lp889
S'k'
asg30
Vm
sg17
S'Y'
sg14
I2
sg19
Nsg95
I6
sa(dp890
g16
(lp891
S'k'
asg95
I5
sS'.thisRepN'
p892
I6
sg30
Vm
sg31
g32
sS'.thisTrialN'
p893
I10
sS'.thisN'
p894
I100
sS'.thisIndex'
p895
I5
sg15
(lp896
S'k'
asg17
S'Y'
sg14
I3
sa(dp897
g16
(lp898
S'k'
asg95
I0
sS'.thisRepN'
p899
I6
sg30
Vm
sg31
g32
sS'.thisTrialN'
p900
I11
sS'.thisN'
p901
I101
sS'.thisIndex'
p902
I0
sg15
(lp903
S'k'
asg17
S'Y'
sg14
I3
sa(dp904
g16
(lp905
S'd'
asg18
S'Y'
sS'.thisRepN'
p906
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p907
I12
sS'.thisN'
p908
I102
sS'.thisIndex'
p909
I5
sg15
(lp910
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp911
S'space'
p912
asg95
I5
sa(dp913
g16
(lp914
S'd'
asg18
S'N'
sS'.thisRepN'
p915
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p916
I13
sS'.thisN'
p917
I103
sS'.thisIndex'
p918
I4
sg15
(lp919
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I4
sa(dp920
g16
(lp921
S'd'
asg18
S'N'
sS'.thisRepN'
p922
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p923
I14
sS'.thisN'
p924
I104
sS'.thisIndex'
p925
I13
sg15
(lp926
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I13
sa(dp927
g16
(lp928
S'k'
asg18
S'N'
sS'.thisRepN'
p929
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p930
I0
sS'.thisN'
p931
I105
sS'.thisIndex'
p932
I13
sg15
(lp933
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I13
sa(dp934
g16
(lp935
S'k'
asg18
S'Y'
sS'.thisRepN'
p936
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p937
I1
sS'.thisN'
p938
I106
sS'.thisIndex'
p939
I7
sg15
(lp940
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp941
S'space'
p942
asg95
I7
sa(dp943
g16
(lp944
S'k'
asg18
S'Y'
sS'.thisRepN'
p945
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p946
I2
sS'.thisN'
p947
I107
sS'.thisIndex'
p948
I10
sg15
(lp949
S'd'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
(lp950
S'space'
p951
asg95
I10
sa(dp952
g16
(lp953
S'd'
asg18
S'Y'
sS'.thisRepN'
p954
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p955
I3
sS'.thisN'
p956
I108
sS'.thisIndex'
p957
I1
sg15
(lp958
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp959
S'space'
p960
asg95
I1
sa(dp961
g16
(lp962
S'k'
asg18
S'Y'
sS'.thisRepN'
p963
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p964
I4
sS'.thisN'
p965
I109
sS'.thisIndex'
p966
I0
sg15
(lp967
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp968
S'space'
p969
asg95
I0
sa(dp970
g16
(lp971
S'd'
asg18
S'N'
sS'.thisRepN'
p972
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p973
I5
sS'.thisN'
p974
I110
sS'.thisIndex'
p975
I1
sg15
(lp976
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp977
g16
(lp978
S'k'
asg18
S'N'
sS'.thisRepN'
p979
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p980
I6
sS'.thisN'
p981
I111
sS'.thisIndex'
p982
I8
sg15
(lp983
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp984
g16
(lp985
S'k'
asg18
S'N'
sS'.thisRepN'
p986
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p987
I7
sS'.thisN'
p988
I112
sS'.thisIndex'
p989
I12
sg15
(lp990
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I12
sa(dp991
g16
(lp992
S'k'
asg18
S'N'
sS'.thisRepN'
p993
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p994
I8
sS'.thisN'
p995
I113
sS'.thisIndex'
p996
I6
sg15
(lp997
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp998
g16
(lp999
S'd'
asg18
S'Y'
sS'.thisRepN'
p1000
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1001
I9
sS'.thisN'
p1002
I114
sS'.thisIndex'
p1003
I3
sg15
(lp1004
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I3
sa(dp1005
g16
(lp1006
S'd'
asg18
S'N'
sS'.thisRepN'
p1007
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1008
I10
sS'.thisN'
p1009
I115
sS'.thisIndex'
p1010
I1
sg15
(lp1011
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I1
sa(dp1012
g16
(lp1013
S'd'
asg18
S'N'
sS'.thisRepN'
p1014
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1015
I11
sS'.thisN'
p1016
I116
sS'.thisIndex'
p1017
I3
sg15
(lp1018
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp1019
g16
(lp1020
S'd'
asg18
S'N'
sS'.thisRepN'
p1021
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1022
I12
sS'.thisN'
p1023
I117
sS'.thisIndex'
p1024
I4
sg15
(lp1025
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I4
sa(dp1026
g16
(lp1027
S'd'
asg18
S'Y'
sS'.thisRepN'
p1028
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1029
I13
sS'.thisN'
p1030
I118
sS'.thisIndex'
p1031
I2
sg15
(lp1032
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I2
sa(dp1033
g16
(lp1034
S'k'
asg18
S'N'
sS'.thisRepN'
p1035
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1036
I14
sS'.thisN'
p1037
I119
sS'.thisIndex'
p1038
I7
sg15
(lp1039
S'd'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I7
sa(dp1040
g16
(lp1041
S'k'
asg18
S'Y'
sS'.thisRepN'
p1042
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1043
I0
sS'.thisN'
p1044
I120
sS'.thisIndex'
p1045
I6
sg15
(lp1046
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1047
S'space'
p1048
asg95
I6
sa(dp1049
g16
(lp1050
S'k'
asg18
S'Y'
sS'.thisRepN'
p1051
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1052
I1
sS'.thisN'
p1053
I121
sS'.thisIndex'
p1054
I5
sg15
(lp1055
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1056
S'space'
p1057
asg95
I5
sa(dp1058
g16
(lp1059
S'k'
asg18
S'Y'
sS'.thisRepN'
p1060
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1061
I2
sS'.thisN'
p1062
I122
sS'.thisIndex'
p1063
I9
sg15
(lp1064
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1065
S'space'
p1066
asg95
I9
sa(dp1067
g16
(lp1068
S'k'
asg18
S'N'
sS'.thisRepN'
p1069
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1070
I3
sS'.thisN'
p1071
I123
sS'.thisIndex'
p1072
I9
sg15
(lp1073
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I9
sa(dp1074
g16
(lp1075
S'k'
asg18
S'N'
sS'.thisRepN'
p1076
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1077
I4
sS'.thisN'
p1078
I124
sS'.thisIndex'
p1079
I0
sg15
(lp1080
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp1081
g16
(lp1082
S'd'
asg18
S'Y'
sS'.thisRepN'
p1083
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1084
I5
sS'.thisN'
p1085
I125
sS'.thisIndex'
p1086
I0
sg15
(lp1087
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1088
S'space'
p1089
asg95
I0
sa(dp1090
g16
(lp1091
S'd'
asg18
S'Y'
sS'.thisRepN'
p1092
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1093
I6
sS'.thisN'
p1094
I126
sS'.thisIndex'
p1095
I8
sg15
(lp1096
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1097
S'space'
p1098
asg95
I8
sa(dp1099
g16
(lp1100
S'k'
asg18
S'N'
sS'.thisRepN'
p1101
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1102
I7
sS'.thisN'
p1103
I127
sS'.thisIndex'
p1104
I3
sg15
(lp1105
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp1106
g16
(lp1107
S'd'
asg18
S'N'
sS'.thisRepN'
p1108
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1109
I8
sS'.thisN'
p1110
I128
sS'.thisIndex'
p1111
I5
sg15
(lp1112
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I5
sa(dp1113
g16
(lp1114
S'k'
asg18
S'N'
sS'.thisRepN'
p1115
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1116
I9
sS'.thisN'
p1117
I129
sS'.thisIndex'
p1118
I2
sg15
(lp1119
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp1120
g16
(lp1121
S'd'
asg18
S'N'
sS'.thisRepN'
p1122
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1123
I10
sS'.thisN'
p1124
I130
sS'.thisIndex'
p1125
I14
sg15
(lp1126
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I14
sa(dp1127
g16
(lp1128
S'd'
asg18
S'Y'
sS'.thisRepN'
p1129
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1130
I11
sS'.thisN'
p1131
I131
sS'.thisIndex'
p1132
I9
sg15
(lp1133
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1134
S'space'
p1135
asg95
I9
sa(dp1136
g16
(lp1137
S'd'
asg18
S'Y'
sS'.thisRepN'
p1138
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1139
I12
sS'.thisN'
p1140
I132
sS'.thisIndex'
p1141
I3
sg15
(lp1142
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1143
S'space'
p1144
asg95
I3
sa(dp1145
g16
(lp1146
S'd'
asg18
S'N'
sS'.thisRepN'
p1147
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1148
I13
sS'.thisN'
p1149
I133
sS'.thisIndex'
p1150
I14
sg15
(lp1151
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
(lp1152
S'space'
p1153
asg95
I14
sa(dp1154
g16
(lp1155
S'k'
asg18
S'Y'
sS'.thisRepN'
p1156
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1157
I14
sS'.thisN'
p1158
I134
sS'.thisIndex'
p1159
I9
sg15
(lp1160
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1161
S'space'
p1162
asg95
I9
sa(dp1163
g16
(lp1164
S'd'
asg18
S'Y'
sS'.thisRepN'
p1165
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1166
I0
sS'.thisN'
p1167
I135
sS'.thisIndex'
p1168
I3
sg15
(lp1169
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1170
S'space'
p1171
asg95
I3
sa(dp1172
g16
(lp1173
S'd'
asg18
S'N'
sS'.thisRepN'
p1174
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1175
I1
sS'.thisN'
p1176
I136
sS'.thisIndex'
p1177
I13
sg15
(lp1178
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I13
sa(dp1179
g16
(lp1180
S'k'
asg18
S'Y'
sS'.thisRepN'
p1181
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1182
I2
sS'.thisN'
p1183
I137
sS'.thisIndex'
p1184
I5
sg15
(lp1185
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1186
S'space'
p1187
asg95
I5
sa(dp1188
g16
(lp1189
S'k'
asg18
S'Y'
sS'.thisRepN'
p1190
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1191
I3
sS'.thisN'
p1192
I138
sS'.thisIndex'
p1193
I6
sg15
(lp1194
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1195
S'space'
p1196
asg95
I6
sa(dp1197
g16
(lp1198
S'd'
asg18
S'N'
sS'.thisRepN'
p1199
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1200
I4
sS'.thisN'
p1201
I139
sS'.thisIndex'
p1202
I6
sg15
(lp1203
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp1204
g16
(lp1205
S'd'
asg18
S'Y'
sS'.thisRepN'
p1206
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1207
I5
sS'.thisN'
p1208
I140
sS'.thisIndex'
p1209
I4
sg15
(lp1210
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1211
S'space'
p1212
asg95
I4
sa(dp1213
g16
(lp1214
S'k'
asg18
S'Y'
sS'.thisRepN'
p1215
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1216
I6
sS'.thisN'
p1217
I141
sS'.thisIndex'
p1218
I2
sg15
(lp1219
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1220
S'k'
asg95
I2
sa(dp1221
g16
(lp1222
S'k'
asg18
S'N'
sS'.thisRepN'
p1223
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1224
I7
sS'.thisN'
p1225
I142
sS'.thisIndex'
p1226
I12
sg15
(lp1227
S'd'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I12
sa(dp1228
g16
(lp1229
S'd'
asg18
S'Y'
sS'.thisRepN'
p1230
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1231
I8
sS'.thisN'
p1232
I143
sS'.thisIndex'
p1233
I13
sg15
(lp1234
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
(lp1235
S'space'
p1236
asg95
I13
sa(dp1237
g16
(lp1238
S'd'
asg18
S'Y'
sS'.thisRepN'
p1239
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1240
I9
sS'.thisN'
p1241
I144
sS'.thisIndex'
p1242
I11
sg15
(lp1243
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1244
S'space'
p1245
asg95
I11
sa(dp1246
g16
(lp1247
S'k'
asg18
S'N'
sS'.thisRepN'
p1248
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1249
I10
sS'.thisN'
p1250
I145
sS'.thisIndex'
p1251
I6
sg15
(lp1252
S'd'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
Nsg95
I6
sa(dp1253
g16
(lp1254
S'd'
asg18
S'N'
sS'.thisRepN'
p1255
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1256
I11
sS'.thisN'
p1257
I146
sS'.thisIndex'
p1258
I10
sg15
(lp1259
S'k'
asg30
Vm
sg17
S'N'
sg14
I3
sg19
(lp1260
S'space'
p1261
asg95
I10
sa(dp1262
g16
(lp1263
S'd'
asg18
S'Y'
sS'.thisRepN'
p1264
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1265
I12
sS'.thisN'
p1266
I147
sS'.thisIndex'
p1267
I14
sg15
(lp1268
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1269
S'space'
p1270
asg95
I14
sa(dp1271
g16
(lp1272
S'k'
asg18
S'Y'
sS'.thisRepN'
p1273
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1274
I13
sS'.thisN'
p1275
I148
sS'.thisIndex'
p1276
I0
sg15
(lp1277
S'k'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1278
S'space'
p1279
asg95
I0
sa(dp1280
g16
(lp1281
S'd'
asg18
S'Y'
sg22
I43
sS'.thisN'
p1282
I149
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1283
I14
sS'.thisRepN'
p1284
I9
sg21
I36
sS'.thisIndex'
p1285
I4
sg23
I25
sg15
(lp1286
S'd'
asg30
Vm
sg17
S'Y'
sg14
I3
sg19
(lp1287
S'space'
p1288
asg95
I4
sa(dp1289
g16
(lp1290
S'd'
asg95
I1
sS'.thisRepN'
p1291
I10
sg30
Vm
sg31
g32
sS'.thisTrialN'
p1292
I0
sS'.thisN'
p1293
I150
sS'.thisIndex'
p1294
I1
sg15
(lp1295
S'k'
asg17
S'N'
sg14
I4
sa(dp1296
g16
(lp1297
S'd'
asg95
I0
sS'.thisRepN'
p1298
I10
sg30
Vm
sg31
g32
sS'.thisTrialN'
p1299
I1
sS'.thisN'
p1300
I151
sS'.thisIndex'
p1301
I0
sg15
(lp1302
S'k'
asg17
S'N'
sg14
I4
sa(dp1303
g16
(lp1304
S'd'
asg18
S'N'
sS'.thisRepN'
p1305
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1306
I2
sS'.thisN'
p1307
I152
sS'.thisIndex'
p1308
I6
sg15
(lp1309
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1310
S'space'
p1311
asg95
I6
sa(dp1312
g16
(lp1313
S'k'
asg18
S'N'
sS'.thisRepN'
p1314
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1315
I3
sS'.thisN'
p1316
I153
sS'.thisIndex'
p1317
I3
sg15
(lp1318
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1319
g16
(lp1320
S'd'
asg18
S'N'
sS'.thisRepN'
p1321
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1322
I4
sS'.thisN'
p1323
I154
sS'.thisIndex'
p1324
I0
sg15
(lp1325
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1326
S'space'
p1327
asg95
I0
sa(dp1328
g16
(lp1329
S'd'
asg18
S'Y'
sS'.thisRepN'
p1330
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1331
I5
sS'.thisN'
p1332
I155
sS'.thisIndex'
p1333
I3
sg15
(lp1334
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
(lp1335
S'space'
p1336
asg95
I3
sa(dp1337
g16
(lp1338
S'k'
asg18
S'N'
sS'.thisRepN'
p1339
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1340
I6
sS'.thisN'
p1341
I156
sS'.thisIndex'
p1342
I9
sg15
(lp1343
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1344
g16
(lp1345
S'k'
asg18
S'N'
sS'.thisRepN'
p1346
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1347
I7
sS'.thisN'
p1348
I157
sS'.thisIndex'
p1349
I8
sg15
(lp1350
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1351
g16
(lp1352
S'd'
asg18
S'Y'
sS'.thisRepN'
p1353
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1354
I8
sS'.thisN'
p1355
I158
sS'.thisIndex'
p1356
I6
sg15
(lp1357
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1358
S'space'
p1359
asg95
I6
sa(dp1360
g16
(lp1361
S'k'
asg18
S'Y'
sS'.thisRepN'
p1362
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1363
I9
sS'.thisN'
p1364
I159
sS'.thisIndex'
p1365
I13
sg15
(lp1366
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1367
S'space'
p1368
asg95
I13
sa(dp1369
g16
(lp1370
S'k'
asg18
S'N'
sS'.thisRepN'
p1371
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1372
I10
sS'.thisN'
p1373
I160
sS'.thisIndex'
p1374
I13
sg15
(lp1375
S'd'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I13
sa(dp1376
g16
(lp1377
S'd'
asg18
S'Y'
sS'.thisRepN'
p1378
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1379
I11
sS'.thisN'
p1380
I161
sS'.thisIndex'
p1381
I13
sg15
(lp1382
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
(lp1383
S'space'
p1384
asg95
I13
sa(dp1385
g16
(lp1386
S'k'
asg18
S'Y'
sS'.thisRepN'
p1387
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1388
I12
sS'.thisN'
p1389
I162
sS'.thisIndex'
p1390
I11
sg15
(lp1391
S'd'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
(lp1392
S'space'
p1393
asg95
I11
sa(dp1394
g16
(lp1395
S'd'
asg18
S'Y'
sS'.thisRepN'
p1396
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1397
I13
sS'.thisN'
p1398
I163
sS'.thisIndex'
p1399
I12
sg15
(lp1400
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
(lp1401
S'space'
p1402
asg95
I12
sa(dp1403
g16
(lp1404
S'k'
asg18
S'Y'
sS'.thisRepN'
p1405
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1406
I14
sS'.thisN'
p1407
I164
sS'.thisIndex'
p1408
I9
sg15
(lp1409
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1410
S'space'
p1411
asg95
I9
sa(dp1412
g16
(lp1413
S'k'
asg18
S'N'
sS'.thisRepN'
p1414
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1415
I0
sS'.thisN'
p1416
I165
sS'.thisIndex'
p1417
I13
sg15
(lp1418
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I13
sa(dp1419
g16
(lp1420
S'd'
asg18
S'N'
sS'.thisRepN'
p1421
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1422
I1
sS'.thisN'
p1423
I166
sS'.thisIndex'
p1424
I14
sg15
(lp1425
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I14
sa(dp1426
g16
(lp1427
S'd'
asg18
S'Y'
sS'.thisRepN'
p1428
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1429
I2
sS'.thisN'
p1430
I167
sS'.thisIndex'
p1431
I14
sg15
(lp1432
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1433
S'space'
p1434
asg95
I14
sa(dp1435
g16
(lp1436
S'd'
asg18
S'N'
sS'.thisRepN'
p1437
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1438
I3
sS'.thisN'
p1439
I168
sS'.thisIndex'
p1440
I5
sg15
(lp1441
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1442
g16
(lp1443
S'd'
asg18
S'N'
sS'.thisRepN'
p1444
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1445
I4
sS'.thisN'
p1446
I169
sS'.thisIndex'
p1447
I11
sg15
(lp1448
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I11
sa(dp1449
g16
(lp1450
S'd'
asg18
S'N'
sS'.thisRepN'
p1451
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1452
I5
sS'.thisN'
p1453
I170
sS'.thisIndex'
p1454
I9
sg15
(lp1455
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I9
sa(dp1456
g16
(lp1457
S'd'
asg18
S'Y'
sS'.thisRepN'
p1458
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1459
I6
sS'.thisN'
p1460
I171
sS'.thisIndex'
p1461
I11
sg15
(lp1462
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1463
S'space'
p1464
asg95
I11
sa(dp1465
g16
(lp1466
S'd'
asg18
S'Y'
sS'.thisRepN'
p1467
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1468
I7
sS'.thisN'
p1469
I172
sS'.thisIndex'
p1470
I12
sg15
(lp1471
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1472
S'space'
p1473
asg95
I12
sa(dp1474
g16
(lp1475
S'k'
asg18
S'N'
sS'.thisRepN'
p1476
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1477
I8
sS'.thisN'
p1478
I173
sS'.thisIndex'
p1479
I8
sg15
(lp1480
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1481
g16
(lp1482
S'k'
asg18
S'Y'
sS'.thisRepN'
p1483
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1484
I9
sS'.thisN'
p1485
I174
sS'.thisIndex'
p1486
I11
sg15
(lp1487
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1488
S'space'
p1489
asg95
I11
sa(dp1490
g16
(lp1491
S'k'
asg18
S'N'
sS'.thisRepN'
p1492
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1493
I10
sS'.thisN'
p1494
I175
sS'.thisIndex'
p1495
I0
sg15
(lp1496
S'd'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I0
sa(dp1497
g16
(lp1498
S'k'
asg18
S'Y'
sS'.thisRepN'
p1499
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1500
I11
sS'.thisN'
p1501
I176
sS'.thisIndex'
p1502
I5
sg15
(lp1503
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1504
S'space'
p1505
asg95
I5
sa(dp1506
g16
(lp1507
S'd'
asg18
S'Y'
sS'.thisRepN'
p1508
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1509
I12
sS'.thisN'
p1510
I177
sS'.thisIndex'
p1511
I2
sg15
(lp1512
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1513
S'space'
p1514
asg95
I2
sa(dp1515
g16
(lp1516
S'k'
asg18
S'Y'
sS'.thisRepN'
p1517
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1518
I13
sS'.thisN'
p1519
I178
sS'.thisIndex'
p1520
I11
sg15
(lp1521
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1522
S'space'
p1523
asg95
I11
sa(dp1524
g16
(lp1525
S'd'
asg18
S'N'
sS'.thisRepN'
p1526
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1527
I14
sS'.thisN'
p1528
I179
sS'.thisIndex'
p1529
I9
sg15
(lp1530
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I9
sa(dp1531
g16
(lp1532
S'k'
asg18
S'N'
sS'.thisRepN'
p1533
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1534
I0
sS'.thisN'
p1535
I180
sS'.thisIndex'
p1536
I4
sg15
(lp1537
S'd'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I4
sa(dp1538
g16
(lp1539
S'k'
asg18
S'N'
sS'.thisRepN'
p1540
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1541
I1
sS'.thisN'
p1542
I181
sS'.thisIndex'
p1543
I7
sg15
(lp1544
S'd'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I7
sa(dp1545
g16
(lp1546
S'd'
asg18
S'N'
sS'.thisRepN'
p1547
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1548
I2
sS'.thisN'
p1549
I182
sS'.thisIndex'
p1550
I8
sg15
(lp1551
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
(lp1552
S'space'
p1553
asg95
I8
sa(dp1554
g16
(lp1555
S'd'
asg18
S'Y'
sS'.thisRepN'
p1556
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1557
I3
sS'.thisN'
p1558
I183
sS'.thisIndex'
p1559
I0
sg15
(lp1560
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1561
S'space'
p1562
asg95
I0
sa(dp1563
g16
(lp1564
S'k'
asg18
S'N'
sS'.thisRepN'
p1565
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1566
I4
sS'.thisN'
p1567
I184
sS'.thisIndex'
p1568
I12
sg15
(lp1569
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I12
sa(dp1570
g16
(lp1571
S'd'
asg18
S'Y'
sS'.thisRepN'
p1572
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1573
I5
sS'.thisN'
p1574
I185
sS'.thisIndex'
p1575
I3
sg15
(lp1576
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
(lp1577
S'space'
p1578
asg95
I3
sa(dp1579
g16
(lp1580
S'd'
asg18
S'N'
sS'.thisRepN'
p1581
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1582
I6
sS'.thisN'
p1583
I186
sS'.thisIndex'
p1584
I7
sg15
(lp1585
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1586
g16
(lp1587
S'd'
asg18
S'Y'
sS'.thisRepN'
p1588
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1589
I7
sS'.thisN'
p1590
I187
sS'.thisIndex'
p1591
I0
sg15
(lp1592
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
(lp1593
S'space'
p1594
asg95
I0
sa(dp1595
g16
(lp1596
S'k'
asg18
S'N'
sS'.thisRepN'
p1597
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1598
I8
sS'.thisN'
p1599
I188
sS'.thisIndex'
p1600
I2
sg15
(lp1601
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I2
sa(dp1602
g16
(lp1603
S'k'
asg18
S'Y'
sS'.thisRepN'
p1604
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1605
I9
sS'.thisN'
p1606
I189
sS'.thisIndex'
p1607
I3
sg15
(lp1608
S'k'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1609
S'space'
p1610
asg95
I3
sa(dp1611
g16
(lp1612
S'd'
asg18
S'Y'
sS'.thisRepN'
p1613
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1614
I10
sS'.thisN'
p1615
I190
sS'.thisIndex'
p1616
I6
sg15
(lp1617
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
(lp1618
S'space'
p1619
asg95
I6
sa(dp1620
g16
(lp1621
S'd'
asg18
S'N'
sS'.thisRepN'
p1622
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1623
I11
sS'.thisN'
p1624
I191
sS'.thisIndex'
p1625
I13
sg15
(lp1626
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
Nsg95
I13
sa(dp1627
g16
(lp1628
S'd'
asg18
S'N'
sS'.thisRepN'
p1629
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1630
I12
sS'.thisN'
p1631
I192
sS'.thisIndex'
p1632
I5
sg15
(lp1633
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I5
sa(dp1634
g16
(lp1635
S'k'
asg18
S'N'
sS'.thisRepN'
p1636
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1637
I13
sS'.thisN'
p1638
I193
sS'.thisIndex'
p1639
I4
sg15
(lp1640
S'd'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I4
sa(dp1641
g16
(lp1642
S'd'
asg18
S'Y'
sS'.thisRepN'
p1643
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1644
I14
sS'.thisN'
p1645
I194
sS'.thisIndex'
p1646
I3
sg15
(lp1647
S'd'
asg30
Vm
sg17
S'Y'
sg14
I4
sg19
(lp1648
S'space'
p1649
asg95
I3
sa(dp1650
g16
(lp1651
S'd'
asg18
S'Y'
sS'.thisRepN'
p1652
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1653
I0
sS'.thisN'
p1654
I195
sS'.thisIndex'
p1655
I8
sg15
(lp1656
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
(lp1657
S'space'
p1658
asg95
I8
sa(dp1659
g16
(lp1660
S'd'
asg18
S'Y'
sS'.thisRepN'
p1661
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1662
I1
sS'.thisN'
p1663
I196
sS'.thisIndex'
p1664
I2
sg15
(lp1665
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
(lp1666
S'space'
p1667
asg95
I2
sa(dp1668
g16
(lp1669
S'k'
asg18
S'N'
sS'.thisRepN'
p1670
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1671
I2
sS'.thisN'
p1672
I197
sS'.thisIndex'
p1673
I10
sg15
(lp1674
S'd'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I10
sa(dp1675
g16
(lp1676
S'd'
asg18
S'N'
sS'.thisRepN'
p1677
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1678
I3
sS'.thisN'
p1679
I198
sS'.thisIndex'
p1680
I1
sg15
(lp1681
S'k'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I1
sa(dp1682
g16
(lp1683
S'k'
asg18
S'N'
sg22
I45
sS'.thisN'
p1684
I199
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1685
I4
sS'.thisRepN'
p1686
I13
sg21
I26
sS'.thisIndex'
p1687
I1
sg23
I22
sg15
(lp1688
S'd'
asg30
Vm
sg17
S'N'
sg14
I4
sg19
Nsg95
I1
sa(dp1689
g16
(lp1690
S'd'
asg95
I13
sS'.thisRepN'
p1691
I13
sg30
Vm
sg31
g32
sS'.thisTrialN'
p1692
I5
sS'.thisN'
p1693
I200
sS'.thisIndex'
p1694
I13
sg15
(lp1695
S'd'
asg17
S'Y'
sg14
I5
sa(dp1696
g16
(lp1697
S'd'
asg95
I10
sS'.thisRepN'
p1698
I13
sg30
Vm
sg31
g32
sS'.thisTrialN'
p1699
I6
sS'.thisN'
p1700
I201
sS'.thisIndex'
p1701
I10
sg15
(lp1702
S'd'
asg17
S'Y'
sg14
I5
sa(dp1703
g16
(lp1704
S'k'
asg18
S'Y'
sS'.thisRepN'
p1705
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1706
I7
sS'.thisN'
p1707
I202
sS'.thisIndex'
p1708
I7
sg15
(lp1709
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
(lp1710
S'space'
p1711
asg95
I7
sa(dp1712
g16
(lp1713
S'k'
asg18
S'Y'
sS'.thisRepN'
p1714
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1715
I8
sS'.thisN'
p1716
I203
sS'.thisIndex'
p1717
I8
sg15
(lp1718
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1719
S'space'
p1720
asg95
I8
sa(dp1721
g16
(lp1722
S'k'
asg18
S'Y'
sS'.thisRepN'
p1723
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1724
I9
sS'.thisN'
p1725
I204
sS'.thisIndex'
p1726
I11
sg15
(lp1727
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1728
S'space'
p1729
asg95
I11
sa(dp1730
g16
(lp1731
S'd'
asg18
S'N'
sS'.thisRepN'
p1732
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1733
I10
sS'.thisN'
p1734
I205
sS'.thisIndex'
p1735
I2
sg15
(lp1736
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1737
g16
(lp1738
S'k'
asg18
S'N'
sS'.thisRepN'
p1739
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1740
I11
sS'.thisN'
p1741
I206
sS'.thisIndex'
p1742
I10
sg15
(lp1743
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp1744
g16
(lp1745
S'k'
asg18
S'N'
sS'.thisRepN'
p1746
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1747
I12
sS'.thisN'
p1748
I207
sS'.thisIndex'
p1749
I5
sg15
(lp1750
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I5
sa(dp1751
g16
(lp1752
S'k'
asg18
S'N'
sS'.thisRepN'
p1753
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1754
I13
sS'.thisN'
p1755
I208
sS'.thisIndex'
p1756
I2
sg15
(lp1757
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1758
S'space'
p1759
asg95
I2
sa(dp1760
g16
(lp1761
S'k'
asg18
S'N'
sS'.thisRepN'
p1762
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1763
I14
sS'.thisN'
p1764
I209
sS'.thisIndex'
p1765
I1
sg15
(lp1766
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1767
g16
(lp1768
S'k'
asg18
S'Y'
sS'.thisRepN'
p1769
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1770
I0
sS'.thisN'
p1771
I210
sS'.thisIndex'
p1772
I6
sg15
(lp1773
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
(lp1774
S'space'
p1775
asg95
I6
sa(dp1776
g16
(lp1777
S'd'
asg18
S'Y'
sS'.thisRepN'
p1778
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1779
I1
sS'.thisN'
p1780
I211
sS'.thisIndex'
p1781
I5
sg15
(lp1782
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1783
S'space'
p1784
asg95
I5
sa(dp1785
g16
(lp1786
S'k'
asg18
S'Y'
sS'.thisRepN'
p1787
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1788
I2
sS'.thisN'
p1789
I212
sS'.thisIndex'
p1790
I0
sg15
(lp1791
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1792
S'space'
p1793
asg95
I0
sa(dp1794
g16
(lp1795
S'd'
asg18
S'N'
sS'.thisRepN'
p1796
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1797
I3
sS'.thisN'
p1798
I213
sS'.thisIndex'
p1799
I11
sg15
(lp1800
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I11
sa(dp1801
g16
(lp1802
S'd'
asg18
S'Y'
sS'.thisRepN'
p1803
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1804
I4
sS'.thisN'
p1805
I214
sS'.thisIndex'
p1806
I11
sg15
(lp1807
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1808
S'space'
p1809
asg95
I11
sa(dp1810
g16
(lp1811
S'd'
asg18
S'Y'
sS'.thisRepN'
p1812
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1813
I5
sS'.thisN'
p1814
I215
sS'.thisIndex'
p1815
I0
sg15
(lp1816
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1817
S'space'
p1818
asg95
I0
sa(dp1819
g16
(lp1820
S'd'
asg18
S'Y'
sS'.thisRepN'
p1821
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1822
I6
sS'.thisN'
p1823
I216
sS'.thisIndex'
p1824
I4
sg15
(lp1825
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1826
S'space'
p1827
asg95
I4
sa(dp1828
g16
(lp1829
S'd'
asg18
S'N'
sS'.thisRepN'
p1830
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1831
I7
sS'.thisN'
p1832
I217
sS'.thisIndex'
p1833
I1
sg15
(lp1834
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1835
g16
(lp1836
S'd'
asg18
S'Y'
sS'.thisRepN'
p1837
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1838
I8
sS'.thisN'
p1839
I218
sS'.thisIndex'
p1840
I13
sg15
(lp1841
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1842
S'space'
p1843
asg95
I13
sa(dp1844
g16
(lp1845
S'k'
asg18
S'Y'
sS'.thisRepN'
p1846
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1847
I9
sS'.thisN'
p1848
I219
sS'.thisIndex'
p1849
I0
sg15
(lp1850
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1851
S'space'
p1852
asg95
I0
sa(dp1853
g16
(lp1854
S'k'
asg18
S'Y'
sS'.thisRepN'
p1855
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1856
I10
sS'.thisN'
p1857
I220
sS'.thisIndex'
p1858
I12
sg15
(lp1859
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1860
S'space'
p1861
asg95
I12
sa(dp1862
g16
(lp1863
S'k'
asg18
S'Y'
sS'.thisRepN'
p1864
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1865
I11
sS'.thisN'
p1866
I221
sS'.thisIndex'
p1867
I7
sg15
(lp1868
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1869
S'space'
p1870
asg95
I7
sa(dp1871
g16
(lp1872
S'd'
asg18
S'N'
sS'.thisRepN'
p1873
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1874
I12
sS'.thisN'
p1875
I222
sS'.thisIndex'
p1876
I11
sg15
(lp1877
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I11
sa(dp1878
g16
(lp1879
S'd'
asg18
S'Y'
sS'.thisRepN'
p1880
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1881
I13
sS'.thisN'
p1882
I223
sS'.thisIndex'
p1883
I5
sg15
(lp1884
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
(lp1885
S'space'
p1886
asg95
I5
sa(dp1887
g16
(lp1888
S'd'
asg18
S'N'
sS'.thisRepN'
p1889
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1890
I14
sS'.thisN'
p1891
I224
sS'.thisIndex'
p1892
I8
sg15
(lp1893
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1894
g16
(lp1895
S'd'
asg18
S'Y'
sS'.thisRepN'
p1896
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1897
I0
sS'.thisN'
p1898
I225
sS'.thisIndex'
p1899
I0
sg15
(lp1900
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I0
sa(dp1901
g16
(lp1902
S'k'
asg18
S'N'
sS'.thisRepN'
p1903
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1904
I1
sS'.thisN'
p1905
I226
sS'.thisIndex'
p1906
I12
sg15
(lp1907
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I12
sa(dp1908
g16
(lp1909
S'd'
asg18
S'Y'
sS'.thisRepN'
p1910
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1911
I2
sS'.thisN'
p1912
I227
sS'.thisIndex'
p1913
I7
sg15
(lp1914
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1915
S'space'
p1916
asg95
I7
sa(dp1917
g16
(lp1918
S'k'
asg18
S'Y'
sS'.thisRepN'
p1919
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1920
I3
sS'.thisN'
p1921
I228
sS'.thisIndex'
p1922
I0
sg15
(lp1923
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
(lp1924
S'space'
p1925
asg95
I0
sa(dp1926
g16
(lp1927
S'd'
asg18
S'N'
sS'.thisRepN'
p1928
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1929
I4
sS'.thisN'
p1930
I229
sS'.thisIndex'
p1931
I1
sg15
(lp1932
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1933
g16
(lp1934
S'k'
asg18
S'Y'
sS'.thisRepN'
p1935
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1936
I5
sS'.thisN'
p1937
I230
sS'.thisIndex'
p1938
I2
sg15
(lp1939
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
(lp1940
S'space'
p1941
asg95
I2
sa(dp1942
g16
(lp1943
S'd'
asg18
S'Y'
sS'.thisRepN'
p1944
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1945
I6
sS'.thisN'
p1946
I231
sS'.thisIndex'
p1947
I8
sg15
(lp1948
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1949
S'space'
p1950
asg95
I8
sa(dp1951
g16
(lp1952
S'k'
asg18
S'Y'
sS'.thisRepN'
p1953
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1954
I7
sS'.thisN'
p1955
I232
sS'.thisIndex'
p1956
I9
sg15
(lp1957
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1958
S'space'
p1959
asg95
I9
sa(dp1960
g16
(lp1961
S'k'
asg18
S'Y'
sS'.thisRepN'
p1962
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1963
I8
sS'.thisN'
p1964
I233
sS'.thisIndex'
p1965
I8
sg15
(lp1966
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1967
S'space'
p1968
asg95
I8
sa(dp1969
g16
(lp1970
S'k'
asg18
S'N'
sS'.thisRepN'
p1971
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1972
I9
sS'.thisN'
p1973
I234
sS'.thisIndex'
p1974
I3
sg15
(lp1975
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1976
g16
(lp1977
S'd'
asg18
S'Y'
sS'.thisRepN'
p1978
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1979
I10
sS'.thisN'
p1980
I235
sS'.thisIndex'
p1981
I12
sg15
(lp1982
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1983
S'space'
p1984
asg95
I12
sa(dp1985
g16
(lp1986
S'd'
asg18
S'Y'
sS'.thisRepN'
p1987
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1988
I11
sS'.thisN'
p1989
I236
sS'.thisIndex'
p1990
I3
sg15
(lp1991
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp1992
S'space'
p1993
asg95
I3
sa(dp1994
g16
(lp1995
S'k'
asg18
S'Y'
sS'.thisRepN'
p1996
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1997
I12
sS'.thisN'
p1998
I237
sS'.thisIndex'
p1999
I8
sg15
(lp2000
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
(lp2001
S'space'
p2002
asg95
I8
sa(dp2003
g16
(lp2004
S'k'
asg18
S'Y'
sS'.thisRepN'
p2005
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2006
I13
sS'.thisN'
p2007
I238
sS'.thisIndex'
p2008
I2
sg15
(lp2009
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
(lp2010
S'space'
p2011
asg95
I2
sa(dp2012
g16
(lp2013
S'd'
asg18
S'N'
sS'.thisRepN'
p2014
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2015
I14
sS'.thisN'
p2016
I239
sS'.thisIndex'
p2017
I10
sg15
(lp2018
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp2019
g16
(lp2020
S'd'
asg18
S'N'
sS'.thisRepN'
p2021
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2022
I0
sS'.thisN'
p2023
I240
sS'.thisIndex'
p2024
I11
sg15
(lp2025
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I11
sa(dp2026
g16
(lp2027
S'k'
asg18
S'N'
sS'.thisRepN'
p2028
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2029
I1
sS'.thisN'
p2030
I241
sS'.thisIndex'
p2031
I9
sg15
(lp2032
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp2033
g16
(lp2034
S'k'
asg18
S'N'
sS'.thisRepN'
p2035
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2036
I2
sS'.thisN'
p2037
I242
sS'.thisIndex'
p2038
I8
sg15
(lp2039
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I8
sa(dp2040
g16
(lp2041
S'k'
asg18
S'N'
sS'.thisRepN'
p2042
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2043
I3
sS'.thisN'
p2044
I243
sS'.thisIndex'
p2045
I13
sg15
(lp2046
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I13
sa(dp2047
g16
(lp2048
S'd'
asg18
S'N'
sS'.thisRepN'
p2049
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2050
I4
sS'.thisN'
p2051
I244
sS'.thisIndex'
p2052
I0
sg15
(lp2053
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I0
sa(dp2054
g16
(lp2055
S'd'
asg18
S'N'
sS'.thisRepN'
p2056
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2057
I5
sS'.thisN'
p2058
I245
sS'.thisIndex'
p2059
I12
sg15
(lp2060
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I12
sa(dp2061
g16
(lp2062
S'k'
asg18
S'N'
sS'.thisRepN'
p2063
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2064
I6
sS'.thisN'
p2065
I246
sS'.thisIndex'
p2066
I13
sg15
(lp2067
S'd'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I13
sa(dp2068
g16
(lp2069
S'd'
asg18
S'N'
sS'.thisRepN'
p2070
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2071
I7
sS'.thisN'
p2072
I247
sS'.thisIndex'
p2073
I1
sg15
(lp2074
S'k'
asg30
Vm
sg17
S'N'
sg14
I5
sg19
Nsg95
I1
sa(dp2075
g16
(lp2076
S'k'
asg18
S'N'
sS'.thisRepN'
p2077
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2078
I8
sS'.thisN'
p2079
I248
sS'.thisIndex'
p2080
I12
sg15
(lp2081
S'k'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I12
sa(dp2082
g16
(lp2083
S'd'
asg18
S'N'
sg22
I46
sS'.thisN'
p2084
I249
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2085
I9
sS'.thisRepN'
p2086
I16
sg21
I38
sS'.thisIndex'
p2087
I4
sg23
I25
sg15
(lp2088
S'd'
asg30
Vm
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp2089
g16
(lp2090
S'd'
asg95
I9
sS'.thisRepN'
p2091
I16
sg30
Vm
sg31
g32
sS'.thisTrialN'
p2092
I10
sS'.thisN'
p2093
I250
sS'.thisIndex'
p2094
I9
sg15
(lp2095
S'k'
asg17
S'N'
sg14
I6
sa(dp2096
g16
(lp2097
S'd'
asg95
I7
sS'.thisRepN'
p2098
I16
sg30
Vm
sg31
g32
sS'.thisTrialN'
p2099
I11
sS'.thisN'
p2100
I251
sS'.thisIndex'
p2101
I7
sg15
(lp2102
S'd'
asg17
S'Y'
sg14
I6
sa(dp2103
g16
(lp2104
S'k'
asg18
S'N'
sS'.thisRepN'
p2105
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2106
I12
sS'.thisN'
p2107
I252
sS'.thisIndex'
p2108
I13
sg15
(lp2109
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I13
sa(dp2110
g16
(lp2111
S'k'
asg18
S'N'
sS'.thisRepN'
p2112
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2113
I13
sS'.thisN'
p2114
I253
sS'.thisIndex'
p2115
I7
sg15
(lp2116
S'd'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I7
sa(dp2117
g16
(lp2118
S'k'
asg18
S'N'
sS'.thisRepN'
p2119
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2120
I14
sS'.thisN'
p2121
I254
sS'.thisIndex'
p2122
I10
sg15
(lp2123
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2124
g16
(lp2125
S'd'
asg18
S'Y'
sS'.thisRepN'
p2126
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2127
I0
sS'.thisN'
p2128
I255
sS'.thisIndex'
p2129
I1
sg15
(lp2130
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
(lp2131
S'space'
p2132
asg95
I1
sa(dp2133
g16
(lp2134
S'd'
asg18
S'N'
sS'.thisRepN'
p2135
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2136
I1
sS'.thisN'
p2137
I256
sS'.thisIndex'
p2138
I14
sg15
(lp2139
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
(lp2140
S'space'
p2141
asg95
I14
sa(dp2142
g16
(lp2143
S'k'
asg18
S'Y'
sS'.thisRepN'
p2144
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2145
I2
sS'.thisN'
p2146
I257
sS'.thisIndex'
p2147
I3
sg15
(lp2148
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2149
S'space'
p2150
asg95
I3
sa(dp2151
g16
(lp2152
S'd'
asg18
S'N'
sS'.thisRepN'
p2153
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2154
I3
sS'.thisN'
p2155
I258
sS'.thisIndex'
p2156
I14
sg15
(lp2157
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I14
sa(dp2158
g16
(lp2159
S'k'
asg18
S'Y'
sS'.thisRepN'
p2160
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2161
I4
sS'.thisN'
p2162
I259
sS'.thisIndex'
p2163
I14
sg15
(lp2164
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2165
S'space'
p2166
asg95
I14
sa(dp2167
g16
(lp2168
S'k'
asg18
S'Y'
sS'.thisRepN'
p2169
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2170
I5
sS'.thisN'
p2171
I260
sS'.thisIndex'
p2172
I14
sg15
(lp2173
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2174
S'space'
p2175
asg95
I14
sa(dp2176
g16
(lp2177
S'd'
asg18
S'N'
sS'.thisRepN'
p2178
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2179
I6
sS'.thisN'
p2180
I261
sS'.thisIndex'
p2181
I9
sg15
(lp2182
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2183
g16
(lp2184
S'k'
asg18
S'Y'
sS'.thisRepN'
p2185
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2186
I7
sS'.thisN'
p2187
I262
sS'.thisIndex'
p2188
I12
sg15
(lp2189
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2190
S'space'
p2191
asg95
I12
sa(dp2192
g16
(lp2193
S'd'
asg18
S'Y'
sS'.thisRepN'
p2194
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2195
I8
sS'.thisN'
p2196
I263
sS'.thisIndex'
p2197
I7
sg15
(lp2198
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2199
S'space'
p2200
asg95
I7
sa(dp2201
g16
(lp2202
S'k'
asg18
S'Y'
sS'.thisRepN'
p2203
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2204
I9
sS'.thisN'
p2205
I264
sS'.thisIndex'
p2206
I10
sg15
(lp2207
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2208
S'space'
p2209
asg95
I10
sa(dp2210
g16
(lp2211
S'd'
asg18
S'N'
sS'.thisRepN'
p2212
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2213
I10
sS'.thisN'
p2214
I265
sS'.thisIndex'
p2215
I13
sg15
(lp2216
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I13
sa(dp2217
g16
(lp2218
S'd'
asg18
S'Y'
sS'.thisRepN'
p2219
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2220
I11
sS'.thisN'
p2221
I266
sS'.thisIndex'
p2222
I11
sg15
(lp2223
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2224
S'space'
p2225
asg95
I11
sa(dp2226
g16
(lp2227
S'k'
asg18
S'Y'
sS'.thisRepN'
p2228
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2229
I12
sS'.thisN'
p2230
I267
sS'.thisIndex'
p2231
I2
sg15
(lp2232
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2233
S'space'
p2234
asg95
I2
sa(dp2235
g16
(lp2236
S'd'
asg18
S'Y'
sS'.thisRepN'
p2237
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2238
I13
sS'.thisN'
p2239
I268
sS'.thisIndex'
p2240
I14
sg15
(lp2241
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2242
S'space'
p2243
asg95
I14
sa(dp2244
g16
(lp2245
S'd'
asg18
S'N'
sS'.thisRepN'
p2246
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2247
I14
sS'.thisN'
p2248
I269
sS'.thisIndex'
p2249
I9
sg15
(lp2250
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2251
g16
(lp2252
S'k'
asg18
S'N'
sS'.thisRepN'
p2253
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2254
I0
sS'.thisN'
p2255
I270
sS'.thisIndex'
p2256
I4
sg15
(lp2257
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2258
g16
(lp2259
S'k'
asg18
S'Y'
sS'.thisRepN'
p2260
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2261
I1
sS'.thisN'
p2262
I271
sS'.thisIndex'
p2263
I7
sg15
(lp2264
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2265
S'space'
p2266
asg95
I7
sa(dp2267
g16
(lp2268
S'k'
asg18
S'N'
sS'.thisRepN'
p2269
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2270
I2
sS'.thisN'
p2271
I272
sS'.thisIndex'
p2272
I4
sg15
(lp2273
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2274
g16
(lp2275
S'k'
asg18
S'N'
sS'.thisRepN'
p2276
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2277
I3
sS'.thisN'
p2278
I273
sS'.thisIndex'
p2279
I4
sg15
(lp2280
S'd'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I4
sa(dp2281
g16
(lp2282
S'd'
asg18
S'N'
sS'.thisRepN'
p2283
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2284
I4
sS'.thisN'
p2285
I274
sS'.thisIndex'
p2286
I10
sg15
(lp2287
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I10
sa(dp2288
g16
(lp2289
S'k'
asg18
S'Y'
sS'.thisRepN'
p2290
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2291
I5
sS'.thisN'
p2292
I275
sS'.thisIndex'
p2293
I4
sg15
(lp2294
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2295
S'space'
p2296
asg95
I4
sa(dp2297
g16
(lp2298
S'd'
asg18
S'N'
sS'.thisRepN'
p2299
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2300
I6
sS'.thisN'
p2301
I276
sS'.thisIndex'
p2302
I10
sg15
(lp2303
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2304
g16
(lp2305
S'd'
asg18
S'Y'
sS'.thisRepN'
p2306
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2307
I7
sS'.thisN'
p2308
I277
sS'.thisIndex'
p2309
I0
sg15
(lp2310
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
(lp2311
S'space'
p2312
asg95
I0
sa(dp2313
g16
(lp2314
S'd'
asg18
S'N'
sS'.thisRepN'
p2315
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2316
I8
sS'.thisN'
p2317
I278
sS'.thisIndex'
p2318
I8
sg15
(lp2319
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I8
sa(dp2320
g16
(lp2321
S'k'
asg18
S'Y'
sS'.thisRepN'
p2322
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2323
I9
sS'.thisN'
p2324
I279
sS'.thisIndex'
p2325
I13
sg15
(lp2326
S'd'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
(lp2327
S'space'
p2328
asg95
I13
sa(dp2329
g16
(lp2330
S'd'
asg18
S'Y'
sS'.thisRepN'
p2331
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2332
I10
sS'.thisN'
p2333
I280
sS'.thisIndex'
p2334
I9
sg15
(lp2335
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
(lp2336
S'space'
p2337
asg95
I9
sa(dp2338
g16
(lp2339
S'k'
asg18
S'N'
sS'.thisRepN'
p2340
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2341
I11
sS'.thisN'
p2342
I281
sS'.thisIndex'
p2343
I1
sg15
(lp2344
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I1
sa(dp2345
g16
(lp2346
S'k'
asg18
S'N'
sS'.thisRepN'
p2347
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2348
I12
sS'.thisN'
p2349
I282
sS'.thisIndex'
p2350
I12
sg15
(lp2351
S'd'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I12
sa(dp2352
g16
(lp2353
S'k'
asg18
S'N'
sS'.thisRepN'
p2354
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2355
I13
sS'.thisN'
p2356
I283
sS'.thisIndex'
p2357
I3
sg15
(lp2358
S'd'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
Nsg95
I3
sa(dp2359
g16
(lp2360
S'd'
asg18
S'Y'
sS'.thisRepN'
p2361
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2362
I14
sS'.thisN'
p2363
I284
sS'.thisIndex'
p2364
I1
sg15
(lp2365
S'k'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
(lp2366
S'space'
p2367
asg95
I1
sa(dp2368
g16
(lp2369
S'k'
asg18
S'Y'
sS'.thisRepN'
p2370
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2371
I0
sS'.thisN'
p2372
I285
sS'.thisIndex'
p2373
I7
sg15
(lp2374
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2375
S'space'
p2376
asg95
I7
sa(dp2377
g16
(lp2378
S'k'
asg18
S'N'
sS'.thisRepN'
p2379
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2380
I1
sS'.thisN'
p2381
I286
sS'.thisIndex'
p2382
I3
sg15
(lp2383
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2384
S'space'
p2385
asg95
I3
sa(dp2386
g16
(lp2387
S'k'
asg18
S'N'
sS'.thisRepN'
p2388
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2389
I2
sS'.thisN'
p2390
I287
sS'.thisIndex'
p2391
I1
sg15
(lp2392
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I1
sa(dp2393
g16
(lp2394
S'k'
asg18
S'N'
sS'.thisRepN'
p2395
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2396
I3
sS'.thisN'
p2397
I288
sS'.thisIndex'
p2398
I2
sg15
(lp2399
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I2
sa(dp2400
g16
(lp2401
S'd'
asg18
S'N'
sS'.thisRepN'
p2402
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2403
I4
sS'.thisN'
p2404
I289
sS'.thisIndex'
p2405
I9
sg15
(lp2406
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2407
g16
(lp2408
S'k'
asg18
S'N'
sS'.thisRepN'
p2409
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2410
I5
sS'.thisN'
p2411
I290
sS'.thisIndex'
p2412
I7
sg15
(lp2413
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2414
g16
(lp2415
S'd'
asg18
S'Y'
sS'.thisRepN'
p2416
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2417
I6
sS'.thisN'
p2418
I291
sS'.thisIndex'
p2419
I3
sg15
(lp2420
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2421
S'space'
p2422
asg95
I3
sa(dp2423
g16
(lp2424
S'k'
asg18
S'N'
sS'.thisRepN'
p2425
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2426
I7
sS'.thisN'
p2427
I292
sS'.thisIndex'
p2428
I13
sg15
(lp2429
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I13
sa(dp2430
g16
(lp2431
S'k'
asg18
S'Y'
sS'.thisRepN'
p2432
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2433
I8
sS'.thisN'
p2434
I293
sS'.thisIndex'
p2435
I8
sg15
(lp2436
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2437
S'space'
p2438
asg95
I8
sa(dp2439
g16
(lp2440
S'd'
asg18
S'N'
sS'.thisRepN'
p2441
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2442
I9
sS'.thisN'
p2443
I294
sS'.thisIndex'
p2444
I14
sg15
(lp2445
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I14
sa(dp2446
g16
(lp2447
S'd'
asg18
S'N'
sS'.thisRepN'
p2448
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2449
I10
sS'.thisN'
p2450
I295
sS'.thisIndex'
p2451
I6
sg15
(lp2452
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2453
g16
(lp2454
S'k'
asg18
S'Y'
sS'.thisRepN'
p2455
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2456
I11
sS'.thisN'
p2457
I296
sS'.thisIndex'
p2458
I13
sg15
(lp2459
S'd'
asg30
Vm
sg17
S'N'
sg14
I6
sg19
(lp2460
S'space'
p2461
asg95
I13
sa(dp2462
g16
(lp2463
S'k'
asg18
S'N'
sS'.thisRepN'
p2464
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2465
I12
sS'.thisN'
p2466
I297
sS'.thisIndex'
p2467
I10
sg15
(lp2468
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2469
g16
(lp2470
S'k'
asg18
S'Y'
sS'.thisRepN'
p2471
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2472
I13
sS'.thisN'
p2473
I298
sS'.thisIndex'
p2474
I14
sg15
(lp2475
S'k'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2476
S'space'
p2477
asg95
I14
sa(dp2478
g16
(lp2479
S'd'
asg18
S'Y'
sg22
I46
sS'.thisN'
p2480
I299
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2481
I14
sS'.thisRepN'
p2482
I19
sg21
I36
sS'.thisIndex'
p2483
I5
sg23
I22
sg15
(lp2484
S'd'
asg30
Vm
sg17
S'Y'
sg14
I6
sg19
(lp2485
S'space'
p2486
asg95
I5
sa(dp2487
g16
(lp2488
S'd'
asg95
I0
sS'.thisRepN'
p2489
I20
sg30
Vm
sg31
g32
sS'.thisTrialN'
p2490
I0
sS'.thisN'
p2491
I300
sS'.thisIndex'
p2492
I0
sg15
(lp2493
S'k'
asg17
S'N'
sg14
I7
sa(dp2494
g16
(lp2495
S'k'
asg95
I7
sS'.thisRepN'
p2496
I20
sg30
Vm
sg31
g32
sS'.thisTrialN'
p2497
I1
sS'.thisN'
p2498
I301
sS'.thisIndex'
p2499
I7
sg15
(lp2500
S'd'
asg17
S'N'
sg14
I7
sa(dp2501
g16
(lp2502
S'k'
asg18
S'Y'
sS'.thisRepN'
p2503
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2504
I2
sS'.thisN'
p2505
I302
sS'.thisIndex'
p2506
I4
sg15
(lp2507
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
(lp2508
S'space'
p2509
asg95
I4
sa(dp2510
g16
(lp2511
S'k'
asg18
S'N'
sS'.thisRepN'
p2512
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2513
I3
sS'.thisN'
p2514
I303
sS'.thisIndex'
p2515
I2
sg15
(lp2516
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2517
g16
(lp2518
S'k'
asg18
S'N'
sS'.thisRepN'
p2519
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2520
I4
sS'.thisN'
p2521
I304
sS'.thisIndex'
p2522
I11
sg15
(lp2523
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I11
sa(dp2524
g16
(lp2525
S'k'
asg18
S'Y'
sS'.thisRepN'
p2526
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2527
I5
sS'.thisN'
p2528
I305
sS'.thisIndex'
p2529
I6
sg15
(lp2530
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2531
S'space'
p2532
asg95
I6
sa(dp2533
g16
(lp2534
S'k'
asg18
S'Y'
sS'.thisRepN'
p2535
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2536
I6
sS'.thisN'
p2537
I306
sS'.thisIndex'
p2538
I1
sg15
(lp2539
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2540
S'space'
p2541
asg95
I1
sa(dp2542
g16
(lp2543
S'k'
asg18
S'N'
sS'.thisRepN'
p2544
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2545
I7
sS'.thisN'
p2546
I307
sS'.thisIndex'
p2547
I1
sg15
(lp2548
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I1
sa(dp2549
g16
(lp2550
S'k'
asg18
S'N'
sS'.thisRepN'
p2551
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2552
I8
sS'.thisN'
p2553
I308
sS'.thisIndex'
p2554
I13
sg15
(lp2555
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I13
sa(dp2556
g16
(lp2557
S'd'
asg18
S'Y'
sS'.thisRepN'
p2558
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2559
I9
sS'.thisN'
p2560
I309
sS'.thisIndex'
p2561
I3
sg15
(lp2562
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2563
S'space'
p2564
asg95
I3
sa(dp2565
g16
(lp2566
S'k'
asg18
S'N'
sS'.thisRepN'
p2567
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2568
I10
sS'.thisN'
p2569
I310
sS'.thisIndex'
p2570
I13
sg15
(lp2571
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I13
sa(dp2572
g16
(lp2573
S'd'
asg18
S'Y'
sS'.thisRepN'
p2574
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2575
I11
sS'.thisN'
p2576
I311
sS'.thisIndex'
p2577
I3
sg15
(lp2578
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
(lp2579
S'space'
p2580
asg95
I3
sa(dp2581
g16
(lp2582
S'd'
asg18
S'N'
sS'.thisRepN'
p2583
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2584
I12
sS'.thisN'
p2585
I312
sS'.thisIndex'
p2586
I6
sg15
(lp2587
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2588
g16
(lp2589
S'd'
asg18
S'Y'
sS'.thisRepN'
p2590
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2591
I13
sS'.thisN'
p2592
I313
sS'.thisIndex'
p2593
I4
sg15
(lp2594
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2595
S'space'
p2596
asg95
I4
sa(dp2597
g16
(lp2598
S'k'
asg18
S'N'
sS'.thisRepN'
p2599
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2600
I14
sS'.thisN'
p2601
I314
sS'.thisIndex'
p2602
I8
sg15
(lp2603
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2604
g16
(lp2605
S'd'
asg18
S'N'
sS'.thisRepN'
p2606
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2607
I0
sS'.thisN'
p2608
I315
sS'.thisIndex'
p2609
I8
sg15
(lp2610
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2611
g16
(lp2612
S'k'
asg18
S'Y'
sS'.thisRepN'
p2613
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2614
I1
sS'.thisN'
p2615
I316
sS'.thisIndex'
p2616
I9
sg15
(lp2617
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
(lp2618
S'space'
p2619
asg95
I9
sa(dp2620
g16
(lp2621
S'k'
asg18
S'Y'
sS'.thisRepN'
p2622
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2623
I2
sS'.thisN'
p2624
I317
sS'.thisIndex'
p2625
I4
sg15
(lp2626
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2627
S'space'
p2628
asg95
I4
sa(dp2629
g16
(lp2630
S'k'
asg18
S'Y'
sS'.thisRepN'
p2631
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2632
I3
sS'.thisN'
p2633
I318
sS'.thisIndex'
p2634
I13
sg15
(lp2635
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2636
S'space'
p2637
asg95
I13
sa(dp2638
g16
(lp2639
S'k'
asg18
S'Y'
sS'.thisRepN'
p2640
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2641
I4
sS'.thisN'
p2642
I319
sS'.thisIndex'
p2643
I3
sg15
(lp2644
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2645
S'space'
p2646
asg95
I3
sa(dp2647
g16
(lp2648
S'k'
asg18
S'N'
sS'.thisRepN'
p2649
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2650
I5
sS'.thisN'
p2651
I320
sS'.thisIndex'
p2652
I0
sg15
(lp2653
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2654
g16
(lp2655
S'k'
asg18
S'N'
sS'.thisRepN'
p2656
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2657
I6
sS'.thisN'
p2658
I321
sS'.thisIndex'
p2659
I8
sg15
(lp2660
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2661
g16
(lp2662
S'k'
asg18
S'N'
sS'.thisRepN'
p2663
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2664
I7
sS'.thisN'
p2665
I322
sS'.thisIndex'
p2666
I7
sg15
(lp2667
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I7
sa(dp2668
g16
(lp2669
S'd'
asg18
S'N'
sS'.thisRepN'
p2670
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2671
I8
sS'.thisN'
p2672
I323
sS'.thisIndex'
p2673
I0
sg15
(lp2674
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
(lp2675
S'space'
p2676
asg95
I0
sa(dp2677
g16
(lp2678
S'd'
asg18
S'Y'
sS'.thisRepN'
p2679
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2680
I9
sS'.thisN'
p2681
I324
sS'.thisIndex'
p2682
I13
sg15
(lp2683
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2684
S'space'
p2685
asg95
I13
sa(dp2686
g16
(lp2687
S'd'
asg18
S'Y'
sS'.thisRepN'
p2688
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2689
I10
sS'.thisN'
p2690
I325
sS'.thisIndex'
p2691
I12
sg15
(lp2692
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2693
S'space'
p2694
asg95
I12
sa(dp2695
g16
(lp2696
S'k'
asg18
S'Y'
sS'.thisRepN'
p2697
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2698
I11
sS'.thisN'
p2699
I326
sS'.thisIndex'
p2700
I6
sg15
(lp2701
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
(lp2702
S'space'
p2703
asg95
I6
sa(dp2704
g16
(lp2705
S'd'
asg18
S'Y'
sS'.thisRepN'
p2706
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2707
I12
sS'.thisN'
p2708
I327
sS'.thisIndex'
p2709
I14
sg15
(lp2710
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2711
S'space'
p2712
asg95
I14
sa(dp2713
g16
(lp2714
S'd'
asg18
S'N'
sS'.thisRepN'
p2715
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2716
I13
sS'.thisN'
p2717
I328
sS'.thisIndex'
p2718
I10
sg15
(lp2719
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I10
sa(dp2720
g16
(lp2721
S'd'
asg18
S'Y'
sS'.thisRepN'
p2722
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2723
I14
sS'.thisN'
p2724
I329
sS'.thisIndex'
p2725
I1
sg15
(lp2726
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
(lp2727
S'space'
p2728
asg95
I1
sa(dp2729
g16
(lp2730
S'k'
asg18
S'Y'
sS'.thisRepN'
p2731
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2732
I0
sS'.thisN'
p2733
I330
sS'.thisIndex'
p2734
I11
sg15
(lp2735
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2736
S'space'
p2737
asg95
I11
sa(dp2738
g16
(lp2739
S'k'
asg18
S'N'
sS'.thisRepN'
p2740
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2741
I1
sS'.thisN'
p2742
I331
sS'.thisIndex'
p2743
I6
sg15
(lp2744
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2745
g16
(lp2746
S'd'
asg18
S'Y'
sS'.thisRepN'
p2747
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2748
I2
sS'.thisN'
p2749
I332
sS'.thisIndex'
p2750
I9
sg15
(lp2751
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
(lp2752
S'space'
p2753
asg95
I9
sa(dp2754
g16
(lp2755
S'k'
asg18
S'Y'
sS'.thisRepN'
p2756
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2757
I3
sS'.thisN'
p2758
I333
sS'.thisIndex'
p2759
I7
sg15
(lp2760
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2761
S'space'
p2762
asg95
I7
sa(dp2763
g16
(lp2764
S'd'
asg18
S'Y'
sS'.thisRepN'
p2765
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2766
I4
sS'.thisN'
p2767
I334
sS'.thisIndex'
p2768
I2
sg15
(lp2769
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
(lp2770
S'space'
p2771
asg95
I2
sa(dp2772
g16
(lp2773
S'd'
asg18
S'N'
sS'.thisRepN'
p2774
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2775
I5
sS'.thisN'
p2776
I335
sS'.thisIndex'
p2777
I2
sg15
(lp2778
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I2
sa(dp2779
g16
(lp2780
S'k'
asg18
S'Y'
sS'.thisRepN'
p2781
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2782
I6
sS'.thisN'
p2783
I336
sS'.thisIndex'
p2784
I2
sg15
(lp2785
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
(lp2786
S'space'
p2787
asg95
I2
sa(dp2788
g16
(lp2789
S'd'
asg18
S'N'
sS'.thisRepN'
p2790
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2791
I7
sS'.thisN'
p2792
I337
sS'.thisIndex'
p2793
I14
sg15
(lp2794
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I14
sa(dp2795
g16
(lp2796
S'k'
asg18
S'Y'
sS'.thisRepN'
p2797
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2798
I8
sS'.thisN'
p2799
I338
sS'.thisIndex'
p2800
I1
sg15
(lp2801
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2802
S'space'
p2803
asg95
I1
sa(dp2804
g16
(lp2805
S'd'
asg18
S'N'
sS'.thisRepN'
p2806
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2807
I9
sS'.thisN'
p2808
I339
sS'.thisIndex'
p2809
I2
sg15
(lp2810
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2811
g16
(lp2812
S'k'
asg18
S'N'
sS'.thisRepN'
p2813
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2814
I10
sS'.thisN'
p2815
I340
sS'.thisIndex'
p2816
I14
sg15
(lp2817
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2818
S'space'
p2819
asg95
I14
sa(dp2820
g16
(lp2821
S'k'
asg18
S'N'
sS'.thisRepN'
p2822
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2823
I11
sS'.thisN'
p2824
I341
sS'.thisIndex'
p2825
I14
sg15
(lp2826
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I14
sa(dp2827
g16
(lp2828
S'd'
asg18
S'Y'
sS'.thisRepN'
p2829
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2830
I12
sS'.thisN'
p2831
I342
sS'.thisIndex'
p2832
I2
sg15
(lp2833
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2834
S'space'
p2835
asg95
I2
sa(dp2836
g16
(lp2837
S'k'
asg18
S'Y'
sS'.thisRepN'
p2838
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2839
I13
sS'.thisN'
p2840
I343
sS'.thisIndex'
p2841
I12
sg15
(lp2842
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
(lp2843
S'space'
p2844
asg95
I12
sa(dp2845
g16
(lp2846
S'k'
asg18
S'Y'
sS'.thisRepN'
p2847
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2848
I14
sS'.thisN'
p2849
I344
sS'.thisIndex'
p2850
I5
sg15
(lp2851
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2852
S'space'
p2853
asg95
I5
sa(dp2854
g16
(lp2855
S'd'
asg18
S'Y'
sS'.thisRepN'
p2856
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2857
I0
sS'.thisN'
p2858
I345
sS'.thisIndex'
p2859
I6
sg15
(lp2860
S'd'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
(lp2861
S'space'
p2862
asg95
I6
sa(dp2863
g16
(lp2864
S'k'
asg18
S'N'
sS'.thisRepN'
p2865
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2866
I1
sS'.thisN'
p2867
I346
sS'.thisIndex'
p2868
I5
sg15
(lp2869
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2870
g16
(lp2871
S'k'
asg18
S'N'
sS'.thisRepN'
p2872
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2873
I2
sS'.thisN'
p2874
I347
sS'.thisIndex'
p2875
I4
sg15
(lp2876
S'd'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I4
sa(dp2877
g16
(lp2878
S'd'
asg18
S'N'
sS'.thisRepN'
p2879
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2880
I3
sS'.thisN'
p2881
I348
sS'.thisIndex'
p2882
I7
sg15
(lp2883
S'k'
asg30
Vm
sg17
S'N'
sg14
I7
sg19
Nsg95
I7
sa(dp2884
g16
(lp2885
S'k'
asg18
S'N'
sg22
I46
sS'.thisN'
p2886
I349
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2887
I4
sS'.thisRepN'
p2888
I23
sg21
I32
sS'.thisIndex'
p2889
I9
sg23
I25
sg15
(lp2890
S'k'
asg30
Vm
sg17
S'Y'
sg14
I7
sg19
Nsg95
I9
sa(dp2891
g16
(lp2892
S'd'
asg95
I2
sS'.thisRepN'
p2893
I23
sg30
Vm
sg31
g32
sS'.thisTrialN'
p2894
I5
sS'.thisN'
p2895
I350
sS'.thisIndex'
p2896
I2
sg15
(lp2897
S'k'
asg17
S'N'
sg14
I8
sa(dp2898
g16
(lp2899
S'd'
asg95
I11
sS'.thisRepN'
p2900
I23
sg30
Vm
sg31
g32
sS'.thisTrialN'
p2901
I6
sS'.thisN'
p2902
I351
sS'.thisIndex'
p2903
I11
sg15
(lp2904
S'd'
asg17
S'Y'
sg14
I8
sa(dp2905
g16
(lp2906
S'd'
asg18
S'N'
sS'.thisRepN'
p2907
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2908
I7
sS'.thisN'
p2909
I352
sS'.thisIndex'
p2910
I7
sg15
(lp2911
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I7
sa(dp2912
g16
(lp2913
S'd'
asg18
S'N'
sS'.thisRepN'
p2914
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2915
I8
sS'.thisN'
p2916
I353
sS'.thisIndex'
p2917
I12
sg15
(lp2918
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I12
sa(dp2919
g16
(lp2920
S'd'
asg18
S'Y'
sS'.thisRepN'
p2921
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2922
I9
sS'.thisN'
p2923
I354
sS'.thisIndex'
p2924
I12
sg15
(lp2925
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp2926
S'space'
p2927
asg95
I12
sa(dp2928
g16
(lp2929
S'k'
asg18
S'N'
sS'.thisRepN'
p2930
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2931
I10
sS'.thisN'
p2932
I355
sS'.thisIndex'
p2933
I8
sg15
(lp2934
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp2935
g16
(lp2936
S'd'
asg18
S'N'
sS'.thisRepN'
p2937
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2938
I11
sS'.thisN'
p2939
I356
sS'.thisIndex'
p2940
I2
sg15
(lp2941
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp2942
g16
(lp2943
S'k'
asg18
S'N'
sS'.thisRepN'
p2944
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2945
I12
sS'.thisN'
p2946
I357
sS'.thisIndex'
p2947
I13
sg15
(lp2948
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I13
sa(dp2949
g16
(lp2950
S'd'
asg18
S'Y'
sS'.thisRepN'
p2951
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2952
I13
sS'.thisN'
p2953
I358
sS'.thisIndex'
p2954
I11
sg15
(lp2955
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
(lp2956
S'space'
p2957
asg95
I11
sa(dp2958
g16
(lp2959
S'd'
asg18
S'Y'
sS'.thisRepN'
p2960
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2961
I14
sS'.thisN'
p2962
I359
sS'.thisIndex'
p2963
I11
sg15
(lp2964
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp2965
S'space'
p2966
asg95
I11
sa(dp2967
g16
(lp2968
S'd'
asg18
S'N'
sS'.thisRepN'
p2969
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2970
I0
sS'.thisN'
p2971
I360
sS'.thisIndex'
p2972
I14
sg15
(lp2973
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I14
sa(dp2974
g16
(lp2975
S'd'
asg18
S'N'
sS'.thisRepN'
p2976
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2977
I1
sS'.thisN'
p2978
I361
sS'.thisIndex'
p2979
I5
sg15
(lp2980
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp2981
g16
(lp2982
S'k'
asg18
S'Y'
sS'.thisRepN'
p2983
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2984
I2
sS'.thisN'
p2985
I362
sS'.thisIndex'
p2986
I11
sg15
(lp2987
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp2988
S'space'
p2989
asg95
I11
sa(dp2990
g16
(lp2991
S'd'
asg18
S'Y'
sS'.thisRepN'
p2992
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2993
I3
sS'.thisN'
p2994
I363
sS'.thisIndex'
p2995
I12
sg15
(lp2996
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp2997
S'space'
p2998
asg95
I12
sa(dp2999
g16
(lp3000
S'k'
asg18
S'N'
sS'.thisRepN'
p3001
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3002
I4
sS'.thisN'
p3003
I364
sS'.thisIndex'
p3004
I4
sg15
(lp3005
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I4
sa(dp3006
g16
(lp3007
S'd'
asg18
S'Y'
sS'.thisRepN'
p3008
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3009
I5
sS'.thisN'
p3010
I365
sS'.thisIndex'
p3011
I1
sg15
(lp3012
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
(lp3013
S'space'
p3014
asg95
I1
sa(dp3015
g16
(lp3016
S'd'
asg18
S'Y'
sS'.thisRepN'
p3017
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3018
I6
sS'.thisN'
p3019
I366
sS'.thisIndex'
p3020
I12
sg15
(lp3021
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
(lp3022
S'space'
p3023
asg95
I12
sa(dp3024
g16
(lp3025
S'd'
asg18
S'Y'
sS'.thisRepN'
p3026
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3027
I7
sS'.thisN'
p3028
I367
sS'.thisIndex'
p3029
I14
sg15
(lp3030
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
(lp3031
S'space'
p3032
asg95
I14
sa(dp3033
g16
(lp3034
S'd'
asg18
S'N'
sS'.thisRepN'
p3035
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3036
I8
sS'.thisN'
p3037
I368
sS'.thisIndex'
p3038
I6
sg15
(lp3039
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp3040
g16
(lp3041
S'd'
asg18
S'Y'
sS'.thisRepN'
p3042
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3043
I9
sS'.thisN'
p3044
I369
sS'.thisIndex'
p3045
I8
sg15
(lp3046
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
(lp3047
S'space'
p3048
asg95
I8
sa(dp3049
g16
(lp3050
S'd'
asg18
S'Y'
sS'.thisRepN'
p3051
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3052
I10
sS'.thisN'
p3053
I370
sS'.thisIndex'
p3054
I2
sg15
(lp3055
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3056
S'space'
p3057
asg95
I2
sa(dp3058
g16
(lp3059
S'k'
asg18
S'N'
sS'.thisRepN'
p3060
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3061
I11
sS'.thisN'
p3062
I371
sS'.thisIndex'
p3063
I12
sg15
(lp3064
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I12
sa(dp3065
g16
(lp3066
S'd'
asg18
S'N'
sS'.thisRepN'
p3067
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3068
I12
sS'.thisN'
p3069
I372
sS'.thisIndex'
p3070
I10
sg15
(lp3071
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I10
sa(dp3072
g16
(lp3073
S'k'
asg18
S'N'
sS'.thisRepN'
p3074
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3075
I13
sS'.thisN'
p3076
I373
sS'.thisIndex'
p3077
I2
sg15
(lp3078
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I2
sa(dp3079
g16
(lp3080
S'k'
asg18
S'Y'
sS'.thisRepN'
p3081
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3082
I14
sS'.thisN'
p3083
I374
sS'.thisIndex'
p3084
I10
sg15
(lp3085
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I10
sa(dp3086
g16
(lp3087
S'k'
asg18
S'N'
sS'.thisRepN'
p3088
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3089
I0
sS'.thisN'
p3090
I375
sS'.thisIndex'
p3091
I13
sg15
(lp3092
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I13
sa(dp3093
g16
(lp3094
S'k'
asg18
S'Y'
sS'.thisRepN'
p3095
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3096
I1
sS'.thisN'
p3097
I376
sS'.thisIndex'
p3098
I3
sg15
(lp3099
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3100
S'space'
p3101
asg95
I3
sa(dp3102
g16
(lp3103
S'd'
asg18
S'Y'
sS'.thisRepN'
p3104
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3105
I2
sS'.thisN'
p3106
I377
sS'.thisIndex'
p3107
I11
sg15
(lp3108
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3109
S'space'
p3110
asg95
I11
sa(dp3111
g16
(lp3112
S'k'
asg18
S'N'
sS'.thisRepN'
p3113
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3114
I3
sS'.thisN'
p3115
I378
sS'.thisIndex'
p3116
I10
sg15
(lp3117
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I10
sa(dp3118
g16
(lp3119
S'd'
asg18
S'N'
sS'.thisRepN'
p3120
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3121
I4
sS'.thisN'
p3122
I379
sS'.thisIndex'
p3123
I3
sg15
(lp3124
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp3125
g16
(lp3126
S'd'
asg18
S'N'
sS'.thisRepN'
p3127
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3128
I5
sS'.thisN'
p3129
I380
sS'.thisIndex'
p3130
I1
sg15
(lp3131
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp3132
g16
(lp3133
S'k'
asg18
S'Y'
sS'.thisRepN'
p3134
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3135
I6
sS'.thisN'
p3136
I381
sS'.thisIndex'
p3137
I14
sg15
(lp3138
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3139
S'space'
p3140
asg95
I14
sa(dp3141
g16
(lp3142
S'd'
asg18
S'N'
sS'.thisRepN'
p3143
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3144
I7
sS'.thisN'
p3145
I382
sS'.thisIndex'
p3146
I10
sg15
(lp3147
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3148
S'space'
p3149
asg95
I10
sa(dp3150
g16
(lp3151
S'd'
asg18
S'N'
sS'.thisRepN'
p3152
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3153
I8
sS'.thisN'
p3154
I383
sS'.thisIndex'
p3155
I10
sg15
(lp3156
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I10
sa(dp3157
g16
(lp3158
S'd'
asg18
S'Y'
sS'.thisRepN'
p3159
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3160
I9
sS'.thisN'
p3161
I384
sS'.thisIndex'
p3162
I3
sg15
(lp3163
S'k'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
(lp3164
S'space'
p3165
asg95
I3
sa(dp3166
g16
(lp3167
S'k'
asg18
S'Y'
sS'.thisRepN'
p3168
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3169
I10
sS'.thisN'
p3170
I385
sS'.thisIndex'
p3171
I14
sg15
(lp3172
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3173
S'space'
p3174
asg95
I14
sa(dp3175
g16
(lp3176
S'k'
asg18
S'Y'
sS'.thisRepN'
p3177
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3178
I11
sS'.thisN'
p3179
I386
sS'.thisIndex'
p3180
I2
sg15
(lp3181
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3182
S'space'
p3183
asg95
I2
sa(dp3184
g16
(lp3185
S'k'
asg18
S'N'
sS'.thisRepN'
p3186
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3187
I12
sS'.thisN'
p3188
I387
sS'.thisIndex'
p3189
I11
sg15
(lp3190
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I11
sa(dp3191
g16
(lp3192
S'd'
asg18
S'Y'
sS'.thisRepN'
p3193
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3194
I13
sS'.thisN'
p3195
I388
sS'.thisIndex'
p3196
I9
sg15
(lp3197
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3198
S'space'
p3199
asg95
I9
sa(dp3200
g16
(lp3201
S'k'
asg18
S'Y'
sS'.thisRepN'
p3202
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3203
I14
sS'.thisN'
p3204
I389
sS'.thisIndex'
p3205
I14
sg15
(lp3206
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3207
S'space'
p3208
asg95
I14
sa(dp3209
g16
(lp3210
S'd'
asg18
S'N'
sS'.thisRepN'
p3211
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3212
I0
sS'.thisN'
p3213
I390
sS'.thisIndex'
p3214
I5
sg15
(lp3215
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp3216
g16
(lp3217
S'k'
asg18
S'N'
sS'.thisRepN'
p3218
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3219
I1
sS'.thisN'
p3220
I391
sS'.thisIndex'
p3221
I4
sg15
(lp3222
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp3223
g16
(lp3224
S'k'
asg18
S'N'
sS'.thisRepN'
p3225
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3226
I2
sS'.thisN'
p3227
I392
sS'.thisIndex'
p3228
I1
sg15
(lp3229
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I1
sa(dp3230
g16
(lp3231
S'k'
asg18
S'Y'
sS'.thisRepN'
p3232
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3233
I3
sS'.thisN'
p3234
I393
sS'.thisIndex'
p3235
I8
sg15
(lp3236
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3237
S'space'
p3238
asg95
I8
sa(dp3239
g16
(lp3240
S'd'
asg18
S'N'
sS'.thisRepN'
p3241
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3242
I4
sS'.thisN'
p3243
I394
sS'.thisIndex'
p3244
I12
sg15
(lp3245
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I12
sa(dp3246
g16
(lp3247
S'd'
asg18
S'Y'
sS'.thisRepN'
p3248
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3249
I5
sS'.thisN'
p3250
I395
sS'.thisIndex'
p3251
I11
sg15
(lp3252
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3253
S'space'
p3254
asg95
I11
sa(dp3255
g16
(lp3256
S'k'
asg18
S'N'
sS'.thisRepN'
p3257
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3258
I6
sS'.thisN'
p3259
I396
sS'.thisIndex'
p3260
I4
sg15
(lp3261
S'k'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp3262
g16
(lp3263
S'd'
asg18
S'Y'
sS'.thisRepN'
p3264
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3265
I7
sS'.thisN'
p3266
I397
sS'.thisIndex'
p3267
I6
sg15
(lp3268
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
(lp3269
S'space'
p3270
asg95
I6
sa(dp3271
g16
(lp3272
S'd'
asg18
S'N'
sS'.thisRepN'
p3273
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3274
I8
sS'.thisN'
p3275
I398
sS'.thisIndex'
p3276
I1
sg15
(lp3277
S'd'
asg30
Vm
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp3278
g16
(lp3279
S'k'
asg18
S'N'
sg22
I46
sS'.thisN'
p3280
I399
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3281
I9
sS'.thisRepN'
p3282
I26
sg21
I35
sS'.thisIndex'
p3283
I14
sg23
I22
sg15
(lp3284
S'd'
asg30
Vm
sg17
S'N'
sg14
I8
sg19
Nsg95
I14
sa(dp3285
g16
(lp3286
S'k'
asg95
I12
sS'.thisRepN'
p3287
I26
sg30
Vm
sg31
g32
sS'.thisTrialN'
p3288
I10
sS'.thisN'
p3289
I400
sS'.thisIndex'
p3290
I12
sg15
(lp3291
S'k'
asg17
S'Y'
sg14
I9
sa(dp3292
g16
(lp3293
S'k'
asg95
I4
sS'.thisRepN'
p3294
I26
sg30
Vm
sg31
g32
sS'.thisTrialN'
p3295
I11
sS'.thisN'
p3296
I401
sS'.thisIndex'
p3297
I4
sg15
(lp3298
S'k'
asg17
S'Y'
sg14
I9
sa(dp3299
g16
(lp3300
S'k'
asg18
S'Y'
sS'.thisRepN'
p3301
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3302
I12
sS'.thisN'
p3303
I402
sS'.thisIndex'
p3304
I8
sg15
(lp3305
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3306
S'space'
p3307
asg95
I8
sa(dp3308
g16
(lp3309
S'k'
asg18
S'N'
sS'.thisRepN'
p3310
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3311
I13
sS'.thisN'
p3312
I403
sS'.thisIndex'
p3313
I14
sg15
(lp3314
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3315
S'space'
p3316
asg95
I14
sa(dp3317
g16
(lp3318
S'd'
asg18
S'N'
sS'.thisRepN'
p3319
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3320
I14
sS'.thisN'
p3321
I404
sS'.thisIndex'
p3322
I7
sg15
(lp3323
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I7
sa(dp3324
g16
(lp3325
S'd'
asg18
S'Y'
sS'.thisRepN'
p3326
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3327
I0
sS'.thisN'
p3328
I405
sS'.thisIndex'
p3329
I14
sg15
(lp3330
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I14
sa(dp3331
g16
(lp3332
S'd'
asg18
S'Y'
sS'.thisRepN'
p3333
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3334
I1
sS'.thisN'
p3335
I406
sS'.thisIndex'
p3336
I2
sg15
(lp3337
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3338
S'space'
p3339
asg95
I2
sa(dp3340
g16
(lp3341
S'k'
asg18
S'N'
sS'.thisRepN'
p3342
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3343
I2
sS'.thisN'
p3344
I407
sS'.thisIndex'
p3345
I8
sg15
(lp3346
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I8
sa(dp3347
g16
(lp3348
S'd'
asg18
S'N'
sS'.thisRepN'
p3349
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3350
I3
sS'.thisN'
p3351
I408
sS'.thisIndex'
p3352
I9
sg15
(lp3353
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3354
g16
(lp3355
S'd'
asg18
S'N'
sS'.thisRepN'
p3356
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3357
I4
sS'.thisN'
p3358
I409
sS'.thisIndex'
p3359
I7
sg15
(lp3360
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3361
S'space'
p3362
asg95
I7
sa(dp3363
g16
(lp3364
S'd'
asg18
S'Y'
sS'.thisRepN'
p3365
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3366
I5
sS'.thisN'
p3367
I410
sS'.thisIndex'
p3368
I9
sg15
(lp3369
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
(lp3370
S'space'
p3371
asg95
I9
sa(dp3372
g16
(lp3373
S'd'
asg18
S'Y'
sS'.thisRepN'
p3374
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3375
I6
sS'.thisN'
p3376
I411
sS'.thisIndex'
p3377
I12
sg15
(lp3378
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3379
S'space'
p3380
asg95
I12
sa(dp3381
g16
(lp3382
S'd'
asg18
S'N'
sS'.thisRepN'
p3383
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3384
I7
sS'.thisN'
p3385
I412
sS'.thisIndex'
p3386
I9
sg15
(lp3387
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3388
S'space'
p3389
asg95
I9
sa(dp3390
g16
(lp3391
S'd'
asg18
S'N'
sS'.thisRepN'
p3392
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3393
I8
sS'.thisN'
p3394
I413
sS'.thisIndex'
p3395
I0
sg15
(lp3396
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3397
g16
(lp3398
S'd'
asg18
S'N'
sS'.thisRepN'
p3399
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3400
I9
sS'.thisN'
p3401
I414
sS'.thisIndex'
p3402
I7
sg15
(lp3403
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3404
S'space'
p3405
asg95
I7
sa(dp3406
g16
(lp3407
S'd'
asg18
S'Y'
sS'.thisRepN'
p3408
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3409
I10
sS'.thisN'
p3410
I415
sS'.thisIndex'
p3411
I9
sg15
(lp3412
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3413
S'space'
p3414
asg95
I9
sa(dp3415
g16
(lp3416
S'd'
asg18
S'Y'
sS'.thisRepN'
p3417
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3418
I11
sS'.thisN'
p3419
I416
sS'.thisIndex'
p3420
I7
sg15
(lp3421
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3422
S'space'
p3423
asg95
I7
sa(dp3424
g16
(lp3425
S'k'
asg18
S'Y'
sS'.thisRepN'
p3426
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3427
I12
sS'.thisN'
p3428
I417
sS'.thisIndex'
p3429
I6
sg15
(lp3430
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
(lp3431
S'space'
p3432
asg95
I6
sa(dp3433
g16
(lp3434
S'k'
asg18
S'Y'
sS'.thisRepN'
p3435
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3436
I13
sS'.thisN'
p3437
I418
sS'.thisIndex'
p3438
I6
sg15
(lp3439
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3440
S'space'
p3441
asg95
I6
sa(dp3442
g16
(lp3443
S'k'
asg18
S'Y'
sS'.thisRepN'
p3444
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3445
I14
sS'.thisN'
p3446
I419
sS'.thisIndex'
p3447
I7
sg15
(lp3448
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3449
S'space'
p3450
asg95
I7
sa(dp3451
g16
(lp3452
S'k'
asg18
S'N'
sS'.thisRepN'
p3453
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3454
I0
sS'.thisN'
p3455
I420
sS'.thisIndex'
p3456
I14
sg15
(lp3457
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I14
sa(dp3458
g16
(lp3459
S'd'
asg18
S'Y'
sS'.thisRepN'
p3460
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3461
I1
sS'.thisN'
p3462
I421
sS'.thisIndex'
p3463
I3
sg15
(lp3464
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3465
S'space'
p3466
asg95
I3
sa(dp3467
g16
(lp3468
S'd'
asg18
S'Y'
sS'.thisRepN'
p3469
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3470
I2
sS'.thisN'
p3471
I422
sS'.thisIndex'
p3472
I1
sg15
(lp3473
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3474
S'space'
p3475
asg95
I1
sa(dp3476
g16
(lp3477
S'k'
asg18
S'N'
sS'.thisRepN'
p3478
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3479
I3
sS'.thisN'
p3480
I423
sS'.thisIndex'
p3481
I9
sg15
(lp3482
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3483
g16
(lp3484
S'd'
asg18
S'N'
sS'.thisRepN'
p3485
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3486
I4
sS'.thisN'
p3487
I424
sS'.thisIndex'
p3488
I1
sg15
(lp3489
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3490
g16
(lp3491
S'k'
asg18
S'Y'
sS'.thisRepN'
p3492
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3493
I5
sS'.thisN'
p3494
I425
sS'.thisIndex'
p3495
I5
sg15
(lp3496
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3497
S'space'
p3498
asg95
I5
sa(dp3499
g16
(lp3500
S'd'
asg18
S'Y'
sS'.thisRepN'
p3501
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3502
I6
sS'.thisN'
p3503
I426
sS'.thisIndex'
p3504
I3
sg15
(lp3505
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3506
S'space'
p3507
asg95
I3
sa(dp3508
g16
(lp3509
S'k'
asg18
S'N'
sS'.thisRepN'
p3510
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3511
I7
sS'.thisN'
p3512
I427
sS'.thisIndex'
p3513
I9
sg15
(lp3514
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3515
g16
(lp3516
S'k'
asg18
S'N'
sS'.thisRepN'
p3517
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3518
I8
sS'.thisN'
p3519
I428
sS'.thisIndex'
p3520
I3
sg15
(lp3521
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3522
g16
(lp3523
S'd'
asg18
S'Y'
sS'.thisRepN'
p3524
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3525
I9
sS'.thisN'
p3526
I429
sS'.thisIndex'
p3527
I4
sg15
(lp3528
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3529
S'space'
p3530
asg95
I4
sa(dp3531
g16
(lp3532
S'd'
asg18
S'N'
sS'.thisRepN'
p3533
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3534
I10
sS'.thisN'
p3535
I430
sS'.thisIndex'
p3536
I12
sg15
(lp3537
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I12
sa(dp3538
g16
(lp3539
S'd'
asg18
S'Y'
sS'.thisRepN'
p3540
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3541
I11
sS'.thisN'
p3542
I431
sS'.thisIndex'
p3543
I6
sg15
(lp3544
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
(lp3545
S'space'
p3546
asg95
I6
sa(dp3547
g16
(lp3548
S'k'
asg18
S'N'
sS'.thisRepN'
p3549
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3550
I12
sS'.thisN'
p3551
I432
sS'.thisIndex'
p3552
I13
sg15
(lp3553
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I13
sa(dp3554
g16
(lp3555
S'd'
asg18
S'N'
sS'.thisRepN'
p3556
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3557
I13
sS'.thisN'
p3558
I433
sS'.thisIndex'
p3559
I11
sg15
(lp3560
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I11
sa(dp3561
g16
(lp3562
S'k'
asg18
S'N'
sS'.thisRepN'
p3563
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3564
I14
sS'.thisN'
p3565
I434
sS'.thisIndex'
p3566
I6
sg15
(lp3567
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3568
g16
(lp3569
S'd'
asg18
S'Y'
sS'.thisRepN'
p3570
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3571
I0
sS'.thisN'
p3572
I435
sS'.thisIndex'
p3573
I7
sg15
(lp3574
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
(lp3575
S'space'
p3576
asg95
I7
sa(dp3577
g16
(lp3578
S'd'
asg18
S'N'
sS'.thisRepN'
p3579
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3580
I1
sS'.thisN'
p3581
I436
sS'.thisIndex'
p3582
I14
sg15
(lp3583
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I14
sa(dp3584
g16
(lp3585
S'd'
asg18
S'Y'
sS'.thisRepN'
p3586
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3587
I2
sS'.thisN'
p3588
I437
sS'.thisIndex'
p3589
I2
sg15
(lp3590
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3591
S'space'
p3592
asg95
I2
sa(dp3593
g16
(lp3594
S'k'
asg18
S'N'
sS'.thisRepN'
p3595
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3596
I3
sS'.thisN'
p3597
I438
sS'.thisIndex'
p3598
I8
sg15
(lp3599
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I8
sa(dp3600
g16
(lp3601
S'd'
asg18
S'N'
sS'.thisRepN'
p3602
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3603
I4
sS'.thisN'
p3604
I439
sS'.thisIndex'
p3605
I10
sg15
(lp3606
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp3607
g16
(lp3608
S'k'
asg18
S'N'
sS'.thisRepN'
p3609
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3610
I5
sS'.thisN'
p3611
I440
sS'.thisIndex'
p3612
I14
sg15
(lp3613
S'd'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
Nsg95
I14
sa(dp3614
g16
(lp3615
S'k'
asg18
S'Y'
sS'.thisRepN'
p3616
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3617
I6
sS'.thisN'
p3618
I441
sS'.thisIndex'
p3619
I10
sg15
(lp3620
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3621
S'space'
p3622
asg95
I10
sa(dp3623
g16
(lp3624
S'k'
asg18
S'Y'
sS'.thisRepN'
p3625
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3626
I7
sS'.thisN'
p3627
I442
sS'.thisIndex'
p3628
I10
sg15
(lp3629
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3630
S'space'
p3631
asg95
I10
sa(dp3632
g16
(lp3633
S'd'
asg18
S'N'
sS'.thisRepN'
p3634
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3635
I8
sS'.thisN'
p3636
I443
sS'.thisIndex'
p3637
I14
sg15
(lp3638
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I14
sa(dp3639
g16
(lp3640
S'k'
asg18
S'Y'
sS'.thisRepN'
p3641
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3642
I9
sS'.thisN'
p3643
I444
sS'.thisIndex'
p3644
I10
sg15
(lp3645
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3646
S'space'
p3647
asg95
I10
sa(dp3648
g16
(lp3649
S'd'
asg18
S'Y'
sS'.thisRepN'
p3650
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3651
I10
sS'.thisN'
p3652
I445
sS'.thisIndex'
p3653
I5
sg15
(lp3654
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3655
S'space'
p3656
asg95
I5
sa(dp3657
g16
(lp3658
S'k'
asg18
S'Y'
sS'.thisRepN'
p3659
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3660
I11
sS'.thisN'
p3661
I446
sS'.thisIndex'
p3662
I2
sg15
(lp3663
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
(lp3664
S'k'
asg95
I2
sa(dp3665
g16
(lp3666
S'k'
asg18
S'N'
sS'.thisRepN'
p3667
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3668
I12
sS'.thisN'
p3669
I447
sS'.thisIndex'
p3670
I5
sg15
(lp3671
S'k'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3672
g16
(lp3673
S'd'
asg18
S'N'
sS'.thisRepN'
p3674
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3675
I13
sS'.thisN'
p3676
I448
sS'.thisIndex'
p3677
I9
sg15
(lp3678
S'd'
asg30
Vm
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3679
g16
(lp3680
S'd'
asg18
S'Y'
sg22
I42
sS'.thisN'
p3681
I449
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3682
I14
sS'.thisRepN'
p3683
I29
sg21
I40
sS'.thisIndex'
p3684
I1
sg23
I24
sg15
(lp3685
S'k'
asg30
Vm
sg17
S'N'
sg14
I9
sg19
(lp3686
S'space'
p3687
asg95
I1
sa(dp3688
g16
(lp3689
S'd'
asg95
I6
sS'.thisRepN'
p3690
I30
sg30
Vm
sg31
g32
sS'.thisTrialN'
p3691
I0
sS'.thisN'
p3692
I450
sS'.thisIndex'
p3693
I6
sg15
(lp3694
S'd'
asg17
S'Y'
sg14
I10
sa(dp3695
g16
(lp3696
S'd'
asg95
I12
sS'.thisRepN'
p3697
I30
sg30
Vm
sg31
g32
sS'.thisTrialN'
p3698
I1
sS'.thisN'
p3699
I451
sS'.thisIndex'
p3700
I12
sg15
(lp3701
S'd'
asg17
S'Y'
sg14
I10
sa(dp3702
g16
(lp3703
S'k'
asg18
S'N'
sS'.thisRepN'
p3704
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3705
I2
sS'.thisN'
p3706
I452
sS'.thisIndex'
p3707
I3
sg15
(lp3708
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3709
g16
(lp3710
S'k'
asg18
S'Y'
sS'.thisRepN'
p3711
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3712
I3
sS'.thisN'
p3713
I453
sS'.thisIndex'
p3714
I4
sg15
(lp3715
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3716
S'space'
p3717
asg95
I4
sa(dp3718
g16
(lp3719
S'k'
asg18
S'N'
sS'.thisRepN'
p3720
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3721
I4
sS'.thisN'
p3722
I454
sS'.thisIndex'
p3723
I8
sg15
(lp3724
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3725
g16
(lp3726
S'd'
asg18
S'N'
sS'.thisRepN'
p3727
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3728
I5
sS'.thisN'
p3729
I455
sS'.thisIndex'
p3730
I1
sg15
(lp3731
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3732
g16
(lp3733
S'd'
asg18
S'N'
sS'.thisRepN'
p3734
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3735
I6
sS'.thisN'
p3736
I456
sS'.thisIndex'
p3737
I2
sg15
(lp3738
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I2
sa(dp3739
g16
(lp3740
S'k'
asg18
S'N'
sS'.thisRepN'
p3741
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3742
I7
sS'.thisN'
p3743
I457
sS'.thisIndex'
p3744
I3
sg15
(lp3745
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3746
g16
(lp3747
S'd'
asg18
S'N'
sS'.thisRepN'
p3748
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3749
I8
sS'.thisN'
p3750
I458
sS'.thisIndex'
p3751
I5
sg15
(lp3752
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3753
g16
(lp3754
S'd'
asg18
S'N'
sS'.thisRepN'
p3755
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3756
I9
sS'.thisN'
p3757
I459
sS'.thisIndex'
p3758
I0
sg15
(lp3759
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp3760
g16
(lp3761
S'k'
asg18
S'N'
sS'.thisRepN'
p3762
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3763
I10
sS'.thisN'
p3764
I460
sS'.thisIndex'
p3765
I3
sg15
(lp3766
S'd'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I3
sa(dp3767
g16
(lp3768
S'd'
asg18
S'Y'
sS'.thisRepN'
p3769
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3770
I11
sS'.thisN'
p3771
I461
sS'.thisIndex'
p3772
I0
sg15
(lp3773
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3774
S'space'
p3775
asg95
I0
sa(dp3776
g16
(lp3777
S'k'
asg18
S'Y'
sS'.thisRepN'
p3778
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3779
I12
sS'.thisN'
p3780
I462
sS'.thisIndex'
p3781
I0
sg15
(lp3782
S'd'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
(lp3783
S'space'
p3784
asg95
I0
sa(dp3785
g16
(lp3786
S'd'
asg18
S'Y'
sS'.thisRepN'
p3787
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3788
I13
sS'.thisN'
p3789
I463
sS'.thisIndex'
p3790
I4
sg15
(lp3791
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
(lp3792
S'space'
p3793
asg95
I4
sa(dp3794
g16
(lp3795
S'd'
asg18
S'Y'
sS'.thisRepN'
p3796
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3797
I14
sS'.thisN'
p3798
I464
sS'.thisIndex'
p3799
I5
sg15
(lp3800
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3801
S'space'
p3802
asg95
I5
sa(dp3803
g16
(lp3804
S'k'
asg18
S'N'
sS'.thisRepN'
p3805
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3806
I0
sS'.thisN'
p3807
I465
sS'.thisIndex'
p3808
I8
sg15
(lp3809
S'd'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I8
sa(dp3810
g16
(lp3811
S'k'
asg18
S'Y'
sS'.thisRepN'
p3812
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3813
I1
sS'.thisN'
p3814
I466
sS'.thisIndex'
p3815
I3
sg15
(lp3816
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3817
S'space'
p3818
asg95
I3
sa(dp3819
g16
(lp3820
S'd'
asg18
S'Y'
sS'.thisRepN'
p3821
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3822
I2
sS'.thisN'
p3823
I467
sS'.thisIndex'
p3824
I6
sg15
(lp3825
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3826
S'space'
p3827
asg95
I6
sa(dp3828
g16
(lp3829
S'k'
asg18
S'Y'
sS'.thisRepN'
p3830
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3831
I3
sS'.thisN'
p3832
I468
sS'.thisIndex'
p3833
I13
sg15
(lp3834
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3835
S'space'
p3836
asg95
I13
sa(dp3837
g16
(lp3838
S'k'
asg18
S'Y'
sS'.thisRepN'
p3839
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3840
I4
sS'.thisN'
p3841
I469
sS'.thisIndex'
p3842
I9
sg15
(lp3843
S'd'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
(lp3844
S'space'
p3845
asg95
I9
sa(dp3846
g16
(lp3847
S'k'
asg18
S'N'
sS'.thisRepN'
p3848
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3849
I5
sS'.thisN'
p3850
I470
sS'.thisIndex'
p3851
I7
sg15
(lp3852
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I7
sa(dp3853
g16
(lp3854
S'k'
asg18
S'Y'
sS'.thisRepN'
p3855
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3856
I6
sS'.thisN'
p3857
I471
sS'.thisIndex'
p3858
I7
sg15
(lp3859
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3860
S'space'
p3861
asg95
I7
sa(dp3862
g16
(lp3863
S'k'
asg18
S'Y'
sS'.thisRepN'
p3864
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3865
I7
sS'.thisN'
p3866
I472
sS'.thisIndex'
p3867
I2
sg15
(lp3868
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3869
S'space'
p3870
asg95
I2
sa(dp3871
g16
(lp3872
S'd'
asg18
S'N'
sS'.thisRepN'
p3873
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3874
I8
sS'.thisN'
p3875
I473
sS'.thisIndex'
p3876
I8
sg15
(lp3877
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3878
g16
(lp3879
S'k'
asg18
S'N'
sS'.thisRepN'
p3880
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3881
I9
sS'.thisN'
p3882
I474
sS'.thisIndex'
p3883
I14
sg15
(lp3884
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I14
sa(dp3885
g16
(lp3886
S'k'
asg18
S'Y'
sS'.thisRepN'
p3887
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3888
I10
sS'.thisN'
p3889
I475
sS'.thisIndex'
p3890
I2
sg15
(lp3891
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3892
S'space'
p3893
asg95
I2
sa(dp3894
g16
(lp3895
S'd'
asg18
S'Y'
sS'.thisRepN'
p3896
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3897
I11
sS'.thisN'
p3898
I476
sS'.thisIndex'
p3899
I6
sg15
(lp3900
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3901
S'space'
p3902
asg95
I6
sa(dp3903
g16
(lp3904
S'd'
asg18
S'N'
sS'.thisRepN'
p3905
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3906
I12
sS'.thisN'
p3907
I477
sS'.thisIndex'
p3908
I6
sg15
(lp3909
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I6
sa(dp3910
g16
(lp3911
S'd'
asg18
S'Y'
sS'.thisRepN'
p3912
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3913
I13
sS'.thisN'
p3914
I478
sS'.thisIndex'
p3915
I12
sg15
(lp3916
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3917
S'space'
p3918
asg95
I12
sa(dp3919
g16
(lp3920
S'd'
asg18
S'N'
sS'.thisRepN'
p3921
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3922
I14
sS'.thisN'
p3923
I479
sS'.thisIndex'
p3924
I14
sg15
(lp3925
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I14
sa(dp3926
g16
(lp3927
S'd'
asg18
S'Y'
sS'.thisRepN'
p3928
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3929
I0
sS'.thisN'
p3930
I480
sS'.thisIndex'
p3931
I1
sg15
(lp3932
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3933
S'space'
p3934
asg95
I1
sa(dp3935
g16
(lp3936
S'k'
asg18
S'Y'
sS'.thisRepN'
p3937
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3938
I1
sS'.thisN'
p3939
I481
sS'.thisIndex'
p3940
I6
sg15
(lp3941
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3942
S'space'
p3943
asg95
I6
sa(dp3944
g16
(lp3945
S'k'
asg18
S'N'
sS'.thisRepN'
p3946
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3947
I2
sS'.thisN'
p3948
I482
sS'.thisIndex'
p3949
I8
sg15
(lp3950
S'd'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
Nsg95
I8
sa(dp3951
g16
(lp3952
S'k'
asg18
S'Y'
sS'.thisRepN'
p3953
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3954
I3
sS'.thisN'
p3955
I483
sS'.thisIndex'
p3956
I14
sg15
(lp3957
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3958
S'space'
p3959
asg95
I14
sa(dp3960
g16
(lp3961
S'd'
asg18
S'Y'
sS'.thisRepN'
p3962
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3963
I4
sS'.thisN'
p3964
I484
sS'.thisIndex'
p3965
I12
sg15
(lp3966
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
(lp3967
S'space'
p3968
asg95
I12
sa(dp3969
g16
(lp3970
S'd'
asg18
S'N'
sS'.thisRepN'
p3971
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3972
I5
sS'.thisN'
p3973
I485
sS'.thisIndex'
p3974
I13
sg15
(lp3975
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I13
sa(dp3976
g16
(lp3977
S'k'
asg18
S'N'
sS'.thisRepN'
p3978
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3979
I6
sS'.thisN'
p3980
I486
sS'.thisIndex'
p3981
I13
sg15
(lp3982
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I13
sa(dp3983
g16
(lp3984
S'd'
asg18
S'N'
sS'.thisRepN'
p3985
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3986
I7
sS'.thisN'
p3987
I487
sS'.thisIndex'
p3988
I5
sg15
(lp3989
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3990
g16
(lp3991
S'd'
asg18
S'Y'
sS'.thisRepN'
p3992
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3993
I8
sS'.thisN'
p3994
I488
sS'.thisIndex'
p3995
I13
sg15
(lp3996
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp3997
S'space'
p3998
asg95
I13
sa(dp3999
g16
(lp4000
S'k'
asg18
S'Y'
sS'.thisRepN'
p4001
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4002
I9
sS'.thisN'
p4003
I489
sS'.thisIndex'
p4004
I12
sg15
(lp4005
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp4006
S'space'
p4007
asg95
I12
sa(dp4008
g16
(lp4009
S'k'
asg18
S'N'
sS'.thisRepN'
p4010
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4011
I10
sS'.thisN'
p4012
I490
sS'.thisIndex'
p4013
I9
sg15
(lp4014
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp4015
g16
(lp4016
S'd'
asg18
S'Y'
sS'.thisRepN'
p4017
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4018
I11
sS'.thisN'
p4019
I491
sS'.thisIndex'
p4020
I11
sg15
(lp4021
S'k'
asg30
Vm
sg17
S'N'
sg14
I10
sg19
(lp4022
S'space'
p4023
asg95
I11
sa(dp4024
g16
(lp4025
S'k'
asg18
S'Y'
sS'.thisRepN'
p4026
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4027
I12
sS'.thisN'
p4028
I492
sS'.thisIndex'
p4029
I14
sg15
(lp4030
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp4031
S'space'
p4032
asg95
I14
sa(dp4033
g16
(lp4034
S'k'
asg18
S'Y'
sS'.thisRepN'
p4035
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4036
I13
sS'.thisN'
p4037
I493
sS'.thisIndex'
p4038
I14
sg15
(lp4039
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I14
sa(dp4040
g16
(lp4041
S'k'
asg18
S'Y'
sS'.thisRepN'
p4042
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4043
I14
sS'.thisN'
p4044
I494
sS'.thisIndex'
p4045
I8
sg15
(lp4046
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp4047
S'space'
p4048
asg95
I8
sa(dp4049
g16
(lp4050
S'd'
asg18
S'Y'
sS'.thisRepN'
p4051
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4052
I0
sS'.thisN'
p4053
I495
sS'.thisIndex'
p4054
I11
sg15
(lp4055
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp4056
S'space'
p4057
asg95
I11
sa(dp4058
g16
(lp4059
S'k'
asg18
S'N'
sS'.thisRepN'
p4060
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4061
I1
sS'.thisN'
p4062
I496
sS'.thisIndex'
p4063
I1
sg15
(lp4064
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp4065
g16
(lp4066
S'k'
asg18
S'N'
sS'.thisRepN'
p4067
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4068
I2
sS'.thisN'
p4069
I497
sS'.thisIndex'
p4070
I9
sg15
(lp4071
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
(lp4072
S'space'
p4073
asg95
I9
sa(dp4074
g16
(lp4075
S'd'
asg18
S'N'
sS'.thisRepN'
p4076
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4077
I3
sS'.thisN'
p4078
I498
sS'.thisIndex'
p4079
I11
sg15
(lp4080
S'd'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I11
sa(dp4081
g16
(lp4082
S'k'
asg18
S'N'
sg22
I46
sS'.thisN'
p4083
I499
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4084
I4
sS'.thisRepN'
p4085
I33
sg21
I40
sS'.thisIndex'
p4086
I13
sg23
I25
sg15
(lp4087
S'k'
asg30
Vm
sg17
S'Y'
sg14
I10
sg19
Nsg95
I13
sa(dp4088
g16
(lp4089
S'k'
asS'.thisIndex'
p4090
I2
sS'.thisRepN'
p4091
I33
sg26
S'Y'
sg30
Vm
sg31
g32
sS'.thisTrialN'
p4092
I5
sS'.thisN'
p4093
I500
sg25
S'Y'
sg24
S'Y'
sg15
(lp4094
S'd'
asg17
S'Y'
sg14
I11
sg95
I2
sa(dp4095
g16
(lp4096
S'k'
asS'.thisIndex'
p4097
I3
sS'.thisRepN'
p4098
I33
sg26
S'Y'
sg30
Vm
sg31
g32
sS'.thisTrialN'
p4099
I6
sS'.thisN'
p4100
I501
sg25
S'Y'
sg15
(lp4101
S'd'
asg17
S'Y'
sg14
I11
sg95
I3
sa(dp4102
g16
(lp4103
S'k'
asg18
S'N'
sS'.thisRepN'
p4104
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4105
I7
sS'.thisN'
p4106
I502
sg25
S'Y'
sg15
(lp4107
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I11
sS'.thisIndex'
p4108
I11
sa(dp4109
g16
(lp4110
S'k'
asg18
S'N'
sS'.thisRepN'
p4111
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4112
I8
sS'.thisN'
p4113
I503
sg25
S'Y'
sg15
(lp4114
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4115
I8
sa(dp4116
g16
(lp4117
S'k'
asg18
S'Y'
sS'.thisRepN'
p4118
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4119
I9
sS'.thisN'
p4120
I504
sg25
S'Y'
sg15
(lp4121
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4122
S'space'
p4123
asg95
I0
sS'.thisIndex'
p4124
I0
sa(dp4125
g16
(lp4126
S'd'
asg18
S'N'
sS'.thisRepN'
p4127
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4128
I10
sS'.thisN'
p4129
I505
sg25
S'Y'
sg15
(lp4130
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4131
I0
sa(dp4132
g16
(lp4133
S'k'
asg18
S'N'
sS'.thisRepN'
p4134
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4135
I11
sS'.thisN'
p4136
I506
sg25
S'Y'
sg15
(lp4137
S'k'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4138
I4
sa(dp4139
g16
(lp4140
S'k'
asg18
S'N'
sS'.thisRepN'
p4141
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4142
I12
sS'.thisN'
p4143
I507
sg25
S'Y'
sg15
(lp4144
S'k'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4145
I7
sa(dp4146
g16
(lp4147
S'k'
asg18
S'Y'
sS'.thisRepN'
p4148
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4149
I13
sS'.thisN'
p4150
I508
sg25
S'Y'
sg15
(lp4151
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4152
S'space'
p4153
asg95
I7
sS'.thisIndex'
p4154
I7
sa(dp4155
g16
(lp4156
S'd'
asg18
S'N'
sS'.thisRepN'
p4157
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4158
I14
sS'.thisN'
p4159
I509
sg25
S'Y'
sg15
(lp4160
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4161
I2
sa(dp4162
g18
S'Y'
sS'.thisRepN'
p4163
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4164
I0
sS'.thisN'
p4165
I510
sg25
S'Y'
sg15
Nsg30
Vm
sg17
S'Timed out'
p4166
sg14
I11
sg19
(lp4167
S'space'
p4168
asg95
I14
sS'.thisIndex'
p4169
I14
sa(dp4170
g16
(lp4171
S'k'
asg18
S'N'
sS'.thisRepN'
p4172
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4173
I1
sS'.thisN'
p4174
I511
sg25
S'Y'
sg15
(lp4175
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4176
S'space'
p4177
asg95
I4
sS'.thisIndex'
p4178
I4
sa(dp4179
g16
(lp4180
S'k'
asg18
S'Y'
sS'.thisRepN'
p4181
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4182
I2
sS'.thisN'
p4183
I512
sg25
S'Y'
sg15
(lp4184
S'k'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
(lp4185
S'space'
p4186
asg95
I7
sS'.thisIndex'
p4187
I7
sa(dp4188
g16
(lp4189
S'k'
asg18
S'N'
sS'.thisRepN'
p4190
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4191
I3
sS'.thisN'
p4192
I513
sg25
S'Y'
sg15
(lp4193
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I13
sS'.thisIndex'
p4194
I13
sa(dp4195
g16
(lp4196
S'k'
asg18
S'Y'
sS'.thisRepN'
p4197
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4198
I4
sS'.thisN'
p4199
I514
sg25
S'Y'
sg15
(lp4200
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4201
S'space'
p4202
asg95
I1
sS'.thisIndex'
p4203
I1
sa(dp4204
g16
(lp4205
S'd'
asg18
S'Y'
sS'.thisRepN'
p4206
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4207
I5
sS'.thisN'
p4208
I515
sg25
S'Y'
sg15
(lp4209
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4210
S'space'
p4211
asg95
I7
sS'.thisIndex'
p4212
I7
sa(dp4213
g16
(lp4214
S'd'
asg18
S'N'
sS'.thisRepN'
p4215
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4216
I6
sS'.thisN'
p4217
I516
sg25
S'Y'
sg15
(lp4218
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4219
I6
sa(dp4220
g16
(lp4221
S'k'
asg18
S'Y'
sS'.thisRepN'
p4222
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4223
I7
sS'.thisN'
p4224
I517
sg25
S'Y'
sg15
(lp4225
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4226
S'space'
p4227
asg95
I14
sS'.thisIndex'
p4228
I14
sa(dp4229
g16
(lp4230
S'd'
asg18
S'N'
sS'.thisRepN'
p4231
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4232
I8
sS'.thisN'
p4233
I518
sg25
S'Y'
sg15
(lp4234
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4235
I0
sa(dp4236
g16
(lp4237
S'k'
asg18
S'Y'
sS'.thisRepN'
p4238
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4239
I9
sS'.thisN'
p4240
I519
sg25
S'Y'
sg15
(lp4241
S'k'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
(lp4242
S'space'
p4243
asg95
I11
sS'.thisIndex'
p4244
I11
sa(dp4245
g16
(lp4246
S'k'
asg18
S'Y'
sS'.thisRepN'
p4247
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4248
I10
sS'.thisN'
p4249
I520
sg25
S'Y'
sg15
(lp4250
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4251
S'space'
p4252
asg95
I3
sS'.thisIndex'
p4253
I3
sa(dp4254
g16
(lp4255
S'k'
asg18
S'N'
sS'.thisRepN'
p4256
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4257
I11
sS'.thisN'
p4258
I521
sg25
S'Y'
sg15
(lp4259
S'k'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4260
I10
sa(dp4261
g16
(lp4262
S'd'
asg18
S'Y'
sS'.thisRepN'
p4263
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4264
I12
sS'.thisN'
p4265
I522
sg25
S'Y'
sg15
(lp4266
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4267
S'space'
p4268
asg95
I1
sS'.thisIndex'
p4269
I1
sa(dp4270
g16
(lp4271
S'd'
asg18
S'N'
sS'.thisRepN'
p4272
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4273
I13
sS'.thisN'
p4274
I523
sg25
S'Y'
sg15
(lp4275
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I12
sS'.thisIndex'
p4276
I12
sa(dp4277
g16
(lp4278
S'd'
asg18
S'N'
sS'.thisRepN'
p4279
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4280
I14
sS'.thisN'
p4281
I524
sg25
S'Y'
sg15
(lp4282
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4283
I10
sa(dp4284
g16
(lp4285
S'k'
asg18
S'Y'
sS'.thisRepN'
p4286
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4287
I0
sS'.thisN'
p4288
I525
sg25
S'Y'
sg15
(lp4289
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4290
S'space'
p4291
asg95
I4
sS'.thisIndex'
p4292
I4
sa(dp4293
g16
(lp4294
S'k'
asg18
S'Y'
sS'.thisRepN'
p4295
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4296
I1
sS'.thisN'
p4297
I526
sg25
S'Y'
sg15
(lp4298
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4299
S'space'
p4300
asg95
I5
sS'.thisIndex'
p4301
I5
sa(dp4302
g16
(lp4303
S'd'
asg18
S'N'
sS'.thisRepN'
p4304
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4305
I2
sS'.thisN'
p4306
I527
sg25
S'Y'
sg15
(lp4307
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4308
S'space'
p4309
asg95
I10
sS'.thisIndex'
p4310
I10
sa(dp4311
g16
(lp4312
S'd'
asg18
S'Y'
sS'.thisRepN'
p4313
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4314
I3
sS'.thisN'
p4315
I528
sg25
S'Y'
sg15
(lp4316
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4317
S'space'
p4318
asg95
I9
sS'.thisIndex'
p4319
I9
sa(dp4320
g16
(lp4321
S'k'
asg18
S'Y'
sS'.thisRepN'
p4322
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4323
I4
sS'.thisN'
p4324
I529
sg25
S'Y'
sg15
(lp4325
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4326
S'space'
p4327
asg95
I12
sS'.thisIndex'
p4328
I12
sa(dp4329
g16
(lp4330
S'd'
asg18
S'Y'
sS'.thisRepN'
p4331
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4332
I5
sS'.thisN'
p4333
I530
sg25
S'Y'
sg15
(lp4334
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
(lp4335
S'space'
p4336
asg95
I13
sS'.thisIndex'
p4337
I13
sa(dp4338
g16
(lp4339
S'd'
asg18
S'Y'
sS'.thisRepN'
p4340
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4341
I6
sS'.thisN'
p4342
I531
sg25
S'Y'
sg15
(lp4343
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4344
S'space'
p4345
asg95
I11
sS'.thisIndex'
p4346
I11
sa(dp4347
g16
(lp4348
S'd'
asg18
S'Y'
sS'.thisRepN'
p4349
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4350
I7
sS'.thisN'
p4351
I532
sg25
S'Y'
sg15
(lp4352
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4353
S'space'
p4354
asg95
I11
sS'.thisIndex'
p4355
I11
sa(dp4356
g16
(lp4357
S'd'
asg18
S'N'
sS'.thisRepN'
p4358
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4359
I8
sS'.thisN'
p4360
I533
sg25
S'Y'
sg15
(lp4361
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I12
sS'.thisIndex'
p4362
I12
sa(dp4363
g16
(lp4364
S'd'
asg18
S'Y'
sS'.thisRepN'
p4365
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4366
I9
sS'.thisN'
p4367
I534
sg25
S'Y'
sg15
(lp4368
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
(lp4369
S'space'
p4370
asg95
I10
sS'.thisIndex'
p4371
I10
sa(dp4372
g16
(lp4373
S'k'
asg18
S'Y'
sS'.thisRepN'
p4374
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4375
I10
sS'.thisN'
p4376
I535
sg25
S'Y'
sg15
(lp4377
S'k'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
(lp4378
S'space'
p4379
asg95
I0
sS'.thisIndex'
p4380
I0
sa(dp4381
g16
(lp4382
S'd'
asg18
S'N'
sS'.thisRepN'
p4383
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4384
I11
sS'.thisN'
p4385
I536
sg25
S'Y'
sg15
(lp4386
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4387
I5
sa(dp4388
g16
(lp4389
S'k'
asg18
S'Y'
sS'.thisRepN'
p4390
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4391
I12
sS'.thisN'
p4392
I537
sg25
S'Y'
sg15
(lp4393
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4394
S'space'
p4395
asg95
I11
sS'.thisIndex'
p4396
I11
sa(dp4397
g16
(lp4398
S'd'
asg18
S'Y'
sS'.thisRepN'
p4399
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4400
I13
sS'.thisN'
p4401
I538
sg25
S'Y'
sg15
(lp4402
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4403
S'space'
p4404
asg95
I8
sS'.thisIndex'
p4405
I8
sa(dp4406
g16
(lp4407
S'd'
asg18
S'Y'
sS'.thisRepN'
p4408
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4409
I14
sS'.thisN'
p4410
I539
sg25
S'Y'
sg15
(lp4411
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4412
S'space'
p4413
asg95
I10
sS'.thisIndex'
p4414
I10
sa(dp4415
g16
(lp4416
S'k'
asg18
S'N'
sS'.thisRepN'
p4417
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4418
I0
sS'.thisN'
p4419
I540
sg25
S'Y'
sg15
(lp4420
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4421
I9
sa(dp4422
g16
(lp4423
S'k'
asg18
S'N'
sS'.thisRepN'
p4424
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4425
I1
sS'.thisN'
p4426
I541
sg25
S'Y'
sg15
(lp4427
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4428
I6
sa(dp4429
g16
(lp4430
S'd'
asg18
S'N'
sS'.thisRepN'
p4431
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4432
I2
sS'.thisN'
p4433
I542
sg25
S'Y'
sg15
(lp4434
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4435
I2
sa(dp4436
g16
(lp4437
S'd'
asg18
S'N'
sS'.thisRepN'
p4438
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4439
I3
sS'.thisN'
p4440
I543
sg25
S'Y'
sg15
(lp4441
S'd'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4442
I5
sa(dp4443
g16
(lp4444
S'd'
asg18
S'Y'
sS'.thisRepN'
p4445
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4446
I4
sS'.thisN'
p4447
I544
sg25
S'Y'
sg15
(lp4448
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4449
S'space'
p4450
asg95
I9
sS'.thisIndex'
p4451
I9
sa(dp4452
g16
(lp4453
S'd'
asg18
S'N'
sS'.thisRepN'
p4454
I36
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4455
I5
sS'.thisN'
p4456
I545
sg25
S'Y'
sg15
(lp4457
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4458
S'space'
p4459
asg95
I9
sS'.thisIndex'
p4460
I9
sa(dp4461
g16
(lp4462
S'k'
asg18
S'Y'
sS'.thisRepN'
p4463
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4464
I6
sS'.thisN'
p4465
I546
sg25
S'Y'
sg15
(lp4466
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4467
S'space'
p4468
asg95
I12
sS'.thisIndex'
p4469
I12
sa(dp4470
g16
(lp4471
S'k'
asg18
S'N'
sS'.thisRepN'
p4472
I36
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4473
I7
sS'.thisN'
p4474
I547
sg25
S'Y'
sg15
(lp4475
S'd'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4476
S'space'
p4477
asg95
I5
sS'.thisIndex'
p4478
I5
sa(dp4479
g16
(lp4480
S'd'
asg18
S'N'
sS'.thisRepN'
p4481
I36
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4482
I8
sS'.thisN'
p4483
I548
sg25
S'Y'
sg15
(lp4484
S'k'
asg30
Vm
sg17
S'Y'
sg14
I11
sg19
(lp4485
S'space'
p4486
asg95
I5
sS'.thisIndex'
p4487
I5
sa(dp4488
g16
(lp4489
S'k'
asg18
S'Y'
sg22
I43
sg26
S'Y'
sS'.thisN'
p4490
I549
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4491
I9
sS'.thisRepN'
p4492
I36
sg21
I33
sg25
S'Y'
sg23
I25
sg15
(lp4493
S'k'
asg30
Vm
sg17
S'N'
sg14
I11
sg19
(lp4494
S'space'
p4495
asg95
I10
sS'.thisIndex'
p4496
I10
sa(dp4497
g16
(lp4498
S'd'
asS'.thisIndex'
p4499
I3
sS'.thisRepN'
p4500
I36
sg26
S'Y'
sg30
Vm
sg31
g32
sS'.thisTrialN'
p4501
I10
sS'.thisN'
p4502
I550
sg25
S'Y'
sg15
(lp4503
S'k'
asg17
S'Y'
sg14
I12
sg95
I3
sa(dp4504
g16
(lp4505
S'd'
asS'.thisIndex'
p4506
I8
sS'.thisRepN'
p4507
I36
sg26
S'Y'
sg30
Vm
sg31
g32
sS'.thisTrialN'
p4508
I11
sS'.thisN'
p4509
I551
sg25
S'Y'
sg15
(lp4510
S'd'
asg17
S'N'
sg14
I12
sg95
I8
sa(dp4511
g16
(lp4512
S'k'
asg18
S'Y'
sS'.thisRepN'
p4513
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4514
I12
sS'.thisN'
p4515
I552
sg25
S'Y'
sg15
(lp4516
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
(lp4517
S'space'
p4518
asg95
I4
sS'.thisIndex'
p4519
I4
sa(dp4520
g16
(lp4521
S'k'
asg18
S'Y'
sS'.thisRepN'
p4522
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4523
I13
sS'.thisN'
p4524
I553
sg25
S'Y'
sg15
(lp4525
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
(lp4526
S'space'
p4527
asg95
I9
sS'.thisIndex'
p4528
I9
sa(dp4529
g16
(lp4530
S'd'
asg18
S'Y'
sS'.thisRepN'
p4531
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4532
I14
sS'.thisN'
p4533
I554
sg25
S'Y'
sg15
(lp4534
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
(lp4535
S'space'
p4536
asg95
I0
sS'.thisIndex'
p4537
I0
sa(dp4538
g16
(lp4539
S'd'
asg18
S'N'
sS'.thisRepN'
p4540
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4541
I0
sS'.thisN'
p4542
I555
sg25
S'Y'
sg15
(lp4543
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4544
I5
sa(dp4545
g16
(lp4546
S'k'
asg18
S'Y'
sS'.thisRepN'
p4547
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4548
I1
sS'.thisN'
p4549
I556
sg25
S'Y'
sg15
(lp4550
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
(lp4551
S'space'
p4552
asg95
I14
sS'.thisIndex'
p4553
I14
sa(dp4554
g16
(lp4555
S'd'
asg18
S'Y'
sS'.thisRepN'
p4556
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4557
I2
sS'.thisN'
p4558
I557
sg25
S'Y'
sg15
(lp4559
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4560
S'space'
p4561
asg95
I3
sS'.thisIndex'
p4562
I3
sa(dp4563
g16
(lp4564
S'd'
asg18
S'Y'
sS'.thisRepN'
p4565
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4566
I3
sS'.thisN'
p4567
I558
sg25
S'Y'
sg15
(lp4568
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4569
S'space'
p4570
asg95
I8
sS'.thisIndex'
p4571
I8
sa(dp4572
g16
(lp4573
S'k'
asg18
S'N'
sS'.thisRepN'
p4574
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4575
I4
sS'.thisN'
p4576
I559
sg25
S'Y'
sg15
(lp4577
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4578
I8
sa(dp4579
g16
(lp4580
S'k'
asg18
S'Y'
sS'.thisRepN'
p4581
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4582
I5
sS'.thisN'
p4583
I560
sg25
S'Y'
sg15
(lp4584
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4585
S'space'
p4586
asg95
I11
sS'.thisIndex'
p4587
I11
sa(dp4588
g16
(lp4589
S'k'
asg18
S'N'
sS'.thisRepN'
p4590
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4591
I6
sS'.thisN'
p4592
I561
sg25
S'Y'
sg15
(lp4593
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4594
I8
sa(dp4595
g16
(lp4596
S'd'
asg18
S'Y'
sS'.thisRepN'
p4597
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4598
I7
sS'.thisN'
p4599
I562
sg25
S'Y'
sg15
(lp4600
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4601
S'space'
p4602
asg95
I11
sS'.thisIndex'
p4603
I11
sa(dp4604
g16
(lp4605
S'd'
asg18
S'Y'
sS'.thisRepN'
p4606
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4607
I8
sS'.thisN'
p4608
I563
sg25
S'Y'
sg15
(lp4609
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4610
S'space'
p4611
asg95
I2
sS'.thisIndex'
p4612
I2
sa(dp4613
g16
(lp4614
S'k'
asg18
S'N'
sS'.thisRepN'
p4615
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4616
I9
sS'.thisN'
p4617
I564
sg25
S'Y'
sg15
(lp4618
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4619
I5
sa(dp4620
g16
(lp4621
S'k'
asg18
S'Y'
sS'.thisRepN'
p4622
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4623
I10
sS'.thisN'
p4624
I565
sg25
S'Y'
sg15
(lp4625
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4626
S'space'
p4627
asg95
I11
sS'.thisIndex'
p4628
I11
sa(dp4629
g16
(lp4630
S'k'
asg18
S'Y'
sS'.thisRepN'
p4631
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4632
I11
sS'.thisN'
p4633
I566
sg25
S'Y'
sg15
(lp4634
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
(lp4635
S'space'
p4636
asg95
I4
sS'.thisIndex'
p4637
I4
sa(dp4638
g16
(lp4639
S'k'
asg18
S'Y'
sS'.thisRepN'
p4640
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4641
I12
sS'.thisN'
p4642
I567
sg25
S'Y'
sg15
(lp4643
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
(lp4644
S'space'
p4645
asg95
I4
sS'.thisIndex'
p4646
I4
sa(dp4647
g16
(lp4648
S'k'
asg18
S'Y'
sS'.thisRepN'
p4649
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4650
I13
sS'.thisN'
p4651
I568
sg25
S'Y'
sg15
(lp4652
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4653
S'space'
p4654
asg95
I1
sS'.thisIndex'
p4655
I1
sa(dp4656
g16
(lp4657
S'd'
asg18
S'Y'
sS'.thisRepN'
p4658
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4659
I14
sS'.thisN'
p4660
I569
sg25
S'Y'
sg15
(lp4661
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4662
S'space'
p4663
asg95
I3
sS'.thisIndex'
p4664
I3
sa(dp4665
g16
(lp4666
S'k'
asg18
S'N'
sS'.thisRepN'
p4667
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4668
I0
sS'.thisN'
p4669
I570
sg25
S'Y'
sg15
(lp4670
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I13
sS'.thisIndex'
p4671
I13
sa(dp4672
g16
(lp4673
S'k'
asg18
S'N'
sS'.thisRepN'
p4674
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4675
I1
sS'.thisN'
p4676
I571
sg25
S'Y'
sg15
(lp4677
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4678
I7
sa(dp4679
g16
(lp4680
S'd'
asg18
S'N'
sS'.thisRepN'
p4681
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4682
I2
sS'.thisN'
p4683
I572
sg25
S'Y'
sg15
(lp4684
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4685
I0
sa(dp4686
g16
(lp4687
S'k'
asg18
S'N'
sS'.thisRepN'
p4688
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4689
I3
sS'.thisN'
p4690
I573
sg25
S'Y'
sg15
(lp4691
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4692
I3
sa(dp4693
g16
(lp4694
S'd'
asg18
S'N'
sS'.thisRepN'
p4695
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4696
I4
sS'.thisN'
p4697
I574
sg25
S'Y'
sg15
(lp4698
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4699
I2
sa(dp4700
g16
(lp4701
S'd'
asg18
S'N'
sS'.thisRepN'
p4702
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4703
I5
sS'.thisN'
p4704
I575
sg25
S'Y'
sg15
(lp4705
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4706
I4
sa(dp4707
g16
(lp4708
S'd'
asg18
S'N'
sS'.thisRepN'
p4709
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4710
I6
sS'.thisN'
p4711
I576
sg25
S'Y'
sg15
(lp4712
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I12
sS'.thisIndex'
p4713
I12
sa(dp4714
g16
(lp4715
S'd'
asg18
S'Y'
sS'.thisRepN'
p4716
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4717
I7
sS'.thisN'
p4718
I577
sg25
S'Y'
sg15
(lp4719
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4720
S'space'
p4721
asg95
I2
sS'.thisIndex'
p4722
I2
sa(dp4723
g18
S'Y'
sS'.thisRepN'
p4724
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4725
I8
sS'.thisN'
p4726
I578
sg25
S'Y'
sg15
Nsg30
Vm
sg17
g4166
sg14
I12
sg19
(lp4727
S'space'
p4728
asg95
I0
sS'.thisIndex'
p4729
I0
sa(dp4730
g16
(lp4731
S'd'
asg18
S'N'
sS'.thisRepN'
p4732
I38
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4733
I9
sS'.thisN'
p4734
I579
sg25
S'Y'
sg15
(lp4735
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4736
S'space'
p4737
asg95
I10
sS'.thisIndex'
p4738
I10
sa(dp4739
g16
(lp4740
S'k'
asg18
S'N'
sS'.thisRepN'
p4741
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4742
I10
sS'.thisN'
p4743
I580
sg25
S'Y'
sg15
(lp4744
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I12
sS'.thisIndex'
p4745
I12
sa(dp4746
g16
(lp4747
S'k'
asg18
S'N'
sS'.thisRepN'
p4748
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4749
I11
sS'.thisN'
p4750
I581
sg25
S'Y'
sg15
(lp4751
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4752
I5
sa(dp4753
g16
(lp4754
S'k'
asg18
S'N'
sS'.thisRepN'
p4755
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4756
I12
sS'.thisN'
p4757
I582
sg25
S'Y'
sg15
(lp4758
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I13
sS'.thisIndex'
p4759
I13
sa(dp4760
g16
(lp4761
S'k'
asg18
S'N'
sS'.thisRepN'
p4762
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4763
I13
sS'.thisN'
p4764
I583
sg25
S'Y'
sg15
(lp4765
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4766
I6
sa(dp4767
g16
(lp4768
S'k'
asg18
S'N'
sS'.thisRepN'
p4769
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4770
I14
sS'.thisN'
p4771
I584
sg25
S'Y'
sg15
(lp4772
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4773
I4
sa(dp4774
g16
(lp4775
S'd'
asg18
S'Y'
sS'.thisRepN'
p4776
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4777
I0
sS'.thisN'
p4778
I585
sg25
S'Y'
sg15
(lp4779
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
(lp4780
S'space'
p4781
asg95
I7
sS'.thisIndex'
p4782
I7
sa(dp4783
g16
(lp4784
S'd'
asg18
S'N'
sS'.thisRepN'
p4785
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4786
I1
sS'.thisN'
p4787
I586
sg25
S'Y'
sg15
(lp4788
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4789
I10
sa(dp4790
g16
(lp4791
S'd'
asg18
S'Y'
sS'.thisRepN'
p4792
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4793
I2
sS'.thisN'
p4794
I587
sg25
S'Y'
sg15
(lp4795
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4796
S'space'
p4797
asg95
I4
sS'.thisIndex'
p4798
I4
sa(dp4799
g16
(lp4800
S'k'
asg18
S'Y'
sS'.thisRepN'
p4801
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4802
I3
sS'.thisN'
p4803
I588
sg25
S'Y'
sg15
(lp4804
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4805
S'space'
p4806
asg95
I10
sS'.thisIndex'
p4807
I10
sa(dp4808
g16
(lp4809
S'd'
asg18
S'Y'
sS'.thisRepN'
p4810
I39
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4811
I4
sS'.thisN'
p4812
I589
sg25
S'Y'
sg15
(lp4813
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4814
I5
sa(dp4815
g16
(lp4816
S'k'
asg18
S'Y'
sS'.thisRepN'
p4817
I39
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4818
I5
sS'.thisN'
p4819
I590
sg25
S'Y'
sg15
(lp4820
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4821
I3
sa(dp4822
g16
(lp4823
S'k'
asg18
S'Y'
sS'.thisRepN'
p4824
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4825
I6
sS'.thisN'
p4826
I591
sg25
S'Y'
sg15
(lp4827
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
(lp4828
S'space'
p4829
asg95
I6
sS'.thisIndex'
p4830
I6
sa(dp4831
g16
(lp4832
S'd'
asg18
S'N'
sS'.thisRepN'
p4833
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4834
I7
sS'.thisN'
p4835
I592
sg25
S'Y'
sg15
(lp4836
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4837
I4
sa(dp4838
g16
(lp4839
S'd'
asg18
S'N'
sS'.thisRepN'
p4840
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4841
I8
sS'.thisN'
p4842
I593
sg25
S'Y'
sg15
(lp4843
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I12
sS'.thisIndex'
p4844
I12
sa(dp4845
g16
(lp4846
S'd'
asg18
S'N'
sS'.thisRepN'
p4847
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4848
I9
sS'.thisN'
p4849
I594
sg25
S'Y'
sg15
(lp4850
S'k'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4851
I2
sa(dp4852
g16
(lp4853
S'd'
asg18
S'N'
sS'.thisRepN'
p4854
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4855
I10
sS'.thisN'
p4856
I595
sg25
S'Y'
sg15
(lp4857
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I12
sS'.thisIndex'
p4858
I12
sa(dp4859
g16
(lp4860
S'k'
asg18
S'Y'
sS'.thisRepN'
p4861
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4862
I11
sS'.thisN'
p4863
I596
sg25
S'Y'
sg15
(lp4864
S'k'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
(lp4865
S'space'
p4866
asg95
I4
sS'.thisIndex'
p4867
I4
sa(dp4868
g16
(lp4869
S'k'
asg18
S'Y'
sS'.thisRepN'
p4870
I39
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4871
I12
sS'.thisN'
p4872
I597
sg25
S'Y'
sg15
(lp4873
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4874
I10
sa(dp4875
g16
(lp4876
S'k'
asg18
S'Y'
sS'.thisRepN'
p4877
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4878
I13
sS'.thisN'
p4879
I598
sg25
S'Y'
sg15
(lp4880
S'd'
asg30
Vm
sg17
S'Y'
sg14
I12
sg19
(lp4881
S'space'
p4882
asg95
I2
sS'.thisIndex'
p4883
I2
sa(dp4884
g16
(lp4885
S'd'
asg18
S'N'
sg22
I44
sg26
S'Y'
sS'.thisN'
p4886
I599
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4887
I14
sS'.thisRepN'
p4888
I39
sg21
I27
sg25
S'Y'
sg23
I25
sg15
(lp4889
S'd'
asg30
Vm
sg17
S'N'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4890
I4
sasS'loops'
p4891
(lp4892
g1
(g35
g3
NtRp4893
(dp4894
g38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4895
sg40
(lp4896
sg41
I73861680
sg10
S''
sg6
g42
sg43
I1
sg27
I01
sg28
Nsg44
g1
(g45
g46
(dp4897
g48
g49
(g50
g51
g52
S'b'
tRp4898
(I1
(I600
I1
tg55
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg56
g49
(g50
g51
g52
S'b'
tRp4899
(I1
(I600
I1
tg55
I00
S'\x00\xc0\tD\x00\x00lC\x00@\x10D\x00\x00\x00A\x00\x80\x12D\x00\x00\xf8A\x00\x80\xf7C\x00\x00\x0fC\x00\x00:C\x00\x00\xb9C\x00\x00VC\x00\xc0\x02D\x00\x00\\B\x00@\x05D\x00\x80\xe9C\x00\x00\xb0C\x00\x00\xa8B\x00\x80\xcaC\x00\x80\xc6C\x00\x00\xacB\x00@\x0bD\x00\x00@B\x00\x00)C\x00\x00\x04B\x00\x00\x8eC\x00\x00pA\x00\x00\x8cC\x00\x00\x16C\x00\x00\xf9C\x00\x00\xc4B\x00\x00PB\x00\x00\x02C\x00\x80\xbfC\x00\x80\x8aC\x00\xc0\x14D\x00\x80\x82C\x00\x00\xe6B\x00\x00\xe8C\x00\x00\x85C\x00\x00\x12C\x00\x00\xb1C\x00\x80\xafC\x00\x00\xb4C\x00\x80\xf5C\x00\x00\xecB\x00\x80\xa3C\x00\x00\x08D\x00\x00\xdaC\x00\x80\xcdC\x00\x80\xd9C\x00\x00\x13C\x00\x00\xc3C\x00\x00\xccC\x00\x006C\x00\x00\x03D\x00\x80\xd8C\x00\x00wC\x00\x00\x05C\x00\x00\xaeB\x00\x00\x18C\x00\x80\xbcC\x00\x00\xd0A\x00\x00\x07C\x00\x80\x86C\x00\x00\xbeB\x00@\x0eD\x00\x00\xd4C\x00\x80\xdbC\x00\x00{C\x00\x00\xafC\x00\x80\xa1C\x00@\x13D\x00\x00\xe4C\x00\x00XB\x00\x00\xeaB\x00\x00\x10D\x00\x80\x0cD\x00\x00\xbaC\x00\x00lB\x00\x00\xeeC\x00\x00!C\x00\x00\x80C\x00\x00oC\x00@\x08D\x00\x80\xccC\x00\x00\xb6B\x00\x80\xe5C\x00\x00\x06D\x00\x80\xddC\x00\x00pC\x00\x00#C\x00\x00yC\x00\x00 B\x00\x00\xa7C\x00\x00\x0cB\x00\x00`C\x00\x00\tD\x00\x00,B\x00\x00\x00C\x00\x00\xb2C\x00\x00\x0bC\x00\x00cC\x00\x00\x05D\x00\x00\xb7C\x00\x00\x14D\x00\x00\xe0C\x00\x00\x86C\x00\x00\xceC\x00\x00FC\x00\x80\nD\x00\x80\xb7C\x00\x00zC\x00\x80\xb0C\x00\x80\xeeC\x00\x80\xe6C\x00\x00\xcbC\x00\x80\x02D\x00\xc0\x04D\x00\x00\x00B\x00\x00\xdcB\x00\x00\xbaB\x00\x00\xd3C\x00\x80\xe0C\x00\x80\xcfC\x00\xc0\nD\x00\x00\x15C\x00\x00\xb4B\x00\x00+C\x00\x00SC\x00\xc0\x10D\x00\x00\xcaC\x00\x00\xccB\x00\x00\x01D\x00\xc0\x07D\x00\x00tC\x00\x00\x96C\x00\x00\x82B\x00\x00\xceB\x00\x00\xd5C\x00\x00HC\x00\x00\x93C\x00\x00uC\x00\x00\xbeC\x00\x00\xaeC\x00\x00\x03C\x00\x00\xbfC\x00\x00^C\x00\x00\x0fD\x00\x80\xceC\x00\xc0\x15D\x00\x00\xabC\x00\x80\xdeC\x00\x00`A\x00\x00\x1eC\x00\x00?C\x00\x80\xf2C\x00\x00\x8cB\x00\x00\xaaB\x00\x00WC\x00\x00\xa2C\x00\x00`B\x00\x00@C\x00\x00\x1cB\x00\x000B\x00\x00\xd8B\x00\x80\xd6C\x00\x00\x04D\x00\xc0\x12D\x00\x80\tD\x00\x00\xe0A\x00\x00\x8aC\x00\x00\x0cC\x00\x00\xd7C\x00\x003C\x00\x80\xa9C\x00\x80\xa7C\x00\x00\x9aB\x00\x80\xecC\x00\x00\xc0@\x00\x00\x8bC\x00\x80\x9aC\x00\x00\xb0B\x00\x00\xa6C\x00\x80\xf3C\x00\xc0\x0fD\x00\x00tB\x00\x00\'C\x00\x00PA\x00\x80\xb3C\x00@\x14D\x00\x80\xe7C\x00\x00\xe4B\x00\x80\xbdC\x00\x009C\x00\x00\xcdC\x00\x00\xfaB\x00\x00>C\x00\x00\xe1C\x00\x00YC\x00\x80\x9dC\x00\x00\xcfC\x00\x00aC\x00\x00\xc8A\x00\x80\xb6C\x00\x00(C\x00\x001C\x00\x00kC\x00\x00eC\x00\xc0\x03D\x00\x00\x7fC\x00\x00\x89C\x00\x80\xa8C\x00\x00UC\x00\x00\xb8C\x00\x00gC\x00\x80\x83C\x00\x00\x88A\x00\x00\xc5C\x00\x80\xe1C\x00\x00\x18B\x00\x80\x95C\x00\x00\x80A\x00\x00\x17C\x00\x00\xf0C\x00\x00\xb3C\x00\x00\x10C\x00\x00\xb8A\x00\x004B\x00\x00,C\x00\x80\x05D\x00\x00\xc2C\x00\x00\xc7C\x00\x80\x93C\x00\x00\xfcB\x00\x00\xefC\x00\xc0\x0cD\x00\x80\x04D\x00\x80\x01D\x00\x00\xd0B\x00\x80\xfeC\x00\x80\x91C\x00\x00\xc0C\x00\x00\x90B\x00\x00\x04C\x00\x00CC\x00\x80\x07D\x00\x00@@\x00\x00\x9cC\x00\x80\x0bD\x00\x00&C\x00\x80\x9bC\x00\x80\x9cC\x00\x80\xa2C\x00\x00;C\x00\x00dB\x00\x00\xd8A\x00\x80\xb5C\x00\x80\xc5C\x00\x80\xa4C\x00\x00\x1bC\x00\x00\xc0B\x00\x00DC\x00\x80\xefC\x00\x00<B\x00\x80\x84C\x00\x00\x81C\x00\x00\xf2C\x00\x00\x94B\x00\x80\x06D\x00\x80\xd2C\x00\x00\xbcB\x00\xc0\x00D\x00\x00_C\x00\x00*C\x00\x00\xe8B\x00@\x12D\x00\x00IC\x00\x00ZC\x00\x80\xe3C\x00\x00MC\x00\x00\x1aC\x00\x80\x90C\x00\x00\xf4C\x00\x80\xb8C\x00\x00BC\x00\x00\xe5C\x00\x80\xfcC\x00\x80\xdaC\x00\x00\xa4C\x00\x00\x08C\x00\x80\x0fD\x00\x00\xd0C\x00\x80\xd7C\x00\x007C\x00\x00\x98A\x00\xc0\x06D\x00\x00XC\x00\x80\xacC\x00\x80\x14D\x00\x80\xb4C\x00\x80\x03D\x00\x00\xf0B\x00\x00\xeeB\x00\x00sC\x00\x80\xebC\x00\x00<C\x00\x00\xa1C\x00@\x00D\x00\x80\xc3C\x00\x00\xe6C\x00\x00\xc1C\x00\x00\xb6C\x00\x00\x90C\x00\x00hC\x00\x00]C\x00\x80\xfbC\x00@\x01D\x00\x00\xa0C\x00\x00\xb2B\x00\x00\xa0B\x00\x00|C\x00\x80\xb2C\x00\x80\x15D\x00\x00\xa9C\x00\x00EC\x00\x80\xc0C\x00\x00\xd6B\x00\x00GC\x00\x00\xf5C\x00\x80\xf1C\x00\x80\xd1C\x00\x00dC\x00\x00\xe7C\x00\x00\x9aC\x00\x00\xf3C\x00\x00\x9bC\x00\x80\x98C\x00@\x06D\x00\x00\xbdC\x00\x80\xffC\x00\x00\x10B\x00\x00vC\x00\x00mC\x00\x00\xa0@\x00\x80\xf0C\x00\x00\x98B\x00\x00DB\x00\x00|B\x00\x00\xe8A\x00\x00\x84C\x00\x00\x88B\x00\x00\xfbC\x00\x00\xedC\x00\x00-C\x00\x80\x99C\x00\x80\x00D\x00\x00\xdaB\x00\x80\xa6C\x00\x80\xf9C\x00\x00pB\x00\x80\xfaC\x00\x00\x83C\x00\x00KC\x00\x80\xc2C\x00\x00\xacC\x00\x00[C\x00\x00RC\x00\x80\x8dC\x00\x00\x8fC\x00@\x03D\x00\x00\x0eD\x00\x00\xaaC\x00\x00bC\x00\x00\xe9C\x00\x80\x88C\x00\x00\xfaC\x00\x80\xc4C\x00\x00\x1cC\x00\x00"C\x00\x00\x97C\x00\xc0\x01D\x00\x00\xc6B\x00\x00\x08B\x00\x00\xa5C\x00\xc0\x13D\x00\x00\xf7C\x00\x00\x11C\x00\x80\xaaC\x00\x00\nC\x00\xc0\x0bD\x00\x00\xc9C\x00\x00\xf6B\x00\x80\xf6C\x00\x80\xe2C\x00\x00\x14B\x00\xc0\x05D\x00\x00\xc0A\x00\x000C\x00\x00jC\x00\x00\x01C\x00\x00LC\x00\x00\xeaC\x00\x80\xd3C\x00\x00\x00\x00\x00@\nD\x00\x00\x9eB\x00\x80\x8cC\x00\x00\xd2C\x00\x80\x96C\x00\x00\x8dC\x00\x00\xd2B\x00\x80\xaeC\x00\x80\xadC\x00\x00\x91C\x00\x80\x97C\x00\x00\xe2B\x00\x80\xdcC\x00\x00\xd8C\x00\x00LB\x00\x80\xedC\x00\x80\x94C\x00\x00\x92C\x00\x008C\x00\x80\xc1C\x00\x00\xc8B\x00\x80\xb1C\x00\x00=C\x00\x80\x8eC\x00\x00\xe3C\x00\x00\x98C\x00\x00iC\x00@\x02D\x00\x00\x0cD\x00\x80\x08D\x00\x00\xd6C\x00\x80\xa5C\x00\x00\xb8B\x00\x00\x80?\x00\x00QC\x00\x80\xc9C\x00\x00\xa2B\x00\x00\x11D\x00\x00$B\x00\x00\x07D\x00\x80\x87C\x00\x00\x9dC\x00\x00\xf8C\x00\x00\xf2B\x00\x000A\x00\x80\x80C\x00\x80\x0eD\x00\x002C\x00\x00\xfcC\x00\x00\xecC\x00\x80\x9fC\x00\x80\x89C\x00\x00\xfdC\x00\x008B\x00\x00@A\x00\x80\x9eC\x00\x80\x81C\x00\x00PC\x00\x00\x06C\x00\x00\xdeB\x00\x00\xbbC\x00@\x0cD\x00\x80\xe4C\x00\x00OC\x00\x00.C\x00@\x15D\x00\x00\x1dC\x00\x80\xeaC\x00\x80\xc8C\x00\x00\xe0B\x00\x80\xf8C\x00\xc0\x0eD\x00\x00\x9cB\x00\x80\x92C\x00\xc0\x11D\x00\x00\xa4B\x00\x80\xbeC\x00\x00\x95C\x00\x00\xf6C\x00\x00\x1fC\x00\x80\xbaC\x00\x80\xd5C\x00\x80\xd0C\x00\x00\xb5C\x00\x00\x19C\x00\x00\xc4C\x00\x80\xcbC\x00\x00\xc2B\x00\x80\xabC\x00\x80\x85C\x00\x00JC\x00\x00\x9eC\x00\x00\xc6C\x00@\x0fD\x00\x00%C\x00\x00\x92B\x00\x00\xf0A\x00\x80\xc7C\x00\x00\x0bD\x00\x00\x00D\x00\x00HB\x00\x00\x94C\x00\x00\xfeB\x00\x80\xbbC\x00\x80\xe8C\x00\x00xB\x00\x00\xcaB\x00\x80\xa0C\x00\x00\xe2C\x00@\x07D\x00\x00\x9fC\x00\x00\xddC\x00\x00hB\x00\x00\x12D\x00\x00nC\x00\x00\xd1C\x00\x00\x99C\x00\x00AC\x00\x00}C\x00\x80\x11D\x00\x80\x10D\x00@\rD\x00\x00\x15D\x00\x80\x8fC\x00\x005C\x00\x00\x00@\x00\x00\x10A\x00\x00\xf4B\x00\x00NC\x00\x00\xd9C\x00\x00\xdbC\x00\x00\xe0@\x00\x80\x8bC\x00\x00\xa0A\x00\x00\xffC\x00\x80\x13D\x00\x00\xb0A\x00\x00\x02D\x00\x00\xa3C\x00\x80\xb9C\x00\x00\rD\x00\x00\x96B\x00\x00\x8eB\x00\x80\xf4C\x00@\tD\x00\x00\\C\x00\x00\xc8C\x00\x00\x13D\x00\x00\x84B\x00\xc0\rD\x00\x00\nD\x00\x00\xadC\x00\x00\x88C\x00\x00\rC\x00@\x04D\x00\x00\xebC\x00\x80\xdfC\x00\x00\x86B\x00\x00(B\x00\x00\xdeC\x00\x00rC\x00\x00\x80@\x00\x00 A\x00\x00\x14C\x00\xc0\x08D\x00\x80\xd4C\x00\x00\xfeC\x00\x00\xdcC\x00\x00\x87C\x00\x00\xbcC\x00\x00\xa6B\x00\x80\rD\x00\x00\xdfC\x00\x00\xf1C\x00\x00\xa8A\x00\x00/C\x00\x00qC\x00\x00~C\x00\x00\x80B\x00\x00\tC\x00\x00\x90A\x00\x004C\x00\x00\x8aB\x00\x00xC\x00@\x11D\x00\x00\x82C\x00\x00$C\x00\x00\xf8B\x00\x00fC\x00\x00 C\x00\x80\xfdC\x00\x00TC\x00\x00\x0eC\x00\x00\xd4B\x00\x00TB\x00\x00\xa8C'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4900
(dp4901
g60
(dp4902
g48
I01
sg56
I01
ssg62
g4893
sg63
(lp4903
g48
ag56
asg65
(lp4904
I600
aI1
asbsg67
S'random'
p4905
sg69
g70
(g51
(I0
tS'b'
tRp4906
(I1
(I600
I1
tg54
(S'i4'
I0
I1
tRp4907
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'\x93\x01\x00\x00\xb5\x01\x00\x00\x11\x02\x00\x00\xf6\x00\x00\x005\x02\x00\x00W\x01\x00\x00\xb2\x00\x00\x00\x17\x02\x00\x00\x03\x00\x00\x00\x12\x02\x00\x006\x02\x00\x00\xc0\x01\x00\x00\xca\x01\x00\x00\xbb\x00\x00\x00\x98\x00\x00\x00\x19\x00\x00\x00\xdd\x00\x00\x00\xd8\x00\x00\x00H\x02\x00\x00&\x01\x00\x00\x19\x02\x00\x00B\x02\x00\x00\x1c\x02\x00\x00\xe2\x00\x00\x00\x8c\x01\x00\x00\xca\x00\x00\x00=\x00\x00\x00\xff\x00\x00\x00\xa9\x00\x00\x00\\\x01\x00\x00\xf4\x01\x00\x00\x05\x00\x00\x00v\x00\x00\x00\x17\x00\x00\x00~\x01\x00\x00^\x00\x00\x00T\x01\x00\x00\x8a\x01\x00\x00\xdb\x00\x00\x00\xa2\x00\x00\x00\\\x00\x00\x00\xba\x01\x00\x002\x02\x00\x00a\x00\x00\x00\xa3\x00\x00\x00\xe3\x00\x00\x00\xc9\x01\x00\x00\x07\x01\x00\x00\x15\x00\x00\x00Z\x01\x00\x00\xf8\x01\x00\x00\xa2\x01\x00\x00\x1e\x00\x00\x00V\x02\x00\x00I\x00\x00\x00\x0c\x00\x00\x00\xa0\x00\x00\x00\xfe\x00\x00\x00\x04\x02\x00\x00N\x00\x00\x00g\x01\x00\x00\xb9\x00\x00\x00\xfd\x01\x00\x00[\x01\x00\x00F\x02\x00\x00\x88\x00\x00\x00(\x02\x00\x001\x02\x00\x00^\x01\x00\x00J\x02\x00\x00\x9c\x00\x00\x00"\x02\x00\x00\xf2\x00\x00\x00\xf3\x01\x00\x00\x0b\x01\x00\x00!\x02\x00\x00Y\x01\x00\x00\xb0\x00\x00\x00\xdc\x01\x00\x00\x95\x01\x00\x00?\x01\x00\x00\xb8\x01\x00\x00\xdf\x01\x00\x00>\x02\x00\x00\x10\x00\x00\x00\x9d\x00\x00\x00\x13\x00\x00\x00:\x00\x00\x00\xb5\x00\x00\x00>\x01\x00\x00~\x00\x00\x00U\x00\x00\x00\xb4\x01\x00\x00x\x00\x00\x00\x0e\x01\x00\x00@\x00\x00\x00\x04\x01\x00\x00\xeb\x01\x00\x00\x1d\x00\x00\x00}\x01\x00\x00\xa8\x01\x00\x00\xfe\x01\x00\x00\x83\x00\x00\x00\x89\x00\x00\x00\xee\x00\x00\x00\x9a\x01\x00\x00U\x02\x00\x00F\x01\x00\x00\xa4\x00\x00\x00d\x01\x00\x00w\x00\x00\x00\xcf\x01\x00\x00\xd9\x01\x00\x00\x9f\x01\x00\x00\xbf\x00\x00\x00$\x00\x00\x00\x12\x01\x00\x00J\x00\x00\x00,\x00\x00\x00.\x01\x00\x00-\x01\x00\x00\xbf\x01\x00\x00\x13\x02\x00\x00\x87\x01\x00\x00O\x02\x00\x00\xc3\x00\x00\x00\xe9\x00\x00\x00\xfa\x01\x00\x00b\x00\x00\x00\x8f\x01\x00\x00\x1f\x00\x00\x00\x90\x00\x00\x00\xf3\x00\x00\x009\x00\x00\x00\xce\x01\x00\x00>\x00\x00\x00!\x01\x00\x00G\x02\x00\x00\x84\x01\x00\x00d\x00\x00\x00\xab\x00\x00\x00-\x02\x00\x00T\x02\x00\x00\x07\x00\x00\x00\xe1\x00\x00\x00\x82\x01\x00\x00\'\x00\x00\x002\x00\x00\x007\x02\x00\x00}\x00\x00\x00\x1b\x00\x00\x00\xde\x00\x00\x00;\x00\x00\x00\xe8\x01\x00\x00\x18\x01\x00\x00\x03\x01\x00\x00y\x01\x00\x00\xd6\x01\x00\x00\x99\x00\x00\x00\xe3\x01\x00\x00Q\x02\x00\x00P\x00\x00\x00z\x01\x00\x00Z\x00\x00\x00N\x02\x00\x00\xf2\x01\x00\x00\xf9\x00\x00\x00\xba\x00\x00\x00\xcc\x00\x00\x00\x16\x00\x00\x00\x11\x01\x00\x00\x7f\x00\x00\x00\xe4\x00\x00\x00a\x01\x00\x00\xd4\x01\x00\x00C\x02\x00\x00\x8d\x01\x00\x00\xcd\x00\x00\x00\xc3\x01\x00\x00\xad\x00\x00\x00I\x02\x00\x00\x10\x02\x00\x005\x00\x00\x00%\x01\x00\x00\xa6\x01\x00\x00\xc1\x00\x00\x00\x08\x00\x00\x00\xfd\x00\x00\x001\x01\x00\x00\xaa\x01\x00\x00\xc4\x00\x00\x00\x9a\x00\x00\x00\xa1\x00\x00\x00\t\x02\x00\x00\x1c\x01\x00\x00\xf4\x00\x00\x00\x05\x01\x00\x00D\x01\x00\x00l\x00\x00\x00G\x01\x00\x00\x8b\x00\x00\x00\x14\x01\x00\x00\xee\x01\x00\x00j\x01\x00\x00\x90\x01\x00\x00\x17\x01\x00\x00\x14\x02\x00\x00\xd3\x01\x00\x00\xcd\x01\x00\x00\xb6\x01\x00\x00n\x01\x00\x00\x80\x00\x00\x00S\x02\x00\x00\xd4\x00\x00\x00\n\x00\x00\x00\x9e\x00\x00\x00(\x01\x00\x00\xc6\x00\x00\x00\x15\x01\x00\x00m\x01\x00\x00%\x02\x00\x00:\x01\x00\x00\x92\x00\x00\x00\x10\x01\x00\x00_\x00\x00\x00\xc9\x00\x00\x00t\x01\x00\x00e\x00\x00\x00K\x01\x00\x00\xcf\x00\x00\x00P\x02\x00\x00\xd6\x00\x00\x009\x01\x00\x00\xae\x01\x00\x00\x8e\x01\x00\x00\xce\x00\x00\x00\x01\x00\x00\x00V\x01\x00\x00\x06\x02\x00\x00R\x00\x00\x00Y\x00\x00\x00D\x02\x00\x004\x02\x00\x00/\x01\x00\x00\x86\x00\x00\x00\x8d\x00\x00\x00U\x01\x00\x008\x00\x00\x00K\x02\x00\x00[\x00\x00\x00o\x00\x00\x00D\x00\x00\x00@\x01\x00\x00\n\x02\x00\x00E\x02\x00\x00\xd1\x00\x00\x00Q\x00\x00\x00\xc1\x01\x00\x00\t\x01\x00\x00\xcc\x01\x00\x00M\x02\x00\x00#\x00\x00\x00i\x01\x00\x00\xd7\x00\x00\x00]\x01\x00\x00\x08\x01\x00\x00&\x00\x00\x00\xed\x01\x00\x00j\x00\x00\x00?\x00\x00\x00<\x02\x00\x00\xbc\x01\x00\x00,\x02\x00\x00v\x01\x00\x00\xd2\x00\x00\x00\xc7\x01\x00\x00\xaa\x00\x00\x00!\x00\x00\x00\xb3\x00\x00\x00\x18\x02\x00\x00\x1a\x00\x00\x00\x96\x01\x00\x00\x99\x01\x00\x00o\x01\x00\x00\x18\x00\x00\x00\xab\x01\x00\x00p\x01\x00\x00\x0f\x02\x00\x008\x01\x00\x00\x19\x01\x00\x00\x9d\x01\x00\x00\xf0\x00\x00\x00\xa5\x01\x00\x00\xdd\x01\x00\x00\x8c\x00\x00\x00\xe8\x00\x00\x00\xf9\x01\x00\x00\xa4\x01\x00\x00\xe1\x01\x00\x00\xdc\x00\x00\x00\x87\x00\x00\x00\x98\x01\x00\x00{\x01\x00\x00\x9e\x01\x00\x00\xad\x01\x00\x00P\x01\x00\x00\x08\x02\x00\x00b\x01\x00\x00M\x01\x00\x00\xb4\x00\x00\x00O\x01\x00\x00\xfa\x00\x00\x00\xf7\x00\x00\x00\xfb\x00\x00\x00\xbd\x01\x00\x00\xc7\x00\x00\x00\xef\x01\x00\x00\xcb\x01\x00\x00\x02\x02\x00\x00\xc6\x01\x00\x00=\x01\x00\x00\xff\x01\x00\x002\x01\x00\x00F\x00\x00\x00\x9f\x00\x00\x00\xfc\x00\x00\x00\x1e\x02\x00\x00-\x00\x00\x00 \x01\x00\x00\x02\x01\x00\x00\x7f\x01\x00\x00\xb3\x01\x00\x00\xb6\x00\x00\x00e\x01\x00\x00]\x00\x00\x00\xaf\x00\x00\x00W\x02\x00\x00\xd3\x00\x00\x00C\x01\x00\x00\xae\x00\x00\x00s\x01\x00\x00\x83\x01\x00\x00\x96\x00\x00\x00\xec\x01\x00\x00l\x01\x00\x00)\x01\x00\x00+\x02\x00\x00\x9c\x01\x00\x00\x8f\x00\x00\x00\x9b\x01\x00\x00E\x00\x00\x00)\x00\x00\x00\x0f\x00\x00\x00p\x00\x00\x00(\x00\x00\x00\xa9\x01\x00\x00c\x00\x00\x00A\x01\x00\x00\xe0\x00\x00\x00\xbc\x00\x00\x00*\x00\x00\x00+\x01\x00\x00\xe7\x01\x00\x00\x00\x01\x00\x007\x01\x00\x00\xcb\x00\x00\x00g\x00\x00\x00n\x00\x00\x00\xd5\x00\x00\x00\x1b\x01\x00\x00\t\x00\x00\x00\x1f\x02\x00\x00M\x00\x00\x00\xe4\x01\x00\x00\xd0\x01\x00\x00\xfb\x01\x00\x00=\x02\x00\x00<\x00\x00\x00R\x01\x00\x00\xc0\x00\x00\x00\x8e\x00\x00\x00\xe0\x01\x00\x00\x91\x00\x00\x00 \x00\x00\x00\xf1\x00\x00\x00E\x01\x00\x006\x01\x00\x00\xa7\x01\x00\x00\xe6\x00\x00\x00k\x01\x00\x003\x00\x00\x004\x01\x00\x00\xe9\x01\x00\x00x\x01\x00\x00\xd9\x00\x00\x00\x01\x01\x00\x00\xf0\x01\x00\x00\x12\x00\x00\x00\xe7\x00\x00\x00\xf5\x01\x00\x00&\x02\x00\x00\xd8\x01\x00\x00\x86\x01\x00\x00\xb7\x01\x00\x00\x82\x00\x00\x00\x11\x00\x00\x00s\x00\x00\x00\xea\x01\x00\x004\x00\x00\x00T\x00\x00\x00\xc2\x00\x00\x000\x00\x00\x00k\x00\x00\x00\x94\x00\x00\x00\xc8\x00\x00\x00{\x00\x00\x00#\x01\x00\x00\xe6\x01\x00\x00\x07\x02\x00\x00J\x01\x00\x00\x97\x01\x00\x00\r\x01\x00\x00y\x00\x00\x00\x92\x01\x00\x00B\x00\x00\x009\x02\x00\x00\x8a\x00\x00\x00\xe5\x01\x00\x00\xb2\x01\x00\x00\xa5\x00\x00\x00\xac\x00\x00\x00$\x01\x00\x00\xa1\x01\x00\x007\x00\x00\x00\x15\x02\x00\x001\x00\x00\x00/\x00\x00\x00\x1f\x01\x00\x00\x16\x02\x00\x00C\x00\x00\x00;\x02\x00\x00\xa0\x01\x00\x00\x03\x02\x00\x00X\x00\x00\x003\x02\x00\x00\x97\x00\x00\x00@\x02\x00\x000\x02\x00\x00i\x00\x00\x00z\x00\x00\x00\xc5\x00\x00\x00\xda\x00\x00\x00\x00\x02\x00\x00\x89\x01\x00\x00\xac\x01\x00\x00\x16\x01\x00\x00H\x00\x00\x00\xd2\x01\x00\x00\x1d\x01\x00\x00V\x00\x00\x005\x01\x00\x00r\x00\x00\x00L\x01\x00\x00\xbe\x00\x00\x00%\x00\x00\x00\xfc\x01\x00\x00u\x01\x00\x00\x0e\x00\x00\x00\x91\x01\x00\x00\xd7\x01\x00\x00/\x02\x00\x000\x01\x00\x00\xc5\x01\x00\x00\xb1\x00\x00\x00`\x01\x00\x00\xa3\x01\x00\x00O\x00\x00\x00q\x00\x00\x00\xea\x00\x00\x00\x06\x01\x00\x00\xdf\x00\x00\x00X\x01\x00\x00A\x02\x00\x00I\x01\x00\x00\n\x01\x00\x00\x9b\x00\x00\x00N\x01\x00\x00\xb7\x00\x00\x00\x1a\x01\x00\x00#\x02\x00\x00H\x01\x00\x00+\x00\x00\x00\xe2\x01\x00\x00\x88\x01\x00\x00\x81\x01\x00\x00\x06\x00\x00\x00\xbe\x01\x00\x00\xda\x01\x00\x00\x1c\x00\x00\x00f\x01\x00\x00w\x01\x00\x00h\x01\x00\x00_\x01\x00\x00;\x01\x00\x00\xc4\x01\x00\x00\x1e\x01\x00\x00\xc8\x01\x00\x00R\x02\x00\x00:\x02\x00\x00\xef\x00\x00\x00\x1a\x02\x00\x00S\x01\x00\x00\xf7\x01\x00\x003\x01\x00\x00c\x01\x00\x00\x0f\x01\x00\x00\x84\x00\x00\x00<\x01\x00\x00\xed\x00\x00\x00|\x01\x00\x00\x1d\x02\x00\x00\xaf\x01\x00\x00t\x00\x00\x00\x0b\x00\x00\x006\x00\x00\x00q\x01\x00\x00,\x01\x00\x00\xd0\x00\x00\x00\xa6\x00\x00\x00.\x02\x00\x00\xec\x00\x00\x00u\x00\x00\x00f\x00\x00\x00\r\x00\x00\x00\xe5\x00\x00\x00\x8b\x01\x00\x00W\x00\x00\x00Q\x01\x00\x00\x0c\x01\x00\x00\'\x01\x00\x00\xbb\x01\x00\x00\x01\x02\x00\x00\xf5\x00\x00\x00\x85\x00\x00\x00.\x00\x00\x00S\x00\x00\x00\xb1\x01\x00\x008\x02\x00\x00`\x00\x00\x00$\x02\x00\x00\xa8\x00\x00\x00\x00\x00\x00\x00*\x02\x00\x00\x94\x01\x00\x00m\x00\x00\x00|\x00\x00\x00\xf6\x01\x00\x00\x14\x00\x00\x00\xf8\x00\x00\x00\x85\x01\x00\x00\xb0\x01\x00\x00\xd1\x01\x00\x00L\x00\x00\x00\xeb\x00\x00\x00 \x02\x00\x00\r\x02\x00\x00?\x02\x00\x00)\x02\x00\x00r\x01\x00\x00A\x00\x00\x00\xc2\x01\x00\x00\xdb\x01\x00\x00\x93\x00\x00\x00\xf1\x01\x00\x00"\x01\x00\x00\xb8\x00\x00\x00K\x00\x00\x00\x02\x00\x00\x00\x0c\x02\x00\x00\x81\x00\x00\x00\xb9\x01\x00\x00L\x02\x00\x00\x0b\x02\x00\x00\xde\x01\x00\x00\x05\x02\x00\x00\x13\x01\x00\x00\x04\x00\x00\x00\xa7\x00\x00\x00\'\x02\x00\x00G\x00\x00\x00\x1b\x02\x00\x00\x80\x01\x00\x00h\x00\x00\x00\xbd\x00\x00\x00*\x01\x00\x00"\x00\x00\x00\x0e\x02\x00\x00\xd5\x01\x00\x00B\x01\x00\x00\x95\x00\x00\x00'
tbsg74
I01
sg75
I1
sg76
I-1
sg77
(lp4908
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg79
Nsg80
cnumpy.core.multiarray
scalar
p4909
(g4907
S'\x95\x00\x00\x00'
tRp4910
sg81
I600
sg82
I0
sg83
I600
sg84
I01
sbag36
asS'savePickle'
p4911
I01
sb.