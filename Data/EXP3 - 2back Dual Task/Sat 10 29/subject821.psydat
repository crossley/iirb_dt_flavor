ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject821
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 821
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
VF
sS'age'
p31
V20
p32
ssS'loopsUnfinished'
p33
(lp34
g1
(cpsychopy.data
TrialHandler
p35
g3
NtRp36
(dp37
S'origin'
p38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p39
sS'thisTrial'
p40
I9
sS'_exp'
p41
I75307536
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p42
sS'thisRepN'
p43
I39
sg27
I01
sg28
NsS'data'
p44
g1
(cpsychopy.data
DataHandler
p45
c__builtin__
dict
p46
(dp47
S'ran'
p48
cnumpy.ma.core
_mareconstruct
p49
(cnumpy.ma.core
MaskedArray
p50
cnumpy
ndarray
p51
(I0
tp52
S'b'
tRp53
(I1
(I15
I40
tcnumpy
dtype
p54
(S'f4'
I0
I1
tRp55
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p56
g49
(g50
g51
g52
S'b'
tRp57
(I1
(I15
I40
tg55
I00
S'\x00\x00@@\x00\x00\x80A\x00\x00\x14B\x00\x00HB\x00\x00\x82B\x00\x00\xbeB\x00\x00\xc4B\x00\x00\xdeB\x00\x00\xe2B\x00\x00\x02C\x00\x00\x0cC\x00\x00*C\x00\x00AC\x00\x00NC\x00\x00hC\x00\x00nC\x00\x00\x7fC\x00\x80\x84C\x00\x80\x87C\x00\x80\x91C\x00\x00\x9aC\x00\x00\x9dC\x00\x00\xa1C\x00\x80\xa2C\x00\x80\xb4C\x00\x00\xbdC\x00\x00\xc9C\x00\x00\xcaC\x00\x00\xe5C\x00\x80\xf3C\x00\x00\xf5C\x00\x00\x05D\x00\x80\x05D\x00\x00\x08D\x00\x00\x0bD\x00\x00\x10D\x00\x00\x13D\x00\x80\x13D\x00\xc0\x13D\x00\x80\x14D\x00\x00\xa8A\x00\x00\xb8A\x00\x00\x80B\x00\x00\x84B\x00\x00\x86B\x00\x00\xc2B\x00\x00\xc8B\x00\x00\xd2B\x00\x00\xf4B\x00\x00\x06C\x00\x00\x1aC\x00\x00 C\x00\x00"C\x00\x00/C\x00\x003C\x00\x00DC\x00\x00bC\x00\x00fC\x00\x00lC\x00\x00sC\x00\x80\x83C\x00\x80\x89C\x00\x80\x94C\x00\x80\x96C\x00\x80\x97C\x00\x00\x9fC\x00\x00\xb6C\x00\x00\xb7C\x00\x00\xbaC\x00\x80\xbdC\x00\x00\xc0C\x00\x00\xc5C\x00\x00\xcfC\x00\x80\xd4C\x00\x80\xe9C\x00\x80\x00D\x00\xc0\x01D\x00\x80\x06D\x00\x00\tD\x00\xc0\tD\x00\x00\xa0A\x00\x00\xe8A\x00\x00\x18B\x00\x00\x8eB\x00\x00\x98B\x00\x00\xa4B\x00\x00\xaaB\x00\x00\xb0B\x00\x00\xd6B\x00\x00\x00C\x00\x00\x13C\x00\x00\x1dC\x00\x00\'C\x00\x001C\x00\x002C\x00\x00?C\x00\x00`C\x00\x00\x80C\x00\x80\x80C\x00\x00\x82C\x00\x00\x87C\x00\x00\x8cC\x00\x00\x94C\x00\x80\x99C\x00\x80\xa1C\x00\x80\xb3C\x00\x00\xc6C\x00\x00\xccC\x00\x80\xceC\x00\x80\xdcC\x00\x80\xdeC\x00\x80\xdfC\x00\x00\xebC\x00\x00\xefC\x00\x00\xf1C\x00\x80\xf6C\x00\x80\xfeC\x00\x00\x06D\x00@\x08D\x00\xc0\x0fD\x00\x00\x00A\x00\x00 A\x00\x00\\B\x00\x00\xa8B\x00\x00\rC\x00\x00\x11C\x00\x00+C\x00\x00VC\x00\x00\\C\x00\x00jC\x00\x00vC\x00\x00{C\x00\x00\x84C\x00\x00\x88C\x00\x00\x8fC\x00\x80\x90C\x00\x00\x99C\x00\x80\xa8C\x00\x80\xaeC\x00\x80\xb1C\x00\x80\xbaC\x00\x00\xc1C\x00\x00\xc4C\x00\x80\xc8C\x00\x00\xcbC\x00\x00\xd6C\x00\x80\xdaC\x00\x80\xddC\x00\x00\xdfC\x00\x80\xe6C\x00\x80\xe7C\x00\x00\xeaC\x00\x00\xf8C\x00\x00\x02D\x00@\x02D\x00\x00\x04D\x00\x00\rD\x00\xc0\rD\x00@\x0fD\x00@\x13D\x00\x00`A\x00\x00 B\x00\x004B\x00\x00dB\x00\x00|B\x00\x00\xc0B\x00\x00\xe0B\x00\x00\xf8B\x00\x00\xfeB\x00\x00\x03C\x00\x00\x12C\x00\x00\x15C\x00\x00\x19C\x00\x00=C\x00\x00BC\x00\x00KC\x00\x00PC\x00\x00SC\x00\x00^C\x00\x00eC\x00\x00~C\x00\x00\x89C\x00\x00\x93C\x00\x00\x9eC\x00\x00\xa9C\x00\x80\xadC\x00\x80\xb0C\x00\x00\xb1C\x00\x80\xb9C\x00\x00\xbbC\x00\x80\xbfC\x00\x00\xcdC\x00\x80\xf1C\x00\x00\xf3C\x00\x80\xfdC\x00\x80\xffC\x00@\x0cD\x00@\rD\x00\xc0\x10D\x00\xc0\x11D\x00\x00\x00@\x00\x00\xd8A\x00\x00\xf8A\x00\x00,B\x00\x00xB\x00\x00\x9eB\x00\x00\xe6B\x00\x008C\x00\x00FC\x00\x00HC\x00\x00LC\x00\x00UC\x00\x00xC\x00\x80\x88C\x00\x80\x8dC\x00\x80\x95C\x00\x00\x96C\x00\x80\xa5C\x00\x80\xa7C\x00\x80\xa9C\x00\x80\xacC\x00\x00\xadC\x00\x80\xccC\x00\x00\xceC\x00\x00\xd0C\x00\x80\xd7C\x00\x80\xeeC\x00\x80\xf4C\x00\x00\xfaC\x00\x80\xfbC\x00\x00\xfdC\x00@\x00D\x00@\x03D\x00\x80\x03D\x00\x80\x07D\x00\x80\nD\x00\xc0\nD\x00\x80\x0eD\x00@\x11D\x00\x00\x15D\x00\x00\xb0A\x00\x00\xe0A\x00\x00\x1cB\x00\x00`B\x00\x00\xa6B\x00\x00\xb6B\x00\x00\xceB\x00\x00\xeaB\x00\x00\xf2B\x00\x00\x17C\x00\x00(C\x00\x00)C\x00\x00:C\x00\x00>C\x00\x00GC\x00\x00JC\x00\x00cC\x00\x00mC\x00\x00\x83C\x00\x80\x85C\x00\x80\x86C\x00\x00\x95C\x00\x00\x97C\x00\x80\x9dC\x00\x80\xa3C\x00\x00\xa8C\x00\x00\xaeC\x00\x80\xb8C\x00\x80\xc2C\x00\x80\xcfC\x00\x00\xd4C\x00\x00\xdbC\x00\x80\xe5C\x00\x80\xecC\x00\x00\x01D\x00\xc0\x04D\x00\xc0\x0bD\x00@\x0eD\x00@\x12D\x00\xc0\x12D\x00\x00\x00\x00\x00\x00\x80?\x00\x00PA\x00\x00\x90A\x00\x00$B\x00\x00\x88B\x00\x00\xc6B\x00\x00\x07C\x00\x00\tC\x00\x00#C\x00\x007C\x00\x00;C\x00\x00EC\x00\x00MC\x00\x00iC\x00\x00tC\x00\x00\x86C\x00\x00\x8aC\x00\x80\x8aC\x00\x00\x90C\x00\x00\x98C\x00\x80\xaaC\x00\x00\xabC\x00\x80\xabC\x00\x00\xb0C\x00\x80\xb7C\x00\x00\xc2C\x00\x80\xcaC\x00\x00\xd3C\x00\x80\xd9C\x00\x80\xe1C\x00\x00\xe7C\x00\x80\xf0C\x00\x00\xfeC\x00\x00\xffC\x00\x80\x08D\x00@\x0bD\x00\x00\x11D\x00\x80\x11D\x00\x00\x14D\x00\x00\x80@\x00\x00\xd0A\x00\x00\x10B\x00\x00lB\x00\x00\x92B\x00\x00\x96B\x00\x00\xa0B\x00\x00\xbaB\x00\x00\xf6B\x00\x00\x05C\x00\x00$C\x00\x00<C\x00\x00@C\x00\x00[C\x00\x00wC\x00\x80\x92C\x00\x80\x98C\x00\x00\xa4C\x00\x80\xbeC\x00\x80\xc1C\x00\x00\xd1C\x00\x80\xd3C\x00\x80\xd5C\x00\x80\xd6C\x00\x00\xd9C\x00\x00\xdaC\x00\x00\xdcC\x00\x00\xe6C\x00\x00\xe9C\x00\x00\xedC\x00\x80\xf2C\x00\x80\xf7C\x00\x00\xfcC\x00\x80\xfcC\x00@\x01D\x00\x80\x0bD\x00\x80\rD\x00\xc0\x0eD\x00@\x10D\x00\x00\x12D\x00\x00\xc0@\x00\x00\xc0A\x00\x00\xf0A\x00\x00hB\x00\x00\x94B\x00\x00\x1bC\x00\x00.C\x00\x00TC\x00\x00XC\x00\x00ZC\x00\x00]C\x00\x00_C\x00\x00kC\x00\x00oC\x00\x00}C\x00\x00\x81C\x00\x00\x8dC\x00\x80\x8eC\x00\x80\x9fC\x00\x00\xa0C\x00\x00\xa2C\x00\x00\xa5C\x00\x80\xa6C\x00\x80\xb5C\x00\x80\xb6C\x00\x00\xb9C\x00\x80\xc7C\x00\x80\xd2C\x00\x00\xd8C\x00\x00\xe0C\x00\x80\xe2C\x00\x80\xefC\x00\x80\xfaC\x00\x80\x01D\x00\x00\x0fD\x00\x80\x10D\x00@\x14D\x00\xc0\x14D\x00\x80\x15D\x00\xc0\x15D\x00\x00\xa0@\x00\x000A\x00\x00\x08B\x00\x00\xacB\x00\x00\xaeB\x00\x00\xcaB\x00\x00\xccB\x00\x00\x01C\x00\x00\x08C\x00\x00\x0eC\x00\x00\x14C\x00\x000C\x00\x006C\x00\x009C\x00\x00gC\x00\x00yC\x00\x00zC\x00\x80\x8fC\x00\x80\x9eC\x00\x00\xa7C\x00\x80\xafC\x00\x00\xbcC\x00\x80\xc5C\x00\x80\xc6C\x00\x80\xc9C\x00\x80\xcbC\x00\x80\xcdC\x00\x00\xd7C\x00\x80\xebC\x00\x00\xf0C\x00\x00\xf2C\x00\x00\xf6C\x00\x00\xf9C\x00\x00\xfbC\x00@\x05D\x00@\x06D\x00\xc0\x07D\x00\x00\nD\x00\x00\x0cD\x00@\x15D\x00\x00pA\x00\x00\x98A\x00\x00\xc8A\x00\x00\x0cB\x00\x00(B\x00\x00DB\x00\x00tB\x00\x00\x8aB\x00\x00\xa2B\x00\x00\xdcB\x00\x00\xe8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\x04C\x00\x00\x1cC\x00\x00\x1eC\x00\x00\x1fC\x00\x00!C\x00\x00,C\x00\x005C\x00\x00CC\x00\x00IC\x00\x00OC\x00\x00rC\x00\x00uC\x00\x80\x8bC\x00\x00\x92C\x00\x00\x9bC\x00\x80\x9bC\x00\x80\xb2C\x00\x00\xbfC\x00\x80\xd1C\x00\x00\xddC\x00\x00\xe2C\x00\x80\xe4C\x00\x00\xecC\x00\x00\x03D\x00\xc0\x08D\x00\x80\tD\x00\x80\x12D\x00\x00\x00B\x00\x00\x04B\x00\x00PB\x00\x00pB\x00\x00\x8cB\x00\x00\x9aB\x00\x00\x9cB\x00\x00\xb8B\x00\x00\xd8B\x00\x00\xecB\x00\x00\nC\x00\x00\x0bC\x00\x00\x10C\x00\x00\x16C\x00\x00\x18C\x00\x00-C\x00\x004C\x00\x00WC\x00\x00aC\x00\x00dC\x00\x00pC\x00\x00\x85C\x00\x00\x8bC\x00\x00\x9cC\x00\x80\x9cC\x00\x80\xa0C\x00\x00\xaaC\x00\x00\xb2C\x00\x00\xb4C\x00\x80\xc4C\x00\x00\xc7C\x00\x00\xd2C\x00\x00\xd5C\x00\x80\xe0C\x00\x00\xe3C\x00\x80\xeaC\x00\x80\x02D\x00\xc0\x02D\x00@\x04D\x00@\nD\x00\x00\xe0@\x00\x00\x10A\x00\x00\x88A\x00\x00@B\x00\x00TB\x00\x00\x90B\x00\x00\xd0B\x00\x00\xdaB\x00\x00\xeeB\x00\x00&C\x00\x00YC\x00\x00qC\x00\x00|C\x00\x80\x82C\x00\x00\x8eC\x00\x00\x91C\x00\x80\x9aC\x00\x00\xa3C\x00\x80\xa4C\x00\x00\xacC\x00\x00\xafC\x00\x00\xb3C\x00\x00\xb5C\x00\x80\xbbC\x00\x00\xbeC\x00\x00\xc8C\x00\x80\xd8C\x00\x00\xdeC\x00\x00\xe1C\x00\x80\xe3C\x00\x00\xe4C\x00\x80\xedC\x00\x00\xeeC\x00\x80\xf5C\x00\x80\xf8C\x00\x80\x04D\x00\xc0\x05D\x00\xc0\x06D\x00\x80\x0cD\x00\xc0\x0cD\x00\x00@A\x00\x000B\x00\x008B\x00\x00<B\x00\x00LB\x00\x00XB\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xbcB\x00\x00\xd4B\x00\x00\xe4B\x00\x00\xf0B\x00\x00\x0fC\x00\x00%C\x00\x00QC\x00\x00RC\x00\x80\x81C\x00\x80\x8cC\x00\x80\x93C\x00\x00\xa6C\x00\x00\xb8C\x00\x80\xbcC\x00\x80\xc0C\x00\x00\xc3C\x00\x80\xc3C\x00\x80\xd0C\x00\x80\xdbC\x00\x00\xe8C\x00\x80\xe8C\x00\x00\xf4C\x00\x00\xf7C\x00\x80\xf9C\x00\x00\x00D\x00\xc0\x00D\x00\xc0\x03D\x00\x00\x07D\x00@\x07D\x00@\tD\x00\x00\x0eD\x00\x80\x0fD'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp58
(dp59
S'isNumeric'
p60
(dp61
g48
I01
sg56
I01
ssS'trials'
p62
g36
sS'dataTypes'
p63
(lp64
g48
ag56
asS'dataShape'
p65
(lp66
I15
aI40
asbsS'method'
p67
S'fullRandom'
p68
sS'sequenceIndices'
p69
cnumpy.core.multiarray
_reconstruct
p70
(g51
(I0
tS'b'
tRp71
(I1
(I15
I40
tg54
(S'O4'
I0
I1
tRp72
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp73
I7
aI11
aI9
aI4
aI12
aI8
aI14
aI1
aI14
aI7
aI12
aI14
aI12
aI11
aI14
aI12
aI12
aI0
aI2
aI9
aI5
aI6
aI9
aI5
aI12
aI13
aI14
aI7
aI12
aI7
aI13
aI14
aI10
aI8
aI7
aI5
aI14
aI5
aI5
aI6
aI7
aI0
aI5
aI14
aI11
aI2
aI6
aI14
aI6
aI10
aI6
aI13
aI11
aI1
aI4
aI1
aI13
aI2
aI0
aI3
aI1
aI4
aI5
aI5
aI0
aI10
aI14
aI3
aI9
aI8
aI7
aI8
aI7
aI3
aI4
aI5
aI14
aI0
aI8
aI11
aI5
aI13
aI12
aI14
aI5
aI12
aI12
aI2
aI1
aI7
aI12
aI2
aI10
aI7
aI9
aI6
aI11
aI2
aI3
aI10
aI6
aI10
aI14
aI4
aI13
aI14
aI3
aI10
aI7
aI3
aI11
aI1
aI2
aI13
aI14
aI14
aI5
aI7
aI9
aI6
aI0
aI7
aI12
aI13
aI4
aI12
aI8
aI12
aI8
aI12
aI4
aI6
aI7
aI5
aI5
aI12
aI1
aI9
aI5
aI7
aI1
aI1
aI9
aI6
aI9
aI0
aI12
aI2
aI8
aI6
aI9
aI3
aI4
aI10
aI5
aI3
aI10
aI8
aI3
aI0
aI8
aI11
aI10
aI11
aI1
aI5
aI14
aI13
aI4
aI12
aI1
aI6
aI5
aI6
aI3
aI4
aI7
aI14
aI4
aI3
aI7
aI9
aI10
aI3
aI1
aI1
aI1
aI5
aI6
aI14
aI12
aI12
aI10
aI14
aI1
aI12
aI0
aI6
aI14
aI3
aI10
aI2
aI11
aI0
aI0
aI8
aI0
aI11
aI11
aI0
aI9
aI0
aI10
aI5
aI12
aI1
aI11
aI2
aI1
aI13
aI8
aI9
aI5
aI13
aI9
aI13
aI10
aI4
aI1
aI8
aI13
aI2
aI8
aI5
aI14
aI13
aI2
aI10
aI2
aI0
aI9
aI1
aI8
aI14
aI1
aI11
aI4
aI0
aI11
aI3
aI11
aI3
aI6
aI11
aI9
aI10
aI3
aI13
aI7
aI0
aI3
aI12
aI6
aI10
aI1
aI8
aI2
aI10
aI12
aI2
aI13
aI10
aI4
aI9
aI6
aI6
aI7
aI4
aI0
aI0
aI13
aI6
aI0
aI12
aI1
aI2
aI1
aI4
aI4
aI10
aI2
aI11
aI7
aI6
aI13
aI0
aI8
aI6
aI7
aI11
aI2
aI0
aI3
aI7
aI7
aI11
aI10
aI5
aI8
aI11
aI11
aI11
aI0
aI10
aI8
aI0
aI11
aI13
aI8
aI7
aI3
aI1
aI2
aI13
aI7
aI6
aI0
aI0
aI2
aI14
aI11
aI12
aI8
aI4
aI9
aI7
aI5
aI1
aI12
aI8
aI0
aI2
aI4
aI4
aI14
aI4
aI12
aI2
aI3
aI3
aI0
aI6
aI14
aI5
aI9
aI10
aI1
aI13
aI9
aI9
aI13
aI9
aI6
aI14
aI11
aI3
aI7
aI14
aI10
aI12
aI11
aI9
aI4
aI5
aI8
aI3
aI10
aI3
aI11
aI4
aI13
aI9
aI5
aI4
aI6
aI1
aI9
aI1
aI8
aI13
aI6
aI8
aI5
aI8
aI1
aI0
aI14
aI3
aI4
aI0
aI3
aI11
aI4
aI3
aI12
aI2
aI1
aI5
aI0
aI3
aI1
aI1
aI6
aI7
aI3
aI9
aI10
aI0
aI2
aI14
aI11
aI0
aI12
aI3
aI9
aI14
aI13
aI6
aI10
aI2
aI8
aI13
aI0
aI8
aI3
aI13
aI11
aI4
aI7
aI9
aI10
aI8
aI7
aI6
aI2
aI10
aI10
aI11
aI4
aI4
aI11
aI10
aI2
aI0
aI9
aI1
aI3
aI12
aI14
aI2
aI11
aI13
aI7
aI12
aI4
aI3
aI3
aI5
aI5
aI3
aI3
aI13
aI13
aI5
aI3
aI2
aI1
aI8
aI5
aI5
aI14
aI5
aI11
aI4
aI13
aI10
aI10
aI6
aI11
aI2
aI1
aI2
aI8
aI11
aI4
aI6
aI13
aI6
aI9
aI1
aI12
aI6
aI7
aI11
aI1
aI8
aI0
aI14
aI9
aI2
aI7
aI5
aI10
aI4
aI12
aI10
aI10
aI3
aI7
aI10
aI7
aI6
aI5
aI9
aI8
aI2
aI6
aI12
aI8
aI10
aI7
aI2
aI0
aI4
aI9
aI0
aI9
aI7
aI5
aI6
aI12
aI8
aI7
aI13
aI3
aI7
aI10
aI8
aI13
aI9
aI3
aI2
aI2
aI7
aI12
aI1
aI12
aI14
aI4
aI9
aI4
aI2
aI14
aI8
aI9
aI14
aI13
aI13
aI1
aI4
aI8
aI1
aI4
aI14
aI2
aI9
aI4
aI6
aI13
aI5
aI0
aI13
aI13
aI2
aI4
aI6
aI0
aI11
aI8
aI12
aI14
aI9
aI14
aI2
aI11
aI13
aI5
aI6
aI8
aI9
atbsS'finished'
p74
I00
sS'nReps'
p75
I40
sS'nRemaining'
p76
I0
sS'trialList'
p77
(lp78
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
asS'seed'
p79
NsS'thisIndex'
p80
I9
sS'thisN'
p81
I599
sS'thisTrialN'
p82
I14
sS'nTotal'
p83
I600
sS'_warnUseOfNext'
p84
I01
sbasS'saveWideText'
p85
I01
sS'thisEntry'
p86
(dp87
sS'version'
p88
S''
sS'_paramNamesSoFar'
p89
(lp90
sS'entries'
p91
(lp92
(dp93
g16
(lp94
S'd'
asS'.thisTrial'
p95
I7
sS'.thisRepN'
p96
I0
sg30
VF
sg31
g32
sS'.thisTrialN'
p97
I0
sS'.thisN'
p98
I0
sS'.thisIndex'
p99
I7
sg15
(lp100
S'd'
asg17
S'Y'
sg14
I1
sa(dp101
g16
(lp102
S'k'
asg95
I7
sS'.thisRepN'
p103
I0
sg30
VF
sg31
g32
sS'.thisTrialN'
p104
I1
sS'.thisN'
p105
I1
sS'.thisIndex'
p106
I7
sg15
(lp107
S'k'
asg17
S'Y'
sg14
I1
sa(dp108
g16
(lp109
S'k'
asg18
S'N'
sS'.thisRepN'
p110
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p111
I2
sS'.thisN'
p112
I2
sS'.thisIndex'
p113
I5
sg15
(lp114
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp115
g16
(lp116
S'k'
asg18
S'Y'
sS'.thisRepN'
p117
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p118
I3
sS'.thisN'
p119
I3
sS'.thisIndex'
p120
I0
sg15
(lp121
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp122
g16
(lp123
S'k'
asg18
S'Y'
sS'.thisRepN'
p124
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p125
I4
sS'.thisN'
p126
I4
sS'.thisIndex'
p127
I8
sg15
(lp128
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp129
S'space'
p130
asg95
I8
sa(dp131
g16
(lp132
S'd'
asg18
S'N'
sS'.thisRepN'
p133
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p134
I5
sS'.thisN'
p135
I5
sS'.thisIndex'
p136
I10
sg15
(lp137
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp138
g16
(lp139
S'd'
asg18
S'N'
sS'.thisRepN'
p140
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p141
I6
sS'.thisN'
p142
I6
sS'.thisIndex'
p143
I9
sg15
(lp144
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I9
sa(dp145
g16
(lp146
S'k'
asg18
S'N'
sS'.thisRepN'
p147
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p148
I7
sS'.thisN'
p149
I7
sS'.thisIndex'
p150
I13
sg15
(lp151
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I13
sa(dp152
g16
(lp153
S'k'
asg18
S'N'
sS'.thisRepN'
p154
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p155
I8
sS'.thisN'
p156
I8
sS'.thisIndex'
p157
I3
sg15
(lp158
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I3
sa(dp159
g16
(lp160
S'k'
asg18
S'Y'
sS'.thisRepN'
p161
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p162
I9
sS'.thisN'
p163
I9
sS'.thisIndex'
p164
I13
sg15
(lp165
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp166
S'space'
p167
asg95
I13
sa(dp168
g16
(lp169
S'k'
asg18
S'Y'
sS'.thisRepN'
p170
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p171
I10
sS'.thisN'
p172
I10
sS'.thisIndex'
p173
I3
sg15
(lp174
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I3
sa(dp175
g16
(lp176
S'd'
asg18
S'N'
sS'.thisRepN'
p177
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p178
I11
sS'.thisN'
p179
I11
sS'.thisIndex'
p180
I10
sg15
(lp181
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp182
g16
(lp183
S'd'
asg18
S'N'
sS'.thisRepN'
p184
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p185
I12
sS'.thisN'
p186
I12
sS'.thisIndex'
p187
I14
sg15
(lp188
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I14
sa(dp189
g16
(lp190
S'd'
asg18
S'Y'
sS'.thisRepN'
p191
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p192
I13
sS'.thisN'
p193
I13
sS'.thisIndex'
p194
I7
sg15
(lp195
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp196
g16
(lp197
S'k'
asg18
S'N'
sS'.thisRepN'
p198
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p199
I14
sS'.thisN'
p200
I14
sS'.thisIndex'
p201
I4
sg15
(lp202
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp203
g16
(lp204
S'k'
asg18
S'Y'
sS'.thisRepN'
p205
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p206
I0
sS'.thisN'
p207
I15
sS'.thisIndex'
p208
I11
sg15
(lp209
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I11
sa(dp210
g16
(lp211
S'd'
asg18
S'N'
sS'.thisRepN'
p212
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p213
I1
sS'.thisN'
p214
I16
sS'.thisIndex'
p215
I0
sg15
(lp216
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp217
g16
(lp218
S'd'
asg18
S'Y'
sS'.thisRepN'
p219
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p220
I2
sS'.thisN'
p221
I17
sS'.thisIndex'
p222
I13
sg15
(lp223
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I13
sa(dp224
g16
(lp225
S'k'
asg18
S'Y'
sS'.thisRepN'
p226
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p227
I3
sS'.thisN'
p228
I18
sS'.thisIndex'
p229
I7
sg15
(lp230
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp231
g16
(lp232
S'k'
asg18
S'Y'
sS'.thisRepN'
p233
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p234
I4
sS'.thisN'
p235
I19
sS'.thisIndex'
p236
I11
sg15
(lp237
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I11
sa(dp238
g16
(lp239
S'd'
asg18
S'N'
sS'.thisRepN'
p240
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p241
I5
sS'.thisN'
p242
I20
sS'.thisIndex'
p243
I2
sg15
(lp244
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I2
sa(dp245
g16
(lp246
S'd'
asg18
S'N'
sS'.thisRepN'
p247
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p248
I6
sS'.thisN'
p249
I21
sS'.thisIndex'
p250
I1
sg15
(lp251
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I1
sa(dp252
g16
(lp253
S'k'
asg18
S'Y'
sS'.thisRepN'
p254
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p255
I7
sS'.thisN'
p256
I22
sS'.thisIndex'
p257
I6
sg15
(lp258
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp259
S'space'
p260
asg95
I6
sa(dp261
g16
(lp262
S'd'
asg18
S'N'
sS'.thisRepN'
p263
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p264
I8
sS'.thisN'
p265
I23
sS'.thisIndex'
p266
I1
sg15
(lp267
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I1
sa(dp268
g16
(lp269
S'k'
asg18
S'Y'
sS'.thisRepN'
p270
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p271
I9
sS'.thisN'
p272
I24
sS'.thisIndex'
p273
I9
sg15
(lp274
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I9
sa(dp275
g16
(lp276
S'k'
asg18
S'Y'
sS'.thisRepN'
p277
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p278
I10
sS'.thisN'
p279
I25
sS'.thisIndex'
p280
I11
sg15
(lp281
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp282
S'space'
p283
asg95
I11
sa(dp284
g16
(lp285
S'k'
asg18
S'N'
sS'.thisRepN'
p286
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p287
I11
sS'.thisN'
p288
I26
sS'.thisIndex'
p289
I8
sg15
(lp290
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I8
sa(dp291
g16
(lp292
S'd'
asg18
S'Y'
sS'.thisRepN'
p293
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p294
I12
sS'.thisN'
p295
I27
sS'.thisIndex'
p296
I5
sg15
(lp297
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp298
g16
(lp299
S'd'
asg18
S'Y'
sS'.thisRepN'
p300
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p301
I13
sS'.thisN'
p302
I28
sS'.thisIndex'
p303
I6
sg15
(lp304
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I6
sa(dp305
g16
(lp306
S'd'
asg18
S'Y'
sS'.thisRepN'
p307
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p308
I14
sS'.thisN'
p309
I29
sS'.thisIndex'
p310
I2
sg15
(lp311
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I2
sa(dp312
g16
(lp313
S'd'
asg18
S'N'
sS'.thisRepN'
p314
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p315
I0
sS'.thisN'
p316
I30
sS'.thisIndex'
p317
I9
sg15
(lp318
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp319
S'space'
p320
asg95
I9
sa(dp321
g16
(lp322
S'd'
asg18
S'Y'
sS'.thisRepN'
p323
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p324
I1
sS'.thisN'
p325
I31
sS'.thisIndex'
p326
I5
sg15
(lp327
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp328
g16
(lp329
S'd'
asg18
S'N'
sS'.thisRepN'
p330
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p331
I2
sS'.thisN'
p332
I32
sS'.thisIndex'
p333
I12
sg15
(lp334
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I12
sa(dp335
g16
(lp336
S'd'
asg18
S'N'
sS'.thisRepN'
p337
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p338
I3
sS'.thisN'
p339
I33
sS'.thisIndex'
p340
I12
sg15
(lp341
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp342
S'space'
p343
asg95
I12
sa(dp344
g16
(lp345
S'd'
asg18
S'Y'
sS'.thisRepN'
p346
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p347
I4
sS'.thisN'
p348
I34
sS'.thisIndex'
p349
I10
sg15
(lp350
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I10
sa(dp351
g16
(lp352
S'k'
asg18
S'N'
sS'.thisRepN'
p353
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p354
I5
sS'.thisN'
p355
I35
sS'.thisIndex'
p356
I11
sg15
(lp357
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I11
sa(dp358
g16
(lp359
S'd'
asg18
S'N'
sS'.thisRepN'
p360
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p361
I6
sS'.thisN'
p362
I36
sS'.thisIndex'
p363
I8
sg15
(lp364
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I8
sa(dp365
g16
(lp366
S'k'
asg18
S'N'
sS'.thisRepN'
p367
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p368
I7
sS'.thisN'
p369
I37
sS'.thisIndex'
p370
I0
sg15
(lp371
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I0
sa(dp372
g16
(lp373
S'k'
asg18
S'N'
sS'.thisRepN'
p374
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p375
I8
sS'.thisN'
p376
I38
sS'.thisIndex'
p377
I2
sg15
(lp378
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I2
sa(dp379
g16
(lp380
S'd'
asg18
S'Y'
sS'.thisRepN'
p381
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p382
I9
sS'.thisN'
p383
I39
sS'.thisIndex'
p384
I6
sg15
(lp385
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I6
sa(dp386
g16
(lp387
S'd'
asg18
S'Y'
sS'.thisRepN'
p388
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p389
I10
sS'.thisN'
p390
I40
sS'.thisIndex'
p391
I4
sg15
(lp392
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp393
S'space'
p394
asg95
I4
sa(dp395
g16
(lp396
S'd'
asg18
S'Y'
sS'.thisRepN'
p397
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p398
I11
sS'.thisN'
p399
I41
sS'.thisIndex'
p400
I7
sg15
(lp401
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp402
g16
(lp403
S'k'
asg18
S'Y'
sS'.thisRepN'
p404
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p405
I12
sS'.thisN'
p406
I42
sS'.thisIndex'
p407
I11
sg15
(lp408
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I11
sa(dp409
g16
(lp410
S'k'
asg18
S'Y'
sS'.thisRepN'
p411
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p412
I13
sS'.thisN'
p413
I43
sS'.thisIndex'
p414
I5
sg15
(lp415
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I5
sa(dp416
g16
(lp417
S'k'
asg18
S'N'
sS'.thisRepN'
p418
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p419
I14
sS'.thisN'
p420
I44
sS'.thisIndex'
p421
I14
sg15
(lp422
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp423
S'space'
p424
asg95
I14
sa(dp425
g16
(lp426
S'k'
asg18
S'N'
sS'.thisRepN'
p427
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p428
I0
sS'.thisN'
p429
I45
sS'.thisIndex'
p430
I4
sg15
(lp431
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I4
sa(dp432
g16
(lp433
S'k'
asg18
S'Y'
sS'.thisRepN'
p434
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p435
I1
sS'.thisN'
p436
I46
sS'.thisIndex'
p437
I14
sg15
(lp438
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I14
sa(dp439
g16
(lp440
S'k'
asg18
S'Y'
sS'.thisRepN'
p441
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p442
I2
sS'.thisN'
p443
I47
sS'.thisIndex'
p444
I14
sg15
(lp445
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I14
sa(dp446
g16
(lp447
S'd'
asg18
S'N'
sS'.thisRepN'
p448
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p449
I3
sS'.thisN'
p450
I48
sS'.thisIndex'
p451
I13
sg15
(lp452
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I13
sa(dp453
g16
(lp454
S'k'
asg18
S'Y'
sg22
I26
sS'.thisN'
p455
I49
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p456
I4
sS'.thisRepN'
p457
I3
sg21
I44
sS'.thisIndex'
p458
I11
sg23
I25
sg15
(lp459
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp460
S'space'
p461
asg95
I11
sa(dp462
g16
(lp463
S'k'
asg95
I0
sS'.thisRepN'
p464
I3
sg30
VF
sg31
g32
sS'.thisTrialN'
p465
I5
sS'.thisN'
p466
I50
sS'.thisIndex'
p467
I0
sg15
(lp468
S'k'
asg17
S'Y'
sg14
I2
sa(dp469
g16
(lp470
S'd'
asg95
I14
sS'.thisRepN'
p471
I3
sg30
VF
sg31
g32
sS'.thisTrialN'
p472
I6
sS'.thisN'
p473
I51
sS'.thisIndex'
p474
I14
sg15
(lp475
S'k'
asg17
S'N'
sg14
I2
sa(dp476
g16
(lp477
S'k'
asg18
S'N'
sS'.thisRepN'
p478
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p479
I7
sS'.thisN'
p480
I52
sS'.thisIndex'
p481
I12
sg15
(lp482
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I12
sa(dp483
g16
(lp484
S'd'
asg18
S'Y'
sS'.thisRepN'
p485
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p486
I8
sS'.thisN'
p487
I53
sS'.thisIndex'
p488
I13
sg15
(lp489
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp490
S'space'
p491
asg95
I13
sa(dp492
g16
(lp493
S'k'
asg18
S'N'
sS'.thisRepN'
p494
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p495
I9
sS'.thisN'
p496
I54
sS'.thisIndex'
p497
I14
sg15
(lp498
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I14
sa(dp499
g16
(lp500
S'd'
asg18
S'N'
sS'.thisRepN'
p501
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p502
I10
sS'.thisN'
p503
I55
sS'.thisIndex'
p504
I3
sg15
(lp505
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp506
g16
(lp507
S'k'
asg18
S'N'
sS'.thisRepN'
p508
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p509
I11
sS'.thisN'
p510
I56
sS'.thisIndex'
p511
I6
sg15
(lp512
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I6
sa(dp513
g16
(lp514
S'k'
asg18
S'N'
sS'.thisRepN'
p515
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p516
I12
sS'.thisN'
p517
I57
sS'.thisIndex'
p518
I4
sg15
(lp519
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp520
g16
(lp521
S'd'
asg18
S'Y'
sS'.thisRepN'
p522
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p523
I13
sS'.thisN'
p524
I58
sS'.thisIndex'
p525
I9
sg15
(lp526
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp527
S'space'
p528
asg95
I9
sa(dp529
g16
(lp530
S'k'
asg18
S'Y'
sS'.thisRepN'
p531
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p532
I14
sS'.thisN'
p533
I59
sS'.thisIndex'
p534
I8
sg15
(lp535
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp536
S'space'
p537
asg95
I8
sa(dp538
g16
(lp539
S'd'
asg18
S'N'
sS'.thisRepN'
p540
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p541
I0
sS'.thisN'
p542
I60
sS'.thisIndex'
p543
I12
sg15
(lp544
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I12
sa(dp545
g16
(lp546
S'k'
asg18
S'N'
sS'.thisRepN'
p547
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p548
I1
sS'.thisN'
p549
I61
sS'.thisIndex'
p550
I11
sg15
(lp551
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I11
sa(dp552
g16
(lp553
S'k'
asg18
S'N'
sS'.thisRepN'
p554
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p555
I2
sS'.thisN'
p556
I62
sS'.thisIndex'
p557
I5
sg15
(lp558
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp559
g16
(lp560
S'k'
asg18
S'N'
sS'.thisRepN'
p561
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p562
I3
sS'.thisN'
p563
I63
sS'.thisIndex'
p564
I4
sg15
(lp565
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp566
g16
(lp567
S'k'
asg18
S'N'
sS'.thisRepN'
p568
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p569
I4
sS'.thisN'
p570
I64
sS'.thisIndex'
p571
I1
sg15
(lp572
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp573
g16
(lp574
S'k'
asg18
S'N'
sS'.thisRepN'
p575
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p576
I5
sS'.thisN'
p577
I65
sS'.thisIndex'
p578
I0
sg15
(lp579
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I0
sa(dp580
g16
(lp581
S'd'
asg18
S'N'
sS'.thisRepN'
p582
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p583
I6
sS'.thisN'
p584
I66
sS'.thisIndex'
p585
I1
sg15
(lp586
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp587
S'space'
p588
asg95
I1
sa(dp589
g16
(lp590
S'd'
asg18
S'N'
sS'.thisRepN'
p591
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p592
I7
sS'.thisN'
p593
I67
sS'.thisIndex'
p594
I1
sg15
(lp595
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp596
g16
(lp597
S'k'
asg18
S'Y'
sS'.thisRepN'
p598
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p599
I8
sS'.thisN'
p600
I68
sS'.thisIndex'
p601
I7
sg15
(lp602
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp603
g16
(lp604
S'd'
asg18
S'N'
sS'.thisRepN'
p605
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p606
I9
sS'.thisN'
p607
I69
sS'.thisIndex'
p608
I11
sg15
(lp609
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I11
sa(dp610
g16
(lp611
S'k'
asg18
S'Y'
sS'.thisRepN'
p612
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p613
I10
sS'.thisN'
p614
I70
sS'.thisIndex'
p615
I12
sg15
(lp616
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I12
sa(dp617
g16
(lp618
S'k'
asg18
S'N'
sS'.thisRepN'
p619
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p620
I11
sS'.thisN'
p621
I71
sS'.thisIndex'
p622
I2
sg15
(lp623
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I2
sa(dp624
g16
(lp625
S'd'
asg18
S'N'
sS'.thisRepN'
p626
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p627
I12
sS'.thisN'
p628
I72
sS'.thisIndex'
p629
I13
sg15
(lp630
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I13
sa(dp631
g16
(lp632
S'd'
asg18
S'Y'
sS'.thisRepN'
p633
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p634
I13
sS'.thisN'
p635
I73
sS'.thisIndex'
p636
I8
sg15
(lp637
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp638
S'space'
p639
asg95
I8
sa(dp640
g16
(lp641
S'd'
asg18
S'Y'
sS'.thisRepN'
p642
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p643
I14
sS'.thisN'
p644
I74
sS'.thisIndex'
p645
I9
sg15
(lp646
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp647
S'space'
p648
asg95
I9
sa(dp649
g16
(lp650
S'd'
asg18
S'Y'
sS'.thisRepN'
p651
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p652
I0
sS'.thisN'
p653
I75
sS'.thisIndex'
p654
I8
sg15
(lp655
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp656
S'space'
p657
asg95
I8
sa(dp658
g16
(lp659
S'k'
asg18
S'N'
sS'.thisRepN'
p660
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p661
I1
sS'.thisN'
p662
I76
sS'.thisIndex'
p663
I2
sg15
(lp664
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I2
sa(dp665
g16
(lp666
S'k'
asg18
S'Y'
sS'.thisRepN'
p667
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p668
I2
sS'.thisN'
p669
I77
sS'.thisIndex'
p670
I12
sg15
(lp671
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp672
S'space'
p673
asg95
I12
sa(dp674
g16
(lp675
S'k'
asg18
S'N'
sS'.thisRepN'
p676
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p677
I3
sS'.thisN'
p678
I78
sS'.thisIndex'
p679
I12
sg15
(lp680
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I12
sa(dp681
g16
(lp682
S'k'
asg18
S'Y'
sS'.thisRepN'
p683
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p684
I4
sS'.thisN'
p685
I79
sS'.thisIndex'
p686
I5
sg15
(lp687
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp688
S'space'
p689
asg95
I5
sa(dp690
g16
(lp691
S'k'
asg18
S'N'
sS'.thisRepN'
p692
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p693
I5
sS'.thisN'
p694
I80
sS'.thisIndex'
p695
I8
sg15
(lp696
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp697
g16
(lp698
S'd'
asg18
S'Y'
sS'.thisRepN'
p699
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p700
I6
sS'.thisN'
p701
I81
sS'.thisIndex'
p702
I11
sg15
(lp703
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp704
S'space'
p705
asg95
I11
sa(dp706
g16
(lp707
S'k'
asg18
S'Y'
sS'.thisRepN'
p708
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p709
I7
sS'.thisN'
p710
I82
sS'.thisIndex'
p711
I2
sg15
(lp712
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp713
S'space'
p714
asg95
I2
sa(dp715
g16
(lp716
S'd'
asg18
S'N'
sS'.thisRepN'
p717
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p718
I8
sS'.thisN'
p719
I83
sS'.thisIndex'
p720
I6
sg15
(lp721
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I6
sa(dp722
g16
(lp723
S'k'
asg18
S'N'
sS'.thisRepN'
p724
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p725
I9
sS'.thisN'
p726
I84
sS'.thisIndex'
p727
I3
sg15
(lp728
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp729
g16
(lp730
S'd'
asg18
S'Y'
sS'.thisRepN'
p731
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p732
I10
sS'.thisN'
p733
I85
sS'.thisIndex'
p734
I2
sg15
(lp735
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp736
S'space'
p737
asg95
I2
sa(dp738
g16
(lp739
S'k'
asg18
S'N'
sS'.thisRepN'
p740
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p741
I11
sS'.thisN'
p742
I86
sS'.thisIndex'
p743
I10
sg15
(lp744
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp745
g16
(lp746
S'd'
asg18
S'N'
sS'.thisRepN'
p747
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p748
I12
sS'.thisN'
p749
I87
sS'.thisIndex'
p750
I10
sg15
(lp751
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I10
sa(dp752
g16
(lp753
S'd'
asg18
S'N'
sS'.thisRepN'
p754
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p755
I13
sS'.thisN'
p756
I88
sS'.thisIndex'
p757
I2
sg15
(lp758
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I2
sa(dp759
g16
(lp760
S'd'
asg18
S'N'
sS'.thisRepN'
p761
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p762
I14
sS'.thisN'
p763
I89
sS'.thisIndex'
p764
I14
sg15
(lp765
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I14
sa(dp766
g16
(lp767
S'd'
asg18
S'Y'
sS'.thisRepN'
p768
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p769
I0
sS'.thisN'
p770
I90
sS'.thisIndex'
p771
I14
sg15
(lp772
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp773
S'space'
p774
asg95
I14
sa(dp775
g16
(lp776
S'd'
asg18
S'N'
sS'.thisRepN'
p777
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p778
I1
sS'.thisN'
p779
I91
sS'.thisIndex'
p780
I6
sg15
(lp781
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I6
sa(dp782
g16
(lp783
S'k'
asg18
S'Y'
sS'.thisRepN'
p784
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p785
I2
sS'.thisN'
p786
I92
sS'.thisIndex'
p787
I12
sg15
(lp788
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp789
S'space'
p790
asg95
I12
sa(dp791
g16
(lp792
S'd'
asg18
S'N'
sS'.thisRepN'
p793
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p794
I3
sS'.thisN'
p795
I93
sS'.thisIndex'
p796
I8
sg15
(lp797
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I8
sa(dp798
g16
(lp799
S'd'
asg18
S'N'
sS'.thisRepN'
p800
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p801
I4
sS'.thisN'
p802
I94
sS'.thisIndex'
p803
I14
sg15
(lp804
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I14
sa(dp805
g16
(lp806
S'k'
asg18
S'Y'
sS'.thisRepN'
p807
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p808
I5
sS'.thisN'
p809
I95
sS'.thisIndex'
p810
I0
sg15
(lp811
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp812
S'space'
p813
asg95
I0
sa(dp814
g16
(lp815
S'd'
asg18
S'Y'
sS'.thisRepN'
p816
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p817
I6
sS'.thisN'
p818
I96
sS'.thisIndex'
p819
I4
sg15
(lp820
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I4
sa(dp821
g16
(lp822
S'd'
asg18
S'Y'
sS'.thisRepN'
p823
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p824
I7
sS'.thisN'
p825
I97
sS'.thisIndex'
p826
I1
sg15
(lp827
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp828
g16
(lp829
S'k'
asg18
S'Y'
sS'.thisRepN'
p830
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p831
I8
sS'.thisN'
p832
I98
sS'.thisIndex'
p833
I0
sg15
(lp834
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp835
S'space'
p836
asg95
I0
sa(dp837
g16
(lp838
S'd'
asg18
S'N'
sg22
I43
sS'.thisN'
p839
I99
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p840
I9
sS'.thisRepN'
p841
I6
sg21
I44
sS'.thisIndex'
p842
I7
sg23
I19
sg15
(lp843
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I7
sa(dp844
g16
(lp845
S'k'
asg95
I1
sS'.thisRepN'
p846
I6
sg30
VF
sg31
g32
sS'.thisTrialN'
p847
I10
sS'.thisN'
p848
I100
sS'.thisIndex'
p849
I1
sg15
(lp850
S'd'
asg17
S'N'
sg14
I3
sa(dp851
g16
(lp852
S'd'
asg95
I10
sS'.thisRepN'
p853
I6
sg30
VF
sg31
g32
sS'.thisTrialN'
p854
I11
sS'.thisN'
p855
I101
sS'.thisIndex'
p856
I10
sg15
(lp857
S'd'
asg17
S'Y'
sg14
I3
sa(dp858
g16
(lp859
S'd'
asg18
S'N'
sS'.thisRepN'
p860
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p861
I12
sS'.thisN'
p862
I102
sS'.thisIndex'
p863
I10
sg15
(lp864
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp865
S'space'
p866
asg95
I10
sa(dp867
g16
(lp868
S'k'
asg18
S'Y'
sS'.thisRepN'
p869
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p870
I13
sS'.thisN'
p871
I103
sS'.thisIndex'
p872
I6
sg15
(lp873
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp874
g16
(lp875
S'k'
asg18
S'N'
sS'.thisRepN'
p876
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p877
I14
sS'.thisN'
p878
I104
sS'.thisIndex'
p879
I13
sg15
(lp880
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I13
sa(dp881
g16
(lp882
S'k'
asg18
S'Y'
sS'.thisRepN'
p883
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p884
I0
sS'.thisN'
p885
I105
sS'.thisIndex'
p886
I1
sg15
(lp887
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp888
S'space'
p889
asg95
I1
sa(dp890
g16
(lp891
S'd'
asg18
S'Y'
sS'.thisRepN'
p892
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p893
I1
sS'.thisN'
p894
I106
sS'.thisIndex'
p895
I14
sg15
(lp896
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp897
S'space'
p898
asg95
I14
sa(dp899
g16
(lp900
S'd'
asg18
S'Y'
sS'.thisRepN'
p901
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p902
I2
sS'.thisN'
p903
I107
sS'.thisIndex'
p904
I2
sg15
(lp905
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp906
g16
(lp907
S'k'
asg18
S'Y'
sS'.thisRepN'
p908
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p909
I3
sS'.thisN'
p910
I108
sS'.thisIndex'
p911
I12
sg15
(lp912
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp913
S'space'
p914
asg95
I12
sa(dp915
g16
(lp916
S'd'
asg18
S'Y'
sS'.thisRepN'
p917
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p918
I4
sS'.thisN'
p919
I109
sS'.thisIndex'
p920
I13
sg15
(lp921
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp922
S'space'
p923
asg95
I13
sa(dp924
g16
(lp925
S'k'
asg18
S'N'
sS'.thisRepN'
p926
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p927
I5
sS'.thisN'
p928
I110
sS'.thisIndex'
p929
I11
sg15
(lp930
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I11
sa(dp931
g16
(lp932
S'd'
asg18
S'N'
sS'.thisRepN'
p933
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p934
I6
sS'.thisN'
p935
I111
sS'.thisIndex'
p936
I0
sg15
(lp937
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp938
g16
(lp939
S'k'
asg18
S'N'
sS'.thisRepN'
p940
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p941
I7
sS'.thisN'
p942
I112
sS'.thisIndex'
p943
I4
sg15
(lp944
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I4
sa(dp945
g16
(lp946
S'k'
asg18
S'N'
sS'.thisRepN'
p947
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p948
I8
sS'.thisN'
p949
I113
sS'.thisIndex'
p950
I0
sg15
(lp951
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp952
g16
(lp953
S'k'
asg18
S'N'
sS'.thisRepN'
p954
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p955
I9
sS'.thisN'
p956
I114
sS'.thisIndex'
p957
I14
sg15
(lp958
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I14
sa(dp959
g16
(lp960
S'd'
asg18
S'N'
sS'.thisRepN'
p961
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p962
I10
sS'.thisN'
p963
I115
sS'.thisIndex'
p964
I5
sg15
(lp965
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I5
sa(dp966
g16
(lp967
S'd'
asg18
S'Y'
sS'.thisRepN'
p968
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p969
I11
sS'.thisN'
p970
I116
sS'.thisIndex'
p971
I11
sg15
(lp972
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp973
S'space'
p974
asg95
I11
sa(dp975
g16
(lp976
S'd'
asg18
S'Y'
sS'.thisRepN'
p977
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p978
I12
sS'.thisN'
p979
I117
sS'.thisIndex'
p980
I6
sg15
(lp981
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I6
sa(dp982
g16
(lp983
S'd'
asg18
S'N'
sS'.thisRepN'
p984
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p985
I13
sS'.thisN'
p986
I118
sS'.thisIndex'
p987
I12
sg15
(lp988
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I12
sa(dp989
g16
(lp990
S'd'
asg18
S'Y'
sS'.thisRepN'
p991
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p992
I14
sS'.thisN'
p993
I119
sS'.thisIndex'
p994
I13
sg15
(lp995
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I13
sa(dp996
g16
(lp997
S'd'
asg18
S'N'
sS'.thisRepN'
p998
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p999
I0
sS'.thisN'
p1000
I120
sS'.thisIndex'
p1001
I14
sg15
(lp1002
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I14
sa(dp1003
g16
(lp1004
S'd'
asg18
S'N'
sS'.thisRepN'
p1005
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1006
I1
sS'.thisN'
p1007
I121
sS'.thisIndex'
p1008
I6
sg15
(lp1009
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I6
sa(dp1010
g16
(lp1011
S'k'
asg18
S'Y'
sS'.thisRepN'
p1012
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1013
I2
sS'.thisN'
p1014
I122
sS'.thisIndex'
p1015
I1
sg15
(lp1016
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1017
S'space'
p1018
asg95
I1
sa(dp1019
g16
(lp1020
S'k'
asg18
S'Y'
sS'.thisRepN'
p1021
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1022
I3
sS'.thisN'
p1023
I123
sS'.thisIndex'
p1024
I8
sg15
(lp1025
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1026
S'space'
p1027
asg95
I8
sa(dp1028
g16
(lp1029
S'k'
asg18
S'N'
sS'.thisRepN'
p1030
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1031
I4
sS'.thisN'
p1032
I124
sS'.thisIndex'
p1033
I4
sg15
(lp1034
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I4
sa(dp1035
g16
(lp1036
S'k'
asg18
S'N'
sS'.thisRepN'
p1037
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1038
I5
sS'.thisN'
p1039
I125
sS'.thisIndex'
p1040
I11
sg15
(lp1041
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I11
sa(dp1042
g16
(lp1043
S'd'
asg18
S'N'
sS'.thisRepN'
p1044
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1045
I6
sS'.thisN'
p1046
I126
sS'.thisIndex'
p1047
I11
sg15
(lp1048
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I11
sa(dp1049
g16
(lp1050
S'd'
asg18
S'N'
sS'.thisRepN'
p1051
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1052
I7
sS'.thisN'
p1053
I127
sS'.thisIndex'
p1054
I4
sg15
(lp1055
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I4
sa(dp1056
g16
(lp1057
S'd'
asg18
S'N'
sS'.thisRepN'
p1058
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1059
I8
sS'.thisN'
p1060
I128
sS'.thisIndex'
p1061
I2
sg15
(lp1062
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp1063
g16
(lp1064
S'd'
asg18
S'Y'
sS'.thisRepN'
p1065
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1066
I9
sS'.thisN'
p1067
I129
sS'.thisIndex'
p1068
I10
sg15
(lp1069
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1070
S'space'
p1071
asg95
I10
sa(dp1072
g16
(lp1073
S'k'
asg18
S'N'
sS'.thisRepN'
p1074
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1075
I10
sS'.thisN'
p1076
I130
sS'.thisIndex'
p1077
I0
sg15
(lp1078
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I0
sa(dp1079
g16
(lp1080
S'd'
asg18
S'Y'
sS'.thisRepN'
p1081
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1082
I11
sS'.thisN'
p1083
I131
sS'.thisIndex'
p1084
I4
sg15
(lp1085
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1086
S'space'
p1087
asg95
I4
sa(dp1088
g16
(lp1089
S'k'
asg18
S'N'
sS'.thisRepN'
p1090
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1091
I12
sS'.thisN'
p1092
I132
sS'.thisIndex'
p1093
I11
sg15
(lp1094
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I11
sa(dp1095
g16
(lp1096
S'd'
asg18
S'Y'
sS'.thisRepN'
p1097
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1098
I13
sS'.thisN'
p1099
I133
sS'.thisIndex'
p1100
I8
sg15
(lp1101
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp1102
g16
(lp1103
S'k'
asg18
S'Y'
sS'.thisRepN'
p1104
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1105
I14
sS'.thisN'
p1106
I134
sS'.thisIndex'
p1107
I1
sg15
(lp1108
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp1109
g16
(lp1110
S'k'
asg18
S'Y'
sS'.thisRepN'
p1111
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1112
I0
sS'.thisN'
p1113
I135
sS'.thisIndex'
p1114
I7
sg15
(lp1115
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1116
S'space'
p1117
asg95
I7
sa(dp1118
g16
(lp1119
S'k'
asg18
S'N'
sS'.thisRepN'
p1120
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1121
I1
sS'.thisN'
p1122
I136
sS'.thisIndex'
p1123
I10
sg15
(lp1124
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1125
g16
(lp1126
S'k'
asg18
S'N'
sS'.thisRepN'
p1127
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1128
I2
sS'.thisN'
p1129
I137
sS'.thisIndex'
p1130
I7
sg15
(lp1131
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I7
sa(dp1132
g16
(lp1133
S'd'
asg18
S'Y'
sS'.thisRepN'
p1134
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1135
I3
sS'.thisN'
p1136
I138
sS'.thisIndex'
p1137
I12
sg15
(lp1138
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I12
sa(dp1139
g16
(lp1140
S'k'
asg18
S'N'
sS'.thisRepN'
p1141
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1142
I4
sS'.thisN'
p1143
I139
sS'.thisIndex'
p1144
I12
sg15
(lp1145
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I12
sa(dp1146
g16
(lp1147
S'd'
asg18
S'N'
sS'.thisRepN'
p1148
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1149
I5
sS'.thisN'
p1150
I140
sS'.thisIndex'
p1151
I0
sg15
(lp1152
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I0
sa(dp1153
g16
(lp1154
S'd'
asg18
S'N'
sS'.thisRepN'
p1155
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1156
I6
sS'.thisN'
p1157
I141
sS'.thisIndex'
p1158
I3
sg15
(lp1159
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I3
sa(dp1160
g16
(lp1161
S'd'
asg18
S'N'
sS'.thisRepN'
p1162
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1163
I7
sS'.thisN'
p1164
I142
sS'.thisIndex'
p1165
I10
sg15
(lp1166
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I10
sa(dp1167
g16
(lp1168
S'd'
asg18
S'Y'
sS'.thisRepN'
p1169
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1170
I8
sS'.thisN'
p1171
I143
sS'.thisIndex'
p1172
I14
sg15
(lp1173
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I14
sa(dp1174
g16
(lp1175
S'd'
asg18
S'Y'
sS'.thisRepN'
p1176
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1177
I9
sS'.thisN'
p1178
I144
sS'.thisIndex'
p1179
I12
sg15
(lp1180
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I12
sa(dp1181
g16
(lp1182
S'k'
asg18
S'N'
sS'.thisRepN'
p1183
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1184
I10
sS'.thisN'
p1185
I145
sS'.thisIndex'
p1186
I3
sg15
(lp1187
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp1188
g16
(lp1189
S'd'
asg18
S'N'
sS'.thisRepN'
p1190
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1191
I11
sS'.thisN'
p1192
I146
sS'.thisIndex'
p1193
I4
sg15
(lp1194
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I4
sa(dp1195
g16
(lp1196
S'k'
asg18
S'N'
sS'.thisRepN'
p1197
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1198
I12
sS'.thisN'
p1199
I147
sS'.thisIndex'
p1200
I2
sg15
(lp1201
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp1202
g16
(lp1203
S'd'
asg18
S'N'
sS'.thisRepN'
p1204
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1205
I13
sS'.thisN'
p1206
I148
sS'.thisIndex'
p1207
I10
sg15
(lp1208
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1209
g16
(lp1210
S'd'
asg18
S'N'
sg22
I38
sS'.thisN'
p1211
I149
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1212
I14
sS'.thisRepN'
p1213
I9
sg21
I40
sS'.thisIndex'
p1214
I4
sg23
I19
sg15
(lp1215
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I4
sa(dp1216
g16
(lp1217
S'd'
asg95
I12
sS'.thisRepN'
p1218
I10
sg30
VF
sg31
g32
sS'.thisTrialN'
p1219
I0
sS'.thisN'
p1220
I150
sS'.thisIndex'
p1221
I12
sg15
(lp1222
S'd'
asg17
S'Y'
sg14
I4
sa(dp1223
g16
(lp1224
S'k'
asg95
I6
sS'.thisRepN'
p1225
I10
sg30
VF
sg31
g32
sS'.thisTrialN'
p1226
I1
sS'.thisN'
p1227
I151
sS'.thisIndex'
p1228
I6
sg15
(lp1229
S'k'
asg17
S'Y'
sg14
I4
sa(dp1230
g16
(lp1231
S'k'
asg18
S'N'
sS'.thisRepN'
p1232
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1233
I2
sS'.thisN'
p1234
I152
sS'.thisIndex'
p1235
I12
sg15
(lp1236
S'd'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I12
sa(dp1237
g16
(lp1238
S'k'
asg18
S'N'
sS'.thisRepN'
p1239
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1240
I3
sS'.thisN'
p1241
I153
sS'.thisIndex'
p1242
I4
sg15
(lp1243
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1244
g16
(lp1245
S'd'
asg18
S'Y'
sS'.thisRepN'
p1246
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1247
I4
sS'.thisN'
p1248
I154
sS'.thisIndex'
p1249
I1
sg15
(lp1250
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1251
S'space'
p1252
asg95
I1
sa(dp1253
g16
(lp1254
S'k'
asg18
S'Y'
sS'.thisRepN'
p1255
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1256
I5
sS'.thisN'
p1257
I155
sS'.thisIndex'
p1258
I9
sg15
(lp1259
S'd'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1260
S'space'
p1261
asg95
I9
sa(dp1262
g16
(lp1263
S'd'
asg18
S'N'
sS'.thisRepN'
p1264
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1265
I6
sS'.thisN'
p1266
I156
sS'.thisIndex'
p1267
I11
sg15
(lp1268
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I11
sa(dp1269
g16
(lp1270
S'd'
asg18
S'Y'
sS'.thisRepN'
p1271
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1272
I7
sS'.thisN'
p1273
I157
sS'.thisIndex'
p1274
I2
sg15
(lp1275
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1276
S'space'
p1277
asg95
I2
sa(dp1278
g16
(lp1279
S'd'
asg18
S'N'
sS'.thisRepN'
p1280
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1281
I8
sS'.thisN'
p1282
I158
sS'.thisIndex'
p1283
I11
sg15
(lp1284
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I11
sa(dp1285
g16
(lp1286
S'k'
asg18
S'N'
sS'.thisRepN'
p1287
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1288
I9
sS'.thisN'
p1289
I159
sS'.thisIndex'
p1290
I11
sg15
(lp1291
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I11
sa(dp1292
g16
(lp1293
S'd'
asg18
S'Y'
sS'.thisRepN'
p1294
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1295
I10
sS'.thisN'
p1296
I160
sS'.thisIndex'
p1297
I1
sg15
(lp1298
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1299
S'space'
p1300
asg95
I1
sa(dp1301
g16
(lp1302
S'k'
asg18
S'N'
sS'.thisRepN'
p1303
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1304
I11
sS'.thisN'
p1305
I161
sS'.thisIndex'
p1306
I11
sg15
(lp1307
S'd'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I11
sa(dp1308
g16
(lp1309
S'd'
asg18
S'Y'
sS'.thisRepN'
p1310
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1311
I12
sS'.thisN'
p1312
I162
sS'.thisIndex'
p1313
I1
sg15
(lp1314
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I1
sa(dp1315
g16
(lp1316
S'd'
asg18
S'Y'
sS'.thisRepN'
p1317
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1318
I13
sS'.thisN'
p1319
I163
sS'.thisIndex'
p1320
I7
sg15
(lp1321
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1322
g16
(lp1323
S'd'
asg18
S'N'
sS'.thisRepN'
p1324
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1325
I14
sS'.thisN'
p1326
I164
sS'.thisIndex'
p1327
I8
sg15
(lp1328
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1329
g16
(lp1330
S'd'
asg18
S'Y'
sS'.thisRepN'
p1331
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1332
I0
sS'.thisN'
p1333
I165
sS'.thisIndex'
p1334
I14
sg15
(lp1335
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I14
sa(dp1336
g16
(lp1337
S'd'
asg18
S'Y'
sS'.thisRepN'
p1338
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1339
I1
sS'.thisN'
p1340
I166
sS'.thisIndex'
p1341
I13
sg15
(lp1342
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I13
sa(dp1343
g16
(lp1344
S'k'
asg18
S'Y'
sS'.thisRepN'
p1345
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1346
I2
sS'.thisN'
p1347
I167
sS'.thisIndex'
p1348
I2
sg15
(lp1349
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I2
sa(dp1350
g16
(lp1351
S'k'
asg18
S'Y'
sS'.thisRepN'
p1352
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1353
I3
sS'.thisN'
p1354
I168
sS'.thisIndex'
p1355
I6
sg15
(lp1356
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1357
g16
(lp1358
S'k'
asg18
S'Y'
sS'.thisRepN'
p1359
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1360
I4
sS'.thisN'
p1361
I169
sS'.thisIndex'
p1362
I6
sg15
(lp1363
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1364
S'k'
asg95
I6
sa(dp1365
g16
(lp1366
S'd'
asg18
S'Y'
sS'.thisRepN'
p1367
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1368
I5
sS'.thisN'
p1369
I170
sS'.thisIndex'
p1370
I0
sg15
(lp1371
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1372
g16
(lp1373
S'd'
asg18
S'N'
sS'.thisRepN'
p1374
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1375
I6
sS'.thisN'
p1376
I171
sS'.thisIndex'
p1377
I3
sg15
(lp1378
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1379
g16
(lp1380
S'k'
asg18
S'N'
sS'.thisRepN'
p1381
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1382
I7
sS'.thisN'
p1383
I172
sS'.thisIndex'
p1384
I11
sg15
(lp1385
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I11
sa(dp1386
g16
(lp1387
S'd'
asg18
S'Y'
sS'.thisRepN'
p1388
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1389
I8
sS'.thisN'
p1390
I173
sS'.thisIndex'
p1391
I12
sg15
(lp1392
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I12
sa(dp1393
g16
(lp1394
S'k'
asg18
S'N'
sS'.thisRepN'
p1395
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1396
I9
sS'.thisN'
p1397
I174
sS'.thisIndex'
p1398
I9
sg15
(lp1399
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1400
g16
(lp1401
S'd'
asg18
S'N'
sS'.thisRepN'
p1402
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1403
I10
sS'.thisN'
p1404
I175
sS'.thisIndex'
p1405
I1
sg15
(lp1406
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I1
sa(dp1407
g16
(lp1408
S'k'
asg18
S'Y'
sS'.thisRepN'
p1409
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1410
I11
sS'.thisN'
p1411
I176
sS'.thisIndex'
p1412
I10
sg15
(lp1413
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1414
g16
(lp1415
S'd'
asg18
S'N'
sS'.thisRepN'
p1416
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1417
I12
sS'.thisN'
p1418
I177
sS'.thisIndex'
p1419
I2
sg15
(lp1420
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I2
sa(dp1421
g16
(lp1422
S'k'
asg18
S'Y'
sS'.thisRepN'
p1423
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1424
I13
sS'.thisN'
p1425
I178
sS'.thisIndex'
p1426
I2
sg15
(lp1427
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1428
S'space'
p1429
asg95
I2
sa(dp1430
g16
(lp1431
S'k'
asg18
S'Y'
sS'.thisRepN'
p1432
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1433
I14
sS'.thisN'
p1434
I179
sS'.thisIndex'
p1435
I1
sg15
(lp1436
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1437
S'space'
p1438
asg95
I1
sa(dp1439
g16
(lp1440
S'k'
asg18
S'Y'
sS'.thisRepN'
p1441
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1442
I0
sS'.thisN'
p1443
I180
sS'.thisIndex'
p1444
I12
sg15
(lp1445
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1446
S'space'
p1447
asg95
I12
sa(dp1448
g16
(lp1449
S'd'
asg18
S'Y'
sS'.thisRepN'
p1450
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1451
I1
sS'.thisN'
p1452
I181
sS'.thisIndex'
p1453
I11
sg15
(lp1454
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1455
S'space'
p1456
asg95
I11
sa(dp1457
g16
(lp1458
S'd'
asg18
S'N'
sS'.thisRepN'
p1459
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1460
I2
sS'.thisN'
p1461
I182
sS'.thisIndex'
p1462
I10
sg15
(lp1463
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I10
sa(dp1464
g16
(lp1465
S'd'
asg18
S'Y'
sS'.thisRepN'
p1466
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1467
I3
sS'.thisN'
p1468
I183
sS'.thisIndex'
p1469
I7
sg15
(lp1470
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1471
S'space'
p1472
asg95
I7
sa(dp1473
g16
(lp1474
S'd'
asg18
S'N'
sS'.thisRepN'
p1475
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1476
I4
sS'.thisN'
p1477
I184
sS'.thisIndex'
p1478
I5
sg15
(lp1479
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1480
g16
(lp1481
S'k'
asg18
S'N'
sS'.thisRepN'
p1482
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1483
I5
sS'.thisN'
p1484
I185
sS'.thisIndex'
p1485
I10
sg15
(lp1486
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1487
g16
(lp1488
S'd'
asg18
S'Y'
sS'.thisRepN'
p1489
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1490
I6
sS'.thisN'
p1491
I186
sS'.thisIndex'
p1492
I6
sg15
(lp1493
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1494
S'space'
p1495
asg95
I6
sa(dp1496
g16
(lp1497
S'k'
asg18
S'Y'
sS'.thisRepN'
p1498
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1499
I7
sS'.thisN'
p1500
I187
sS'.thisIndex'
p1501
I7
sg15
(lp1502
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1503
S'space'
p1504
asg95
I7
sa(dp1505
g16
(lp1506
S'k'
asg18
S'N'
sS'.thisRepN'
p1507
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1508
I8
sS'.thisN'
p1509
I188
sS'.thisIndex'
p1510
I8
sg15
(lp1511
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1512
g16
(lp1513
S'k'
asg18
S'Y'
sS'.thisRepN'
p1514
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1515
I9
sS'.thisN'
p1516
I189
sS'.thisIndex'
p1517
I4
sg15
(lp1518
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1519
g16
(lp1520
S'd'
asg18
S'N'
sS'.thisRepN'
p1521
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1522
I10
sS'.thisN'
p1523
I190
sS'.thisIndex'
p1524
I6
sg15
(lp1525
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1526
g16
(lp1527
S'd'
asg18
S'N'
sS'.thisRepN'
p1528
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1529
I11
sS'.thisN'
p1530
I191
sS'.thisIndex'
p1531
I2
sg15
(lp1532
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I2
sa(dp1533
g16
(lp1534
S'd'
asg18
S'N'
sS'.thisRepN'
p1535
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1536
I12
sS'.thisN'
p1537
I192
sS'.thisIndex'
p1538
I8
sg15
(lp1539
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I8
sa(dp1540
g16
(lp1541
S'k'
asg18
S'N'
sS'.thisRepN'
p1542
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1543
I13
sS'.thisN'
p1544
I193
sS'.thisIndex'
p1545
I0
sg15
(lp1546
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1547
g16
(lp1548
S'd'
asg18
S'N'
sS'.thisRepN'
p1549
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1550
I14
sS'.thisN'
p1551
I194
sS'.thisIndex'
p1552
I4
sg15
(lp1553
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I4
sa(dp1554
g16
(lp1555
S'd'
asg18
S'N'
sS'.thisRepN'
p1556
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1557
I0
sS'.thisN'
p1558
I195
sS'.thisIndex'
p1559
I11
sg15
(lp1560
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I11
sa(dp1561
g16
(lp1562
S'k'
asg18
S'N'
sS'.thisRepN'
p1563
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1564
I1
sS'.thisN'
p1565
I196
sS'.thisIndex'
p1566
I1
sg15
(lp1567
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I1
sa(dp1568
g16
(lp1569
S'k'
asg18
S'N'
sS'.thisRepN'
p1570
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1571
I2
sS'.thisN'
p1572
I197
sS'.thisIndex'
p1573
I7
sg15
(lp1574
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1575
g16
(lp1576
S'k'
asg18
S'Y'
sS'.thisRepN'
p1577
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1578
I3
sS'.thisN'
p1579
I198
sS'.thisIndex'
p1580
I5
sg15
(lp1581
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1582
S'space'
p1583
asg95
I5
sa(dp1584
g16
(lp1585
S'd'
asg18
S'N'
sg22
I37
sS'.thisN'
p1586
I199
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1587
I4
sS'.thisRepN'
p1588
I13
sg21
I41
sS'.thisIndex'
p1589
I6
sg23
I23
sg15
(lp1590
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1591
g16
(lp1592
S'k'
asg95
I5
sS'.thisRepN'
p1593
I13
sg30
VF
sg31
g32
sS'.thisTrialN'
p1594
I5
sS'.thisN'
p1595
I200
sS'.thisIndex'
p1596
I5
sg15
(lp1597
S'k'
asg17
S'Y'
sg14
I5
sa(dp1598
g16
(lp1599
S'k'
asg95
I11
sS'.thisRepN'
p1600
I13
sg30
VF
sg31
g32
sS'.thisTrialN'
p1601
I6
sS'.thisN'
p1602
I201
sS'.thisIndex'
p1603
I11
sg15
(lp1604
S'k'
asg17
S'Y'
sg14
I5
sa(dp1605
g16
(lp1606
S'd'
asg18
S'Y'
sS'.thisRepN'
p1607
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1608
I7
sS'.thisN'
p1609
I202
sS'.thisIndex'
p1610
I6
sg15
(lp1611
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I6
sa(dp1612
g16
(lp1613
S'k'
asg18
S'N'
sS'.thisRepN'
p1614
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1615
I8
sS'.thisN'
p1616
I203
sS'.thisIndex'
p1617
I4
sg15
(lp1618
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1619
g16
(lp1620
S'd'
asg18
S'N'
sS'.thisRepN'
p1621
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1622
I9
sS'.thisN'
p1623
I204
sS'.thisIndex'
p1624
I5
sg15
(lp1625
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I5
sa(dp1626
g16
(lp1627
S'd'
asg18
S'Y'
sS'.thisRepN'
p1628
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1629
I10
sS'.thisN'
p1630
I205
sS'.thisIndex'
p1631
I7
sg15
(lp1632
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1633
S'space'
p1634
asg95
I7
sa(dp1635
g16
(lp1636
S'k'
asg18
S'Y'
sS'.thisRepN'
p1637
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1638
I11
sS'.thisN'
p1639
I206
sS'.thisIndex'
p1640
I0
sg15
(lp1641
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1642
S'space'
p1643
asg95
I0
sa(dp1644
g16
(lp1645
S'd'
asg18
S'Y'
sS'.thisRepN'
p1646
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1647
I12
sS'.thisN'
p1648
I207
sS'.thisIndex'
p1649
I11
sg15
(lp1650
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1651
S'space'
p1652
asg95
I11
sa(dp1653
g16
(lp1654
S'k'
asg18
S'Y'
sS'.thisRepN'
p1655
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1656
I13
sS'.thisN'
p1657
I208
sS'.thisIndex'
p1658
I4
sg15
(lp1659
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1660
S'space'
p1661
asg95
I4
sa(dp1662
g16
(lp1663
S'd'
asg18
S'N'
sS'.thisRepN'
p1664
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1665
I14
sS'.thisN'
p1666
I209
sS'.thisIndex'
p1667
I14
sg15
(lp1668
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I14
sa(dp1669
g16
(lp1670
S'k'
asg18
S'N'
sS'.thisRepN'
p1671
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1672
I0
sS'.thisN'
p1673
I210
sS'.thisIndex'
p1674
I14
sg15
(lp1675
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I14
sa(dp1676
g16
(lp1677
S'k'
asg18
S'N'
sS'.thisRepN'
p1678
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1679
I1
sS'.thisN'
p1680
I211
sS'.thisIndex'
p1681
I4
sg15
(lp1682
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1683
g16
(lp1684
S'd'
asg18
S'N'
sS'.thisRepN'
p1685
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1686
I2
sS'.thisN'
p1687
I212
sS'.thisIndex'
p1688
I9
sg15
(lp1689
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1690
g16
(lp1691
S'k'
asg18
S'Y'
sS'.thisRepN'
p1692
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1693
I3
sS'.thisN'
p1694
I213
sS'.thisIndex'
p1695
I5
sg15
(lp1696
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I5
sa(dp1697
g16
(lp1698
S'k'
asg18
S'N'
sS'.thisRepN'
p1699
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1700
I4
sS'.thisN'
p1701
I214
sS'.thisIndex'
p1702
I3
sg15
(lp1703
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1704
g16
(lp1705
S'k'
asg18
S'Y'
sS'.thisRepN'
p1706
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1707
I5
sS'.thisN'
p1708
I215
sS'.thisIndex'
p1709
I12
sg15
(lp1710
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1711
S'space'
p1712
asg95
I12
sa(dp1713
g16
(lp1714
S'd'
asg18
S'N'
sS'.thisRepN'
p1715
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1716
I6
sS'.thisN'
p1717
I216
sS'.thisIndex'
p1718
I9
sg15
(lp1719
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I9
sa(dp1720
g16
(lp1721
S'k'
asg18
S'Y'
sS'.thisRepN'
p1722
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1723
I7
sS'.thisN'
p1724
I217
sS'.thisIndex'
p1725
I13
sg15
(lp1726
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1727
S'space'
p1728
asg95
I13
sa(dp1729
g16
(lp1730
S'd'
asg18
S'N'
sS'.thisRepN'
p1731
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1732
I8
sS'.thisN'
p1733
I218
sS'.thisIndex'
p1734
I9
sg15
(lp1735
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I9
sa(dp1736
g16
(lp1737
S'd'
asg18
S'Y'
sS'.thisRepN'
p1738
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1739
I9
sS'.thisN'
p1740
I219
sS'.thisIndex'
p1741
I8
sg15
(lp1742
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1743
S'space'
p1744
asg95
I8
sa(dp1745
g16
(lp1746
S'k'
asg18
S'Y'
sS'.thisRepN'
p1747
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1748
I10
sS'.thisN'
p1749
I220
sS'.thisIndex'
p1750
I3
sg15
(lp1751
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1752
S'space'
p1753
asg95
I3
sa(dp1754
g16
(lp1755
S'd'
asg18
S'Y'
sS'.thisRepN'
p1756
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1757
I11
sS'.thisN'
p1758
I221
sS'.thisIndex'
p1759
I9
sg15
(lp1760
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1761
S'space'
p1762
asg95
I9
sa(dp1763
g16
(lp1764
S'd'
asg18
S'Y'
sS'.thisRepN'
p1765
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1766
I12
sS'.thisN'
p1767
I222
sS'.thisIndex'
p1768
I4
sg15
(lp1769
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1770
S'space'
p1771
asg95
I4
sa(dp1772
g16
(lp1773
S'k'
asg18
S'N'
sS'.thisRepN'
p1774
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1775
I13
sS'.thisN'
p1776
I223
sS'.thisIndex'
p1777
I9
sg15
(lp1778
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1779
g16
(lp1780
S'd'
asg18
S'Y'
sS'.thisRepN'
p1781
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1782
I14
sS'.thisN'
p1783
I224
sS'.thisIndex'
p1784
I2
sg15
(lp1785
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1786
S'space'
p1787
asg95
I2
sa(dp1788
g16
(lp1789
S'k'
asg18
S'Y'
sS'.thisRepN'
p1790
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1791
I0
sS'.thisN'
p1792
I225
sS'.thisIndex'
p1793
I12
sg15
(lp1794
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1795
S'space'
p1796
asg95
I12
sa(dp1797
g16
(lp1798
S'k'
asg18
S'Y'
sS'.thisRepN'
p1799
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1800
I1
sS'.thisN'
p1801
I226
sS'.thisIndex'
p1802
I1
sg15
(lp1803
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1804
S'space'
p1805
asg95
I1
sa(dp1806
g16
(lp1807
S'k'
asg18
S'Y'
sS'.thisRepN'
p1808
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1809
I2
sS'.thisN'
p1810
I227
sS'.thisIndex'
p1811
I6
sg15
(lp1812
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1813
S'space'
p1814
asg95
I6
sa(dp1815
g16
(lp1816
S'k'
asg18
S'Y'
sS'.thisRepN'
p1817
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1818
I3
sS'.thisN'
p1819
I228
sS'.thisIndex'
p1820
I12
sg15
(lp1821
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1822
S'space'
p1823
asg95
I12
sa(dp1824
g16
(lp1825
S'd'
asg18
S'N'
sS'.thisRepN'
p1826
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1827
I4
sS'.thisN'
p1828
I229
sS'.thisIndex'
p1829
I4
sg15
(lp1830
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1831
g16
(lp1832
S'k'
asg18
S'Y'
sS'.thisRepN'
p1833
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1834
I5
sS'.thisN'
p1835
I230
sS'.thisIndex'
p1836
I1
sg15
(lp1837
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1838
S'space'
p1839
asg95
I1
sa(dp1840
g16
(lp1841
S'k'
asg18
S'Y'
sS'.thisRepN'
p1842
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1843
I6
sS'.thisN'
p1844
I231
sS'.thisIndex'
p1845
I10
sg15
(lp1846
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1847
S'space'
p1848
asg95
I10
sa(dp1849
g16
(lp1850
S'd'
asg18
S'Y'
sS'.thisRepN'
p1851
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1852
I7
sS'.thisN'
p1853
I232
sS'.thisIndex'
p1854
I0
sg15
(lp1855
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1856
S'space'
p1857
asg95
I0
sa(dp1858
g16
(lp1859
S'k'
asg18
S'Y'
sS'.thisRepN'
p1860
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1861
I8
sS'.thisN'
p1862
I233
sS'.thisIndex'
p1863
I7
sg15
(lp1864
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp1865
S'space'
p1866
asg95
I7
sa(dp1867
g16
(lp1868
S'd'
asg18
S'Y'
sS'.thisRepN'
p1869
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1870
I9
sS'.thisN'
p1871
I234
sS'.thisIndex'
p1872
I3
sg15
(lp1873
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp1874
S'space'
p1875
asg95
I3
sa(dp1876
g16
(lp1877
S'k'
asg18
S'N'
sS'.thisRepN'
p1878
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1879
I10
sS'.thisN'
p1880
I235
sS'.thisIndex'
p1881
I9
sg15
(lp1882
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I9
sa(dp1883
g16
(lp1884
S'k'
asg18
S'N'
sS'.thisRepN'
p1885
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1886
I11
sS'.thisN'
p1887
I236
sS'.thisIndex'
p1888
I1
sg15
(lp1889
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1890
g16
(lp1891
S'k'
asg18
S'Y'
sS'.thisRepN'
p1892
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1893
I12
sS'.thisN'
p1894
I237
sS'.thisIndex'
p1895
I6
sg15
(lp1896
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1897
S'space'
p1898
asg95
I6
sa(dp1899
g16
(lp1900
S'k'
asg18
S'Y'
sS'.thisRepN'
p1901
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1902
I13
sS'.thisN'
p1903
I238
sS'.thisIndex'
p1904
I0
sg15
(lp1905
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1906
S'space'
p1907
asg95
I0
sa(dp1908
g16
(lp1909
S'k'
asg18
S'Y'
sS'.thisRepN'
p1910
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1911
I14
sS'.thisN'
p1912
I239
sS'.thisIndex'
p1913
I9
sg15
(lp1914
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1915
S'space'
p1916
asg95
I9
sa(dp1917
g16
(lp1918
S'k'
asg18
S'N'
sS'.thisRepN'
p1919
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1920
I0
sS'.thisN'
p1921
I240
sS'.thisIndex'
p1922
I12
sg15
(lp1923
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I12
sa(dp1924
g16
(lp1925
S'k'
asg18
S'N'
sS'.thisRepN'
p1926
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1927
I1
sS'.thisN'
p1928
I241
sS'.thisIndex'
p1929
I13
sg15
(lp1930
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I13
sa(dp1931
g16
(lp1932
S'k'
asg18
S'N'
sS'.thisRepN'
p1933
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1934
I2
sS'.thisN'
p1935
I242
sS'.thisIndex'
p1936
I11
sg15
(lp1937
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I11
sa(dp1938
g16
(lp1939
S'd'
asg18
S'N'
sS'.thisRepN'
p1940
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1941
I3
sS'.thisN'
p1942
I243
sS'.thisIndex'
p1943
I1
sg15
(lp1944
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1945
g16
(lp1946
S'k'
asg18
S'N'
sS'.thisRepN'
p1947
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1948
I4
sS'.thisN'
p1949
I244
sS'.thisIndex'
p1950
I7
sg15
(lp1951
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp1952
g16
(lp1953
S'd'
asg18
S'N'
sS'.thisRepN'
p1954
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1955
I5
sS'.thisN'
p1956
I245
sS'.thisIndex'
p1957
I11
sg15
(lp1958
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp1959
S'space'
p1960
asg95
I11
sa(dp1961
g16
(lp1962
S'd'
asg18
S'N'
sS'.thisRepN'
p1963
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1964
I6
sS'.thisN'
p1965
I246
sS'.thisIndex'
p1966
I3
sg15
(lp1967
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I3
sa(dp1968
g16
(lp1969
S'd'
asg18
S'N'
sS'.thisRepN'
p1970
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1971
I7
sS'.thisN'
p1972
I247
sS'.thisIndex'
p1973
I8
sg15
(lp1974
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I8
sa(dp1975
g16
(lp1976
S'k'
asg18
S'N'
sS'.thisRepN'
p1977
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1978
I8
sS'.thisN'
p1979
I248
sS'.thisIndex'
p1980
I5
sg15
(lp1981
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I5
sa(dp1982
g16
(lp1983
S'd'
asg18
S'N'
sg22
I45
sS'.thisN'
p1984
I249
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1985
I9
sS'.thisRepN'
p1986
I16
sg21
I42
sS'.thisIndex'
p1987
I10
sg23
I25
sg15
(lp1988
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I10
sa(dp1989
g16
(lp1990
S'k'
asg95
I10
sS'.thisRepN'
p1991
I16
sg30
VF
sg31
g32
sS'.thisTrialN'
p1992
I10
sS'.thisN'
p1993
I250
sS'.thisIndex'
p1994
I10
sg15
(lp1995
S'k'
asg17
S'Y'
sg14
I6
sa(dp1996
g16
(lp1997
S'd'
asg95
I3
sS'.thisRepN'
p1998
I16
sg30
VF
sg31
g32
sS'.thisTrialN'
p1999
I11
sS'.thisN'
p2000
I251
sS'.thisIndex'
p2001
I3
sg15
(lp2002
S'd'
asg17
S'Y'
sg14
I6
sa(dp2003
g16
(lp2004
S'k'
asg18
S'N'
sS'.thisRepN'
p2005
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2006
I12
sS'.thisN'
p2007
I252
sS'.thisIndex'
p2008
I13
sg15
(lp2009
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I13
sa(dp2010
g16
(lp2011
S'k'
asg18
S'Y'
sS'.thisRepN'
p2012
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2013
I13
sS'.thisN'
p2014
I253
sS'.thisIndex'
p2015
I9
sg15
(lp2016
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2017
S'space'
p2018
asg95
I9
sa(dp2019
g16
(lp2020
S'k'
asg18
S'Y'
sS'.thisRepN'
p2021
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2022
I14
sS'.thisN'
p2023
I254
sS'.thisIndex'
p2024
I4
sg15
(lp2025
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2026
S'space'
p2027
asg95
I4
sa(dp2028
g16
(lp2029
S'k'
asg18
S'N'
sS'.thisRepN'
p2030
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2031
I0
sS'.thisN'
p2032
I255
sS'.thisIndex'
p2033
I0
sg15
(lp2034
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2035
g16
(lp2036
S'd'
asg18
S'Y'
sS'.thisRepN'
p2037
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2038
I1
sS'.thisN'
p2039
I256
sS'.thisIndex'
p2040
I2
sg15
(lp2041
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2042
S'space'
p2043
asg95
I2
sa(dp2044
g16
(lp2045
S'k'
asg18
S'N'
sS'.thisRepN'
p2046
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2047
I2
sS'.thisN'
p2048
I257
sS'.thisIndex'
p2049
I2
sg15
(lp2050
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I2
sa(dp2051
g16
(lp2052
S'k'
asg18
S'N'
sS'.thisRepN'
p2053
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2054
I3
sS'.thisN'
p2055
I258
sS'.thisIndex'
p2056
I9
sg15
(lp2057
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2058
g16
(lp2059
S'd'
asg18
S'Y'
sS'.thisRepN'
p2060
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2061
I4
sS'.thisN'
p2062
I259
sS'.thisIndex'
p2063
I14
sg15
(lp2064
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2065
S'space'
p2066
asg95
I14
sa(dp2067
g16
(lp2068
S'd'
asg18
S'N'
sS'.thisRepN'
p2069
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2070
I5
sS'.thisN'
p2071
I260
sS'.thisIndex'
p2072
I2
sg15
(lp2073
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I2
sa(dp2074
g16
(lp2075
S'k'
asg18
S'N'
sS'.thisRepN'
p2076
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2077
I6
sS'.thisN'
p2078
I261
sS'.thisIndex'
p2079
I13
sg15
(lp2080
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I13
sa(dp2081
g16
(lp2082
S'k'
asg18
S'N'
sS'.thisRepN'
p2083
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2084
I7
sS'.thisN'
p2085
I262
sS'.thisIndex'
p2086
I6
sg15
(lp2087
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2088
g16
(lp2089
S'k'
asg18
S'N'
sS'.thisRepN'
p2090
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2091
I8
sS'.thisN'
p2092
I263
sS'.thisIndex'
p2093
I1
sg15
(lp2094
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I1
sa(dp2095
g16
(lp2096
S'd'
asg18
S'N'
sS'.thisRepN'
p2097
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2098
I9
sS'.thisN'
p2099
I264
sS'.thisIndex'
p2100
I3
sg15
(lp2101
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2102
g16
(lp2103
S'k'
asg18
S'N'
sS'.thisRepN'
p2104
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2105
I10
sS'.thisN'
p2106
I265
sS'.thisIndex'
p2107
I0
sg15
(lp2108
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2109
g16
(lp2110
S'd'
asg18
S'Y'
sS'.thisRepN'
p2111
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2112
I11
sS'.thisN'
p2113
I266
sS'.thisIndex'
p2114
I12
sg15
(lp2115
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I12
sa(dp2116
g16
(lp2117
S'd'
asg18
S'Y'
sS'.thisRepN'
p2118
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2119
I12
sS'.thisN'
p2120
I267
sS'.thisIndex'
p2121
I6
sg15
(lp2122
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2123
S'space'
p2124
asg95
I6
sa(dp2125
g16
(lp2126
S'k'
asg18
S'N'
sS'.thisRepN'
p2127
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2128
I13
sS'.thisN'
p2129
I268
sS'.thisIndex'
p2130
I7
sg15
(lp2131
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2132
g16
(lp2133
S'k'
asg18
S'N'
sS'.thisRepN'
p2134
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2135
I14
sS'.thisN'
p2136
I269
sS'.thisIndex'
p2137
I6
sg15
(lp2138
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2139
g16
(lp2140
S'd'
asg18
S'Y'
sS'.thisRepN'
p2141
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2142
I0
sS'.thisN'
p2143
I270
sS'.thisIndex'
p2144
I2
sg15
(lp2145
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2146
S'space'
p2147
asg95
I2
sa(dp2148
g16
(lp2149
S'k'
asg18
S'N'
sS'.thisRepN'
p2150
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2151
I1
sS'.thisN'
p2152
I271
sS'.thisIndex'
p2153
I0
sg15
(lp2154
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2155
g16
(lp2156
S'd'
asg18
S'N'
sS'.thisRepN'
p2157
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2158
I2
sS'.thisN'
p2159
I272
sS'.thisIndex'
p2160
I3
sg15
(lp2161
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2162
g16
(lp2163
S'k'
asg18
S'Y'
sS'.thisRepN'
p2164
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2165
I3
sS'.thisN'
p2166
I273
sS'.thisIndex'
p2167
I5
sg15
(lp2168
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2169
S'space'
p2170
asg95
I5
sa(dp2171
g16
(lp2172
S'k'
asg18
S'Y'
sS'.thisRepN'
p2173
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2174
I4
sS'.thisN'
p2175
I274
sS'.thisIndex'
p2176
I4
sg15
(lp2177
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2178
S'space'
p2179
asg95
I4
sa(dp2180
g16
(lp2181
S'd'
asg18
S'Y'
sS'.thisRepN'
p2182
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2183
I5
sS'.thisN'
p2184
I275
sS'.thisIndex'
p2185
I1
sg15
(lp2186
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2187
S'space'
p2188
asg95
I1
sa(dp2189
g16
(lp2190
S'k'
asg18
S'Y'
sS'.thisRepN'
p2191
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2192
I6
sS'.thisN'
p2193
I276
sS'.thisIndex'
p2194
I7
sg15
(lp2195
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2196
S'space'
p2197
asg95
I7
sa(dp2198
g16
(lp2199
S'd'
asg18
S'N'
sS'.thisRepN'
p2200
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2201
I7
sS'.thisN'
p2202
I277
sS'.thisIndex'
p2203
I7
sg15
(lp2204
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2205
g16
(lp2206
S'd'
asg18
S'N'
sS'.thisRepN'
p2207
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2208
I8
sS'.thisN'
p2209
I278
sS'.thisIndex'
p2210
I12
sg15
(lp2211
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2212
S'space'
p2213
asg95
I12
sa(dp2214
g16
(lp2215
S'd'
asg18
S'N'
sS'.thisRepN'
p2216
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2217
I9
sS'.thisN'
p2218
I279
sS'.thisIndex'
p2219
I11
sg15
(lp2220
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I11
sa(dp2221
g16
(lp2222
S'd'
asg18
S'N'
sS'.thisRepN'
p2223
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2224
I10
sS'.thisN'
p2225
I280
sS'.thisIndex'
p2226
I2
sg15
(lp2227
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I2
sa(dp2228
g16
(lp2229
S'k'
asg18
S'Y'
sS'.thisRepN'
p2230
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2231
I11
sS'.thisN'
p2232
I281
sS'.thisIndex'
p2233
I14
sg15
(lp2234
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2235
S'space'
p2236
asg95
I14
sa(dp2237
g16
(lp2238
S'k'
asg18
S'N'
sS'.thisRepN'
p2239
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2240
I12
sS'.thisN'
p2241
I282
sS'.thisIndex'
p2242
I9
sg15
(lp2243
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I9
sa(dp2244
g16
(lp2245
S'k'
asg18
S'Y'
sS'.thisRepN'
p2246
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2247
I13
sS'.thisN'
p2248
I283
sS'.thisIndex'
p2249
I5
sg15
(lp2250
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I5
sa(dp2251
g16
(lp2252
S'd'
asg18
S'N'
sS'.thisRepN'
p2253
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2254
I14
sS'.thisN'
p2255
I284
sS'.thisIndex'
p2256
I13
sg15
(lp2257
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I13
sa(dp2258
g16
(lp2259
S'd'
asg18
S'Y'
sS'.thisRepN'
p2260
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2261
I0
sS'.thisN'
p2262
I285
sS'.thisIndex'
p2263
I9
sg15
(lp2264
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I9
sa(dp2265
g16
(lp2266
S'd'
asg18
S'N'
sS'.thisRepN'
p2267
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2268
I1
sS'.thisN'
p2269
I286
sS'.thisIndex'
p2270
I3
sg15
(lp2271
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg95
I3
sa(dp2272
g16
(lp2273
S'k'
asg18
S'Y'
sS'.thisRepN'
p2274
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2275
I2
sS'.thisN'
p2276
I287
sS'.thisIndex'
p2277
I10
sg15
(lp2278
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2279
S'space'
p2280
asg95
I10
sa(dp2281
g16
(lp2282
S'k'
asg18
S'Y'
sS'.thisRepN'
p2283
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2284
I3
sS'.thisN'
p2285
I288
sS'.thisIndex'
p2286
I7
sg15
(lp2287
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2288
g16
(lp2289
S'k'
asg18
S'Y'
sS'.thisRepN'
p2290
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2291
I4
sS'.thisN'
p2292
I289
sS'.thisIndex'
p2293
I3
sg15
(lp2294
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2295
S'space'
p2296
asg95
I3
sa(dp2297
g16
(lp2298
S'k'
asg18
S'N'
sS'.thisRepN'
p2299
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2300
I5
sS'.thisN'
p2301
I290
sS'.thisIndex'
p2302
I13
sg15
(lp2303
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I13
sa(dp2304
g16
(lp2305
S'k'
asg18
S'N'
sS'.thisRepN'
p2306
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2307
I6
sS'.thisN'
p2308
I291
sS'.thisIndex'
p2309
I0
sg15
(lp2310
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2311
g16
(lp2312
S'k'
asg18
S'Y'
sS'.thisRepN'
p2313
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2314
I7
sS'.thisN'
p2315
I292
sS'.thisIndex'
p2316
I11
sg15
(lp2317
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2318
S'space'
p2319
asg95
I11
sa(dp2320
g16
(lp2321
S'd'
asg18
S'Y'
sS'.thisRepN'
p2322
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2323
I8
sS'.thisN'
p2324
I293
sS'.thisIndex'
p2325
I8
sg15
(lp2326
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2327
S'space'
p2328
asg95
I8
sa(dp2329
g16
(lp2330
S'k'
asg18
S'Y'
sS'.thisRepN'
p2331
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2332
I9
sS'.thisN'
p2333
I294
sS'.thisIndex'
p2334
I4
sg15
(lp2335
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2336
S'space'
p2337
asg95
I4
sa(dp2338
g16
(lp2339
S'd'
asg18
S'Y'
sS'.thisRepN'
p2340
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2341
I10
sS'.thisN'
p2342
I295
sS'.thisIndex'
p2343
I14
sg15
(lp2344
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2345
S'k'
asg95
I14
sa(dp2346
g16
(lp2347
S'k'
asg18
S'Y'
sS'.thisRepN'
p2348
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2349
I11
sS'.thisN'
p2350
I296
sS'.thisIndex'
p2351
I2
sg15
(lp2352
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2353
S'space'
p2354
asg95
I2
sa(dp2355
g16
(lp2356
S'd'
asg18
S'N'
sS'.thisRepN'
p2357
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2358
I12
sS'.thisN'
p2359
I297
sS'.thisIndex'
p2360
I1
sg15
(lp2361
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I1
sa(dp2362
g16
(lp2363
S'd'
asg18
S'Y'
sS'.thisRepN'
p2364
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2365
I13
sS'.thisN'
p2366
I298
sS'.thisIndex'
p2367
I6
sg15
(lp2368
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2369
S'space'
p2370
asg95
I6
sa(dp2371
g16
(lp2372
S'k'
asg18
S'Y'
sg22
I42
sS'.thisN'
p2373
I299
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2374
I14
sS'.thisRepN'
p2375
I19
sg21
I44
sS'.thisIndex'
p2376
I5
sg23
I24
sg15
(lp2377
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2378
S'space'
p2379
asg95
I5
sa(dp2380
g16
(lp2381
S'k'
asg95
I5
sS'.thisRepN'
p2382
I20
sg30
VF
sg31
g32
sS'.thisTrialN'
p2383
I0
sS'.thisN'
p2384
I300
sS'.thisIndex'
p2385
I5
sg15
(lp2386
S'k'
asg17
S'Y'
sg14
I7
sa(dp2387
g16
(lp2388
S'd'
asg95
I1
sS'.thisRepN'
p2389
I20
sg30
VF
sg31
g32
sS'.thisTrialN'
p2390
I1
sS'.thisN'
p2391
I301
sS'.thisIndex'
p2392
I1
sg15
(lp2393
S'k'
asg17
S'N'
sg14
I7
sa(dp2394
g16
(lp2395
S'k'
asg18
S'N'
sS'.thisRepN'
p2396
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2397
I2
sS'.thisN'
p2398
I302
sS'.thisIndex'
p2399
I6
sg15
(lp2400
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2401
g16
(lp2402
S'd'
asg18
S'N'
sS'.thisRepN'
p2403
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2404
I3
sS'.thisN'
p2405
I303
sS'.thisIndex'
p2406
I1
sg15
(lp2407
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I1
sa(dp2408
g16
(lp2409
S'd'
asg18
S'N'
sS'.thisRepN'
p2410
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2411
I4
sS'.thisN'
p2412
I304
sS'.thisIndex'
p2413
I7
sg15
(lp2414
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2415
g16
(lp2416
S'd'
asg18
S'Y'
sS'.thisRepN'
p2417
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2418
I5
sS'.thisN'
p2419
I305
sS'.thisIndex'
p2420
I8
sg15
(lp2421
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2422
S'space'
p2423
asg95
I8
sa(dp2424
g16
(lp2425
S'd'
asg18
S'N'
sS'.thisRepN'
p2426
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2427
I6
sS'.thisN'
p2428
I306
sS'.thisIndex'
p2429
I3
sg15
(lp2430
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I3
sa(dp2431
g16
(lp2432
S'k'
asg18
S'Y'
sS'.thisRepN'
p2433
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2434
I7
sS'.thisN'
p2435
I307
sS'.thisIndex'
p2436
I2
sg15
(lp2437
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2438
S'space'
p2439
asg95
I2
sa(dp2440
g16
(lp2441
S'k'
asg18
S'N'
sS'.thisRepN'
p2442
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2443
I8
sS'.thisN'
p2444
I308
sS'.thisIndex'
p2445
I0
sg15
(lp2446
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2447
g16
(lp2448
S'k'
asg18
S'N'
sS'.thisRepN'
p2449
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2450
I9
sS'.thisN'
p2451
I309
sS'.thisIndex'
p2452
I13
sg15
(lp2453
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I13
sa(dp2454
g16
(lp2455
S'd'
asg18
S'Y'
sS'.thisRepN'
p2456
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2457
I10
sS'.thisN'
p2458
I310
sS'.thisIndex'
p2459
I11
sg15
(lp2460
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2461
S'space'
p2462
asg95
I11
sa(dp2463
g16
(lp2464
S'd'
asg18
S'Y'
sS'.thisRepN'
p2465
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2466
I11
sS'.thisN'
p2467
I311
sS'.thisIndex'
p2468
I11
sg15
(lp2469
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2470
S'space'
p2471
asg95
I11
sa(dp2472
g16
(lp2473
S'd'
asg18
S'Y'
sS'.thisRepN'
p2474
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2475
I12
sS'.thisN'
p2476
I312
sS'.thisIndex'
p2477
I12
sg15
(lp2478
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2479
S'space'
p2480
asg95
I12
sa(dp2481
g16
(lp2482
S'k'
asg18
S'Y'
sS'.thisRepN'
p2483
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2484
I13
sS'.thisN'
p2485
I313
sS'.thisIndex'
p2486
I12
sg15
(lp2487
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2488
S'space'
p2489
asg95
I12
sa(dp2490
g16
(lp2491
S'd'
asg18
S'N'
sS'.thisRepN'
p2492
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2493
I14
sS'.thisN'
p2494
I314
sS'.thisIndex'
p2495
I0
sg15
(lp2496
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg95
I0
sa(dp2497
g16
(lp2498
S'k'
asg18
S'Y'
sS'.thisRepN'
p2499
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2500
I0
sS'.thisN'
p2501
I315
sS'.thisIndex'
p2502
I6
sg15
(lp2503
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2504
S'space'
p2505
asg95
I6
sa(dp2506
g16
(lp2507
S'd'
asg18
S'N'
sS'.thisRepN'
p2508
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2509
I1
sS'.thisN'
p2510
I316
sS'.thisIndex'
p2511
I4
sg15
(lp2512
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I4
sa(dp2513
g16
(lp2514
S'd'
asg18
S'Y'
sS'.thisRepN'
p2515
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2516
I2
sS'.thisN'
p2517
I317
sS'.thisIndex'
p2518
I10
sg15
(lp2519
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2520
S'space'
p2521
asg95
I10
sa(dp2522
g16
(lp2523
S'k'
asg18
S'Y'
sS'.thisRepN'
p2524
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2525
I3
sS'.thisN'
p2526
I318
sS'.thisIndex'
p2527
I1
sg15
(lp2528
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2529
S'space'
p2530
asg95
I1
sa(dp2531
g16
(lp2532
S'k'
asg18
S'Y'
sS'.thisRepN'
p2533
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2534
I4
sS'.thisN'
p2535
I319
sS'.thisIndex'
p2536
I9
sg15
(lp2537
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2538
S'space'
p2539
asg95
I9
sa(dp2540
g16
(lp2541
S'k'
asg18
S'N'
sS'.thisRepN'
p2542
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2543
I5
sS'.thisN'
p2544
I320
sS'.thisIndex'
p2545
I9
sg15
(lp2546
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I9
sa(dp2547
g16
(lp2548
S'd'
asg18
S'Y'
sS'.thisRepN'
p2549
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2550
I6
sS'.thisN'
p2551
I321
sS'.thisIndex'
p2552
I12
sg15
(lp2553
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2554
S'space'
p2555
asg95
I12
sa(dp2556
g16
(lp2557
S'd'
asg18
S'N'
sS'.thisRepN'
p2558
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2559
I7
sS'.thisN'
p2560
I322
sS'.thisIndex'
p2561
I0
sg15
(lp2562
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2563
g16
(lp2564
S'd'
asg18
S'Y'
sS'.thisRepN'
p2565
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2566
I8
sS'.thisN'
p2567
I323
sS'.thisIndex'
p2568
I2
sg15
(lp2569
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2570
g16
(lp2571
S'k'
asg18
S'N'
sS'.thisRepN'
p2572
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2573
I9
sS'.thisN'
p2574
I324
sS'.thisIndex'
p2575
I9
sg15
(lp2576
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2577
S'space'
p2578
asg95
I9
sa(dp2579
g16
(lp2580
S'k'
asg18
S'N'
sS'.thisRepN'
p2581
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2582
I10
sS'.thisN'
p2583
I325
sS'.thisIndex'
p2584
I0
sg15
(lp2585
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2586
S'space'
p2587
asg95
I0
sa(dp2588
g16
(lp2589
S'k'
asg18
S'N'
sS'.thisRepN'
p2590
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2591
I11
sS'.thisN'
p2592
I326
sS'.thisIndex'
p2593
I13
sg15
(lp2594
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I13
sa(dp2595
g16
(lp2596
S'd'
asg18
S'N'
sS'.thisRepN'
p2597
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2598
I12
sS'.thisN'
p2599
I327
sS'.thisIndex'
p2600
I6
sg15
(lp2601
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2602
g16
(lp2603
S'k'
asg18
S'Y'
sS'.thisRepN'
p2604
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2605
I13
sS'.thisN'
p2606
I328
sS'.thisIndex'
p2607
I8
sg15
(lp2608
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2609
S'space'
p2610
asg95
I8
sa(dp2611
g16
(lp2612
S'd'
asg18
S'Y'
sS'.thisRepN'
p2613
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2614
I14
sS'.thisN'
p2615
I329
sS'.thisIndex'
p2616
I13
sg15
(lp2617
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2618
S'space'
p2619
asg95
I13
sa(dp2620
g16
(lp2621
S'k'
asg18
S'N'
sS'.thisRepN'
p2622
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2623
I0
sS'.thisN'
p2624
I330
sS'.thisIndex'
p2625
I9
sg15
(lp2626
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I9
sa(dp2627
g16
(lp2628
S'd'
asg18
S'N'
sS'.thisRepN'
p2629
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2630
I1
sS'.thisN'
p2631
I331
sS'.thisIndex'
p2632
I5
sg15
(lp2633
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2634
g16
(lp2635
S'd'
asg18
S'Y'
sS'.thisRepN'
p2636
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2637
I2
sS'.thisN'
p2638
I332
sS'.thisIndex'
p2639
I14
sg15
(lp2640
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2641
S'space'
p2642
asg95
I14
sa(dp2643
g16
(lp2644
S'k'
asg18
S'Y'
sS'.thisRepN'
p2645
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2646
I3
sS'.thisN'
p2647
I333
sS'.thisIndex'
p2648
I9
sg15
(lp2649
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2650
S'space'
p2651
asg95
I9
sa(dp2652
g16
(lp2653
S'k'
asg18
S'N'
sS'.thisRepN'
p2654
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2655
I4
sS'.thisN'
p2656
I334
sS'.thisIndex'
p2657
I10
sg15
(lp2658
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2659
g16
(lp2660
S'k'
asg18
S'Y'
sS'.thisRepN'
p2661
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2662
I5
sS'.thisN'
p2663
I335
sS'.thisIndex'
p2664
I5
sg15
(lp2665
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2666
S'space'
p2667
asg95
I5
sa(dp2668
g16
(lp2669
S'd'
asg18
S'N'
sS'.thisRepN'
p2670
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2671
I6
sS'.thisN'
p2672
I336
sS'.thisIndex'
p2673
I6
sg15
(lp2674
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2675
g16
(lp2676
S'k'
asg18
S'N'
sS'.thisRepN'
p2677
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2678
I7
sS'.thisN'
p2679
I337
sS'.thisIndex'
p2680
I3
sg15
(lp2681
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I3
sa(dp2682
g16
(lp2683
S'k'
asg18
S'Y'
sS'.thisRepN'
p2684
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2685
I8
sS'.thisN'
p2686
I338
sS'.thisIndex'
p2687
I4
sg15
(lp2688
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2689
S'space'
p2690
asg95
I4
sa(dp2691
g16
(lp2692
S'k'
asg18
S'Y'
sS'.thisRepN'
p2693
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2694
I9
sS'.thisN'
p2695
I339
sS'.thisIndex'
p2696
I5
sg15
(lp2697
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2698
S'space'
p2699
asg95
I5
sa(dp2700
g16
(lp2701
S'k'
asg18
S'N'
sS'.thisRepN'
p2702
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2703
I10
sS'.thisN'
p2704
I340
sS'.thisIndex'
p2705
I12
sg15
(lp2706
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I12
sa(dp2707
g16
(lp2708
S'd'
asg18
S'Y'
sS'.thisRepN'
p2709
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2710
I11
sS'.thisN'
p2711
I341
sS'.thisIndex'
p2712
I7
sg15
(lp2713
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2714
S'space'
p2715
asg95
I7
sa(dp2716
g16
(lp2717
S'k'
asg18
S'Y'
sS'.thisRepN'
p2718
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2719
I12
sS'.thisN'
p2720
I342
sS'.thisIndex'
p2721
I7
sg15
(lp2722
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2723
S'space'
p2724
asg95
I7
sa(dp2725
g16
(lp2726
S'k'
asg18
S'Y'
sS'.thisRepN'
p2727
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2728
I13
sS'.thisN'
p2729
I343
sS'.thisIndex'
p2730
I7
sg15
(lp2731
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2732
S'space'
p2733
asg95
I7
sa(dp2734
g16
(lp2735
S'd'
asg18
S'N'
sS'.thisRepN'
p2736
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2737
I14
sS'.thisN'
p2738
I344
sS'.thisIndex'
p2739
I13
sg15
(lp2740
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I13
sa(dp2741
g16
(lp2742
S'k'
asg18
S'N'
sS'.thisRepN'
p2743
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2744
I0
sS'.thisN'
p2745
I345
sS'.thisIndex'
p2746
I5
sg15
(lp2747
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2748
g16
(lp2749
S'd'
asg18
S'Y'
sS'.thisRepN'
p2750
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2751
I1
sS'.thisN'
p2752
I346
sS'.thisIndex'
p2753
I5
sg15
(lp2754
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2755
S'space'
p2756
asg95
I5
sa(dp2757
g16
(lp2758
S'd'
asg18
S'Y'
sS'.thisRepN'
p2759
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2760
I2
sS'.thisN'
p2761
I347
sS'.thisIndex'
p2762
I4
sg15
(lp2763
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2764
S'space'
p2765
asg95
I4
sa(dp2766
g16
(lp2767
S'k'
asg18
S'N'
sS'.thisRepN'
p2768
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2769
I3
sS'.thisN'
p2770
I348
sS'.thisIndex'
p2771
I6
sg15
(lp2772
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2773
g16
(lp2774
S'k'
asg18
S'Y'
sg22
I45
sS'.thisN'
p2775
I349
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2776
I4
sS'.thisRepN'
p2777
I23
sg21
I45
sS'.thisIndex'
p2778
I3
sg23
I25
sg15
(lp2779
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2780
S'space'
p2781
asg95
I3
sa(dp2782
g16
(lp2783
S'k'
asg95
I13
sS'.thisRepN'
p2784
I23
sg30
VF
sg31
g32
sS'.thisTrialN'
p2785
I5
sS'.thisN'
p2786
I350
sS'.thisIndex'
p2787
I13
sg15
(lp2788
S'k'
asg17
S'Y'
sg14
I8
sa(dp2789
g16
(lp2790
S'k'
asg95
I10
sS'.thisRepN'
p2791
I23
sg30
VF
sg31
g32
sS'.thisTrialN'
p2792
I6
sS'.thisN'
p2793
I351
sS'.thisIndex'
p2794
I10
sg15
(lp2795
S'k'
asg17
S'Y'
sg14
I8
sa(dp2796
g16
(lp2797
S'k'
asg18
S'N'
sS'.thisRepN'
p2798
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2799
I7
sS'.thisN'
p2800
I352
sS'.thisIndex'
p2801
I7
sg15
(lp2802
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp2803
g16
(lp2804
S'd'
asg18
S'N'
sS'.thisRepN'
p2805
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2806
I8
sS'.thisN'
p2807
I353
sS'.thisIndex'
p2808
I4
sg15
(lp2809
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp2810
g16
(lp2811
S'd'
asg18
S'N'
sS'.thisRepN'
p2812
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2813
I9
sS'.thisN'
p2814
I354
sS'.thisIndex'
p2815
I4
sg15
(lp2816
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp2817
g16
(lp2818
S'k'
asg18
S'Y'
sS'.thisRepN'
p2819
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2820
I10
sS'.thisN'
p2821
I355
sS'.thisIndex'
p2822
I3
sg15
(lp2823
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp2824
S'space'
p2825
asg95
I3
sa(dp2826
g16
(lp2827
S'k'
asg18
S'Y'
sS'.thisRepN'
p2828
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2829
I11
sS'.thisN'
p2830
I356
sS'.thisIndex'
p2831
I12
sg15
(lp2832
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2833
S'space'
p2834
asg95
I12
sa(dp2835
g16
(lp2836
S'd'
asg18
S'N'
sS'.thisRepN'
p2837
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2838
I12
sS'.thisN'
p2839
I357
sS'.thisIndex'
p2840
I11
sg15
(lp2841
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I11
sa(dp2842
g16
(lp2843
S'k'
asg18
S'Y'
sS'.thisRepN'
p2844
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2845
I13
sS'.thisN'
p2846
I358
sS'.thisIndex'
p2847
I13
sg15
(lp2848
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2849
S'space'
p2850
asg95
I13
sa(dp2851
g16
(lp2852
S'd'
asg18
S'N'
sS'.thisRepN'
p2853
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2854
I14
sS'.thisN'
p2855
I359
sS'.thisIndex'
p2856
I2
sg15
(lp2857
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp2858
g16
(lp2859
S'd'
asg18
S'N'
sS'.thisRepN'
p2860
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2861
I0
sS'.thisN'
p2862
I360
sS'.thisIndex'
p2863
I12
sg15
(lp2864
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I12
sa(dp2865
g16
(lp2866
S'd'
asg18
S'Y'
sS'.thisRepN'
p2867
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2868
I1
sS'.thisN'
p2869
I361
sS'.thisIndex'
p2870
I0
sg15
(lp2871
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2872
S'space'
p2873
asg95
I0
sa(dp2874
g16
(lp2875
S'd'
asg18
S'N'
sS'.thisRepN'
p2876
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2877
I2
sS'.thisN'
p2878
I362
sS'.thisIndex'
p2879
I13
sg15
(lp2880
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I13
sa(dp2881
g16
(lp2882
S'd'
asg18
S'N'
sS'.thisRepN'
p2883
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2884
I3
sS'.thisN'
p2885
I363
sS'.thisIndex'
p2886
I9
sg15
(lp2887
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp2888
g16
(lp2889
S'd'
asg18
S'Y'
sS'.thisRepN'
p2890
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2891
I4
sS'.thisN'
p2892
I364
sS'.thisIndex'
p2893
I1
sg15
(lp2894
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2895
S'space'
p2896
asg95
I1
sa(dp2897
g16
(lp2898
S'k'
asg18
S'N'
sS'.thisRepN'
p2899
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2900
I5
sS'.thisN'
p2901
I365
sS'.thisIndex'
p2902
I9
sg15
(lp2903
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp2904
g16
(lp2905
S'd'
asg18
S'N'
sS'.thisRepN'
p2906
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2907
I6
sS'.thisN'
p2908
I366
sS'.thisIndex'
p2909
I1
sg15
(lp2910
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp2911
g16
(lp2912
S'k'
asg18
S'Y'
sS'.thisRepN'
p2913
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2914
I7
sS'.thisN'
p2915
I367
sS'.thisIndex'
p2916
I7
sg15
(lp2917
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp2918
S'space'
p2919
asg95
I7
sa(dp2920
g16
(lp2921
S'd'
asg18
S'Y'
sS'.thisRepN'
p2922
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2923
I8
sS'.thisN'
p2924
I368
sS'.thisIndex'
p2925
I14
sg15
(lp2926
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2927
S'space'
p2928
asg95
I14
sa(dp2929
g16
(lp2930
S'd'
asg18
S'Y'
sS'.thisRepN'
p2931
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2932
I9
sS'.thisN'
p2933
I369
sS'.thisIndex'
p2934
I6
sg15
(lp2935
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2936
S'space'
p2937
asg95
I6
sa(dp2938
g16
(lp2939
S'k'
asg18
S'N'
sS'.thisRepN'
p2940
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2941
I10
sS'.thisN'
p2942
I370
sS'.thisIndex'
p2943
I9
sg15
(lp2944
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I9
sa(dp2945
g16
(lp2946
S'd'
asg18
S'N'
sS'.thisRepN'
p2947
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2948
I11
sS'.thisN'
p2949
I371
sS'.thisIndex'
p2950
I4
sg15
(lp2951
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp2952
g16
(lp2953
S'k'
asg18
S'Y'
sS'.thisRepN'
p2954
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2955
I12
sS'.thisN'
p2956
I372
sS'.thisIndex'
p2957
I1
sg15
(lp2958
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I1
sa(dp2959
g16
(lp2960
S'k'
asg18
S'N'
sS'.thisRepN'
p2961
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2962
I13
sS'.thisN'
p2963
I373
sS'.thisIndex'
p2964
I3
sg15
(lp2965
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp2966
g16
(lp2967
S'd'
asg18
S'N'
sS'.thisRepN'
p2968
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2969
I14
sS'.thisN'
p2970
I374
sS'.thisIndex'
p2971
I4
sg15
(lp2972
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp2973
S'space'
p2974
asg95
I4
sa(dp2975
g16
(lp2976
S'k'
asg18
S'N'
sS'.thisRepN'
p2977
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2978
I0
sS'.thisN'
p2979
I375
sS'.thisIndex'
p2980
I13
sg15
(lp2981
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I13
sa(dp2982
g16
(lp2983
S'k'
asg18
S'Y'
sS'.thisRepN'
p2984
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2985
I1
sS'.thisN'
p2986
I376
sS'.thisIndex'
p2987
I10
sg15
(lp2988
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2989
S'space'
p2990
asg95
I10
sa(dp2991
g16
(lp2992
S'd'
asg18
S'N'
sS'.thisRepN'
p2993
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2994
I2
sS'.thisN'
p2995
I377
sS'.thisIndex'
p2996
I14
sg15
(lp2997
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I14
sa(dp2998
g16
(lp2999
S'd'
asg18
S'Y'
sS'.thisRepN'
p3000
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3001
I3
sS'.thisN'
p3002
I378
sS'.thisIndex'
p3003
I0
sg15
(lp3004
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3005
S'space'
p3006
asg95
I0
sa(dp3007
g16
(lp3008
S'k'
asg18
S'Y'
sS'.thisRepN'
p3009
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3010
I4
sS'.thisN'
p3011
I379
sS'.thisIndex'
p3012
I1
sg15
(lp3013
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3014
S'space'
p3015
asg95
I1
sa(dp3016
g16
(lp3017
S'k'
asg18
S'N'
sS'.thisRepN'
p3018
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3019
I5
sS'.thisN'
p3020
I380
sS'.thisIndex'
p3021
I13
sg15
(lp3022
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I13
sa(dp3023
g16
(lp3024
S'k'
asg18
S'Y'
sS'.thisRepN'
p3025
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3026
I6
sS'.thisN'
p3027
I381
sS'.thisIndex'
p3028
I8
sg15
(lp3029
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3030
S'space'
p3031
asg95
I8
sa(dp3032
g16
(lp3033
S'k'
asg18
S'Y'
sS'.thisRepN'
p3034
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3035
I7
sS'.thisN'
p3036
I382
sS'.thisIndex'
p3037
I11
sg15
(lp3038
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3039
S'space'
p3040
asg95
I11
sa(dp3041
g16
(lp3042
S'd'
asg18
S'Y'
sS'.thisRepN'
p3043
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3044
I8
sS'.thisN'
p3045
I383
sS'.thisIndex'
p3046
I4
sg15
(lp3047
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3048
S'space'
p3049
asg95
I4
sa(dp3050
g16
(lp3051
S'd'
asg18
S'N'
sS'.thisRepN'
p3052
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3053
I9
sS'.thisN'
p3054
I384
sS'.thisIndex'
p3055
I1
sg15
(lp3056
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I1
sa(dp3057
g16
(lp3058
S'd'
asg18
S'Y'
sS'.thisRepN'
p3059
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3060
I10
sS'.thisN'
p3061
I385
sS'.thisIndex'
p3062
I14
sg15
(lp3063
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I14
sa(dp3064
g16
(lp3065
S'k'
asg18
S'Y'
sS'.thisRepN'
p3066
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3067
I11
sS'.thisN'
p3068
I386
sS'.thisIndex'
p3069
I3
sg15
(lp3070
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp3071
g16
(lp3072
S'k'
asg18
S'N'
sS'.thisRepN'
p3073
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3074
I12
sS'.thisN'
p3075
I387
sS'.thisIndex'
p3076
I8
sg15
(lp3077
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp3078
g16
(lp3079
S'd'
asg18
S'Y'
sS'.thisRepN'
p3080
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3081
I13
sS'.thisN'
p3082
I388
sS'.thisIndex'
p3083
I7
sg15
(lp3084
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp3085
g16
(lp3086
S'd'
asg18
S'N'
sS'.thisRepN'
p3087
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3088
I14
sS'.thisN'
p3089
I389
sS'.thisIndex'
p3090
I6
sg15
(lp3091
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I6
sa(dp3092
g16
(lp3093
S'd'
asg18
S'Y'
sS'.thisRepN'
p3094
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3095
I0
sS'.thisN'
p3096
I390
sS'.thisIndex'
p3097
I14
sg15
(lp3098
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3099
S'space'
p3100
asg95
I14
sa(dp3101
g16
(lp3102
S'k'
asg18
S'N'
sS'.thisRepN'
p3103
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3104
I1
sS'.thisN'
p3105
I391
sS'.thisIndex'
p3106
I14
sg15
(lp3107
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I14
sa(dp3108
g16
(lp3109
S'd'
asg18
S'N'
sS'.thisRepN'
p3110
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3111
I2
sS'.thisN'
p3112
I392
sS'.thisIndex'
p3113
I3
sg15
(lp3114
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp3115
g16
(lp3116
S'd'
asg18
S'N'
sS'.thisRepN'
p3117
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3118
I3
sS'.thisN'
p3119
I393
sS'.thisIndex'
p3120
I12
sg15
(lp3121
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3122
S'space'
p3123
asg95
I12
sa(dp3124
g16
(lp3125
S'd'
asg18
S'Y'
sS'.thisRepN'
p3126
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3127
I4
sS'.thisN'
p3128
I394
sS'.thisIndex'
p3129
I1
sg15
(lp3130
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3131
S'space'
p3132
asg95
I1
sa(dp3133
g16
(lp3134
S'd'
asg18
S'Y'
sS'.thisRepN'
p3135
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3136
I5
sS'.thisN'
p3137
I395
sS'.thisIndex'
p3138
I10
sg15
(lp3139
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp3140
S'space'
p3141
asg95
I10
sa(dp3142
g16
(lp3143
S'd'
asg18
S'Y'
sS'.thisRepN'
p3144
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3145
I6
sS'.thisN'
p3146
I396
sS'.thisIndex'
p3147
I2
sg15
(lp3148
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3149
S'space'
p3150
asg95
I2
sa(dp3151
g16
(lp3152
S'k'
asg18
S'Y'
sS'.thisRepN'
p3153
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3154
I7
sS'.thisN'
p3155
I397
sS'.thisIndex'
p3156
I10
sg15
(lp3157
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3158
S'space'
p3159
asg95
I10
sa(dp3160
g16
(lp3161
S'k'
asg18
S'Y'
sS'.thisRepN'
p3162
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3163
I8
sS'.thisN'
p3164
I398
sS'.thisIndex'
p3165
I12
sg15
(lp3166
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3167
S'space'
p3168
asg95
I12
sa(dp3169
g16
(lp3170
S'k'
asg18
S'Y'
sg22
I42
sS'.thisN'
p3171
I399
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3172
I9
sS'.thisRepN'
p3173
I26
sg21
I43
sS'.thisIndex'
p3174
I9
sg23
I25
sg15
(lp3175
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3176
S'space'
p3177
asg95
I9
sa(dp3178
g16
(lp3179
S'k'
asg95
I13
sS'.thisRepN'
p3180
I26
sg30
VF
sg31
g32
sS'.thisTrialN'
p3181
I10
sS'.thisN'
p3182
I400
sS'.thisIndex'
p3183
I13
sg15
(lp3184
S'k'
asg17
S'Y'
sg14
I9
sa(dp3185
g16
(lp3186
S'k'
asg95
I3
sS'.thisRepN'
p3187
I26
sg30
VF
sg31
g32
sS'.thisTrialN'
p3188
I11
sS'.thisN'
p3189
I401
sS'.thisIndex'
p3190
I3
sg15
(lp3191
S'k'
asg17
S'Y'
sg14
I9
sa(dp3192
g16
(lp3193
S'k'
asg18
S'N'
sS'.thisRepN'
p3194
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3195
I12
sS'.thisN'
p3196
I402
sS'.thisIndex'
p3197
I0
sg15
(lp3198
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3199
g16
(lp3200
S'd'
asg18
S'Y'
sS'.thisRepN'
p3201
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3202
I13
sS'.thisN'
p3203
I403
sS'.thisIndex'
p3204
I10
sg15
(lp3205
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3206
S'space'
p3207
asg95
I10
sa(dp3208
g16
(lp3209
S'd'
asg18
S'N'
sS'.thisRepN'
p3210
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3211
I14
sS'.thisN'
p3212
I404
sS'.thisIndex'
p3213
I0
sg15
(lp3214
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3215
g16
(lp3216
S'd'
asg18
S'Y'
sS'.thisRepN'
p3217
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3218
I0
sS'.thisN'
p3219
I405
sS'.thisIndex'
p3220
I7
sg15
(lp3221
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3222
S'space'
p3223
asg95
I7
sa(dp3224
g16
(lp3225
S'k'
asg18
S'N'
sS'.thisRepN'
p3226
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3227
I1
sS'.thisN'
p3228
I406
sS'.thisIndex'
p3229
I3
sg15
(lp3230
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3231
g16
(lp3232
S'd'
asg18
S'N'
sS'.thisRepN'
p3233
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3234
I2
sS'.thisN'
p3235
I407
sS'.thisIndex'
p3236
I10
sg15
(lp3237
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I10
sa(dp3238
g16
(lp3239
S'k'
asg18
S'Y'
sS'.thisRepN'
p3240
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3241
I3
sS'.thisN'
p3242
I408
sS'.thisIndex'
p3243
I2
sg15
(lp3244
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3245
S'space'
p3246
asg95
I2
sa(dp3247
g16
(lp3248
S'd'
asg18
S'N'
sS'.thisRepN'
p3249
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3250
I4
sS'.thisN'
p3251
I409
sS'.thisIndex'
p3252
I5
sg15
(lp3253
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
Nsg95
I5
sa(dp3254
g16
(lp3255
S'd'
asg18
S'N'
sS'.thisRepN'
p3256
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3257
I5
sS'.thisN'
p3258
I410
sS'.thisIndex'
p3259
I4
sg15
(lp3260
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3261
S'space'
p3262
asg95
I4
sa(dp3263
g16
(lp3264
S'k'
asg18
S'Y'
sS'.thisRepN'
p3265
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3266
I6
sS'.thisN'
p3267
I411
sS'.thisIndex'
p3268
I10
sg15
(lp3269
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
Nsg95
I10
sa(dp3270
g16
(lp3271
S'd'
asg18
S'Y'
sS'.thisRepN'
p3272
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3273
I7
sS'.thisN'
p3274
I412
sS'.thisIndex'
p3275
I5
sg15
(lp3276
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
Nsg95
I5
sa(dp3277
g16
(lp3278
S'k'
asg18
S'N'
sS'.thisRepN'
p3279
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3280
I8
sS'.thisN'
p3281
I413
sS'.thisIndex'
p3282
I2
sg15
(lp3283
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3284
g16
(lp3285
S'k'
asg18
S'N'
sS'.thisRepN'
p3286
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3287
I9
sS'.thisN'
p3288
I414
sS'.thisIndex'
p3289
I1
sg15
(lp3290
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3291
g16
(lp3292
S'k'
asg18
S'Y'
sS'.thisRepN'
p3293
I27
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3294
I10
sS'.thisN'
p3295
I415
sS'.thisIndex'
p3296
I6
sg15
(lp3297
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3298
S'd'
asg95
I6
sa(dp3299
g16
(lp3300
S'k'
asg18
S'N'
sS'.thisRepN'
p3301
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3302
I11
sS'.thisN'
p3303
I416
sS'.thisIndex'
p3304
I5
sg15
(lp3305
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3306
g16
(lp3307
S'k'
asg18
S'N'
sS'.thisRepN'
p3308
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3309
I12
sS'.thisN'
p3310
I417
sS'.thisIndex'
p3311
I14
sg15
(lp3312
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I14
sa(dp3313
g16
(lp3314
S'd'
asg18
S'N'
sS'.thisRepN'
p3315
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3316
I13
sS'.thisN'
p3317
I418
sS'.thisIndex'
p3318
I8
sg15
(lp3319
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I8
sa(dp3320
g16
(lp3321
S'k'
asg18
S'N'
sS'.thisRepN'
p3322
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3323
I14
sS'.thisN'
p3324
I419
sS'.thisIndex'
p3325
I11
sg15
(lp3326
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I11
sa(dp3327
g16
(lp3328
S'd'
asg18
S'N'
sS'.thisRepN'
p3329
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3330
I0
sS'.thisN'
p3331
I420
sS'.thisIndex'
p3332
I12
sg15
(lp3333
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I12
sa(dp3334
g16
(lp3335
S'k'
asg18
S'Y'
sS'.thisRepN'
p3336
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3337
I1
sS'.thisN'
p3338
I421
sS'.thisIndex'
p3339
I9
sg15
(lp3340
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3341
g16
(lp3342
S'k'
asg18
S'N'
sS'.thisRepN'
p3343
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3344
I2
sS'.thisN'
p3345
I422
sS'.thisIndex'
p3346
I7
sg15
(lp3347
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I7
sa(dp3348
g16
(lp3349
S'k'
asg18
S'N'
sS'.thisRepN'
p3350
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3351
I3
sS'.thisN'
p3352
I423
sS'.thisIndex'
p3353
I8
sg15
(lp3354
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I8
sa(dp3355
g16
(lp3356
S'd'
asg18
S'Y'
sS'.thisRepN'
p3357
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3358
I4
sS'.thisN'
p3359
I424
sS'.thisIndex'
p3360
I6
sg15
(lp3361
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3362
g16
(lp3363
S'k'
asg18
S'N'
sS'.thisRepN'
p3364
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3365
I5
sS'.thisN'
p3366
I425
sS'.thisIndex'
p3367
I1
sg15
(lp3368
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3369
g16
(lp3370
S'd'
asg18
S'Y'
sS'.thisRepN'
p3371
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3372
I6
sS'.thisN'
p3373
I426
sS'.thisIndex'
p3374
I12
sg15
(lp3375
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3376
S'space'
p3377
asg95
I12
sa(dp3378
g16
(lp3379
S'k'
asg18
S'Y'
sS'.thisRepN'
p3380
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3381
I7
sS'.thisN'
p3382
I427
sS'.thisIndex'
p3383
I8
sg15
(lp3384
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I8
sa(dp3385
g16
(lp3386
S'd'
asg18
S'Y'
sS'.thisRepN'
p3387
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3388
I8
sS'.thisN'
p3389
I428
sS'.thisIndex'
p3390
I3
sg15
(lp3391
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3392
S'space'
p3393
asg95
I3
sa(dp3394
g16
(lp3395
S'k'
asg18
S'N'
sS'.thisRepN'
p3396
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3397
I9
sS'.thisN'
p3398
I429
sS'.thisIndex'
p3399
I8
sg15
(lp3400
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I8
sa(dp3401
g16
(lp3402
S'k'
asg18
S'Y'
sS'.thisRepN'
p3403
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3404
I10
sS'.thisN'
p3405
I430
sS'.thisIndex'
p3406
I10
sg15
(lp3407
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3408
S'space'
p3409
asg95
I10
sa(dp3410
g16
(lp3411
S'k'
asg18
S'Y'
sS'.thisRepN'
p3412
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3413
I11
sS'.thisN'
p3414
I431
sS'.thisIndex'
p3415
I5
sg15
(lp3416
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3417
S'space'
p3418
asg95
I5
sa(dp3419
g16
(lp3420
S'k'
asg18
S'Y'
sS'.thisRepN'
p3421
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3422
I12
sS'.thisN'
p3423
I432
sS'.thisIndex'
p3424
I9
sg15
(lp3425
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3426
S'space'
p3427
asg95
I9
sa(dp3428
g16
(lp3429
S'd'
asg18
S'N'
sS'.thisRepN'
p3430
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3431
I13
sS'.thisN'
p3432
I433
sS'.thisIndex'
p3433
I13
sg15
(lp3434
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I13
sa(dp3435
g16
(lp3436
S'd'
asg18
S'N'
sS'.thisRepN'
p3437
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3438
I14
sS'.thisN'
p3439
I434
sS'.thisIndex'
p3440
I8
sg15
(lp3441
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3442
S'space'
p3443
asg95
I8
sa(dp3444
g16
(lp3445
S'd'
asg18
S'Y'
sS'.thisRepN'
p3446
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3447
I0
sS'.thisN'
p3448
I435
sS'.thisIndex'
p3449
I7
sg15
(lp3450
S'k'
asg30
VF
sg17
S'N'
sg14
I9
sg19
(lp3451
S'space'
p3452
asg95
I7
sa(dp3453
g16
(lp3454
S'd'
asg18
S'Y'
sS'.thisRepN'
p3455
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3456
I1
sS'.thisN'
p3457
I436
sS'.thisIndex'
p3458
I8
sg15
(lp3459
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3460
S'space'
p3461
asg95
I8
sa(dp3462
g16
(lp3463
S'd'
asg18
S'N'
sS'.thisRepN'
p3464
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3465
I2
sS'.thisN'
p3466
I437
sS'.thisIndex'
p3467
I3
sg15
(lp3468
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3469
g16
(lp3470
S'd'
asg18
S'Y'
sS'.thisRepN'
p3471
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3472
I3
sS'.thisN'
p3473
I438
sS'.thisIndex'
p3474
I6
sg15
(lp3475
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3476
S'space'
p3477
asg95
I6
sa(dp3478
g16
(lp3479
S'k'
asg18
S'N'
sS'.thisRepN'
p3480
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3481
I4
sS'.thisN'
p3482
I439
sS'.thisIndex'
p3483
I14
sg15
(lp3484
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I14
sa(dp3485
g16
(lp3486
S'k'
asg18
S'Y'
sS'.thisRepN'
p3487
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3488
I5
sS'.thisN'
p3489
I440
sS'.thisIndex'
p3490
I8
sg15
(lp3491
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
Nsg95
I8
sa(dp3492
g16
(lp3493
S'k'
asg18
S'N'
sS'.thisRepN'
p3494
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3495
I6
sS'.thisN'
p3496
I441
sS'.thisIndex'
p3497
I2
sg15
(lp3498
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
Nsg95
I2
sa(dp3499
g16
(lp3500
S'k'
asg18
S'N'
sS'.thisRepN'
p3501
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3502
I7
sS'.thisN'
p3503
I442
sS'.thisIndex'
p3504
I11
sg15
(lp3505
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I11
sa(dp3506
g16
(lp3507
S'k'
asg18
S'N'
sS'.thisRepN'
p3508
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3509
I8
sS'.thisN'
p3510
I443
sS'.thisIndex'
p3511
I3
sg15
(lp3512
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3513
g16
(lp3514
S'd'
asg18
S'Y'
sS'.thisRepN'
p3515
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3516
I9
sS'.thisN'
p3517
I444
sS'.thisIndex'
p3518
I13
sg15
(lp3519
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I13
sa(dp3520
g16
(lp3521
S'k'
asg18
S'N'
sS'.thisRepN'
p3522
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3523
I10
sS'.thisN'
p3524
I445
sS'.thisIndex'
p3525
I2
sg15
(lp3526
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3527
g16
(lp3528
S'd'
asg18
S'Y'
sS'.thisRepN'
p3529
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3530
I11
sS'.thisN'
p3531
I446
sS'.thisIndex'
p3532
I3
sg15
(lp3533
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3534
g16
(lp3535
S'd'
asg18
S'Y'
sS'.thisRepN'
p3536
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3537
I12
sS'.thisN'
p3538
I447
sS'.thisIndex'
p3539
I2
sg15
(lp3540
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3541
S'space'
p3542
asg95
I2
sa(dp3543
g16
(lp3544
S'k'
asg18
S'Y'
sS'.thisRepN'
p3545
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3546
I13
sS'.thisN'
p3547
I448
sS'.thisIndex'
p3548
I9
sg15
(lp3549
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3550
S'space'
p3551
asg95
I9
sa(dp3552
g16
(lp3553
S'k'
asg18
S'Y'
sg22
I37
sS'.thisN'
p3554
I449
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3555
I14
sS'.thisRepN'
p3556
I29
sg21
I38
sS'.thisIndex'
p3557
I12
sg23
I23
sg15
(lp3558
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3559
S'space'
p3560
asg95
I12
sa(dp3561
g16
(lp3562
S'k'
asg95
I13
sS'.thisRepN'
p3563
I30
sg30
VF
sg31
g32
sS'.thisTrialN'
p3564
I0
sS'.thisN'
p3565
I450
sS'.thisIndex'
p3566
I13
sg15
(lp3567
S'k'
asg17
S'Y'
sg14
I10
sa(dp3568
g16
(lp3569
S'k'
asg95
I7
sS'.thisRepN'
p3570
I30
sg30
VF
sg31
g32
sS'.thisTrialN'
p3571
I1
sS'.thisN'
p3572
I451
sS'.thisIndex'
p3573
I7
sg15
(lp3574
S'k'
asg17
S'Y'
sg14
I10
sa(dp3575
g16
(lp3576
S'd'
asg18
S'N'
sS'.thisRepN'
p3577
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3578
I2
sS'.thisN'
p3579
I452
sS'.thisIndex'
p3580
I11
sg15
(lp3581
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I11
sa(dp3582
g16
(lp3583
S'd'
asg18
S'N'
sS'.thisRepN'
p3584
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3585
I3
sS'.thisN'
p3586
I453
sS'.thisIndex'
p3587
I9
sg15
(lp3588
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I9
sa(dp3589
g16
(lp3590
S'd'
asg18
S'Y'
sS'.thisRepN'
p3591
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3592
I4
sS'.thisN'
p3593
I454
sS'.thisIndex'
p3594
I12
sg15
(lp3595
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3596
S'space'
p3597
asg95
I12
sa(dp3598
g16
(lp3599
S'd'
asg18
S'Y'
sS'.thisRepN'
p3600
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3601
I5
sS'.thisN'
p3602
I455
sS'.thisIndex'
p3603
I13
sg15
(lp3604
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I13
sa(dp3605
g16
(lp3606
S'd'
asg18
S'N'
sS'.thisRepN'
p3607
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3608
I6
sS'.thisN'
p3609
I456
sS'.thisIndex'
p3610
I13
sg15
(lp3611
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I13
sa(dp3612
g16
(lp3613
S'k'
asg18
S'Y'
sS'.thisRepN'
p3614
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3615
I7
sS'.thisN'
p3616
I457
sS'.thisIndex'
p3617
I11
sg15
(lp3618
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3619
S'space'
p3620
asg95
I11
sa(dp3621
g16
(lp3622
S'd'
asg18
S'N'
sS'.thisRepN'
p3623
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3624
I8
sS'.thisN'
p3625
I458
sS'.thisIndex'
p3626
I0
sg15
(lp3627
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp3628
g16
(lp3629
S'k'
asg18
S'Y'
sS'.thisRepN'
p3630
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3631
I9
sS'.thisN'
p3632
I459
sS'.thisIndex'
p3633
I6
sg15
(lp3634
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3635
S'space'
p3636
asg95
I6
sa(dp3637
g16
(lp3638
S'd'
asg18
S'Y'
sS'.thisRepN'
p3639
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3640
I10
sS'.thisN'
p3641
I460
sS'.thisIndex'
p3642
I8
sg15
(lp3643
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3644
S'space'
p3645
asg95
I8
sa(dp3646
g16
(lp3647
S'd'
asg18
S'N'
sS'.thisRepN'
p3648
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3649
I11
sS'.thisN'
p3650
I461
sS'.thisIndex'
p3651
I3
sg15
(lp3652
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I3
sa(dp3653
g16
(lp3654
S'k'
asg18
S'N'
sS'.thisRepN'
p3655
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3656
I12
sS'.thisN'
p3657
I462
sS'.thisIndex'
p3658
I7
sg15
(lp3659
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
(lp3660
S'space'
p3661
asg95
I7
sa(dp3662
g16
(lp3663
S'd'
asg18
S'Y'
sS'.thisRepN'
p3664
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3665
I13
sS'.thisN'
p3666
I463
sS'.thisIndex'
p3667
I3
sg15
(lp3668
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3669
S'space'
p3670
asg95
I3
sa(dp3671
g16
(lp3672
S'd'
asg18
S'N'
sS'.thisRepN'
p3673
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3674
I14
sS'.thisN'
p3675
I464
sS'.thisIndex'
p3676
I14
sg15
(lp3677
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I14
sa(dp3678
g16
(lp3679
S'd'
asg18
S'N'
sS'.thisRepN'
p3680
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3681
I0
sS'.thisN'
p3682
I465
sS'.thisIndex'
p3683
I14
sg15
(lp3684
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I14
sa(dp3685
g16
(lp3686
S'd'
asg18
S'N'
sS'.thisRepN'
p3687
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3688
I1
sS'.thisN'
p3689
I466
sS'.thisIndex'
p3690
I8
sg15
(lp3691
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3692
g16
(lp3693
S'd'
asg18
S'N'
sS'.thisRepN'
p3694
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3695
I2
sS'.thisN'
p3696
I467
sS'.thisIndex'
p3697
I1
sg15
(lp3698
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I1
sa(dp3699
g16
(lp3700
S'd'
asg18
S'N'
sS'.thisRepN'
p3701
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3702
I3
sS'.thisN'
p3703
I468
sS'.thisIndex'
p3704
I3
sg15
(lp3705
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3706
g16
(lp3707
S'd'
asg18
S'N'
sS'.thisRepN'
p3708
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3709
I4
sS'.thisN'
p3710
I469
sS'.thisIndex'
p3711
I12
sg15
(lp3712
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I12
sa(dp3713
g16
(lp3714
S'd'
asg18
S'N'
sS'.thisRepN'
p3715
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3716
I5
sS'.thisN'
p3717
I470
sS'.thisIndex'
p3718
I2
sg15
(lp3719
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I2
sa(dp3720
g16
(lp3721
S'k'
asg18
S'N'
sS'.thisRepN'
p3722
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3723
I6
sS'.thisN'
p3724
I471
sS'.thisIndex'
p3725
I10
sg15
(lp3726
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I10
sa(dp3727
g16
(lp3728
S'k'
asg18
S'Y'
sS'.thisRepN'
p3729
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3730
I7
sS'.thisN'
p3731
I472
sS'.thisIndex'
p3732
I11
sg15
(lp3733
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I11
sa(dp3734
g16
(lp3735
S'k'
asg18
S'N'
sS'.thisRepN'
p3736
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3737
I8
sS'.thisN'
p3738
I473
sS'.thisIndex'
p3739
I6
sg15
(lp3740
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I6
sa(dp3741
g16
(lp3742
S'd'
asg18
S'N'
sS'.thisRepN'
p3743
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3744
I9
sS'.thisN'
p3745
I474
sS'.thisIndex'
p3746
I8
sg15
(lp3747
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I8
sa(dp3748
g16
(lp3749
S'd'
asg18
S'N'
sS'.thisRepN'
p3750
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3751
I10
sS'.thisN'
p3752
I475
sS'.thisIndex'
p3753
I13
sg15
(lp3754
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I13
sa(dp3755
g16
(lp3756
S'k'
asg18
S'N'
sS'.thisRepN'
p3757
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3758
I11
sS'.thisN'
p3759
I476
sS'.thisIndex'
p3760
I13
sg15
(lp3761
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I13
sa(dp3762
g16
(lp3763
S'k'
asg18
S'N'
sS'.thisRepN'
p3764
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3765
I12
sS'.thisN'
p3766
I477
sS'.thisIndex'
p3767
I5
sg15
(lp3768
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3769
g16
(lp3770
S'k'
asg18
S'Y'
sS'.thisRepN'
p3771
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3772
I13
sS'.thisN'
p3773
I478
sS'.thisIndex'
p3774
I2
sg15
(lp3775
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I2
sa(dp3776
g16
(lp3777
S'd'
asg18
S'Y'
sS'.thisRepN'
p3778
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3779
I14
sS'.thisN'
p3780
I479
sS'.thisIndex'
p3781
I9
sg15
(lp3782
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3783
S'space'
p3784
asg95
I9
sa(dp3785
g16
(lp3786
S'd'
asg18
S'Y'
sS'.thisRepN'
p3787
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3788
I0
sS'.thisN'
p3789
I480
sS'.thisIndex'
p3790
I10
sg15
(lp3791
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I10
sa(dp3792
g16
(lp3793
S'd'
asg18
S'N'
sS'.thisRepN'
p3794
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3795
I1
sS'.thisN'
p3796
I481
sS'.thisIndex'
p3797
I7
sg15
(lp3798
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I7
sa(dp3799
g16
(lp3800
S'd'
asg18
S'N'
sS'.thisRepN'
p3801
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3802
I2
sS'.thisN'
p3803
I482
sS'.thisIndex'
p3804
I2
sg15
(lp3805
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I2
sa(dp3806
g16
(lp3807
S'd'
asg18
S'N'
sS'.thisRepN'
p3808
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3809
I3
sS'.thisN'
p3810
I483
sS'.thisIndex'
p3811
I4
sg15
(lp3812
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I4
sa(dp3813
g16
(lp3814
S'd'
asg18
S'Y'
sS'.thisRepN'
p3815
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3816
I4
sS'.thisN'
p3817
I484
sS'.thisIndex'
p3818
I10
sg15
(lp3819
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I10
sa(dp3820
g16
(lp3821
S'd'
asg18
S'N'
sS'.thisRepN'
p3822
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3823
I5
sS'.thisN'
p3824
I485
sS'.thisIndex'
p3825
I8
sg15
(lp3826
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3827
g16
(lp3828
S'k'
asg18
S'Y'
sS'.thisRepN'
p3829
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3830
I6
sS'.thisN'
p3831
I486
sS'.thisIndex'
p3832
I4
sg15
(lp3833
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3834
S'space'
p3835
asg95
I4
sa(dp3836
g16
(lp3837
S'k'
asg18
S'Y'
sS'.thisRepN'
p3838
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3839
I7
sS'.thisN'
p3840
I487
sS'.thisIndex'
p3841
I0
sg15
(lp3842
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3843
S'space'
p3844
asg95
I0
sa(dp3845
g16
(lp3846
S'k'
asg18
S'Y'
sS'.thisRepN'
p3847
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3848
I8
sS'.thisN'
p3849
I488
sS'.thisIndex'
p3850
I14
sg15
(lp3851
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I14
sa(dp3852
g16
(lp3853
S'k'
asg18
S'N'
sS'.thisRepN'
p3854
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3855
I9
sS'.thisN'
p3856
I489
sS'.thisIndex'
p3857
I5
sg15
(lp3858
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3859
g16
(lp3860
S'k'
asg18
S'N'
sS'.thisRepN'
p3861
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3862
I10
sS'.thisN'
p3863
I490
sS'.thisIndex'
p3864
I0
sg15
(lp3865
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp3866
g16
(lp3867
S'd'
asg18
S'Y'
sS'.thisRepN'
p3868
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3869
I11
sS'.thisN'
p3870
I491
sS'.thisIndex'
p3871
I13
sg15
(lp3872
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I13
sa(dp3873
g16
(lp3874
S'k'
asg18
S'Y'
sS'.thisRepN'
p3875
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3876
I12
sS'.thisN'
p3877
I492
sS'.thisIndex'
p3878
I10
sg15
(lp3879
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I10
sa(dp3880
g16
(lp3881
S'd'
asg18
S'N'
sS'.thisRepN'
p3882
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3883
I13
sS'.thisN'
p3884
I493
sS'.thisIndex'
p3885
I2
sg15
(lp3886
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I2
sa(dp3887
g16
(lp3888
S'k'
asg18
S'N'
sS'.thisRepN'
p3889
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3890
I14
sS'.thisN'
p3891
I494
sS'.thisIndex'
p3892
I14
sg15
(lp3893
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I14
sa(dp3894
g16
(lp3895
S'k'
asg18
S'Y'
sS'.thisRepN'
p3896
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3897
I0
sS'.thisN'
p3898
I495
sS'.thisIndex'
p3899
I8
sg15
(lp3900
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3901
g16
(lp3902
S'd'
asg18
S'N'
sS'.thisRepN'
p3903
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3904
I1
sS'.thisN'
p3905
I496
sS'.thisIndex'
p3906
I3
sg15
(lp3907
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I3
sa(dp3908
g16
(lp3909
S'k'
asg18
S'Y'
sS'.thisRepN'
p3910
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3911
I2
sS'.thisN'
p3912
I497
sS'.thisIndex'
p3913
I13
sg15
(lp3914
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I13
sa(dp3915
g16
(lp3916
S'd'
asg18
S'Y'
sS'.thisRepN'
p3917
I33
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3918
I3
sS'.thisN'
p3919
I498
sS'.thisIndex'
p3920
I10
sg15
(lp3921
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I10
sa(dp3922
g16
(lp3923
S'k'
asg18
S'Y'
sg22
I36
sS'.thisN'
p3924
I499
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3925
I4
sS'.thisRepN'
p3926
I33
sg21
I36
sS'.thisIndex'
p3927
I14
sg23
I20
sg15
(lp3928
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3929
S'space'
p3930
asg95
I14
sa(dp3931
S'.thisIndex'
p3932
I5
sS'.thisRepN'
p3933
I33
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p3934
I5
sS'.thisN'
p3935
I500
sg25
S'Y'
sg24
S'Y'
sg15
Nsg17
S'Timed out'
p3936
sg14
I11
sg95
I5
sa(dp3937
S'.thisIndex'
p3938
I9
sS'.thisRepN'
p3939
I33
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p3940
I6
sS'.thisN'
p3941
I501
sg25
S'Y'
sg15
Nsg17
g3936
sg14
I11
sg95
I9
sa(dp3942
g18
S'Y'
sS'.thisRepN'
p3943
I33
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3944
I7
sS'.thisN'
p3945
I502
sg25
S'Y'
sg15
Nsg30
VF
sg17
g3936
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p3946
I10
sa(dp3947
g18
S'N'
sS'.thisRepN'
p3948
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3949
I8
sS'.thisN'
p3950
I503
sg25
S'Y'
sg15
Nsg30
VF
sg17
g3936
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p3951
I5
sa(dp3952
g18
S'Y'
sS'.thisRepN'
p3953
I33
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3954
I9
sS'.thisN'
p3955
I504
sg25
S'Y'
sg15
Nsg30
VF
sg17
g3936
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p3956
I8
sa(dp3957
g16
(lp3958
S'k'
asg18
S'N'
sS'.thisRepN'
p3959
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3960
I10
sS'.thisN'
p3961
I505
sg25
S'Y'
sg15
(lp3962
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p3963
I8
sa(dp3964
g16
(lp3965
S'd'
asg18
S'Y'
sS'.thisRepN'
p3966
I33
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3967
I11
sS'.thisN'
p3968
I506
sg25
S'Y'
sg15
(lp3969
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p3970
I5
sa(dp3971
g16
(lp3972
S'k'
asg18
S'Y'
sS'.thisRepN'
p3973
I33
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3974
I12
sS'.thisN'
p3975
I507
sg25
S'Y'
sg15
(lp3976
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p3977
I4
sa(dp3978
g16
(lp3979
S'k'
asg18
S'Y'
sS'.thisRepN'
p3980
I33
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3981
I13
sS'.thisN'
p3982
I508
sg25
S'Y'
sg15
(lp3983
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p3984
I7
sa(dp3985
g16
(lp3986
S'k'
asg18
S'N'
sS'.thisRepN'
p3987
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3988
I14
sS'.thisN'
p3989
I509
sg25
S'Y'
sg15
(lp3990
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p3991
I2
sa(dp3992
g16
(lp3993
S'k'
asg18
S'Y'
sS'.thisRepN'
p3994
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3995
I0
sS'.thisN'
p3996
I510
sg25
S'Y'
sg15
(lp3997
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p3998
I7
sa(dp3999
g16
(lp4000
S'd'
asg18
S'N'
sS'.thisRepN'
p4001
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4002
I1
sS'.thisN'
p4003
I511
sg25
S'Y'
sg15
(lp4004
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4005
I4
sa(dp4006
g16
(lp4007
S'k'
asg18
S'N'
sS'.thisRepN'
p4008
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4009
I2
sS'.thisN'
p4010
I512
sg25
S'Y'
sg15
(lp4011
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I14
sS'.thisIndex'
p4012
I14
sa(dp4013
g16
(lp4014
S'k'
asg18
S'Y'
sS'.thisRepN'
p4015
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4016
I3
sS'.thisN'
p4017
I513
sg25
S'Y'
sg15
(lp4018
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4019
I5
sa(dp4020
g16
(lp4021
S'd'
asg18
S'Y'
sS'.thisRepN'
p4022
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4023
I4
sS'.thisN'
p4024
I514
sg25
S'Y'
sg15
(lp4025
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4026
I1
sa(dp4027
g16
(lp4028
S'd'
asg18
S'Y'
sS'.thisRepN'
p4029
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4030
I5
sS'.thisN'
p4031
I515
sg25
S'Y'
sg15
(lp4032
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I14
sS'.thisIndex'
p4033
I14
sa(dp4034
g16
(lp4035
S'k'
asg18
S'N'
sS'.thisRepN'
p4036
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4037
I6
sS'.thisN'
p4038
I516
sg25
S'Y'
sg15
(lp4039
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4040
I6
sa(dp4041
g16
(lp4042
S'd'
asg18
S'Y'
sS'.thisRepN'
p4043
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4044
I7
sS'.thisN'
p4045
I517
sg25
S'Y'
sg15
(lp4046
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4047
S'space'
p4048
asg95
I8
sS'.thisIndex'
p4049
I8
sa(dp4050
g16
(lp4051
S'd'
asg18
S'Y'
sS'.thisRepN'
p4052
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4053
I8
sS'.thisN'
p4054
I518
sg25
S'Y'
sg15
(lp4055
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4056
I9
sa(dp4057
g16
(lp4058
S'd'
asg18
S'N'
sS'.thisRepN'
p4059
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4060
I9
sS'.thisN'
p4061
I519
sg25
S'Y'
sg15
(lp4062
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4063
I1
sa(dp4064
g16
(lp4065
S'k'
asg18
S'N'
sS'.thisRepN'
p4066
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4067
I10
sS'.thisN'
p4068
I520
sg25
S'Y'
sg15
(lp4069
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4070
I3
sa(dp4071
g16
(lp4072
S'd'
asg18
S'Y'
sS'.thisRepN'
p4073
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4074
I11
sS'.thisN'
p4075
I521
sg25
S'Y'
sg15
(lp4076
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4077
I3
sa(dp4078
g16
(lp4079
S'k'
asg18
S'N'
sS'.thisRepN'
p4080
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4081
I12
sS'.thisN'
p4082
I522
sg25
S'Y'
sg15
(lp4083
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I12
sS'.thisIndex'
p4084
I12
sa(dp4085
g16
(lp4086
S'k'
asg18
S'Y'
sS'.thisRepN'
p4087
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4088
I13
sS'.thisN'
p4089
I523
sg25
S'Y'
sg15
(lp4090
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4091
S'space'
p4092
asg95
I12
sS'.thisIndex'
p4093
I12
sa(dp4094
g16
(lp4095
S'k'
asg18
S'Y'
sS'.thisRepN'
p4096
I34
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4097
I14
sS'.thisN'
p4098
I524
sg25
S'Y'
sg15
(lp4099
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I11
sS'.thisIndex'
p4100
I11
sa(dp4101
g16
(lp4102
S'k'
asg18
S'N'
sS'.thisRepN'
p4103
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4104
I0
sS'.thisN'
p4105
I525
sg25
S'Y'
sg15
(lp4106
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4107
I5
sa(dp4108
g16
(lp4109
S'k'
asg18
S'N'
sS'.thisRepN'
p4110
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4111
I1
sS'.thisN'
p4112
I526
sg25
S'Y'
sg15
(lp4113
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4114
I5
sa(dp4115
g16
(lp4116
S'k'
asg18
S'N'
sS'.thisRepN'
p4117
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4118
I2
sS'.thisN'
p4119
I527
sg25
S'Y'
sg15
(lp4120
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I14
sS'.thisIndex'
p4121
I14
sa(dp4122
g16
(lp4123
S'd'
asg18
S'Y'
sS'.thisRepN'
p4124
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4125
I3
sS'.thisN'
p4126
I528
sg25
S'Y'
sg15
(lp4127
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4128
S'space'
p4129
asg95
I3
sS'.thisIndex'
p4130
I3
sa(dp4131
g16
(lp4132
S'k'
asg18
S'N'
sS'.thisRepN'
p4133
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4134
I4
sS'.thisN'
p4135
I529
sg25
S'Y'
sg15
(lp4136
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4137
S'space'
p4138
asg95
I12
sS'.thisIndex'
p4139
I12
sa(dp4140
g16
(lp4141
S'k'
asg18
S'N'
sS'.thisRepN'
p4142
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4143
I5
sS'.thisN'
p4144
I530
sg25
S'Y'
sg15
(lp4145
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I13
sS'.thisIndex'
p4146
I13
sa(dp4147
g16
(lp4148
S'd'
asg18
S'Y'
sS'.thisRepN'
p4149
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4150
I6
sS'.thisN'
p4151
I531
sg25
S'Y'
sg15
(lp4152
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4153
S'space'
p4154
asg95
I6
sS'.thisIndex'
p4155
I6
sa(dp4156
g16
(lp4157
S'k'
asg18
S'Y'
sS'.thisRepN'
p4158
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4159
I7
sS'.thisN'
p4160
I532
sg25
S'Y'
sg15
(lp4161
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4162
S'space'
p4163
asg95
I0
sS'.thisIndex'
p4164
I0
sa(dp4165
g16
(lp4166
S'd'
asg18
S'Y'
sS'.thisRepN'
p4167
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4168
I8
sS'.thisN'
p4169
I533
sg25
S'Y'
sg15
(lp4170
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4171
I10
sa(dp4172
g16
(lp4173
S'd'
asg18
S'Y'
sS'.thisRepN'
p4174
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4175
I9
sS'.thisN'
p4176
I534
sg25
S'Y'
sg15
(lp4177
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4178
I0
sa(dp4179
g16
(lp4180
S'k'
asg18
S'N'
sS'.thisRepN'
p4181
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4182
I10
sS'.thisN'
p4183
I535
sg25
S'Y'
sg15
(lp4184
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I13
sS'.thisIndex'
p4185
I13
sa(dp4186
g16
(lp4187
S'd'
asg18
S'Y'
sS'.thisRepN'
p4188
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4189
I11
sS'.thisN'
p4190
I536
sg25
S'Y'
sg15
(lp4191
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4192
I2
sa(dp4193
g16
(lp4194
S'd'
asg18
S'Y'
sS'.thisRepN'
p4195
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4196
I12
sS'.thisN'
p4197
I537
sg25
S'Y'
sg15
(lp4198
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4199
I10
sa(dp4200
g16
(lp4201
S'd'
asg18
S'Y'
sS'.thisRepN'
p4202
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4203
I13
sS'.thisN'
p4204
I538
sg25
S'Y'
sg15
(lp4205
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4206
S'space'
p4207
asg95
I1
sS'.thisIndex'
p4208
I1
sa(dp4209
g16
(lp4210
S'k'
asg18
S'Y'
sS'.thisRepN'
p4211
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4212
I14
sS'.thisN'
p4213
I539
sg25
S'Y'
sg15
(lp4214
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4215
S'space'
p4216
asg95
I13
sS'.thisIndex'
p4217
I13
sa(dp4218
g16
(lp4219
S'k'
asg18
S'Y'
sS'.thisRepN'
p4220
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4221
I0
sS'.thisN'
p4222
I540
sg25
S'Y'
sg15
(lp4223
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4224
S'space'
p4225
asg95
I14
sS'.thisIndex'
p4226
I14
sa(dp4227
g16
(lp4228
S'd'
asg18
S'N'
sS'.thisRepN'
p4229
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4230
I1
sS'.thisN'
p4231
I541
sg25
S'Y'
sg15
(lp4232
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I14
sS'.thisIndex'
p4233
I14
sa(dp4234
g16
(lp4235
S'd'
asg18
S'Y'
sS'.thisRepN'
p4236
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4237
I2
sS'.thisN'
p4238
I542
sg25
S'Y'
sg15
(lp4239
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4240
S'space'
p4241
asg95
I5
sS'.thisIndex'
p4242
I5
sa(dp4243
g16
(lp4244
S'd'
asg18
S'N'
sS'.thisRepN'
p4245
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4246
I3
sS'.thisN'
p4247
I543
sg25
S'Y'
sg15
(lp4248
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4249
I10
sa(dp4250
g16
(lp4251
S'k'
asg18
S'N'
sS'.thisRepN'
p4252
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4253
I4
sS'.thisN'
p4254
I544
sg25
S'Y'
sg15
(lp4255
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4256
I0
sa(dp4257
g16
(lp4258
S'k'
asg18
S'N'
sS'.thisRepN'
p4259
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4260
I5
sS'.thisN'
p4261
I545
sg25
S'Y'
sg15
(lp4262
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4263
I2
sa(dp4264
g16
(lp4265
S'k'
asg18
S'N'
sS'.thisRepN'
p4266
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4267
I6
sS'.thisN'
p4268
I546
sg25
S'Y'
sg15
(lp4269
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4270
I7
sa(dp4271
g16
(lp4272
S'k'
asg18
S'N'
sS'.thisRepN'
p4273
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4274
I7
sS'.thisN'
p4275
I547
sg25
S'Y'
sg15
(lp4276
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg95
I11
sS'.thisIndex'
p4277
I11
sa(dp4278
g18
S'N'
sS'.thisRepN'
p4279
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4280
I8
sS'.thisN'
p4281
I548
sg25
S'Y'
sg15
Nsg30
VF
sg17
g3936
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4282
I1
sa(dp4283
g16
(lp4284
S'd'
asg18
S'N'
sg22
I31
sg26
S'Y'
sS'.thisN'
p4285
I549
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4286
I9
sS'.thisRepN'
p4287
I36
sg21
I30
sg25
S'Y'
sg23
I25
sg15
(lp4288
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I14
sS'.thisIndex'
p4289
I14
sa(dp4290
g16
(lp4291
S'k'
asS'.thisIndex'
p4292
I11
sS'.thisRepN'
p4293
I36
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4294
I10
sS'.thisN'
p4295
I550
sg25
S'Y'
sg15
(lp4296
S'k'
asg17
S'N'
sg14
I12
sg95
I11
sa(dp4297
g16
(lp4298
S'd'
asS'.thisIndex'
p4299
I1
sS'.thisRepN'
p4300
I36
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4301
I11
sS'.thisN'
p4302
I551
sg25
S'Y'
sg15
(lp4303
S'k'
asg17
S'Y'
sg14
I12
sg95
I1
sa(dp4304
g16
(lp4305
S'd'
asg18
S'N'
sS'.thisRepN'
p4306
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4307
I12
sS'.thisN'
p4308
I552
sg25
S'Y'
sg15
(lp4309
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4310
I10
sa(dp4311
g16
(lp4312
S'd'
asg18
S'Y'
sS'.thisRepN'
p4313
I36
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4314
I13
sS'.thisN'
p4315
I553
sg25
S'Y'
sg15
(lp4316
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I12
sS'.thisIndex'
p4317
I12
sa(dp4318
g16
(lp4319
S'd'
asg18
S'Y'
sS'.thisRepN'
p4320
I36
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4321
I14
sS'.thisN'
p4322
I554
sg25
S'Y'
sg15
(lp4323
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4324
I5
sa(dp4325
g16
(lp4326
S'd'
asg18
S'N'
sS'.thisRepN'
p4327
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4328
I0
sS'.thisN'
p4329
I555
sg25
S'Y'
sg15
(lp4330
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4331
I5
sa(dp4332
g16
(lp4333
S'd'
asg18
S'Y'
sS'.thisRepN'
p4334
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4335
I1
sS'.thisN'
p4336
I556
sg25
S'Y'
sg15
(lp4337
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4338
S'space'
p4339
asg95
I0
sS'.thisIndex'
p4340
I0
sa(dp4341
g16
(lp4342
S'd'
asg18
S'Y'
sS'.thisRepN'
p4343
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4344
I2
sS'.thisN'
p4345
I557
sg25
S'Y'
sg15
(lp4346
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4347
S'space'
p4348
asg95
I7
sS'.thisIndex'
p4349
I7
sa(dp4350
g16
(lp4351
S'k'
asg18
S'N'
sS'.thisRepN'
p4352
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4353
I3
sS'.thisN'
p4354
I558
sg25
S'Y'
sg15
(lp4355
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4356
I8
sa(dp4357
g16
(lp4358
S'k'
asg18
S'Y'
sS'.thisRepN'
p4359
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4360
I4
sS'.thisN'
p4361
I559
sg25
S'Y'
sg15
(lp4362
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4363
S'space'
p4364
asg95
I6
sS'.thisIndex'
p4365
I6
sa(dp4366
g16
(lp4367
S'd'
asg18
S'N'
sS'.thisRepN'
p4368
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4369
I5
sS'.thisN'
p4370
I560
sg25
S'Y'
sg15
(lp4371
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4372
I10
sa(dp4373
g16
(lp4374
S'k'
asg18
S'Y'
sS'.thisRepN'
p4375
I37
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4376
I6
sS'.thisN'
p4377
I561
sg25
S'Y'
sg15
(lp4378
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4379
I4
sa(dp4380
g18
S'N'
sS'.thisRepN'
p4381
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4382
I7
sS'.thisN'
p4383
I562
sg25
S'Y'
sg15
Nsg30
VF
sg17
g3936
sg14
I12
sg19
Nsg95
I13
sS'.thisIndex'
p4384
I13
sa(dp4385
g16
(lp4386
S'k'
asg18
S'N'
sS'.thisRepN'
p4387
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4388
I8
sS'.thisN'
p4389
I563
sg25
S'Y'
sg15
(lp4390
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I13
sS'.thisIndex'
p4391
I13
sa(dp4392
g18
S'Y'
sS'.thisRepN'
p4393
I37
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4394
I9
sS'.thisN'
p4395
I564
sg25
S'Y'
sg15
Nsg30
VF
sg17
g3936
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4396
I3
sa(dp4397
g16
(lp4398
S'd'
asg18
S'Y'
sS'.thisRepN'
p4399
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4400
I10
sS'.thisN'
p4401
I565
sg25
S'Y'
sg15
(lp4402
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4403
S'space'
p4404
asg95
I4
sS'.thisIndex'
p4405
I4
sa(dp4406
g16
(lp4407
S'k'
asg18
S'Y'
sS'.thisRepN'
p4408
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4409
I11
sS'.thisN'
p4410
I566
sg25
S'Y'
sg15
(lp4411
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4412
S'space'
p4413
asg95
I8
sS'.thisIndex'
p4414
I8
sa(dp4415
g16
(lp4416
S'k'
asg18
S'Y'
sS'.thisRepN'
p4417
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4418
I12
sS'.thisN'
p4419
I567
sg25
S'Y'
sg15
(lp4420
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4421
S'space'
p4422
asg95
I3
sS'.thisIndex'
p4423
I3
sa(dp4424
g16
(lp4425
S'd'
asg18
S'Y'
sS'.thisRepN'
p4426
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4427
I13
sS'.thisN'
p4428
I568
sg25
S'Y'
sg15
(lp4429
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4430
S'space'
p4431
asg95
I14
sS'.thisIndex'
p4432
I14
sa(dp4433
g16
(lp4434
S'd'
asg18
S'Y'
sS'.thisRepN'
p4435
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4436
I14
sS'.thisN'
p4437
I569
sg25
S'Y'
sg15
(lp4438
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4439
S'space'
p4440
asg95
I6
sS'.thisIndex'
p4441
I6
sa(dp4442
g16
(lp4443
S'k'
asg18
S'N'
sS'.thisRepN'
p4444
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4445
I0
sS'.thisN'
p4446
I570
sg25
S'Y'
sg15
(lp4447
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4448
I5
sa(dp4449
g18
S'N'
sS'.thisRepN'
p4450
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4451
I1
sS'.thisN'
p4452
I571
sg25
S'Y'
sg15
Nsg30
VF
sg17
g3936
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4453
I8
sa(dp4454
g16
(lp4455
S'k'
asg18
S'N'
sS'.thisRepN'
p4456
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4457
I2
sS'.thisN'
p4458
I572
sg25
S'Y'
sg15
(lp4459
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4460
I9
sa(dp4461
g16
(lp4462
S'd'
asg18
S'N'
sS'.thisRepN'
p4463
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4464
I3
sS'.thisN'
p4465
I573
sg25
S'Y'
sg15
(lp4466
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4467
I3
sa(dp4468
g16
(lp4469
S'k'
asg18
S'Y'
sS'.thisRepN'
p4470
I38
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4471
I4
sS'.thisN'
p4472
I574
sg25
S'Y'
sg15
(lp4473
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I14
sS'.thisIndex'
p4474
I14
sa(dp4475
g16
(lp4476
S'k'
asg18
S'N'
sS'.thisRepN'
p4477
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4478
I5
sS'.thisN'
p4479
I575
sg25
S'Y'
sg15
(lp4480
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I2
sS'.thisIndex'
p4481
I2
sa(dp4482
g16
(lp4483
S'd'
asg18
S'Y'
sS'.thisRepN'
p4484
I38
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4485
I6
sS'.thisN'
p4486
I576
sg25
S'Y'
sg15
(lp4487
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4488
I0
sa(dp4489
g16
(lp4490
S'd'
asg18
S'Y'
sS'.thisRepN'
p4491
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4492
I7
sS'.thisN'
p4493
I577
sg25
S'Y'
sg15
(lp4494
S'd'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4495
S'space'
p4496
asg95
I8
sS'.thisIndex'
p4497
I8
sa(dp4498
g16
(lp4499
S'k'
asg18
S'N'
sS'.thisRepN'
p4500
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4501
I8
sS'.thisN'
p4502
I578
sg25
S'Y'
sg15
(lp4503
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4504
I9
sa(dp4505
g16
(lp4506
S'd'
asg18
S'Y'
sS'.thisRepN'
p4507
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4508
I9
sS'.thisN'
p4509
I579
sg25
S'Y'
sg15
(lp4510
S'd'
asg30
VF
sg17
S'N'
sg14
I12
sg19
(lp4511
S'space'
p4512
asg95
I4
sS'.thisIndex'
p4513
I4
sa(dp4514
g16
(lp4515
S'd'
asg18
S'N'
sS'.thisRepN'
p4516
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4517
I10
sS'.thisN'
p4518
I580
sg25
S'Y'
sg15
(lp4519
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I7
sS'.thisIndex'
p4520
I7
sa(dp4521
g16
(lp4522
S'd'
asg18
S'Y'
sS'.thisRepN'
p4523
I38
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4524
I11
sS'.thisN'
p4525
I581
sg25
S'Y'
sg15
(lp4526
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4527
I5
sa(dp4528
g16
(lp4529
S'd'
asg18
S'Y'
sS'.thisRepN'
p4530
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4531
I12
sS'.thisN'
p4532
I582
sg25
S'Y'
sg15
(lp4533
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4534
S'space'
p4535
asg95
I7
sS'.thisIndex'
p4536
I7
sa(dp4537
g18
S'Y'
sS'.thisRepN'
p4538
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4539
I13
sS'.thisN'
p4540
I583
sg25
S'Y'
sg15
Nsg30
VF
sg17
g3936
sg14
I12
sg19
(lp4541
S'space'
p4542
asg95
I4
sS'.thisIndex'
p4543
I4
sa(dp4544
g16
(lp4545
S'd'
asg18
S'Y'
sS'.thisRepN'
p4546
I38
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4547
I14
sS'.thisN'
p4548
I584
sg25
S'Y'
sg15
(lp4549
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4550
I8
sa(dp4551
g16
(lp4552
S'd'
asg18
S'N'
sS'.thisRepN'
p4553
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4554
I0
sS'.thisN'
p4555
I585
sg25
S'Y'
sg15
(lp4556
S'd'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4557
I6
sa(dp4558
g16
(lp4559
S'd'
asg18
S'Y'
sS'.thisRepN'
p4560
I39
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4561
I1
sS'.thisN'
p4562
I586
sg25
S'Y'
sg15
(lp4563
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I11
sS'.thisIndex'
p4564
I11
sa(dp4565
g16
(lp4566
S'd'
asg18
S'N'
sS'.thisRepN'
p4567
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4568
I2
sS'.thisN'
p4569
I587
sg25
S'Y'
sg15
(lp4570
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I6
sS'.thisIndex'
p4571
I6
sa(dp4572
g16
(lp4573
S'd'
asg18
S'Y'
sS'.thisRepN'
p4574
I39
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4575
I3
sS'.thisN'
p4576
I588
sg25
S'Y'
sg15
(lp4577
S'd'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4578
I0
sa(dp4579
g16
(lp4580
S'k'
asg18
S'N'
sS'.thisRepN'
p4581
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4582
I4
sS'.thisN'
p4583
I589
sg25
S'Y'
sg15
(lp4584
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4585
I3
sa(dp4586
g16
(lp4587
S'd'
asg18
S'N'
sS'.thisRepN'
p4588
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4589
I5
sS'.thisN'
p4590
I590
sg25
S'Y'
sg15
(lp4591
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4592
I0
sa(dp4593
g16
(lp4594
S'd'
asg18
S'N'
sS'.thisRepN'
p4595
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4596
I6
sS'.thisN'
p4597
I591
sg25
S'Y'
sg15
(lp4598
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4599
I0
sa(dp4600
g18
S'Y'
sS'.thisRepN'
p4601
I39
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4602
I7
sS'.thisN'
p4603
I592
sg25
S'Y'
sg15
Nsg30
VF
sg17
g3936
sg14
I12
sg19
(lp4604
S'd'
asg95
I7
sS'.thisIndex'
p4605
I7
sa(dp4606
g18
S'Y'
sS'.thisRepN'
p4607
I39
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4608
I8
sS'.thisN'
p4609
I593
sg25
S'Y'
sg15
Nsg30
VF
sg17
g3936
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4610
I9
sa(dp4611
g16
(lp4612
S'd'
asg18
S'N'
sS'.thisRepN'
p4613
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4614
I9
sS'.thisN'
p4615
I594
sg25
S'Y'
sg15
(lp4616
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4617
I0
sa(dp4618
g16
(lp4619
S'd'
asg18
S'Y'
sS'.thisRepN'
p4620
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4621
I10
sS'.thisN'
p4622
I595
sg25
S'Y'
sg15
(lp4623
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4624
S'space'
p4625
asg95
I9
sS'.thisIndex'
p4626
I9
sa(dp4627
g16
(lp4628
S'd'
asg18
S'N'
sS'.thisRepN'
p4629
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4630
I11
sS'.thisN'
p4631
I596
sg25
S'Y'
sg15
(lp4632
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4633
I5
sa(dp4634
g16
(lp4635
S'k'
asg18
S'N'
sS'.thisRepN'
p4636
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4637
I12
sS'.thisN'
p4638
I597
sg25
S'Y'
sg15
(lp4639
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4640
I10
sa(dp4641
g16
(lp4642
S'k'
asg18
S'N'
sS'.thisRepN'
p4643
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4644
I13
sS'.thisN'
p4645
I598
sg25
S'Y'
sg15
(lp4646
S'k'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4647
I9
sa(dp4648
g16
(lp4649
S'k'
asg18
S'N'
sg22
I35
sg26
S'Y'
sS'.thisN'
p4650
I599
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4651
I14
sS'.thisRepN'
p4652
I39
sg21
I33
sg25
S'Y'
sg23
I25
sg15
(lp4653
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4654
S'space'
p4655
asg95
I9
sS'.thisIndex'
p4656
I9
sasS'loops'
p4657
(lp4658
g1
(g35
g3
NtRp4659
(dp4660
g38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4661
sg40
(lp4662
sg41
I75307536
sg10
S''
sg6
g42
sg43
I1
sg27
I01
sg28
Nsg44
g1
(g45
g46
(dp4663
g48
g49
(g50
g51
g52
S'b'
tRp4664
(I1
(I600
I1
tg55
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg56
g49
(g50
g51
g52
S'b'
tRp4665
(I1
(I600
I1
tg55
I00
S'\x00\x00\rD\x00\x00&C\x00\x80\x96C\x00\x80\xaaC\x00\x00TC\x00\x00-C\x00\x00\xe4C\x00\x80\xb2C\x00\x80\xa4C\x00\x00BC\x00\xc0\x12D\x00\x00\x98C\x00\x80\xcaC\x00\x00\xc6C\x00\x00\xb0B\x00\x00\xa6B\x00\x00\xfeB\x00\x00\nD\x00\x80\x89C\x00\x00\x16C\x00\x00 C\x00\x00^C\x00\xc0\x14D\x00\x00\xceC\x00\x00ZC\x00\x80\xbcC\x00\x80\xc5C\x00\x80\xd9C\x00\x80\xe2C\x00\x00\xa0A\x00\x00hB\x00\x00\x8aB\x00\x00\xb6C\x00\x00\xadC\x00\x00\x1aC\x00\x00\xbcB\x00\x00\xbaB\x00\x00OC\x00\x00\x87C\x00\x00\x0eC\x00\x00\xeeB\x00\xc0\x13D\x00\x00\xe3C\x00\x00\xbbC\x00\x00\x9eC\x00\xc0\x01D\x00\x00\x12C\x00\x00\x06D\x00\x00\xe0A\x00\x00LC\x00\x00\xdeC\x00\x00\xdeB\x00\x00\x10C\x00\x00\xe9C\x00\x00$B\x00\x00\xc2B\x00\x80\xe7C\x00\x00]C\x00\x80\xc2C\x00\x00\xd2C\x00\x00\xdaB\x00\x00\xfcC\x00\x00\xe6C\x00\x00\xd1C\x00@\x14D\x00\x00\xa2B\x00@\x06D\x00\x80\xadC\x00\x00\x1cB\x00\x00#C\x00\x00TB\x00@\x01D\x00\x00\x05C\x00\x80\xeaC\x00\x80\xa5C\x00\x00\xb5C\x00\x00\xaeB\x00\x00\x15C\x00\x00\xecB\x00\x001C\x00\x00\x8bC\x00\x00\xedC\x00\x00+C\x00\x00yC\x00\x00@A\x00\x00\rC\x00\x00/C\x00\x80\xffC\x00\x80\x8aC\x00\x00\xe8B\x00\x00jC\x00\x00\x0eD\x00\x00\xbdC\x00\x00\x10B\x00\x00{C\x00@\x0eD\x00\x00\x86B\x00\x00\x8cC\x00\x00"C\x00\x007C\x00\x80\x05D\x00\x80\xefC\x00\x80\xfbC\x00\x80\xf0C\x00\x00\x84C\x00\x80\x8bC\x00\x80\xb9C\x00\x00\x14D\x00\x00\x92B\x00\x00\xc5C\x00\x80\xb5C\x00\x00\xe5C\x00\x00MC\x00\x00\xd4B\x00\x00\xdbC\x00\x00\x9bC\x00\x00\xfdC\x00\x00\x94B\x00\x00\xc3C\x00@\x0bD\x00\x00\x1dC\x00\x80\x9eC\x00\x80\xa0C\x00\x00\x99C\x00\x00eC\x00\x00\xa8A\x00\x00LB\x00\x00\xcaB\x00\x80\x85C\x00\x00\xfbC\x00\x00\x95C\x00\x00\x01C\x00\x00\x1eC\x00\x80\xe3C\x00\x00\xc4C\x00\x00GC\x00\x00\xdfC\x00\x80\xc9C\x00\x00\x04D\x00\x80\xf5C\x00\x00\x0bD\x00\x80\xc4C\x00\x00hC\x00\x80\x9bC\x00\x80\xa1C\x00\x00\x84B\x00\x80\x93C\x00\x00sC\x00\x00\x82C\x00\x80\xccC\x00\x00\x08B\x00\x00\xb4C\x00\x00\xe8C\x00\xc0\tD\x00\x80\xb3C\x00\x00 B\x00\x00\xb1C\x00\x00\xf1C\x00@\tD\x00\x00\xeaB\x00\x00\x80A\x00\x00pB\x00\x00\xb8A\x00\x00\x04B\x00\x00\xc0C\x00\x00\xd9C\x00\x00\xb4B\x00\x00\x10D\x00@\x07D\x00\x00\x00C\x00\x00\x88A\x00\x00\x13D\x00\x00\xf2C\x00\x00\xe2C\x00\x00\xa8C\x00\x80\xdfC\x00\x80\x13D\x00\x00\x12D\x00\x80\xdaC\x00\x006C\x00\x00\x9cC\x00\x80\x8eC\x00\x00\xf0A\x00\x80\xe8C\x00\x00\xf2B\x00\x80\xc0C\x00@\nD\x00\xc0\x07D\x00\xc0\x04D\x00\x00\x0cC\x00\x00\xf0C\x00\x80\x14D\x00\x80\x11D\x00\x00\x03C\x00\x00%C\x00\x00\xebC\x00@\x12D\x00\x00\x85C\x00\x00\xd4C\x00\x00\x00\x00\x00\x00[C\x00\x00\x00B\x00\x80\x00D\x00\x80\xb4C\x00\x80\xbfC\x00\x00wC\x00\x00\x15D\x00\x008C\x00\x80\nD\x00\x80\xd8C\x00\x00\xcaC\x00\x00\x96B\x00\x00\xeaC\x00\x80\x81C\x00\x00\xe6B\x00\x00\x1cC\x00\x00?C\x00\x80\xe6C\x00\x00\xc2C\x00\x00JC\x00\xc0\x00D\x00\x00\x8eC\x00\x00\xf0B\x00\x00\x90B\x00\x00\xa6C\x00\x00$C\x00\x00\xacC\x00\x80\xf1C\x00\x00QC\x00\x005C\x00\x00\xb7C\x00\x00PA\x00\x80\x06D\x00\x80\x98C\x00\x00\x80C\x00\x00\xd6C\x00\x00\xfcB\x00\x00\xc0B\x00@\x11D\x00\x00\x88C\x00\x00\xccB\x00\x00\xb2B\x00\x80\xe9C\x00\x00\xe8A\x00\xc0\nD\x00\xc0\x10D\x00\x00\xf8C\x00\x80\x0cD\x00\x00*C\x00\x00\nC\x00@\x05D\x00\x00\xc6B\x00\x00`C\x00\x00\x8fC\x00\x80\xfaC\x00\x80\x12D\x00\x00CC\x00\x80\x94C\x00\x00\xd6B\x00\x00\xcdC\x00\x00\xdaC\x00\x80\x07D\x00@\x0fD\x00\x80\xcbC\x00\x00>C\x00\x00\xf9C\x00\x00:C\x00\x00\\B\x00\x00\x14C\x00\x00XC\x00\x00\xd5C\x00\x00\xd8A\x00@\x02D\x00@\x10D\x00\x80\x92C\x00\x00@B\x00\x00\xa1C\x00\x80\xb0C\x00\x000A\x00\x80\xedC\x00\x80\xb8C\x00\x80\x97C\x00\x00vC\x00\x80\xf6C\x00\x00\xaaB\x00\x80\xf2C\x00\x00\x0fC\x00@\rD\x00\x00\xc0@\x00\x80\xa3C\x00\x80\x01D\x00\x00\x9dC\x00\x00uC\x00\x00\xa0@\x00\x00\xb8C\x00\x00@C\x00\x00\x0cD\x00\x00\x11D\x00\x00\xb6B\x00\x00\xf8A\x00\x00\xbeB\x00\x00;C\x00\x80\xecC\x00\x00xC\x00\x00\x90C\x00\x80\xbaC\x00\x00iC\x00\x00\x19C\x00\x00\x9fC\x00\x00HC\x00\x80\xa7C\x00\x00\xf4C\x00\x00|C\x00\x80\xd7C\x00\x80\x8cC\x00\x00\x04C\x00\x00\xb2C\x00\x00SC\x00\x00\xa4C\x00\x00\xd8B\x00\x00\xf8B\x00\x00\x80@\x00\x00.C\x00\xc0\x08D\x00\x00VC\x00\x00\x00D\x00\x00\xbaC\x00\x00XB\x00\x80\x91C\x00\x00\'C\x00\x00\xd7C\x00\x00\xd0B\x00\x80\xe1C\x00\x80\x0bD\x00\x80\xaeC\x00\x80\x9dC\x00\x80\xebC\x00\x00\x8aC\x00\x00\xbcC\x00\x00\\C\x00\x00YC\x00\x00\xd8C\x00\xc0\x0eD\x00\x00\x7fC\x00\x00DB\x00\x00\xe7C\x00\x80\xb7C\x00\x80\x8dC\x00\x00DC\x00\x80\x83C\x00\x00\xd0C\x00\x00\x94C\x00\x00~C\x00\x00PB\x00\x00gC\x00\x00\xa7C\x00\x00<C\x00\x00\xc8A\x00\x00\x02D\x00\x00\xc8B\x00\x00\xefC\x00\x00\xa2C\x00\x80\xf8C\x00\x80\xd2C\x00\x00EC\x00\x00oC\x00@\x04D\x00\x80\x90C\x00\x003C\x00\x00\xa0B\x00\x00lB\x00\x00\x90A\x00\x00\xe4B\x00\x80\xa6C\x00\x00\x9aB\x00\x80\xeeC\x00\x00\xa3C\x00\x00`B\x00\x00\xd3C\x00\x80\xdcC\x00\x00\x10A\x00\x00\xcfC\x00\x80\xbdC\x00\x00rC\x00\x00\xddC\x00\x80\x04D\x00\x80\x80C\x00\x80\xafC\x00\x00\x00@\x00\x00xB\x00\x80\xd5C\x00\x00\x91C\x00@\x15D\x00\x00,B\x00\x80\xb6C\x00\x00)C\x00\x80\xa9C\x00\x00\x0fD\x00\x00\xb0A\x00\x80\xe0C\x00\x00\x0bC\x00\x00dC\x00\x00\x86C\x00\x80\x0eD\x00\x00\xb8B\x00\xc0\x02D\x00\x002C\x00\x80\xf7C\x00\x000B\x00\x00\x02C\x00\x00<B\x00\x00\xf3C\x00\x80\xc7C\x00\x00kC\x00\x80\x82C\x00\x80\xc3C\x00\x00\x00A\x00\x00\x0cB\x00\x00\x05D\x00\x00\x88B\x00\xc0\x0cD\x00\x00bC\x00\x00\xf4B\x00\x00\x11C\x00\x00\xfeC\x00\x00\xe1C\x00\x80\rD\x00\x80\xcdC\x00\x80\xf3C\x00\x00\x93C\x00\x00 A\x00\x80\x99C\x00\x00\x98B\x00\x80\xcfC\x00\x80\xd0C\x00\x00\xbeC\x00\x80\tD\x00\x00@@\x00\x00\xffC\x00\x00\xccC\x00\x80\x10D\x00@\x13D\x00\x80\xa8C\x00\x00qC\x00\x00WC\x00\x00FC\x00\x00\xd0A\x00\x00(C\x00\x80\xfeC\x00\x00\tC\x00@\x00D\x00\x00\xa8B\x00\x00\x97C\x00\x80\x15D\x00\x00\x07C\x00\x00\x96C\x00\xc0\x06D\x00\x00RC\x00\x00\x98A\x00\x80\xc1C\x00\x00\x9eB\x00\x80\xe5C\x00\x00cC\x00\x80\xf9C\x00\x00\xd2B\x00\x000C\x00\x004C\x00@\x08D\x00\xc0\x05D\x00\x00mC\x00\xc0\x03D\x00\x00\x08D\x00\x00\xa0C\x00\x00\x83C\x00\x00\x80B\x00\x00\xdcC\x00\x80\x88C\x00@\x0cD\x00\x80\x8fC\x00\x00\tD\x00\x00\xeeC\x00\x00\xf7C\x00\x00\x1fC\x00\x00\xb9C\x00\x00\x07D\x00\x00\x81C\x00\x00|B\x00\x00\x13C\x00\x00IC\x00\x00\x89C\x00\x80\xf4C\x00\x00\xafC\x00\x00\xf5C\x00\x00pA\x00\x80\xdbC\x00\x80\xfcC\x00\x80\xddC\x00\x00\xc4B\x00\x80\xabC\x00\x00pC\x00\x00\xdcB\x00\x00PC\x00\x80\x87C\x00\x009C\x00\x00\xc0A\x00\x80\xa2C\x00\x00}C\x00\x008B\x00\x00lC\x00\xc0\x11D\x00\x00\xc1C\x00\x80\xd3C\x00\x80\xbbC\x00@\x03D\x00\x80\xdeC\x00\x00\xc9C\x00\x80\xacC\x00\x00\xbfC\x00\x80\x9aC\x00\x00=C\x00\x80\xceC\x00\x00\xacB\x00\x00!C\x00\x00\x18B\x00\x00\x03D\x00\x00HB\x00\x80\xd1C\x00\x00\x08C\x00\x00\xb0C\x00\xc0\rD\x00\x00\x82B\x00\x00\xabC\x00\x00zC\x00\x004B\x00\x00UC\x00\x00\x80?\x00\x00\xe0@\x00\x80\x9cC\x00\x00\xa9C\x00\x00\x8eB\x00\x00\xaeC\x00\x00\xe0B\x00\x80\x9fC\x00\x80\xd4C\x00\x00\xecC\x00\x00\x9cB\x00\x00\x92C\x00\x00\x06C\x00\xc0\x15D\x00\x80\xc6C\x00\x00NC\x00\x00\x8dC\x00\x00\x17C\x00\x00\x8cB\x00\x00\x14B\x00\x80\xd6C\x00\x00\xa4B\x00\x00\xf6B\x00\x80\x95C\x00\x00\xb3C\x00\x00\xcbC\x00\x00\xe2B\x00\xc0\x0bD\x00\x80\x02D\x00\x00\x18C\x00\x80\xc8C\x00\x00\x01D\x00\x00(B\x00\x80\x0fD\x00\x80\xfdC\x00\x80\xbeC\x00\x00\xc8C\x00\x80\xe4C\x00\x80\x03D\x00\x00tB\x00\x00dB\x00\x00\xc7C\x00\x80\xb1C\x00\xc0\x0fD\x00\x00\xf6C\x00\x80\x84C\x00\x00AC\x00\x00\xaaC\x00\x00\x9aC\x00\x00\xa5C\x00\x00tC\x00\x00`A\x00\x80\x08D\x00\x00\xfaB\x00\x00\x1bC\x00\x00nC\x00\x80\x86C\x00\x00\xe0C\x00\x00\xceB\x00\x00KC\x00\x00,C\x00\x00_C\x00\x00aC\x00\x00fC\x00\x00\xfaC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4666
(dp4667
g60
(dp4668
g48
I01
sg56
I01
ssg62
g4659
sg63
(lp4669
g48
ag56
asg65
(lp4670
I600
aI1
asbsg67
S'random'
p4671
sg69
g70
(g51
(I0
tS'b'
tRp4672
(I1
(I600
I1
tg54
(S'i4'
I0
I1
tRp4673
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'\xc7\x00\x00\x00\x17\x02\x00\x00\x84\x01\x00\x00\xb5\x01\x00\x00A\x01\x00\x00%\x01\x00\x00 \x01\x00\x00\x18\x02\x00\x00\xa0\x01\x00\x00|\x01\x00\x00\xae\x01\x00\x00\x16\x01\x00\x00T\x00\x00\x00\xe7\x00\x00\x00J\x02\x00\x00\xed\x01\x00\x00\xa0\x00\x00\x00\xaa\x00\x00\x00s\x01\x00\x00\xca\x01\x00\x00\x1d\x00\x00\x00}\x00\x00\x00\x8e\x01\x00\x00\xa2\x00\x00\x00\xf8\x01\x00\x00e\x01\x00\x00\xbe\x01\x00\x00\x0f\x01\x00\x000\x00\x00\x00\xf3\x00\x00\x00\xb6\x00\x00\x00+\x01\x00\x00\xc9\x00\x00\x00\xa3\x00\x00\x00\x96\x00\x00\x00\xa1\x01\x00\x00]\x00\x00\x00*\x02\x00\x00\x0b\x02\x00\x00D\x00\x00\x00\x9b\x00\x00\x006\x00\x00\x007\x02\x00\x00\x89\x01\x00\x00\x98\x01\x00\x00\x15\x02\x00\x00\xfb\x01\x00\x00\x9a\x01\x00\x00\x13\x01\x00\x00X\x01\x00\x00\r\x02\x00\x00~\x00\x00\x00a\x01\x00\x00F\x00\x00\x00G\x01\x00\x00\x0b\x01\x00\x00y\x01\x00\x00?\x02\x00\x00\x1e\x00\x00\x00r\x01\x00\x00\xa1\x00\x00\x00>\x02\x00\x00\x85\x01\x00\x00\xe6\x01\x00\x00\xda\x01\x00\x00\x12\x02\x00\x00\x91\x00\x00\x00`\x00\x00\x00\xa3\x01\x00\x00\x1f\x00\x00\x00)\x02\x00\x00\x1b\x02\x00\x00\xdf\x00\x00\x00l\x00\x00\x00u\x00\x00\x00\xd3\x00\x00\x00\xb0\x01\x00\x00v\x01\x00\x00!\x02\x00\x00\xcc\x01\x00\x00q\x01\x00\x00A\x00\x00\x00,\x02\x00\x00\x0f\x00\x00\x00\xc3\x01\x00\x00\x1c\x01\x00\x00\t\x02\x00\x00L\x00\x00\x00\x0e\x00\x00\x00\xf1\x00\x00\x00\xa6\x00\x00\x00*\x01\x00\x00\x94\x01\x00\x00$\x00\x00\x00#\x00\x00\x00,\x01\x00\x00\xed\x00\x00\x007\x00\x00\x00\xf1\x01\x00\x00\xfb\x00\x00\x00g\x01\x00\x00\x7f\x00\x00\x00\xf0\x00\x00\x00Q\x02\x00\x00K\x01\x00\x00\xd0\x01\x00\x00q\x00\x00\x00\x02\x01\x00\x00?\x01\x00\x00<\x00\x00\x00\xf4\x01\x00\x003\x00\x00\x00\x1d\x02\x00\x001\x02\x00\x00t\x01\x00\x00\xd6\x00\x00\x00Y\x00\x00\x00\x9f\x00\x00\x00N\x00\x00\x00(\x00\x00\x00\xde\x00\x00\x00\xb8\x00\x00\x00\xa6\x01\x00\x00-\x02\x00\x00@\x01\x00\x00L\x02\x00\x00\xec\x00\x00\x00\x10\x00\x00\x00\xa9\x00\x00\x00\x83\x00\x00\x00\x99\x01\x00\x00\xc1\x00\x00\x00;\x01\x00\x00H\x00\x00\x00#\x02\x00\x00\xc6\x01\x00\x00\x0f\x02\x00\x00\xc1\x01\x00\x00\xf9\x00\x00\x00\x90\x01\x00\x00\xbd\x00\x00\x00U\x00\x00\x00\'\x00\x00\x00\x1e\x01\x00\x004\x00\x00\x00\xa7\x01\x00\x00.\x00\x00\x00\xe7\x01\x00\x00\x0c\x01\x00\x00M\x00\x00\x00\x13\x00\x00\x00(\x02\x00\x004\x02\x00\x003\x01\x00\x00"\x00\x00\x00M\x02\x00\x00\xd7\x00\x00\x00x\x00\x00\x00\x84\x00\x00\x00\xe2\x01\x00\x00\x14\x00\x00\x00\n\x02\x00\x00b\x00\x00\x00E\x00\x00\x00\xe1\x00\x00\x00\xc2\x00\x00\x00\x01\x00\x00\x00I\x01\x00\x00\xbf\x01\x00\x00\x8b\x01\x00\x00\xf8\x00\x00\x00R\x00\x00\x00S\x02\x00\x00\x05\x00\x00\x00B\x01\x00\x00V\x00\x00\x00\xd1\x01\x00\x00O\x00\x00\x00\x96\x01\x00\x00p\x01\x00\x00\xd2\x01\x00\x00\xe5\x00\x00\x00\xb3\x00\x00\x00c\x00\x00\x00\xcf\x00\x00\x00\xf7\x01\x00\x00\n\x01\x00\x00-\x01\x00\x00d\x01\x00\x00\x07\x02\x00\x00\x08\x01\x00\x00\xd8\x00\x00\x00\'\x01\x00\x00E\x02\x00\x00\t\x00\x00\x00\x00\x01\x00\x00\\\x01\x00\x00l\x01\x00\x00\xbd\x01\x00\x00\x87\x00\x00\x005\x01\x00\x00\xe8\x01\x00\x00\xdb\x00\x00\x00R\x02\x00\x001\x00\x00\x00p\x00\x00\x00&\x02\x00\x00%\x00\x00\x00\xf5\x01\x00\x00\xe4\x00\x00\x00\xc9\x01\x00\x00=\x01\x00\x00\x04\x00\x00\x00\x16\x02\x00\x00D\x01\x00\x00\xbc\x01\x00\x00\r\x01\x00\x00T\x01\x00\x00\x18\x00\x00\x00\xc8\x00\x00\x00S\x01\x00\x009\x00\x00\x00\x15\x00\x00\x00T\x02\x00\x00\xfc\x00\x00\x00U\x02\x00\x00\xa5\x01\x00\x00\xce\x01\x00\x00\x91\x01\x00\x00|\x00\x00\x00V\x02\x00\x00b\x01\x00\x00\x8e\x00\x00\x002\x01\x00\x00Z\x00\x00\x00\x9d\x01\x00\x00\xfc\x01\x00\x00\xd5\x01\x00\x00N\x02\x00\x00m\x01\x00\x00\xf3\x01\x00\x00\xbb\x01\x00\x00\x7f\x01\x00\x00\x93\x00\x00\x00I\x02\x00\x00$\x01\x00\x00\x1a\x01\x00\x00\xcd\x00\x00\x00/\x01\x00\x00S\x00\x00\x00\x14\x02\x00\x00^\x00\x00\x008\x01\x00\x00\xfa\x01\x00\x00`\x01\x00\x00W\x01\x00\x00\xea\x00\x00\x00\x82\x01\x00\x00\xe5\x01\x00\x00\xd5\x00\x00\x00\x94\x00\x00\x00\x9e\x01\x00\x00\xd9\x01\x00\x00]\x01\x00\x00h\x00\x00\x00D\x02\x00\x00\xc5\x00\x00\x00\x80\x00\x00\x00\x92\x01\x00\x00O\x02\x00\x00&\x00\x00\x00\xf6\x01\x00\x00\xef\x00\x00\x00\xdc\x01\x00\x00\xe9\x01\x00\x00\x12\x00\x00\x00Q\x01\x00\x00X\x00\x00\x00P\x00\x00\x00i\x00\x00\x00a\x00\x00\x00:\x01\x00\x00\'\x02\x00\x00[\x01\x00\x00\xdd\x00\x00\x00\xb5\x00\x00\x00\xfd\x00\x00\x00\xde\x01\x00\x000\x01\x00\x00o\x01\x00\x00\x87\x01\x00\x00H\x01\x00\x00"\x02\x00\x00\x12\x01\x00\x00\xad\x01\x00\x00\x92\x00\x00\x00_\x01\x00\x00\x01\x01\x00\x00\x82\x00\x00\x00.\x02\x00\x00\xc7\x01\x00\x00\x02\x00\x00\x00\xc4\x01\x00\x00\x19\x01\x00\x00\x0b\x00\x00\x00\xe9\x00\x00\x00{\x00\x00\x00\xaf\x01\x00\x00G\x02\x00\x00\x06\x02\x00\x00s\x00\x00\x00\x8f\x00\x00\x00\xb4\x00\x00\x00\x19\x02\x00\x00#\x01\x00\x00O\x01\x00\x00,\x00\x00\x00y\x00\x00\x004\x01\x00\x00\x1e\x02\x00\x00\xd8\x01\x00\x00z\x00\x00\x00\x14\x01\x00\x00\x90\x00\x00\x00i\x01\x00\x00\xf9\x01\x00\x00x\x01\x00\x00!\x01\x00\x00>\x01\x00\x00\x08\x00\x00\x00H\x02\x00\x00J\x00\x00\x00\xe0\x00\x00\x00u\x01\x00\x00c\x01\x00\x006\x01\x00\x00\xae\x00\x00\x00\xba\x01\x00\x00\x1a\x02\x00\x00\x8c\x01\x00\x00F\x02\x00\x00\x03\x00\x00\x00\x13\x02\x00\x00\xf2\x01\x00\x00\xe2\x00\x00\x00\x04\x02\x00\x00!\x00\x00\x00C\x00\x00\x00\x1c\x02\x00\x00N\x01\x00\x00\xeb\x01\x00\x00\x83\x01\x00\x00\x10\x02\x00\x00\x15\x01\x00\x00\x9c\x00\x00\x00A\x02\x00\x00<\x01\x00\x00\x07\x00\x00\x00/\x02\x00\x00\x9a\x00\x00\x00\x97\x00\x00\x00\xcb\x00\x00\x00K\x00\x00\x00n\x00\x00\x00 \x00\x00\x00\x8a\x01\x00\x00\xe6\x00\x00\x00Z\x01\x00\x00&\x01\x00\x00\x18\x01\x00\x00\xe3\x01\x00\x00j\x00\x00\x00F\x01\x00\x001\x01\x00\x00+\x00\x00\x00\x00\x02\x00\x00R\x01\x00\x00\x19\x00\x00\x00\\\x00\x00\x00~\x01\x00\x00\xb3\x01\x00\x00:\x02\x00\x00\x05\x02\x00\x00\xcc\x00\x00\x00\xa4\x00\x00\x00\xb9\x00\x00\x00\xfe\x01\x00\x00\xcb\x01\x00\x00\xda\x00\x00\x00:\x00\x00\x00v\x00\x00\x00\x9f\x01\x00\x00\x86\x00\x00\x00\x8d\x00\x00\x00m\x00\x00\x00\x1a\x00\x00\x00\r\x00\x00\x00%\x02\x00\x00@\x02\x00\x00\x9c\x01\x00\x00;\x02\x00\x005\x02\x00\x00\x03\x02\x00\x00\x89\x00\x00\x00\xd2\x00\x00\x00\x0c\x00\x00\x000\x02\x00\x00\x07\x01\x00\x00\xb7\x01\x00\x00\x95\x00\x00\x00\x03\x01\x00\x00\xab\x01\x00\x00\x17\x00\x00\x00\x08\x02\x00\x00}\x01\x00\x00\xb1\x01\x00\x00^\x01\x00\x00\xb2\x01\x00\x00?\x00\x00\x00\x0e\x02\x00\x00;\x00\x00\x00k\x01\x00\x00z\x01\x00\x00\xff\x01\x00\x00\xc6\x00\x00\x00\x1f\x02\x00\x00\x0e\x01\x00\x00\x86\x01\x00\x00\xeb\x00\x00\x00+\x02\x00\x00J\x01\x00\x009\x01\x00\x00U\x01\x00\x00\xd1\x00\x00\x00\xa5\x00\x00\x00\x1b\x00\x00\x00\x04\x01\x00\x00\xb2\x00\x00\x00r\x00\x00\x00\xee\x01\x00\x00\xdb\x01\x00\x00{\x01\x00\x00\x80\x01\x00\x00\xf0\x01\x00\x002\x00\x00\x00\x02\x02\x00\x00\x88\x00\x00\x00\xaf\x00\x00\x00P\x02\x00\x00\x8f\x01\x00\x00\xa9\x01\x00\x00L\x01\x00\x00\xad\x00\x00\x00\x1c\x00\x00\x00*\x00\x00\x00\x85\x00\x00\x00\x06\x00\x00\x00<\x02\x00\x00o\x00\x00\x00\xcd\x01\x00\x00>\x00\x00\x00\xd9\x00\x00\x00Y\x01\x00\x008\x00\x00\x00\x98\x00\x00\x00\xb7\x00\x00\x005\x00\x00\x00\xf2\x00\x00\x00\xd4\x00\x00\x00I\x00\x00\x00\xc3\x00\x00\x00P\x01\x00\x00 \x02\x00\x00.\x01\x00\x00Q\x00\x00\x00\x17\x01\x00\x00\xe0\x01\x00\x00w\x01\x00\x00h\x01\x00\x00e\x00\x00\x00\xbe\x00\x00\x00g\x00\x00\x00\x9d\x00\x00\x00\xe3\x00\x00\x00\xac\x00\x00\x00\x1d\x01\x00\x00\x9b\x01\x00\x00\xac\x01\x00\x007\x01\x00\x00\xea\x01\x00\x00\xec\x01\x00\x00\x8b\x00\x00\x00C\x02\x00\x00\x1b\x01\x00\x00\xe1\x01\x00\x00\x97\x01\x00\x00\xf6\x00\x00\x00j\x01\x00\x00\t\x01\x00\x00\xcf\x01\x00\x00W\x02\x00\x00\xfe\x00\x00\x00\x81\x00\x00\x00f\x00\x00\x00=\x00\x00\x00\xef\x01\x00\x00t\x00\x00\x009\x02\x00\x00\xa8\x01\x00\x00\xc0\x01\x00\x00\xb6\x01\x00\x00W\x00\x00\x00E\x01\x00\x00\xc2\x01\x00\x00\xca\x00\x00\x00\xdc\x00\x00\x006\x02\x00\x00G\x00\x00\x00"\x01\x00\x00-\x00\x00\x00f\x01\x00\x00\x10\x01\x00\x003\x02\x00\x00\x95\x01\x00\x00\x0c\x02\x00\x00\x01\x02\x00\x00=\x02\x00\x00\xd6\x01\x00\x00\x8a\x00\x00\x00n\x01\x00\x00\x81\x01\x00\x00\xbc\x00\x00\x00\xa2\x01\x00\x00\xfa\x00\x00\x00d\x00\x00\x00\xd4\x01\x00\x00/\x00\x00\x00B\x00\x00\x00\xe8\x00\x00\x00\xc8\x01\x00\x00\xe4\x01\x00\x00\xa8\x00\x00\x00\x05\x01\x00\x00\xbb\x00\x00\x00\xd7\x01\x00\x00\xd3\x01\x00\x00K\x02\x00\x00C\x01\x00\x00\xdf\x01\x00\x00\x9e\x00\x00\x00\xb4\x01\x00\x00\x99\x00\x00\x00\x11\x00\x00\x00\xba\x00\x00\x00\xd0\x00\x00\x00\xf4\x00\x00\x00\x8c\x00\x00\x00w\x00\x00\x00M\x01\x00\x002\x02\x00\x00(\x01\x00\x00\xdd\x01\x00\x00\xf7\x00\x00\x00\xa4\x01\x00\x00\x00\x00\x00\x00\x1f\x01\x00\x00\xaa\x01\x00\x00\x11\x02\x00\x00[\x00\x00\x00_\x00\x00\x00\x93\x01\x00\x00V\x01\x00\x00\x8d\x01\x00\x00\x06\x01\x00\x008\x02\x00\x00B\x02\x00\x00\xa7\x00\x00\x00\x11\x01\x00\x00\xb8\x01\x00\x00\xf5\x00\x00\x00)\x01\x00\x00\xee\x00\x00\x00\xc0\x00\x00\x00\xfd\x01\x00\x00\xb1\x00\x00\x00\xc4\x00\x00\x00\xff\x00\x00\x00\n\x00\x00\x00\xab\x00\x00\x00\xb9\x01\x00\x00\xb0\x00\x00\x00)\x00\x00\x00k\x00\x00\x00@\x00\x00\x00\xbf\x00\x00\x00\x16\x00\x00\x00\xce\x00\x00\x00\x88\x01\x00\x00\xc5\x01\x00\x00$\x02\x00\x00'
tbsg74
I01
sg75
I1
sg76
I-1
sg77
(lp4674
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg79
Nsg80
cnumpy.core.multiarray
scalar
p4675
(g4673
S'$\x02\x00\x00'
tRp4676
sg81
I600
sg82
I0
sg83
I600
sg84
I01
sbag36
asS'savePickle'
p4677
I01
sb.