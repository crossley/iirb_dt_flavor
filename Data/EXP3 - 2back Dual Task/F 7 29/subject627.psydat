ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject627
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 627
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
VF
sS'age'
p31
V18
p32
ssS'loopsUnfinished'
p33
(lp34
g1
(cpsychopy.data
TrialHandler
p35
g3
NtRp36
(dp37
S'origin'
p38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p39
sS'thisTrial'
p40
I2
sS'_exp'
p41
I74926608
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p42
sS'thisRepN'
p43
I39
sg27
I01
sg28
NsS'data'
p44
g1
(cpsychopy.data
DataHandler
p45
c__builtin__
dict
p46
(dp47
S'ran'
p48
cnumpy.ma.core
_mareconstruct
p49
(cnumpy.ma.core
MaskedArray
p50
cnumpy
ndarray
p51
(I0
tp52
S'b'
tRp53
(I1
(I15
I40
tcnumpy
dtype
p54
(S'f4'
I0
I1
tRp55
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p56
g49
(g50
g51
g52
S'b'
tRp57
(I1
(I15
I40
tg55
I00
S'\x00\x00@@\x00\x000A\x00\x00\x00B\x00\x00\x10B\x00\x00PB\x00\x00dB\x00\x00\x80B\x00\x00\xe8B\x00\x00\x05C\x00\x00\x0cC\x00\x00\x10C\x00\x00&C\x00\x00(C\x00\x004C\x00\x007C\x00\x00:C\x00\x00<C\x00\x00BC\x00\x00DC\x00\x00FC\x00\x00LC\x00\x00_C\x00\x00iC\x00\x00\x89C\x00\x00\xa4C\x00\x80\xa5C\x00\x00\xb4C\x00\x00\xbfC\x00\x00\xc7C\x00\x80\xc9C\x00\x80\xccC\x00\x80\xdbC\x00\x80\xeaC\x00@\tD\x00\xc0\rD\x00\x80\x0eD\x00\x80\x0fD\x00\xc0\x11D\x00\x80\x12D\x00@\x13D\x00\x00\x80?\x00\x00 A\x00\x00\x80A\x00\x00\xc8A\x00\x00\xf8A\x00\x00\x9cB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xe2B\x00\x00\xeaB\x00\x00\xeeB\x00\x00\x04C\x00\x00\x08C\x00\x00\x14C\x00\x00)C\x00\x005C\x00\x00?C\x00\x00AC\x00\x00pC\x00\x00vC\x00\x00\x8cC\x00\x00\x97C\x00\x00\xafC\x00\x00\xc8C\x00\x00\xd6C\x00\x80\xd7C\x00\x80\xddC\x00\x00\xe7C\x00\x00\xe9C\x00\x00\xeeC\x00\x80\xf9C\x00\x80\xfdC\x00\x00\x00D\x00\x00\x05D\x00\x80\x07D\x00@\x0cD\x00\x00\rD\x00@\x0eD\x00\x00\x12D\x00@\x15D\x00\x00\xb8A\x00\x00\xc0A\x00\x00\x8aB\x00\x00\xd6B\x00\x00\xdcB\x00\x00\x01C\x00\x00\rC\x00\x00\x15C\x00\x00IC\x00\x00TC\x00\x80\x82C\x00\x00\x85C\x00\x00\x88C\x00\x00\x91C\x00\x80\x92C\x00\x00\x9aC\x00\x80\xa1C\x00\x80\xaaC\x00\x00\xb3C\x00\x80\xc0C\x00\x80\xc5C\x00\x80\xc7C\x00\x80\xcdC\x00\x80\xcfC\x00\x00\xd1C\x00\x00\xd2C\x00\x00\xd8C\x00\x80\xd8C\x00\x80\xd9C\x00\x80\xe0C\x00\x00\xe1C\x00\x80\xe4C\x00\x80\xe6C\x00\x00\xebC\x00\x80\xffC\x00\x00\x03D\x00@\x04D\x00\x80\x04D\x00\xc0\x0eD\x00\xc0\x15D\x00\x00\x10A\x00\x00(B\x00\x00@B\x00\x00\x9eB\x00\x00\xb6B\x00\x00\xc4B\x00\x00\xceB\x00\x00\x06C\x00\x00\x13C\x00\x00\x1dC\x00\x00 C\x00\x00%C\x00\x00/C\x00\x002C\x00\x00@C\x00\x00OC\x00\x00zC\x00\x00\x84C\x00\x80\x88C\x00\x80\x8cC\x00\x80\x94C\x00\x80\x95C\x00\x00\xa2C\x00\x80\xa7C\x00\x80\xa8C\x00\x00\xbcC\x00\x00\xc4C\x00\x80\xc4C\x00\x00\xcdC\x00\x00\xdeC\x00\x00\xe0C\x00\x00\xe3C\x00\x00\xffC\x00\x00\x01D\x00\x80\x05D\x00\xc0\x0bD\x00@\x0fD\x00\x00\x10D\x00@\x14D\x00\x80\x14D\x00\x00@A\x00\x00\xd0A\x00\x00\x18B\x00\x00DB\x00\x00TB\x00\x00\x86B\x00\x00\x88B\x00\x00\xacB\x00\x00\xb2B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xd4B\x00\x00\xd8B\x00\x00\xe4B\x00\x00\tC\x00\x00\x16C\x00\x00>C\x00\x00RC\x00\x00hC\x00\x00uC\x00\x00yC\x00\x00\x8bC\x00\x00\xadC\x00\x80\xb5C\x00\x80\xbaC\x00\x00\xbbC\x00\x80\xbcC\x00\x00\xbeC\x00\x00\xc0C\x00\x80\xdcC\x00\x80\xdfC\x00\x00\xeaC\x00\x80\xf1C\x00@\x00D\x00@\x02D\x00@\x06D\x00\x80\tD\x00\xc0\nD\x00\x00\x0fD\x00\xc0\x0fD\x00\x00\xb0A\x00\x00\x04B\x00\x00pB\x00\x00\xb4B\x00\x00\xb8B\x00\x008C\x00\x00KC\x00\x00QC\x00\x00YC\x00\x00aC\x00\x00xC\x00\x00}C\x00\x80\x8aC\x00\x00\x8fC\x00\x80\x99C\x00\x00\x9eC\x00\x80\xa2C\x00\x00\xa6C\x00\x80\xa6C\x00\x00\xa7C\x00\x80\xabC\x00\x80\xaeC\x00\x80\xb0C\x00\x80\xb1C\x00\x80\xb2C\x00\x80\xb6C\x00\x00\xb7C\x00\x00\xc9C\x00\x80\xd2C\x00\x80\xd4C\x00\x00\xe4C\x00\x80\xebC\x00\x80\xeeC\x00\x80\xf0C\x00\x80\xf3C\x00\x00\xf6C\x00@\x03D\x00@\x0bD\x00\xc0\x10D\x00\x80\x15D\x00\x00\x90A\x00\x00\xa8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\x0cB\x00\x00,B\x00\x00<B\x00\x00hB\x00\x00\x8cB\x00\x00\x9aB\x00\x00\xa4B\x00\x00\xb0B\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xf4B\x00\x00\xfaB\x00\x00+C\x00\x003C\x00\x00GC\x00\x80\x80C\x00\x00\x9dC\x00\x00\xa1C\x00\x80\xb3C\x00\x80\xb8C\x00\x00\xbaC\x00\x00\xceC\x00\x00\xd3C\x00\x00\xdaC\x00\x00\xdfC\x00\x00\xe8C\x00\x00\xecC\x00\x80\xf4C\x00\x00\xfeC\x00\x80\xfeC\x00\x80\x01D\x00\x00\x04D\x00\x80\x06D\x00\xc0\x07D\x00\x80\nD\x00\x00\x14D\x00\x00PA\x00\x000B\x00\x004B\x00\x008B\x00\x00\\B\x00\x00`B\x00\x00\xa6B\x00\x00\xaeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xdaB\x00\x00\xfcB\x00\x00\x03C\x00\x00\nC\x00\x00\x1fC\x00\x001C\x00\x00CC\x00\x00EC\x00\x00JC\x00\x00eC\x00\x00|C\x00\x80\x87C\x00\x00\x8dC\x00\x00\x93C\x00\x80\x93C\x00\x80\x9aC\x00\x80\x9bC\x00\x00\x9cC\x00\x00\xa3C\x00\x80\xa3C\x00\x00\xa5C\x00\x00\xb0C\x00\x00\xb9C\x00\x80\xdeC\x00\x80\xe7C\x00\x00\xf0C\x00\xc0\x02D\x00\xc0\x05D\x00\xc0\x0cD\x00\x00\x15D\x00\x00\xc0@\x00\x00\x08B\x00\x00\xa0B\x00\x00\xdeB\x00\x00\xe0B\x00\x00\x00C\x00\x00\x0bC\x00\x00\x0eC\x00\x00\x19C\x00\x00*C\x00\x00NC\x00\x00SC\x00\x00]C\x00\x00{C\x00\x00\x7fC\x00\x00\x87C\x00\x80\x8eC\x00\x80\x91C\x00\x00\x98C\x00\x80\x9cC\x00\x00\x9fC\x00\x00\xa8C\x00\x80\xacC\x00\x80\xbbC\x00\x80\xc1C\x00\x80\xc2C\x00\x00\xc5C\x00\x00\xc6C\x00\x00\xd7C\x00\x80\xe3C\x00\x80\xe5C\x00\x80\xe8C\x00\x80\xf7C\x00\x00\xfbC\x00\x80\xfbC\x00\x80\xfcC\x00\x80\x02D\x00\x00\x07D\x00\x00\x11D\x00\x00\x13D\x00\x00\x80@\x00\x00 B\x00\x00\x84B\x00\x00\x90B\x00\x00\x98B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xe6B\x00\x00\xf0B\x00\x00\xf8B\x00\x00\x02C\x00\x00\x1cC\x00\x00,C\x00\x00-C\x00\x00=C\x00\x00UC\x00\x00dC\x00\x00jC\x00\x00rC\x00\x80\x84C\x00\x80\x89C\x00\x00\x99C\x00\x00\x9bC\x00\x00\xaaC\x00\x80\xafC\x00\x80\xb7C\x00\x00\xbdC\x00\x80\xcaC\x00\x80\xd6C\x00\x00\xdcC\x00\x00\xddC\x00\x00\xe6C\x00\x00\xf4C\x00\x00\xf5C\x00\x80\xf5C\x00\x00\xfaC\x00\xc0\x06D\x00\x80\x08D\x00\x00\nD\x00\x80\x11D\x00\x00\x14B\x00\x00HB\x00\x00LB\x00\x00tB\x00\x00xB\x00\x00\x07C\x00\x00.C\x00\x000C\x00\x006C\x00\x009C\x00\x00MC\x00\x00kC\x00\x00lC\x00\x00mC\x00\x00\x83C\x00\x80\x8bC\x00\x00\x8eC\x00\x00\x94C\x00\x80\x9dC\x00\x80\xa4C\x00\x00\xacC\x00\x80\xadC\x00\x00\xaeC\x00\x00\xb2C\x00\x00\xb8C\x00\x80\xbdC\x00\x80\xe2C\x00\x00\xe5C\x00\x00\xedC\x00\x00\xefC\x00\x00\xf3C\x00\x00\xfcC\x00\xc0\x00D\x00\xc0\x04D\x00@\x05D\x00\x00\x08D\x00\x00\x0bD\x00\x80\x0cD\x00@\x10D\x00\xc0\x13D\x00\x00\x00\x00\x00\x00`A\x00\x00\x98A\x00\x00\x1cB\x00\x00\x82B\x00\x00\x96B\x00\x00\xa8B\x00\x00\x12C\x00\x00\x1eC\x00\x00\'C\x00\x00;C\x00\x00HC\x00\x00^C\x00\x00sC\x00\x00tC\x00\x00wC\x00\x00\x82C\x00\x80\x83C\x00\x80\x85C\x00\x80\x8dC\x00\x80\x90C\x00\x00\x95C\x00\x00\x96C\x00\x80\xb4C\x00\x00\xc3C\x00\x80\xc3C\x00\x00\xcaC\x00\x80\xd0C\x00\x80\xe9C\x00\x80\xf2C\x00\x00\xf7C\x00\x00\xf8C\x00\x00\xfdC\x00@\x01D\x00\x00\x02D\x00@\x07D\x00\x00\tD\x00\x80\x0bD\x00\x80\rD\x00\x80\x10D\x00\x00\x00A\x00\x00XB\x00\x00\x94B\x00\x00\xa2B\x00\x00\xf2B\x00\x00\x0fC\x00\x00\x17C\x00\x00\x18C\x00\x00\x1bC\x00\x00!C\x00\x00"C\x00\x00$C\x00\x00XC\x00\x00\\C\x00\x00`C\x00\x00cC\x00\x00fC\x00\x00~C\x00\x80\x86C\x00\x80\x8fC\x00\x80\x97C\x00\x00\xa9C\x00\x80\xa9C\x00\x00\xb1C\x00\x00\xc2C\x00\x80\xc6C\x00\x00\xcfC\x00\x00\xd0C\x00\x80\xd3C\x00\x00\xd4C\x00\x00\xd5C\x00\x00\xd9C\x00\x00\xdbC\x00\x00\xe2C\x00\x80\xf6C\x00\x80\xfaC\x00\x80\x03D\x00@\x08D\x00\xc0\x08D\x00\xc0\x14D\x00\x00\x00@\x00\x00\xa0@\x00\x00pA\x00\x00\x88A\x00\x00\xa0A\x00\x00$B\x00\x00lB\x00\x00|B\x00\x00\x8eB\x00\x00\xf6B\x00\x00\xfeB\x00\x00\x1aC\x00\x00#C\x00\x00WC\x00\x00bC\x00\x00gC\x00\x00qC\x00\x00\x81C\x00\x00\x86C\x00\x00\x8aC\x00\x00\x90C\x00\x00\x92C\x00\x80\x98C\x00\x80\x9fC\x00\x00\xb5C\x00\x00\xb6C\x00\x00\xccC\x00\x80\xceC\x00\x80\xd1C\x00\x80\xecC\x00\x80\xefC\x00\xc0\x01D\x00\xc0\x03D\x00\x00\x06D\x00\xc0\tD\x00\x00\x0eD\x00@\x11D\x00@\x12D\x00\xc0\x12D\x00\x80\x13D\x00\x00\xe0@\x00\x00\xd8A\x00\x00\xf0A\x00\x00\x92B\x00\x00\xaaB\x00\x00\xbaB\x00\x00\xecB\x00\x00\x11C\x00\x00PC\x00\x00VC\x00\x00ZC\x00\x00[C\x00\x00nC\x00\x00oC\x00\x00\x80C\x00\x80\x81C\x00\x80\x96C\x00\x80\x9eC\x00\x00\xa0C\x00\x80\xa0C\x00\x00\xabC\x00\x80\xb9C\x00\x80\xbeC\x00\x80\xbfC\x00\x00\xc1C\x00\x80\xc8C\x00\x00\xcbC\x00\x80\xcbC\x00\x80\xd5C\x00\x80\xdaC\x00\x80\xe1C\x00\x80\xedC\x00\x00\xf1C\x00\x00\xf2C\x00\x80\xf8C\x00\x00\xf9C\x00\x80\x00D\x00@\nD\x00\x00\x0cD\x00@\rD'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp58
(dp59
S'isNumeric'
p60
(dp61
g48
I01
sg56
I01
ssS'trials'
p62
g36
sS'dataTypes'
p63
(lp64
g48
ag56
asS'dataShape'
p65
(lp66
I15
aI40
asbsS'method'
p67
S'fullRandom'
p68
sS'sequenceIndices'
p69
cnumpy.core.multiarray
_reconstruct
p70
(g51
(I0
tS'b'
tRp71
(I1
(I15
I40
tg54
(S'O4'
I0
I1
tRp72
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp73
I11
aI13
aI14
aI7
aI5
aI11
aI5
aI6
aI9
aI10
aI4
aI3
aI0
aI7
aI4
aI5
aI1
aI8
aI8
aI8
aI11
aI10
aI7
aI8
aI0
aI8
aI11
aI9
aI2
aI2
aI2
aI8
aI7
aI8
aI3
aI5
aI8
aI4
aI0
aI13
aI1
aI1
aI1
aI7
aI10
aI9
aI3
aI4
aI12
aI1
aI12
aI0
aI1
aI0
aI8
aI13
aI13
aI14
aI7
aI5
aI14
aI5
aI0
aI4
aI11
aI3
aI11
aI14
aI5
aI6
aI14
aI1
aI5
aI11
aI2
aI12
aI11
aI10
aI2
aI0
aI13
aI13
aI0
aI6
aI10
aI6
aI5
aI2
aI6
aI4
aI12
aI11
aI10
aI7
aI2
aI12
aI9
aI6
aI2
aI12
aI1
aI14
aI5
aI10
aI13
aI4
aI3
aI14
aI6
aI14
aI12
aI11
aI14
aI14
aI1
aI13
aI1
aI5
aI4
aI13
aI0
aI6
aI5
aI3
aI13
aI1
aI14
aI4
aI13
aI7
aI8
aI0
aI0
aI0
aI9
aI9
aI11
aI13
aI3
aI13
aI12
aI8
aI5
aI10
aI4
aI9
aI3
aI13
aI12
aI12
aI10
aI4
aI4
aI14
aI4
aI6
aI6
aI11
aI3
aI8
aI9
aI11
aI8
aI4
aI0
aI3
aI1
aI7
aI9
aI8
aI13
aI1
aI5
aI6
aI14
aI7
aI11
aI14
aI0
aI11
aI8
aI13
aI5
aI5
aI13
aI10
aI8
aI0
aI12
aI0
aI3
aI0
aI14
aI1
aI14
aI2
aI10
aI3
aI0
aI0
aI13
aI13
aI6
aI10
aI11
aI8
aI1
aI2
aI6
aI0
aI12
aI8
aI10
aI11
aI13
aI12
aI4
aI11
aI9
aI2
aI13
aI14
aI3
aI1
aI5
aI4
aI2
aI3
aI5
aI9
aI8
aI2
aI11
aI9
aI10
aI2
aI12
aI14
aI4
aI13
aI8
aI6
aI0
aI10
aI9
aI12
aI7
aI8
aI7
aI2
aI9
aI6
aI0
aI2
aI12
aI13
aI1
aI2
aI13
aI8
aI9
aI14
aI8
aI9
aI5
aI14
aI8
aI2
aI12
aI4
aI5
aI5
aI10
aI12
aI3
aI10
aI9
aI1
aI3
aI10
aI14
aI5
aI10
aI0
aI4
aI6
aI7
aI8
aI13
aI8
aI3
aI9
aI11
aI7
aI5
aI4
aI11
aI10
aI5
aI13
aI5
aI6
aI3
aI7
aI9
aI0
aI12
aI6
aI14
aI9
aI2
aI6
aI5
aI8
aI11
aI1
aI12
aI10
aI10
aI6
aI12
aI2
aI4
aI4
aI4
aI7
aI3
aI1
aI8
aI12
aI11
aI9
aI0
aI5
aI14
aI0
aI5
aI11
aI4
aI2
aI2
aI2
aI12
aI5
aI10
aI14
aI0
aI13
aI1
aI1
aI10
aI13
aI9
aI8
aI6
aI10
aI11
aI7
aI11
aI3
aI3
aI2
aI11
aI12
aI2
aI11
aI4
aI4
aI2
aI0
aI7
aI10
aI9
aI0
aI14
aI9
aI4
aI3
aI10
aI7
aI7
aI3
aI12
aI12
aI6
aI4
aI2
aI12
aI9
aI3
aI8
aI10
aI6
aI10
aI13
aI3
aI0
aI1
aI5
aI3
aI1
aI1
aI9
aI7
aI6
aI14
aI4
aI9
aI9
aI14
aI3
aI3
aI4
aI10
aI12
aI10
aI3
aI9
aI1
aI7
aI9
aI5
aI9
aI5
aI7
aI2
aI1
aI2
aI8
aI7
aI9
aI14
aI9
aI8
aI11
aI7
aI4
aI14
aI8
aI12
aI0
aI4
aI13
aI7
aI13
aI4
aI9
aI0
aI7
aI11
aI12
aI10
aI1
aI8
aI8
aI10
aI8
aI2
aI3
aI10
aI7
aI7
aI2
aI10
aI14
aI14
aI14
aI12
aI1
aI6
aI2
aI1
aI9
aI11
aI4
aI13
aI13
aI11
aI13
aI7
aI4
aI14
aI3
aI0
aI9
aI7
aI9
aI1
aI1
aI3
aI12
aI7
aI3
aI3
aI11
aI10
aI7
aI11
aI7
aI3
aI7
aI7
aI14
aI5
aI6
aI8
aI5
aI11
aI2
aI4
aI1
aI5
aI5
aI1
aI8
aI4
aI9
aI0
aI9
aI1
aI7
aI6
aI6
aI6
aI14
aI6
aI3
aI14
aI0
aI1
aI13
aI3
aI1
aI14
aI0
aI14
aI5
aI13
aI11
aI11
aI8
aI0
aI5
aI2
aI4
aI12
aI0
aI2
aI2
aI3
aI7
aI10
aI12
aI6
aI7
aI6
aI14
aI13
aI0
aI5
aI11
aI6
aI7
aI13
aI12
aI4
aI6
aI1
aI3
aI2
aI12
aI6
aI0
aI5
aI12
aI14
aI12
aI12
aI10
aI3
aI6
aI10
aI10
aI6
aI4
aI8
aI11
aI13
aI12
aI2
aI6
aI13
aI11
aI6
aI2
aI9
aI6
aI1
aI1
aI2
atbsS'finished'
p74
I00
sS'nReps'
p75
I40
sS'nRemaining'
p76
I0
sS'trialList'
p77
(lp78
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
asS'seed'
p79
NsS'thisIndex'
p80
I2
sS'thisN'
p81
I599
sS'thisTrialN'
p82
I14
sS'nTotal'
p83
I600
sS'_warnUseOfNext'
p84
I01
sbasS'saveWideText'
p85
I01
sS'thisEntry'
p86
(dp87
sS'version'
p88
S''
sS'_paramNamesSoFar'
p89
(lp90
sS'entries'
p91
(lp92
(dp93
g16
(lp94
S'k'
asS'.thisTrial'
p95
I11
sS'.thisRepN'
p96
I0
sg30
VF
sg31
g32
sS'.thisTrialN'
p97
I0
sS'.thisN'
p98
I0
sS'.thisIndex'
p99
I11
sg15
(lp100
S'd'
asg17
S'N'
sg14
I1
sa(dp101
g16
(lp102
S'k'
asg95
I1
sS'.thisRepN'
p103
I0
sg30
VF
sg31
g32
sS'.thisTrialN'
p104
I1
sS'.thisN'
p105
I1
sS'.thisIndex'
p106
I1
sg15
(lp107
S'k'
asg17
S'Y'
sg14
I1
sa(dp108
g16
(lp109
S'k'
asg18
S'Y'
sS'.thisRepN'
p110
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p111
I2
sS'.thisN'
p112
I2
sS'.thisIndex'
p113
I13
sg15
(lp114
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I13
sa(dp115
g16
(lp116
S'd'
asg18
S'N'
sS'.thisRepN'
p117
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p118
I3
sS'.thisN'
p119
I3
sS'.thisIndex'
p120
I0
sg15
(lp121
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I0
sa(dp122
g16
(lp123
S'k'
asg18
S'N'
sS'.thisRepN'
p124
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p125
I4
sS'.thisN'
p126
I4
sS'.thisIndex'
p127
I9
sg15
(lp128
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I9
sa(dp129
g16
(lp130
S'd'
asg18
S'Y'
sS'.thisRepN'
p131
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p132
I5
sS'.thisN'
p133
I5
sS'.thisIndex'
p134
I13
sg15
(lp135
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I13
sa(dp136
g16
(lp137
S'd'
asg18
S'N'
sS'.thisRepN'
p138
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p139
I6
sS'.thisN'
p140
I6
sS'.thisIndex'
p141
I8
sg15
(lp142
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I8
sa(dp143
g16
(lp144
S'k'
asg18
S'N'
sS'.thisRepN'
p145
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p146
I7
sS'.thisN'
p147
I7
sS'.thisIndex'
p148
I14
sg15
(lp149
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I14
sa(dp150
g16
(lp151
S'k'
asg18
S'Y'
sS'.thisRepN'
p152
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p153
I8
sS'.thisN'
p154
I8
sS'.thisIndex'
p155
I12
sg15
(lp156
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I12
sa(dp157
g16
(lp158
S'k'
asg18
S'Y'
sS'.thisRepN'
p159
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p160
I9
sS'.thisN'
p161
I9
sS'.thisIndex'
p162
I3
sg15
(lp163
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I3
sa(dp164
g16
(lp165
S'd'
asg18
S'Y'
sS'.thisRepN'
p166
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p167
I10
sS'.thisN'
p168
I10
sS'.thisIndex'
p169
I1
sg15
(lp170
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp171
S'space'
p172
asg95
I1
sa(dp173
g16
(lp174
S'k'
asg18
S'N'
sS'.thisRepN'
p175
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p176
I11
sS'.thisN'
p177
I11
sS'.thisIndex'
p178
I0
sg15
(lp179
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I0
sa(dp180
g18
S'Y'
sS'.thisRepN'
p181
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p182
I12
sS'.thisN'
p183
I12
sS'.thisIndex'
p184
I4
sg15
Nsg30
VF
sg17
S'Timed out'
p185
sg14
I1
sg19
(lp186
S'space'
p187
asg95
I4
sa(dp188
g16
(lp189
S'k'
asg18
S'Y'
sS'.thisRepN'
p190
I0
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p191
I13
sS'.thisN'
p192
I13
sS'.thisIndex'
p193
I7
sg15
(lp194
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp195
g16
(lp196
S'k'
asg18
S'N'
sS'.thisRepN'
p197
I0
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p198
I14
sS'.thisN'
p199
I14
sS'.thisIndex'
p200
I11
sg15
(lp201
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I11
sa(dp202
g16
(lp203
S'd'
asg18
S'N'
sS'.thisRepN'
p204
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p205
I0
sS'.thisN'
p206
I15
sS'.thisIndex'
p207
I13
sg15
(lp208
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I13
sa(dp209
g16
(lp210
S'k'
asg18
S'Y'
sS'.thisRepN'
p211
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p212
I1
sS'.thisN'
p213
I16
sS'.thisIndex'
p214
I1
sg15
(lp215
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp216
S'space'
p217
asg95
I1
sa(dp218
g16
(lp219
S'k'
asg18
S'N'
sS'.thisRepN'
p220
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p221
I2
sS'.thisN'
p222
I17
sS'.thisIndex'
p223
I13
sg15
(lp224
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I13
sa(dp225
g16
(lp226
S'k'
asg18
S'Y'
sS'.thisRepN'
p227
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p228
I3
sS'.thisN'
p229
I18
sS'.thisIndex'
p230
I6
sg15
(lp231
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp232
S'space'
p233
asg95
I6
sa(dp234
g16
(lp235
S'k'
asg18
S'N'
sS'.thisRepN'
p236
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p237
I4
sS'.thisN'
p238
I19
sS'.thisIndex'
p239
I11
sg15
(lp240
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I11
sa(dp241
g16
(lp242
S'k'
asg18
S'Y'
sS'.thisRepN'
p243
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p244
I5
sS'.thisN'
p245
I20
sS'.thisIndex'
p246
I13
sg15
(lp247
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp248
S'space'
p249
asg95
I13
sa(dp250
g16
(lp251
S'k'
asg18
S'Y'
sS'.thisRepN'
p252
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p253
I6
sS'.thisN'
p254
I21
sS'.thisIndex'
p255
I6
sg15
(lp256
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp257
S'space'
p258
asg95
I6
sa(dp259
g16
(lp260
S'k'
asg18
S'Y'
sS'.thisRepN'
p261
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p262
I7
sS'.thisN'
p263
I22
sS'.thisIndex'
p264
I5
sg15
(lp265
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp266
S'space'
p267
asg95
I5
sa(dp268
g16
(lp269
S'd'
asg18
S'N'
sS'.thisRepN'
p270
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p271
I8
sS'.thisN'
p272
I23
sS'.thisIndex'
p273
I2
sg15
(lp274
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I2
sa(dp275
g16
(lp276
S'd'
asg18
S'Y'
sS'.thisRepN'
p277
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p278
I9
sS'.thisN'
p279
I24
sS'.thisIndex'
p280
I2
sg15
(lp281
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp282
S'space'
p283
asg95
I2
sa(dp284
g16
(lp285
S'k'
asg18
S'Y'
sS'.thisRepN'
p286
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p287
I10
sS'.thisN'
p288
I25
sS'.thisIndex'
p289
I1
sg15
(lp290
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp291
S'space'
p292
asg95
I1
sa(dp293
g16
(lp294
S'd'
asg18
S'Y'
sS'.thisRepN'
p295
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p296
I11
sS'.thisN'
p297
I26
sS'.thisIndex'
p298
I4
sg15
(lp299
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp300
S'space'
p301
asg95
I4
sa(dp302
g16
(lp303
S'd'
asg18
S'N'
sS'.thisRepN'
p304
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p305
I12
sS'.thisN'
p306
I27
sS'.thisIndex'
p307
I14
sg15
(lp308
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I14
sa(dp309
g16
(lp310
S'd'
asg18
S'N'
sS'.thisRepN'
p311
I1
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p312
I13
sS'.thisN'
p313
I28
sS'.thisIndex'
p314
I6
sg15
(lp315
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I6
sa(dp316
g16
(lp317
S'd'
asg18
S'N'
sS'.thisRepN'
p318
I1
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p319
I14
sS'.thisN'
p320
I29
sS'.thisIndex'
p321
I6
sg15
(lp322
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp323
S'space'
p324
asg95
I6
sa(dp325
g16
(lp326
S'k'
asg18
S'Y'
sS'.thisRepN'
p327
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p328
I0
sS'.thisN'
p329
I30
sS'.thisIndex'
p330
I14
sg15
(lp331
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp332
S'space'
p333
asg95
I14
sa(dp334
g16
(lp335
S'd'
asg18
S'N'
sS'.thisRepN'
p336
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p337
I1
sS'.thisN'
p338
I31
sS'.thisIndex'
p339
I1
sg15
(lp340
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I1
sa(dp341
g16
(lp342
S'k'
asg18
S'Y'
sS'.thisRepN'
p343
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p344
I2
sS'.thisN'
p345
I32
sS'.thisIndex'
p346
I0
sg15
(lp347
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I0
sa(dp348
g16
(lp349
S'd'
asg18
S'Y'
sS'.thisRepN'
p350
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p351
I3
sS'.thisN'
p352
I33
sS'.thisIndex'
p353
I5
sg15
(lp354
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp355
S'space'
p356
asg95
I5
sa(dp357
g16
(lp358
S'k'
asg18
S'Y'
sS'.thisRepN'
p359
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p360
I4
sS'.thisN'
p361
I34
sS'.thisIndex'
p362
I8
sg15
(lp363
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I8
sa(dp364
g16
(lp365
S'd'
asg18
S'Y'
sS'.thisRepN'
p366
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p367
I5
sS'.thisN'
p368
I35
sS'.thisIndex'
p369
I6
sg15
(lp370
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp371
S'space'
p372
asg95
I6
sa(dp373
g16
(lp374
S'k'
asg18
S'Y'
sS'.thisRepN'
p375
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p376
I6
sS'.thisN'
p377
I36
sS'.thisIndex'
p378
I0
sg15
(lp379
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp380
S'space'
p381
asg95
I0
sa(dp382
g16
(lp383
S'd'
asg18
S'N'
sS'.thisRepN'
p384
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p385
I7
sS'.thisN'
p386
I37
sS'.thisIndex'
p387
I10
sg15
(lp388
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I10
sa(dp389
g16
(lp390
S'd'
asg18
S'Y'
sS'.thisRepN'
p391
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p392
I8
sS'.thisN'
p393
I38
sS'.thisIndex'
p394
I4
sg15
(lp395
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp396
S'space'
p397
asg95
I4
sa(dp398
g16
(lp399
S'd'
asg18
S'Y'
sS'.thisRepN'
p400
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p401
I9
sS'.thisN'
p402
I39
sS'.thisIndex'
p403
I11
sg15
(lp404
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I11
sa(dp405
g16
(lp406
S'd'
asg18
S'Y'
sS'.thisRepN'
p407
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p408
I10
sS'.thisN'
p409
I40
sS'.thisIndex'
p410
I9
sg15
(lp411
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I9
sa(dp412
g16
(lp413
S'k'
asg18
S'N'
sS'.thisRepN'
p414
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p415
I11
sS'.thisN'
p416
I41
sS'.thisIndex'
p417
I13
sg15
(lp418
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I13
sa(dp419
g16
(lp420
S'd'
asg18
S'N'
sS'.thisRepN'
p421
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p422
I12
sS'.thisN'
p423
I42
sS'.thisIndex'
p424
I3
sg15
(lp425
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I3
sa(dp426
g16
(lp427
S'd'
asg18
S'N'
sS'.thisRepN'
p428
I2
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p429
I13
sS'.thisN'
p430
I43
sS'.thisIndex'
p431
I6
sg15
(lp432
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp433
S'space'
p434
asg95
I6
sa(dp435
g16
(lp436
S'k'
asg18
S'N'
sS'.thisRepN'
p437
I2
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p438
I14
sS'.thisN'
p439
I44
sS'.thisIndex'
p440
I7
sg15
(lp441
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp442
g16
(lp443
S'k'
asg18
S'N'
sS'.thisRepN'
p444
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p445
I0
sS'.thisN'
p446
I45
sS'.thisIndex'
p447
I7
sg15
(lp448
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp449
S'space'
p450
asg95
I7
sa(dp451
g16
(lp452
S'k'
asg18
S'N'
sS'.thisRepN'
p453
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p454
I1
sS'.thisN'
p455
I46
sS'.thisIndex'
p456
I7
sg15
(lp457
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I7
sa(dp458
g16
(lp459
S'k'
asg18
S'N'
sS'.thisRepN'
p460
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p461
I2
sS'.thisN'
p462
I47
sS'.thisIndex'
p463
I6
sg15
(lp464
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp465
S'space'
p466
asg95
I6
sa(dp467
g16
(lp468
S'k'
asg18
S'Y'
sS'.thisRepN'
p469
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p470
I3
sS'.thisN'
p471
I48
sS'.thisIndex'
p472
I3
sg15
(lp473
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg95
I3
sa(dp474
g16
(lp475
S'k'
asg18
S'N'
sg22
I34
sS'.thisN'
p476
I49
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p477
I4
sS'.thisRepN'
p478
I3
sg21
I25
sS'.thisIndex'
p479
I4
sg23
I25
sg15
(lp480
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg95
I4
sa(dp481
g16
(lp482
S'k'
asg95
I10
sS'.thisRepN'
p483
I3
sg30
VF
sg31
g32
sS'.thisTrialN'
p484
I5
sS'.thisN'
p485
I50
sS'.thisIndex'
p486
I10
sg15
(lp487
S'k'
asg17
S'Y'
sg14
I2
sa(dp488
g16
(lp489
S'k'
asg95
I10
sS'.thisRepN'
p490
I3
sg30
VF
sg31
g32
sS'.thisTrialN'
p491
I6
sS'.thisN'
p492
I51
sS'.thisIndex'
p493
I10
sg15
(lp494
S'd'
asg17
S'N'
sg14
I2
sa(dp495
g16
(lp496
S'd'
asg18
S'N'
sS'.thisRepN'
p497
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p498
I7
sS'.thisN'
p499
I52
sS'.thisIndex'
p500
I0
sg15
(lp501
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp502
S'space'
p503
asg95
I0
sa(dp504
g16
(lp505
S'd'
asg18
S'N'
sS'.thisRepN'
p506
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p507
I8
sS'.thisN'
p508
I53
sS'.thisIndex'
p509
I4
sg15
(lp510
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp511
S'space'
p512
asg95
I4
sa(dp513
g16
(lp514
S'k'
asg18
S'N'
sS'.thisRepN'
p515
I3
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p516
I9
sS'.thisN'
p517
I54
sS'.thisIndex'
p518
I12
sg15
(lp519
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp520
S'space'
p521
asg95
I12
sa(dp522
g16
(lp523
S'd'
asg18
S'N'
sS'.thisRepN'
p524
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p525
I10
sS'.thisN'
p526
I55
sS'.thisIndex'
p527
I7
sg15
(lp528
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I7
sa(dp529
g16
(lp530
S'd'
asg18
S'N'
sS'.thisRepN'
p531
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p532
I11
sS'.thisN'
p533
I56
sS'.thisIndex'
p534
I7
sg15
(lp535
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I7
sa(dp536
g16
(lp537
S'd'
asg18
S'N'
sS'.thisRepN'
p538
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p539
I12
sS'.thisN'
p540
I57
sS'.thisIndex'
p541
I0
sg15
(lp542
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I0
sa(dp543
g16
(lp544
S'd'
asg18
S'Y'
sS'.thisRepN'
p545
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p546
I13
sS'.thisN'
p547
I58
sS'.thisIndex'
p548
I6
sg15
(lp549
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp550
S'space'
p551
asg95
I6
sa(dp552
g16
(lp553
S'k'
asg18
S'N'
sS'.thisRepN'
p554
I3
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p555
I14
sS'.thisN'
p556
I59
sS'.thisIndex'
p557
I13
sg15
(lp558
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I13
sa(dp559
g16
(lp560
S'd'
asg18
S'N'
sS'.thisRepN'
p561
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p562
I0
sS'.thisN'
p563
I60
sS'.thisIndex'
p564
I5
sg15
(lp565
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I5
sa(dp566
g16
(lp567
S'd'
asg18
S'Y'
sS'.thisRepN'
p568
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p569
I1
sS'.thisN'
p570
I61
sS'.thisIndex'
p571
I10
sg15
(lp572
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp573
S'space'
p574
asg95
I10
sa(dp575
g16
(lp576
S'd'
asg18
S'Y'
sS'.thisRepN'
p577
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p578
I2
sS'.thisN'
p579
I62
sS'.thisIndex'
p580
I10
sg15
(lp581
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp582
S'space'
p583
asg95
I10
sa(dp584
g16
(lp585
S'd'
asg18
S'N'
sS'.thisRepN'
p586
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p587
I3
sS'.thisN'
p588
I63
sS'.thisIndex'
p589
I13
sg15
(lp590
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I13
sa(dp591
g16
(lp592
S'k'
asg18
S'Y'
sS'.thisRepN'
p593
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p594
I4
sS'.thisN'
p595
I64
sS'.thisIndex'
p596
I0
sg15
(lp597
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp598
S'space'
p599
asg95
I0
sa(dp600
g16
(lp601
S'd'
asg18
S'N'
sS'.thisRepN'
p602
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p603
I5
sS'.thisN'
p604
I65
sS'.thisIndex'
p605
I11
sg15
(lp606
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I11
sa(dp607
g16
(lp608
S'd'
asg18
S'Y'
sS'.thisRepN'
p609
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p610
I6
sS'.thisN'
p611
I66
sS'.thisIndex'
p612
I9
sg15
(lp613
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I9
sa(dp614
g16
(lp615
S'd'
asg18
S'N'
sS'.thisRepN'
p616
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p617
I7
sS'.thisN'
p618
I67
sS'.thisIndex'
p619
I4
sg15
(lp620
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I4
sa(dp621
g16
(lp622
S'k'
asg18
S'Y'
sS'.thisRepN'
p623
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p624
I8
sS'.thisN'
p625
I68
sS'.thisIndex'
p626
I4
sg15
(lp627
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp628
S'space'
p629
asg95
I4
sa(dp630
g16
(lp631
S'd'
asg18
S'Y'
sS'.thisRepN'
p632
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p633
I9
sS'.thisN'
p634
I69
sS'.thisIndex'
p635
I2
sg15
(lp636
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I2
sa(dp637
g16
(lp638
S'd'
asg18
S'Y'
sS'.thisRepN'
p639
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p640
I10
sS'.thisN'
p641
I70
sS'.thisIndex'
p642
I6
sg15
(lp643
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I6
sa(dp644
g16
(lp645
S'd'
asg18
S'Y'
sS'.thisRepN'
p646
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p647
I11
sS'.thisN'
p648
I71
sS'.thisIndex'
p649
I13
sg15
(lp650
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp651
S'space'
p652
asg95
I13
sa(dp653
g16
(lp654
S'd'
asg18
S'N'
sS'.thisRepN'
p655
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p656
I12
sS'.thisN'
p657
I72
sS'.thisIndex'
p658
I9
sg15
(lp659
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp660
S'space'
p661
asg95
I9
sa(dp662
g16
(lp663
S'd'
asg18
S'Y'
sS'.thisRepN'
p664
I4
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p665
I13
sS'.thisN'
p666
I73
sS'.thisIndex'
p667
I14
sg15
(lp668
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I14
sa(dp669
g16
(lp670
S'k'
asg18
S'Y'
sS'.thisRepN'
p671
I4
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p672
I14
sS'.thisN'
p673
I74
sS'.thisIndex'
p674
I12
sg15
(lp675
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp676
S'space'
p677
asg95
I12
sa(dp678
g16
(lp679
S'd'
asg18
S'N'
sS'.thisRepN'
p680
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p681
I0
sS'.thisN'
p682
I75
sS'.thisIndex'
p683
I11
sg15
(lp684
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp685
S'space'
p686
asg95
I11
sa(dp687
g16
(lp688
S'd'
asg18
S'N'
sS'.thisRepN'
p689
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p690
I1
sS'.thisN'
p691
I76
sS'.thisIndex'
p692
I9
sg15
(lp693
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I9
sa(dp694
g16
(lp695
S'd'
asg18
S'Y'
sS'.thisRepN'
p696
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p697
I2
sS'.thisN'
p698
I77
sS'.thisIndex'
p699
I6
sg15
(lp700
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I6
sa(dp701
g16
(lp702
S'd'
asg18
S'Y'
sS'.thisRepN'
p703
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p704
I3
sS'.thisN'
p705
I78
sS'.thisIndex'
p706
I1
sg15
(lp707
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I1
sa(dp708
g16
(lp709
S'd'
asg18
S'Y'
sS'.thisRepN'
p710
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p711
I4
sS'.thisN'
p712
I79
sS'.thisIndex'
p713
I3
sg15
(lp714
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp715
S'space'
p716
asg95
I3
sa(dp717
g16
(lp718
S'd'
asg18
S'N'
sS'.thisRepN'
p719
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p720
I5
sS'.thisN'
p721
I80
sS'.thisIndex'
p722
I8
sg15
(lp723
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I8
sa(dp724
g16
(lp725
S'k'
asg18
S'Y'
sS'.thisRepN'
p726
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p727
I6
sS'.thisN'
p728
I81
sS'.thisIndex'
p729
I12
sg15
(lp730
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp731
S'space'
p732
asg95
I12
sa(dp733
g16
(lp734
S'k'
asg18
S'Y'
sS'.thisRepN'
p735
I5
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p736
I7
sS'.thisN'
p737
I82
sS'.thisIndex'
p738
I6
sg15
(lp739
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I6
sa(dp740
g16
(lp741
S'd'
asg18
S'Y'
sS'.thisRepN'
p742
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p743
I8
sS'.thisN'
p744
I83
sS'.thisIndex'
p745
I7
sg15
(lp746
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp747
S'space'
p748
asg95
I7
sa(dp749
g16
(lp750
S'd'
asg18
S'Y'
sS'.thisRepN'
p751
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p752
I9
sS'.thisN'
p753
I84
sS'.thisIndex'
p754
I11
sg15
(lp755
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp756
S'space'
p757
asg95
I11
sa(dp758
g16
(lp759
S'k'
asg18
S'N'
sS'.thisRepN'
p760
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p761
I10
sS'.thisN'
p762
I85
sS'.thisIndex'
p763
I14
sg15
(lp764
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I14
sa(dp765
g16
(lp766
S'd'
asg18
S'Y'
sS'.thisRepN'
p767
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p768
I11
sS'.thisN'
p769
I86
sS'.thisIndex'
p770
I4
sg15
(lp771
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp772
S'space'
p773
asg95
I4
sa(dp774
g16
(lp775
S'd'
asg18
S'Y'
sS'.thisRepN'
p776
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p777
I12
sS'.thisN'
p778
I87
sS'.thisIndex'
p779
I7
sg15
(lp780
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp781
S'space'
p782
asg95
I7
sa(dp783
g16
(lp784
S'k'
asg18
S'N'
sS'.thisRepN'
p785
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p786
I13
sS'.thisN'
p787
I88
sS'.thisIndex'
p788
I6
sg15
(lp789
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I6
sa(dp790
g18
S'N'
sS'.thisRepN'
p791
I5
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p792
I14
sS'.thisN'
p793
I89
sS'.thisIndex'
p794
I4
sg15
Nsg30
VF
sg17
g185
sg14
I2
sg19
Nsg95
I4
sa(dp795
g16
(lp796
S'd'
asg18
S'Y'
sS'.thisRepN'
p797
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p798
I0
sS'.thisN'
p799
I90
sS'.thisIndex'
p800
I5
sg15
(lp801
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp802
S'space'
p803
asg95
I5
sa(dp804
g16
(lp805
S'd'
asg18
S'Y'
sS'.thisRepN'
p806
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p807
I1
sS'.thisN'
p808
I91
sS'.thisIndex'
p809
I3
sg15
(lp810
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp811
S'space'
p812
asg95
I3
sa(dp813
g16
(lp814
S'd'
asg18
S'N'
sS'.thisRepN'
p815
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p816
I2
sS'.thisN'
p817
I92
sS'.thisIndex'
p818
I5
sg15
(lp819
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I5
sa(dp820
g16
(lp821
S'd'
asg18
S'Y'
sS'.thisRepN'
p822
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p823
I3
sS'.thisN'
p824
I93
sS'.thisIndex'
p825
I14
sg15
(lp826
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I14
sa(dp827
g16
(lp828
S'k'
asg18
S'Y'
sS'.thisRepN'
p829
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p830
I4
sS'.thisN'
p831
I94
sS'.thisIndex'
p832
I1
sg15
(lp833
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp834
S'space'
p835
asg95
I1
sa(dp836
g16
(lp837
S'd'
asg18
S'N'
sS'.thisRepN'
p838
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p839
I5
sS'.thisN'
p840
I95
sS'.thisIndex'
p841
I1
sg15
(lp842
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I1
sa(dp843
g16
(lp844
S'k'
asg18
S'N'
sS'.thisRepN'
p845
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p846
I6
sS'.thisN'
p847
I96
sS'.thisIndex'
p848
I7
sg15
(lp849
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp850
S'space'
p851
asg95
I7
sa(dp852
g16
(lp853
S'd'
asg18
S'Y'
sS'.thisRepN'
p854
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p855
I7
sS'.thisN'
p856
I97
sS'.thisIndex'
p857
I7
sg15
(lp858
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp859
S'space'
p860
asg95
I7
sa(dp861
g16
(lp862
S'k'
asg18
S'N'
sS'.thisRepN'
p863
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p864
I8
sS'.thisN'
p865
I98
sS'.thisIndex'
p866
I3
sg15
(lp867
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg95
I3
sa(dp868
g16
(lp869
S'k'
asg18
S'N'
sg22
I34
sS'.thisN'
p870
I99
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p871
I9
sS'.thisRepN'
p872
I6
sg21
I21
sS'.thisIndex'
p873
I4
sg23
I25
sg15
(lp874
S'd'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg95
I4
sa(dp875
g16
(lp876
S'd'
asg95
I4
sS'.thisRepN'
p877
I6
sg30
VF
sg31
g32
sS'.thisTrialN'
p878
I10
sS'.thisN'
p879
I100
sS'.thisIndex'
p880
I4
sg15
(lp881
S'k'
asg17
S'N'
sg14
I3
sa(dp882
g16
(lp883
S'k'
asg95
I9
sS'.thisRepN'
p884
I6
sg30
VF
sg31
g32
sS'.thisTrialN'
p885
I11
sS'.thisN'
p886
I101
sS'.thisIndex'
p887
I9
sg15
(lp888
S'k'
asg17
S'Y'
sg14
I3
sa(dp889
g16
(lp890
S'k'
asg18
S'N'
sS'.thisRepN'
p891
I6
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p892
I12
sS'.thisN'
p893
I102
sS'.thisIndex'
p894
I9
sg15
(lp895
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I9
sa(dp896
g16
(lp897
S'k'
asg18
S'N'
sS'.thisRepN'
p898
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p899
I13
sS'.thisN'
p900
I103
sS'.thisIndex'
p901
I3
sg15
(lp902
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp903
S'space'
p904
asg95
I3
sa(dp905
g16
(lp906
S'k'
asg18
S'Y'
sS'.thisRepN'
p907
I6
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p908
I14
sS'.thisN'
p909
I104
sS'.thisIndex'
p910
I6
sg15
(lp911
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I6
sa(dp912
g16
(lp913
S'k'
asg18
S'N'
sS'.thisRepN'
p914
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p915
I0
sS'.thisN'
p916
I105
sS'.thisIndex'
p917
I6
sg15
(lp918
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp919
S'space'
p920
asg95
I6
sa(dp921
g16
(lp922
S'k'
asg18
S'Y'
sS'.thisRepN'
p923
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p924
I1
sS'.thisN'
p925
I106
sS'.thisIndex'
p926
I4
sg15
(lp927
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I4
sa(dp928
g16
(lp929
S'k'
asg18
S'N'
sS'.thisRepN'
p930
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p931
I2
sS'.thisN'
p932
I107
sS'.thisIndex'
p933
I2
sg15
(lp934
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp935
g16
(lp936
S'k'
asg18
S'Y'
sS'.thisRepN'
p937
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p938
I3
sS'.thisN'
p939
I108
sS'.thisIndex'
p940
I4
sg15
(lp941
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I4
sa(dp942
g16
(lp943
S'k'
asg18
S'Y'
sS'.thisRepN'
p944
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p945
I4
sS'.thisN'
p946
I109
sS'.thisIndex'
p947
I7
sg15
(lp948
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp949
S'space'
p950
asg95
I7
sa(dp951
g16
(lp952
S'k'
asg18
S'Y'
sS'.thisRepN'
p953
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p954
I5
sS'.thisN'
p955
I110
sS'.thisIndex'
p956
I2
sg15
(lp957
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp958
g16
(lp959
S'k'
asg18
S'Y'
sS'.thisRepN'
p960
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p961
I6
sS'.thisN'
p962
I111
sS'.thisIndex'
p963
I8
sg15
(lp964
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp965
g16
(lp966
S'k'
asg18
S'Y'
sS'.thisRepN'
p967
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p968
I7
sS'.thisN'
p969
I112
sS'.thisIndex'
p970
I8
sg15
(lp971
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp972
g16
(lp973
S'd'
asg18
S'Y'
sS'.thisRepN'
p974
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p975
I8
sS'.thisN'
p976
I113
sS'.thisIndex'
p977
I1
sg15
(lp978
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
(lp979
S'space'
p980
asg95
I1
sa(dp981
g16
(lp982
S'k'
asg18
S'N'
sS'.thisRepN'
p983
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p984
I9
sS'.thisN'
p985
I114
sS'.thisIndex'
p986
I4
sg15
(lp987
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I4
sa(dp988
g16
(lp989
S'k'
asg18
S'Y'
sS'.thisRepN'
p990
I7
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p991
I10
sS'.thisN'
p992
I115
sS'.thisIndex'
p993
I9
sg15
(lp994
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp995
S'space'
p996
asg95
I9
sa(dp997
g16
(lp998
S'k'
asg18
S'N'
sS'.thisRepN'
p999
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1000
I11
sS'.thisN'
p1001
I116
sS'.thisIndex'
p1002
I0
sg15
(lp1003
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1004
S'space'
p1005
asg95
I0
sa(dp1006
g16
(lp1007
S'k'
asg18
S'N'
sS'.thisRepN'
p1008
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1009
I12
sS'.thisN'
p1010
I117
sS'.thisIndex'
p1011
I1
sg15
(lp1012
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1013
S'space'
p1014
asg95
I1
sa(dp1015
g16
(lp1016
S'k'
asg18
S'Y'
sS'.thisRepN'
p1017
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1018
I13
sS'.thisN'
p1019
I118
sS'.thisIndex'
p1020
I14
sg15
(lp1021
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I14
sa(dp1022
g16
(lp1023
S'k'
asg18
S'Y'
sS'.thisRepN'
p1024
I7
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1025
I14
sS'.thisN'
p1026
I119
sS'.thisIndex'
p1027
I1
sg15
(lp1028
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp1029
g16
(lp1030
S'd'
asg18
S'Y'
sS'.thisRepN'
p1031
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1032
I0
sS'.thisN'
p1033
I120
sS'.thisIndex'
p1034
I9
sg15
(lp1035
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I9
sa(dp1036
g16
(lp1037
S'k'
asg18
S'N'
sS'.thisRepN'
p1038
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1039
I1
sS'.thisN'
p1040
I121
sS'.thisIndex'
p1041
I12
sg15
(lp1042
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I12
sa(dp1043
g16
(lp1044
S'k'
asg18
S'Y'
sS'.thisRepN'
p1045
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1046
I2
sS'.thisN'
p1047
I122
sS'.thisIndex'
p1048
I6
sg15
(lp1049
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1050
S'd'
asg95
I6
sa(dp1051
g16
(lp1052
S'd'
asg18
S'Y'
sS'.thisRepN'
p1053
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1054
I3
sS'.thisN'
p1055
I123
sS'.thisIndex'
p1056
I13
sg15
(lp1057
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1058
S'space'
p1059
asg95
I13
sa(dp1060
g16
(lp1061
S'k'
asg18
S'Y'
sS'.thisRepN'
p1062
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1063
I4
sS'.thisN'
p1064
I124
sS'.thisIndex'
p1065
I9
sg15
(lp1066
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I9
sa(dp1067
g16
(lp1068
S'k'
asg18
S'Y'
sS'.thisRepN'
p1069
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1070
I5
sS'.thisN'
p1071
I125
sS'.thisIndex'
p1072
I6
sg15
(lp1073
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1074
S'space'
p1075
asg95
I6
sa(dp1076
g16
(lp1077
S'd'
asg18
S'Y'
sS'.thisRepN'
p1078
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1079
I6
sS'.thisN'
p1080
I126
sS'.thisIndex'
p1081
I7
sg15
(lp1082
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1083
S'space'
p1084
asg95
I7
sa(dp1085
g16
(lp1086
S'k'
asg18
S'Y'
sS'.thisRepN'
p1087
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1088
I7
sS'.thisN'
p1089
I127
sS'.thisIndex'
p1090
I13
sg15
(lp1091
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1092
S'space'
p1093
asg95
I13
sa(dp1094
g16
(lp1095
S'd'
asg18
S'Y'
sS'.thisRepN'
p1096
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1097
I8
sS'.thisN'
p1098
I128
sS'.thisIndex'
p1099
I8
sg15
(lp1100
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1101
S'space'
p1102
asg95
I8
sa(dp1103
g16
(lp1104
S'k'
asg18
S'Y'
sS'.thisRepN'
p1105
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1106
I9
sS'.thisN'
p1107
I129
sS'.thisIndex'
p1108
I2
sg15
(lp1109
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1110
S'space'
p1111
asg95
I2
sa(dp1112
g16
(lp1113
S'd'
asg18
S'Y'
sS'.thisRepN'
p1114
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1115
I10
sS'.thisN'
p1116
I130
sS'.thisIndex'
p1117
I9
sg15
(lp1118
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1119
S'space'
p1120
asg95
I9
sa(dp1121
g16
(lp1122
S'd'
asg18
S'N'
sS'.thisRepN'
p1123
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1124
I11
sS'.thisN'
p1125
I131
sS'.thisIndex'
p1126
I7
sg15
(lp1127
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I7
sa(dp1128
g16
(lp1129
S'd'
asg18
S'N'
sS'.thisRepN'
p1130
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1131
I12
sS'.thisN'
p1132
I132
sS'.thisIndex'
p1133
I1
sg15
(lp1134
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp1135
g16
(lp1136
S'k'
asg18
S'Y'
sS'.thisRepN'
p1137
I8
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1138
I13
sS'.thisN'
p1139
I133
sS'.thisIndex'
p1140
I0
sg15
(lp1141
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1142
S'space'
p1143
asg95
I0
sa(dp1144
g16
(lp1145
S'k'
asg18
S'Y'
sS'.thisRepN'
p1146
I8
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1147
I14
sS'.thisN'
p1148
I134
sS'.thisIndex'
p1149
I3
sg15
(lp1150
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp1151
g16
(lp1152
S'k'
asg18
S'Y'
sS'.thisRepN'
p1153
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1154
I0
sS'.thisN'
p1155
I135
sS'.thisIndex'
p1156
I10
sg15
(lp1157
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I10
sa(dp1158
g16
(lp1159
S'k'
asg18
S'N'
sS'.thisRepN'
p1160
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1161
I1
sS'.thisN'
p1162
I136
sS'.thisIndex'
p1163
I1
sg15
(lp1164
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp1165
g16
(lp1166
S'd'
asg18
S'Y'
sS'.thisRepN'
p1167
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1168
I2
sS'.thisN'
p1169
I137
sS'.thisIndex'
p1170
I4
sg15
(lp1171
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I4
sa(dp1172
g16
(lp1173
S'k'
asg18
S'N'
sS'.thisRepN'
p1174
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1175
I3
sS'.thisN'
p1176
I138
sS'.thisIndex'
p1177
I7
sg15
(lp1178
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I7
sa(dp1179
g16
(lp1180
S'd'
asg18
S'N'
sS'.thisRepN'
p1181
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1182
I4
sS'.thisN'
p1183
I139
sS'.thisIndex'
p1184
I8
sg15
(lp1185
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp1186
g16
(lp1187
S'd'
asg18
S'N'
sS'.thisRepN'
p1188
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1189
I5
sS'.thisN'
p1190
I140
sS'.thisIndex'
p1191
I0
sg15
(lp1192
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1193
S'space'
p1194
asg95
I0
sa(dp1195
g16
(lp1196
S'd'
asg18
S'N'
sS'.thisRepN'
p1197
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1198
I6
sS'.thisN'
p1199
I141
sS'.thisIndex'
p1200
I2
sg15
(lp1201
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I2
sa(dp1202
g16
(lp1203
S'd'
asg18
S'N'
sS'.thisRepN'
p1204
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1205
I7
sS'.thisN'
p1206
I142
sS'.thisIndex'
p1207
I8
sg15
(lp1208
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I8
sa(dp1209
g16
(lp1210
S'd'
asg18
S'N'
sS'.thisRepN'
p1211
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1212
I8
sS'.thisN'
p1213
I143
sS'.thisIndex'
p1214
I12
sg15
(lp1215
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I12
sa(dp1216
g16
(lp1217
S'k'
asg18
S'N'
sS'.thisRepN'
p1218
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1219
I9
sS'.thisN'
p1220
I144
sS'.thisIndex'
p1221
I0
sg15
(lp1222
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1223
S'space'
p1224
asg95
I0
sa(dp1225
g16
(lp1226
S'd'
asg18
S'N'
sS'.thisRepN'
p1227
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1228
I10
sS'.thisN'
p1229
I145
sS'.thisIndex'
p1230
I14
sg15
(lp1231
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1232
S'space'
p1233
asg95
I14
sa(dp1234
g16
(lp1235
S'k'
asg18
S'N'
sS'.thisRepN'
p1236
I9
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1237
I11
sS'.thisN'
p1238
I146
sS'.thisIndex'
p1239
I11
sg15
(lp1240
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1241
S'space'
p1242
asg95
I11
sa(dp1243
g16
(lp1244
S'k'
asg18
S'N'
sS'.thisRepN'
p1245
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1246
I12
sS'.thisN'
p1247
I147
sS'.thisIndex'
p1248
I3
sg15
(lp1249
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I3
sa(dp1250
g16
(lp1251
S'd'
asg18
S'N'
sS'.thisRepN'
p1252
I9
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1253
I13
sS'.thisN'
p1254
I148
sS'.thisIndex'
p1255
I1
sg15
(lp1256
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg95
I1
sa(dp1257
g16
(lp1258
S'd'
asg18
S'N'
sg22
I26
sS'.thisN'
p1259
I149
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1260
I14
sS'.thisRepN'
p1261
I9
sg21
I44
sS'.thisIndex'
p1262
I2
sg23
I25
sg15
(lp1263
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg95
I2
sa(dp1264
g16
(lp1265
S'd'
asg95
I4
sS'.thisRepN'
p1266
I10
sg30
VF
sg31
g32
sS'.thisTrialN'
p1267
I0
sS'.thisN'
p1268
I150
sS'.thisIndex'
p1269
I4
sg15
(lp1270
S'd'
asg17
S'Y'
sg14
I4
sa(dp1271
g16
(lp1272
S'k'
asg95
I12
sS'.thisRepN'
p1273
I10
sg30
VF
sg31
g32
sS'.thisTrialN'
p1274
I1
sS'.thisN'
p1275
I151
sS'.thisIndex'
p1276
I12
sg15
(lp1277
S'k'
asg17
S'Y'
sg14
I4
sa(dp1278
g16
(lp1279
S'd'
asg18
S'Y'
sS'.thisRepN'
p1280
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1281
I2
sS'.thisN'
p1282
I152
sS'.thisIndex'
p1283
I12
sg15
(lp1284
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1285
S'space'
p1286
asg95
I12
sa(dp1287
g16
(lp1288
S'd'
asg18
S'N'
sS'.thisRepN'
p1289
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1290
I3
sS'.thisN'
p1291
I153
sS'.thisIndex'
p1292
I8
sg15
(lp1293
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg95
I8
sa(dp1294
g16
(lp1295
S'd'
asg18
S'N'
sS'.thisRepN'
p1296
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1297
I4
sS'.thisN'
p1298
I154
sS'.thisIndex'
p1299
I13
sg15
(lp1300
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I13
sa(dp1301
g16
(lp1302
S'k'
asg18
S'Y'
sS'.thisRepN'
p1303
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1304
I5
sS'.thisN'
p1305
I155
sS'.thisIndex'
p1306
I12
sg15
(lp1307
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I12
sa(dp1308
g16
(lp1309
S'k'
asg18
S'Y'
sS'.thisRepN'
p1310
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1311
I6
sS'.thisN'
p1312
I156
sS'.thisIndex'
p1313
I9
sg15
(lp1314
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1315
S'space'
p1316
asg95
I9
sa(dp1317
g16
(lp1318
S'k'
asg18
S'Y'
sS'.thisRepN'
p1319
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1320
I7
sS'.thisN'
p1321
I157
sS'.thisIndex'
p1322
I3
sg15
(lp1323
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1324
g16
(lp1325
S'k'
asg18
S'Y'
sS'.thisRepN'
p1326
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1327
I8
sS'.thisN'
p1328
I158
sS'.thisIndex'
p1329
I11
sg15
(lp1330
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1331
S'space'
p1332
asg95
I11
sa(dp1333
g16
(lp1334
S'd'
asg18
S'Y'
sS'.thisRepN'
p1335
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1336
I9
sS'.thisN'
p1337
I159
sS'.thisIndex'
p1338
I7
sg15
(lp1339
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1340
g16
(lp1341
S'k'
asg18
S'Y'
sS'.thisRepN'
p1342
I10
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1343
I10
sS'.thisN'
p1344
I160
sS'.thisIndex'
p1345
I3
sg15
(lp1346
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1347
g16
(lp1348
S'd'
asg18
S'N'
sS'.thisRepN'
p1349
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1350
I11
sS'.thisN'
p1351
I161
sS'.thisIndex'
p1352
I12
sg15
(lp1353
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I12
sa(dp1354
g16
(lp1355
S'k'
asg18
S'N'
sS'.thisRepN'
p1356
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1357
I12
sS'.thisN'
p1358
I162
sS'.thisIndex'
p1359
I12
sg15
(lp1360
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I12
sa(dp1361
g16
(lp1362
S'k'
asg18
S'N'
sS'.thisRepN'
p1363
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1364
I13
sS'.thisN'
p1365
I163
sS'.thisIndex'
p1366
I13
sg15
(lp1367
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I13
sa(dp1368
g16
(lp1369
S'k'
asg18
S'N'
sS'.thisRepN'
p1370
I10
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1371
I14
sS'.thisN'
p1372
I164
sS'.thisIndex'
p1373
I12
sg15
(lp1374
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I12
sa(dp1375
g18
S'N'
sS'.thisRepN'
p1376
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1377
I0
sS'.thisN'
p1378
I165
sS'.thisIndex'
p1379
I3
sg15
Nsg30
VF
sg17
g185
sg14
I4
sg19
Nsg95
I3
sa(dp1380
g16
(lp1381
S'd'
asg18
S'N'
sS'.thisRepN'
p1382
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1383
I1
sS'.thisN'
p1384
I166
sS'.thisIndex'
p1385
I0
sg15
(lp1386
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1387
g16
(lp1388
S'd'
asg18
S'N'
sS'.thisRepN'
p1389
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1390
I2
sS'.thisN'
p1391
I167
sS'.thisIndex'
p1392
I11
sg15
(lp1393
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I11
sa(dp1394
g16
(lp1395
S'k'
asg18
S'Y'
sS'.thisRepN'
p1396
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1397
I3
sS'.thisN'
p1398
I168
sS'.thisIndex'
p1399
I0
sg15
(lp1400
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1401
S'space'
p1402
asg95
I0
sa(dp1403
g16
(lp1404
S'k'
asg18
S'N'
sS'.thisRepN'
p1405
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1406
I4
sS'.thisN'
p1407
I169
sS'.thisIndex'
p1408
I1
sg15
(lp1409
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I1
sa(dp1410
g18
S'Y'
sS'.thisRepN'
p1411
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1412
I5
sS'.thisN'
p1413
I170
sS'.thisIndex'
p1414
I8
sg15
Nsg30
VF
sg17
g185
sg14
I4
sg19
Nsg95
I8
sa(dp1415
g16
(lp1416
S'k'
asg18
S'Y'
sS'.thisRepN'
p1417
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1418
I6
sS'.thisN'
p1419
I171
sS'.thisIndex'
p1420
I6
sg15
(lp1421
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I6
sa(dp1422
g16
(lp1423
S'd'
asg18
S'N'
sS'.thisRepN'
p1424
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1425
I7
sS'.thisN'
p1426
I172
sS'.thisIndex'
p1427
I9
sg15
(lp1428
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1429
g16
(lp1430
S'k'
asg18
S'N'
sS'.thisRepN'
p1431
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1432
I8
sS'.thisN'
p1433
I173
sS'.thisIndex'
p1434
I9
sg15
(lp1435
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1436
g16
(lp1437
S'k'
asg18
S'N'
sS'.thisRepN'
p1438
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1439
I9
sS'.thisN'
p1440
I174
sS'.thisIndex'
p1441
I10
sg15
(lp1442
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1443
S'space'
p1444
asg95
I10
sa(dp1445
g16
(lp1446
S'd'
asg18
S'N'
sS'.thisRepN'
p1447
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1448
I10
sS'.thisN'
p1449
I175
sS'.thisIndex'
p1450
I3
sg15
(lp1451
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1452
g16
(lp1453
S'd'
asg18
S'Y'
sS'.thisRepN'
p1454
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1455
I11
sS'.thisN'
p1456
I176
sS'.thisIndex'
p1457
I10
sg15
(lp1458
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1459
S'space'
p1460
asg95
I10
sa(dp1461
g16
(lp1462
S'k'
asg18
S'Y'
sS'.thisRepN'
p1463
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1464
I12
sS'.thisN'
p1465
I177
sS'.thisIndex'
p1466
I7
sg15
(lp1467
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1468
g16
(lp1469
S'k'
asg18
S'Y'
sS'.thisRepN'
p1470
I11
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1471
I13
sS'.thisN'
p1472
I178
sS'.thisIndex'
p1473
I3
sg15
(lp1474
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1475
g16
(lp1476
S'd'
asg18
S'Y'
sS'.thisRepN'
p1477
I11
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1478
I14
sS'.thisN'
p1479
I179
sS'.thisIndex'
p1480
I6
sg15
(lp1481
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1482
S'space'
p1483
asg95
I6
sa(dp1484
g16
(lp1485
S'd'
asg18
S'Y'
sS'.thisRepN'
p1486
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1487
I0
sS'.thisN'
p1488
I180
sS'.thisIndex'
p1489
I0
sg15
(lp1490
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1491
g18
S'N'
sS'.thisRepN'
p1492
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1493
I1
sS'.thisN'
p1494
I181
sS'.thisIndex'
p1495
I1
sg15
Nsg30
VF
sg17
g185
sg14
I4
sg19
Nsg95
I1
sa(dp1496
g16
(lp1497
S'd'
asg18
S'N'
sS'.thisRepN'
p1498
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1499
I2
sS'.thisN'
p1500
I182
sS'.thisIndex'
p1501
I10
sg15
(lp1502
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I10
sa(dp1503
g16
(lp1504
S'k'
asg18
S'Y'
sS'.thisRepN'
p1505
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1506
I3
sS'.thisN'
p1507
I183
sS'.thisIndex'
p1508
I0
sg15
(lp1509
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1510
g16
(lp1511
S'k'
asg18
S'N'
sS'.thisRepN'
p1512
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1513
I4
sS'.thisN'
p1514
I184
sS'.thisIndex'
p1515
I5
sg15
(lp1516
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I5
sa(dp1517
g16
(lp1518
S'd'
asg18
S'Y'
sS'.thisRepN'
p1519
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1520
I5
sS'.thisN'
p1521
I185
sS'.thisIndex'
p1522
I10
sg15
(lp1523
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1524
S'space'
p1525
asg95
I10
sa(dp1526
g18
S'N'
sS'.thisRepN'
p1527
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1528
I6
sS'.thisN'
p1529
I186
sS'.thisIndex'
p1530
I0
sg15
Nsg30
VF
sg17
g185
sg14
I4
sg19
Nsg95
I0
sa(dp1531
g16
(lp1532
S'k'
asg18
S'N'
sS'.thisRepN'
p1533
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1534
I7
sS'.thisN'
p1535
I187
sS'.thisIndex'
p1536
I11
sg15
(lp1537
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I11
sa(dp1538
g16
(lp1539
S'k'
asg18
S'N'
sS'.thisRepN'
p1540
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1541
I8
sS'.thisN'
p1542
I188
sS'.thisIndex'
p1543
I0
sg15
(lp1544
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1545
g16
(lp1546
S'k'
asg18
S'Y'
sS'.thisRepN'
p1547
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1548
I9
sS'.thisN'
p1549
I189
sS'.thisIndex'
p1550
I9
sg15
(lp1551
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I9
sa(dp1552
g18
S'N'
sS'.thisRepN'
p1553
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1554
I10
sS'.thisN'
p1555
I190
sS'.thisIndex'
p1556
I4
sg15
Nsg30
VF
sg17
g185
sg14
I4
sg19
Nsg95
I4
sa(dp1557
g16
(lp1558
S'd'
asg18
S'Y'
sS'.thisRepN'
p1559
I12
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1560
I11
sS'.thisN'
p1561
I191
sS'.thisIndex'
p1562
I1
sg15
(lp1563
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I1
sa(dp1564
g16
(lp1565
S'k'
asg18
S'N'
sS'.thisRepN'
p1566
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1567
I12
sS'.thisN'
p1568
I192
sS'.thisIndex'
p1569
I3
sg15
(lp1570
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I3
sa(dp1571
g16
(lp1572
S'k'
asg18
S'Y'
sS'.thisRepN'
p1573
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1574
I13
sS'.thisN'
p1575
I193
sS'.thisIndex'
p1576
I1
sg15
(lp1577
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1578
S'space'
p1579
asg95
I1
sa(dp1580
g16
(lp1581
S'd'
asg18
S'Y'
sS'.thisRepN'
p1582
I12
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1583
I14
sS'.thisN'
p1584
I194
sS'.thisIndex'
p1585
I0
sg15
(lp1586
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1587
S'space'
p1588
asg95
I0
sa(dp1589
g18
S'N'
sS'.thisRepN'
p1590
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1591
I0
sS'.thisN'
p1592
I195
sS'.thisIndex'
p1593
I7
sg15
Nsg30
VF
sg17
g185
sg14
I4
sg19
Nsg95
I7
sa(dp1594
g16
(lp1595
S'k'
asg18
S'Y'
sS'.thisRepN'
p1596
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1597
I1
sS'.thisN'
p1598
I196
sS'.thisIndex'
p1599
I0
sg15
(lp1600
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1601
S'space'
p1602
asg95
I0
sa(dp1603
g16
(lp1604
S'd'
asg18
S'Y'
sS'.thisRepN'
p1605
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1606
I2
sS'.thisN'
p1607
I197
sS'.thisIndex'
p1608
I7
sg15
(lp1609
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I7
sa(dp1610
g16
(lp1611
S'd'
asg18
S'N'
sS'.thisRepN'
p1612
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1613
I3
sS'.thisN'
p1614
I198
sS'.thisIndex'
p1615
I0
sg15
(lp1616
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg95
I0
sa(dp1617
g23
I24
sg18
S'Y'
sg22
I33
sS'.thisN'
p1618
I199
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1619
I4
sS'.thisRepN'
p1620
I13
sg21
I42
sS'.thisIndex'
p1621
I6
sg15
Nsg30
VF
sg17
g185
sg14
I4
sg19
Nsg95
I6
sa(dp1622
g16
(lp1623
S'd'
asg95
I11
sS'.thisRepN'
p1624
I13
sg30
VF
sg31
g32
sS'.thisTrialN'
p1625
I5
sS'.thisN'
p1626
I200
sS'.thisIndex'
p1627
I11
sg15
(lp1628
S'd'
asg17
S'Y'
sg14
I5
sa(dp1629
g16
(lp1630
S'd'
asg95
I2
sS'.thisRepN'
p1631
I13
sg30
VF
sg31
g32
sS'.thisTrialN'
p1632
I6
sS'.thisN'
p1633
I201
sS'.thisIndex'
p1634
I2
sg15
(lp1635
S'k'
asg17
S'N'
sg14
I5
sa(dp1636
g16
(lp1637
S'k'
asg18
S'Y'
sS'.thisRepN'
p1638
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1639
I7
sS'.thisN'
p1640
I202
sS'.thisIndex'
p1641
I7
sg15
(lp1642
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp1643
g16
(lp1644
S'd'
asg18
S'Y'
sS'.thisRepN'
p1645
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1646
I8
sS'.thisN'
p1647
I203
sS'.thisIndex'
p1648
I5
sg15
(lp1649
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1650
S'space'
p1651
asg95
I5
sa(dp1652
g16
(lp1653
S'k'
asg18
S'N'
sS'.thisRepN'
p1654
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1655
I9
sS'.thisN'
p1656
I204
sS'.thisIndex'
p1657
I0
sg15
(lp1658
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I0
sa(dp1659
g16
(lp1660
S'd'
asg18
S'N'
sS'.thisRepN'
p1661
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1662
I10
sS'.thisN'
p1663
I205
sS'.thisIndex'
p1664
I10
sg15
(lp1665
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I10
sa(dp1666
g18
S'N'
sS'.thisRepN'
p1667
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1668
I11
sS'.thisN'
p1669
I206
sS'.thisIndex'
p1670
I8
sg15
Nsg30
VF
sg17
g185
sg14
I5
sg19
Nsg95
I8
sa(dp1671
g16
(lp1672
S'k'
asg18
S'N'
sS'.thisRepN'
p1673
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1674
I12
sS'.thisN'
p1675
I207
sS'.thisIndex'
p1676
I3
sg15
(lp1677
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1678
S'space'
p1679
asg95
I3
sa(dp1680
g16
(lp1681
S'k'
asg18
S'Y'
sS'.thisRepN'
p1682
I13
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1683
I13
sS'.thisN'
p1684
I208
sS'.thisIndex'
p1685
I14
sg15
(lp1686
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1687
S'space'
p1688
asg95
I14
sa(dp1689
g16
(lp1690
S'd'
asg18
S'Y'
sS'.thisRepN'
p1691
I13
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1692
I14
sS'.thisN'
p1693
I209
sS'.thisIndex'
p1694
I5
sg15
(lp1695
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1696
S'k'
asg95
I5
sa(dp1697
g16
(lp1698
S'd'
asg18
S'N'
sS'.thisRepN'
p1699
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1700
I0
sS'.thisN'
p1701
I210
sS'.thisIndex'
p1702
I4
sg15
(lp1703
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp1704
S'space'
p1705
asg95
I4
sa(dp1706
g16
(lp1707
S'd'
asg18
S'Y'
sS'.thisRepN'
p1708
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1709
I1
sS'.thisN'
p1710
I211
sS'.thisIndex'
p1711
I8
sg15
(lp1712
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1713
S'space'
p1714
asg95
I8
sa(dp1715
g16
(lp1716
S'k'
asg18
S'N'
sS'.thisRepN'
p1717
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1718
I2
sS'.thisN'
p1719
I212
sS'.thisIndex'
p1720
I2
sg15
(lp1721
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I2
sa(dp1722
g18
S'N'
sS'.thisRepN'
p1723
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1724
I3
sS'.thisN'
p1725
I213
sS'.thisIndex'
p1726
I9
sg15
Nsg30
VF
sg17
g185
sg14
I5
sg19
Nsg95
I9
sa(dp1727
g16
(lp1728
S'k'
asg18
S'N'
sS'.thisRepN'
p1729
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1730
I4
sS'.thisN'
p1731
I214
sS'.thisIndex'
p1732
I14
sg15
(lp1733
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I14
sa(dp1734
g16
(lp1735
S'd'
asg18
S'N'
sS'.thisRepN'
p1736
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1737
I5
sS'.thisN'
p1738
I215
sS'.thisIndex'
p1739
I13
sg15
(lp1740
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I13
sa(dp1741
g16
(lp1742
S'k'
asg18
S'Y'
sS'.thisRepN'
p1743
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1744
I6
sS'.thisN'
p1745
I216
sS'.thisIndex'
p1746
I12
sg15
(lp1747
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1748
S'space'
p1749
asg95
I12
sa(dp1750
g18
S'Y'
sS'.thisRepN'
p1751
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1752
I7
sS'.thisN'
p1753
I217
sS'.thisIndex'
p1754
I5
sg15
Nsg30
VF
sg17
g185
sg14
I5
sg19
Nsg95
I5
sa(dp1755
g16
(lp1756
S'd'
asg18
S'Y'
sS'.thisRepN'
p1757
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1758
I8
sS'.thisN'
p1759
I218
sS'.thisIndex'
p1760
I14
sg15
(lp1761
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I14
sa(dp1762
g16
(lp1763
S'k'
asg18
S'N'
sS'.thisRepN'
p1764
I14
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1765
I9
sS'.thisN'
p1766
I219
sS'.thisIndex'
p1767
I14
sg15
(lp1768
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1769
S'space'
p1770
asg95
I14
sa(dp1771
g16
(lp1772
S'd'
asg18
S'N'
sS'.thisRepN'
p1773
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1774
I10
sS'.thisN'
p1775
I220
sS'.thisIndex'
p1776
I12
sg15
(lp1777
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I12
sa(dp1778
g16
(lp1779
S'd'
asg18
S'N'
sS'.thisRepN'
p1780
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1781
I11
sS'.thisN'
p1782
I221
sS'.thisIndex'
p1783
I8
sg15
(lp1784
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I8
sa(dp1785
g16
(lp1786
S'd'
asg18
S'Y'
sS'.thisRepN'
p1787
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1788
I12
sS'.thisN'
p1789
I222
sS'.thisIndex'
p1790
I11
sg15
(lp1791
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1792
S'space'
p1793
asg95
I11
sa(dp1794
g16
(lp1795
S'k'
asg18
S'Y'
sS'.thisRepN'
p1796
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1797
I13
sS'.thisN'
p1798
I223
sS'.thisIndex'
p1799
I0
sg15
(lp1800
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1801
S'space'
p1802
asg95
I0
sa(dp1803
g16
(lp1804
S'd'
asg18
S'N'
sS'.thisRepN'
p1805
I14
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1806
I14
sS'.thisN'
p1807
I224
sS'.thisIndex'
p1808
I12
sg15
(lp1809
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I12
sa(dp1810
g16
(lp1811
S'k'
asg18
S'Y'
sS'.thisRepN'
p1812
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1813
I0
sS'.thisN'
p1814
I225
sS'.thisIndex'
p1815
I5
sg15
(lp1816
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1817
S'space'
p1818
asg95
I5
sa(dp1819
g16
(lp1820
S'd'
asg18
S'N'
sS'.thisRepN'
p1821
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1822
I1
sS'.thisN'
p1823
I226
sS'.thisIndex'
p1824
I13
sg15
(lp1825
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I13
sa(dp1826
g16
(lp1827
S'd'
asg18
S'Y'
sS'.thisRepN'
p1828
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1829
I2
sS'.thisN'
p1830
I227
sS'.thisIndex'
p1831
I12
sg15
(lp1832
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1833
S'space'
p1834
asg95
I12
sa(dp1835
g16
(lp1836
S'k'
asg18
S'Y'
sS'.thisRepN'
p1837
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1838
I3
sS'.thisN'
p1839
I228
sS'.thisIndex'
p1840
I9
sg15
(lp1841
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1842
S'space'
p1843
asg95
I9
sa(dp1844
g16
(lp1845
S'k'
asg18
S'Y'
sS'.thisRepN'
p1846
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1847
I4
sS'.thisN'
p1848
I229
sS'.thisIndex'
p1849
I7
sg15
(lp1850
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I7
sa(dp1851
g16
(lp1852
S'd'
asg18
S'N'
sS'.thisRepN'
p1853
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1854
I5
sS'.thisN'
p1855
I230
sS'.thisIndex'
p1856
I12
sg15
(lp1857
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1858
S'space'
p1859
asg95
I12
sa(dp1860
g16
(lp1861
S'k'
asg18
S'N'
sS'.thisRepN'
p1862
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1863
I6
sS'.thisN'
p1864
I231
sS'.thisIndex'
p1865
I13
sg15
(lp1866
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1867
S'space'
p1868
asg95
I13
sa(dp1869
g16
(lp1870
S'd'
asg18
S'N'
sS'.thisRepN'
p1871
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1872
I7
sS'.thisN'
p1873
I232
sS'.thisIndex'
p1874
I4
sg15
(lp1875
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1876
S'space'
p1877
asg95
I4
sa(dp1878
g16
(lp1879
S'k'
asg18
S'Y'
sS'.thisRepN'
p1880
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1881
I8
sS'.thisN'
p1882
I233
sS'.thisIndex'
p1883
I0
sg15
(lp1884
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I0
sa(dp1885
g16
(lp1886
S'd'
asg18
S'Y'
sS'.thisRepN'
p1887
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1888
I9
sS'.thisN'
p1889
I234
sS'.thisIndex'
p1890
I9
sg15
(lp1891
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1892
S'space'
p1893
asg95
I9
sa(dp1894
g16
(lp1895
S'k'
asg18
S'Y'
sS'.thisRepN'
p1896
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1897
I10
sS'.thisN'
p1898
I235
sS'.thisIndex'
p1899
I10
sg15
(lp1900
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1901
S'space'
p1902
asg95
I10
sa(dp1903
g16
(lp1904
S'k'
asg18
S'Y'
sS'.thisRepN'
p1905
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1906
I11
sS'.thisN'
p1907
I236
sS'.thisIndex'
p1908
I10
sg15
(lp1909
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1910
S'space'
p1911
asg95
I10
sa(dp1912
g16
(lp1913
S'd'
asg18
S'Y'
sS'.thisRepN'
p1914
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1915
I12
sS'.thisN'
p1916
I237
sS'.thisIndex'
p1917
I10
sg15
(lp1918
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg95
I10
sa(dp1919
g16
(lp1920
S'd'
asg18
S'Y'
sS'.thisRepN'
p1921
I15
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1922
I13
sS'.thisN'
p1923
I238
sS'.thisIndex'
p1924
I14
sg15
(lp1925
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1926
S'space'
p1927
asg95
I14
sa(dp1928
g16
(lp1929
S'k'
asg18
S'Y'
sS'.thisRepN'
p1930
I15
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1931
I14
sS'.thisN'
p1932
I239
sS'.thisIndex'
p1933
I14
sg15
(lp1934
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I14
sa(dp1935
g16
(lp1936
S'k'
asg18
S'Y'
sS'.thisRepN'
p1937
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1938
I0
sS'.thisN'
p1939
I240
sS'.thisIndex'
p1940
I1
sg15
(lp1941
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1942
g16
(lp1943
S'k'
asg18
S'N'
sS'.thisRepN'
p1944
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1945
I1
sS'.thisN'
p1946
I241
sS'.thisIndex'
p1947
I13
sg15
(lp1948
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I13
sa(dp1949
g16
(lp1950
S'd'
asg18
S'Y'
sS'.thisRepN'
p1951
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1952
I2
sS'.thisN'
p1953
I242
sS'.thisIndex'
p1954
I9
sg15
(lp1955
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1956
S'space'
p1957
asg95
I9
sa(dp1958
g16
(lp1959
S'k'
asg18
S'N'
sS'.thisRepN'
p1960
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1961
I3
sS'.thisN'
p1962
I243
sS'.thisIndex'
p1963
I11
sg15
(lp1964
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I11
sa(dp1965
g18
S'N'
sS'.thisRepN'
p1966
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1967
I4
sS'.thisN'
p1968
I244
sS'.thisIndex'
p1969
I11
sg15
Nsg30
VF
sg17
g185
sg14
I5
sg19
Nsg95
I11
sa(dp1970
g16
(lp1971
S'k'
asg18
S'Y'
sS'.thisRepN'
p1972
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p1973
I5
sS'.thisN'
p1974
I245
sS'.thisIndex'
p1975
I4
sg15
(lp1976
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp1977
g16
(lp1978
S'k'
asg18
S'N'
sS'.thisRepN'
p1979
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1980
I6
sS'.thisN'
p1981
I246
sS'.thisIndex'
p1982
I1
sg15
(lp1983
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I1
sa(dp1984
g16
(lp1985
S'k'
asg18
S'Y'
sS'.thisRepN'
p1986
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1987
I7
sS'.thisN'
p1988
I247
sS'.thisIndex'
p1989
I11
sg15
(lp1990
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp1991
S'space'
p1992
asg95
I11
sa(dp1993
g16
(lp1994
S'k'
asg18
S'N'
sS'.thisRepN'
p1995
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p1996
I8
sS'.thisN'
p1997
I248
sS'.thisIndex'
p1998
I5
sg15
(lp1999
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I5
sa(dp2000
g16
(lp2001
S'k'
asg18
S'N'
sg22
I32
sS'.thisN'
p2002
I249
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2003
I9
sS'.thisRepN'
p2004
I16
sg21
I41
sS'.thisIndex'
p2005
I4
sg23
I25
sg15
(lp2006
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg95
I4
sa(dp2007
g16
(lp2008
S'k'
asg95
I3
sS'.thisRepN'
p2009
I16
sg30
VF
sg31
g32
sS'.thisTrialN'
p2010
I10
sS'.thisN'
p2011
I250
sS'.thisIndex'
p2012
I3
sg15
(lp2013
S'k'
asg17
S'Y'
sg14
I6
sa(dp2014
g16
(lp2015
S'd'
asg95
I8
sS'.thisRepN'
p2016
I16
sg30
VF
sg31
g32
sS'.thisTrialN'
p2017
I11
sS'.thisN'
p2018
I251
sS'.thisIndex'
p2019
I8
sg15
(lp2020
S'd'
asg17
S'Y'
sg14
I6
sa(dp2021
g16
(lp2022
S'd'
asg18
S'Y'
sS'.thisRepN'
p2023
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2024
I12
sS'.thisN'
p2025
I252
sS'.thisIndex'
p2026
I7
sg15
(lp2027
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2028
g16
(lp2029
S'k'
asg18
S'Y'
sS'.thisRepN'
p2030
I16
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2031
I13
sS'.thisN'
p2032
I253
sS'.thisIndex'
p2033
I5
sg15
(lp2034
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I5
sa(dp2035
g16
(lp2036
S'k'
asg18
S'Y'
sS'.thisRepN'
p2037
I16
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2038
I14
sS'.thisN'
p2039
I254
sS'.thisIndex'
p2040
I12
sg15
(lp2041
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2042
S'space'
p2043
asg95
I12
sa(dp2044
g16
(lp2045
S'k'
asg18
S'Y'
sS'.thisRepN'
p2046
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2047
I0
sS'.thisN'
p2048
I255
sS'.thisIndex'
p2049
I8
sg15
(lp2050
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2051
S'space'
p2052
asg95
I8
sa(dp2053
g16
(lp2054
S'k'
asg18
S'N'
sS'.thisRepN'
p2055
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2056
I1
sS'.thisN'
p2057
I256
sS'.thisIndex'
p2058
I14
sg15
(lp2059
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I14
sa(dp2060
g16
(lp2061
S'k'
asg18
S'N'
sS'.thisRepN'
p2062
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2063
I2
sS'.thisN'
p2064
I257
sS'.thisIndex'
p2065
I6
sg15
(lp2066
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I6
sa(dp2067
g16
(lp2068
S'd'
asg18
S'Y'
sS'.thisRepN'
p2069
I17
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2070
I3
sS'.thisN'
p2071
I258
sS'.thisIndex'
p2072
I13
sg15
(lp2073
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I13
sa(dp2074
g16
(lp2075
S'd'
asg18
S'Y'
sS'.thisRepN'
p2076
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2077
I4
sS'.thisN'
p2078
I259
sS'.thisIndex'
p2079
I14
sg15
(lp2080
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2081
S'space'
p2082
asg95
I14
sa(dp2083
g16
(lp2084
S'd'
asg18
S'N'
sS'.thisRepN'
p2085
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2086
I5
sS'.thisN'
p2087
I260
sS'.thisIndex'
p2088
I11
sg15
(lp2089
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I11
sa(dp2090
g16
(lp2091
S'd'
asg18
S'Y'
sS'.thisRepN'
p2092
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2093
I6
sS'.thisN'
p2094
I261
sS'.thisIndex'
p2095
I2
sg15
(lp2096
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2097
S'space'
p2098
asg95
I2
sa(dp2099
g16
(lp2100
S'd'
asg18
S'Y'
sS'.thisRepN'
p2101
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2102
I7
sS'.thisN'
p2103
I262
sS'.thisIndex'
p2104
I10
sg15
(lp2105
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2106
S'space'
p2107
asg95
I10
sa(dp2108
g16
(lp2109
S'd'
asg18
S'Y'
sS'.thisRepN'
p2110
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2111
I8
sS'.thisN'
p2112
I263
sS'.thisIndex'
p2113
I11
sg15
(lp2114
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2115
S'space'
p2116
asg95
I11
sa(dp2117
g16
(lp2118
S'd'
asg18
S'Y'
sS'.thisRepN'
p2119
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2120
I9
sS'.thisN'
p2121
I264
sS'.thisIndex'
p2122
I3
sg15
(lp2123
S'k'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2124
S'space'
p2125
asg95
I3
sa(dp2126
g16
(lp2127
S'k'
asg18
S'Y'
sS'.thisRepN'
p2128
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2129
I10
sS'.thisN'
p2130
I265
sS'.thisIndex'
p2131
I9
sg15
(lp2132
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2133
S'space'
p2134
asg95
I9
sa(dp2135
g16
(lp2136
S'k'
asg18
S'Y'
sS'.thisRepN'
p2137
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2138
I11
sS'.thisN'
p2139
I266
sS'.thisIndex'
p2140
I2
sg15
(lp2141
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2142
S'space'
p2143
asg95
I2
sa(dp2144
g16
(lp2145
S'k'
asg18
S'Y'
sS'.thisRepN'
p2146
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2147
I12
sS'.thisN'
p2148
I267
sS'.thisIndex'
p2149
I11
sg15
(lp2150
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2151
S'space'
p2152
asg95
I11
sa(dp2153
g16
(lp2154
S'd'
asg18
S'N'
sS'.thisRepN'
p2155
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2156
I13
sS'.thisN'
p2157
I268
sS'.thisIndex'
p2158
I13
sg15
(lp2159
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I13
sa(dp2160
g16
(lp2161
S'k'
asg18
S'N'
sS'.thisRepN'
p2162
I17
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2163
I14
sS'.thisN'
p2164
I269
sS'.thisIndex'
p2165
I12
sg15
(lp2166
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I12
sa(dp2167
g16
(lp2168
S'd'
asg18
S'Y'
sS'.thisRepN'
p2169
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2170
I0
sS'.thisN'
p2171
I270
sS'.thisIndex'
p2172
I8
sg15
(lp2173
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2174
S'space'
p2175
asg95
I8
sa(dp2176
g16
(lp2177
S'k'
asg18
S'Y'
sS'.thisRepN'
p2178
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2179
I1
sS'.thisN'
p2180
I271
sS'.thisIndex'
p2181
I7
sg15
(lp2182
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2183
g16
(lp2184
S'd'
asg18
S'N'
sS'.thisRepN'
p2185
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2186
I2
sS'.thisN'
p2187
I272
sS'.thisIndex'
p2188
I2
sg15
(lp2189
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I2
sa(dp2190
g16
(lp2191
S'd'
asg18
S'N'
sS'.thisRepN'
p2192
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2193
I3
sS'.thisN'
p2194
I273
sS'.thisIndex'
p2195
I3
sg15
(lp2196
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2197
g16
(lp2198
S'd'
asg18
S'N'
sS'.thisRepN'
p2199
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2200
I4
sS'.thisN'
p2201
I274
sS'.thisIndex'
p2202
I0
sg15
(lp2203
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I0
sa(dp2204
g16
(lp2205
S'k'
asg18
S'Y'
sS'.thisRepN'
p2206
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2207
I5
sS'.thisN'
p2208
I275
sS'.thisIndex'
p2209
I9
sg15
(lp2210
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2211
S'space'
p2212
asg95
I9
sa(dp2213
g16
(lp2214
S'd'
asg18
S'Y'
sS'.thisRepN'
p2215
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2216
I6
sS'.thisN'
p2217
I276
sS'.thisIndex'
p2218
I13
sg15
(lp2219
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2220
S'space'
p2221
asg95
I13
sa(dp2222
g16
(lp2223
S'k'
asg18
S'Y'
sS'.thisRepN'
p2224
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2225
I7
sS'.thisN'
p2226
I277
sS'.thisIndex'
p2227
I5
sg15
(lp2228
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I5
sa(dp2229
g16
(lp2230
S'k'
asg18
S'N'
sS'.thisRepN'
p2231
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2232
I8
sS'.thisN'
p2233
I278
sS'.thisIndex'
p2234
I4
sg15
(lp2235
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I4
sa(dp2236
g16
(lp2237
S'd'
asg18
S'N'
sS'.thisRepN'
p2238
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2239
I9
sS'.thisN'
p2240
I279
sS'.thisIndex'
p2241
I10
sg15
(lp2242
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2243
g16
(lp2244
S'k'
asg18
S'N'
sS'.thisRepN'
p2245
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2246
I10
sS'.thisN'
p2247
I280
sS'.thisIndex'
p2248
I1
sg15
(lp2249
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I1
sa(dp2250
g16
(lp2251
S'd'
asg18
S'Y'
sS'.thisRepN'
p2252
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2253
I11
sS'.thisN'
p2254
I281
sS'.thisIndex'
p2255
I3
sg15
(lp2256
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2257
S'space'
p2258
asg95
I3
sa(dp2259
g16
(lp2260
S'k'
asg18
S'N'
sS'.thisRepN'
p2261
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2262
I12
sS'.thisN'
p2263
I282
sS'.thisIndex'
p2264
I7
sg15
(lp2265
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2266
g16
(lp2267
S'd'
asg18
S'Y'
sS'.thisRepN'
p2268
I18
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2269
I13
sS'.thisN'
p2270
I283
sS'.thisIndex'
p2271
I11
sg15
(lp2272
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2273
S'space'
p2274
asg95
I11
sa(dp2275
g16
(lp2276
S'd'
asg18
S'Y'
sS'.thisRepN'
p2277
I18
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2278
I14
sS'.thisN'
p2279
I284
sS'.thisIndex'
p2280
I10
sg15
(lp2281
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I10
sa(dp2282
g16
(lp2283
S'k'
asg18
S'Y'
sS'.thisRepN'
p2284
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2285
I0
sS'.thisN'
p2286
I285
sS'.thisIndex'
p2287
I8
sg15
(lp2288
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2289
S'space'
p2290
asg95
I8
sa(dp2291
g16
(lp2292
S'd'
asg18
S'Y'
sS'.thisRepN'
p2293
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2294
I1
sS'.thisN'
p2295
I286
sS'.thisIndex'
p2296
I5
sg15
(lp2297
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2298
S'space'
p2299
asg95
I5
sa(dp2300
g18
S'N'
sS'.thisRepN'
p2301
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2302
I2
sS'.thisN'
p2303
I287
sS'.thisIndex'
p2304
I12
sg15
Nsg30
VF
sg17
g185
sg14
I6
sg19
Nsg95
I12
sa(dp2305
g16
(lp2306
S'k'
asg18
S'Y'
sS'.thisRepN'
p2307
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2308
I3
sS'.thisN'
p2309
I288
sS'.thisIndex'
p2310
I13
sg15
(lp2311
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I13
sa(dp2312
g16
(lp2313
S'd'
asg18
S'N'
sS'.thisRepN'
p2314
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2315
I4
sS'.thisN'
p2316
I289
sS'.thisIndex'
p2317
I11
sg15
(lp2318
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I11
sa(dp2319
g16
(lp2320
S'd'
asg18
S'N'
sS'.thisRepN'
p2321
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2322
I5
sS'.thisN'
p2323
I290
sS'.thisIndex'
p2324
I2
sg15
(lp2325
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I2
sa(dp2326
g16
(lp2327
S'k'
asg18
S'Y'
sS'.thisRepN'
p2328
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2329
I6
sS'.thisN'
p2330
I291
sS'.thisIndex'
p2331
I8
sg15
(lp2332
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2333
S'space'
p2334
asg95
I8
sa(dp2335
g16
(lp2336
S'd'
asg18
S'N'
sS'.thisRepN'
p2337
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2338
I7
sS'.thisN'
p2339
I292
sS'.thisIndex'
p2340
I13
sg15
(lp2341
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I13
sa(dp2342
g16
(lp2343
S'd'
asg18
S'N'
sS'.thisRepN'
p2344
I19
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2345
I8
sS'.thisN'
p2346
I293
sS'.thisIndex'
p2347
I2
sg15
(lp2348
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2349
S'space'
p2350
asg95
I2
sa(dp2351
g16
(lp2352
S'd'
asg18
S'N'
sS'.thisRepN'
p2353
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2354
I9
sS'.thisN'
p2355
I294
sS'.thisIndex'
p2356
I7
sg15
(lp2357
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2358
g16
(lp2359
S'd'
asg18
S'N'
sS'.thisRepN'
p2360
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2361
I10
sS'.thisN'
p2362
I295
sS'.thisIndex'
p2363
I7
sg15
(lp2364
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I7
sa(dp2365
g18
S'N'
sS'.thisRepN'
p2366
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2367
I11
sS'.thisN'
p2368
I296
sS'.thisIndex'
p2369
I10
sg15
Nsg30
VF
sg17
g185
sg14
I6
sg19
Nsg95
I10
sa(dp2370
g16
(lp2371
S'k'
asg18
S'N'
sS'.thisRepN'
p2372
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2373
I12
sS'.thisN'
p2374
I297
sS'.thisIndex'
p2375
I3
sg15
(lp2376
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2377
g16
(lp2378
S'k'
asg18
S'N'
sS'.thisRepN'
p2379
I19
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2380
I13
sS'.thisN'
p2381
I298
sS'.thisIndex'
p2382
I11
sg15
(lp2383
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I11
sa(dp2384
g16
(lp2385
S'd'
asg18
S'N'
sg22
I40
sS'.thisN'
p2386
I299
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2387
I14
sS'.thisRepN'
p2388
I19
sg21
I47
sS'.thisIndex'
p2389
I3
sg23
I25
sg15
(lp2390
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg95
I3
sa(dp2391
g16
(lp2392
S'd'
asg95
I11
sS'.thisRepN'
p2393
I20
sg30
VF
sg31
g32
sS'.thisTrialN'
p2394
I0
sS'.thisN'
p2395
I300
sS'.thisIndex'
p2396
I11
sg15
(lp2397
S'd'
asg17
S'Y'
sg14
I7
sa(dp2398
g16
(lp2399
S'k'
asg95
I14
sS'.thisRepN'
p2400
I20
sg30
VF
sg31
g32
sS'.thisTrialN'
p2401
I1
sS'.thisN'
p2402
I301
sS'.thisIndex'
p2403
I14
sg15
(lp2404
S'k'
asg17
S'Y'
sg14
I7
sa(dp2405
g16
(lp2406
S'd'
asg18
S'Y'
sS'.thisRepN'
p2407
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2408
I2
sS'.thisN'
p2409
I302
sS'.thisIndex'
p2410
I1
sg15
(lp2411
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
(lp2412
S'space'
p2413
asg95
I1
sa(dp2414
g16
(lp2415
S'd'
asg18
S'N'
sS'.thisRepN'
p2416
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2417
I3
sS'.thisN'
p2418
I303
sS'.thisIndex'
p2419
I12
sg15
(lp2420
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I12
sa(dp2421
g16
(lp2422
S'k'
asg18
S'Y'
sS'.thisRepN'
p2423
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2424
I4
sS'.thisN'
p2425
I304
sS'.thisIndex'
p2426
I8
sg15
(lp2427
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2428
S'space'
p2429
asg95
I8
sa(dp2430
g16
(lp2431
S'k'
asg18
S'N'
sS'.thisRepN'
p2432
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2433
I5
sS'.thisN'
p2434
I305
sS'.thisIndex'
p2435
I13
sg15
(lp2436
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2437
S'space'
p2438
asg95
I13
sa(dp2439
g16
(lp2440
S'd'
asg18
S'Y'
sS'.thisRepN'
p2441
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2442
I6
sS'.thisN'
p2443
I306
sS'.thisIndex'
p2444
I9
sg15
(lp2445
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2446
S'space'
p2447
asg95
I9
sa(dp2448
g16
(lp2449
S'k'
asg18
S'Y'
sS'.thisRepN'
p2450
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2451
I7
sS'.thisN'
p2452
I307
sS'.thisIndex'
p2453
I5
sg15
(lp2454
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2455
g16
(lp2456
S'd'
asg18
S'Y'
sS'.thisRepN'
p2457
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2458
I8
sS'.thisN'
p2459
I308
sS'.thisIndex'
p2460
I2
sg15
(lp2461
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2462
S'space'
p2463
asg95
I2
sa(dp2464
g16
(lp2465
S'k'
asg18
S'Y'
sS'.thisRepN'
p2466
I20
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2467
I9
sS'.thisN'
p2468
I309
sS'.thisIndex'
p2469
I7
sg15
(lp2470
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2471
g16
(lp2472
S'd'
asg18
S'N'
sS'.thisRepN'
p2473
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2474
I10
sS'.thisN'
p2475
I310
sS'.thisIndex'
p2476
I9
sg15
(lp2477
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I9
sa(dp2478
g16
(lp2479
S'k'
asg18
S'N'
sS'.thisRepN'
p2480
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2481
I11
sS'.thisN'
p2482
I311
sS'.thisIndex'
p2483
I7
sg15
(lp2484
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2485
g16
(lp2486
S'd'
asg18
S'Y'
sS'.thisRepN'
p2487
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2488
I12
sS'.thisN'
p2489
I312
sS'.thisIndex'
p2490
I7
sg15
(lp2491
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2492
S'space'
p2493
asg95
I7
sa(dp2494
g16
(lp2495
S'k'
asg18
S'N'
sS'.thisRepN'
p2496
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2497
I13
sS'.thisN'
p2498
I313
sS'.thisIndex'
p2499
I8
sg15
(lp2500
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2501
g16
(lp2502
S'k'
asg18
S'N'
sS'.thisRepN'
p2503
I20
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2504
I14
sS'.thisN'
p2505
I314
sS'.thisIndex'
p2506
I6
sg15
(lp2507
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2508
g16
(lp2509
S'k'
asg18
S'N'
sS'.thisRepN'
p2510
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2511
I0
sS'.thisN'
p2512
I315
sS'.thisIndex'
p2513
I10
sg15
(lp2514
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I10
sa(dp2515
g16
(lp2516
S'd'
asg18
S'N'
sS'.thisRepN'
p2517
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2518
I1
sS'.thisN'
p2519
I316
sS'.thisIndex'
p2520
I5
sg15
(lp2521
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2522
g16
(lp2523
S'd'
asg18
S'N'
sS'.thisRepN'
p2524
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2525
I2
sS'.thisN'
p2526
I317
sS'.thisIndex'
p2527
I14
sg15
(lp2528
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I14
sa(dp2529
g16
(lp2530
S'k'
asg18
S'Y'
sS'.thisRepN'
p2531
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2532
I3
sS'.thisN'
p2533
I318
sS'.thisIndex'
p2534
I8
sg15
(lp2535
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2536
g16
(lp2537
S'd'
asg18
S'Y'
sS'.thisRepN'
p2538
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2539
I4
sS'.thisN'
p2540
I319
sS'.thisIndex'
p2541
I13
sg15
(lp2542
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2543
S'space'
p2544
asg95
I13
sa(dp2545
g16
(lp2546
S'd'
asg18
S'Y'
sS'.thisRepN'
p2547
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2548
I5
sS'.thisN'
p2549
I320
sS'.thisIndex'
p2550
I14
sg15
(lp2551
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2552
S'space'
p2553
asg95
I14
sa(dp2554
g16
(lp2555
S'd'
asg18
S'Y'
sS'.thisRepN'
p2556
I21
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2557
I6
sS'.thisN'
p2558
I321
sS'.thisIndex'
p2559
I14
sg15
(lp2560
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I14
sa(dp2561
g16
(lp2562
S'k'
asg18
S'N'
sS'.thisRepN'
p2563
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2564
I7
sS'.thisN'
p2565
I322
sS'.thisIndex'
p2566
I6
sg15
(lp2567
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I6
sa(dp2568
g18
S'N'
sS'.thisRepN'
p2569
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2570
I8
sS'.thisN'
p2571
I323
sS'.thisIndex'
p2572
I2
sg15
Nsg30
VF
sg17
g185
sg14
I7
sg19
Nsg95
I2
sa(dp2573
g16
(lp2574
S'k'
asg18
S'Y'
sS'.thisRepN'
p2575
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2576
I9
sS'.thisN'
p2577
I324
sS'.thisIndex'
p2578
I3
sg15
(lp2579
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2580
S'space'
p2581
asg95
I3
sa(dp2582
g16
(lp2583
S'd'
asg18
S'N'
sS'.thisRepN'
p2584
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2585
I10
sS'.thisN'
p2586
I325
sS'.thisIndex'
p2587
I5
sg15
(lp2588
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2589
g16
(lp2590
S'k'
asg18
S'N'
sS'.thisRepN'
p2591
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2592
I11
sS'.thisN'
p2593
I326
sS'.thisIndex'
p2594
I7
sg15
(lp2595
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2596
g16
(lp2597
S'd'
asg18
S'N'
sS'.thisRepN'
p2598
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2599
I12
sS'.thisN'
p2600
I327
sS'.thisIndex'
p2601
I7
sg15
(lp2602
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2603
g16
(lp2604
S'd'
asg18
S'N'
sS'.thisRepN'
p2605
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2606
I13
sS'.thisN'
p2607
I328
sS'.thisIndex'
p2608
I0
sg15
(lp2609
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I0
sa(dp2610
g18
S'N'
sS'.thisRepN'
p2611
I21
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2612
I14
sS'.thisN'
p2613
I329
sS'.thisIndex'
p2614
I10
sg15
Nsg30
VF
sg17
g185
sg14
I7
sg19
Nsg95
I10
sa(dp2615
g16
(lp2616
S'k'
asg18
S'N'
sS'.thisRepN'
p2617
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2618
I0
sS'.thisN'
p2619
I330
sS'.thisIndex'
p2620
I7
sg15
(lp2621
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I7
sa(dp2622
g16
(lp2623
S'k'
asg18
S'N'
sS'.thisRepN'
p2624
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2625
I1
sS'.thisN'
p2626
I331
sS'.thisIndex'
p2627
I0
sg15
(lp2628
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2629
S'space'
p2630
asg95
I0
sa(dp2631
g16
(lp2632
S'd'
asg18
S'Y'
sS'.thisRepN'
p2633
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2634
I2
sS'.thisN'
p2635
I332
sS'.thisIndex'
p2636
I5
sg15
(lp2637
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2638
g18
S'Y'
sS'.thisRepN'
p2639
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2640
I3
sS'.thisN'
p2641
I333
sS'.thisIndex'
p2642
I5
sg15
Nsg30
VF
sg17
g185
sg14
I7
sg19
Nsg95
I5
sa(dp2643
g16
(lp2644
S'k'
asg18
S'N'
sS'.thisRepN'
p2645
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2646
I4
sS'.thisN'
p2647
I334
sS'.thisIndex'
p2648
I5
sg15
(lp2649
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2650
g18
S'N'
sS'.thisRepN'
p2651
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2652
I5
sS'.thisN'
p2653
I335
sS'.thisIndex'
p2654
I3
sg15
Nsg30
VF
sg17
g185
sg14
I7
sg19
Nsg95
I3
sa(dp2655
g16
(lp2656
S'd'
asg18
S'Y'
sS'.thisRepN'
p2657
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2658
I6
sS'.thisN'
p2659
I336
sS'.thisIndex'
p2660
I8
sg15
(lp2661
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2662
g16
(lp2663
S'd'
asg18
S'N'
sS'.thisRepN'
p2664
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2665
I7
sS'.thisN'
p2666
I337
sS'.thisIndex'
p2667
I3
sg15
(lp2668
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I3
sa(dp2669
g16
(lp2670
S'd'
asg18
S'Y'
sS'.thisRepN'
p2671
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2672
I8
sS'.thisN'
p2673
I338
sS'.thisIndex'
p2674
I12
sg15
(lp2675
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2676
S'space'
p2677
asg95
I12
sa(dp2678
g16
(lp2679
S'd'
asg18
S'N'
sS'.thisRepN'
p2680
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2681
I9
sS'.thisN'
p2682
I339
sS'.thisIndex'
p2683
I12
sg15
(lp2684
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2685
S'space'
p2686
asg95
I12
sa(dp2687
g16
(lp2688
S'k'
asg18
S'N'
sS'.thisRepN'
p2689
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2690
I10
sS'.thisN'
p2691
I340
sS'.thisIndex'
p2692
I9
sg15
(lp2693
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I9
sa(dp2694
g16
(lp2695
S'd'
asg18
S'N'
sS'.thisRepN'
p2696
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2697
I11
sS'.thisN'
p2698
I341
sS'.thisIndex'
p2699
I2
sg15
(lp2700
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I2
sa(dp2701
g16
(lp2702
S'd'
asg18
S'Y'
sS'.thisRepN'
p2703
I22
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2704
I12
sS'.thisN'
p2705
I342
sS'.thisIndex'
p2706
I14
sg15
(lp2707
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I14
sa(dp2708
g16
(lp2709
S'd'
asg18
S'N'
sS'.thisRepN'
p2710
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2711
I13
sS'.thisN'
p2712
I343
sS'.thisIndex'
p2713
I5
sg15
(lp2714
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2715
g16
(lp2716
S'k'
asg18
S'Y'
sS'.thisRepN'
p2717
I22
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2718
I14
sS'.thisN'
p2719
I344
sS'.thisIndex'
p2720
I10
sg15
(lp2721
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2722
S'space'
p2723
asg95
I10
sa(dp2724
g16
(lp2725
S'k'
asg18
S'N'
sS'.thisRepN'
p2726
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2727
I0
sS'.thisN'
p2728
I345
sS'.thisIndex'
p2729
I8
sg15
(lp2730
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I8
sa(dp2731
g16
(lp2732
S'k'
asg18
S'Y'
sS'.thisRepN'
p2733
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2734
I1
sS'.thisN'
p2735
I346
sS'.thisIndex'
p2736
I4
sg15
(lp2737
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2738
S'space'
p2739
asg95
I4
sa(dp2740
g18
S'Y'
sS'.thisRepN'
p2741
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2742
I2
sS'.thisN'
p2743
I347
sS'.thisIndex'
p2744
I10
sg15
Nsg30
VF
sg17
g185
sg14
I7
sg19
(lp2745
S'space'
p2746
asg95
I10
sa(dp2747
g16
(lp2748
S'k'
asg18
S'N'
sS'.thisRepN'
p2749
I23
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2750
I3
sS'.thisN'
p2751
I348
sS'.thisIndex'
p2752
I10
sg15
(lp2753
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2754
S'space'
p2755
asg95
I10
sa(dp2756
g16
(lp2757
S'd'
asg18
S'Y'
sg22
I35
sS'.thisN'
p2758
I349
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2759
I4
sS'.thisRepN'
p2760
I23
sg21
I44
sS'.thisIndex'
p2761
I5
sg23
I21
sg15
(lp2762
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg95
I5
sa(dp2763
g16
(lp2764
S'd'
asg95
I1
sS'.thisRepN'
p2765
I23
sg30
VF
sg31
g32
sS'.thisTrialN'
p2766
I5
sS'.thisN'
p2767
I350
sS'.thisIndex'
p2768
I1
sg15
(lp2769
S'd'
asg17
S'Y'
sg14
I8
sa(dp2770
g16
(lp2771
S'k'
asg95
I9
sS'.thisRepN'
p2772
I23
sg30
VF
sg31
g32
sS'.thisTrialN'
p2773
I6
sS'.thisN'
p2774
I351
sS'.thisIndex'
p2775
I9
sg15
(lp2776
S'k'
asg17
S'Y'
sg14
I8
sa(dp2777
g16
(lp2778
S'k'
asg18
S'N'
sS'.thisRepN'
p2779
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2780
I7
sS'.thisN'
p2781
I352
sS'.thisIndex'
p2782
I7
sg15
(lp2783
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp2784
g16
(lp2785
S'd'
asg18
S'N'
sS'.thisRepN'
p2786
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2787
I8
sS'.thisN'
p2788
I353
sS'.thisIndex'
p2789
I5
sg15
(lp2790
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp2791
g16
(lp2792
S'k'
asg18
S'N'
sS'.thisRepN'
p2793
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2794
I9
sS'.thisN'
p2795
I354
sS'.thisIndex'
p2796
I12
sg15
(lp2797
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I12
sa(dp2798
g16
(lp2799
S'k'
asg18
S'N'
sS'.thisRepN'
p2800
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2801
I10
sS'.thisN'
p2802
I355
sS'.thisIndex'
p2803
I5
sg15
(lp2804
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp2805
g16
(lp2806
S'k'
asg18
S'N'
sS'.thisRepN'
p2807
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2808
I11
sS'.thisN'
p2809
I356
sS'.thisIndex'
p2810
I10
sg15
(lp2811
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I10
sa(dp2812
g16
(lp2813
S'k'
asg18
S'Y'
sS'.thisRepN'
p2814
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2815
I12
sS'.thisN'
p2816
I357
sS'.thisIndex'
p2817
I5
sg15
(lp2818
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2819
S'space'
p2820
asg95
I5
sa(dp2821
g16
(lp2822
S'd'
asg18
S'N'
sS'.thisRepN'
p2823
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2824
I13
sS'.thisN'
p2825
I358
sS'.thisIndex'
p2826
I2
sg15
(lp2827
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp2828
g16
(lp2829
S'd'
asg18
S'Y'
sS'.thisRepN'
p2830
I23
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2831
I14
sS'.thisN'
p2832
I359
sS'.thisIndex'
p2833
I6
sg15
(lp2834
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2835
S'space'
p2836
asg95
I6
sa(dp2837
g16
(lp2838
S'd'
asg18
S'Y'
sS'.thisRepN'
p2839
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2840
I0
sS'.thisN'
p2841
I360
sS'.thisIndex'
p2842
I0
sg15
(lp2843
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp2844
g16
(lp2845
S'k'
asg18
S'N'
sS'.thisRepN'
p2846
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2847
I1
sS'.thisN'
p2848
I361
sS'.thisIndex'
p2849
I11
sg15
(lp2850
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I11
sa(dp2851
g16
(lp2852
S'd'
asg18
S'Y'
sS'.thisRepN'
p2853
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2854
I2
sS'.thisN'
p2855
I362
sS'.thisIndex'
p2856
I13
sg15
(lp2857
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2858
S'space'
p2859
asg95
I13
sa(dp2860
g16
(lp2861
S'k'
asg18
S'Y'
sS'.thisRepN'
p2862
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2863
I3
sS'.thisN'
p2864
I363
sS'.thisIndex'
p2865
I4
sg15
(lp2866
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2867
S'space'
p2868
asg95
I4
sa(dp2869
g16
(lp2870
S'k'
asg18
S'Y'
sS'.thisRepN'
p2871
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2872
I4
sS'.thisN'
p2873
I364
sS'.thisIndex'
p2874
I13
sg15
(lp2875
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2876
S'space'
p2877
asg95
I13
sa(dp2878
g16
(lp2879
S'k'
asg18
S'Y'
sS'.thisRepN'
p2880
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2881
I5
sS'.thisN'
p2882
I365
sS'.thisIndex'
p2883
I5
sg15
(lp2884
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2885
S'space'
p2886
asg95
I5
sa(dp2887
g16
(lp2888
S'k'
asg18
S'N'
sS'.thisRepN'
p2889
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2890
I6
sS'.thisN'
p2891
I366
sS'.thisIndex'
p2892
I5
sg15
(lp2893
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I5
sa(dp2894
g16
(lp2895
S'd'
asg18
S'N'
sS'.thisRepN'
p2896
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2897
I7
sS'.thisN'
p2898
I367
sS'.thisIndex'
p2899
I9
sg15
(lp2900
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp2901
g16
(lp2902
S'd'
asg18
S'Y'
sS'.thisRepN'
p2903
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2904
I8
sS'.thisN'
p2905
I368
sS'.thisIndex'
p2906
I10
sg15
(lp2907
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2908
S'space'
p2909
asg95
I10
sa(dp2910
g16
(lp2911
S'k'
asg18
S'N'
sS'.thisRepN'
p2912
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2913
I9
sS'.thisN'
p2914
I369
sS'.thisIndex'
p2915
I6
sg15
(lp2916
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp2917
g16
(lp2918
S'd'
asg18
S'Y'
sS'.thisRepN'
p2919
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2920
I10
sS'.thisN'
p2921
I370
sS'.thisIndex'
p2922
I7
sg15
(lp2923
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I7
sa(dp2924
g16
(lp2925
S'd'
asg18
S'N'
sS'.thisRepN'
p2926
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2927
I11
sS'.thisN'
p2928
I371
sS'.thisIndex'
p2929
I14
sg15
(lp2930
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2931
S'space'
p2932
asg95
I14
sa(dp2933
g16
(lp2934
S'd'
asg18
S'Y'
sS'.thisRepN'
p2935
I24
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2936
I12
sS'.thisN'
p2937
I372
sS'.thisIndex'
p2938
I6
sg15
(lp2939
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I6
sa(dp2940
g16
(lp2941
S'k'
asg18
S'Y'
sS'.thisRepN'
p2942
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2943
I13
sS'.thisN'
p2944
I373
sS'.thisIndex'
p2945
I4
sg15
(lp2946
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2947
S'space'
p2948
asg95
I4
sa(dp2949
g16
(lp2950
S'd'
asg18
S'N'
sS'.thisRepN'
p2951
I24
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2952
I14
sS'.thisN'
p2953
I374
sS'.thisIndex'
p2954
I4
sg15
(lp2955
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I4
sa(dp2956
g16
(lp2957
S'd'
asg18
S'Y'
sS'.thisRepN'
p2958
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2959
I0
sS'.thisN'
p2960
I375
sS'.thisIndex'
p2961
I8
sg15
(lp2962
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2963
S'space'
p2964
asg95
I8
sa(dp2965
g16
(lp2966
S'd'
asg18
S'Y'
sS'.thisRepN'
p2967
I25
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p2968
I1
sS'.thisN'
p2969
I376
sS'.thisIndex'
p2970
I3
sg15
(lp2971
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg95
I3
sa(dp2972
g16
(lp2973
S'k'
asg18
S'Y'
sS'.thisRepN'
p2974
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2975
I2
sS'.thisN'
p2976
I377
sS'.thisIndex'
p2977
I4
sg15
(lp2978
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2979
S'space'
p2980
asg95
I4
sa(dp2981
g16
(lp2982
S'd'
asg18
S'N'
sS'.thisRepN'
p2983
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2984
I3
sS'.thisN'
p2985
I378
sS'.thisIndex'
p2986
I9
sg15
(lp2987
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I9
sa(dp2988
g16
(lp2989
S'k'
asg18
S'Y'
sS'.thisRepN'
p2990
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p2991
I4
sS'.thisN'
p2992
I379
sS'.thisIndex'
p2993
I10
sg15
(lp2994
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2995
S'space'
p2996
asg95
I10
sa(dp2997
g16
(lp2998
S'k'
asg18
S'Y'
sS'.thisRepN'
p2999
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3000
I5
sS'.thisN'
p3001
I380
sS'.thisIndex'
p3002
I4
sg15
(lp3003
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3004
S'space'
p3005
asg95
I4
sa(dp3006
g16
(lp3007
S'k'
asg18
S'Y'
sS'.thisRepN'
p3008
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3009
I6
sS'.thisN'
p3010
I381
sS'.thisIndex'
p3011
I14
sg15
(lp3012
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3013
S'space'
p3014
asg95
I14
sa(dp3015
g16
(lp3016
S'd'
asg18
S'Y'
sS'.thisRepN'
p3017
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3018
I7
sS'.thisN'
p3019
I382
sS'.thisIndex'
p3020
I0
sg15
(lp3021
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3022
S'space'
p3023
asg95
I0
sa(dp3024
g16
(lp3025
S'k'
asg18
S'Y'
sS'.thisRepN'
p3026
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3027
I8
sS'.thisN'
p3028
I383
sS'.thisIndex'
p3029
I14
sg15
(lp3030
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3031
S'space'
p3032
asg95
I14
sa(dp3033
g16
(lp3034
S'd'
asg18
S'Y'
sS'.thisRepN'
p3035
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3036
I9
sS'.thisN'
p3037
I384
sS'.thisIndex'
p3038
I4
sg15
(lp3039
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3040
S'space'
p3041
asg95
I4
sa(dp3042
g16
(lp3043
S'd'
asg18
S'N'
sS'.thisRepN'
p3044
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3045
I10
sS'.thisN'
p3046
I385
sS'.thisIndex'
p3047
I2
sg15
(lp3048
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I2
sa(dp3049
g16
(lp3050
S'd'
asg18
S'N'
sS'.thisRepN'
p3051
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3052
I11
sS'.thisN'
p3053
I386
sS'.thisIndex'
p3054
I14
sg15
(lp3055
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I14
sa(dp3056
g16
(lp3057
S'k'
asg18
S'Y'
sS'.thisRepN'
p3058
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3059
I12
sS'.thisN'
p3060
I387
sS'.thisIndex'
p3061
I8
sg15
(lp3062
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3063
S'space'
p3064
asg95
I8
sa(dp3065
g16
(lp3066
S'd'
asg18
S'Y'
sS'.thisRepN'
p3067
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3068
I13
sS'.thisN'
p3069
I388
sS'.thisIndex'
p3070
I12
sg15
(lp3071
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp3072
S'space'
p3073
asg95
I12
sa(dp3074
g16
(lp3075
S'd'
asg18
S'Y'
sS'.thisRepN'
p3076
I25
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3077
I14
sS'.thisN'
p3078
I389
sS'.thisIndex'
p3079
I8
sg15
(lp3080
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3081
S'space'
p3082
asg95
I8
sa(dp3083
g16
(lp3084
S'k'
asg18
S'N'
sS'.thisRepN'
p3085
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3086
I0
sS'.thisN'
p3087
I390
sS'.thisIndex'
p3088
I11
sg15
(lp3089
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I11
sa(dp3090
g16
(lp3091
S'd'
asg18
S'Y'
sS'.thisRepN'
p3092
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3093
I1
sS'.thisN'
p3094
I391
sS'.thisIndex'
p3095
I11
sg15
(lp3096
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3097
S'space'
p3098
asg95
I11
sa(dp3099
g16
(lp3100
S'k'
asg18
S'N'
sS'.thisRepN'
p3101
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3102
I2
sS'.thisN'
p3103
I392
sS'.thisIndex'
p3104
I3
sg15
(lp3105
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I3
sa(dp3106
g16
(lp3107
S'k'
asg18
S'Y'
sS'.thisRepN'
p3108
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3109
I3
sS'.thisN'
p3110
I393
sS'.thisIndex'
p3111
I3
sg15
(lp3112
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3113
S'space'
p3114
asg95
I3
sa(dp3115
g16
(lp3116
S'd'
asg18
S'N'
sS'.thisRepN'
p3117
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3118
I4
sS'.thisN'
p3119
I394
sS'.thisIndex'
p3120
I8
sg15
(lp3121
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp3122
g16
(lp3123
S'k'
asg18
S'N'
sS'.thisRepN'
p3124
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3125
I5
sS'.thisN'
p3126
I395
sS'.thisIndex'
p3127
I2
sg15
(lp3128
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3129
S'space'
p3130
asg95
I2
sa(dp3131
g16
(lp3132
S'd'
asg18
S'N'
sS'.thisRepN'
p3133
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3134
I6
sS'.thisN'
p3135
I396
sS'.thisIndex'
p3136
I8
sg15
(lp3137
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I8
sa(dp3138
g16
(lp3139
S'k'
asg18
S'N'
sS'.thisRepN'
p3140
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3141
I7
sS'.thisN'
p3142
I397
sS'.thisIndex'
p3143
I12
sg15
(lp3144
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I12
sa(dp3145
g16
(lp3146
S'k'
asg18
S'N'
sS'.thisRepN'
p3147
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3148
I8
sS'.thisN'
p3149
I398
sS'.thisIndex'
p3150
I0
sg15
(lp3151
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg95
I0
sa(dp3152
g16
(lp3153
S'k'
asg18
S'N'
sg22
I41
sS'.thisN'
p3154
I399
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3155
I9
sS'.thisRepN'
p3156
I26
sg21
I48
sS'.thisIndex'
p3157
I2
sg23
I25
sg15
(lp3158
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3159
S'space'
p3160
asg95
I2
sa(dp3161
g16
(lp3162
S'k'
asg95
I1
sS'.thisRepN'
p3163
I26
sg30
VF
sg31
g32
sS'.thisTrialN'
p3164
I10
sS'.thisN'
p3165
I400
sS'.thisIndex'
p3166
I1
sg15
(lp3167
S'k'
asg17
S'Y'
sg14
I9
sa(dp3168
g16
(lp3169
S'd'
asg95
I14
sS'.thisRepN'
p3170
I26
sg30
VF
sg31
g32
sS'.thisTrialN'
p3171
I11
sS'.thisN'
p3172
I401
sS'.thisIndex'
p3173
I14
sg15
(lp3174
S'd'
asg17
S'Y'
sg14
I9
sa(dp3175
g16
(lp3176
S'k'
asg18
S'N'
sS'.thisRepN'
p3177
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3178
I12
sS'.thisN'
p3179
I402
sS'.thisIndex'
p3180
I5
sg15
(lp3181
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
Nsg95
I5
sa(dp3182
g16
(lp3183
S'k'
asg18
S'Y'
sS'.thisRepN'
p3184
I26
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3185
I13
sS'.thisN'
p3186
I403
sS'.thisIndex'
p3187
I0
sg15
(lp3188
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3189
g16
(lp3190
S'k'
asg18
S'N'
sS'.thisRepN'
p3191
I26
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3192
I14
sS'.thisN'
p3193
I404
sS'.thisIndex'
p3194
I11
sg15
(lp3195
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I11
sa(dp3196
g16
(lp3197
S'k'
asg18
S'N'
sS'.thisRepN'
p3198
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3199
I0
sS'.thisN'
p3200
I405
sS'.thisIndex'
p3201
I9
sg15
(lp3202
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3203
g16
(lp3204
S'd'
asg18
S'Y'
sS'.thisRepN'
p3205
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3206
I1
sS'.thisN'
p3207
I406
sS'.thisIndex'
p3208
I14
sg15
(lp3209
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3210
S'space'
p3211
asg95
I14
sa(dp3212
g16
(lp3213
S'k'
asg18
S'Y'
sS'.thisRepN'
p3214
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3215
I2
sS'.thisN'
p3216
I407
sS'.thisIndex'
p3217
I14
sg15
(lp3218
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3219
S'space'
p3220
asg95
I14
sa(dp3221
g18
S'N'
sS'.thisRepN'
p3222
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3223
I3
sS'.thisN'
p3224
I408
sS'.thisIndex'
p3225
I13
sg15
Nsg30
VF
sg17
g185
sg14
I9
sg19
Nsg95
I13
sa(dp3226
g16
(lp3227
S'k'
asg18
S'Y'
sS'.thisRepN'
p3228
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3229
I4
sS'.thisN'
p3230
I409
sS'.thisIndex'
p3231
I0
sg15
(lp3232
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3233
S'space'
p3234
asg95
I0
sa(dp3235
g16
(lp3236
S'd'
asg18
S'Y'
sS'.thisRepN'
p3237
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3238
I5
sS'.thisN'
p3239
I410
sS'.thisIndex'
p3240
I3
sg15
(lp3241
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3242
S'space'
p3243
asg95
I3
sa(dp3244
g16
(lp3245
S'd'
asg18
S'Y'
sS'.thisRepN'
p3246
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3247
I6
sS'.thisN'
p3248
I411
sS'.thisIndex'
p3249
I2
sg15
(lp3250
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3251
S'space'
p3252
asg95
I2
sa(dp3253
g16
(lp3254
S'k'
asg18
S'Y'
sS'.thisRepN'
p3255
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3256
I7
sS'.thisN'
p3257
I412
sS'.thisIndex'
p3258
I6
sg15
(lp3259
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3260
S'space'
p3261
asg95
I6
sa(dp3262
g16
(lp3263
S'd'
asg18
S'Y'
sS'.thisRepN'
p3264
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3265
I8
sS'.thisN'
p3266
I413
sS'.thisIndex'
p3267
I13
sg15
(lp3268
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3269
S'space'
p3270
asg95
I13
sa(dp3271
g16
(lp3272
S'd'
asg18
S'N'
sS'.thisRepN'
p3273
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3274
I9
sS'.thisN'
p3275
I414
sS'.thisIndex'
p3276
I12
sg15
(lp3277
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I12
sa(dp3278
g16
(lp3279
S'k'
asg18
S'N'
sS'.thisRepN'
p3280
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3281
I10
sS'.thisN'
p3282
I415
sS'.thisIndex'
p3283
I2
sg15
(lp3284
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3285
g16
(lp3286
S'k'
asg18
S'N'
sS'.thisRepN'
p3287
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3288
I11
sS'.thisN'
p3289
I416
sS'.thisIndex'
p3290
I12
sg15
(lp3291
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I12
sa(dp3292
g16
(lp3293
S'k'
asg18
S'Y'
sS'.thisRepN'
p3294
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3295
I12
sS'.thisN'
p3296
I417
sS'.thisIndex'
p3297
I11
sg15
(lp3298
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3299
S'space'
p3300
asg95
I11
sa(dp3301
g16
(lp3302
S'k'
asg18
S'N'
sS'.thisRepN'
p3303
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3304
I13
sS'.thisN'
p3305
I418
sS'.thisIndex'
p3306
I2
sg15
(lp3307
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3308
g16
(lp3309
S'd'
asg18
S'N'
sS'.thisRepN'
p3310
I27
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3311
I14
sS'.thisN'
p3312
I419
sS'.thisIndex'
p3313
I13
sg15
(lp3314
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I13
sa(dp3315
g16
(lp3316
S'd'
asg18
S'N'
sS'.thisRepN'
p3317
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3318
I0
sS'.thisN'
p3319
I420
sS'.thisIndex'
p3320
I2
sg15
(lp3321
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3322
g16
(lp3323
S'k'
asg18
S'N'
sS'.thisRepN'
p3324
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3325
I1
sS'.thisN'
p3326
I421
sS'.thisIndex'
p3327
I5
sg15
(lp3328
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3329
g16
(lp3330
S'k'
asg18
S'N'
sS'.thisRepN'
p3331
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3332
I2
sS'.thisN'
p3333
I422
sS'.thisIndex'
p3334
I6
sg15
(lp3335
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3336
g16
(lp3337
S'k'
asg18
S'Y'
sS'.thisRepN'
p3338
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3339
I3
sS'.thisN'
p3340
I423
sS'.thisIndex'
p3341
I12
sg15
(lp3342
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3343
S'space'
p3344
asg95
I12
sa(dp3345
g16
(lp3346
S'k'
asg18
S'N'
sS'.thisRepN'
p3347
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3348
I4
sS'.thisN'
p3349
I424
sS'.thisIndex'
p3350
I12
sg15
(lp3351
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I12
sa(dp3352
g16
(lp3353
S'k'
asg18
S'Y'
sS'.thisRepN'
p3354
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3355
I5
sS'.thisN'
p3356
I425
sS'.thisIndex'
p3357
I5
sg15
(lp3358
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I5
sa(dp3359
g16
(lp3360
S'd'
asg18
S'N'
sS'.thisRepN'
p3361
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3362
I6
sS'.thisN'
p3363
I426
sS'.thisIndex'
p3364
I12
sg15
(lp3365
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I12
sa(dp3366
g16
(lp3367
S'd'
asg18
S'N'
sS'.thisRepN'
p3368
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3369
I7
sS'.thisN'
p3370
I427
sS'.thisIndex'
p3371
I14
sg15
(lp3372
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3373
S'space'
p3374
asg95
I14
sa(dp3375
g16
(lp3376
S'k'
asg18
S'N'
sS'.thisRepN'
p3377
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3378
I8
sS'.thisN'
p3379
I428
sS'.thisIndex'
p3380
I1
sg15
(lp3381
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I1
sa(dp3382
g16
(lp3383
S'd'
asg18
S'Y'
sS'.thisRepN'
p3384
I28
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3385
I9
sS'.thisN'
p3386
I429
sS'.thisIndex'
p3387
I9
sg15
(lp3388
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3389
g16
(lp3390
S'k'
asg18
S'Y'
sS'.thisRepN'
p3391
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3392
I10
sS'.thisN'
p3393
I430
sS'.thisIndex'
p3394
I8
sg15
(lp3395
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3396
S'space'
p3397
asg95
I8
sa(dp3398
g16
(lp3399
S'd'
asg18
S'Y'
sS'.thisRepN'
p3400
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3401
I11
sS'.thisN'
p3402
I431
sS'.thisIndex'
p3403
I1
sg15
(lp3404
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3405
S'space'
p3406
asg95
I1
sa(dp3407
g16
(lp3408
S'd'
asg18
S'Y'
sS'.thisRepN'
p3409
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3410
I12
sS'.thisN'
p3411
I432
sS'.thisIndex'
p3412
I2
sg15
(lp3413
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3414
S'space'
p3415
asg95
I2
sa(dp3416
g16
(lp3417
S'k'
asg18
S'Y'
sS'.thisRepN'
p3418
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3419
I13
sS'.thisN'
p3420
I433
sS'.thisIndex'
p3421
I2
sg15
(lp3422
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3423
S'space'
p3424
asg95
I2
sa(dp3425
g16
(lp3426
S'k'
asg18
S'Y'
sS'.thisRepN'
p3427
I28
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3428
I14
sS'.thisN'
p3429
I434
sS'.thisIndex'
p3430
I12
sg15
(lp3431
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3432
S'space'
p3433
asg95
I12
sa(dp3434
g16
(lp3435
S'd'
asg18
S'N'
sS'.thisRepN'
p3436
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3437
I0
sS'.thisN'
p3438
I435
sS'.thisIndex'
p3439
I2
sg15
(lp3440
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3441
g16
(lp3442
S'd'
asg18
S'N'
sS'.thisRepN'
p3443
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3444
I1
sS'.thisN'
p3445
I436
sS'.thisIndex'
p3446
I6
sg15
(lp3447
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3448
g16
(lp3449
S'd'
asg18
S'Y'
sS'.thisRepN'
p3450
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3451
I2
sS'.thisN'
p3452
I437
sS'.thisIndex'
p3453
I14
sg15
(lp3454
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3455
S'space'
p3456
asg95
I14
sa(dp3457
g16
(lp3458
S'd'
asg18
S'Y'
sS'.thisRepN'
p3459
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3460
I3
sS'.thisN'
p3461
I438
sS'.thisIndex'
p3462
I12
sg15
(lp3463
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I12
sa(dp3464
g16
(lp3465
S'k'
asg18
S'N'
sS'.thisRepN'
p3466
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3467
I4
sS'.thisN'
p3468
I439
sS'.thisIndex'
p3469
I0
sg15
(lp3470
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I0
sa(dp3471
g16
(lp3472
S'd'
asg18
S'Y'
sS'.thisRepN'
p3473
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3474
I5
sS'.thisN'
p3475
I440
sS'.thisIndex'
p3476
I9
sg15
(lp3477
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3478
g16
(lp3479
S'k'
asg18
S'Y'
sS'.thisRepN'
p3480
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3481
I6
sS'.thisN'
p3482
I441
sS'.thisIndex'
p3483
I4
sg15
(lp3484
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3485
S'space'
p3486
asg95
I4
sa(dp3487
g16
(lp3488
S'k'
asg18
S'N'
sS'.thisRepN'
p3489
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3490
I7
sS'.thisN'
p3491
I442
sS'.thisIndex'
p3492
I9
sg15
(lp3493
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I9
sa(dp3494
g16
(lp3495
S'k'
asg18
S'N'
sS'.thisRepN'
p3496
I29
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3497
I8
sS'.thisN'
p3498
I443
sS'.thisIndex'
p3499
I1
sg15
(lp3500
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3501
S'space'
p3502
asg95
I1
sa(dp3503
g16
(lp3504
S'd'
asg18
S'N'
sS'.thisRepN'
p3505
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3506
I9
sS'.thisN'
p3507
I444
sS'.thisIndex'
p3508
I3
sg15
(lp3509
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I3
sa(dp3510
g16
(lp3511
S'd'
asg18
S'N'
sS'.thisRepN'
p3512
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3513
I10
sS'.thisN'
p3514
I445
sS'.thisIndex'
p3515
I7
sg15
(lp3516
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I7
sa(dp3517
g16
(lp3518
S'k'
asg18
S'N'
sS'.thisRepN'
p3519
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3520
I11
sS'.thisN'
p3521
I446
sS'.thisIndex'
p3522
I6
sg15
(lp3523
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I6
sa(dp3524
g16
(lp3525
S'd'
asg18
S'N'
sS'.thisRepN'
p3526
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3527
I12
sS'.thisN'
p3528
I447
sS'.thisIndex'
p3529
I4
sg15
(lp3530
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I4
sa(dp3531
g16
(lp3532
S'k'
asg18
S'Y'
sS'.thisRepN'
p3533
I29
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3534
I13
sS'.thisN'
p3535
I448
sS'.thisIndex'
p3536
I3
sg15
(lp3537
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3538
S'space'
p3539
asg95
I3
sa(dp3540
g16
(lp3541
S'd'
asg18
S'N'
sg22
I41
sS'.thisN'
p3542
I449
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3543
I14
sS'.thisRepN'
p3544
I29
sg21
I48
sS'.thisIndex'
p3545
I2
sg23
I22
sg15
(lp3546
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg95
I2
sa(dp3547
g16
(lp3548
S'd'
asg95
I2
sS'.thisRepN'
p3549
I30
sg30
VF
sg31
g32
sS'.thisTrialN'
p3550
I0
sS'.thisN'
p3551
I450
sS'.thisIndex'
p3552
I2
sg15
(lp3553
S'd'
asg17
S'Y'
sg14
I10
sa(dp3554
g16
(lp3555
S'd'
asg95
I14
sS'.thisRepN'
p3556
I30
sg30
VF
sg31
g32
sS'.thisTrialN'
p3557
I1
sS'.thisN'
p3558
I451
sS'.thisIndex'
p3559
I14
sg15
(lp3560
S'd'
asg17
S'Y'
sg14
I10
sa(dp3561
g16
(lp3562
S'd'
asg18
S'N'
sS'.thisRepN'
p3563
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3564
I2
sS'.thisN'
p3565
I452
sS'.thisIndex'
p3566
I12
sg15
(lp3567
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg95
I12
sa(dp3568
g16
(lp3569
S'k'
asg18
S'N'
sS'.thisRepN'
p3570
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3571
I3
sS'.thisN'
p3572
I453
sS'.thisIndex'
p3573
I10
sg15
(lp3574
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I10
sa(dp3575
g16
(lp3576
S'k'
asg18
S'Y'
sS'.thisRepN'
p3577
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3578
I4
sS'.thisN'
p3579
I454
sS'.thisIndex'
p3580
I3
sg15
(lp3581
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3582
S'space'
p3583
asg95
I3
sa(dp3584
g16
(lp3585
S'd'
asg18
S'Y'
sS'.thisRepN'
p3586
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3587
I5
sS'.thisN'
p3588
I455
sS'.thisIndex'
p3589
I8
sg15
(lp3590
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3591
S'space'
p3592
asg95
I8
sa(dp3593
g16
(lp3594
S'k'
asg18
S'Y'
sS'.thisRepN'
p3595
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3596
I6
sS'.thisN'
p3597
I456
sS'.thisIndex'
p3598
I5
sg15
(lp3599
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3600
S'space'
p3601
asg95
I5
sa(dp3602
g16
(lp3603
S'k'
asg18
S'Y'
sS'.thisRepN'
p3604
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3605
I7
sS'.thisN'
p3606
I457
sS'.thisIndex'
p3607
I2
sg15
(lp3608
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3609
S'space'
p3610
asg95
I2
sa(dp3611
g16
(lp3612
S'd'
asg18
S'N'
sS'.thisRepN'
p3613
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3614
I8
sS'.thisN'
p3615
I458
sS'.thisIndex'
p3616
I10
sg15
(lp3617
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3618
S'space'
p3619
asg95
I10
sa(dp3620
g16
(lp3621
S'd'
asg18
S'N'
sS'.thisRepN'
p3622
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3623
I9
sS'.thisN'
p3624
I459
sS'.thisIndex'
p3625
I8
sg15
(lp3626
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3627
g16
(lp3628
S'k'
asg18
S'N'
sS'.thisRepN'
p3629
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3630
I10
sS'.thisN'
p3631
I460
sS'.thisIndex'
p3632
I9
sg15
(lp3633
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3634
g16
(lp3635
S'k'
asg18
S'Y'
sS'.thisRepN'
p3636
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3637
I11
sS'.thisN'
p3638
I461
sS'.thisIndex'
p3639
I2
sg15
(lp3640
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3641
S'space'
p3642
asg95
I2
sa(dp3643
g16
(lp3644
S'k'
asg18
S'Y'
sS'.thisRepN'
p3645
I30
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3646
I12
sS'.thisN'
p3647
I462
sS'.thisIndex'
p3648
I1
sg15
(lp3649
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3650
g16
(lp3651
S'k'
asg18
S'Y'
sS'.thisRepN'
p3652
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3653
I13
sS'.thisN'
p3654
I463
sS'.thisIndex'
p3655
I7
sg15
(lp3656
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3657
S'space'
p3658
asg95
I7
sa(dp3659
g16
(lp3660
S'k'
asg18
S'Y'
sS'.thisRepN'
p3661
I30
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3662
I14
sS'.thisN'
p3663
I464
sS'.thisIndex'
p3664
I6
sg15
(lp3665
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3666
S'space'
p3667
asg95
I6
sa(dp3668
g16
(lp3669
S'd'
asg18
S'Y'
sS'.thisRepN'
p3670
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3671
I0
sS'.thisN'
p3672
I465
sS'.thisIndex'
p3673
I8
sg15
(lp3674
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3675
S'space'
p3676
asg95
I8
sa(dp3677
g16
(lp3678
S'd'
asg18
S'N'
sS'.thisRepN'
p3679
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3680
I1
sS'.thisN'
p3681
I466
sS'.thisIndex'
p3682
I1
sg15
(lp3683
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3684
S'space'
p3685
asg95
I1
sa(dp3686
g16
(lp3687
S'd'
asg18
S'N'
sS'.thisRepN'
p3688
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3689
I2
sS'.thisN'
p3690
I467
sS'.thisIndex'
p3691
I11
sg15
(lp3692
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I11
sa(dp3693
g16
(lp3694
S'd'
asg18
S'Y'
sS'.thisRepN'
p3695
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3696
I3
sS'.thisN'
p3697
I468
sS'.thisIndex'
p3698
I4
sg15
(lp3699
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I4
sa(dp3700
g16
(lp3701
S'd'
asg18
S'N'
sS'.thisRepN'
p3702
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3703
I4
sS'.thisN'
p3704
I469
sS'.thisIndex'
p3705
I0
sg15
(lp3706
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I0
sa(dp3707
g16
(lp3708
S'k'
asg18
S'N'
sS'.thisRepN'
p3709
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3710
I5
sS'.thisN'
p3711
I470
sS'.thisIndex'
p3712
I2
sg15
(lp3713
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I2
sa(dp3714
g16
(lp3715
S'd'
asg18
S'Y'
sS'.thisRepN'
p3716
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3717
I6
sS'.thisN'
p3718
I471
sS'.thisIndex'
p3719
I5
sg15
(lp3720
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3721
S'space'
p3722
asg95
I5
sa(dp3723
g16
(lp3724
S'd'
asg18
S'Y'
sS'.thisRepN'
p3725
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3726
I7
sS'.thisN'
p3727
I472
sS'.thisIndex'
p3728
I6
sg15
(lp3729
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3730
S'space'
p3731
asg95
I6
sa(dp3732
g16
(lp3733
S'k'
asg18
S'Y'
sS'.thisRepN'
p3734
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3735
I8
sS'.thisN'
p3736
I473
sS'.thisIndex'
p3737
I13
sg15
(lp3738
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3739
S'space'
p3740
asg95
I13
sa(dp3741
g16
(lp3742
S'd'
asg18
S'Y'
sS'.thisRepN'
p3743
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3744
I9
sS'.thisN'
p3745
I474
sS'.thisIndex'
p3746
I10
sg15
(lp3747
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3748
S'space'
p3749
asg95
I10
sa(dp3750
g16
(lp3751
S'd'
asg18
S'N'
sS'.thisRepN'
p3752
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3753
I10
sS'.thisN'
p3754
I475
sS'.thisIndex'
p3755
I14
sg15
(lp3756
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I14
sa(dp3757
g16
(lp3758
S'd'
asg18
S'N'
sS'.thisRepN'
p3759
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3760
I11
sS'.thisN'
p3761
I476
sS'.thisIndex'
p3762
I1
sg15
(lp3763
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I1
sa(dp3764
g16
(lp3765
S'd'
asg18
S'N'
sS'.thisRepN'
p3766
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3767
I12
sS'.thisN'
p3768
I477
sS'.thisIndex'
p3769
I5
sg15
(lp3770
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3771
g16
(lp3772
S'k'
asg18
S'N'
sS'.thisRepN'
p3773
I31
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3774
I13
sS'.thisN'
p3775
I478
sS'.thisIndex'
p3776
I10
sg15
(lp3777
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I10
sa(dp3778
g18
S'Y'
sS'.thisRepN'
p3779
I31
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3780
I14
sS'.thisN'
p3781
I479
sS'.thisIndex'
p3782
I13
sg15
Nsg30
VF
sg17
g185
sg14
I10
sg19
Nsg95
I13
sa(dp3783
g16
(lp3784
S'k'
asg18
S'N'
sS'.thisRepN'
p3785
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3786
I0
sS'.thisN'
p3787
I480
sS'.thisIndex'
p3788
I7
sg15
(lp3789
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I7
sa(dp3790
g16
(lp3791
S'k'
asg18
S'N'
sS'.thisRepN'
p3792
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3793
I1
sS'.thisN'
p3794
I481
sS'.thisIndex'
p3795
I5
sg15
(lp3796
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3797
g16
(lp3798
S'k'
asg18
S'N'
sS'.thisRepN'
p3799
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3800
I2
sS'.thisN'
p3801
I482
sS'.thisIndex'
p3802
I14
sg15
(lp3803
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I14
sa(dp3804
g16
(lp3805
S'k'
asg18
S'N'
sS'.thisRepN'
p3806
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3807
I3
sS'.thisN'
p3808
I483
sS'.thisIndex'
p3809
I4
sg15
(lp3810
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I4
sa(dp3811
g16
(lp3812
S'k'
asg18
S'N'
sS'.thisRepN'
p3813
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3814
I4
sS'.thisN'
p3815
I484
sS'.thisIndex'
p3816
I14
sg15
(lp3817
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3818
S'space'
p3819
asg95
I14
sa(dp3820
g16
(lp3821
S'k'
asg18
S'N'
sS'.thisRepN'
p3822
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3823
I5
sS'.thisN'
p3824
I485
sS'.thisIndex'
p3825
I11
sg15
(lp3826
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3827
S'space'
p3828
asg95
I11
sa(dp3829
g16
(lp3830
S'd'
asg18
S'Y'
sS'.thisRepN'
p3831
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3832
I6
sS'.thisN'
p3833
I486
sS'.thisIndex'
p3834
I10
sg15
(lp3835
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3836
S'space'
p3837
asg95
I10
sa(dp3838
g16
(lp3839
S'd'
asg18
S'N'
sS'.thisRepN'
p3840
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3841
I7
sS'.thisN'
p3842
I487
sS'.thisIndex'
p3843
I5
sg15
(lp3844
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I5
sa(dp3845
g16
(lp3846
S'd'
asg18
S'N'
sS'.thisRepN'
p3847
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3848
I8
sS'.thisN'
p3849
I488
sS'.thisIndex'
p3850
I9
sg15
(lp3851
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3852
g16
(lp3853
S'd'
asg18
S'Y'
sS'.thisRepN'
p3854
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3855
I9
sS'.thisN'
p3856
I489
sS'.thisIndex'
p3857
I6
sg15
(lp3858
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I6
sa(dp3859
g16
(lp3860
S'd'
asg18
S'N'
sS'.thisRepN'
p3861
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3862
I10
sS'.thisN'
p3863
I490
sS'.thisIndex'
p3864
I9
sg15
(lp3865
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I9
sa(dp3866
g16
(lp3867
S'd'
asg18
S'N'
sS'.thisRepN'
p3868
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3869
I11
sS'.thisN'
p3870
I491
sS'.thisIndex'
p3871
I9
sg15
(lp3872
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3873
S'space'
p3874
asg95
I9
sa(dp3875
g16
(lp3876
S'd'
asg18
S'N'
sS'.thisRepN'
p3877
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3878
I12
sS'.thisN'
p3879
I492
sS'.thisIndex'
p3880
I5
sg15
(lp3881
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3882
S'space'
p3883
asg95
I5
sa(dp3884
g16
(lp3885
S'd'
asg18
S'Y'
sS'.thisRepN'
p3886
I32
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3887
I13
sS'.thisN'
p3888
I493
sS'.thisIndex'
p3889
I12
sg15
(lp3890
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I12
sa(dp3891
g16
(lp3892
S'k'
asg18
S'N'
sS'.thisRepN'
p3893
I32
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3894
I14
sS'.thisN'
p3895
I494
sS'.thisIndex'
p3896
I11
sg15
(lp3897
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I11
sa(dp3898
g16
(lp3899
S'k'
asg18
S'N'
sS'.thisRepN'
p3900
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3901
I0
sS'.thisN'
p3902
I495
sS'.thisIndex'
p3903
I8
sg15
(lp3904
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg95
I8
sa(dp3905
g16
(lp3906
S'd'
asg18
S'Y'
sS'.thisRepN'
p3907
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3908
I1
sS'.thisN'
p3909
I496
sS'.thisIndex'
p3910
I11
sg15
(lp3911
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3912
S'space'
p3913
asg95
I11
sa(dp3914
g16
(lp3915
S'd'
asg18
S'Y'
sS'.thisRepN'
p3916
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3917
I2
sS'.thisN'
p3918
I497
sS'.thisIndex'
p3919
I14
sg15
(lp3920
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3921
S'space'
p3922
asg95
I14
sa(dp3923
g18
S'N'
sS'.thisRepN'
p3924
I33
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3925
I3
sS'.thisN'
p3926
I498
sS'.thisIndex'
p3927
I14
sg15
Nsg30
VF
sg17
g185
sg14
I10
sg19
Nsg95
I14
sa(dp3928
g16
(lp3929
S'd'
asg18
S'Y'
sg22
I37
sS'.thisN'
p3930
I499
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3931
I4
sS'.thisRepN'
p3932
I33
sg21
I47
sS'.thisIndex'
p3933
I1
sg23
I21
sg15
(lp3934
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3935
S'space'
p3936
asg95
I1
sa(dp3937
S'.thisIndex'
p3938
I9
sS'.thisRepN'
p3939
I33
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p3940
I5
sS'.thisN'
p3941
I500
sg25
S'Y'
sg24
S'Y'
sg15
Nsg17
g185
sg14
I11
sg95
I9
sa(dp3942
g16
(lp3943
S'k'
asS'.thisIndex'
p3944
I12
sS'.thisRepN'
p3945
I33
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p3946
I6
sS'.thisN'
p3947
I501
sg25
S'Y'
sg15
(lp3948
S'd'
asg17
S'Y'
sg14
I11
sg95
I12
sa(dp3949
g16
(lp3950
S'k'
asg18
S'Y'
sS'.thisRepN'
p3951
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3952
I7
sS'.thisN'
p3953
I502
sg25
S'Y'
sg15
(lp3954
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp3955
S'space'
p3956
asg95
I8
sS'.thisIndex'
p3957
I8
sa(dp3958
g16
(lp3959
S'k'
asg18
S'Y'
sS'.thisRepN'
p3960
I33
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p3961
I8
sS'.thisN'
p3962
I503
sg25
S'Y'
sg15
(lp3963
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p3964
I8
sa(dp3965
g16
(lp3966
S'k'
asg18
S'Y'
sS'.thisRepN'
p3967
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3968
I9
sS'.thisN'
p3969
I504
sg25
S'Y'
sg15
(lp3970
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp3971
S'space'
p3972
asg95
I10
sS'.thisIndex'
p3973
I10
sa(dp3974
g16
(lp3975
S'd'
asg18
S'Y'
sS'.thisRepN'
p3976
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3977
I10
sS'.thisN'
p3978
I505
sg25
S'Y'
sg15
(lp3979
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp3980
S'space'
p3981
asg95
I8
sS'.thisIndex'
p3982
I8
sa(dp3983
g16
(lp3984
S'k'
asg18
S'Y'
sS'.thisRepN'
p3985
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3986
I11
sS'.thisN'
p3987
I506
sg25
S'Y'
sg15
(lp3988
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp3989
S'space'
p3990
asg95
I11
sS'.thisIndex'
p3991
I11
sa(dp3992
g16
(lp3993
S'd'
asg18
S'N'
sS'.thisRepN'
p3994
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p3995
I12
sS'.thisN'
p3996
I507
sg25
S'Y'
sg15
(lp3997
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p3998
I1
sa(dp3999
g16
(lp4000
S'k'
asg18
S'N'
sS'.thisRepN'
p4001
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4002
I13
sS'.thisN'
p4003
I508
sg25
S'Y'
sg15
(lp4004
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4005
I6
sa(dp4006
g16
(lp4007
S'k'
asg18
S'Y'
sS'.thisRepN'
p4008
I33
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4009
I14
sS'.thisN'
p4010
I509
sg25
S'Y'
sg15
(lp4011
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4012
S'space'
p4013
asg95
I6
sS'.thisIndex'
p4014
I6
sa(dp4015
g16
(lp4016
S'd'
asg18
S'N'
sS'.thisRepN'
p4017
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4018
I0
sS'.thisN'
p4019
I510
sg25
S'Y'
sg15
(lp4020
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I3
sS'.thisIndex'
p4021
I3
sa(dp4022
g16
(lp4023
S'd'
asg18
S'Y'
sS'.thisRepN'
p4024
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4025
I1
sS'.thisN'
p4026
I511
sg25
S'Y'
sg15
(lp4027
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4028
S'space'
p4029
asg95
I2
sS'.thisIndex'
p4030
I2
sa(dp4031
g16
(lp4032
S'k'
asg18
S'Y'
sS'.thisRepN'
p4033
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4034
I2
sS'.thisN'
p4035
I512
sg25
S'Y'
sg15
(lp4036
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4037
S'space'
p4038
asg95
I1
sS'.thisIndex'
p4039
I1
sa(dp4040
g16
(lp4041
S'd'
asg18
S'Y'
sS'.thisRepN'
p4042
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4043
I3
sS'.thisN'
p4044
I513
sg25
S'Y'
sg15
(lp4045
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4046
S'space'
p4047
asg95
I4
sS'.thisIndex'
p4048
I4
sa(dp4049
g16
(lp4050
S'k'
asg18
S'Y'
sS'.thisRepN'
p4051
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4052
I4
sS'.thisN'
p4053
I514
sg25
S'Y'
sg15
(lp4054
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4055
S'space'
p4056
asg95
I14
sS'.thisIndex'
p4057
I14
sa(dp4058
g16
(lp4059
S'k'
asg18
S'N'
sS'.thisRepN'
p4060
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4061
I5
sS'.thisN'
p4062
I515
sg25
S'Y'
sg15
(lp4063
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4064
I10
sa(dp4065
g16
(lp4066
S'd'
asg18
S'Y'
sS'.thisRepN'
p4067
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4068
I6
sS'.thisN'
p4069
I516
sg25
S'Y'
sg15
(lp4070
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4071
S'space'
p4072
asg95
I3
sS'.thisIndex'
p4073
I3
sa(dp4074
g16
(lp4075
S'k'
asg18
S'N'
sS'.thisRepN'
p4076
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4077
I7
sS'.thisN'
p4078
I517
sg25
S'Y'
sg15
(lp4079
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I11
sS'.thisIndex'
p4080
I11
sa(dp4081
g16
(lp4082
S'd'
asg18
S'Y'
sS'.thisRepN'
p4083
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4084
I8
sS'.thisN'
p4085
I518
sg25
S'Y'
sg15
(lp4086
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4087
S'space'
p4088
asg95
I6
sS'.thisIndex'
p4089
I6
sa(dp4090
g16
(lp4091
S'k'
asg18
S'N'
sS'.thisRepN'
p4092
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4093
I9
sS'.thisN'
p4094
I519
sg25
S'Y'
sg15
(lp4095
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I13
sS'.thisIndex'
p4096
I13
sa(dp4097
g16
(lp4098
S'd'
asg18
S'Y'
sS'.thisRepN'
p4099
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4100
I10
sS'.thisN'
p4101
I520
sg25
S'Y'
sg15
(lp4102
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4103
S'space'
p4104
asg95
I11
sS'.thisIndex'
p4105
I11
sa(dp4106
g16
(lp4107
S'k'
asg18
S'Y'
sS'.thisRepN'
p4108
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4109
I11
sS'.thisN'
p4110
I521
sg25
S'Y'
sg15
(lp4111
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4112
S'space'
p4113
asg95
I4
sS'.thisIndex'
p4114
I4
sa(dp4115
g16
(lp4116
S'k'
asg18
S'N'
sS'.thisRepN'
p4117
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4118
I12
sS'.thisN'
p4119
I522
sg25
S'Y'
sg15
(lp4120
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I8
sS'.thisIndex'
p4121
I8
sa(dp4122
g16
(lp4123
S'd'
asg18
S'N'
sS'.thisRepN'
p4124
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4125
I13
sS'.thisN'
p4126
I523
sg25
S'Y'
sg15
(lp4127
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4128
I7
sa(dp4129
g16
(lp4130
S'd'
asg18
S'N'
sS'.thisRepN'
p4131
I34
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4132
I14
sS'.thisN'
p4133
I524
sg25
S'Y'
sg15
(lp4134
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4135
I2
sa(dp4136
g16
(lp4137
S'd'
asg18
S'N'
sS'.thisRepN'
p4138
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4139
I0
sS'.thisN'
p4140
I525
sg25
S'Y'
sg15
(lp4141
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I5
sS'.thisIndex'
p4142
I5
sa(dp4143
g16
(lp4144
S'k'
asg18
S'N'
sS'.thisRepN'
p4145
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4146
I1
sS'.thisN'
p4147
I526
sg25
S'Y'
sg15
(lp4148
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I12
sS'.thisIndex'
p4149
I12
sa(dp4150
g16
(lp4151
S'k'
asg18
S'Y'
sS'.thisRepN'
p4152
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4153
I2
sS'.thisN'
p4154
I527
sg25
S'Y'
sg15
(lp4155
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I13
sS'.thisIndex'
p4156
I13
sa(dp4157
g16
(lp4158
S'k'
asg18
S'N'
sS'.thisRepN'
p4159
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4160
I3
sS'.thisN'
p4161
I528
sg25
S'Y'
sg15
(lp4162
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I6
sS'.thisIndex'
p4163
I6
sa(dp4164
g16
(lp4165
S'd'
asg18
S'N'
sS'.thisRepN'
p4166
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4167
I4
sS'.thisN'
p4168
I529
sg25
S'Y'
sg15
(lp4169
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4170
I2
sa(dp4171
g16
(lp4172
S'd'
asg18
S'N'
sS'.thisRepN'
p4173
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4174
I5
sS'.thisN'
p4175
I530
sg25
S'Y'
sg15
(lp4176
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I2
sS'.thisIndex'
p4177
I2
sa(dp4178
g16
(lp4179
S'k'
asg18
S'N'
sS'.thisRepN'
p4180
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4181
I6
sS'.thisN'
p4182
I531
sg25
S'Y'
sg15
(lp4183
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4184
I10
sa(dp4185
g16
(lp4186
S'd'
asg18
S'N'
sS'.thisRepN'
p4187
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4188
I7
sS'.thisN'
p4189
I532
sg25
S'Y'
sg15
(lp4190
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I1
sS'.thisIndex'
p4191
I1
sa(dp4192
g16
(lp4193
S'k'
asg18
S'N'
sS'.thisRepN'
p4194
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4195
I8
sS'.thisN'
p4196
I533
sg25
S'Y'
sg15
(lp4197
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4198
I10
sa(dp4199
g16
(lp4200
S'd'
asg18
S'Y'
sS'.thisRepN'
p4201
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4202
I9
sS'.thisN'
p4203
I534
sg25
S'Y'
sg15
(lp4204
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4205
S'space'
p4206
asg95
I3
sS'.thisIndex'
p4207
I3
sa(dp4208
g16
(lp4209
S'k'
asg18
S'N'
sS'.thisRepN'
p4210
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4211
I10
sS'.thisN'
p4212
I535
sg25
S'Y'
sg15
(lp4213
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I7
sS'.thisIndex'
p4214
I7
sa(dp4215
g16
(lp4216
S'd'
asg18
S'N'
sS'.thisRepN'
p4217
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4218
I11
sS'.thisN'
p4219
I536
sg25
S'Y'
sg15
(lp4220
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I13
sS'.thisIndex'
p4221
I13
sa(dp4222
g16
(lp4223
S'k'
asg18
S'Y'
sS'.thisRepN'
p4224
I35
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4225
I12
sS'.thisN'
p4226
I537
sg25
S'Y'
sg15
(lp4227
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I4
sS'.thisIndex'
p4228
I4
sa(dp4229
g16
(lp4230
S'k'
asg18
S'Y'
sS'.thisRepN'
p4231
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4232
I13
sS'.thisN'
p4233
I538
sg25
S'Y'
sg15
(lp4234
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4235
S'space'
p4236
asg95
I6
sS'.thisIndex'
p4237
I6
sa(dp4238
g16
(lp4239
S'd'
asg18
S'Y'
sS'.thisRepN'
p4240
I35
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4241
I14
sS'.thisN'
p4242
I539
sg25
S'Y'
sg15
(lp4243
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4244
S'space'
p4245
asg95
I9
sS'.thisIndex'
p4246
I9
sa(dp4247
g16
(lp4248
S'k'
asg18
S'Y'
sS'.thisRepN'
p4249
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4250
I0
sS'.thisN'
p4251
I540
sg25
S'Y'
sg15
(lp4252
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4253
S'space'
p4254
asg95
I8
sS'.thisIndex'
p4255
I8
sa(dp4256
g18
S'Y'
sS'.thisRepN'
p4257
I36
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4258
I1
sS'.thisN'
p4259
I541
sg25
S'Y'
sg15
Nsg30
VF
sg17
g185
sg14
I11
sg19
Nsg95
I11
sS'.thisIndex'
p4260
I11
sa(dp4261
g16
(lp4262
S'd'
asg18
S'N'
sS'.thisRepN'
p4263
I36
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4264
I2
sS'.thisN'
p4265
I542
sg25
S'Y'
sg15
(lp4266
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4267
S'space'
p4268
asg95
I1
sS'.thisIndex'
p4269
I1
sa(dp4270
g16
(lp4271
S'd'
asg18
S'Y'
sS'.thisRepN'
p4272
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4273
I3
sS'.thisN'
p4274
I543
sg25
S'Y'
sg15
(lp4275
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
(lp4276
S'space'
p4277
asg95
I6
sS'.thisIndex'
p4278
I6
sa(dp4279
g16
(lp4280
S'd'
asg18
S'N'
sS'.thisRepN'
p4281
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4282
I4
sS'.thisN'
p4283
I544
sg25
S'Y'
sg15
(lp4284
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I10
sS'.thisIndex'
p4285
I10
sa(dp4286
g16
(lp4287
S'd'
asg18
S'N'
sS'.thisRepN'
p4288
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4289
I5
sS'.thisN'
p4290
I545
sg25
S'Y'
sg15
(lp4291
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I12
sS'.thisIndex'
p4292
I12
sa(dp4293
g16
(lp4294
S'd'
asg18
S'N'
sS'.thisRepN'
p4295
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4296
I6
sS'.thisN'
p4297
I546
sg25
S'Y'
sg15
(lp4298
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I9
sS'.thisIndex'
p4299
I9
sa(dp4300
g16
(lp4301
S'd'
asg18
S'N'
sS'.thisRepN'
p4302
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4303
I7
sS'.thisN'
p4304
I547
sg25
S'Y'
sg15
(lp4305
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I12
sS'.thisIndex'
p4306
I12
sa(dp4307
g16
(lp4308
S'd'
asg18
S'N'
sS'.thisRepN'
p4309
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4310
I8
sS'.thisN'
p4311
I548
sg25
S'Y'
sg15
(lp4312
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I11
sS'.thisIndex'
p4313
I11
sa(dp4314
g16
(lp4315
S'd'
asg18
S'Y'
sg22
I42
sg26
S'Y'
sS'.thisN'
p4316
I549
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4317
I9
sS'.thisRepN'
p4318
I36
sg21
I47
sg25
S'Y'
sg23
I23
sg15
(lp4319
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg95
I0
sS'.thisIndex'
p4320
I0
sa(dp4321
g16
(lp4322
S'k'
asS'.thisIndex'
p4323
I4
sS'.thisRepN'
p4324
I36
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4325
I10
sS'.thisN'
p4326
I550
sg25
S'Y'
sg15
(lp4327
S'd'
asg17
S'Y'
sg14
I12
sg95
I4
sa(dp4328
g16
(lp4329
S'k'
asS'.thisIndex'
p4330
I13
sS'.thisRepN'
p4331
I36
sg26
S'Y'
sg30
VF
sg31
g32
sS'.thisTrialN'
p4332
I11
sS'.thisN'
p4333
I551
sg25
S'Y'
sg15
(lp4334
S'd'
asg17
S'Y'
sg14
I12
sg95
I13
sa(dp4335
g16
(lp4336
S'k'
asg18
S'N'
sS'.thisRepN'
p4337
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4338
I12
sS'.thisN'
p4339
I552
sg25
S'Y'
sg15
(lp4340
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4341
I9
sa(dp4342
g16
(lp4343
S'k'
asg18
S'N'
sS'.thisRepN'
p4344
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4345
I13
sS'.thisN'
p4346
I553
sg25
S'Y'
sg15
(lp4347
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I14
sS'.thisIndex'
p4348
I14
sa(dp4349
g16
(lp4350
S'k'
asg18
S'Y'
sS'.thisRepN'
p4351
I36
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4352
I14
sS'.thisN'
p4353
I554
sg25
S'Y'
sg15
(lp4354
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4355
S'space'
p4356
asg95
I6
sS'.thisIndex'
p4357
I6
sa(dp4358
g16
(lp4359
S'd'
asg18
S'Y'
sS'.thisRepN'
p4360
I37
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4361
I0
sS'.thisN'
p4362
I555
sg25
S'Y'
sg15
(lp4363
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I4
sS'.thisIndex'
p4364
I4
sa(dp4365
g16
(lp4366
S'k'
asg18
S'N'
sS'.thisRepN'
p4367
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4368
I1
sS'.thisN'
p4369
I556
sg25
S'Y'
sg15
(lp4370
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4371
I10
sa(dp4372
g16
(lp4373
S'k'
asg18
S'Y'
sS'.thisRepN'
p4374
I37
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4375
I2
sS'.thisN'
p4376
I557
sg25
S'Y'
sg15
(lp4377
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4378
I5
sa(dp4379
g16
(lp4380
S'd'
asg18
S'N'
sS'.thisRepN'
p4381
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4382
I3
sS'.thisN'
p4383
I558
sg25
S'Y'
sg15
(lp4384
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I11
sS'.thisIndex'
p4385
I11
sa(dp4386
g16
(lp4387
S'd'
asg18
S'N'
sS'.thisRepN'
p4388
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4389
I4
sS'.thisN'
p4390
I559
sg25
S'Y'
sg15
(lp4391
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4392
I3
sa(dp4393
g16
(lp4394
S'k'
asg18
S'N'
sS'.thisRepN'
p4395
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4396
I5
sS'.thisN'
p4397
I560
sg25
S'Y'
sg15
(lp4398
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I14
sS'.thisIndex'
p4399
I14
sa(dp4400
g16
(lp4401
S'k'
asg18
S'Y'
sS'.thisRepN'
p4402
I37
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4403
I6
sS'.thisN'
p4404
I561
sg25
S'Y'
sg15
(lp4405
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4406
I1
sa(dp4407
g16
(lp4408
S'd'
asg18
S'Y'
sS'.thisRepN'
p4409
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4410
I7
sS'.thisN'
p4411
I562
sg25
S'Y'
sg15
(lp4412
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4413
S'space'
p4414
asg95
I10
sS'.thisIndex'
p4415
I10
sa(dp4416
g16
(lp4417
S'k'
asg18
S'Y'
sS'.thisRepN'
p4418
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4419
I8
sS'.thisN'
p4420
I563
sg25
S'Y'
sg15
(lp4421
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4422
S'space'
p4423
asg95
I7
sS'.thisIndex'
p4424
I7
sa(dp4425
g16
(lp4426
S'k'
asg18
S'N'
sS'.thisRepN'
p4427
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4428
I9
sS'.thisN'
p4429
I564
sg25
S'Y'
sg15
(lp4430
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4431
I1
sa(dp4432
g16
(lp4433
S'd'
asg18
S'N'
sS'.thisRepN'
p4434
I37
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4435
I10
sS'.thisN'
p4436
I565
sg25
S'Y'
sg15
(lp4437
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4438
S'space'
p4439
asg95
I14
sS'.thisIndex'
p4440
I14
sa(dp4441
g16
(lp4442
S'k'
asg18
S'Y'
sS'.thisRepN'
p4443
I37
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4444
I11
sS'.thisN'
p4445
I566
sg25
S'Y'
sg15
(lp4446
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I11
sS'.thisIndex'
p4447
I11
sa(dp4448
g18
S'N'
sS'.thisRepN'
p4449
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4450
I12
sS'.thisN'
p4451
I567
sg25
S'Y'
sg15
Nsg30
VF
sg17
g185
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4452
I0
sa(dp4453
g16
(lp4454
S'k'
asg18
S'N'
sS'.thisRepN'
p4455
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4456
I13
sS'.thisN'
p4457
I568
sg25
S'Y'
sg15
(lp4458
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I13
sS'.thisIndex'
p4459
I13
sa(dp4460
g16
(lp4461
S'd'
asg18
S'N'
sS'.thisRepN'
p4462
I37
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4463
I14
sS'.thisN'
p4464
I569
sg25
S'Y'
sg15
(lp4465
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4466
I1
sa(dp4467
g16
(lp4468
S'd'
asg18
S'Y'
sS'.thisRepN'
p4469
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4470
I0
sS'.thisN'
p4471
I570
sg25
S'Y'
sg15
(lp4472
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4473
S'space'
p4474
asg95
I0
sS'.thisIndex'
p4475
I0
sa(dp4476
g16
(lp4477
S'k'
asg18
S'Y'
sS'.thisRepN'
p4478
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4479
I1
sS'.thisN'
p4480
I571
sg25
S'Y'
sg15
(lp4481
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4482
S'space'
p4483
asg95
I2
sS'.thisIndex'
p4484
I2
sa(dp4485
g16
(lp4486
S'k'
asg18
S'Y'
sS'.thisRepN'
p4487
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4488
I2
sS'.thisN'
p4489
I572
sg25
S'Y'
sg15
(lp4490
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4491
S'space'
p4492
asg95
I4
sS'.thisIndex'
p4493
I4
sa(dp4494
g16
(lp4495
S'k'
asg18
S'Y'
sS'.thisRepN'
p4496
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4497
I3
sS'.thisN'
p4498
I573
sg25
S'Y'
sg15
(lp4499
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4500
S'space'
p4501
asg95
I3
sS'.thisIndex'
p4502
I3
sa(dp4503
g16
(lp4504
S'd'
asg18
S'N'
sS'.thisRepN'
p4505
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4506
I4
sS'.thisN'
p4507
I574
sg25
S'Y'
sg15
(lp4508
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4509
I0
sa(dp4510
g16
(lp4511
S'd'
asg18
S'Y'
sS'.thisRepN'
p4512
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4513
I5
sS'.thisN'
p4514
I575
sg25
S'Y'
sg15
(lp4515
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4516
S'space'
p4517
asg95
I4
sS'.thisIndex'
p4518
I4
sa(dp4519
g16
(lp4520
S'k'
asg18
S'N'
sS'.thisRepN'
p4521
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4522
I6
sS'.thisN'
p4523
I576
sg25
S'Y'
sg15
(lp4524
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4525
I3
sa(dp4526
g16
(lp4527
S'd'
asg18
S'N'
sS'.thisRepN'
p4528
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4529
I7
sS'.thisN'
p4530
I577
sg25
S'Y'
sg15
(lp4531
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4532
I10
sa(dp4533
g16
(lp4534
S'd'
asg18
S'N'
sS'.thisRepN'
p4535
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4536
I8
sS'.thisN'
p4537
I578
sg25
S'Y'
sg15
(lp4538
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I11
sS'.thisIndex'
p4539
I11
sa(dp4540
g16
(lp4541
S'k'
asg18
S'N'
sS'.thisRepN'
p4542
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4543
I9
sS'.thisN'
p4544
I579
sg25
S'Y'
sg15
(lp4545
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I5
sS'.thisIndex'
p4546
I5
sa(dp4547
g16
(lp4548
S'd'
asg18
S'N'
sS'.thisRepN'
p4549
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4550
I10
sS'.thisN'
p4551
I580
sg25
S'Y'
sg15
(lp4552
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I8
sS'.thisIndex'
p4553
I8
sa(dp4554
g16
(lp4555
S'k'
asg18
S'N'
sS'.thisRepN'
p4556
I38
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4557
I11
sS'.thisN'
p4558
I581
sg25
S'Y'
sg15
(lp4559
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4560
S'space'
p4561
asg95
I13
sS'.thisIndex'
p4562
I13
sa(dp4563
g16
(lp4564
S'd'
asg18
S'N'
sS'.thisRepN'
p4565
I38
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4566
I12
sS'.thisN'
p4567
I582
sg25
S'Y'
sg15
(lp4568
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I9
sS'.thisIndex'
p4569
I9
sa(dp4570
g16
(lp4571
S'k'
asg18
S'Y'
sS'.thisRepN'
p4572
I38
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4573
I13
sS'.thisN'
p4574
I583
sg25
S'Y'
sg15
(lp4575
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4576
S'k'
asg95
I0
sS'.thisIndex'
p4577
I0
sa(dp4578
g16
(lp4579
S'd'
asg18
S'Y'
sS'.thisRepN'
p4580
I38
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4581
I14
sS'.thisN'
p4582
I584
sg25
S'Y'
sg15
(lp4583
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I1
sS'.thisIndex'
p4584
I1
sa(dp4585
g16
(lp4586
S'k'
asg18
S'N'
sS'.thisRepN'
p4587
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4588
I0
sS'.thisN'
p4589
I585
sg25
S'Y'
sg15
(lp4590
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I13
sS'.thisIndex'
p4591
I13
sa(dp4592
g16
(lp4593
S'k'
asg18
S'Y'
sS'.thisRepN'
p4594
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4595
I1
sS'.thisN'
p4596
I586
sg25
S'Y'
sg15
(lp4597
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4598
S'space'
p4599
asg95
I0
sS'.thisIndex'
p4600
I0
sa(dp4601
g16
(lp4602
S'd'
asg18
S'N'
sS'.thisRepN'
p4603
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4604
I2
sS'.thisN'
p4605
I587
sg25
S'Y'
sg15
(lp4606
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I13
sS'.thisIndex'
p4607
I13
sa(dp4608
g16
(lp4609
S'd'
asg18
S'Y'
sS'.thisRepN'
p4610
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4611
I3
sS'.thisN'
p4612
I588
sg25
S'Y'
sg15
(lp4613
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4614
S'space'
p4615
asg95
I8
sS'.thisIndex'
p4616
I8
sa(dp4617
g16
(lp4618
S'k'
asg18
S'N'
sS'.thisRepN'
p4619
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4620
I4
sS'.thisN'
p4621
I589
sg25
S'Y'
sg15
(lp4622
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I0
sS'.thisIndex'
p4623
I0
sa(dp4624
g16
(lp4625
S'k'
asg18
S'Y'
sS'.thisRepN'
p4626
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4627
I5
sS'.thisN'
p4628
I590
sg25
S'Y'
sg15
(lp4629
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4630
S'space'
p4631
asg95
I13
sS'.thisIndex'
p4632
I13
sa(dp4633
g16
(lp4634
S'k'
asg18
S'N'
sS'.thisRepN'
p4635
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4636
I6
sS'.thisN'
p4637
I591
sg25
S'Y'
sg15
(lp4638
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I10
sS'.thisIndex'
p4639
I10
sa(dp4640
g16
(lp4641
S'd'
asg18
S'Y'
sS'.thisRepN'
p4642
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4643
I7
sS'.thisN'
p4644
I592
sg25
S'Y'
sg15
(lp4645
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4646
S'space'
p4647
asg95
I6
sS'.thisIndex'
p4648
I6
sa(dp4649
g16
(lp4650
S'd'
asg18
S'N'
sS'.thisRepN'
p4651
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4652
I8
sS'.thisN'
p4653
I593
sg25
S'Y'
sg15
(lp4654
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4655
I3
sa(dp4656
g16
(lp4657
S'd'
asg18
S'N'
sS'.thisRepN'
p4658
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4659
I9
sS'.thisN'
p4660
I594
sg25
S'Y'
sg15
(lp4661
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg95
I3
sS'.thisIndex'
p4662
I3
sa(dp4663
g16
(lp4664
S'd'
asg18
S'Y'
sS'.thisRepN'
p4665
I39
sg26
S'Y'
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4666
I10
sS'.thisN'
p4667
I595
sg25
S'Y'
sg15
(lp4668
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4669
S'space'
p4670
asg95
I12
sS'.thisIndex'
p4671
I12
sa(dp4672
g16
(lp4673
S'd'
asg18
S'Y'
sS'.thisRepN'
p4674
I39
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4675
I11
sS'.thisN'
p4676
I596
sg25
S'Y'
sg15
(lp4677
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4678
S'k'
asg95
I7
sS'.thisIndex'
p4679
I7
sa(dp4680
g16
(lp4681
S'k'
asg18
S'Y'
sS'.thisRepN'
p4682
I39
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4683
I12
sS'.thisN'
p4684
I597
sg25
S'Y'
sg15
(lp4685
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4686
S'k'
asg95
I1
sS'.thisIndex'
p4687
I1
sa(dp4688
g18
S'Y'
sS'.thisRepN'
p4689
I39
sg26
S'Y'
sg20
S'N'
sg31
g32
sS'.thisTrialN'
p4690
I13
sS'.thisN'
p4691
I598
sg25
S'Y'
sg15
Nsg30
VF
sg17
g185
sg14
I12
sg19
(lp4692
S'k'
asg95
I5
sS'.thisIndex'
p4693
I5
sa(dp4694
g16
(lp4695
S'd'
asg18
S'Y'
sg22
I37
sg26
S'Y'
sS'.thisN'
p4696
I599
sg20
S'Y'
sg31
g32
sS'.thisTrialN'
p4697
I14
sS'.thisRepN'
p4698
I39
sg21
I48
sg25
S'Y'
sg23
I23
sg15
(lp4699
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4700
S'space'
p4701
asg95
I2
sS'.thisIndex'
p4702
I2
sasS'loops'
p4703
(lp4704
g1
(g35
g3
NtRp4705
(dp4706
g38
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4707
sg40
(lp4708
sg41
I74926608
sg10
S''
sg6
g42
sg43
I1
sg27
I01
sg28
Nsg44
g1
(g45
g46
(dp4709
g48
g49
(g50
g51
g52
S'b'
tRp4710
(I1
(I600
I1
tg55
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg56
g49
(g50
g51
g52
S'b'
tRp4711
(I1
(I600
I1
tg55
I00
S'\x00\x00\xc0@\x00\x00\xe2B\x00\x00\rC\x00\x80\xe3C\x00\x00\x91C\x00\x80\xbbC\x00\x80\xc3C\x00\x80\x11D\x00\x80\xdfC\x00\xc0\x07D\x00\x00\xa9C\x00\x00{C\x00\x00SC\x00\x00\xc2B\x00\x00cC\x00\x00\x82B\x00\x00\x14B\x00\x80\x0eD\x00\x00ZC\x00\x00\x83C\x00\x00\tD\x00\x00 A\x00\x00mC\x00\x00\'C\x00\x00\x8eC\x00\x00\xf8C\x00\x00\xa4C\x00\x00\x94C\x00\x00/C\x00\x00\xc0C\x00\x00`C\x00\x00\x15C\x00\x00CC\x00\x00\xccC\x00\x00\xb4C\x00\x00\xbaC\x00\xc0\x12D\x00\x00nC\x00\x00\x8eB\x00\x00\\B\x00\x00\x14D\x00\x80\xeeC\x00\x80\xeaC\x00\x80\x04D\x00\x00\xc2C\x00\x00jC\x00\x00\xc8B\x00\x00dB\x00\x80\xe8C\x00\x80\x8cC\x00\xc0\x02D\x00\x00\x19C\x00\x00\x9aC\x00\x80\xfdC\x00\x80\xfcC\x00\x80\xf8C\x00\x00\xa6C\x00\x00hB\x00\x00\xedC\x00\x80\xe5C\x00\x00\x98B\x00\x80\xa8C\x00\x00\x03C\x00\x003C\x00\x00\x93C\x00\x80\xdaC\x00\xc0\x0fD\x00\x00\xb8A\x00\x00EC\x00\x80\x14D\x00\x80\x95C\x00\x00\xf0B\x00\x80\xedC\x00\x00\x81C\x00\x00`B\x00\x00\xb6B\x00\x00\x1fC\x00\x00\xb3C\x00\x00\x82C\x00\x00|B\x00\x00\x15D\x00\x00@A\x00\x00&C\x00\x00\x86B\x00\x00\x8cB\x00\x80\xc0C\x00\x80\xe0C\x00\x00\x04B\x00\x00KC\x00\x80\x05D\x00\x80\xc2C\x00\x80\xcdC\x00\x80\xf3C\x00\xc0\x14D\x00\x00\xb8C\x00\x00\x90B\x00\x00\x9cC\x00\x00\xf5C\x00\x00\xdbC\x00\x00\xa0C\x00\x00HC\x00\x00\xd8C\x00\x00tB\x00\x80\x08D\x00\x00MC\x00\x009C\x00\x00\xf4C\x00\x00xB\x00\x80\xc8C\x00\x80\x8fC\x00\x00\x11C\x00\x00\tC\x00\x00NC\x00\x00\x89C\x00\x00\x05D\x00\x00\xb8B\x00\x80\xceC\x00\x80\xf5C\x00\x00\x12D\x00\x00\xcdC\x00\x00\xcfC\x00\x00RC\x00\x00\x97C\x00\x00\xbbC\x00\x00PB\x00\xc0\nD\x00\xc0\x15D\x00\x80\x9fC\x00@\x03D\x00\x00FC\x00\x00\x08D\x00\x00\x9eB\x00\x00hC\x00\x80\x81C\x00\x00?C\x00\x00\x0cB\x00\x00\xacB\x00\x80\xf6C\x00\xc0\x0bD\x00@\x08D\x00\x80\xe9C\x00\x00\xfaC\x00\x80\xa2C\x00\x00\xbaB\x00\x00\xafC\x00@\x00D\x00\x00\xfcB\x00\x00\xc0A\x00@\rD\x00\x80\x10D\x00\x00\x1cB\x00\x80\xebC\x00\x00\x18B\x00\x004C\x00\x80\x97C\x00\x00\x02D\x00\x00(B\x00\x00\x96C\x00@\x0eD\x00\x80\x90C\x00\x00\\C\x00\x00\xdeC\x00\x00bC\x00@\tD\x00\x00IC\x00\x80\xa6C\x00\x00\xb9C\x00\x00\xdcC\x00\x00\x18C\x00\x80\x92C\x00\x00\xe8A\x00\x00\xa0@\x00\x00\x01D\x00\x00\x8fC\x00\x00fC\x00\x00\x14C\x00\x00\xbeB\x00\x00UC\x00\x00pA\x00\x00\x96B\x00\x00\xf6C\x00\x00\xaeB\x00\x00\x9bC\x00\x00\x03D\x00\x80\xaeC\x00\x00\x88C\x00\x00\x0eC\x00\xc0\rD\x00\x00\xe5C\x00\x00\x8aC\x00\x80\x0bD\x00\x00\x9eC\x00\x00\xd8A\x00\x80\xb0C\x00\x80\x8dC\x00\x00\x86C\x00\x00\xf8A\x00\x00\xbcC\x00\x00\xecC\x00\x00\xbfC\x00\x80\x9eC\x00\x00pB\x00\x00\x11D\x00\x80\x83C\x00\x80\xffC\x00\x80\xa7C\x00\x80\xd5C\x00\x00\x92B\x00\x00,B\x00\x00\xe9C\x00\x00\x13D\x00\x00\xa8B\x00\x80\xefC\x00\x00\xe0A\x00@\x14D\x00\x00\x02C\x00\x00\xb4B\x00\x00\xa8C\x00\x00 B\x00\x00\xd5C\x00\x00\x9aB\x00\x00\x0fC\x00\x80\x82C\x00\x006C\x00\x00\xffC\x00\x00\xeaC\x00\x80\xe1C\x00\x00\x8aB\x00\x00\xd2C\x00\x80\xd9C\x00\x80\x01D\x00\x00\x84C\x00\x00\xc5C\x00\x00\x16C\x00\x80\x07D\x00\x00\x00C\x00\x00\xeeC\x00\x80\xa9C\x00\x00|C\x00\x80\xf4C\x00\x00\x84B\x00\x00\xcbC\x00\x00\x87C\x00\x80\xb9C\x00\x80\xabC\x00\x00\x92C\x00\x00BC\x00\x80\xaaC\x00\x80\xd7C\x00\x00\xe2C\x00\x80\xb3C\x00\x00\x1aC\x00\x00!C\x00\xc0\x08D\x00\x00\x99C\x00\x00GC\x00\x00\xd0A\x00\x80\xa3C\x00\x80\x93C\x00\x80\xa1C\x00\x80\x0fD\x00\x00\xa6B\x00\x00\x0bC\x00\x00TB\x00\x00@@\x00\x00rC\x00\x00\xa0B\x00\x00\x9cB\x00\x00\xe1C\x00\x00^C\x00\x00\xc1C\x00\x00\x06D\x00\x80\x88C\x00\x00\xb5C\x00\xc0\x06D\x00\x00,C\x00\x000C\x00\x00\xc6C\x00\x00\xf3C\x00\x80\xdeC\x00\x00]C\x00\x00:C\x00\x00\xf6B\x00@\x04D\x00\x80\xb7C\x00\x80\xf9C\x00\x00\xdaC\x00\x00\xbdC\x00\x00QC\x00\x80\x8bC\x00\x80\xa0C\x00\x00\x0cC\x00\x80\x0cD\x00\x00\x04C\x00@\x10D\x00\x00WC\x00\x80\xd1C\x00\x00\xb2B\x00\x80\xd6C\x00\x00\xabC\x00\x00\x88A\x00\x00\x80B\x00@\x15D\x00\xc0\x05D\x00\xc0\x01D\x00\x00\xc7C\x00\x80\x8eC\x00\x00vC\x00@\x05D\x00\x00\x90C\x00\x80\xacC\x00\x00\x80?\x00\x00\xaaB\x00\x00\xd6C\x00\x00LB\x00\x00\x00\x00\x00\x80\xccC\x00\x00\x0fD\x00\x00\x8dC\x00\x80\x9aC\x00\x00\xb6C\x00\x000B\x00\x80\xbaC\x00\x00\xf0A\x00\x005C\x00\x00\xccB\x00\x80\x9cC\x00\x004B\x00\x80\xb6C\x00\x00\xe8C\x00\x00\xdeB\x00\x00\x10A\x00\x00TC\x00\x00\x06C\x00\x80\xb1C\x00\x00\xa2B\x00\x00\xc3C\x00\x80\xe4C\x00\x00\x12C\x00\x00\xb1C\x00\x00uC\x00\x00\x98A\x00\x00xC\x00\x00XC\x00\x00\xe8B\x00\x80\x99C\x00\x00lB\x00\x00\x0cD\x00\x80\x8aC\x00\x00\x90A\x00@\x06D\x00\x00\xd4C\x00\x00oC\x00\x00\x9dC\x00\x00\xe0@\x00\x00\xadC\x00\x80\xc9C\x00\x00\x80@\x00\x00\xd1C\x00\x00\xd6B\x00\x80\xbeC\x00\x00AC\x00\x00\x04D\x00\x00$C\x00\x00\x01C\x00\x00\xdcB\x00\x00PA\x00\x80\x86C\x00\x80\xe7C\x00\xc0\tD\x00\x00-C\x00\x00\x0eD\x00\x00\xbeC\x00\x80\xddC\x00\x00\xe0C\x00\x00\xe7C\x00\x80\xfeC\x00\x00\xa4B\x00\x00\xa1C\x00\x80\x87C\x00\x00\xe3C\x00\x00@B\x00\x00\xa2C\x00\x00\xe6C\x00\x00qC\x00\x80\x9bC\x00\x00\x07C\x00\x00\xb2C\x00\x00<C\x00\x00\xacC\x00\x00\xeaB\x00\x80\xdcC\x00\x80\xd0C\x00\x00#C\x00\x00\xc8A\x00\x008B\x00\x00pC\x00\x00\xb0A\x00\x00\xd0B\x00\x00\xf1C\x00\x00\x00D\x00\x00\nC\x00\x00\xfdC\x00\xc0\x13D\x00@\x0bD\x00\x80\xcfC\x00\x00\x88B\x00\x00sC\x00\xc0\x00D\x00\x80\xc7C\x00\x80\xb4C\x00\x00"C\x00\x00\x10B\x00\x00\xd7C\x00\x00\xefC\x00\x80\xfaC\x00\x80\xa5C\x00\x80\x89C\x00\x00\x7fC\x00\x00\xceC\x00\x00\x00A\x00\x00\xecB\x00\x80\xfbC\x00\xc0\x10D\x00\x00kC\x00@\x0cD\x00\x001C\x00\x00\x8cC\x00\x00\xa5C\x00\x00\xc4B\x00\x00XB\x00\x00*C\x00\x80\xd4C\x00\x80\xd2C\x00\x00\xf0C\x00\x00\xe4C\x00\x00.C\x00\x00LC\x00\x80\x91C\x00\x00\xfeC\x00\x80\x84C\x00\x00\xc9C\x00\x00\xc4C\x00\x00\xc0B\x00\x00=C\x00\x00\xdaB\x00\x80\rD\x00\x002C\x00\x00YC\x00\x00wC\x00\x80\xbdC\x00\x00\x1dC\x00\x00\xf2C\x00\x80\x12D\x00\x00\xddC\x00\x00\xe0B\x00\x00DB\x00\x80\xafC\x00\x00;C\x00\x000A\x00\x00\x13C\x00\x00)C\x00\x80\xc5C\x00\xc0\x03D\x00\x00\xa7C\x00\x00zC\x00\x00\x08C\x00\x00lC\x00\x80\xd8C\x00\x80\x06D\x00\x00dC\x00\x80\tD\x00\x80\x85C\x00\x00\xfcC\x00\x00yC\x00\x00\xe4B\x00\x00\xfeB\x00\x00tC\x00\x00OC\x00\x00\xc8C\x00\x00\nD\x00\x00\x94B\x00\x00\x08B\x00\x80\xb8C\x00\x00\xceB\x00\x00JC\x00\x80\xd3C\x00\x80\x13D\x00\x80\x94C\x00\x00\xeeB\x00\x00\xcaC\x00\x00\xf8B\x00\x80\nD\x00\x00\xf2B\x00\x00\x00@\x00\x00\x17C\x00\x00aC\x00\xc0\x0eD\x00\x00\xd0C\x00\x80\x80C\x00\x80\xbcC\x00\x00\x80A\x00\x00\xd2B\x00@\x13D\x00\x00`A\x00\x00\x1cC\x00\x00\x07D\x00\x00\xb7C\x00\x00\xa8A\x00\x00}C\x00\x00\xa3C\x00\x00\xd9C\x00@\x01D\x00\x00\x9fC\x00\x80\xc1C\x00\x00@C\x00\x80\xf0C\x00\x00\x1bC\x00\x80\xf1C\x00\x00\xb0C\x00\x80\xb5C\x00\x80\xa4C\x00\x80\x03D\x00\x80\x00D\x00\x00\xebC\x00@\x0fD\x00@\x11D\x00\x00\xaeC\x00\x80\xcbC\x00\x80\xbfC\x00\x00\xbcB\x00\x00\xa0A\x00\x80\x15D\x00\x00\xf9C\x00\x00\x10D\x00\x00(C\x00\x00gC\x00\x80\xb2C\x00\x00\x00B\x00\x00\xc6B\x00\x80\xf7C\x00\x00 C\x00@\x07D\x00\x007C\x00\x00\xf7C\x00\x00%C\x00\x80\xe2C\x00\x00\rD\x00\x00\x95C\x00\x80\xe6C\x00\x80\xadC\x00\xc0\x11D\x00\x80\xdbC\x00\x00PC\x00\x00\xaaC\x00\x00VC\x00\x00\xd8B\x00\x00<B\x00\x00$B\x00@\x02D\x00\xc0\x04D\x00\x00DC\x00\xc0\x0cD\x00\x00iC\x00\x80\x9dC\x00\x00\xf4B\x00\x00\xd4B\x00\x00+C\x00\x80\xecC\x00\x80\x96C\x00\x00\xe6B\x00@\nD\x00\x00>C\x00\x00\x0bD\x00\x80\x98C\x00\x80\x02D\x00\x00\xd3C\x00\x00\xcaB\x00\x00[C\x00\x80\xcaC\x00\x80\xc6C\x00\x00\xfaB\x00\x00\x1eC\x00\x00\xfbC\x00\x00HB\x00\x00eC\x00\x00\x98C\x00\x008C\x00\x00\xdfC\x00\x00\x10C\x00\x00\x80C\x00\x00~C\x00\x00\x05C\x00@\x12D\x00\x00\x8bC\x00\x00\x85C\x00\x00_C\x00\x80\xc4C\x00\x00\xb0B\x00\x80\xf2C'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4712
(dp4713
g60
(dp4714
g48
I01
sg56
I01
ssg62
g4705
sg63
(lp4715
g48
ag56
asg65
(lp4716
I600
aI1
asbsg67
S'random'
p4717
sg69
g70
(g51
(I0
tS'b'
tRp4718
(I1
(I600
I1
tg54
(S'i4'
I0
I1
tRp4719
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S';\x01\x00\x007\x01\x00\x00\xee\x01\x00\x00\x08\x01\x00\x00e\x01\x00\x00\xab\x00\x00\x00\x00\x00\x00\x00b\x01\x00\x00\xa4\x01\x00\x00K\x01\x00\x00\x15\x00\x00\x00\xcb\x01\x00\x00Q\x00\x00\x00n\x01\x00\x00\xf8\x01\x00\x00\xb2\x00\x00\x00\xf5\x01\x00\x00,\x01\x00\x00]\x01\x00\x00U\x01\x00\x00\x13\x02\x00\x00\xfc\x01\x00\x00\x8d\x01\x00\x00C\x00\x00\x00\x93\x00\x00\x00\x8a\x01\x00\x00\x00\x01\x00\x00\xc0\x00\x00\x00\xd5\x00\x00\x00\xaa\x00\x00\x00C\x01\x00\x00\xc4\x00\x00\x00\x1a\x02\x00\x00W\x00\x00\x00\xe2\x01\x00\x00\x87\x00\x00\x00\x9c\x01\x00\x00\x10\x00\x00\x00\x98\x00\x00\x00\x96\x00\x00\x00\xda\x00\x00\x00.\x02\x00\x00\x9c\x00\x00\x00\xd0\x00\x00\x00A\x01\x00\x00G\x01\x00\x00\x8b\x01\x00\x00-\x02\x00\x00}\x01\x00\x00\xc8\x01\x00\x00H\x02\x00\x00:\x01\x00\x00|\x00\x00\x00\x07\x01\x00\x00\xae\x01\x00\x00\'\x00\x00\x00J\x00\x00\x00/\x00\x00\x009\x00\x00\x00Z\x01\x00\x00\xc9\x00\x00\x00f\x00\x00\x00k\x00\x00\x00O\x00\x00\x00-\x01\x00\x00\x0f\x00\x00\x00\xf0\x00\x00\x00S\x00\x00\x00\x96\x01\x00\x00\xe3\x00\x00\x00T\x00\x00\x00&\x00\x00\x00_\x00\x00\x00\xcf\x00\x00\x00\xe1\x01\x00\x00\xb3\x00\x00\x00<\x00\x00\x00\xdc\x00\x00\x00\x0b\x01\x00\x00\x83\x00\x00\x00\n\x01\x00\x00O\x01\x00\x00y\x01\x00\x00\x05\x01\x00\x00\xd3\x00\x00\x008\x01\x00\x00\x88\x00\x00\x00\xb5\x00\x00\x00V\x02\x00\x00)\x01\x00\x00\xd8\x00\x00\x00K\x00\x00\x00s\x00\x00\x00\x8f\x00\x00\x00\x12\x02\x00\x00\xb0\x00\x00\x00\xbb\x01\x00\x00\r\x00\x00\x00\xad\x01\x00\x00\x1b\x02\x00\x00.\x00\x00\x00A\x02\x00\x00E\x01\x00\x00\xe4\x01\x00\x00\x8e\x01\x00\x00\xf6\x01\x00\x006\x02\x00\x00g\x01\x00\x00,\x02\x00\x00\xbd\x01\x00\x00m\x01\x00\x00J\x01\x00\x00\xc7\x01\x00\x00\x01\x00\x00\x00\xdb\x01\x00\x00:\x02\x00\x00X\x01\x00\x00\x86\x01\x00\x00\xa5\x01\x00\x00\xe9\x01\x00\x00G\x00\x00\x00\xed\x01\x00\x005\x02\x00\x00\x1a\x01\x00\x00\xeb\x01\x00\x00E\x02\x00\x00\x92\x00\x00\x00\xdc\x01\x00\x00\xeb\x00\x00\x00l\x01\x00\x00\xd7\x00\x00\x00>\x00\x00\x00%\x01\x00\x00P\x02\x00\x00M\x01\x00\x00\x82\x01\x00\x00\xd2\x01\x00\x00o\x00\x00\x00\x91\x01\x00\x00\x06\x01\x00\x00#\x01\x00\x00\x02\x00\x00\x00\xba\x00\x00\x00\xdd\x00\x00\x00M\x02\x00\x00n\x00\x00\x00R\x01\x00\x00\xcc\x01\x00\x00\xaf\x00\x00\x00\x1f\x00\x00\x00\xe9\x00\x00\x00\xef\x01\x00\x00\xa8\x00\x00\x003\x00\x00\x00\xfb\x00\x00\x00\x05\x02\x00\x00\xf9\x01\x00\x00\xc3\x01\x00\x00F\x02\x00\x00L\x00\x00\x00\x1d\x02\x00\x00\xfc\x00\x00\x00\x9b\x01\x00\x00\x89\x01\x00\x00k\x01\x00\x00!\x02\x00\x00R\x00\x00\x00\x17\x00\x00\x00\x17\x02\x00\x00\xcd\x01\x00\x00\xaf\x01\x00\x007\x02\x00\x00\x13\x01\x00\x00r\x01\x00\x00\xb4\x01\x00\x00\x1c\x00\x00\x00\x14\x01\x00\x00\xaa\x01\x00\x00\xbf\x01\x00\x00?\x00\x00\x00\x99\x00\x00\x00D\x01\x00\x00\xdf\x00\x00\x00\x1f\x02\x00\x00K\x02\x00\x00i\x00\x00\x00\x19\x01\x00\x00\xca\x01\x00\x00\x84\x01\x00\x00\xbc\x01\x00\x00<\x02\x00\x00\x86\x00\x00\x00\x03\x02\x00\x00i\x01\x00\x00\xf6\x00\x00\x00 \x00\x00\x001\x02\x00\x00D\x00\x00\x00\x81\x00\x00\x00\xff\x00\x00\x00d\x00\x00\x00\xa4\x00\x00\x00\xe5\x01\x00\x00X\x00\x00\x00\xb5\x01\x00\x00h\x00\x00\x00p\x00\x00\x00\xde\x01\x00\x00)\x02\x00\x00 \x01\x00\x00y\x00\x00\x00\x0c\x00\x00\x00L\x01\x00\x00\xb1\x00\x00\x00+\x02\x00\x00\'\x01\x00\x00W\x01\x00\x00\xc0\x01\x00\x00\x12\x00\x00\x00B\x02\x00\x00\xa0\x00\x00\x00\x18\x01\x00\x00\r\x01\x00\x00T\x02\x00\x00\x1e\x00\x00\x00\xf0\x01\x00\x00\xa2\x00\x00\x00\x0e\x00\x00\x00\xd6\x01\x00\x00I\x02\x00\x00\xae\x00\x00\x00\x18\x02\x00\x00\x84\x00\x00\x003\x02\x00\x00-\x00\x00\x00\xa8\x01\x00\x00\xd3\x01\x00\x00\x16\x00\x00\x00%\x00\x00\x00`\x01\x00\x00\x8c\x01\x00\x00\x80\x01\x00\x00\t\x01\x00\x00\x97\x01\x00\x00\xdd\x01\x00\x00T\x01\x00\x003\x01\x00\x00\xc1\x01\x00\x00V\x01\x00\x00\xda\x01\x00\x00\xd1\x01\x00\x00\x0b\x00\x00\x00\xee\x00\x00\x00\xfd\x01\x00\x00O\x02\x00\x00\xa2\x01\x00\x00N\x02\x00\x00\xf3\x01\x00\x00I\x00\x00\x00\x85\x00\x00\x00N\x00\x00\x00\xde\x00\x00\x00\x13\x00\x00\x00\xcb\x00\x00\x00\xe7\x00\x00\x00\xb8\x01\x00\x00S\x02\x00\x00\xd8\x01\x00\x00\xc3\x00\x00\x00o\x01\x00\x00\xf2\x00\x00\x00{\x01\x00\x00\xb9\x00\x00\x00\x10\x01\x00\x00q\x00\x00\x00\xa1\x01\x00\x00\xbd\x00\x00\x00\\\x01\x00\x00R\x02\x00\x00!\x01\x00\x00\xab\x01\x00\x001\x00\x00\x00>\x01\x00\x00\xc2\x00\x00\x00\x18\x00\x00\x002\x01\x00\x00\xad\x00\x00\x00m\x00\x00\x005\x01\x00\x00\x9f\x00\x00\x00\x04\x00\x00\x00\xb6\x01\x00\x00\xf5\x00\x00\x00\xa9\x00\x00\x00@\x00\x00\x00\x02\x01\x00\x00\x1b\x00\x00\x00\xe8\x01\x00\x00$\x02\x00\x00F\x00\x00\x00\x9d\x00\x00\x009\x02\x00\x00z\x00\x00\x00\x9a\x00\x00\x00J\x02\x00\x00>\x02\x00\x00\xfe\x00\x00\x00Y\x01\x00\x004\x00\x00\x00?\x01\x00\x00\xb6\x00\x00\x00\x81\x01\x00\x00`\x00\x00\x00F\x01\x00\x00a\x01\x00\x004\x02\x00\x00\xbf\x00\x00\x00\xc8\x00\x00\x00\x01\x02\x00\x00\x7f\x00\x00\x00c\x00\x00\x00"\x01\x00\x00z\x01\x00\x00\x03\x01\x00\x00~\x01\x00\x00\x8e\x00\x00\x00\xfe\x01\x00\x00\x01\x01\x00\x00\x1a\x00\x00\x00\t\x02\x00\x00\xac\x01\x00\x00\xa0\x01\x00\x008\x00\x00\x00\xa5\x00\x00\x00\xd0\x01\x00\x00\xcd\x00\x00\x00\xd9\x00\x00\x00=\x00\x00\x00\n\x00\x00\x00\xed\x00\x00\x00*\x02\x00\x00\xf7\x00\x00\x00+\x01\x00\x00\xf4\x00\x00\x00\x85\x01\x00\x006\x01\x00\x00c\x01\x00\x00&\x02\x00\x00\x0f\x02\x00\x00\xb8\x00\x00\x00\x90\x00\x00\x00\xc9\x01\x00\x00\x07\x02\x00\x00\xc1\x00\x00\x00S\x01\x00\x00N\x01\x00\x00\x83\x01\x00\x00\x19\x02\x00\x00M\x00\x00\x00\xfa\x00\x00\x00"\x00\x00\x00\x9a\x01\x00\x00\x11\x01\x00\x00\x08\x02\x00\x00@\x01\x00\x00H\x01\x00\x00\xfb\x01\x00\x00\x1c\x01\x00\x00^\x00\x00\x00\xe3\x01\x00\x00\xa6\x00\x00\x00\xf3\x00\x00\x00#\x00\x00\x00B\x01\x00\x00{\x00\x00\x00\x05\x00\x00\x00\xc5\x00\x00\x00\xf4\x01\x00\x00\x1f\x01\x00\x00\xc2\x01\x00\x00t\x01\x00\x00h\x01\x00\x00\xc7\x00\x00\x00\x11\x02\x00\x00\x1d\x00\x00\x00U\x00\x00\x00\x0e\x01\x00\x00\x02\x02\x00\x00,\x00\x00\x00Z\x00\x00\x00P\x01\x00\x00\x06\x00\x00\x00\xba\x01\x00\x00U\x02\x00\x00\xe8\x00\x00\x00\xce\x01\x00\x00\x15\x01\x00\x00D\x02\x00\x001\x01\x00\x00\x99\x01\x00\x00\xdf\x01\x00\x00l\x00\x00\x00\xb9\x01\x00\x00d\x01\x00\x00\xea\x01\x00\x00C\x02\x00\x00\xf1\x00\x00\x00\x10\x02\x00\x00!\x00\x00\x00<\x01\x00\x00w\x00\x00\x00[\x00\x00\x00\xa3\x01\x00\x00t\x00\x00\x00x\x00\x00\x00\x95\x01\x00\x00\xf2\x01\x00\x00\x88\x01\x00\x00f\x01\x00\x00(\x01\x00\x00\xe4\x00\x00\x00\xb1\x01\x00\x00@\x02\x00\x00\xe6\x01\x00\x00_\x01\x00\x00\xb0\x01\x00\x00\xdb\x00\x00\x00\xce\x00\x00\x009\x01\x00\x00*\x01\x00\x00\x9d\x01\x00\x00\xf8\x00\x00\x00e\x00\x00\x00\xd4\x01\x00\x00\xff\x01\x00\x00\xe5\x00\x00\x00\x1e\x01\x00\x00A\x00\x00\x00b\x00\x00\x00(\x02\x00\x00\xa7\x00\x00\x00\x87\x01\x00\x00\xc6\x01\x00\x00u\x01\x00\x00\xa1\x00\x00\x00\x17\x01\x00\x00L\x02\x00\x00\x08\x00\x00\x00v\x01\x00\x00V\x00\x00\x00\x0c\x01\x00\x00\xe2\x00\x00\x00\xf9\x00\x00\x00"\x02\x00\x00|\x01\x00\x00\x03\x00\x00\x00\xb3\x01\x00\x00Q\x01\x00\x00\xbc\x00\x00\x00;\x00\x00\x00\x7f\x01\x00\x00%\x02\x00\x00w\x01\x00\x00p\x01\x00\x00I\x01\x00\x000\x00\x00\x00\xd1\x00\x00\x00\x8c\x00\x00\x00\xe1\x00\x00\x00*\x00\x00\x00\x0c\x02\x00\x00\x97\x00\x00\x00\xc6\x00\x00\x008\x02\x00\x00:\x00\x00\x00H\x00\x00\x00\xec\x00\x00\x00)\x00\x00\x00\x9e\x01\x00\x00\xd4\x00\x00\x00\xb2\x01\x00\x00\x04\x02\x00\x00\x8f\x01\x00\x00\x06\x02\x00\x00\xc4\x01\x00\x00W\x02\x00\x00\x16\x01\x00\x00\\\x00\x00\x00j\x00\x00\x00\xef\x00\x00\x00a\x00\x00\x00u\x00\x00\x00\xb4\x00\x00\x00\x89\x00\x00\x00 \x02\x00\x00\x1c\x02\x00\x00\x19\x00\x00\x007\x00\x00\x00\x15\x02\x00\x00\x1d\x01\x00\x00\x8d\x00\x00\x00\x9f\x01\x00\x00G\x02\x00\x00\xa6\x01\x00\x00\xd9\x01\x00\x006\x00\x00\x00\x92\x01\x00\x005\x00\x00\x00\xb7\x01\x00\x00x\x01\x00\x00\xe0\x00\x00\x00\xcc\x00\x00\x00\x90\x01\x00\x00\x91\x00\x00\x00\x0b\x02\x00\x00\x98\x01\x00\x00\xac\x00\x00\x00\x00\x02\x00\x00\xe6\x00\x00\x000\x01\x00\x00\x9b\x00\x00\x00/\x02\x00\x00?\x02\x00\x002\x00\x00\x00\xb7\x00\x00\x00\x80\x00\x00\x00\n\x02\x00\x00\xcf\x01\x00\x00j\x01\x00\x00\x1b\x01\x00\x00+\x00\x00\x000\x02\x00\x00r\x00\x00\x004\x01\x00\x00Y\x00\x00\x00/\x01\x00\x00\x0f\x01\x00\x00^\x01\x00\x00\xd5\x01\x00\x00\x12\x01\x00\x00\xfa\x01\x00\x00\x1e\x02\x00\x00\xea\x00\x00\x00\t\x00\x00\x00\x82\x00\x00\x00\x8b\x00\x00\x00g\x00\x00\x00\xfd\x00\x00\x00\x14\x00\x00\x00\xa3\x00\x00\x00\xd7\x01\x00\x00q\x01\x00\x00\xe0\x01\x00\x00;\x02\x00\x00\xec\x01\x00\x00}\x00\x00\x00=\x02\x00\x00\x94\x01\x00\x00\xbe\x00\x00\x00\x8a\x00\x00\x00[\x01\x00\x00\xa9\x01\x00\x00$\x01\x00\x002\x02\x00\x00#\x02\x00\x00\x94\x00\x00\x00\xbe\x01\x00\x00\xbb\x00\x00\x00s\x01\x00\x00\x9e\x00\x00\x00\x11\x00\x00\x00\xf1\x01\x00\x00=\x01\x00\x00\r\x02\x00\x00\x04\x01\x00\x00B\x00\x00\x00\x16\x02\x00\x00&\x01\x00\x00\x95\x00\x00\x00\xa7\x01\x00\x00\xca\x00\x00\x00\x0e\x02\x00\x00\x07\x00\x00\x00\'\x02\x00\x00v\x00\x00\x00Q\x02\x00\x00\xc5\x01\x00\x00$\x00\x00\x00\xd2\x00\x00\x00\xf7\x01\x00\x00\xe7\x01\x00\x00\x93\x01\x00\x00(\x00\x00\x00\xd6\x00\x00\x00E\x00\x00\x00]\x00\x00\x00P\x00\x00\x00.\x01\x00\x00\x14\x02\x00\x00~\x00\x00\x00'
tbsg74
I01
sg75
I1
sg76
I-1
sg77
(lp4720
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg79
Nsg80
cnumpy.core.multiarray
scalar
p4721
(g4719
S'~\x00\x00\x00'
tRp4722
sg81
I600
sg82
I0
sg83
I600
sg84
I01
sbag36
asS'savePickle'
p4723
I01
sb.