ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject1426112
p8
sS'runtimeInfo'
p9
NsS'name'
p10
VVERBALRBsubject 1426112
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Int Match?'
p18
aS'Int Response'
p19
aS'Int Correct?'
p20
aS'Line Accuracy'
p21
aS'Interference Accuracy'
p22
aS'Matching Interferences'
p23
aS'New instruction shown?'
p24
aS'Buttons switched?'
p25
aS'Fast?'
p26
asS'autoLog'
p27
I01
sS'extraInfo'
p28
(dp29
S'gender'
p30
VF
sS'age'
p31
V
ssS'loopsUnfinished'
p32
(lp33
g1
(cpsychopy.data
TrialHandler
p34
g3
NtRp35
(dp36
S'origin'
p37
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p38
sS'thisTrial'
p39
I9
sS'_exp'
p40
I74560528
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p41
sS'thisRepN'
p42
I39
sg27
I01
sg28
NsS'data'
p43
g1
(cpsychopy.data
DataHandler
p44
c__builtin__
dict
p45
(dp46
S'ran'
p47
cnumpy.ma.core
_mareconstruct
p48
(cnumpy.ma.core
MaskedArray
p49
cnumpy
ndarray
p50
(I0
tp51
S'b'
tRp52
(I1
(I15
I40
tcnumpy
dtype
p53
(S'f4'
I0
I1
tRp54
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p55
g48
(g49
g50
g51
S'b'
tRp56
(I1
(I15
I40
tg54
I00
S'\x00\x00\x90A\x00\x00\xb0A\x00\x00\xe8A\x00\x000B\x00\x00hB\x00\x00pB\x00\x00|B\x00\x00\xa0B\x00\x00\xb0B\x00\x00$C\x00\x002C\x00\x00BC\x00\x00GC\x00\x00HC\x00\x00jC\x00\x00kC\x00\x00tC\x00\x00\x83C\x00\x00\x87C\x00\x80\x92C\x00\x00\x94C\x00\x00\x99C\x00\x80\x9aC\x00\x80\x9fC\x00\x00\xacC\x00\x80\xb6C\x00\x80\xc6C\x00\x80\xd7C\x00\x00\xd8C\x00\x80\xe0C\x00\x00\xe3C\x00\x00\xefC\x00\x00\xf0C\x00\x80\xf6C\x00\x00\xfaC\x00\x80\xfeC\x00\x80\x04D\x00\x80\x08D\x00\x00\x0cD\x00\x80\x13D\x00\x000A\x00\x00@A\x00\x00\x98A\x00\x00dB\x00\x00lB\x00\x00\x8aB\x00\x00\x96B\x00\x00\x98B\x00\x00\xa4B\x00\x00\xc6B\x00\x00\xfaB\x00\x00\x0cC\x00\x00)C\x00\x00<C\x00\x00=C\x00\x00JC\x00\x00aC\x00\x00nC\x00\x00\x85C\x00\x80\x9cC\x00\x00\xaeC\x00\x00\xb2C\x00\x00\xb4C\x00\x80\xb4C\x00\x00\xbaC\x00\x80\xbcC\x00\x00\xc6C\x00\x00\xd1C\x00\x80\xd2C\x00\x00\xd9C\x00\x80\xe4C\x00\x80\xfbC\x00\x00\x00D\x00@\x02D\x00\xc0\x03D\x00@\x06D\x00\x00\x07D\x00\xc0\x07D\x00\x80\tD\x00@\x15D\x00\x00\x80@\x00\x00\x88A\x00\x00\xc0A\x00\x00`B\x00\x00\x88B\x00\x00\x8cB\x00\x00\xaeB\x00\x00\x06C\x00\x00\x18C\x00\x00 C\x00\x007C\x00\x00[C\x00\x00bC\x00\x00rC\x00\x00zC\x00\x00{C\x00\x80\x84C\x00\x80\x85C\x00\x80\x8dC\x00\x80\xa7C\x00\x80\xaaC\x00\x80\xafC\x00\x00\xc8C\x00\x00\xcbC\x00\x00\xceC\x00\x80\xceC\x00\x00\xddC\x00\x00\xe2C\x00\x00\xe8C\x00\x80\xf1C\x00\x00\xf6C\x00\x00\xf7C\x00@\x00D\x00\x80\x03D\x00\x00\tD\x00\x80\nD\x00\xc0\x0cD\x00\x00\x0eD\x00\x80\x0fD\x00\x00\x15D\x00\x00\xd0A\x00\x00\x92B\x00\x00\xd8B\x00\x00\xf4B\x00\x00\x05C\x00\x00\tC\x00\x00\x14C\x00\x00\x1eC\x00\x00!C\x00\x00"C\x00\x005C\x00\x00DC\x00\x00gC\x00\x00pC\x00\x00qC\x00\x00}C\x00\x80\x81C\x00\x00\x98C\x00\x00\xa1C\x00\x80\xa4C\x00\x80\xa6C\x00\x80\xb5C\x00\x80\xb9C\x00\x80\xc2C\x00\x80\xc3C\x00\x80\xdaC\x00\x00\xe1C\x00\x00\xe9C\x00\x00\xebC\x00\x80\xeeC\x00\x80\xf0C\x00\x80\xf4C\x00\x80\xf5C\x00\x00\xf8C\x00\x80\xfaC\x00\xc0\x00D\x00\x80\x0bD\x00\x80\x0eD\x00\x80\x10D\x00@\x13D\x00\x00\x80?\x00\x00@@\x00\x00\x10A\x00\x00 A\x00\x00\xa0A\x00\x00\xd8A\x00\x00xB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xdaB\x00\x00\xe4B\x00\x00\xe8B\x00\x00\x13C\x00\x00,C\x00\x001C\x00\x003C\x00\x004C\x00\x00@C\x00\x00FC\x00\x00NC\x00\x00|C\x00\x00\x81C\x00\x80\x8aC\x00\x00\x96C\x00\x00\x97C\x00\x00\xa2C\x00\x80\xadC\x00\x80\xc1C\x00\x00\xc7C\x00\x00\xd0C\x00\x80\xd1C\x00\x80\xdcC\x00\x00\xe0C\x00\x80\xe8C\x00\x80\xe9C\x00\x00\xf3C\x00\x00\xf5C\x00\x00\xfeC\x00\x00\x0bD\x00\x00\x12D\x00\x00pA\x00\x00\x80A\x00\x00\x08B\x00\x00HB\x00\x00\x86B\x00\x00\x9aB\x00\x00\xb4B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xf2B\x00\x00\x02C\x00\x00\x1aC\x00\x00+C\x00\x00LC\x00\x00RC\x00\x00]C\x00\x00dC\x00\x00hC\x00\x00sC\x00\x00\x86C\x00\x80\x88C\x00\x00\x8aC\x00\x80\x99C\x00\x00\x9fC\x00\x00\xa8C\x00\x00\xb6C\x00\x80\xb7C\x00\x00\xb9C\x00\x80\xc0C\x00\x00\xc3C\x00\x80\xc7C\x00\x00\xccC\x00\x80\xd6C\x00\x80\xf3C\x00\x80\x00D\x00@\x01D\x00\xc0\tD\x00\x00\rD\x00@\x0eD\x00\x80\x15D\x00\x00`A\x00\x00\xc8A\x00\x00 B\x00\x00\xdcB\x00\x00\x00C\x00\x00\x1fC\x00\x000C\x00\x00OC\x00\x00QC\x00\x00^C\x00\x00eC\x00\x00oC\x00\x00~C\x00\x00\x82C\x00\x00\x8eC\x00\x80\x90C\x00\x00\x95C\x00\x80\x96C\x00\x00\x9cC\x00\x00\xa3C\x00\x80\xa3C\x00\x00\xa4C\x00\x00\xa5C\x00\x00\xa7C\x00\x80\xaeC\x00\x00\xb1C\x00\x80\xbaC\x00\x80\xbdC\x00\x00\xc0C\x00\x80\xccC\x00\x00\xdaC\x00\x80\xe5C\x00\x80\xeaC\x00\x80\xebC\x00\x00\xeeC\x00\x80\x01D\x00\x00\x04D\x00@\x05D\x00\x80\x05D\x00@\x10D\x00\x00\xb8A\x00\x00\xf8A\x00\x00\x0cB\x00\x00,B\x00\x00DB\x00\x00tB\x00\x00\x90B\x00\x00\xd6B\x00\x00\xe0B\x00\x00\x12C\x00\x00\x19C\x00\x00\x1dC\x00\x00\'C\x00\x00AC\x00\x00TC\x00\x00ZC\x00\x00lC\x00\x00wC\x00\x00\x8fC\x00\x00\x90C\x00\x80\x91C\x00\x00\xb7C\x00\x80\xb8C\x00\x00\xbbC\x00\x80\xc4C\x00\x80\xcbC\x00\x00\xd6C\x00\x80\xdeC\x00\x00\xdfC\x00\x80\xdfC\x00\x00\xe7C\x00\x80\xedC\x00\x00\xf2C\x00\x80\xfdC\x00\x00\x02D\x00\x00\x05D\x00\xc0\x06D\x00@\x0bD\x00\x80\x11D\x00\xc0\x11D\x00\x00<B\x00\x00\xa8B\x00\x00\xbcB\x00\x00\xc2B\x00\x00\xeeB\x00\x00\x01C\x00\x00\x08C\x00\x00\x16C\x00\x00\x1bC\x00\x00#C\x00\x008C\x00\x00:C\x00\x00PC\x00\x00SC\x00\x00\\C\x00\x00\x7fC\x00\x00\x80C\x00\x00\x84C\x00\x80\x86C\x00\x00\x8bC\x00\x80\x95C\x00\x80\x97C\x00\x00\xa9C\x00\x80\xb3C\x00\x00\xcaC\x00\x80\xd3C\x00\x00\xdbC\x00\x00\xeaC\x00\x00\xf4C\x00\x80\xf9C\x00\x00\xfbC\x00\x00\xfcC\x00\x00\xffC\x00\x80\xffC\x00\xc0\x01D\x00@\nD\x00\xc0\rD\x00\x00\x10D\x00\x80\x12D\x00\x00\x14D\x00\x00\xa0@\x00\x00\xf0A\x00\x00\x10B\x00\x00\x1cB\x00\x00$B\x00\x004B\x00\x00\x94B\x00\x00\xd2B\x00\x00\xf8B\x00\x00\x04C\x00\x00\rC\x00\x00\x0fC\x00\x00EC\x00\x00KC\x00\x00UC\x00\x00`C\x00\x00cC\x00\x80\x87C\x00\x00\x8dC\x00\x00\x92C\x00\x00\x9eC\x00\x80\xa9C\x00\x80\xacC\x00\x00\xafC\x00\x00\xb5C\x00\x80\xbfC\x00\x00\xc2C\x00\x00\xc9C\x00\x80\xcaC\x00\x00\xcdC\x00\x00\xd3C\x00\x00\xe4C\x00\x80\xefC\x00\x00\xf1C\x00\x80\xf2C\x00\x00\x06D\x00\x80\x06D\x00\xc0\x0eD\x00\xc0\x14D\x00\xc0\x15D\x00\x00\x00\x00\x00\x00\x00A\x00\x00\x00B\x00\x00(B\x00\x008B\x00\x00\x9eB\x00\x00\xa6B\x00\x00\xc4B\x00\x00\xd4B\x00\x00\xdeB\x00\x00\x11C\x00\x00\x15C\x00\x00\x1cC\x00\x00/C\x00\x00?C\x00\x00VC\x00\x00XC\x00\x00fC\x00\x00iC\x00\x00\x8cC\x00\x00\x91C\x00\x00\x93C\x00\x00\x9aC\x00\x80\xabC\x00\x80\xb1C\x00\x00\xbeC\x00\x00\xc4C\x00\x80\xc9C\x00\x80\xd4C\x00\x80\xd9C\x00\x80\xdbC\x00\x80\xddC\x00\x00\xdeC\x00\x00\xe6C\x00@\x08D\x00@\tD\x00@\x0fD\x00\x00\x11D\x00\xc0\x12D\x00@\x14D\x00\x00\xe0@\x00\x00\xe0A\x00\x00\x04B\x00\x00\x14B\x00\x00LB\x00\x00\x80B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xceB\x00\x00\xe6B\x00\x00\xf0B\x00\x00\xfeB\x00\x00\x0bC\x00\x00\x10C\x00\x00;C\x00\x00IC\x00\x00_C\x00\x00mC\x00\x00uC\x00\x80\x8cC\x00\x80\x93C\x00\x80\x98C\x00\x80\xa0C\x00\x80\xa1C\x00\x80\xa5C\x00\x80\xa8C\x00\x00\xabC\x00\x00\xadC\x00\x80\xbbC\x00\x00\xbcC\x00\x00\xc1C\x00\x00\xd4C\x00\x00\xdcC\x00\x80\xe1C\x00\x00\xedC\x00\x80\xf7C\x00\x00\x01D\x00\x00\x03D\x00@\x04D\x00\x00\x0fD\x00\x00PB\x00\x00\\B\x00\x00\x84B\x00\x00\xaaB\x00\x00\xb2B\x00\x00\xc8B\x00\x00\xfcB\x00\x00\x03C\x00\x00\x0eC\x00\x00\x17C\x00\x00(C\x00\x00*C\x00\x00.C\x00\x009C\x00\x00CC\x00\x00xC\x00\x80\x83C\x00\x80\x89C\x00\x80\x8bC\x00\x00\x9dC\x00\x80\x9dC\x00\x80\x9eC\x00\x00\xa0C\x00\x00\xaaC\x00\x00\xb3C\x00\x00\xbfC\x00\x80\xc8C\x00\x80\xcfC\x00\x00\xd5C\x00\x00\xd7C\x00\x80\xecC\x00\x00\xf9C\x00\x00\xfdC\x00\x80\x02D\x00@\x03D\x00\xc0\x05D\x00@\x07D\x00\x80\x07D\x00\xc0\x08D\x00\x80\x14D\x00\x00\xc0@\x00\x00PA\x00\x00@B\x00\x00TB\x00\x00XB\x00\x00\x82B\x00\x00\x9cB\x00\x00\xa2B\x00\x00\xacB\x00\x00\xcaB\x00\x00\xf6B\x00\x00\x07C\x00\x00\nC\x00\x00-C\x00\x00MC\x00\x00YC\x00\x00vC\x00\x00yC\x00\x80\x80C\x00\x80\x8fC\x00\x80\x94C\x00\x80\x9bC\x00\x80\xb0C\x00\x80\xb2C\x00\x80\xbeC\x00\x80\xc5C\x00\x80\xcdC\x00\x00\xd2C\x00\x80\xd5C\x00\x80\xd8C\x00\x00\xe5C\x00\x80\xe6C\x00\x80\xf8C\x00\xc0\x02D\x00\xc0\x04D\x00\xc0\nD\x00\xc0\x0bD\x00\xc0\x0fD\x00@\x12D\x00\xc0\x13D\x00\x00\x00@\x00\x00\xa8A\x00\x00\x18B\x00\x00\x8eB\x00\x00\xb6B\x00\x00\xccB\x00\x00\xd0B\x00\x00\xe2B\x00\x00%C\x00\x00&C\x00\x006C\x00\x00>C\x00\x00WC\x00\x80\x82C\x00\x00\x88C\x00\x00\x89C\x00\x80\x8eC\x00\x00\x9bC\x00\x80\xa2C\x00\x00\xa6C\x00\x00\xb0C\x00\x00\xb8C\x00\x00\xbdC\x00\x00\xc5C\x00\x00\xcfC\x00\x80\xd0C\x00\x80\xe2C\x00\x80\xe3C\x00\x80\xe7C\x00\x00\xecC\x00\x80\xfcC\x00\x00\x08D\x00\x00\nD\x00@\x0cD\x00\x80\x0cD\x00@\rD\x00\x80\rD\x00\xc0\x10D\x00@\x11D\x00\x00\x13D'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp57
(dp58
S'isNumeric'
p59
(dp60
g47
I01
sg55
I01
ssS'trials'
p61
g35
sS'dataTypes'
p62
(lp63
g47
ag55
asS'dataShape'
p64
(lp65
I15
aI40
asbsS'method'
p66
S'fullRandom'
p67
sS'sequenceIndices'
p68
cnumpy.core.multiarray
_reconstruct
p69
(g50
(I0
tS'b'
tRp70
(I1
(I15
I40
tg53
(S'O4'
I0
I1
tRp71
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp72
I10
aI5
aI9
aI9
aI0
aI1
aI5
aI9
aI11
aI13
aI8
aI14
aI4
aI12
aI5
aI1
aI3
aI8
aI0
aI14
aI4
aI12
aI6
aI9
aI1
aI11
aI5
aI9
aI13
aI10
aI3
aI4
aI0
aI11
aI8
aI12
aI1
aI13
aI3
aI13
aI4
aI5
aI7
aI10
aI7
aI1
aI14
aI10
aI5
aI8
aI12
aI14
aI3
aI3
aI8
aI2
aI3
aI8
aI9
aI7
aI6
aI9
aI11
aI11
aI1
aI11
aI3
aI2
aI1
aI6
aI11
aI3
aI3
aI3
aI8
aI2
aI12
aI4
aI9
aI8
aI14
aI2
aI10
aI8
aI4
aI5
aI11
aI7
aI3
aI3
aI2
aI7
aI14
aI9
aI7
aI9
aI2
aI13
aI14
aI13
aI4
aI12
aI14
aI4
aI9
aI1
aI10
aI7
aI9
aI3
aI2
aI4
aI9
aI13
aI1
aI1
aI12
aI7
aI11
aI10
aI4
aI0
aI11
aI13
aI0
aI13
aI11
aI3
aI13
aI13
aI7
aI12
aI2
aI4
aI9
aI5
aI5
aI4
aI5
aI7
aI8
aI5
aI3
aI1
aI3
aI14
aI7
aI5
aI8
aI8
aI14
aI8
aI2
aI12
aI2
aI6
aI1
aI3
aI10
aI14
aI2
aI1
aI5
aI7
aI11
aI10
aI8
aI4
aI9
aI11
aI5
aI1
aI8
aI0
aI10
aI6
aI0
aI3
aI14
aI6
aI3
aI0
aI6
aI6
aI5
aI6
aI14
aI6
aI11
aI10
aI0
aI6
aI7
aI8
aI5
aI11
aI14
aI13
aI2
aI3
aI9
aI4
aI7
aI5
aI13
aI0
aI4
aI6
aI1
aI1
aI8
aI12
aI12
aI0
aI14
aI10
aI11
aI6
aI12
aI10
aI11
aI12
aI2
aI9
aI0
aI10
aI13
aI9
aI10
aI11
aI14
aI3
aI9
aI0
aI3
aI0
aI10
aI0
aI13
aI0
aI13
aI14
aI9
aI11
aI12
aI13
aI4
aI10
aI12
aI9
aI10
aI5
aI8
aI11
aI10
aI3
aI13
aI14
aI5
aI7
aI0
aI11
aI5
aI2
aI7
aI13
aI1
aI13
aI12
aI4
aI9
aI6
aI4
aI3
aI11
aI13
aI0
aI14
aI8
aI13
aI11
aI0
aI11
aI12
aI5
aI1
aI8
aI7
aI11
aI12
aI7
aI4
aI11
aI1
aI13
aI5
aI7
aI0
aI4
aI9
aI5
aI3
aI11
aI14
aI5
aI12
aI0
aI2
aI13
aI2
aI1
aI14
aI5
aI8
aI5
aI7
aI12
aI14
aI6
aI8
aI10
aI7
aI14
aI13
aI2
aI10
aI10
aI14
aI6
aI9
aI3
aI13
aI1
aI9
aI7
aI10
aI12
aI12
aI8
aI0
aI10
aI11
aI8
aI13
aI14
aI9
aI4
aI2
aI7
aI10
aI13
aI12
aI8
aI1
aI6
aI6
aI2
aI2
aI3
aI10
aI4
aI2
aI9
aI13
aI1
aI8
aI1
aI4
aI8
aI11
aI6
aI12
aI1
aI5
aI2
aI0
aI13
aI8
aI12
aI10
aI0
aI4
aI9
aI6
aI7
aI6
aI5
aI14
aI5
aI10
aI6
aI11
aI3
aI8
aI8
aI6
aI10
aI5
aI14
aI12
aI4
aI6
aI6
aI12
aI2
aI12
aI12
aI11
aI5
aI10
aI2
aI10
aI14
aI13
aI8
aI0
aI2
aI2
aI10
aI11
aI14
aI14
aI12
aI10
aI5
aI5
aI2
aI12
aI12
aI7
aI10
aI7
aI4
aI14
aI7
aI12
aI1
aI14
aI10
aI9
aI1
aI3
aI9
aI2
aI14
aI13
aI13
aI4
aI12
aI7
aI3
aI6
aI10
aI4
aI5
aI7
aI2
aI1
aI11
aI0
aI13
aI6
aI2
aI1
aI3
aI11
aI12
aI4
aI0
aI7
aI13
aI6
aI3
aI12
aI1
aI9
aI5
aI14
aI14
aI2
aI1
aI4
aI10
aI1
aI7
aI2
aI14
aI5
aI9
aI4
aI3
aI4
aI4
aI6
aI6
aI11
aI4
aI2
aI9
aI13
aI6
aI6
aI11
aI13
aI1
aI4
aI9
aI14
aI0
aI7
aI7
aI3
aI2
aI7
aI12
aI1
aI14
aI8
aI7
aI1
aI13
aI11
aI7
aI0
aI3
aI0
aI11
aI5
aI3
aI3
aI8
aI0
aI7
aI8
aI11
aI1
aI3
aI5
aI2
aI6
aI1
aI6
aI10
aI12
aI6
aI9
aI10
aI1
aI13
aI4
aI14
aI0
aI0
aI4
aI13
aI9
aI8
aI2
aI7
aI5
aI6
aI0
aI0
aI1
aI9
aI12
aI14
aI8
aI2
aI10
aI0
aI4
aI0
aI6
aI9
aI6
aI6
aI8
aI6
aI8
aI12
aI3
aI0
aI8
aI7
aI3
aI8
aI4
aI1
aI0
aI2
aI9
aI2
aI0
aI11
aI7
aI2
aI5
aI4
aI9
atbsS'finished'
p73
I00
sS'nReps'
p74
I40
sS'nRemaining'
p75
I0
sS'trialList'
p76
(lp77
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
asS'seed'
p78
NsS'thisIndex'
p79
I9
sS'thisN'
p80
I599
sS'thisTrialN'
p81
I14
sS'nTotal'
p82
I600
sS'_warnUseOfNext'
p83
I01
sbasS'saveWideText'
p84
I01
sS'thisEntry'
p85
(dp86
sS'version'
p87
S''
sS'_paramNamesSoFar'
p88
(lp89
sS'entries'
p90
(lp91
(dp92
g16
(lp93
S'd'
asS'.thisTrial'
p94
I10
sS'.thisRepN'
p95
I0
sg30
VF
sg31
V
sS'.thisTrialN'
p96
I0
sS'.thisN'
p97
I0
sS'.thisIndex'
p98
I10
sg15
(lp99
S'd'
asg17
S'Y'
sg14
I1
sa(dp100
g16
(lp101
S'd'
asg94
I4
sS'.thisRepN'
p102
I0
sg30
VF
sg31
V
sS'.thisTrialN'
p103
I1
sS'.thisN'
p104
I1
sS'.thisIndex'
p105
I4
sg15
(lp106
S'k'
asg17
S'N'
sg14
I1
sa(dp107
g16
(lp108
S'd'
asg18
S'N'
sS'.thisRepN'
p109
I0
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p110
I2
sS'.thisN'
p111
I2
sS'.thisIndex'
p112
I14
sg15
(lp113
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg94
I14
sa(dp114
g16
(lp115
S'k'
asg18
S'N'
sS'.thisRepN'
p116
I0
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p117
I3
sS'.thisN'
p118
I3
sS'.thisIndex'
p119
I4
sg15
(lp120
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg94
I4
sa(dp121
g16
(lp122
S'd'
asg18
S'Y'
sS'.thisRepN'
p123
I0
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p124
I4
sS'.thisN'
p125
I4
sS'.thisIndex'
p126
I2
sg15
(lp127
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp128
S'space'
p129
asg94
I2
sa(dp130
g16
(lp131
S'd'
asg18
S'N'
sS'.thisRepN'
p132
I0
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p133
I5
sS'.thisN'
p134
I5
sS'.thisIndex'
p135
I9
sg15
(lp136
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg94
I9
sa(dp137
g16
(lp138
S'k'
asg18
S'Y'
sS'.thisRepN'
p139
I0
sg20
S'N'
sg31
V
sS'.thisTrialN'
p140
I6
sS'.thisN'
p141
I6
sS'.thisIndex'
p142
I13
sg15
(lp143
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg94
I13
sa(dp144
g16
(lp145
S'd'
asg18
S'N'
sS'.thisRepN'
p146
I0
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p147
I7
sS'.thisN'
p148
I7
sS'.thisIndex'
p149
I11
sg15
(lp150
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg94
I11
sa(dp151
g16
(lp152
S'k'
asg18
S'Y'
sS'.thisRepN'
p153
I0
sg20
S'N'
sg31
V
sS'.thisTrialN'
p154
I8
sS'.thisN'
p155
I8
sS'.thisIndex'
p156
I10
sg15
(lp157
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg94
I10
sa(dp158
g16
(lp159
S'd'
asg18
S'Y'
sS'.thisRepN'
p160
I0
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p161
I9
sS'.thisN'
p162
I9
sS'.thisIndex'
p163
I4
sg15
(lp164
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp165
S'space'
p166
asg94
I4
sa(dp167
g16
(lp168
S'd'
asg18
S'Y'
sS'.thisRepN'
p169
I0
sg20
S'N'
sg31
V
sS'.thisTrialN'
p170
I10
sS'.thisN'
p171
I10
sS'.thisIndex'
p172
I4
sg15
(lp173
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg94
I4
sa(dp174
g16
(lp175
S'k'
asg18
S'N'
sS'.thisRepN'
p176
I0
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p177
I11
sS'.thisN'
p178
I11
sS'.thisIndex'
p179
I1
sg15
(lp180
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg94
I1
sa(dp181
g16
(lp182
S'k'
asg18
S'Y'
sS'.thisRepN'
p183
I0
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p184
I12
sS'.thisN'
p185
I12
sS'.thisIndex'
p186
I1
sg15
(lp187
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp188
S'space'
p189
asg94
I1
sa(dp190
g16
(lp191
S'd'
asg18
S'Y'
sS'.thisRepN'
p192
I0
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p193
I13
sS'.thisN'
p194
I13
sS'.thisIndex'
p195
I13
sg15
(lp196
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp197
S'space'
p198
asg94
I13
sa(dp199
g16
(lp200
S'd'
asg18
S'N'
sS'.thisRepN'
p201
I0
sg20
S'N'
sg31
V
sS'.thisTrialN'
p202
I14
sS'.thisN'
p203
I14
sS'.thisIndex'
p204
I6
sg15
(lp205
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp206
S'space'
p207
asg94
I6
sa(dp208
g16
(lp209
S'd'
asg18
S'Y'
sS'.thisRepN'
p210
I1
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p211
I0
sS'.thisN'
p212
I15
sS'.thisIndex'
p213
I5
sg15
(lp214
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp215
S'space'
p216
asg94
I5
sa(dp217
g16
(lp218
S'k'
asg18
S'Y'
sS'.thisRepN'
p219
I1
sg20
S'N'
sg31
V
sS'.thisTrialN'
p220
I1
sS'.thisN'
p221
I16
sS'.thisIndex'
p222
I5
sg15
(lp223
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg94
I5
sa(dp224
g16
(lp225
S'k'
asg18
S'N'
sS'.thisRepN'
p226
I1
sg20
S'N'
sg31
V
sS'.thisTrialN'
p227
I2
sS'.thisN'
p228
I17
sS'.thisIndex'
p229
I2
sg15
(lp230
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp231
S'k'
asg94
I2
sa(dp232
g16
(lp233
S'k'
asg18
S'N'
sS'.thisRepN'
p234
I1
sg20
S'N'
sg31
V
sS'.thisTrialN'
p235
I3
sS'.thisN'
p236
I18
sS'.thisIndex'
p237
I0
sg15
(lp238
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp239
S'space'
p240
asg94
I0
sa(dp241
g16
(lp242
S'k'
asg18
S'Y'
sS'.thisRepN'
p243
I1
sg20
S'N'
sg31
V
sS'.thisTrialN'
p244
I4
sS'.thisN'
p245
I19
sS'.thisIndex'
p246
I1
sg15
(lp247
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg94
I1
sa(dp248
g16
(lp249
S'k'
asg18
S'N'
sS'.thisRepN'
p250
I1
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p251
I5
sS'.thisN'
p252
I20
sS'.thisIndex'
p253
I4
sg15
(lp254
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg94
I4
sa(dp255
g16
(lp256
S'k'
asg18
S'Y'
sS'.thisRepN'
p257
I1
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p258
I6
sS'.thisN'
p259
I21
sS'.thisIndex'
p260
I14
sg15
(lp261
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp262
S'space'
p263
asg94
I14
sa(dp264
g16
(lp265
S'd'
asg18
S'Y'
sS'.thisRepN'
p266
I1
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p267
I7
sS'.thisN'
p268
I22
sS'.thisIndex'
p269
I0
sg15
(lp270
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp271
S'space'
p272
asg94
I0
sa(dp273
g16
(lp274
S'k'
asg18
S'N'
sS'.thisRepN'
p275
I1
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p276
I8
sS'.thisN'
p277
I23
sS'.thisIndex'
p278
I7
sg15
(lp279
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg94
I7
sa(dp280
g16
(lp281
S'd'
asg18
S'N'
sS'.thisRepN'
p282
I1
sg20
S'N'
sg31
V
sS'.thisTrialN'
p283
I9
sS'.thisN'
p284
I24
sS'.thisIndex'
p285
I2
sg15
(lp286
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp287
S'space'
p288
asg94
I2
sa(dp289
g16
(lp290
S'd'
asg18
S'Y'
sS'.thisRepN'
p291
I1
sg20
S'N'
sg31
V
sS'.thisTrialN'
p292
I10
sS'.thisN'
p293
I25
sS'.thisIndex'
p294
I6
sg15
(lp295
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg94
I6
sa(dp296
g16
(lp297
S'k'
asg18
S'Y'
sS'.thisRepN'
p298
I1
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p299
I11
sS'.thisN'
p300
I26
sS'.thisIndex'
p301
I3
sg15
(lp302
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
(lp303
S'space'
p304
asg94
I3
sa(dp305
g16
(lp306
S'd'
asg18
S'N'
sS'.thisRepN'
p307
I1
sg20
S'N'
sg31
V
sS'.thisTrialN'
p308
I12
sS'.thisN'
p309
I27
sS'.thisIndex'
p310
I4
sg15
(lp311
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp312
S'space'
p313
asg94
I4
sa(dp314
g16
(lp315
S'd'
asg18
S'Y'
sS'.thisRepN'
p316
I1
sg20
S'N'
sg31
V
sS'.thisTrialN'
p317
I13
sS'.thisN'
p318
I28
sS'.thisIndex'
p319
I11
sg15
(lp320
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg94
I11
sa(dp321
g16
(lp322
S'k'
asg18
S'N'
sS'.thisRepN'
p323
I1
sg20
S'N'
sg31
V
sS'.thisTrialN'
p324
I14
sS'.thisN'
p325
I29
sS'.thisIndex'
p326
I0
sg15
(lp327
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp328
S'space'
p329
asg94
I0
sa(dp330
g16
(lp331
S'k'
asg18
S'Y'
sS'.thisRepN'
p332
I2
sg20
S'N'
sg31
V
sS'.thisTrialN'
p333
I0
sS'.thisN'
p334
I30
sS'.thisIndex'
p335
I9
sg15
(lp336
S'd'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg94
I9
sa(dp337
g16
(lp338
S'k'
asg18
S'N'
sS'.thisRepN'
p339
I2
sg20
S'N'
sg31
V
sS'.thisTrialN'
p340
I1
sS'.thisN'
p341
I31
sS'.thisIndex'
p342
I7
sg15
(lp343
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp344
S'space'
p345
asg94
I7
sa(dp346
g16
(lp347
S'd'
asg18
S'Y'
sS'.thisRepN'
p348
I2
sg20
S'N'
sg31
V
sS'.thisTrialN'
p349
I2
sS'.thisN'
p350
I32
sS'.thisIndex'
p351
I10
sg15
(lp352
S'k'
asg30
VF
sg17
S'N'
sg14
I1
sg19
Nsg94
I10
sa(dp353
g16
(lp354
S'd'
asg18
S'Y'
sS'.thisRepN'
p355
I2
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p356
I3
sS'.thisN'
p357
I33
sS'.thisIndex'
p358
I11
sg15
(lp359
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp360
S'space'
p361
asg94
I11
sa(dp362
g16
(lp363
S'k'
asg18
S'N'
sS'.thisRepN'
p364
I2
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p365
I4
sS'.thisN'
p366
I34
sS'.thisIndex'
p367
I5
sg15
(lp368
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg94
I5
sa(dp369
g16
(lp370
S'k'
asg18
S'Y'
sS'.thisRepN'
p371
I2
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p372
I5
sS'.thisN'
p373
I35
sS'.thisIndex'
p374
I7
sg15
(lp375
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp376
S'space'
p377
asg94
I7
sa(dp378
g16
(lp379
S'd'
asg18
S'N'
sS'.thisRepN'
p380
I2
sg20
S'N'
sg31
V
sS'.thisTrialN'
p381
I6
sS'.thisN'
p382
I36
sS'.thisIndex'
p383
I9
sg15
(lp384
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp385
S'space'
p386
asg94
I9
sa(dp387
g16
(lp388
S'd'
asg18
S'Y'
sS'.thisRepN'
p389
I2
sg20
S'N'
sg31
V
sS'.thisTrialN'
p390
I7
sS'.thisN'
p391
I37
sS'.thisIndex'
p392
I11
sg15
(lp393
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg94
I11
sa(dp394
g16
(lp395
S'k'
asg18
S'Y'
sS'.thisRepN'
p396
I2
sg20
S'N'
sg31
V
sS'.thisTrialN'
p397
I8
sS'.thisN'
p398
I38
sS'.thisIndex'
p399
I14
sg15
(lp400
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg94
I14
sa(dp401
g16
(lp402
S'k'
asg18
S'N'
sS'.thisRepN'
p403
I2
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p404
I9
sS'.thisN'
p405
I39
sS'.thisIndex'
p406
I9
sg15
(lp407
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg94
I9
sa(dp408
g16
(lp409
S'k'
asg18
S'Y'
sS'.thisRepN'
p410
I2
sg20
S'N'
sg31
V
sS'.thisTrialN'
p411
I10
sS'.thisN'
p412
I40
sS'.thisIndex'
p413
I6
sg15
(lp414
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg94
I6
sa(dp415
g16
(lp416
S'd'
asg18
S'N'
sS'.thisRepN'
p417
I2
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p418
I11
sS'.thisN'
p419
I41
sS'.thisIndex'
p420
I9
sg15
(lp421
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg94
I9
sa(dp422
g16
(lp423
S'd'
asg18
S'N'
sS'.thisRepN'
p424
I2
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p425
I12
sS'.thisN'
p426
I42
sS'.thisIndex'
p427
I10
sg15
(lp428
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg94
I10
sa(dp429
g16
(lp430
S'k'
asg18
S'Y'
sS'.thisRepN'
p431
I2
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p432
I13
sS'.thisN'
p433
I43
sS'.thisIndex'
p434
I7
sg15
(lp435
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp436
S'space'
p437
asg94
I7
sa(dp438
g16
(lp439
S'k'
asg18
S'Y'
sS'.thisRepN'
p440
I2
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p441
I14
sS'.thisN'
p442
I44
sS'.thisIndex'
p443
I0
sg15
(lp444
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp445
S'space'
p446
asg94
I0
sa(dp447
g16
(lp448
S'd'
asg18
S'Y'
sS'.thisRepN'
p449
I3
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p450
I0
sS'.thisN'
p451
I45
sS'.thisIndex'
p452
I9
sg15
(lp453
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
(lp454
S'space'
p455
asg94
I9
sa(dp456
g16
(lp457
S'k'
asg18
S'N'
sS'.thisRepN'
p458
I3
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p459
I1
sS'.thisN'
p460
I46
sS'.thisIndex'
p461
I10
sg15
(lp462
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg94
I10
sa(dp463
g16
(lp464
S'k'
asg18
S'N'
sS'.thisRepN'
p465
I3
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p466
I2
sS'.thisN'
p467
I47
sS'.thisIndex'
p468
I8
sg15
(lp469
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg94
I8
sa(dp470
g16
(lp471
S'd'
asg18
S'N'
sS'.thisRepN'
p472
I3
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p473
I3
sS'.thisN'
p474
I48
sS'.thisIndex'
p475
I13
sg15
(lp476
S'd'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg94
I13
sa(dp477
g16
(lp478
S'k'
asg18
S'N'
sg22
I28
sS'.thisN'
p479
I49
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p480
I4
sS'.thisRepN'
p481
I3
sg21
I36
sS'.thisIndex'
p482
I7
sg23
I25
sg15
(lp483
S'k'
asg30
VF
sg17
S'Y'
sg14
I1
sg19
Nsg94
I7
sa(dp484
g16
(lp485
S'k'
asg94
I5
sS'.thisRepN'
p486
I3
sg30
VF
sg31
V
sS'.thisTrialN'
p487
I5
sS'.thisN'
p488
I50
sS'.thisIndex'
p489
I5
sg15
(lp490
S'd'
asg17
S'N'
sg14
I2
sa(dp491
g16
(lp492
S'd'
asg94
I11
sS'.thisRepN'
p493
I3
sg30
VF
sg31
V
sS'.thisTrialN'
p494
I6
sS'.thisN'
p495
I51
sS'.thisIndex'
p496
I11
sg15
(lp497
S'k'
asg17
S'N'
sg14
I2
sa(dp498
g16
(lp499
S'd'
asg18
S'N'
sS'.thisRepN'
p500
I3
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p501
I7
sS'.thisN'
p502
I52
sS'.thisIndex'
p503
I12
sg15
(lp504
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg94
I12
sa(dp505
g16
(lp506
S'd'
asg18
S'N'
sS'.thisRepN'
p507
I3
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p508
I8
sS'.thisN'
p509
I53
sS'.thisIndex'
p510
I13
sg15
(lp511
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg94
I13
sa(dp512
g16
(lp513
S'k'
asg18
S'N'
sS'.thisRepN'
p514
I3
sg20
S'N'
sg31
V
sS'.thisTrialN'
p515
I9
sS'.thisN'
p516
I54
sS'.thisIndex'
p517
I13
sg15
(lp518
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp519
S'space'
p520
asg94
I13
sa(dp521
g16
(lp522
S'k'
asg18
S'Y'
sS'.thisRepN'
p523
I3
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p524
I10
sS'.thisN'
p525
I55
sS'.thisIndex'
p526
I12
sg15
(lp527
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp528
S'space'
p529
asg94
I12
sa(dp530
g16
(lp531
S'd'
asg18
S'N'
sS'.thisRepN'
p532
I3
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p533
I11
sS'.thisN'
p534
I56
sS'.thisIndex'
p535
I2
sg15
(lp536
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg94
I2
sa(dp537
g16
(lp538
S'd'
asg18
S'Y'
sS'.thisRepN'
p539
I3
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p540
I12
sS'.thisN'
p541
I57
sS'.thisIndex'
p542
I1
sg15
(lp543
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
(lp544
S'space'
p545
asg94
I1
sa(dp546
g16
(lp547
S'd'
asg18
S'Y'
sS'.thisRepN'
p548
I3
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p549
I13
sS'.thisN'
p550
I58
sS'.thisIndex'
p551
I0
sg15
(lp552
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp553
S'space'
p554
asg94
I0
sa(dp555
g16
(lp556
S'd'
asg18
S'N'
sS'.thisRepN'
p557
I3
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p558
I14
sS'.thisN'
p559
I59
sS'.thisIndex'
p560
I1
sg15
(lp561
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg94
I1
sa(dp562
g16
(lp563
S'd'
asg18
S'Y'
sS'.thisRepN'
p564
I4
sg20
S'N'
sg31
V
sS'.thisTrialN'
p565
I0
sS'.thisN'
p566
I60
sS'.thisIndex'
p567
I0
sg15
(lp568
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg94
I0
sa(dp569
g16
(lp570
S'k'
asg18
S'Y'
sS'.thisRepN'
p571
I4
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p572
I1
sS'.thisN'
p573
I61
sS'.thisIndex'
p574
I7
sg15
(lp575
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp576
S'space'
p577
asg94
I7
sa(dp578
g16
(lp579
S'k'
asg18
S'Y'
sS'.thisRepN'
p580
I4
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p581
I2
sS'.thisN'
p582
I62
sS'.thisIndex'
p583
I4
sg15
(lp584
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp585
S'space'
p586
asg94
I4
sa(dp587
g16
(lp588
S'k'
asg18
S'Y'
sS'.thisRepN'
p589
I4
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p590
I3
sS'.thisN'
p591
I63
sS'.thisIndex'
p592
I0
sg15
(lp593
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp594
S'space'
p595
asg94
I0
sa(dp596
g16
(lp597
S'd'
asg18
S'Y'
sS'.thisRepN'
p598
I4
sg20
S'N'
sg31
V
sS'.thisTrialN'
p599
I4
sS'.thisN'
p600
I64
sS'.thisIndex'
p601
I11
sg15
(lp602
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg94
I11
sa(dp603
g16
(lp604
S'k'
asg18
S'Y'
sS'.thisRepN'
p605
I4
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p606
I5
sS'.thisN'
p607
I65
sS'.thisIndex'
p608
I13
sg15
(lp609
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp610
S'space'
p611
asg94
I13
sa(dp612
g16
(lp613
S'd'
asg18
S'Y'
sS'.thisRepN'
p614
I4
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p615
I6
sS'.thisN'
p616
I66
sS'.thisIndex'
p617
I12
sg15
(lp618
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp619
S'space'
p620
asg94
I12
sa(dp621
g16
(lp622
S'd'
asg18
S'Y'
sS'.thisRepN'
p623
I4
sg20
S'N'
sg31
V
sS'.thisTrialN'
p624
I7
sS'.thisN'
p625
I67
sS'.thisIndex'
p626
I5
sg15
(lp627
S'k'
asg30
VF
sg17
S'N'
sg14
I2
sg19
Nsg94
I5
sa(dp628
g16
(lp629
S'k'
asg18
S'Y'
sS'.thisRepN'
p630
I4
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p631
I8
sS'.thisN'
p632
I68
sS'.thisIndex'
p633
I2
sg15
(lp634
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp635
S'space'
p636
asg94
I2
sa(dp637
g16
(lp638
S'k'
asg18
S'Y'
sS'.thisRepN'
p639
I4
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p640
I9
sS'.thisN'
p641
I69
sS'.thisIndex'
p642
I1
sg15
(lp643
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp644
S'space'
p645
asg94
I1
sa(dp646
g16
(lp647
S'd'
asg18
S'Y'
sS'.thisRepN'
p648
I4
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p649
I10
sS'.thisN'
p650
I70
sS'.thisIndex'
p651
I2
sg15
(lp652
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp653
S'space'
p654
asg94
I2
sa(dp655
g16
(lp656
S'k'
asg18
S'N'
sS'.thisRepN'
p657
I4
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p658
I11
sS'.thisN'
p659
I71
sS'.thisIndex'
p660
I14
sg15
(lp661
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg94
I14
sa(dp662
g16
(lp663
S'd'
asg18
S'N'
sS'.thisRepN'
p664
I4
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p665
I12
sS'.thisN'
p666
I72
sS'.thisIndex'
p667
I7
sg15
(lp668
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg94
I7
sa(dp669
g16
(lp670
S'd'
asg18
S'N'
sS'.thisRepN'
p671
I4
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p672
I13
sS'.thisN'
p673
I73
sS'.thisIndex'
p674
I3
sg15
(lp675
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg94
I3
sa(dp676
g16
(lp677
S'k'
asg18
S'N'
sS'.thisRepN'
p678
I4
sg20
S'N'
sg31
V
sS'.thisTrialN'
p679
I14
sS'.thisN'
p680
I74
sS'.thisIndex'
p681
I9
sg15
(lp682
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp683
S'space'
p684
asg94
I9
sa(dp685
g16
(lp686
S'd'
asg18
S'N'
sS'.thisRepN'
p687
I5
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p688
I0
sS'.thisN'
p689
I75
sS'.thisIndex'
p690
I1
sg15
(lp691
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg94
I1
sa(dp692
g16
(lp693
S'k'
asg18
S'N'
sS'.thisRepN'
p694
I5
sg20
S'N'
sg31
V
sS'.thisTrialN'
p695
I1
sS'.thisN'
p696
I76
sS'.thisIndex'
p697
I1
sg15
(lp698
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp699
S'space'
p700
asg94
I1
sa(dp701
g16
(lp702
S'd'
asg18
S'Y'
sS'.thisRepN'
p703
I5
sg20
S'N'
sg31
V
sS'.thisTrialN'
p704
I2
sS'.thisN'
p705
I77
sS'.thisIndex'
p706
I5
sg15
(lp707
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg94
I5
sa(dp708
g16
(lp709
S'k'
asg18
S'Y'
sS'.thisRepN'
p710
I5
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p711
I3
sS'.thisN'
p712
I78
sS'.thisIndex'
p713
I13
sg15
(lp714
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp715
S'space'
p716
asg94
I13
sa(dp717
g16
(lp718
S'd'
asg18
S'N'
sS'.thisRepN'
p719
I5
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p720
I4
sS'.thisN'
p721
I79
sS'.thisIndex'
p722
I10
sg15
(lp723
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg94
I10
sa(dp724
g16
(lp725
S'k'
asg18
S'Y'
sS'.thisRepN'
p726
I5
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p727
I5
sS'.thisN'
p728
I80
sS'.thisIndex'
p729
I0
sg15
(lp730
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp731
S'space'
p732
asg94
I0
sa(dp733
g16
(lp734
S'k'
asg18
S'N'
sS'.thisRepN'
p735
I5
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p736
I6
sS'.thisN'
p737
I81
sS'.thisIndex'
p738
I13
sg15
(lp739
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg94
I13
sa(dp740
g16
(lp741
S'd'
asg18
S'Y'
sS'.thisRepN'
p742
I5
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p743
I7
sS'.thisN'
p744
I82
sS'.thisIndex'
p745
I1
sg15
(lp746
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp747
S'space'
p748
asg94
I1
sa(dp749
g16
(lp750
S'k'
asg18
S'N'
sS'.thisRepN'
p751
I5
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p752
I8
sS'.thisN'
p753
I83
sS'.thisIndex'
p754
I10
sg15
(lp755
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg94
I10
sa(dp756
g16
(lp757
S'd'
asg18
S'Y'
sS'.thisRepN'
p758
I5
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p759
I9
sS'.thisN'
p760
I84
sS'.thisIndex'
p761
I8
sg15
(lp762
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp763
S'space'
p764
asg94
I8
sa(dp765
g16
(lp766
S'k'
asg18
S'Y'
sS'.thisRepN'
p767
I5
sg20
S'N'
sg31
V
sS'.thisTrialN'
p768
I10
sS'.thisN'
p769
I85
sS'.thisIndex'
p770
I12
sg15
(lp771
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg94
I12
sa(dp772
g16
(lp773
S'd'
asg18
S'N'
sS'.thisRepN'
p774
I5
sg20
S'N'
sg31
V
sS'.thisTrialN'
p775
I11
sS'.thisN'
p776
I86
sS'.thisIndex'
p777
I13
sg15
(lp778
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp779
S'space'
p780
asg94
I13
sa(dp781
g16
(lp782
S'd'
asg18
S'Y'
sS'.thisRepN'
p783
I5
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p784
I12
sS'.thisN'
p785
I87
sS'.thisIndex'
p786
I2
sg15
(lp787
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp788
S'space'
p789
asg94
I2
sa(dp790
g16
(lp791
S'k'
asg18
S'Y'
sS'.thisRepN'
p792
I5
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p793
I13
sS'.thisN'
p794
I88
sS'.thisIndex'
p795
I0
sg15
(lp796
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp797
S'space'
p798
asg94
I0
sa(dp799
g16
(lp800
S'd'
asg18
S'N'
sS'.thisRepN'
p801
I5
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p802
I14
sS'.thisN'
p803
I89
sS'.thisIndex'
p804
I12
sg15
(lp805
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg94
I12
sa(dp806
g16
(lp807
S'k'
asg18
S'Y'
sS'.thisRepN'
p808
I6
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p809
I0
sS'.thisN'
p810
I90
sS'.thisIndex'
p811
I5
sg15
(lp812
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp813
S'space'
p814
asg94
I5
sa(dp815
g16
(lp816
S'd'
asg18
S'N'
sS'.thisRepN'
p817
I6
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p818
I1
sS'.thisN'
p819
I91
sS'.thisIndex'
p820
I14
sg15
(lp821
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg94
I14
sa(dp822
g16
(lp823
S'k'
asg18
S'Y'
sS'.thisRepN'
p824
I6
sg20
S'N'
sg31
V
sS'.thisTrialN'
p825
I2
sS'.thisN'
p826
I92
sS'.thisIndex'
p827
I11
sg15
(lp828
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg94
I11
sa(dp829
g16
(lp830
S'd'
asg18
S'Y'
sS'.thisRepN'
p831
I6
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p832
I3
sS'.thisN'
p833
I93
sS'.thisIndex'
p834
I11
sg15
(lp835
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp836
S'space'
p837
asg94
I11
sa(dp838
g16
(lp839
S'k'
asg18
S'N'
sS'.thisRepN'
p840
I6
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p841
I4
sS'.thisN'
p842
I94
sS'.thisIndex'
p843
I8
sg15
(lp844
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg94
I8
sa(dp845
g16
(lp846
S'd'
asg18
S'N'
sS'.thisRepN'
p847
I6
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p848
I5
sS'.thisN'
p849
I95
sS'.thisIndex'
p850
I4
sg15
(lp851
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg94
I4
sa(dp852
g16
(lp853
S'd'
asg18
S'N'
sS'.thisRepN'
p854
I6
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p855
I6
sS'.thisN'
p856
I96
sS'.thisIndex'
p857
I4
sg15
(lp858
S'd'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg94
I4
sa(dp859
g16
(lp860
S'k'
asg18
S'N'
sS'.thisRepN'
p861
I6
sg20
S'N'
sg31
V
sS'.thisTrialN'
p862
I7
sS'.thisN'
p863
I97
sS'.thisIndex'
p864
I8
sg15
(lp865
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
(lp866
S'space'
p867
asg94
I8
sa(dp868
g16
(lp869
S'k'
asg18
S'N'
sS'.thisRepN'
p870
I6
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p871
I8
sS'.thisN'
p872
I98
sS'.thisIndex'
p873
I10
sg15
(lp874
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg94
I10
sa(dp875
g16
(lp876
S'k'
asg18
S'N'
sg22
I37
sS'.thisN'
p877
I99
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p878
I9
sS'.thisRepN'
p879
I6
sg21
I46
sS'.thisIndex'
p880
I1
sg23
I25
sg15
(lp881
S'k'
asg30
VF
sg17
S'Y'
sg14
I2
sg19
Nsg94
I1
sa(dp882
g16
(lp883
S'd'
asg94
I12
sS'.thisRepN'
p884
I6
sg30
VF
sg31
V
sS'.thisTrialN'
p885
I10
sS'.thisN'
p886
I100
sS'.thisIndex'
p887
I12
sg15
(lp888
S'd'
asg17
S'Y'
sg14
I3
sa(dp889
g16
(lp890
S'd'
asg94
I13
sS'.thisRepN'
p891
I6
sg30
VF
sg31
V
sS'.thisTrialN'
p892
I11
sS'.thisN'
p893
I101
sS'.thisIndex'
p894
I13
sg15
(lp895
S'd'
asg17
S'Y'
sg14
I3
sa(dp896
g16
(lp897
S'k'
asg18
S'N'
sS'.thisRepN'
p898
I6
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p899
I12
sS'.thisN'
p900
I102
sS'.thisIndex'
p901
I14
sg15
(lp902
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg94
I14
sa(dp903
g16
(lp904
S'k'
asg18
S'N'
sS'.thisRepN'
p905
I6
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p906
I13
sS'.thisN'
p907
I103
sS'.thisIndex'
p908
I11
sg15
(lp909
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I11
sa(dp910
g16
(lp911
S'd'
asg18
S'N'
sS'.thisRepN'
p912
I6
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p913
I14
sS'.thisN'
p914
I104
sS'.thisIndex'
p915
I14
sg15
(lp916
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I14
sa(dp917
g16
(lp918
S'd'
asg18
S'Y'
sS'.thisRepN'
p919
I7
sg20
S'N'
sg31
V
sS'.thisTrialN'
p920
I0
sS'.thisN'
p921
I105
sS'.thisIndex'
p922
I9
sg15
(lp923
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I9
sa(dp924
g16
(lp925
S'k'
asg18
S'N'
sS'.thisRepN'
p926
I7
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p927
I1
sS'.thisN'
p928
I106
sS'.thisIndex'
p929
I10
sg15
(lp930
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I10
sa(dp931
g16
(lp932
S'k'
asg18
S'N'
sS'.thisRepN'
p933
I7
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p934
I2
sS'.thisN'
p935
I107
sS'.thisIndex'
p936
I7
sg15
(lp937
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I7
sa(dp938
g16
(lp939
S'd'
asg18
S'N'
sS'.thisRepN'
p940
I7
sg20
S'N'
sg31
V
sS'.thisTrialN'
p941
I3
sS'.thisN'
p942
I108
sS'.thisIndex'
p943
I3
sg15
(lp944
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp945
S'space'
p946
asg94
I3
sa(dp947
g16
(lp948
S'k'
asg18
S'Y'
sS'.thisRepN'
p949
I7
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p950
I4
sS'.thisN'
p951
I109
sS'.thisIndex'
p952
I4
sg15
(lp953
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp954
S'space'
p955
asg94
I4
sa(dp956
g16
(lp957
S'k'
asg18
S'Y'
sS'.thisRepN'
p958
I7
sg20
S'N'
sg31
V
sS'.thisTrialN'
p959
I5
sS'.thisN'
p960
I110
sS'.thisIndex'
p961
I6
sg15
(lp962
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I6
sa(dp963
g16
(lp964
S'd'
asg18
S'Y'
sS'.thisRepN'
p965
I7
sg20
S'N'
sg31
V
sS'.thisTrialN'
p966
I6
sS'.thisN'
p967
I111
sS'.thisIndex'
p968
I10
sg15
(lp969
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I10
sa(dp970
g16
(lp971
S'k'
asg18
S'Y'
sS'.thisRepN'
p972
I7
sg20
S'N'
sg31
V
sS'.thisTrialN'
p973
I7
sS'.thisN'
p974
I112
sS'.thisIndex'
p975
I7
sg15
(lp976
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I7
sa(dp977
g16
(lp978
S'd'
asg18
S'N'
sS'.thisRepN'
p979
I7
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p980
I8
sS'.thisN'
p981
I113
sS'.thisIndex'
p982
I14
sg15
(lp983
S'k'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg94
I14
sa(dp984
g16
(lp985
S'd'
asg18
S'Y'
sS'.thisRepN'
p986
I7
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p987
I9
sS'.thisN'
p988
I114
sS'.thisIndex'
p989
I4
sg15
(lp990
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp991
S'space'
p992
asg94
I4
sa(dp993
g16
(lp994
S'k'
asg18
S'N'
sS'.thisRepN'
p995
I7
sg20
S'N'
sg31
V
sS'.thisTrialN'
p996
I10
sS'.thisN'
p997
I115
sS'.thisIndex'
p998
I11
sg15
(lp999
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1000
S'space'
p1001
asg94
I11
sa(dp1002
g16
(lp1003
S'k'
asg18
S'N'
sS'.thisRepN'
p1004
I7
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1005
I11
sS'.thisN'
p1006
I116
sS'.thisIndex'
p1007
I4
sg15
(lp1008
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I4
sa(dp1009
g16
(lp1010
S'd'
asg18
S'N'
sS'.thisRepN'
p1011
I7
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1012
I12
sS'.thisN'
p1013
I117
sS'.thisIndex'
p1014
I5
sg15
(lp1015
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I5
sa(dp1016
g16
(lp1017
S'd'
asg18
S'N'
sS'.thisRepN'
p1018
I7
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1019
I13
sS'.thisN'
p1020
I118
sS'.thisIndex'
p1021
I5
sg15
(lp1022
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I5
sa(dp1023
g16
(lp1024
S'd'
asg18
S'Y'
sS'.thisRepN'
p1025
I7
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1026
I14
sS'.thisN'
p1027
I119
sS'.thisIndex'
p1028
I8
sg15
(lp1029
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I8
sa(dp1030
g16
(lp1031
S'd'
asg18
S'N'
sS'.thisRepN'
p1032
I8
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1033
I0
sS'.thisN'
p1034
I120
sS'.thisIndex'
p1035
I11
sg15
(lp1036
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1037
S'space'
p1038
asg94
I11
sa(dp1039
g16
(lp1040
S'd'
asg18
S'N'
sS'.thisRepN'
p1041
I8
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1042
I1
sS'.thisN'
p1043
I121
sS'.thisIndex'
p1044
I5
sg15
(lp1045
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I5
sa(dp1046
g16
(lp1047
S'd'
asg18
S'N'
sS'.thisRepN'
p1048
I8
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1049
I2
sS'.thisN'
p1050
I122
sS'.thisIndex'
p1051
I3
sg15
(lp1052
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I3
sa(dp1053
g16
(lp1054
S'k'
asg18
S'N'
sS'.thisRepN'
p1055
I8
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1056
I3
sS'.thisN'
p1057
I123
sS'.thisIndex'
p1058
I13
sg15
(lp1059
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I13
sa(dp1060
g16
(lp1061
S'd'
asg18
S'Y'
sS'.thisRepN'
p1062
I8
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1063
I4
sS'.thisN'
p1064
I124
sS'.thisIndex'
p1065
I9
sg15
(lp1066
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1067
S'space'
p1068
asg94
I9
sa(dp1069
g16
(lp1070
S'k'
asg18
S'Y'
sS'.thisRepN'
p1071
I8
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1072
I5
sS'.thisN'
p1073
I125
sS'.thisIndex'
p1074
I1
sg15
(lp1075
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg94
I1
sa(dp1076
g16
(lp1077
S'd'
asg18
S'N'
sS'.thisRepN'
p1078
I8
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1079
I6
sS'.thisN'
p1080
I126
sS'.thisIndex'
p1081
I12
sg15
(lp1082
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1083
S'space'
p1084
asg94
I12
sa(dp1085
g16
(lp1086
S'd'
asg18
S'N'
sS'.thisRepN'
p1087
I8
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1088
I7
sS'.thisN'
p1089
I127
sS'.thisIndex'
p1090
I11
sg15
(lp1091
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I11
sa(dp1092
g16
(lp1093
S'k'
asg18
S'Y'
sS'.thisRepN'
p1094
I8
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1095
I8
sS'.thisN'
p1096
I128
sS'.thisIndex'
p1097
I6
sg15
(lp1098
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I6
sa(dp1099
g16
(lp1100
S'd'
asg18
S'Y'
sS'.thisRepN'
p1101
I8
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1102
I9
sS'.thisN'
p1103
I129
sS'.thisIndex'
p1104
I8
sg15
(lp1105
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1106
S'space'
p1107
asg94
I8
sa(dp1108
g16
(lp1109
S'k'
asg18
S'N'
sS'.thisRepN'
p1110
I8
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1111
I10
sS'.thisN'
p1112
I130
sS'.thisIndex'
p1113
I5
sg15
(lp1114
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I5
sa(dp1115
g16
(lp1116
S'k'
asg18
S'Y'
sS'.thisRepN'
p1117
I8
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1118
I11
sS'.thisN'
p1119
I131
sS'.thisIndex'
p1120
I12
sg15
(lp1121
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I12
sa(dp1122
g16
(lp1123
S'k'
asg18
S'Y'
sS'.thisRepN'
p1124
I8
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1125
I12
sS'.thisN'
p1126
I132
sS'.thisIndex'
p1127
I9
sg15
(lp1128
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I9
sa(dp1129
g16
(lp1130
S'd'
asg18
S'Y'
sS'.thisRepN'
p1131
I8
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1132
I13
sS'.thisN'
p1133
I133
sS'.thisIndex'
p1134
I3
sg15
(lp1135
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1136
S'd'
asg94
I3
sa(dp1137
g16
(lp1138
S'k'
asg18
S'N'
sS'.thisRepN'
p1139
I8
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1140
I14
sS'.thisN'
p1141
I134
sS'.thisIndex'
p1142
I2
sg15
(lp1143
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I2
sa(dp1144
g16
(lp1145
S'k'
asg18
S'Y'
sS'.thisRepN'
p1146
I9
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1147
I0
sS'.thisN'
p1148
I135
sS'.thisIndex'
p1149
I13
sg15
(lp1150
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I13
sa(dp1151
g16
(lp1152
S'k'
asg18
S'Y'
sS'.thisRepN'
p1153
I9
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1154
I1
sS'.thisN'
p1155
I136
sS'.thisIndex'
p1156
I8
sg15
(lp1157
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I8
sa(dp1158
g16
(lp1159
S'd'
asg18
S'N'
sS'.thisRepN'
p1160
I9
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1161
I2
sS'.thisN'
p1162
I137
sS'.thisIndex'
p1163
I3
sg15
(lp1164
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I3
sa(dp1165
g16
(lp1166
S'k'
asg18
S'Y'
sS'.thisRepN'
p1167
I9
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1168
I3
sS'.thisN'
p1169
I138
sS'.thisIndex'
p1170
I13
sg15
(lp1171
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I13
sa(dp1172
g16
(lp1173
S'k'
asg18
S'Y'
sS'.thisRepN'
p1174
I9
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1175
I4
sS'.thisN'
p1176
I139
sS'.thisIndex'
p1177
I11
sg15
(lp1178
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1179
S'space'
p1180
asg94
I11
sa(dp1181
g16
(lp1182
S'd'
asg18
S'N'
sS'.thisRepN'
p1183
I9
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1184
I5
sS'.thisN'
p1185
I140
sS'.thisIndex'
p1186
I1
sg15
(lp1187
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I1
sa(dp1188
g16
(lp1189
S'k'
asg18
S'Y'
sS'.thisRepN'
p1190
I9
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1191
I6
sS'.thisN'
p1192
I141
sS'.thisIndex'
p1193
I9
sg15
(lp1194
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1195
S'space'
p1196
asg94
I9
sa(dp1197
g16
(lp1198
S'k'
asg18
S'N'
sS'.thisRepN'
p1199
I9
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1200
I7
sS'.thisN'
p1201
I142
sS'.thisIndex'
p1202
I12
sg15
(lp1203
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I12
sa(dp1204
g16
(lp1205
S'd'
asg18
S'Y'
sS'.thisRepN'
p1206
I9
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1207
I8
sS'.thisN'
p1208
I143
sS'.thisIndex'
p1209
I9
sg15
(lp1210
S'd'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1211
S'space'
p1212
asg94
I9
sa(dp1213
g16
(lp1214
S'k'
asg18
S'Y'
sS'.thisRepN'
p1215
I9
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1216
I9
sS'.thisN'
p1217
I144
sS'.thisIndex'
p1218
I11
sg15
(lp1219
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I11
sa(dp1220
g16
(lp1221
S'k'
asg18
S'Y'
sS'.thisRepN'
p1222
I9
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1223
I10
sS'.thisN'
p1224
I145
sS'.thisIndex'
p1225
I10
sg15
(lp1226
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
(lp1227
S'space'
p1228
asg94
I10
sa(dp1229
g16
(lp1230
S'k'
asg18
S'N'
sS'.thisRepN'
p1231
I9
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1232
I11
sS'.thisN'
p1233
I146
sS'.thisIndex'
p1234
I7
sg15
(lp1235
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I7
sa(dp1236
g16
(lp1237
S'k'
asg18
S'N'
sS'.thisRepN'
p1238
I9
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1239
I12
sS'.thisN'
p1240
I147
sS'.thisIndex'
p1241
I4
sg15
(lp1242
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I4
sa(dp1243
g16
(lp1244
S'k'
asg18
S'N'
sS'.thisRepN'
p1245
I9
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1246
I13
sS'.thisN'
p1247
I148
sS'.thisIndex'
p1248
I3
sg15
(lp1249
S'd'
asg30
VF
sg17
S'N'
sg14
I3
sg19
Nsg94
I3
sa(dp1250
g16
(lp1251
S'k'
asg18
S'N'
sg22
I30
sS'.thisN'
p1252
I149
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1253
I14
sS'.thisRepN'
p1254
I9
sg21
I46
sS'.thisIndex'
p1255
I10
sg23
I22
sg15
(lp1256
S'k'
asg30
VF
sg17
S'Y'
sg14
I3
sg19
Nsg94
I10
sa(dp1257
g16
(lp1258
S'k'
asg94
I8
sS'.thisRepN'
p1259
I10
sg30
VF
sg31
V
sS'.thisTrialN'
p1260
I0
sS'.thisN'
p1261
I150
sS'.thisIndex'
p1262
I8
sg15
(lp1263
S'k'
asg17
S'Y'
sg14
I4
sa(dp1264
g16
(lp1265
S'k'
asg94
I12
sS'.thisRepN'
p1266
I10
sg30
VF
sg31
V
sS'.thisTrialN'
p1267
I1
sS'.thisN'
p1268
I151
sS'.thisIndex'
p1269
I12
sg15
(lp1270
S'k'
asg17
S'Y'
sg14
I4
sa(dp1271
g16
(lp1272
S'd'
asg18
S'N'
sS'.thisRepN'
p1273
I10
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1274
I2
sS'.thisN'
p1275
I152
sS'.thisIndex'
p1276
I2
sg15
(lp1277
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I2
sa(dp1278
g16
(lp1279
S'k'
asg18
S'Y'
sS'.thisRepN'
p1280
I10
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1281
I3
sS'.thisN'
p1282
I153
sS'.thisIndex'
p1283
I7
sg15
(lp1284
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1285
S'space'
p1286
asg94
I7
sa(dp1287
g16
(lp1288
S'd'
asg18
S'N'
sS'.thisRepN'
p1289
I10
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1290
I4
sS'.thisN'
p1291
I154
sS'.thisIndex'
p1292
I5
sg15
(lp1293
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I5
sa(dp1294
g16
(lp1295
S'k'
asg18
S'N'
sS'.thisRepN'
p1296
I10
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1297
I5
sS'.thisN'
p1298
I155
sS'.thisIndex'
p1299
I8
sg15
(lp1300
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I8
sa(dp1301
g16
(lp1302
S'k'
asg18
S'N'
sS'.thisRepN'
p1303
I10
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1304
I6
sS'.thisN'
p1305
I156
sS'.thisIndex'
p1306
I10
sg15
(lp1307
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I10
sa(dp1308
g16
(lp1309
S'd'
asg18
S'Y'
sS'.thisRepN'
p1310
I10
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1311
I7
sS'.thisN'
p1312
I157
sS'.thisIndex'
p1313
I7
sg15
(lp1314
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I7
sa(dp1315
g16
(lp1316
S'k'
asg18
S'N'
sS'.thisRepN'
p1317
I10
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1318
I8
sS'.thisN'
p1319
I158
sS'.thisIndex'
p1320
I3
sg15
(lp1321
S'd'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg94
I3
sa(dp1322
g16
(lp1323
S'k'
asg18
S'Y'
sS'.thisRepN'
p1324
I10
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1325
I9
sS'.thisN'
p1326
I159
sS'.thisIndex'
p1327
I6
sg15
(lp1328
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1329
S'k'
asg94
I6
sa(dp1330
g16
(lp1331
S'k'
asg18
S'Y'
sS'.thisRepN'
p1332
I10
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1333
I10
sS'.thisN'
p1334
I160
sS'.thisIndex'
p1335
I2
sg15
(lp1336
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I2
sa(dp1337
g16
(lp1338
S'k'
asg18
S'N'
sS'.thisRepN'
p1339
I10
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1340
I11
sS'.thisN'
p1341
I161
sS'.thisIndex'
p1342
I3
sg15
(lp1343
S'd'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg94
I3
sa(dp1344
g16
(lp1345
S'k'
asg18
S'Y'
sS'.thisRepN'
p1346
I10
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1347
I12
sS'.thisN'
p1348
I162
sS'.thisIndex'
p1349
I3
sg15
(lp1350
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I3
sa(dp1351
g16
(lp1352
S'k'
asg18
S'N'
sS'.thisRepN'
p1353
I10
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1354
I13
sS'.thisN'
p1355
I163
sS'.thisIndex'
p1356
I8
sg15
(lp1357
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1358
S'space'
p1359
asg94
I8
sa(dp1360
g16
(lp1361
S'k'
asg18
S'N'
sS'.thisRepN'
p1362
I10
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1363
I14
sS'.thisN'
p1364
I164
sS'.thisIndex'
p1365
I0
sg15
(lp1366
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I0
sa(dp1367
g16
(lp1368
S'd'
asg18
S'Y'
sS'.thisRepN'
p1369
I11
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1370
I0
sS'.thisN'
p1371
I165
sS'.thisIndex'
p1372
I14
sg15
(lp1373
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1374
S'space'
p1375
asg94
I14
sa(dp1376
g16
(lp1377
S'd'
asg18
S'Y'
sS'.thisRepN'
p1378
I11
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1379
I1
sS'.thisN'
p1380
I166
sS'.thisIndex'
p1381
I14
sg15
(lp1382
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I14
sa(dp1383
g16
(lp1384
S'k'
asg18
S'Y'
sS'.thisRepN'
p1385
I11
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1386
I2
sS'.thisN'
p1387
I167
sS'.thisIndex'
p1388
I7
sg15
(lp1389
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I7
sa(dp1390
g16
(lp1391
S'k'
asg18
S'N'
sS'.thisRepN'
p1392
I11
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1393
I3
sS'.thisN'
p1394
I168
sS'.thisIndex'
p1395
I12
sg15
(lp1396
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I12
sa(dp1397
g16
(lp1398
S'k'
asg18
S'N'
sS'.thisRepN'
p1399
I11
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1400
I4
sS'.thisN'
p1401
I169
sS'.thisIndex'
p1402
I1
sg15
(lp1403
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I1
sa(dp1404
g16
(lp1405
S'k'
asg18
S'N'
sS'.thisRepN'
p1406
I11
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1407
I5
sS'.thisN'
p1408
I170
sS'.thisIndex'
p1409
I12
sg15
(lp1410
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I12
sa(dp1411
g16
(lp1412
S'k'
asg18
S'Y'
sS'.thisRepN'
p1413
I11
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1414
I6
sS'.thisN'
p1415
I171
sS'.thisIndex'
p1416
I5
sg15
(lp1417
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I5
sa(dp1418
g16
(lp1419
S'd'
asg18
S'N'
sS'.thisRepN'
p1420
I11
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1421
I7
sS'.thisN'
p1422
I172
sS'.thisIndex'
p1423
I4
sg15
(lp1424
S'k'
asg30
VF
sg17
S'N'
sg14
I4
sg19
Nsg94
I4
sa(dp1425
g16
(lp1426
S'd'
asg18
S'Y'
sS'.thisRepN'
p1427
I11
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1428
I8
sS'.thisN'
p1429
I173
sS'.thisIndex'
p1430
I13
sg15
(lp1431
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I13
sa(dp1432
g16
(lp1433
S'd'
asg18
S'Y'
sS'.thisRepN'
p1434
I11
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1435
I9
sS'.thisN'
p1436
I174
sS'.thisIndex'
p1437
I12
sg15
(lp1438
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I12
sa(dp1439
g16
(lp1440
S'd'
asg18
S'N'
sS'.thisRepN'
p1441
I11
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1442
I10
sS'.thisN'
p1443
I175
sS'.thisIndex'
p1444
I10
sg15
(lp1445
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I10
sa(dp1446
g16
(lp1447
S'k'
asg18
S'N'
sS'.thisRepN'
p1448
I11
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1449
I11
sS'.thisN'
p1450
I176
sS'.thisIndex'
p1451
I6
sg15
(lp1452
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I6
sa(dp1453
g16
(lp1454
S'd'
asg18
S'N'
sS'.thisRepN'
p1455
I11
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1456
I12
sS'.thisN'
p1457
I177
sS'.thisIndex'
p1458
I4
sg15
(lp1459
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I4
sa(dp1460
g16
(lp1461
S'd'
asg18
S'Y'
sS'.thisRepN'
p1462
I11
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1463
I13
sS'.thisN'
p1464
I178
sS'.thisIndex'
p1465
I0
sg15
(lp1466
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1467
S'space'
p1468
asg94
I0
sa(dp1469
g16
(lp1470
S'k'
asg18
S'N'
sS'.thisRepN'
p1471
I11
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1472
I14
sS'.thisN'
p1473
I179
sS'.thisIndex'
p1474
I4
sg15
(lp1475
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I4
sa(dp1476
g16
(lp1477
S'd'
asg18
S'N'
sS'.thisRepN'
p1478
I12
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1479
I0
sS'.thisN'
p1480
I180
sS'.thisIndex'
p1481
I4
sg15
(lp1482
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I4
sa(dp1483
g16
(lp1484
S'k'
asg18
S'N'
sS'.thisRepN'
p1485
I12
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1486
I1
sS'.thisN'
p1487
I181
sS'.thisIndex'
p1488
I3
sg15
(lp1489
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I3
sa(dp1490
g16
(lp1491
S'k'
asg18
S'N'
sS'.thisRepN'
p1492
I12
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1493
I2
sS'.thisN'
p1494
I182
sS'.thisIndex'
p1495
I14
sg15
(lp1496
S'd'
asg30
VF
sg17
S'N'
sg14
I4
sg19
(lp1497
S'space'
p1498
asg94
I14
sa(dp1499
g16
(lp1500
S'd'
asg18
S'Y'
sS'.thisRepN'
p1501
I12
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1502
I3
sS'.thisN'
p1503
I183
sS'.thisIndex'
p1504
I2
sg15
(lp1505
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I2
sa(dp1506
g16
(lp1507
S'd'
asg18
S'N'
sS'.thisRepN'
p1508
I12
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1509
I4
sS'.thisN'
p1510
I184
sS'.thisIndex'
p1511
I8
sg15
(lp1512
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I8
sa(dp1513
g16
(lp1514
S'k'
asg18
S'N'
sS'.thisRepN'
p1515
I12
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1516
I5
sS'.thisN'
p1517
I185
sS'.thisIndex'
p1518
I12
sg15
(lp1519
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I12
sa(dp1520
g16
(lp1521
S'k'
asg18
S'Y'
sS'.thisRepN'
p1522
I12
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1523
I6
sS'.thisN'
p1524
I186
sS'.thisIndex'
p1525
I8
sg15
(lp1526
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1527
S'space'
p1528
asg94
I8
sa(dp1529
g16
(lp1530
S'd'
asg18
S'N'
sS'.thisRepN'
p1531
I12
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1532
I7
sS'.thisN'
p1533
I187
sS'.thisIndex'
p1534
I11
sg15
(lp1535
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I11
sa(dp1536
g16
(lp1537
S'k'
asg18
S'N'
sS'.thisRepN'
p1538
I12
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1539
I8
sS'.thisN'
p1540
I188
sS'.thisIndex'
p1541
I1
sg15
(lp1542
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I1
sa(dp1543
g16
(lp1544
S'd'
asg18
S'Y'
sS'.thisRepN'
p1545
I12
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1546
I9
sS'.thisN'
p1547
I189
sS'.thisIndex'
p1548
I1
sg15
(lp1549
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1550
S'space'
p1551
asg94
I1
sa(dp1552
g16
(lp1553
S'k'
asg18
S'N'
sS'.thisRepN'
p1554
I12
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1555
I10
sS'.thisN'
p1556
I190
sS'.thisIndex'
p1557
I14
sg15
(lp1558
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1559
S'space'
p1560
asg94
I14
sa(dp1561
g16
(lp1562
S'd'
asg18
S'Y'
sS'.thisRepN'
p1563
I12
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1564
I11
sS'.thisN'
p1565
I191
sS'.thisIndex'
p1566
I10
sg15
(lp1567
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1568
S'space'
p1569
asg94
I10
sa(dp1570
g16
(lp1571
S'k'
asg18
S'N'
sS'.thisRepN'
p1572
I12
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1573
I12
sS'.thisN'
p1574
I192
sS'.thisIndex'
p1575
I4
sg15
(lp1576
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I4
sa(dp1577
g16
(lp1578
S'k'
asg18
S'N'
sS'.thisRepN'
p1579
I12
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1580
I13
sS'.thisN'
p1581
I193
sS'.thisIndex'
p1582
I7
sg15
(lp1583
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I7
sa(dp1584
g16
(lp1585
S'd'
asg18
S'Y'
sS'.thisRepN'
p1586
I12
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1587
I14
sS'.thisN'
p1588
I194
sS'.thisIndex'
p1589
I0
sg15
(lp1590
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1591
S'space'
p1592
asg94
I0
sa(dp1593
g16
(lp1594
S'd'
asg18
S'Y'
sS'.thisRepN'
p1595
I13
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1596
I0
sS'.thisN'
p1597
I195
sS'.thisIndex'
p1598
I12
sg15
(lp1599
S'd'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1600
S'space'
p1601
asg94
I12
sa(dp1602
g16
(lp1603
S'k'
asg18
S'Y'
sS'.thisRepN'
p1604
I13
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1605
I1
sS'.thisN'
p1606
I196
sS'.thisIndex'
p1607
I3
sg15
(lp1608
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I3
sa(dp1609
g16
(lp1610
S'k'
asg18
S'N'
sS'.thisRepN'
p1611
I13
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1612
I2
sS'.thisN'
p1613
I197
sS'.thisIndex'
p1614
I9
sg15
(lp1615
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
Nsg94
I9
sa(dp1616
g16
(lp1617
S'k'
asg18
S'Y'
sS'.thisRepN'
p1618
I13
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1619
I3
sS'.thisN'
p1620
I198
sS'.thisIndex'
p1621
I4
sg15
(lp1622
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1623
S'space'
p1624
asg94
I4
sa(dp1625
g16
(lp1626
S'k'
asg18
S'N'
sg22
I33
sS'.thisN'
p1627
I199
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1628
I4
sS'.thisRepN'
p1629
I13
sg21
I46
sS'.thisIndex'
p1630
I0
sg23
I20
sg15
(lp1631
S'k'
asg30
VF
sg17
S'Y'
sg14
I4
sg19
(lp1632
S'space'
p1633
asg94
I0
sa(dp1634
g16
(lp1635
S'k'
asg94
I0
sS'.thisRepN'
p1636
I13
sg30
VF
sg31
V
sS'.thisTrialN'
p1637
I5
sS'.thisN'
p1638
I200
sS'.thisIndex'
p1639
I0
sg15
(lp1640
S'k'
asg17
S'Y'
sg14
I5
sa(dp1641
g16
(lp1642
S'd'
asg94
I11
sS'.thisRepN'
p1643
I13
sg30
VF
sg31
V
sS'.thisTrialN'
p1644
I6
sS'.thisN'
p1645
I201
sS'.thisIndex'
p1646
I11
sg15
(lp1647
S'd'
asg17
S'Y'
sg14
I5
sa(dp1648
g16
(lp1649
S'd'
asg18
S'N'
sS'.thisRepN'
p1650
I13
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1651
I7
sS'.thisN'
p1652
I202
sS'.thisIndex'
p1653
I1
sg15
(lp1654
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I1
sa(dp1655
g16
(lp1656
S'd'
asg18
S'Y'
sS'.thisRepN'
p1657
I13
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1658
I8
sS'.thisN'
p1659
I203
sS'.thisIndex'
p1660
I9
sg15
(lp1661
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1662
S'space'
p1663
asg94
I9
sa(dp1664
g16
(lp1665
S'k'
asg18
S'N'
sS'.thisRepN'
p1666
I13
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1667
I9
sS'.thisN'
p1668
I204
sS'.thisIndex'
p1669
I5
sg15
(lp1670
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I5
sa(dp1671
g16
(lp1672
S'd'
asg18
S'Y'
sS'.thisRepN'
p1673
I13
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1674
I10
sS'.thisN'
p1675
I205
sS'.thisIndex'
p1676
I13
sg15
(lp1677
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I13
sa(dp1678
g16
(lp1679
S'k'
asg18
S'N'
sS'.thisRepN'
p1680
I13
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1681
I11
sS'.thisN'
p1682
I206
sS'.thisIndex'
p1683
I4
sg15
(lp1684
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1685
S'space'
p1686
asg94
I4
sa(dp1687
g16
(lp1688
S'k'
asg18
S'Y'
sS'.thisRepN'
p1689
I13
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1690
I12
sS'.thisN'
p1691
I207
sS'.thisIndex'
p1692
I6
sg15
(lp1693
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1694
S'space'
p1695
asg94
I6
sa(dp1696
g16
(lp1697
S'k'
asg18
S'N'
sS'.thisRepN'
p1698
I13
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1699
I13
sS'.thisN'
p1700
I208
sS'.thisIndex'
p1701
I8
sg15
(lp1702
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg94
I8
sa(dp1703
g16
(lp1704
S'd'
asg18
S'N'
sS'.thisRepN'
p1705
I13
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1706
I14
sS'.thisN'
p1707
I209
sS'.thisIndex'
p1708
I6
sg15
(lp1709
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I6
sa(dp1710
g16
(lp1711
S'd'
asg18
S'N'
sS'.thisRepN'
p1712
I14
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1713
I0
sS'.thisN'
p1714
I210
sS'.thisIndex'
p1715
I5
sg15
(lp1716
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I5
sa(dp1717
g16
(lp1718
S'd'
asg18
S'Y'
sS'.thisRepN'
p1719
I14
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1720
I1
sS'.thisN'
p1721
I211
sS'.thisIndex'
p1722
I8
sg15
(lp1723
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp1724
S'space'
p1725
asg94
I8
sa(dp1726
g16
(lp1727
S'd'
asg18
S'Y'
sS'.thisRepN'
p1728
I14
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1729
I2
sS'.thisN'
p1730
I212
sS'.thisIndex'
p1731
I7
sg15
(lp1732
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I7
sa(dp1733
g16
(lp1734
S'k'
asg18
S'Y'
sS'.thisRepN'
p1735
I14
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1736
I3
sS'.thisN'
p1737
I213
sS'.thisIndex'
p1738
I9
sg15
(lp1739
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1740
S'space'
p1741
asg94
I9
sa(dp1742
g16
(lp1743
S'd'
asg18
S'N'
sS'.thisRepN'
p1744
I14
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1745
I4
sS'.thisN'
p1746
I214
sS'.thisIndex'
p1747
I10
sg15
(lp1748
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I10
sa(dp1749
g16
(lp1750
S'd'
asg18
S'Y'
sS'.thisRepN'
p1751
I14
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1752
I5
sS'.thisN'
p1753
I215
sS'.thisIndex'
p1754
I14
sg15
(lp1755
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1756
S'space'
p1757
asg94
I14
sa(dp1758
g16
(lp1759
S'k'
asg18
S'Y'
sS'.thisRepN'
p1760
I14
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1761
I6
sS'.thisN'
p1762
I216
sS'.thisIndex'
p1763
I10
sg15
(lp1764
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1765
S'space'
p1766
asg94
I10
sa(dp1767
g16
(lp1768
S'd'
asg18
S'Y'
sS'.thisRepN'
p1769
I14
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1770
I7
sS'.thisN'
p1771
I217
sS'.thisIndex'
p1772
I13
sg15
(lp1773
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I13
sa(dp1774
g16
(lp1775
S'k'
asg18
S'Y'
sS'.thisRepN'
p1776
I14
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1777
I8
sS'.thisN'
p1778
I218
sS'.thisIndex'
p1779
I7
sg15
(lp1780
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I7
sa(dp1781
g16
(lp1782
S'd'
asg18
S'N'
sS'.thisRepN'
p1783
I14
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1784
I9
sS'.thisN'
p1785
I219
sS'.thisIndex'
p1786
I2
sg15
(lp1787
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I2
sa(dp1788
g16
(lp1789
S'k'
asg18
S'Y'
sS'.thisRepN'
p1790
I14
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1791
I10
sS'.thisN'
p1792
I220
sS'.thisIndex'
p1793
I8
sg15
(lp1794
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1795
S'space'
p1796
asg94
I8
sa(dp1797
g16
(lp1798
S'k'
asg18
S'Y'
sS'.thisRepN'
p1799
I14
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1800
I11
sS'.thisN'
p1801
I221
sS'.thisIndex'
p1802
I5
sg15
(lp1803
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1804
S'space'
p1805
asg94
I5
sa(dp1806
g16
(lp1807
S'k'
asg18
S'N'
sS'.thisRepN'
p1808
I14
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1809
I12
sS'.thisN'
p1810
I222
sS'.thisIndex'
p1811
I6
sg15
(lp1812
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I6
sa(dp1813
g16
(lp1814
S'd'
asg18
S'Y'
sS'.thisRepN'
p1815
I14
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1816
I13
sS'.thisN'
p1817
I223
sS'.thisIndex'
p1818
I11
sg15
(lp1819
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1820
S'space'
p1821
asg94
I11
sa(dp1822
g16
(lp1823
S'k'
asg18
S'Y'
sS'.thisRepN'
p1824
I14
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1825
I14
sS'.thisN'
p1826
I224
sS'.thisIndex'
p1827
I9
sg15
(lp1828
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1829
S'space'
p1830
asg94
I9
sa(dp1831
g16
(lp1832
S'd'
asg18
S'N'
sS'.thisRepN'
p1833
I15
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1834
I0
sS'.thisN'
p1835
I225
sS'.thisIndex'
p1836
I1
sg15
(lp1837
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I1
sa(dp1838
g16
(lp1839
S'd'
asg18
S'N'
sS'.thisRepN'
p1840
I15
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1841
I1
sS'.thisN'
p1842
I226
sS'.thisIndex'
p1843
I2
sg15
(lp1844
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I2
sa(dp1845
g16
(lp1846
S'd'
asg18
S'N'
sS'.thisRepN'
p1847
I15
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1848
I2
sS'.thisN'
p1849
I227
sS'.thisIndex'
p1850
I9
sg15
(lp1851
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
Nsg94
I9
sa(dp1852
g16
(lp1853
S'k'
asg18
S'Y'
sS'.thisRepN'
p1854
I15
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1855
I3
sS'.thisN'
p1856
I228
sS'.thisIndex'
p1857
I5
sg15
(lp1858
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I5
sa(dp1859
g16
(lp1860
S'd'
asg18
S'N'
sS'.thisRepN'
p1861
I15
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1862
I4
sS'.thisN'
p1863
I229
sS'.thisIndex'
p1864
I6
sg15
(lp1865
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I6
sa(dp1866
g16
(lp1867
S'k'
asg18
S'N'
sS'.thisRepN'
p1868
I15
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1869
I5
sS'.thisN'
p1870
I230
sS'.thisIndex'
p1871
I10
sg15
(lp1872
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I10
sa(dp1873
g16
(lp1874
S'd'
asg18
S'Y'
sS'.thisRepN'
p1875
I15
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1876
I6
sS'.thisN'
p1877
I231
sS'.thisIndex'
p1878
I3
sg15
(lp1879
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1880
S'space'
p1881
asg94
I3
sa(dp1882
g16
(lp1883
S'd'
asg18
S'N'
sS'.thisRepN'
p1884
I15
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1885
I7
sS'.thisN'
p1886
I232
sS'.thisIndex'
p1887
I5
sg15
(lp1888
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I5
sa(dp1889
g16
(lp1890
S'd'
asg18
S'N'
sS'.thisRepN'
p1891
I15
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1892
I8
sS'.thisN'
p1893
I233
sS'.thisIndex'
p1894
I10
sg15
(lp1895
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I10
sa(dp1896
g16
(lp1897
S'd'
asg18
S'N'
sS'.thisRepN'
p1898
I15
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1899
I9
sS'.thisN'
p1900
I234
sS'.thisIndex'
p1901
I0
sg15
(lp1902
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I0
sa(dp1903
g16
(lp1904
S'd'
asg18
S'N'
sS'.thisRepN'
p1905
I15
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1906
I10
sS'.thisN'
p1907
I235
sS'.thisIndex'
p1908
I0
sg15
(lp1909
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I0
sa(dp1910
g16
(lp1911
S'd'
asg18
S'N'
sS'.thisRepN'
p1912
I15
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1913
I11
sS'.thisN'
p1914
I236
sS'.thisIndex'
p1915
I7
sg15
(lp1916
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I7
sa(dp1917
g16
(lp1918
S'k'
asg18
S'N'
sS'.thisRepN'
p1919
I15
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1920
I12
sS'.thisN'
p1921
I237
sS'.thisIndex'
p1922
I11
sg15
(lp1923
S'd'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp1924
S'space'
p1925
asg94
I11
sa(dp1926
g16
(lp1927
S'd'
asg18
S'N'
sS'.thisRepN'
p1928
I15
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1929
I13
sS'.thisN'
p1930
I238
sS'.thisIndex'
p1931
I1
sg15
(lp1932
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1933
S'space'
p1934
asg94
I1
sa(dp1935
g16
(lp1936
S'k'
asg18
S'N'
sS'.thisRepN'
p1937
I15
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1938
I14
sS'.thisN'
p1939
I239
sS'.thisIndex'
p1940
I6
sg15
(lp1941
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I6
sa(dp1942
g16
(lp1943
S'd'
asg18
S'N'
sS'.thisRepN'
p1944
I16
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1945
I0
sS'.thisN'
p1946
I240
sS'.thisIndex'
p1947
I3
sg15
(lp1948
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I3
sa(dp1949
g16
(lp1950
S'd'
asg18
S'N'
sS'.thisRepN'
p1951
I16
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1952
I1
sS'.thisN'
p1953
I241
sS'.thisIndex'
p1954
I3
sg15
(lp1955
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I3
sa(dp1956
g16
(lp1957
S'k'
asg18
S'Y'
sS'.thisRepN'
p1958
I16
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1959
I2
sS'.thisN'
p1960
I242
sS'.thisIndex'
p1961
I2
sg15
(lp1962
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1963
S'space'
p1964
asg94
I2
sa(dp1965
g16
(lp1966
S'd'
asg18
S'N'
sS'.thisRepN'
p1967
I16
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1968
I3
sS'.thisN'
p1969
I243
sS'.thisIndex'
p1970
I5
sg15
(lp1971
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I5
sa(dp1972
g16
(lp1973
S'k'
asg18
S'Y'
sS'.thisRepN'
p1974
I16
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p1975
I4
sS'.thisN'
p1976
I244
sS'.thisIndex'
p1977
I0
sg15
(lp1978
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1979
S'space'
p1980
asg94
I0
sa(dp1981
g16
(lp1982
S'd'
asg18
S'N'
sS'.thisRepN'
p1983
I16
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1984
I5
sS'.thisN'
p1985
I245
sS'.thisIndex'
p1986
I11
sg15
(lp1987
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
(lp1988
S'space'
p1989
asg94
I11
sa(dp1990
g16
(lp1991
S'd'
asg18
S'N'
sS'.thisRepN'
p1992
I16
sg20
S'N'
sg31
V
sS'.thisTrialN'
p1993
I6
sS'.thisN'
p1994
I246
sS'.thisIndex'
p1995
I13
sg15
(lp1996
S'k'
asg30
VF
sg17
S'N'
sg14
I5
sg19
(lp1997
S'space'
p1998
asg94
I13
sa(dp1999
g16
(lp2000
S'k'
asg18
S'N'
sS'.thisRepN'
p2001
I16
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2002
I7
sS'.thisN'
p2003
I247
sS'.thisIndex'
p2004
I7
sg15
(lp2005
S'k'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I7
sa(dp2006
g16
(lp2007
S'd'
asg18
S'N'
sS'.thisRepN'
p2008
I16
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2009
I8
sS'.thisN'
p2010
I248
sS'.thisIndex'
p2011
I12
sg15
(lp2012
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I12
sa(dp2013
g16
(lp2014
S'd'
asg18
S'N'
sg22
I38
sS'.thisN'
p2015
I249
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2016
I9
sS'.thisRepN'
p2017
I16
sg21
I45
sS'.thisIndex'
p2018
I13
sg23
I18
sg15
(lp2019
S'd'
asg30
VF
sg17
S'Y'
sg14
I5
sg19
Nsg94
I13
sa(dp2020
g16
(lp2021
S'd'
asg94
I2
sS'.thisRepN'
p2022
I16
sg30
VF
sg31
V
sS'.thisTrialN'
p2023
I10
sS'.thisN'
p2024
I250
sS'.thisIndex'
p2025
I2
sg15
(lp2026
S'd'
asg17
S'Y'
sg14
I6
sa(dp2027
g16
(lp2028
S'k'
asg94
I2
sS'.thisRepN'
p2029
I16
sg30
VF
sg31
V
sS'.thisTrialN'
p2030
I11
sS'.thisN'
p2031
I251
sS'.thisIndex'
p2032
I2
sg15
(lp2033
S'k'
asg17
S'Y'
sg14
I6
sa(dp2034
g16
(lp2035
S'k'
asg18
S'Y'
sS'.thisRepN'
p2036
I16
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2037
I12
sS'.thisN'
p2038
I252
sS'.thisIndex'
p2039
I4
sg15
(lp2040
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2041
S'space'
p2042
asg94
I4
sa(dp2043
g16
(lp2044
S'k'
asg18
S'N'
sS'.thisRepN'
p2045
I16
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2046
I13
sS'.thisN'
p2047
I253
sS'.thisIndex'
p2048
I3
sg15
(lp2049
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I3
sa(dp2050
g16
(lp2051
S'k'
asg18
S'Y'
sS'.thisRepN'
p2052
I16
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2053
I14
sS'.thisN'
p2054
I254
sS'.thisIndex'
p2055
I6
sg15
(lp2056
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2057
S'space'
p2058
asg94
I6
sa(dp2059
g16
(lp2060
S'k'
asg18
S'N'
sS'.thisRepN'
p2061
I17
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2062
I0
sS'.thisN'
p2063
I255
sS'.thisIndex'
p2064
I8
sg15
(lp2065
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I8
sa(dp2066
g16
(lp2067
S'd'
asg18
S'N'
sS'.thisRepN'
p2068
I17
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2069
I1
sS'.thisN'
p2070
I256
sS'.thisIndex'
p2071
I8
sg15
(lp2072
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I8
sa(dp2073
g16
(lp2074
S'd'
asg18
S'Y'
sS'.thisRepN'
p2075
I17
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2076
I2
sS'.thisN'
p2077
I257
sS'.thisIndex'
p2078
I13
sg15
(lp2079
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2080
S'space'
p2081
asg94
I13
sa(dp2082
g16
(lp2083
S'd'
asg18
S'N'
sS'.thisRepN'
p2084
I17
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2085
I3
sS'.thisN'
p2086
I258
sS'.thisIndex'
p2087
I4
sg15
(lp2088
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I4
sa(dp2089
g16
(lp2090
S'd'
asg18
S'N'
sS'.thisRepN'
p2091
I17
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2092
I4
sS'.thisN'
p2093
I259
sS'.thisIndex'
p2094
I3
sg15
(lp2095
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I3
sa(dp2096
g16
(lp2097
S'k'
asg18
S'N'
sS'.thisRepN'
p2098
I17
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2099
I5
sS'.thisN'
p2100
I260
sS'.thisIndex'
p2101
I6
sg15
(lp2102
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I6
sa(dp2103
g16
(lp2104
S'k'
asg18
S'Y'
sS'.thisRepN'
p2105
I17
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2106
I6
sS'.thisN'
p2107
I261
sS'.thisIndex'
p2108
I14
sg15
(lp2109
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2110
S'space'
p2111
asg94
I14
sa(dp2112
g16
(lp2113
S'k'
asg18
S'N'
sS'.thisRepN'
p2114
I17
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2115
I7
sS'.thisN'
p2116
I262
sS'.thisIndex'
p2117
I0
sg15
(lp2118
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I0
sa(dp2119
g16
(lp2120
S'd'
asg18
S'N'
sS'.thisRepN'
p2121
I17
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2122
I8
sS'.thisN'
p2123
I263
sS'.thisIndex'
p2124
I12
sg15
(lp2125
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I12
sa(dp2126
g16
(lp2127
S'k'
asg18
S'N'
sS'.thisRepN'
p2128
I17
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2129
I9
sS'.thisN'
p2130
I264
sS'.thisIndex'
p2131
I8
sg15
(lp2132
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I8
sa(dp2133
g16
(lp2134
S'k'
asg18
S'Y'
sS'.thisRepN'
p2135
I17
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2136
I10
sS'.thisN'
p2137
I265
sS'.thisIndex'
p2138
I2
sg15
(lp2139
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I2
sa(dp2140
g16
(lp2141
S'd'
asg18
S'Y'
sS'.thisRepN'
p2142
I17
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2143
I11
sS'.thisN'
p2144
I266
sS'.thisIndex'
p2145
I1
sg15
(lp2146
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2147
S'space'
p2148
asg94
I1
sa(dp2149
g16
(lp2150
S'd'
asg18
S'Y'
sS'.thisRepN'
p2151
I17
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2152
I12
sS'.thisN'
p2153
I267
sS'.thisIndex'
p2154
I2
sg15
(lp2155
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2156
S'space'
p2157
asg94
I2
sa(dp2158
g16
(lp2159
S'd'
asg18
S'Y'
sS'.thisRepN'
p2160
I17
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2161
I13
sS'.thisN'
p2162
I268
sS'.thisIndex'
p2163
I5
sg15
(lp2164
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2165
S'space'
p2166
asg94
I5
sa(dp2167
g16
(lp2168
S'd'
asg18
S'N'
sS'.thisRepN'
p2169
I17
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2170
I14
sS'.thisN'
p2171
I269
sS'.thisIndex'
p2172
I8
sg15
(lp2173
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I8
sa(dp2174
g16
(lp2175
S'k'
asg18
S'Y'
sS'.thisRepN'
p2176
I18
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2177
I0
sS'.thisN'
p2178
I270
sS'.thisIndex'
p2179
I0
sg15
(lp2180
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2181
S'space'
p2182
asg94
I0
sa(dp2183
g16
(lp2184
S'k'
asg18
S'Y'
sS'.thisRepN'
p2185
I18
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2186
I1
sS'.thisN'
p2187
I271
sS'.thisIndex'
p2188
I9
sg15
(lp2189
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
(lp2190
S'space'
p2191
asg94
I9
sa(dp2192
g16
(lp2193
S'k'
asg18
S'N'
sS'.thisRepN'
p2194
I18
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2195
I2
sS'.thisN'
p2196
I272
sS'.thisIndex'
p2197
I14
sg15
(lp2198
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I14
sa(dp2199
g16
(lp2200
S'd'
asg18
S'Y'
sS'.thisRepN'
p2201
I18
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2202
I3
sS'.thisN'
p2203
I273
sS'.thisIndex'
p2204
I5
sg15
(lp2205
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I5
sa(dp2206
g16
(lp2207
S'k'
asg18
S'Y'
sS'.thisRepN'
p2208
I18
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2209
I4
sS'.thisN'
p2210
I274
sS'.thisIndex'
p2211
I14
sg15
(lp2212
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I14
sa(dp2213
g16
(lp2214
S'd'
asg18
S'N'
sS'.thisRepN'
p2215
I18
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2216
I5
sS'.thisN'
p2217
I275
sS'.thisIndex'
p2218
I12
sg15
(lp2219
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I12
sa(dp2220
g16
(lp2221
S'd'
asg18
S'N'
sS'.thisRepN'
p2222
I18
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2223
I6
sS'.thisN'
p2224
I276
sS'.thisIndex'
p2225
I5
sg15
(lp2226
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I5
sa(dp2227
g16
(lp2228
S'd'
asg18
S'N'
sS'.thisRepN'
p2229
I18
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2230
I7
sS'.thisN'
p2231
I277
sS'.thisIndex'
p2232
I4
sg15
(lp2233
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I4
sa(dp2234
g16
(lp2235
S'd'
asg18
S'N'
sS'.thisRepN'
p2236
I18
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2237
I8
sS'.thisN'
p2238
I278
sS'.thisIndex'
p2239
I8
sg15
(lp2240
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2241
S'space'
p2242
asg94
I8
sa(dp2243
g16
(lp2244
S'k'
asg18
S'Y'
sS'.thisRepN'
p2245
I18
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2246
I9
sS'.thisN'
p2247
I279
sS'.thisIndex'
p2248
I12
sg15
(lp2249
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I12
sa(dp2250
g16
(lp2251
S'd'
asg18
S'N'
sS'.thisRepN'
p2252
I18
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2253
I10
sS'.thisN'
p2254
I280
sS'.thisIndex'
p2255
I10
sg15
(lp2256
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I10
sa(dp2257
g16
(lp2258
S'd'
asg18
S'Y'
sS'.thisRepN'
p2259
I18
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2260
I11
sS'.thisN'
p2261
I281
sS'.thisIndex'
p2262
I11
sg15
(lp2263
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I11
sa(dp2264
g16
(lp2265
S'k'
asg18
S'Y'
sS'.thisRepN'
p2266
I18
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2267
I12
sS'.thisN'
p2268
I282
sS'.thisIndex'
p2269
I9
sg15
(lp2270
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I9
sa(dp2271
g16
(lp2272
S'd'
asg18
S'Y'
sS'.thisRepN'
p2273
I18
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2274
I13
sS'.thisN'
p2275
I283
sS'.thisIndex'
p2276
I2
sg15
(lp2277
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I2
sa(dp2278
g16
(lp2279
S'k'
asg18
S'N'
sS'.thisRepN'
p2280
I18
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2281
I14
sS'.thisN'
p2282
I284
sS'.thisIndex'
p2283
I6
sg15
(lp2284
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I6
sa(dp2285
g16
(lp2286
S'k'
asg18
S'N'
sS'.thisRepN'
p2287
I19
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2288
I0
sS'.thisN'
p2289
I285
sS'.thisIndex'
p2290
I14
sg15
(lp2291
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I14
sa(dp2292
g16
(lp2293
S'k'
asg18
S'Y'
sS'.thisRepN'
p2294
I19
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2295
I1
sS'.thisN'
p2296
I286
sS'.thisIndex'
p2297
I7
sg15
(lp2298
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2299
S'space'
p2300
asg94
I7
sa(dp2301
g16
(lp2302
S'd'
asg18
S'Y'
sS'.thisRepN'
p2303
I19
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2304
I2
sS'.thisN'
p2305
I287
sS'.thisIndex'
p2306
I13
sg15
(lp2307
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I13
sa(dp2308
g16
(lp2309
S'k'
asg18
S'Y'
sS'.thisRepN'
p2310
I19
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2311
I3
sS'.thisN'
p2312
I288
sS'.thisIndex'
p2313
I7
sg15
(lp2314
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I7
sa(dp2315
g16
(lp2316
S'k'
asg18
S'Y'
sS'.thisRepN'
p2317
I19
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2318
I4
sS'.thisN'
p2319
I289
sS'.thisIndex'
p2320
I6
sg15
(lp2321
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I6
sa(dp2322
g16
(lp2323
S'd'
asg18
S'N'
sS'.thisRepN'
p2324
I19
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2325
I5
sS'.thisN'
p2326
I290
sS'.thisIndex'
p2327
I10
sg15
(lp2328
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I10
sa(dp2329
g16
(lp2330
S'd'
asg18
S'N'
sS'.thisRepN'
p2331
I19
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2332
I6
sS'.thisN'
p2333
I291
sS'.thisIndex'
p2334
I7
sg15
(lp2335
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
(lp2336
S'space'
p2337
asg94
I7
sa(dp2338
g16
(lp2339
S'k'
asg18
S'Y'
sS'.thisRepN'
p2340
I19
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2341
I7
sS'.thisN'
p2342
I292
sS'.thisIndex'
p2343
I9
sg15
(lp2344
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I9
sa(dp2345
g16
(lp2346
S'd'
asg18
S'N'
sS'.thisRepN'
p2347
I19
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2348
I8
sS'.thisN'
p2349
I293
sS'.thisIndex'
p2350
I0
sg15
(lp2351
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I0
sa(dp2352
g16
(lp2353
S'k'
asg18
S'N'
sS'.thisRepN'
p2354
I19
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2355
I9
sS'.thisN'
p2356
I294
sS'.thisIndex'
p2357
I10
sg15
(lp2358
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I10
sa(dp2359
g16
(lp2360
S'k'
asg18
S'N'
sS'.thisRepN'
p2361
I19
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2362
I10
sS'.thisN'
p2363
I295
sS'.thisIndex'
p2364
I11
sg15
(lp2365
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I11
sa(dp2366
g16
(lp2367
S'k'
asg18
S'N'
sS'.thisRepN'
p2368
I19
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2369
I11
sS'.thisN'
p2370
I296
sS'.thisIndex'
p2371
I0
sg15
(lp2372
S'd'
asg30
VF
sg17
S'N'
sg14
I6
sg19
Nsg94
I0
sa(dp2373
g16
(lp2374
S'k'
asg18
S'Y'
sS'.thisRepN'
p2375
I19
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2376
I12
sS'.thisN'
p2377
I297
sS'.thisIndex'
p2378
I13
sg15
(lp2379
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I13
sa(dp2380
g16
(lp2381
S'd'
asg18
S'Y'
sS'.thisRepN'
p2382
I19
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2383
I13
sS'.thisN'
p2384
I298
sS'.thisIndex'
p2385
I6
sg15
(lp2386
S'd'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I6
sa(dp2387
g16
(lp2388
S'k'
asg18
S'Y'
sg22
I32
sS'.thisN'
p2389
I299
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2390
I14
sS'.thisRepN'
p2391
I19
sg21
I48
sS'.thisIndex'
p2392
I8
sg23
I24
sg15
(lp2393
S'k'
asg30
VF
sg17
S'Y'
sg14
I6
sg19
Nsg94
I8
sa(dp2394
g16
(lp2395
S'k'
asg94
I4
sS'.thisRepN'
p2396
I20
sg30
VF
sg31
V
sS'.thisTrialN'
p2397
I0
sS'.thisN'
p2398
I300
sS'.thisIndex'
p2399
I4
sg15
(lp2400
S'k'
asg17
S'Y'
sg14
I7
sa(dp2401
g16
(lp2402
S'k'
asg94
I6
sS'.thisRepN'
p2403
I20
sg30
VF
sg31
V
sS'.thisTrialN'
p2404
I1
sS'.thisN'
p2405
I301
sS'.thisIndex'
p2406
I6
sg15
(lp2407
S'k'
asg17
S'Y'
sg14
I7
sa(dp2408
g16
(lp2409
S'd'
asg18
S'N'
sS'.thisRepN'
p2410
I20
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2411
I2
sS'.thisN'
p2412
I302
sS'.thisIndex'
p2413
I4
sg15
(lp2414
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I4
sa(dp2415
g16
(lp2416
S'k'
asg18
S'N'
sS'.thisRepN'
p2417
I20
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2418
I3
sS'.thisN'
p2419
I303
sS'.thisIndex'
p2420
I8
sg15
(lp2421
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I8
sa(dp2422
g16
(lp2423
S'd'
asg18
S'Y'
sS'.thisRepN'
p2424
I20
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2425
I4
sS'.thisN'
p2426
I304
sS'.thisIndex'
p2427
I3
sg15
(lp2428
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2429
S'space'
p2430
asg94
I3
sa(dp2431
g16
(lp2432
S'd'
asg18
S'N'
sS'.thisRepN'
p2433
I20
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2434
I5
sS'.thisN'
p2435
I305
sS'.thisIndex'
p2436
I11
sg15
(lp2437
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg94
I11
sa(dp2438
g16
(lp2439
S'k'
asg18
S'N'
sS'.thisRepN'
p2440
I20
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2441
I6
sS'.thisN'
p2442
I306
sS'.thisIndex'
p2443
I0
sg15
(lp2444
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I0
sa(dp2445
g16
(lp2446
S'd'
asg18
S'Y'
sS'.thisRepN'
p2447
I20
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2448
I7
sS'.thisN'
p2449
I307
sS'.thisIndex'
p2450
I5
sg15
(lp2451
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I5
sa(dp2452
g16
(lp2453
S'd'
asg18
S'N'
sS'.thisRepN'
p2454
I20
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2455
I8
sS'.thisN'
p2456
I308
sS'.thisIndex'
p2457
I10
sg15
(lp2458
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I10
sa(dp2459
g16
(lp2460
S'd'
asg18
S'N'
sS'.thisRepN'
p2461
I20
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2462
I9
sS'.thisN'
p2463
I309
sS'.thisIndex'
p2464
I0
sg15
(lp2465
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I0
sa(dp2466
g16
(lp2467
S'k'
asg18
S'Y'
sS'.thisRepN'
p2468
I20
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2469
I10
sS'.thisN'
p2470
I310
sS'.thisIndex'
p2471
I14
sg15
(lp2472
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2473
S'space'
p2474
asg94
I14
sa(dp2475
g16
(lp2476
S'd'
asg18
S'N'
sS'.thisRepN'
p2477
I20
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2478
I11
sS'.thisN'
p2479
I311
sS'.thisIndex'
p2480
I13
sg15
(lp2481
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I13
sa(dp2482
g16
(lp2483
S'd'
asg18
S'N'
sS'.thisRepN'
p2484
I20
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2485
I12
sS'.thisN'
p2486
I312
sS'.thisIndex'
p2487
I6
sg15
(lp2488
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I6
sa(dp2489
g16
(lp2490
S'd'
asg18
S'N'
sS'.thisRepN'
p2491
I20
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2492
I13
sS'.thisN'
p2493
I313
sS'.thisIndex'
p2494
I1
sg15
(lp2495
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2496
S'space'
p2497
asg94
I1
sa(dp2498
g16
(lp2499
S'd'
asg18
S'N'
sS'.thisRepN'
p2500
I20
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2501
I14
sS'.thisN'
p2502
I314
sS'.thisIndex'
p2503
I12
sg15
(lp2504
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I12
sa(dp2505
g16
(lp2506
S'k'
asg18
S'N'
sS'.thisRepN'
p2507
I21
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2508
I0
sS'.thisN'
p2509
I315
sS'.thisIndex'
p2510
I12
sg15
(lp2511
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I12
sa(dp2512
g16
(lp2513
S'd'
asg18
S'N'
sS'.thisRepN'
p2514
I21
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2515
I1
sS'.thisN'
p2516
I316
sS'.thisIndex'
p2517
I9
sg15
(lp2518
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I9
sa(dp2519
g16
(lp2520
S'd'
asg18
S'N'
sS'.thisRepN'
p2521
I21
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2522
I2
sS'.thisN'
p2523
I317
sS'.thisIndex'
p2524
I12
sg15
(lp2525
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I12
sa(dp2526
g16
(lp2527
S'k'
asg18
S'Y'
sS'.thisRepN'
p2528
I21
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2529
I3
sS'.thisN'
p2530
I318
sS'.thisIndex'
p2531
I5
sg15
(lp2532
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I5
sa(dp2533
g16
(lp2534
S'k'
asg18
S'N'
sS'.thisRepN'
p2535
I21
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2536
I4
sS'.thisN'
p2537
I319
sS'.thisIndex'
p2538
I0
sg15
(lp2539
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I0
sa(dp2540
g16
(lp2541
S'd'
asg18
S'Y'
sS'.thisRepN'
p2542
I21
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2543
I5
sS'.thisN'
p2544
I320
sS'.thisIndex'
p2545
I12
sg15
(lp2546
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I12
sa(dp2547
g16
(lp2548
S'd'
asg18
S'N'
sS'.thisRepN'
p2549
I21
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2550
I6
sS'.thisN'
p2551
I321
sS'.thisIndex'
p2552
I11
sg15
(lp2553
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I11
sa(dp2554
g16
(lp2555
S'd'
asg18
S'Y'
sS'.thisRepN'
p2556
I21
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2557
I7
sS'.thisN'
p2558
I322
sS'.thisIndex'
p2559
I3
sg15
(lp2560
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I3
sa(dp2561
g16
(lp2562
S'k'
asg18
S'N'
sS'.thisRepN'
p2563
I21
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2564
I8
sS'.thisN'
p2565
I323
sS'.thisIndex'
p2566
I11
sg15
(lp2567
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I11
sa(dp2568
g16
(lp2569
S'k'
asg18
S'N'
sS'.thisRepN'
p2570
I21
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2571
I9
sS'.thisN'
p2572
I324
sS'.thisIndex'
p2573
I4
sg15
(lp2574
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I4
sa(dp2575
g16
(lp2576
S'd'
asg18
S'N'
sS'.thisRepN'
p2577
I21
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2578
I10
sS'.thisN'
p2579
I325
sS'.thisIndex'
p2580
I14
sg15
(lp2581
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2582
S'space'
p2583
asg94
I14
sa(dp2584
g16
(lp2585
S'k'
asg18
S'Y'
sS'.thisRepN'
p2586
I21
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2587
I11
sS'.thisN'
p2588
I326
sS'.thisIndex'
p2589
I6
sg15
(lp2590
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2591
S'space'
p2592
asg94
I6
sa(dp2593
g16
(lp2594
S'k'
asg18
S'N'
sS'.thisRepN'
p2595
I21
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2596
I12
sS'.thisN'
p2597
I327
sS'.thisIndex'
p2598
I6
sg15
(lp2599
S'd'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg94
I6
sa(dp2600
g16
(lp2601
S'k'
asg18
S'N'
sS'.thisRepN'
p2602
I21
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2603
I13
sS'.thisN'
p2604
I328
sS'.thisIndex'
p2605
I6
sg15
(lp2606
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2607
S'space'
p2608
asg94
I6
sa(dp2609
g16
(lp2610
S'd'
asg18
S'N'
sS'.thisRepN'
p2611
I21
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2612
I14
sS'.thisN'
p2613
I329
sS'.thisIndex'
p2614
I3
sg15
(lp2615
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I3
sa(dp2616
g16
(lp2617
S'k'
asg18
S'Y'
sS'.thisRepN'
p2618
I22
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2619
I0
sS'.thisN'
p2620
I330
sS'.thisIndex'
p2621
I6
sg15
(lp2622
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2623
S'space'
p2624
asg94
I6
sa(dp2625
g16
(lp2626
S'k'
asg18
S'Y'
sS'.thisRepN'
p2627
I22
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2628
I1
sS'.thisN'
p2629
I331
sS'.thisIndex'
p2630
I11
sg15
(lp2631
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I11
sa(dp2632
g16
(lp2633
S'd'
asg18
S'N'
sS'.thisRepN'
p2634
I22
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2635
I2
sS'.thisN'
p2636
I332
sS'.thisIndex'
p2637
I14
sg15
(lp2638
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I14
sa(dp2639
g16
(lp2640
S'd'
asg18
S'Y'
sS'.thisRepN'
p2641
I22
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2642
I3
sS'.thisN'
p2643
I333
sS'.thisIndex'
p2644
I3
sg15
(lp2645
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I3
sa(dp2646
g16
(lp2647
S'd'
asg18
S'Y'
sS'.thisRepN'
p2648
I22
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2649
I4
sS'.thisN'
p2650
I334
sS'.thisIndex'
p2651
I6
sg15
(lp2652
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I6
sa(dp2653
g16
(lp2654
S'd'
asg18
S'N'
sS'.thisRepN'
p2655
I22
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2656
I5
sS'.thisN'
p2657
I335
sS'.thisIndex'
p2658
I2
sg15
(lp2659
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I2
sa(dp2660
g16
(lp2661
S'k'
asg18
S'Y'
sS'.thisRepN'
p2662
I22
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2663
I6
sS'.thisN'
p2664
I336
sS'.thisIndex'
p2665
I5
sg15
(lp2666
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I5
sa(dp2667
g16
(lp2668
S'k'
asg18
S'Y'
sS'.thisRepN'
p2669
I22
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2670
I7
sS'.thisN'
p2671
I337
sS'.thisIndex'
p2672
I11
sg15
(lp2673
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I11
sa(dp2674
g16
(lp2675
S'd'
asg18
S'N'
sS'.thisRepN'
p2676
I22
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2677
I8
sS'.thisN'
p2678
I338
sS'.thisIndex'
p2679
I8
sg15
(lp2680
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I8
sa(dp2681
g16
(lp2682
S'd'
asg18
S'Y'
sS'.thisRepN'
p2683
I22
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2684
I9
sS'.thisN'
p2685
I339
sS'.thisIndex'
p2686
I9
sg15
(lp2687
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I9
sa(dp2688
g16
(lp2689
S'k'
asg18
S'Y'
sS'.thisRepN'
p2690
I22
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2691
I10
sS'.thisN'
p2692
I340
sS'.thisIndex'
p2693
I12
sg15
(lp2694
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2695
S'space'
p2696
asg94
I12
sa(dp2697
g16
(lp2698
S'k'
asg18
S'Y'
sS'.thisRepN'
p2699
I22
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2700
I11
sS'.thisN'
p2701
I341
sS'.thisIndex'
p2702
I2
sg15
(lp2703
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2704
S'space'
p2705
asg94
I2
sa(dp2706
g16
(lp2707
S'd'
asg18
S'Y'
sS'.thisRepN'
p2708
I22
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2709
I12
sS'.thisN'
p2710
I342
sS'.thisIndex'
p2711
I11
sg15
(lp2712
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2713
S'space'
p2714
asg94
I11
sa(dp2715
g16
(lp2716
S'd'
asg18
S'N'
sS'.thisRepN'
p2717
I22
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2718
I13
sS'.thisN'
p2719
I343
sS'.thisIndex'
p2720
I10
sg15
(lp2721
S'k'
asg30
VF
sg17
S'N'
sg14
I7
sg19
Nsg94
I10
sa(dp2722
g16
(lp2723
S'k'
asg18
S'N'
sS'.thisRepN'
p2724
I22
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2725
I14
sS'.thisN'
p2726
I344
sS'.thisIndex'
p2727
I0
sg15
(lp2728
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I0
sa(dp2729
g16
(lp2730
S'd'
asg18
S'Y'
sS'.thisRepN'
p2731
I23
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2732
I0
sS'.thisN'
p2733
I345
sS'.thisIndex'
p2734
I9
sg15
(lp2735
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2736
S'space'
p2737
asg94
I9
sa(dp2738
g16
(lp2739
S'k'
asg18
S'Y'
sS'.thisRepN'
p2740
I23
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2741
I1
sS'.thisN'
p2742
I346
sS'.thisIndex'
p2743
I11
sg15
(lp2744
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
(lp2745
S'k'
asg94
I11
sa(dp2746
g16
(lp2747
S'd'
asg18
S'N'
sS'.thisRepN'
p2748
I23
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2749
I2
sS'.thisN'
p2750
I347
sS'.thisIndex'
p2751
I4
sg15
(lp2752
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I4
sa(dp2753
g16
(lp2754
S'd'
asg18
S'Y'
sS'.thisRepN'
p2755
I23
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2756
I3
sS'.thisN'
p2757
I348
sS'.thisIndex'
p2758
I1
sg15
(lp2759
S'd'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I1
sa(dp2760
g16
(lp2761
S'k'
asg18
S'N'
sg22
I33
sS'.thisN'
p2762
I349
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2763
I4
sS'.thisRepN'
p2764
I23
sg21
I47
sS'.thisIndex'
p2765
I6
sg23
I20
sg15
(lp2766
S'k'
asg30
VF
sg17
S'Y'
sg14
I7
sg19
Nsg94
I6
sa(dp2767
g16
(lp2768
S'k'
asg94
I9
sS'.thisRepN'
p2769
I23
sg30
VF
sg31
V
sS'.thisTrialN'
p2770
I5
sS'.thisN'
p2771
I350
sS'.thisIndex'
p2772
I9
sg15
(lp2773
S'k'
asg17
S'Y'
sg14
I8
sa(dp2774
g16
(lp2775
S'd'
asg94
I2
sS'.thisRepN'
p2776
I23
sg30
VF
sg31
V
sS'.thisTrialN'
p2777
I6
sS'.thisN'
p2778
I351
sS'.thisIndex'
p2779
I2
sg15
(lp2780
S'd'
asg17
S'Y'
sg14
I8
sa(dp2781
g16
(lp2782
S'd'
asg18
S'N'
sS'.thisRepN'
p2783
I23
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2784
I7
sS'.thisN'
p2785
I352
sS'.thisIndex'
p2786
I14
sg15
(lp2787
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I14
sa(dp2788
g16
(lp2789
S'k'
asg18
S'N'
sS'.thisRepN'
p2790
I23
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2791
I8
sS'.thisN'
p2792
I353
sS'.thisIndex'
p2793
I13
sg15
(lp2794
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I13
sa(dp2795
g16
(lp2796
S'd'
asg18
S'N'
sS'.thisRepN'
p2797
I23
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2798
I9
sS'.thisN'
p2799
I354
sS'.thisIndex'
p2800
I6
sg15
(lp2801
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2802
S'space'
p2803
asg94
I6
sa(dp2804
g16
(lp2805
S'k'
asg18
S'Y'
sS'.thisRepN'
p2806
I23
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2807
I10
sS'.thisN'
p2808
I355
sS'.thisIndex'
p2809
I10
sg15
(lp2810
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I10
sa(dp2811
g16
(lp2812
S'd'
asg18
S'N'
sS'.thisRepN'
p2813
I23
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2814
I11
sS'.thisN'
p2815
I356
sS'.thisIndex'
p2816
I1
sg15
(lp2817
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I1
sa(dp2818
g18
S'Y'
sS'.thisRepN'
p2819
I23
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2820
I12
sS'.thisN'
p2821
I357
sS'.thisIndex'
p2822
I13
sg15
Nsg30
VF
sg17
S'Timed out'
p2823
sg14
I8
sg19
Nsg94
I13
sa(dp2824
g16
(lp2825
S'd'
asg18
S'Y'
sS'.thisRepN'
p2826
I23
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2827
I13
sS'.thisN'
p2828
I358
sS'.thisIndex'
p2829
I12
sg15
(lp2830
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I12
sa(dp2831
g16
(lp2832
S'd'
asg18
S'Y'
sS'.thisRepN'
p2833
I23
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2834
I14
sS'.thisN'
p2835
I359
sS'.thisIndex'
p2836
I8
sg15
(lp2837
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2838
S'space'
p2839
asg94
I8
sa(dp2840
g16
(lp2841
S'd'
asg18
S'Y'
sS'.thisRepN'
p2842
I24
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2843
I0
sS'.thisN'
p2844
I360
sS'.thisIndex'
p2845
I1
sg15
(lp2846
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I1
sa(dp2847
g16
(lp2848
S'k'
asg18
S'N'
sS'.thisRepN'
p2849
I24
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2850
I1
sS'.thisN'
p2851
I361
sS'.thisIndex'
p2852
I1
sg15
(lp2853
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2854
S'space'
p2855
asg94
I1
sa(dp2856
g16
(lp2857
S'd'
asg18
S'N'
sS'.thisRepN'
p2858
I24
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2859
I2
sS'.thisN'
p2860
I362
sS'.thisIndex'
p2861
I9
sg15
(lp2862
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I9
sa(dp2863
g16
(lp2864
S'd'
asg18
S'N'
sS'.thisRepN'
p2865
I24
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2866
I3
sS'.thisN'
p2867
I363
sS'.thisIndex'
p2868
I3
sg15
(lp2869
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2870
S'space'
p2871
asg94
I3
sa(dp2872
g16
(lp2873
S'd'
asg18
S'Y'
sS'.thisRepN'
p2874
I24
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2875
I4
sS'.thisN'
p2876
I364
sS'.thisIndex'
p2877
I5
sg15
(lp2878
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I5
sa(dp2879
g16
(lp2880
S'd'
asg18
S'N'
sS'.thisRepN'
p2881
I24
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2882
I5
sS'.thisN'
p2883
I365
sS'.thisIndex'
p2884
I0
sg15
(lp2885
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I0
sa(dp2886
g16
(lp2887
S'k'
asg18
S'N'
sS'.thisRepN'
p2888
I24
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2889
I6
sS'.thisN'
p2890
I366
sS'.thisIndex'
p2891
I7
sg15
(lp2892
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I7
sa(dp2893
g16
(lp2894
S'k'
asg18
S'Y'
sS'.thisRepN'
p2895
I24
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2896
I7
sS'.thisN'
p2897
I367
sS'.thisIndex'
p2898
I5
sg15
(lp2899
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I5
sa(dp2900
g16
(lp2901
S'd'
asg18
S'N'
sS'.thisRepN'
p2902
I24
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2903
I8
sS'.thisN'
p2904
I368
sS'.thisIndex'
p2905
I14
sg15
(lp2906
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I14
sa(dp2907
g16
(lp2908
S'k'
asg18
S'N'
sS'.thisRepN'
p2909
I24
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2910
I9
sS'.thisN'
p2911
I369
sS'.thisIndex'
p2912
I7
sg15
(lp2913
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2914
S'space'
p2915
asg94
I7
sa(dp2916
g16
(lp2917
S'k'
asg18
S'N'
sS'.thisRepN'
p2918
I24
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2919
I10
sS'.thisN'
p2920
I370
sS'.thisIndex'
p2921
I5
sg15
(lp2922
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2923
S'd'
asg94
I5
sa(dp2924
g16
(lp2925
S'd'
asg18
S'Y'
sS'.thisRepN'
p2926
I24
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2927
I11
sS'.thisN'
p2928
I371
sS'.thisIndex'
p2929
I3
sg15
(lp2930
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp2931
S'space'
p2932
asg94
I3
sa(dp2933
g16
(lp2934
S'k'
asg18
S'N'
sS'.thisRepN'
p2935
I24
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2936
I12
sS'.thisN'
p2937
I372
sS'.thisIndex'
p2938
I1
sg15
(lp2939
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I1
sa(dp2940
g16
(lp2941
S'd'
asg18
S'N'
sS'.thisRepN'
p2942
I24
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2943
I13
sS'.thisN'
p2944
I373
sS'.thisIndex'
p2945
I6
sg15
(lp2946
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I6
sa(dp2947
g16
(lp2948
S'd'
asg18
S'N'
sS'.thisRepN'
p2949
I24
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2950
I14
sS'.thisN'
p2951
I374
sS'.thisIndex'
p2952
I7
sg15
(lp2953
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I7
sa(dp2954
g16
(lp2955
S'd'
asg18
S'N'
sS'.thisRepN'
p2956
I25
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2957
I0
sS'.thisN'
p2958
I375
sS'.thisIndex'
p2959
I11
sg15
(lp2960
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I11
sa(dp2961
g16
(lp2962
S'k'
asg18
S'N'
sS'.thisRepN'
p2963
I25
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2964
I1
sS'.thisN'
p2965
I376
sS'.thisIndex'
p2966
I11
sg15
(lp2967
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I11
sa(dp2968
g16
(lp2969
S'k'
asg18
S'Y'
sS'.thisRepN'
p2970
I25
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2971
I2
sS'.thisN'
p2972
I377
sS'.thisIndex'
p2973
I1
sg15
(lp2974
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I1
sa(dp2975
g16
(lp2976
S'k'
asg18
S'Y'
sS'.thisRepN'
p2977
I25
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2978
I3
sS'.thisN'
p2979
I378
sS'.thisIndex'
p2980
I14
sg15
(lp2981
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I14
sa(dp2982
g16
(lp2983
S'd'
asg18
S'Y'
sS'.thisRepN'
p2984
I25
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p2985
I4
sS'.thisN'
p2986
I379
sS'.thisIndex'
p2987
I6
sg15
(lp2988
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp2989
S'space'
p2990
asg94
I6
sa(dp2991
g16
(lp2992
S'k'
asg18
S'Y'
sS'.thisRepN'
p2993
I25
sg20
S'N'
sg31
V
sS'.thisTrialN'
p2994
I5
sS'.thisN'
p2995
I380
sS'.thisIndex'
p2996
I10
sg15
(lp2997
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I10
sa(dp2998
g16
(lp2999
S'd'
asg18
S'Y'
sS'.thisRepN'
p3000
I25
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3001
I6
sS'.thisN'
p3002
I381
sS'.thisIndex'
p3003
I13
sg15
(lp3004
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3005
S'space'
p3006
asg94
I13
sa(dp3007
g16
(lp3008
S'k'
asg18
S'Y'
sS'.thisRepN'
p3009
I25
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3010
I7
sS'.thisN'
p3011
I382
sS'.thisIndex'
p3012
I12
sg15
(lp3013
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I12
sa(dp3014
g16
(lp3015
S'd'
asg18
S'Y'
sS'.thisRepN'
p3016
I25
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3017
I8
sS'.thisN'
p3018
I383
sS'.thisIndex'
p3019
I9
sg15
(lp3020
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3021
S'space'
p3022
asg94
I9
sa(dp3023
g16
(lp3024
S'k'
asg18
S'N'
sS'.thisRepN'
p3025
I25
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3026
I9
sS'.thisN'
p3027
I384
sS'.thisIndex'
p3028
I6
sg15
(lp3029
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I6
sa(dp3030
g16
(lp3031
S'k'
asg18
S'Y'
sS'.thisRepN'
p3032
I25
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3033
I10
sS'.thisN'
p3034
I385
sS'.thisIndex'
p3035
I5
sg15
(lp3036
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3037
S'space'
p3038
asg94
I5
sa(dp3039
g16
(lp3040
S'k'
asg18
S'N'
sS'.thisRepN'
p3041
I25
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3042
I11
sS'.thisN'
p3043
I386
sS'.thisIndex'
p3044
I11
sg15
(lp3045
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I11
sa(dp3046
g16
(lp3047
S'd'
asg18
S'Y'
sS'.thisRepN'
p3048
I25
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3049
I12
sS'.thisN'
p3050
I387
sS'.thisIndex'
p3051
I4
sg15
(lp3052
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3053
S'space'
p3054
asg94
I4
sa(dp3055
g16
(lp3056
S'd'
asg18
S'Y'
sS'.thisRepN'
p3057
I25
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3058
I13
sS'.thisN'
p3059
I388
sS'.thisIndex'
p3060
I9
sg15
(lp3061
S'k'
asg30
VF
sg17
S'N'
sg14
I8
sg19
(lp3062
S'k'
asg94
I9
sa(dp3063
g16
(lp3064
S'k'
asg18
S'N'
sS'.thisRepN'
p3065
I25
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3066
I14
sS'.thisN'
p3067
I389
sS'.thisIndex'
p3068
I3
sg15
(lp3069
S'd'
asg30
VF
sg17
S'N'
sg14
I8
sg19
Nsg94
I3
sa(dp3070
g16
(lp3071
S'd'
asg18
S'Y'
sS'.thisRepN'
p3072
I26
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3073
I0
sS'.thisN'
p3074
I390
sS'.thisIndex'
p3075
I5
sg15
(lp3076
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3077
S'space'
p3078
asg94
I5
sa(dp3079
g16
(lp3080
S'k'
asg18
S'Y'
sS'.thisRepN'
p3081
I26
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3082
I1
sS'.thisN'
p3083
I391
sS'.thisIndex'
p3084
I3
sg15
(lp3085
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3086
S'space'
p3087
asg94
I3
sa(dp3088
g16
(lp3089
S'd'
asg18
S'N'
sS'.thisRepN'
p3090
I26
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3091
I2
sS'.thisN'
p3092
I392
sS'.thisIndex'
p3093
I10
sg15
(lp3094
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3095
S'space'
p3096
asg94
I10
sa(dp3097
g16
(lp3098
S'k'
asg18
S'N'
sS'.thisRepN'
p3099
I26
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3100
I3
sS'.thisN'
p3101
I393
sS'.thisIndex'
p3102
I7
sg15
(lp3103
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I7
sa(dp3104
g16
(lp3105
S'k'
asg18
S'Y'
sS'.thisRepN'
p3106
I26
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3107
I4
sS'.thisN'
p3108
I394
sS'.thisIndex'
p3109
I14
sg15
(lp3110
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
(lp3111
S'space'
p3112
asg94
I14
sa(dp3113
g16
(lp3114
S'k'
asg18
S'N'
sS'.thisRepN'
p3115
I26
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3116
I5
sS'.thisN'
p3117
I395
sS'.thisIndex'
p3118
I13
sg15
(lp3119
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I13
sa(dp3120
g16
(lp3121
S'd'
asg18
S'N'
sS'.thisRepN'
p3122
I26
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3123
I6
sS'.thisN'
p3124
I396
sS'.thisIndex'
p3125
I1
sg15
(lp3126
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I1
sa(dp3127
g16
(lp3128
S'k'
asg18
S'N'
sS'.thisRepN'
p3129
I26
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3130
I7
sS'.thisN'
p3131
I397
sS'.thisIndex'
p3132
I0
sg15
(lp3133
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I0
sa(dp3134
g16
(lp3135
S'k'
asg18
S'Y'
sS'.thisRepN'
p3136
I26
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3137
I8
sS'.thisN'
p3138
I398
sS'.thisIndex'
p3139
I4
sg15
(lp3140
S'k'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I4
sa(dp3141
g16
(lp3142
S'd'
asg18
S'N'
sg22
I30
sS'.thisN'
p3143
I399
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3144
I9
sS'.thisRepN'
p3145
I26
sg21
I46
sS'.thisIndex'
p3146
I5
sg23
I22
sg15
(lp3147
S'd'
asg30
VF
sg17
S'Y'
sg14
I8
sg19
Nsg94
I5
sa(dp3148
g16
(lp3149
S'k'
asg94
I2
sS'.thisRepN'
p3150
I26
sg30
VF
sg31
V
sS'.thisTrialN'
p3151
I10
sS'.thisN'
p3152
I400
sS'.thisIndex'
p3153
I2
sg15
(lp3154
S'k'
asg17
S'Y'
sg14
I9
sa(dp3155
g16
(lp3156
S'k'
asg94
I12
sS'.thisRepN'
p3157
I26
sg30
VF
sg31
V
sS'.thisTrialN'
p3158
I11
sS'.thisN'
p3159
I401
sS'.thisIndex'
p3160
I12
sg15
(lp3161
S'd'
asg17
S'N'
sg14
I9
sa(dp3162
g16
(lp3163
S'k'
asg18
S'Y'
sS'.thisRepN'
p3164
I26
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3165
I12
sS'.thisN'
p3166
I402
sS'.thisIndex'
p3167
I9
sg15
(lp3168
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3169
S'space'
p3170
asg94
I9
sa(dp3171
g16
(lp3172
S'd'
asg18
S'N'
sS'.thisRepN'
p3173
I26
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3174
I13
sS'.thisN'
p3175
I403
sS'.thisIndex'
p3176
I10
sg15
(lp3177
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I10
sa(dp3178
g16
(lp3179
S'd'
asg18
S'Y'
sS'.thisRepN'
p3180
I26
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3181
I14
sS'.thisN'
p3182
I404
sS'.thisIndex'
p3183
I8
sg15
(lp3184
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3185
S'space'
p3186
asg94
I8
sa(dp3187
g16
(lp3188
S'd'
asg18
S'Y'
sS'.thisRepN'
p3189
I27
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3190
I0
sS'.thisN'
p3191
I405
sS'.thisIndex'
p3192
I9
sg15
(lp3193
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3194
S'space'
p3195
asg94
I9
sa(dp3196
g16
(lp3197
S'd'
asg18
S'N'
sS'.thisRepN'
p3198
I27
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3199
I1
sS'.thisN'
p3200
I406
sS'.thisIndex'
p3201
I2
sg15
(lp3202
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I2
sa(dp3203
g16
(lp3204
S'k'
asg18
S'N'
sS'.thisRepN'
p3205
I27
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3206
I2
sS'.thisN'
p3207
I407
sS'.thisIndex'
p3208
I7
sg15
(lp3209
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I7
sa(dp3210
g16
(lp3211
S'k'
asg18
S'N'
sS'.thisRepN'
p3212
I27
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3213
I3
sS'.thisN'
p3214
I408
sS'.thisIndex'
p3215
I5
sg15
(lp3216
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3217
S'space'
p3218
asg94
I5
sa(dp3219
g16
(lp3220
S'd'
asg18
S'Y'
sS'.thisRepN'
p3221
I27
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3222
I4
sS'.thisN'
p3223
I409
sS'.thisIndex'
p3224
I6
sg15
(lp3225
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I6
sa(dp3226
g16
(lp3227
S'k'
asg18
S'N'
sS'.thisRepN'
p3228
I27
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3229
I5
sS'.thisN'
p3230
I410
sS'.thisIndex'
p3231
I9
sg15
(lp3232
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I9
sa(dp3233
g16
(lp3234
S'k'
asg18
S'N'
sS'.thisRepN'
p3235
I27
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3236
I6
sS'.thisN'
p3237
I411
sS'.thisIndex'
p3238
I13
sg15
(lp3239
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I13
sa(dp3240
g16
(lp3241
S'k'
asg18
S'Y'
sS'.thisRepN'
p3242
I27
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3243
I7
sS'.thisN'
p3244
I412
sS'.thisIndex'
p3245
I2
sg15
(lp3246
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I2
sa(dp3247
g16
(lp3248
S'd'
asg18
S'N'
sS'.thisRepN'
p3249
I27
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3250
I8
sS'.thisN'
p3251
I413
sS'.thisIndex'
p3252
I2
sg15
(lp3253
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I2
sa(dp3254
g16
(lp3255
S'd'
asg18
S'Y'
sS'.thisRepN'
p3256
I27
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3257
I9
sS'.thisN'
p3258
I414
sS'.thisIndex'
p3259
I14
sg15
(lp3260
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I14
sa(dp3261
g16
(lp3262
S'k'
asg18
S'N'
sS'.thisRepN'
p3263
I27
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3264
I10
sS'.thisN'
p3265
I415
sS'.thisIndex'
p3266
I12
sg15
(lp3267
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I12
sa(dp3268
g16
(lp3269
S'k'
asg18
S'Y'
sS'.thisRepN'
p3270
I27
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3271
I11
sS'.thisN'
p3272
I416
sS'.thisIndex'
p3273
I4
sg15
(lp3274
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3275
S'space'
p3276
asg94
I4
sa(dp3277
g16
(lp3278
S'd'
asg18
S'Y'
sS'.thisRepN'
p3279
I27
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3280
I12
sS'.thisN'
p3281
I417
sS'.thisIndex'
p3282
I14
sg15
(lp3283
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I14
sa(dp3284
g16
(lp3285
S'k'
asg18
S'Y'
sS'.thisRepN'
p3286
I27
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3287
I13
sS'.thisN'
p3288
I418
sS'.thisIndex'
p3289
I1
sg15
(lp3290
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I1
sa(dp3291
g16
(lp3292
S'd'
asg18
S'N'
sS'.thisRepN'
p3293
I27
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3294
I14
sS'.thisN'
p3295
I419
sS'.thisIndex'
p3296
I4
sg15
(lp3297
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I4
sa(dp3298
g16
(lp3299
S'd'
asg18
S'Y'
sS'.thisRepN'
p3300
I28
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3301
I0
sS'.thisN'
p3302
I420
sS'.thisIndex'
p3303
I13
sg15
(lp3304
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I13
sa(dp3305
g16
(lp3306
S'd'
asg18
S'Y'
sS'.thisRepN'
p3307
I28
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3308
I1
sS'.thisN'
p3309
I421
sS'.thisIndex'
p3310
I1
sg15
(lp3311
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I1
sa(dp3312
g16
(lp3313
S'd'
asg18
S'N'
sS'.thisRepN'
p3314
I28
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3315
I2
sS'.thisN'
p3316
I422
sS'.thisIndex'
p3317
I9
sg15
(lp3318
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I9
sa(dp3319
g16
(lp3320
S'd'
asg18
S'Y'
sS'.thisRepN'
p3321
I28
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3322
I3
sS'.thisN'
p3323
I423
sS'.thisIndex'
p3324
I8
sg15
(lp3325
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I8
sa(dp3326
g16
(lp3327
S'k'
asg18
S'N'
sS'.thisRepN'
p3328
I28
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3329
I4
sS'.thisN'
p3330
I424
sS'.thisIndex'
p3331
I11
sg15
(lp3332
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I11
sa(dp3333
g16
(lp3334
S'k'
asg18
S'Y'
sS'.thisRepN'
p3335
I28
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3336
I5
sS'.thisN'
p3337
I425
sS'.thisIndex'
p3338
I10
sg15
(lp3339
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I10
sa(dp3340
g16
(lp3341
S'k'
asg18
S'Y'
sS'.thisRepN'
p3342
I28
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3343
I6
sS'.thisN'
p3344
I426
sS'.thisIndex'
p3345
I12
sg15
(lp3346
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3347
S'space'
p3348
asg94
I12
sa(dp3349
g16
(lp3350
S'd'
asg18
S'N'
sS'.thisRepN'
p3351
I28
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3352
I7
sS'.thisN'
p3353
I427
sS'.thisIndex'
p3354
I13
sg15
(lp3355
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3356
S'space'
p3357
asg94
I13
sa(dp3358
g16
(lp3359
S'k'
asg18
S'Y'
sS'.thisRepN'
p3360
I28
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3361
I8
sS'.thisN'
p3362
I428
sS'.thisIndex'
p3363
I7
sg15
(lp3364
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3365
S'space'
p3366
asg94
I7
sa(dp3367
g16
(lp3368
S'k'
asg18
S'Y'
sS'.thisRepN'
p3369
I28
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3370
I9
sS'.thisN'
p3371
I429
sS'.thisIndex'
p3372
I5
sg15
(lp3373
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3374
S'space'
p3375
asg94
I5
sa(dp3376
g16
(lp3377
S'd'
asg18
S'Y'
sS'.thisRepN'
p3378
I28
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3379
I10
sS'.thisN'
p3380
I430
sS'.thisIndex'
p3381
I12
sg15
(lp3382
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3383
S'space'
p3384
asg94
I12
sa(dp3385
g16
(lp3386
S'd'
asg18
S'N'
sS'.thisRepN'
p3387
I28
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3388
I11
sS'.thisN'
p3389
I431
sS'.thisIndex'
p3390
I0
sg15
(lp3391
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I0
sa(dp3392
g16
(lp3393
S'k'
asg18
S'N'
sS'.thisRepN'
p3394
I28
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3395
I12
sS'.thisN'
p3396
I432
sS'.thisIndex'
p3397
I0
sg15
(lp3398
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3399
S'space'
p3400
asg94
I0
sa(dp3401
g16
(lp3402
S'k'
asg18
S'Y'
sS'.thisRepN'
p3403
I28
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3404
I13
sS'.thisN'
p3405
I433
sS'.thisIndex'
p3406
I13
sg15
(lp3407
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3408
S'd'
asg94
I13
sa(dp3409
g16
(lp3410
S'k'
asg18
S'N'
sS'.thisRepN'
p3411
I28
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3412
I14
sS'.thisN'
p3413
I434
sS'.thisIndex'
p3414
I1
sg15
(lp3415
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3416
S'space'
p3417
asg94
I1
sa(dp3418
g16
(lp3419
S'd'
asg18
S'N'
sS'.thisRepN'
p3420
I29
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3421
I0
sS'.thisN'
p3422
I435
sS'.thisIndex'
p3423
I10
sg15
(lp3424
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3425
S'space'
p3426
asg94
I10
sa(dp3427
g16
(lp3428
S'k'
asg18
S'Y'
sS'.thisRepN'
p3429
I29
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3430
I1
sS'.thisN'
p3431
I436
sS'.thisIndex'
p3432
I6
sg15
(lp3433
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3434
S'space'
p3435
asg94
I6
sa(dp3436
g16
(lp3437
S'k'
asg18
S'N'
sS'.thisRepN'
p3438
I29
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3439
I2
sS'.thisN'
p3440
I437
sS'.thisIndex'
p3441
I3
sg15
(lp3442
S'd'
asg30
VF
sg17
S'N'
sg14
I9
sg19
Nsg94
I3
sa(dp3443
g16
(lp3444
S'k'
asg18
S'N'
sS'.thisRepN'
p3445
I29
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3446
I3
sS'.thisN'
p3447
I438
sS'.thisIndex'
p3448
I8
sg15
(lp3449
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3450
S'space'
p3451
asg94
I8
sa(dp3452
g16
(lp3453
S'd'
asg18
S'Y'
sS'.thisRepN'
p3454
I29
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3455
I4
sS'.thisN'
p3456
I439
sS'.thisIndex'
p3457
I10
sg15
(lp3458
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I10
sa(dp3459
g16
(lp3460
S'k'
asg18
S'N'
sS'.thisRepN'
p3461
I29
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3462
I5
sS'.thisN'
p3463
I440
sS'.thisIndex'
p3464
I11
sg15
(lp3465
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I11
sa(dp3466
g16
(lp3467
S'k'
asg18
S'Y'
sS'.thisRepN'
p3468
I29
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3469
I6
sS'.thisN'
p3470
I441
sS'.thisIndex'
p3471
I4
sg15
(lp3472
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3473
S'space'
p3474
asg94
I4
sa(dp3475
g16
(lp3476
S'k'
asg18
S'N'
sS'.thisRepN'
p3477
I29
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3478
I7
sS'.thisN'
p3479
I442
sS'.thisIndex'
p3480
I2
sg15
(lp3481
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I2
sa(dp3482
g16
(lp3483
S'd'
asg18
S'Y'
sS'.thisRepN'
p3484
I29
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3485
I8
sS'.thisN'
p3486
I443
sS'.thisIndex'
p3487
I10
sg15
(lp3488
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3489
S'space'
p3490
asg94
I10
sa(dp3491
g16
(lp3492
S'd'
asg18
S'N'
sS'.thisRepN'
p3493
I29
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3494
I9
sS'.thisN'
p3495
I444
sS'.thisIndex'
p3496
I10
sg15
(lp3497
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I10
sa(dp3498
g16
(lp3499
S'k'
asg18
S'N'
sS'.thisRepN'
p3500
I29
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3501
I10
sS'.thisN'
p3502
I445
sS'.thisIndex'
p3503
I7
sg15
(lp3504
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I7
sa(dp3505
g16
(lp3506
S'd'
asg18
S'Y'
sS'.thisRepN'
p3507
I29
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3508
I11
sS'.thisN'
p3509
I446
sS'.thisIndex'
p3510
I7
sg15
(lp3511
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
(lp3512
S'space'
p3513
asg94
I7
sa(dp3514
g16
(lp3515
S'd'
asg18
S'N'
sS'.thisRepN'
p3516
I29
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3517
I12
sS'.thisN'
p3518
I447
sS'.thisIndex'
p3519
I7
sg15
(lp3520
S'd'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I7
sa(dp3521
g16
(lp3522
S'k'
asg18
S'N'
sS'.thisRepN'
p3523
I29
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3524
I13
sS'.thisN'
p3525
I448
sS'.thisIndex'
p3526
I4
sg15
(lp3527
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I4
sa(dp3528
g16
(lp3529
S'k'
asg18
S'Y'
sg22
I30
sS'.thisN'
p3530
I449
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3531
I14
sS'.thisRepN'
p3532
I29
sg21
I48
sS'.thisIndex'
p3533
I0
sg23
I24
sg15
(lp3534
S'k'
asg30
VF
sg17
S'Y'
sg14
I9
sg19
Nsg94
I0
sa(dp3535
g16
(lp3536
S'k'
asg94
I3
sS'.thisRepN'
p3537
I30
sg30
VF
sg31
V
sS'.thisTrialN'
p3538
I0
sS'.thisN'
p3539
I450
sS'.thisIndex'
p3540
I3
sg15
(lp3541
S'k'
asg17
S'Y'
sg14
I10
sa(dp3542
g16
(lp3543
S'k'
asg94
I11
sS'.thisRepN'
p3544
I30
sg30
VF
sg31
V
sS'.thisTrialN'
p3545
I1
sS'.thisN'
p3546
I451
sS'.thisIndex'
p3547
I11
sg15
(lp3548
S'k'
asg17
S'Y'
sg14
I10
sa(dp3549
g16
(lp3550
S'd'
asg18
S'Y'
sS'.thisRepN'
p3551
I30
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3552
I2
sS'.thisN'
p3553
I452
sS'.thisIndex'
p3554
I2
sg15
(lp3555
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3556
S'space'
p3557
asg94
I2
sa(dp3558
g16
(lp3559
S'k'
asg18
S'N'
sS'.thisRepN'
p3560
I30
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3561
I3
sS'.thisN'
p3562
I453
sS'.thisIndex'
p3563
I14
sg15
(lp3564
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I14
sa(dp3565
g16
(lp3566
S'd'
asg18
S'Y'
sS'.thisRepN'
p3567
I30
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3568
I4
sS'.thisN'
p3569
I454
sS'.thisIndex'
p3570
I0
sg15
(lp3571
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3572
S'space'
p3573
asg94
I0
sa(dp3574
g16
(lp3575
S'd'
asg18
S'N'
sS'.thisRepN'
p3576
I30
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3577
I5
sS'.thisN'
p3578
I455
sS'.thisIndex'
p3579
I14
sg15
(lp3580
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I14
sa(dp3581
g16
(lp3582
S'k'
asg18
S'N'
sS'.thisRepN'
p3583
I30
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3584
I6
sS'.thisN'
p3585
I456
sS'.thisIndex'
p3586
I9
sg15
(lp3587
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I9
sa(dp3588
g16
(lp3589
S'd'
asg18
S'Y'
sS'.thisRepN'
p3590
I30
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3591
I7
sS'.thisN'
p3592
I457
sS'.thisIndex'
p3593
I1
sg15
(lp3594
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I1
sa(dp3595
g16
(lp3596
S'k'
asg18
S'N'
sS'.thisRepN'
p3597
I30
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3598
I8
sS'.thisN'
p3599
I458
sS'.thisIndex'
p3600
I13
sg15
(lp3601
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I13
sa(dp3602
g16
(lp3603
S'k'
asg18
S'Y'
sS'.thisRepN'
p3604
I30
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3605
I9
sS'.thisN'
p3606
I459
sS'.thisIndex'
p3607
I6
sg15
(lp3608
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3609
S'space'
p3610
asg94
I6
sa(dp3611
g16
(lp3612
S'd'
asg18
S'Y'
sS'.thisRepN'
p3613
I30
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3614
I10
sS'.thisN'
p3615
I460
sS'.thisIndex'
p3616
I10
sg15
(lp3617
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3618
S'space'
p3619
asg94
I10
sa(dp3620
g16
(lp3621
S'k'
asg18
S'Y'
sS'.thisRepN'
p3622
I30
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3623
I11
sS'.thisN'
p3624
I461
sS'.thisIndex'
p3625
I13
sg15
(lp3626
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg94
I13
sa(dp3627
g16
(lp3628
S'd'
asg18
S'N'
sS'.thisRepN'
p3629
I30
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3630
I12
sS'.thisN'
p3631
I462
sS'.thisIndex'
p3632
I7
sg15
(lp3633
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3634
S'space'
p3635
asg94
I7
sa(dp3636
g16
(lp3637
S'k'
asg18
S'N'
sS'.thisRepN'
p3638
I30
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3639
I13
sS'.thisN'
p3640
I463
sS'.thisIndex'
p3641
I14
sg15
(lp3642
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I14
sa(dp3643
g16
(lp3644
S'd'
asg18
S'N'
sS'.thisRepN'
p3645
I30
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3646
I14
sS'.thisN'
p3647
I464
sS'.thisIndex'
p3648
I2
sg15
(lp3649
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3650
S'space'
p3651
asg94
I2
sa(dp3652
g16
(lp3653
S'k'
asg18
S'Y'
sS'.thisRepN'
p3654
I31
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3655
I0
sS'.thisN'
p3656
I465
sS'.thisIndex'
p3657
I4
sg15
(lp3658
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I4
sa(dp3659
g16
(lp3660
S'd'
asg18
S'Y'
sS'.thisRepN'
p3661
I31
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3662
I1
sS'.thisN'
p3663
I466
sS'.thisIndex'
p3664
I3
sg15
(lp3665
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I3
sa(dp3666
g16
(lp3667
S'd'
asg18
S'Y'
sS'.thisRepN'
p3668
I31
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3669
I2
sS'.thisN'
p3670
I467
sS'.thisIndex'
p3671
I4
sg15
(lp3672
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I4
sa(dp3673
g16
(lp3674
S'k'
asg18
S'N'
sS'.thisRepN'
p3675
I31
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3676
I3
sS'.thisN'
p3677
I468
sS'.thisIndex'
p3678
I8
sg15
(lp3679
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I8
sa(dp3680
g16
(lp3681
S'k'
asg18
S'Y'
sS'.thisRepN'
p3682
I31
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3683
I4
sS'.thisN'
p3684
I469
sS'.thisIndex'
p3685
I6
sg15
(lp3686
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3687
S'space'
p3688
asg94
I6
sa(dp3689
g16
(lp3690
S'd'
asg18
S'N'
sS'.thisRepN'
p3691
I31
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3692
I5
sS'.thisN'
p3693
I470
sS'.thisIndex'
p3694
I3
sg15
(lp3695
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg94
I3
sa(dp3696
g16
(lp3697
S'd'
asg18
S'Y'
sS'.thisRepN'
p3698
I31
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3699
I6
sS'.thisN'
p3700
I471
sS'.thisIndex'
p3701
I6
sg15
(lp3702
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3703
S'space'
p3704
asg94
I6
sa(dp3705
g16
(lp3706
S'd'
asg18
S'Y'
sS'.thisRepN'
p3707
I31
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3708
I7
sS'.thisN'
p3709
I472
sS'.thisIndex'
p3710
I14
sg15
(lp3711
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg94
I14
sa(dp3712
g16
(lp3713
S'k'
asg18
S'Y'
sS'.thisRepN'
p3714
I31
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3715
I8
sS'.thisN'
p3716
I473
sS'.thisIndex'
p3717
I12
sg15
(lp3718
S'd'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg94
I12
sa(dp3719
g16
(lp3720
S'k'
asg18
S'N'
sS'.thisRepN'
p3721
I31
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3722
I9
sS'.thisN'
p3723
I474
sS'.thisIndex'
p3724
I11
sg15
(lp3725
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I11
sa(dp3726
g16
(lp3727
S'd'
asg18
S'N'
sS'.thisRepN'
p3728
I31
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3729
I10
sS'.thisN'
p3730
I475
sS'.thisIndex'
p3731
I7
sg15
(lp3732
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I7
sa(dp3733
g16
(lp3734
S'k'
asg18
S'N'
sS'.thisRepN'
p3735
I31
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3736
I11
sS'.thisN'
p3737
I476
sS'.thisIndex'
p3738
I6
sg15
(lp3739
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I6
sa(dp3740
g16
(lp3741
S'd'
asg18
S'Y'
sS'.thisRepN'
p3742
I31
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3743
I12
sS'.thisN'
p3744
I477
sS'.thisIndex'
p3745
I3
sg15
(lp3746
S'k'
asg30
VF
sg17
S'N'
sg14
I10
sg19
Nsg94
I3
sa(dp3747
g16
(lp3748
S'd'
asg18
S'N'
sS'.thisRepN'
p3749
I31
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3750
I13
sS'.thisN'
p3751
I478
sS'.thisIndex'
p3752
I0
sg15
(lp3753
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I0
sa(dp3754
g16
(lp3755
S'd'
asg18
S'Y'
sS'.thisRepN'
p3756
I31
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3757
I14
sS'.thisN'
p3758
I479
sS'.thisIndex'
p3759
I9
sg15
(lp3760
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I9
sa(dp3761
g16
(lp3762
S'k'
asg18
S'Y'
sS'.thisRepN'
p3763
I32
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3764
I0
sS'.thisN'
p3765
I480
sS'.thisIndex'
p3766
I0
sg15
(lp3767
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I0
sa(dp3768
g16
(lp3769
S'k'
asg18
S'N'
sS'.thisRepN'
p3770
I32
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3771
I1
sS'.thisN'
p3772
I481
sS'.thisIndex'
p3773
I3
sg15
(lp3774
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I3
sa(dp3775
g16
(lp3776
S'd'
asg18
S'Y'
sS'.thisRepN'
p3777
I32
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3778
I2
sS'.thisN'
p3779
I482
sS'.thisIndex'
p3780
I9
sg15
(lp3781
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I9
sa(dp3782
g16
(lp3783
S'd'
asg18
S'Y'
sS'.thisRepN'
p3784
I32
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3785
I3
sS'.thisN'
p3786
I483
sS'.thisIndex'
p3787
I2
sg15
(lp3788
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3789
S'space'
p3790
asg94
I2
sa(dp3791
g16
(lp3792
S'd'
asg18
S'N'
sS'.thisRepN'
p3793
I32
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3794
I4
sS'.thisN'
p3795
I484
sS'.thisIndex'
p3796
I7
sg15
(lp3797
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3798
S'space'
p3799
asg94
I7
sa(dp3800
g16
(lp3801
S'k'
asg18
S'N'
sS'.thisRepN'
p3802
I32
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3803
I5
sS'.thisN'
p3804
I485
sS'.thisIndex'
p3805
I9
sg15
(lp3806
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I9
sa(dp3807
g16
(lp3808
S'd'
asg18
S'N'
sS'.thisRepN'
p3809
I32
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3810
I6
sS'.thisN'
p3811
I486
sS'.thisIndex'
p3812
I4
sg15
(lp3813
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I4
sa(dp3814
g16
(lp3815
S'd'
asg18
S'N'
sS'.thisRepN'
p3816
I32
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3817
I7
sS'.thisN'
p3818
I487
sS'.thisIndex'
p3819
I5
sg15
(lp3820
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I5
sa(dp3821
g16
(lp3822
S'd'
asg18
S'N'
sS'.thisRepN'
p3823
I32
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3824
I8
sS'.thisN'
p3825
I488
sS'.thisIndex'
p3826
I8
sg15
(lp3827
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I8
sa(dp3828
g16
(lp3829
S'd'
asg18
S'N'
sS'.thisRepN'
p3830
I32
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3831
I9
sS'.thisN'
p3832
I489
sS'.thisIndex'
p3833
I3
sg15
(lp3834
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I3
sa(dp3835
g16
(lp3836
S'd'
asg18
S'Y'
sS'.thisRepN'
p3837
I32
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3838
I10
sS'.thisN'
p3839
I490
sS'.thisIndex'
p3840
I4
sg15
(lp3841
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3842
S'space'
p3843
asg94
I4
sa(dp3844
g16
(lp3845
S'k'
asg18
S'Y'
sS'.thisRepN'
p3846
I32
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3847
I11
sS'.thisN'
p3848
I491
sS'.thisIndex'
p3849
I3
sg15
(lp3850
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I3
sa(dp3851
g16
(lp3852
S'd'
asg18
S'N'
sS'.thisRepN'
p3853
I32
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3854
I12
sS'.thisN'
p3855
I492
sS'.thisIndex'
p3856
I2
sg15
(lp3857
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I2
sa(dp3858
g16
(lp3859
S'k'
asg18
S'N'
sS'.thisRepN'
p3860
I32
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3861
I13
sS'.thisN'
p3862
I493
sS'.thisIndex'
p3863
I0
sg15
(lp3864
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I0
sa(dp3865
g16
(lp3866
S'k'
asg18
S'N'
sS'.thisRepN'
p3867
I32
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3868
I14
sS'.thisN'
p3869
I494
sS'.thisIndex'
p3870
I2
sg15
(lp3871
S'k'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I2
sa(dp3872
g16
(lp3873
S'd'
asg18
S'N'
sS'.thisRepN'
p3874
I33
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3875
I0
sS'.thisN'
p3876
I495
sS'.thisIndex'
p3877
I11
sg15
(lp3878
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3879
S'space'
p3880
asg94
I11
sa(dp3881
g16
(lp3882
S'd'
asg18
S'N'
sS'.thisRepN'
p3883
I33
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3884
I1
sS'.thisN'
p3885
I496
sS'.thisIndex'
p3886
I3
sg15
(lp3887
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3888
S'space'
p3889
asg94
I3
sa(dp3890
g16
(lp3891
S'd'
asg18
S'Y'
sS'.thisRepN'
p3892
I33
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3893
I2
sS'.thisN'
p3894
I497
sS'.thisIndex'
p3895
I13
sg15
(lp3896
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3897
S'space'
p3898
asg94
I13
sa(dp3899
g16
(lp3900
S'd'
asg18
S'Y'
sS'.thisRepN'
p3901
I33
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3902
I3
sS'.thisN'
p3903
I498
sS'.thisIndex'
p3904
I12
sg15
(lp3905
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
Nsg94
I12
sa(dp3906
g16
(lp3907
S'd'
asg18
S'N'
sg22
I29
sS'.thisN'
p3908
I499
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3909
I4
sS'.thisRepN'
p3910
I33
sg21
I45
sS'.thisIndex'
p3911
I8
sg23
I22
sg15
(lp3912
S'd'
asg30
VF
sg17
S'Y'
sg14
I10
sg19
(lp3913
S'space'
p3914
asg94
I8
sa(dp3915
g16
(lp3916
S'd'
asS'.thisIndex'
p3917
I0
sS'.thisRepN'
p3918
I33
sg26
S'Y'
sg30
VF
sg31
V
sS'.thisTrialN'
p3919
I5
sS'.thisN'
p3920
I500
sg25
S'Y'
sg24
S'Y'
sg15
(lp3921
S'k'
asg17
S'Y'
sg14
I11
sg94
I0
sa(dp3922
g16
(lp3923
S'd'
asS'.thisIndex'
p3924
I3
sS'.thisRepN'
p3925
I33
sg26
S'Y'
sg30
VF
sg31
V
sS'.thisTrialN'
p3926
I6
sS'.thisN'
p3927
I501
sg25
S'Y'
sg15
(lp3928
S'k'
asg17
S'Y'
sg14
I11
sg94
I3
sa(dp3929
g16
(lp3930
S'd'
asg18
S'N'
sS'.thisRepN'
p3931
I33
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3932
I7
sS'.thisN'
p3933
I502
sg25
S'Y'
sg15
(lp3934
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg94
I8
sS'.thisIndex'
p3935
I8
sa(dp3936
g16
(lp3937
S'd'
asg18
S'Y'
sS'.thisRepN'
p3938
I33
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3939
I8
sS'.thisN'
p3940
I503
sg25
S'Y'
sg15
(lp3941
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg94
I1
sS'.thisIndex'
p3942
I1
sa(dp3943
g16
(lp3944
S'k'
asg18
S'Y'
sS'.thisRepN'
p3945
I33
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3946
I9
sS'.thisN'
p3947
I504
sg25
S'Y'
sg15
(lp3948
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp3949
S'space'
p3950
asg94
I8
sS'.thisIndex'
p3951
I8
sa(dp3952
g16
(lp3953
S'd'
asg18
S'N'
sS'.thisRepN'
p3954
I33
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p3955
I10
sS'.thisN'
p3956
I505
sg25
S'Y'
sg15
(lp3957
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg94
I14
sS'.thisIndex'
p3958
I14
sa(dp3959
g16
(lp3960
S'k'
asg18
S'Y'
sS'.thisRepN'
p3961
I33
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3962
I11
sS'.thisN'
p3963
I506
sg25
S'Y'
sg15
(lp3964
S'k'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg94
I12
sS'.thisIndex'
p3965
I12
sa(dp3966
g18
S'Y'
sS'.thisRepN'
p3967
I33
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3968
I12
sS'.thisN'
p3969
I507
sg25
S'Y'
sg15
Nsg30
VF
sg17
g2823
sg14
I11
sg19
Nsg94
I7
sS'.thisIndex'
p3970
I7
sa(dp3971
g16
(lp3972
S'k'
asg18
S'Y'
sS'.thisRepN'
p3973
I33
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3974
I13
sS'.thisN'
p3975
I508
sg25
S'Y'
sg15
(lp3976
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg94
I4
sS'.thisIndex'
p3977
I4
sa(dp3978
g16
(lp3979
S'k'
asg18
S'Y'
sS'.thisRepN'
p3980
I33
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3981
I14
sS'.thisN'
p3982
I509
sg25
S'Y'
sg15
(lp3983
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg94
I0
sS'.thisIndex'
p3984
I0
sa(dp3985
g16
(lp3986
S'd'
asg18
S'Y'
sS'.thisRepN'
p3987
I34
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3988
I0
sS'.thisN'
p3989
I510
sg25
S'Y'
sg15
(lp3990
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg94
I8
sS'.thisIndex'
p3991
I8
sa(dp3992
g16
(lp3993
S'd'
asg18
S'Y'
sS'.thisRepN'
p3994
I34
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p3995
I1
sS'.thisN'
p3996
I511
sg25
S'Y'
sg15
(lp3997
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg94
I8
sS'.thisIndex'
p3998
I8
sa(dp3999
g16
(lp4000
S'd'
asg18
S'Y'
sS'.thisRepN'
p4001
I34
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4002
I2
sS'.thisN'
p4003
I512
sg25
S'Y'
sg15
(lp4004
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg94
I1
sS'.thisIndex'
p4005
I1
sa(dp4006
g18
S'N'
sS'.thisRepN'
p4007
I34
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4008
I3
sS'.thisN'
p4009
I513
sg25
S'Y'
sg15
Nsg30
VF
sg17
g2823
sg14
I11
sg19
Nsg94
I2
sS'.thisIndex'
p4010
I2
sa(dp4011
g16
(lp4012
S'k'
asg18
S'N'
sS'.thisRepN'
p4013
I34
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4014
I4
sS'.thisN'
p4015
I514
sg25
S'Y'
sg15
(lp4016
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4017
S'space'
p4018
asg94
I5
sS'.thisIndex'
p4019
I5
sa(dp4020
g16
(lp4021
S'k'
asg18
S'N'
sS'.thisRepN'
p4022
I34
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4023
I5
sS'.thisN'
p4024
I515
sg25
S'Y'
sg15
(lp4025
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4026
S'space'
p4027
asg94
I3
sS'.thisIndex'
p4028
I3
sa(dp4029
g16
(lp4030
S'k'
asg18
S'N'
sS'.thisRepN'
p4031
I34
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4032
I6
sS'.thisN'
p4033
I516
sg25
S'Y'
sg15
(lp4034
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg94
I11
sS'.thisIndex'
p4035
I11
sa(dp4036
g16
(lp4037
S'k'
asg18
S'Y'
sS'.thisRepN'
p4038
I34
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4039
I7
sS'.thisN'
p4040
I517
sg25
S'Y'
sg15
(lp4041
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg94
I5
sS'.thisIndex'
p4042
I5
sa(dp4043
g16
(lp4044
S'k'
asg18
S'N'
sS'.thisRepN'
p4045
I34
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4046
I8
sS'.thisN'
p4047
I518
sg25
S'Y'
sg15
(lp4048
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg94
I6
sS'.thisIndex'
p4049
I6
sa(dp4050
g16
(lp4051
S'k'
asg18
S'Y'
sS'.thisRepN'
p4052
I34
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4053
I9
sS'.thisN'
p4054
I519
sg25
S'Y'
sg15
(lp4055
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4056
S'space'
p4057
asg94
I8
sS'.thisIndex'
p4058
I8
sa(dp4059
g16
(lp4060
S'k'
asg18
S'N'
sS'.thisRepN'
p4061
I34
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4062
I10
sS'.thisN'
p4063
I520
sg25
S'Y'
sg15
(lp4064
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4065
S'space'
p4066
asg94
I7
sS'.thisIndex'
p4067
I7
sa(dp4068
g16
(lp4069
S'd'
asg18
S'N'
sS'.thisRepN'
p4070
I34
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4071
I11
sS'.thisN'
p4072
I521
sg25
S'Y'
sg15
(lp4073
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg94
I1
sS'.thisIndex'
p4074
I1
sa(dp4075
g16
(lp4076
S'k'
asg18
S'Y'
sS'.thisRepN'
p4077
I34
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4078
I12
sS'.thisN'
p4079
I522
sg25
S'Y'
sg15
(lp4080
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4081
S'space'
p4082
asg94
I12
sS'.thisIndex'
p4083
I12
sa(dp4084
g16
(lp4085
S'k'
asg18
S'N'
sS'.thisRepN'
p4086
I34
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4087
I13
sS'.thisN'
p4088
I523
sg25
S'Y'
sg15
(lp4089
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4090
S'space'
p4091
asg94
I13
sS'.thisIndex'
p4092
I13
sa(dp4093
g16
(lp4094
S'd'
asg18
S'Y'
sS'.thisRepN'
p4095
I34
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4096
I14
sS'.thisN'
p4097
I524
sg25
S'Y'
sg15
(lp4098
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4099
S'space'
p4100
asg94
I11
sS'.thisIndex'
p4101
I11
sa(dp4102
g16
(lp4103
S'k'
asg18
S'N'
sS'.thisRepN'
p4104
I35
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4105
I0
sS'.thisN'
p4106
I525
sg25
S'Y'
sg15
(lp4107
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg94
I12
sS'.thisIndex'
p4108
I12
sa(dp4109
g16
(lp4110
S'd'
asg18
S'N'
sS'.thisRepN'
p4111
I35
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4112
I1
sS'.thisN'
p4113
I526
sg25
S'Y'
sg15
(lp4114
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg94
I2
sS'.thisIndex'
p4115
I2
sa(dp4116
g16
(lp4117
S'k'
asg18
S'Y'
sS'.thisRepN'
p4118
I35
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4119
I2
sS'.thisN'
p4120
I527
sg25
S'Y'
sg15
(lp4121
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4122
S'space'
p4123
asg94
I1
sS'.thisIndex'
p4124
I1
sa(dp4125
g16
(lp4126
S'k'
asg18
S'N'
sS'.thisRepN'
p4127
I35
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4128
I3
sS'.thisN'
p4129
I528
sg25
S'Y'
sg15
(lp4130
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg94
I6
sS'.thisIndex'
p4131
I6
sa(dp4132
g16
(lp4133
S'd'
asg18
S'N'
sS'.thisRepN'
p4134
I35
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4135
I4
sS'.thisN'
p4136
I529
sg25
S'Y'
sg15
(lp4137
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg94
I11
sS'.thisIndex'
p4138
I11
sa(dp4139
g16
(lp4140
S'd'
asg18
S'N'
sS'.thisRepN'
p4141
I35
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4142
I5
sS'.thisN'
p4143
I530
sg25
S'Y'
sg15
(lp4144
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg94
I0
sS'.thisIndex'
p4145
I0
sa(dp4146
g16
(lp4147
S'k'
asg18
S'Y'
sS'.thisRepN'
p4148
I35
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4149
I6
sS'.thisN'
p4150
I531
sg25
S'Y'
sg15
(lp4151
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4152
S'space'
p4153
asg94
I13
sS'.thisIndex'
p4154
I13
sa(dp4155
g16
(lp4156
S'd'
asg18
S'Y'
sS'.thisRepN'
p4157
I35
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4158
I7
sS'.thisN'
p4159
I532
sg25
S'Y'
sg15
(lp4160
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4161
S'k'
asg94
I7
sS'.thisIndex'
p4162
I7
sa(dp4163
g16
(lp4164
S'd'
asg18
S'Y'
sS'.thisRepN'
p4165
I35
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4166
I8
sS'.thisN'
p4167
I533
sg25
S'Y'
sg15
(lp4168
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg94
I6
sS'.thisIndex'
p4169
I6
sa(dp4170
g16
(lp4171
S'd'
asg18
S'N'
sS'.thisRepN'
p4172
I35
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4173
I9
sS'.thisN'
p4174
I534
sg25
S'Y'
sg15
(lp4175
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg94
I6
sS'.thisIndex'
p4176
I6
sa(dp4177
g16
(lp4178
S'k'
asg18
S'N'
sS'.thisRepN'
p4179
I35
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4180
I10
sS'.thisN'
p4181
I535
sg25
S'Y'
sg15
(lp4182
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg94
I12
sS'.thisIndex'
p4183
I12
sa(dp4184
g18
S'Y'
sS'.thisRepN'
p4185
I35
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4186
I11
sS'.thisN'
p4187
I536
sg25
S'Y'
sg15
Nsg30
VF
sg17
g2823
sg14
I11
sg19
(lp4188
S'space'
p4189
asg94
I9
sS'.thisIndex'
p4190
I9
sa(dp4191
g16
(lp4192
S'k'
asg18
S'N'
sS'.thisRepN'
p4193
I35
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4194
I12
sS'.thisN'
p4195
I537
sg25
S'Y'
sg15
(lp4196
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4197
S'space'
p4198
asg94
I1
sS'.thisIndex'
p4199
I1
sa(dp4200
g16
(lp4201
S'd'
asg18
S'N'
sS'.thisRepN'
p4202
I35
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4203
I13
sS'.thisN'
p4204
I538
sg25
S'Y'
sg15
(lp4205
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4206
S'space'
p4207
asg94
I9
sS'.thisIndex'
p4208
I9
sa(dp4209
g16
(lp4210
S'k'
asg18
S'N'
sS'.thisRepN'
p4211
I35
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4212
I14
sS'.thisN'
p4213
I539
sg25
S'Y'
sg15
(lp4214
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4215
S'space'
p4216
asg94
I7
sS'.thisIndex'
p4217
I7
sa(dp4218
g16
(lp4219
S'd'
asg18
S'Y'
sS'.thisRepN'
p4220
I36
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4221
I0
sS'.thisN'
p4222
I540
sg25
S'Y'
sg15
(lp4223
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4224
S'space'
p4225
asg94
I1
sS'.thisIndex'
p4226
I1
sa(dp4227
g16
(lp4228
S'k'
asg18
S'Y'
sS'.thisRepN'
p4229
I36
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4230
I1
sS'.thisN'
p4231
I541
sg25
S'Y'
sg15
(lp4232
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4233
S'space'
p4234
asg94
I12
sS'.thisIndex'
p4235
I12
sa(dp4236
g16
(lp4237
S'k'
asg18
S'Y'
sS'.thisRepN'
p4238
I36
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4239
I2
sS'.thisN'
p4240
I542
sg25
S'Y'
sg15
(lp4241
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg94
I12
sS'.thisIndex'
p4242
I12
sa(dp4243
g16
(lp4244
S'k'
asg18
S'Y'
sS'.thisRepN'
p4245
I36
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4246
I3
sS'.thisN'
p4247
I543
sg25
S'Y'
sg15
(lp4248
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg94
I1
sS'.thisIndex'
p4249
I1
sa(dp4250
g16
(lp4251
S'd'
asg18
S'Y'
sS'.thisRepN'
p4252
I36
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4253
I4
sS'.thisN'
p4254
I544
sg25
S'Y'
sg15
(lp4255
S'k'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4256
S'space'
p4257
asg94
I14
sS'.thisIndex'
p4258
I14
sa(dp4259
g18
S'Y'
sS'.thisRepN'
p4260
I36
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4261
I5
sS'.thisN'
p4262
I545
sg25
S'Y'
sg15
Nsg30
VF
sg17
g2823
sg14
I11
sg19
Nsg94
I10
sS'.thisIndex'
p4263
I10
sa(dp4264
g16
(lp4265
S'd'
asg18
S'N'
sS'.thisRepN'
p4266
I36
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4267
I6
sS'.thisN'
p4268
I546
sg25
S'Y'
sg15
(lp4269
S'd'
asg30
VF
sg17
S'N'
sg14
I11
sg19
Nsg94
I0
sS'.thisIndex'
p4270
I0
sa(dp4271
g16
(lp4272
S'k'
asg18
S'N'
sS'.thisRepN'
p4273
I36
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4274
I7
sS'.thisN'
p4275
I547
sg25
S'Y'
sg15
(lp4276
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4277
S'space'
p4278
asg94
I12
sS'.thisIndex'
p4279
I12
sa(dp4280
g16
(lp4281
S'k'
asg18
S'Y'
sS'.thisRepN'
p4282
I36
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4283
I8
sS'.thisN'
p4284
I548
sg25
S'Y'
sg15
(lp4285
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
(lp4286
S'space'
p4287
asg94
I2
sS'.thisIndex'
p4288
I2
sa(dp4289
g16
(lp4290
S'k'
asg18
S'N'
sg22
I26
sg26
S'Y'
sS'.thisN'
p4291
I549
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4292
I9
sS'.thisRepN'
p4293
I36
sg21
I44
sg25
S'Y'
sg23
I25
sg15
(lp4294
S'd'
asg30
VF
sg17
S'Y'
sg14
I11
sg19
Nsg94
I10
sS'.thisIndex'
p4295
I10
sa(dp4296
g16
(lp4297
S'k'
asS'.thisIndex'
p4298
I1
sS'.thisRepN'
p4299
I36
sg26
S'Y'
sg30
VF
sg31
V
sS'.thisTrialN'
p4300
I10
sS'.thisN'
p4301
I550
sg25
S'Y'
sg15
(lp4302
S'd'
asg17
S'Y'
sg14
I12
sg94
I1
sa(dp4303
g16
(lp4304
S'd'
asS'.thisIndex'
p4305
I5
sS'.thisRepN'
p4306
I36
sg26
S'Y'
sg30
VF
sg31
V
sS'.thisTrialN'
p4307
I11
sS'.thisN'
p4308
I551
sg25
S'Y'
sg15
(lp4309
S'k'
asg17
S'Y'
sg14
I12
sg94
I5
sa(dp4310
g16
(lp4311
S'k'
asg18
S'N'
sS'.thisRepN'
p4312
I36
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4313
I12
sS'.thisN'
p4314
I552
sg25
S'Y'
sg15
(lp4315
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg94
I14
sS'.thisIndex'
p4316
I14
sa(dp4317
g16
(lp4318
S'd'
asg18
S'Y'
sS'.thisRepN'
p4319
I36
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4320
I13
sS'.thisN'
p4321
I553
sg25
S'Y'
sg15
(lp4322
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4323
S'space'
p4324
asg94
I8
sS'.thisIndex'
p4325
I8
sa(dp4326
g16
(lp4327
S'k'
asg18
S'Y'
sS'.thisRepN'
p4328
I36
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4329
I14
sS'.thisN'
p4330
I554
sg25
S'Y'
sg15
(lp4331
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4332
S'space'
p4333
asg94
I2
sS'.thisIndex'
p4334
I2
sa(dp4335
g16
(lp4336
S'd'
asg18
S'N'
sS'.thisRepN'
p4337
I37
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4338
I0
sS'.thisN'
p4339
I555
sg25
S'Y'
sg15
(lp4340
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4341
S'space'
p4342
asg94
I13
sS'.thisIndex'
p4343
I13
sa(dp4344
g16
(lp4345
S'k'
asg18
S'Y'
sS'.thisRepN'
p4346
I37
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4347
I1
sS'.thisN'
p4348
I556
sg25
S'Y'
sg15
(lp4349
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg94
I4
sS'.thisIndex'
p4350
I4
sa(dp4351
g16
(lp4352
S'd'
asg18
S'N'
sS'.thisRepN'
p4353
I37
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4354
I2
sS'.thisN'
p4355
I557
sg25
S'Y'
sg15
(lp4356
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg94
I7
sS'.thisIndex'
p4357
I7
sa(dp4358
g16
(lp4359
S'd'
asg18
S'N'
sS'.thisRepN'
p4360
I37
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4361
I3
sS'.thisN'
p4362
I558
sg25
S'Y'
sg15
(lp4363
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg94
I3
sS'.thisIndex'
p4364
I3
sa(dp4365
g16
(lp4366
S'd'
asg18
S'N'
sS'.thisRepN'
p4367
I37
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4368
I4
sS'.thisN'
p4369
I559
sg25
S'Y'
sg15
(lp4370
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg94
I13
sS'.thisIndex'
p4371
I13
sa(dp4372
g18
S'N'
sS'.thisRepN'
p4373
I37
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4374
I5
sS'.thisN'
p4375
I560
sg25
S'Y'
sg15
Nsg30
VF
sg17
g2823
sg14
I12
sg19
Nsg94
I0
sS'.thisIndex'
p4376
I0
sa(dp4377
g16
(lp4378
S'd'
asg18
S'Y'
sS'.thisRepN'
p4379
I37
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4380
I6
sS'.thisN'
p4381
I561
sg25
S'Y'
sg15
(lp4382
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4383
S'space'
p4384
asg94
I14
sS'.thisIndex'
p4385
I14
sa(dp4386
g16
(lp4387
S'd'
asg18
S'Y'
sS'.thisRepN'
p4388
I37
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4389
I7
sS'.thisN'
p4390
I562
sg25
S'Y'
sg15
(lp4391
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4392
S'space'
p4393
asg94
I14
sS'.thisIndex'
p4394
I14
sa(dp4395
g16
(lp4396
S'd'
asg18
S'Y'
sS'.thisRepN'
p4397
I37
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4398
I8
sS'.thisN'
p4399
I563
sg25
S'Y'
sg15
(lp4400
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4401
S'space'
p4402
asg94
I2
sS'.thisIndex'
p4403
I2
sa(dp4404
g18
S'Y'
sS'.thisRepN'
p4405
I37
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4406
I9
sS'.thisN'
p4407
I564
sg25
S'Y'
sg15
Nsg30
VF
sg17
g2823
sg14
I12
sg19
(lp4408
S'space'
p4409
asg94
I5
sS'.thisIndex'
p4410
I5
sa(dp4411
g16
(lp4412
S'd'
asg18
S'N'
sS'.thisRepN'
p4413
I37
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4414
I10
sS'.thisN'
p4415
I565
sg25
S'Y'
sg15
(lp4416
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4417
S'space'
p4418
asg94
I14
sS'.thisIndex'
p4419
I14
sa(dp4420
g16
(lp4421
S'k'
asg18
S'N'
sS'.thisRepN'
p4422
I37
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4423
I11
sS'.thisN'
p4424
I566
sg25
S'Y'
sg15
(lp4425
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4426
S'space'
p4427
asg94
I14
sS'.thisIndex'
p4428
I14
sa(dp4429
g16
(lp4430
S'k'
asg18
S'Y'
sS'.thisRepN'
p4431
I37
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4432
I12
sS'.thisN'
p4433
I567
sg25
S'Y'
sg15
(lp4434
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg94
I8
sS'.thisIndex'
p4435
I8
sa(dp4436
g16
(lp4437
S'd'
asg18
S'N'
sS'.thisRepN'
p4438
I37
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4439
I13
sS'.thisN'
p4440
I568
sg25
S'Y'
sg15
(lp4441
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg94
I2
sS'.thisIndex'
p4442
I2
sa(dp4443
g16
(lp4444
S'k'
asg18
S'N'
sS'.thisRepN'
p4445
I37
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4446
I14
sS'.thisN'
p4447
I569
sg25
S'Y'
sg15
(lp4448
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg94
I5
sS'.thisIndex'
p4449
I5
sa(dp4450
g16
(lp4451
S'd'
asg18
S'N'
sS'.thisRepN'
p4452
I38
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4453
I0
sS'.thisN'
p4454
I570
sg25
S'Y'
sg15
(lp4455
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4456
S'space'
p4457
asg94
I3
sS'.thisIndex'
p4458
I3
sa(dp4459
g16
(lp4460
S'd'
asg18
S'Y'
sS'.thisRepN'
p4461
I38
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4462
I1
sS'.thisN'
p4463
I571
sg25
S'Y'
sg15
(lp4464
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg94
I9
sS'.thisIndex'
p4465
I9
sa(dp4466
g16
(lp4467
S'k'
asg18
S'N'
sS'.thisRepN'
p4468
I38
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4469
I2
sS'.thisN'
p4470
I572
sg25
S'Y'
sg15
(lp4471
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4472
S'space'
p4473
asg94
I11
sS'.thisIndex'
p4474
I11
sa(dp4475
g16
(lp4476
S'k'
asg18
S'Y'
sS'.thisRepN'
p4477
I38
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4478
I3
sS'.thisN'
p4479
I573
sg25
S'Y'
sg15
(lp4480
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg94
I10
sS'.thisIndex'
p4481
I10
sa(dp4482
g16
(lp4483
S'k'
asg18
S'Y'
sS'.thisRepN'
p4484
I38
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4485
I4
sS'.thisN'
p4486
I574
sg25
S'Y'
sg15
(lp4487
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg94
I2
sS'.thisIndex'
p4488
I2
sa(dp4489
g18
S'N'
sS'.thisRepN'
p4490
I38
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4491
I5
sS'.thisN'
p4492
I575
sg25
S'Y'
sg15
Nsg30
VF
sg17
g2823
sg14
I12
sg19
Nsg94
I13
sS'.thisIndex'
p4493
I13
sa(dp4494
g16
(lp4495
S'k'
asg18
S'Y'
sS'.thisRepN'
p4496
I38
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4497
I6
sS'.thisN'
p4498
I576
sg25
S'Y'
sg15
(lp4499
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg94
I8
sS'.thisIndex'
p4500
I8
sa(dp4501
g16
(lp4502
S'd'
asg18
S'Y'
sS'.thisRepN'
p4503
I38
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4504
I7
sS'.thisN'
p4505
I577
sg25
S'Y'
sg15
(lp4506
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg94
I6
sS'.thisIndex'
p4507
I6
sa(dp4508
g16
(lp4509
S'd'
asg18
S'Y'
sS'.thisRepN'
p4510
I38
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4511
I8
sS'.thisN'
p4512
I578
sg25
S'Y'
sg15
(lp4513
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg94
I3
sS'.thisIndex'
p4514
I3
sa(dp4515
g16
(lp4516
S'd'
asg18
S'N'
sS'.thisRepN'
p4517
I38
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4518
I9
sS'.thisN'
p4519
I579
sg25
S'Y'
sg15
(lp4520
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg94
I14
sS'.thisIndex'
p4521
I14
sa(dp4522
g16
(lp4523
S'k'
asg18
S'N'
sS'.thisRepN'
p4524
I38
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4525
I10
sS'.thisN'
p4526
I580
sg25
S'Y'
sg15
(lp4527
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg94
I10
sS'.thisIndex'
p4528
I10
sa(dp4529
g16
(lp4530
S'k'
asg18
S'N'
sS'.thisRepN'
p4531
I38
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4532
I11
sS'.thisN'
p4533
I581
sg25
S'Y'
sg15
(lp4534
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg94
I14
sS'.thisIndex'
p4535
I14
sa(dp4536
g16
(lp4537
S'd'
asg18
S'Y'
sS'.thisRepN'
p4538
I38
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4539
I12
sS'.thisN'
p4540
I582
sg25
S'Y'
sg15
(lp4541
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4542
S'space'
p4543
asg94
I7
sS'.thisIndex'
p4544
I7
sa(dp4545
g16
(lp4546
S'k'
asg18
S'N'
sS'.thisRepN'
p4547
I38
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4548
I13
sS'.thisN'
p4549
I583
sg25
S'Y'
sg15
(lp4550
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg94
I7
sS'.thisIndex'
p4551
I7
sa(dp4552
g16
(lp4553
S'd'
asg18
S'Y'
sS'.thisRepN'
p4554
I38
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4555
I14
sS'.thisN'
p4556
I584
sg25
S'Y'
sg15
(lp4557
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4558
S'space'
p4559
asg94
I4
sS'.thisIndex'
p4560
I4
sa(dp4561
g16
(lp4562
S'd'
asg18
S'Y'
sS'.thisRepN'
p4563
I39
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4564
I0
sS'.thisN'
p4565
I585
sg25
S'Y'
sg15
(lp4566
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4567
S'space'
p4568
asg94
I13
sS'.thisIndex'
p4569
I13
sa(dp4570
g16
(lp4571
S'k'
asg18
S'N'
sS'.thisRepN'
p4572
I39
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4573
I1
sS'.thisN'
p4574
I586
sg25
S'Y'
sg15
(lp4575
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4576
S'space'
p4577
asg94
I8
sS'.thisIndex'
p4578
I8
sa(dp4579
g16
(lp4580
S'd'
asg18
S'N'
sS'.thisRepN'
p4581
I39
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4582
I2
sS'.thisN'
p4583
I587
sg25
S'Y'
sg15
(lp4584
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg94
I10
sS'.thisIndex'
p4585
I10
sa(dp4586
g16
(lp4587
S'k'
asg18
S'N'
sS'.thisRepN'
p4588
I39
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4589
I3
sS'.thisN'
p4590
I588
sg25
S'Y'
sg15
(lp4591
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg94
I14
sS'.thisIndex'
p4592
I14
sa(dp4593
g16
(lp4594
S'k'
asg18
S'N'
sS'.thisRepN'
p4595
I39
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4596
I4
sS'.thisN'
p4597
I589
sg25
S'Y'
sg15
(lp4598
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4599
S'space'
p4600
asg94
I3
sS'.thisIndex'
p4601
I3
sa(dp4602
g16
(lp4603
S'd'
asg18
S'Y'
sS'.thisRepN'
p4604
I39
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4605
I5
sS'.thisN'
p4606
I590
sg25
S'Y'
sg15
(lp4607
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4608
S'space'
p4609
asg94
I0
sS'.thisIndex'
p4610
I0
sa(dp4611
g16
(lp4612
S'd'
asg18
S'Y'
sS'.thisRepN'
p4613
I39
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4614
I6
sS'.thisN'
p4615
I591
sg25
S'Y'
sg15
(lp4616
S'd'
asg30
VF
sg17
S'N'
sg14
I12
sg19
Nsg94
I13
sS'.thisIndex'
p4617
I13
sa(dp4618
g16
(lp4619
S'k'
asg18
S'Y'
sS'.thisRepN'
p4620
I39
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4621
I7
sS'.thisN'
p4622
I592
sg25
S'Y'
sg15
(lp4623
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4624
S'space'
p4625
asg94
I8
sS'.thisIndex'
p4626
I8
sa(dp4627
g16
(lp4628
S'k'
asg18
S'Y'
sS'.thisRepN'
p4629
I39
sg26
S'Y'
sg20
S'N'
sg31
V
sS'.thisTrialN'
p4630
I8
sS'.thisN'
p4631
I593
sg25
S'Y'
sg15
(lp4632
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4633
S'd'
asg94
I10
sS'.thisIndex'
p4634
I10
sa(dp4635
g16
(lp4636
S'd'
asg18
S'Y'
sS'.thisRepN'
p4637
I39
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4638
I9
sS'.thisN'
p4639
I594
sg25
S'Y'
sg15
(lp4640
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4641
S'space'
p4642
asg94
I12
sS'.thisIndex'
p4643
I12
sa(dp4644
g16
(lp4645
S'd'
asg18
S'Y'
sS'.thisRepN'
p4646
I39
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4647
I10
sS'.thisN'
p4648
I595
sg25
S'Y'
sg15
(lp4649
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4650
S'space'
p4651
asg94
I9
sS'.thisIndex'
p4652
I9
sa(dp4653
g16
(lp4654
S'd'
asg18
S'Y'
sS'.thisRepN'
p4655
I39
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4656
I11
sS'.thisN'
p4657
I596
sg25
S'Y'
sg15
(lp4658
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4659
S'space'
p4660
asg94
I2
sS'.thisIndex'
p4661
I2
sa(dp4662
g16
(lp4663
S'k'
asg18
S'Y'
sS'.thisRepN'
p4664
I39
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4665
I12
sS'.thisN'
p4666
I597
sg25
S'Y'
sg15
(lp4667
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
(lp4668
S'space'
p4669
asg94
I1
sS'.thisIndex'
p4670
I1
sa(dp4671
g16
(lp4672
S'd'
asg18
S'N'
sS'.thisRepN'
p4673
I39
sg26
S'Y'
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4674
I13
sS'.thisN'
p4675
I598
sg25
S'Y'
sg15
(lp4676
S'k'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg94
I5
sS'.thisIndex'
p4677
I5
sa(dp4678
g16
(lp4679
S'k'
asg18
S'N'
sg22
I31
sg26
S'Y'
sS'.thisN'
p4680
I599
sg20
S'Y'
sg31
V
sS'.thisTrialN'
p4681
I14
sS'.thisRepN'
p4682
I39
sg21
I46
sg25
S'Y'
sg23
I25
sg15
(lp4683
S'd'
asg30
VF
sg17
S'Y'
sg14
I12
sg19
Nsg94
I9
sS'.thisIndex'
p4684
I9
sasS'loops'
p4685
(lp4686
g1
(g34
g3
NtRp4687
(dp4688
g37
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4689
sg39
(lp4690
sg40
I74560528
sg10
S''
sg6
g41
sg42
I1
sg27
I01
sg28
Nsg43
g1
(g44
g45
(dp4691
g47
g48
(g49
g50
g51
S'b'
tRp4692
(I1
(I600
I1
tg54
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg55
g48
(g49
g50
g51
S'b'
tRp4693
(I1
(I600
I1
tg54
I00
S'\x00\x80\x9eC\x00\x80\xa2C\x00\x80\xabC\x00\xc0\x13D\x00\x001C\x00\x00\xa7C\x00\x004B\x00\x80\xedC\x00\x00\xf8C\x00\x00\x0fC\x00\x80\xb5C\x00\x00\x15D\x00\x80\x83C\x00\x80\xf3C\x00\x00\xf8B\x00\x00\xeaB\x00\x00\x80B\x00\x00jC\x00\x00\x81C\x00\x80\xa0C\x00\x00\x9eC\x00\x00\x8cC\x00\x00\xfeB\x00\x80\xadC\x00\x00\x12D\x00\x00\xe0@\x00\x00bC\x00\x00\xf9C\x00\x00\x9cC\x00\x00\xd0B\x00\x00MC\x00\x80\xf7C\x00\x00\x92B\x00\x80\xe9C\x00\x00SC\x00\x00\xa4B\x00\x00\x00\x00\x00\x00\x9aB\x00\x80\x04D\x00\x00\xf1C\x00\x00\xc8B\x00\xc0\tD\x00\x80\xd9C\x00\x00BC\x00\x80\x8cC\x00\x80\x9aC\x00\x80\x8fC\x00\x00\xe2C\x00\x00VC\x00\x80\x80C\x00\x00\xaeC\x00\x80\x15D\x00\x00\xfcB\x00\xc0\x10D\x00\x00\x05D\x00\x00\x9eB\x00\x00zC\x00\x00qC\x00\x00\xc0B\x00\x00WC\x00@\nD\x00@\x0cD\x00\x00gC\x00\x80\x0eD\x00\x008C\x00\x00pB\x00\x00\x9aC\x00@\x05D\x00\x00[C\x00\x00IC\x00\x00YC\x00\x00\xe7C\x00\x80\xbeC\x00\x80\xb3C\x00\x00\xf4B\x00\x00\xb0A\x00\x00\x80?\x00\x00\x01C\x00\x00\xc8A\x00\x00\x1aC\x00\x80\x85C\x00\x00\xbbC\x00\x00sC\x00\x80\xf4C\x00\x80\x0bD\x00\x80\xa9C\x00\x80\x91C\x00\x00\xb5C\x00\x00pC\x00\x80\xbbC\x00\x00\xb6B\x00\x80\xf9C\x00\x00lB\x00\x00cC\x00\x00CC\x00\x80\xebC\x00\x00/C\x00\x00\xfaC\x00\x00;C\x00\x80\x05D\x00\x00yC\x00\x00\xffC\x00\x00\xbeB\x00\x80\xa7C\x00\x00\xe4B\x00\x00(B\x00\x00\x95C\x00\x80\x9cC\x00\xc0\nD\x00\x00\xb8C\x00\x80\xbdC\x00@\x08D\x00\x00\xeeB\x00\x80\xefC\x00\x00\xcbC\x00\x80\xd2C\x00\x80\x81C\x00\x80\x8aC\x00\x00LB\x00\x00\xe6C\x00\x80\xd3C\x00\x00\tC\x00\x80\x8dC\x00\x80\xacC\x00\x00\rD\x00\x00\xf2C\x00\x00\xe2B\x00\x80\x0cD\x00\x00`A\x00\x00@B\x00\x00\xa0@\x00\x00\xe0A\x00\x80\x98C\x00\x80\x89C\x00\x00\x03D\x00\x00\xd2B\x00\x00\x07D\x00\x00\xd8B\x00\x00iC\x00\x00\xb2B\x00\x00uC\x00\x00dB\x00\x00\xa1C\x00\x00 A\x00\x80\xccC\x00@\x02D\x00\x00\x10B\x00\x00\xe3C\x00\x80\x08D\x00\x80\xd5C\x00\x00\xe9C\x00\x80\xf1C\x00\x80\x9bC\x00\x00\xc6C\x00\x80\xafC\x00\x80\xc1C\x00\x00\xdeC\x00@\x00D\x00\x80\xf8C\x00\x00\xa8B\x00\x00\xecB\x00\x00\xd2C\x00\x80\x86C\x00\x00\x04B\x00\x00\xaeB\x00\x00xC\x00\x80\xfcC\x00\x00%C\x00\x00\x00D\x00\x80\xceC\x00\x00\xc4C\x00\x00\x0eD\x00\x00\x86C\x00\x00\xcaB\x00\x00hC\x00\x00\x05C\x00\xc0\x0bD\x00\x80\xddC\x00\x00\xdfC\x00\x00\xf3C\x00\x00\x0cC\x00\x00\xc2C\x00\x00\x8aC\x00\x002C\x00\x80\xe3C\x00\x00\xabC\x00\x00\x90B\x00\x004C\x00@\x04D\x00\x80\xb6C\x00\x80\xb9C\x00\x00\xfbC\x00\x00KC\x00\x00\xebC\x00\x00_C\x00\x80\xdbC\x00\x00\x98C\x00\x00\xb1C\x00\x00,C\x00\x00\x10A\x00\x80\xb2C\x00\x00hB\x00\x80\x10D\x00\x00QC\x00\x00\xf4C\x00\x00\xd3C\x00\x00pA\x00\xc0\x0cD\x00\x80\xdfC\x00\x80\xbfC\x00\xc0\x12D\x00\x00\xc0A\x00\x80\xffC\x00\x00\xb6C\x00\x80\x14D\x00\x00\x84B\x00\x00vC\x00\x80\x03D\x00\x80\xc9C\x00\x80\x88C\x00@\x0bD\x00\x00\xbaB\x00\x00$B\x00\x00\xacB\x00\x00TB\x00\x00\x80@\x00\x00RC\x00\x00\x80C\x00\x00\xd7C\x00\x80\x11D\x00\x00\x91C\x00\x00\x97C\x00\x80\xcaC\x00\x80\x92C\x00\x00eC\x00\x80\xfbC\x00\x00\x8cB\x00\x80\x06D\x00\x00\xa0C\x00\x00\xe8C\x00\x00\xb4C\x00\x00\x8bC\x00\x00\xcaC\x00@\x12D\x00\x00\xc3C\x00\x00aC\x00\x00\xf5C\x00\x80\xa6C\x00\x80\xfaC\x00\x00\xb0C\x00\x00\xcfC\x00\xc0\x14D\x00\x00\x00B\x00\x00TC\x00\x00\x1dC\x00\x00PA\x00\x00\x00@\x00\x00lC\x00\x00\xdeB\x00\x00\xecC\x00\x00\xf0B\x00\x00\x86B\x00\x80\xd1C\x00\x00nC\x00@\rD\x00@\x10D\x00\x00`B\x00\x00kC\x00\x00JC\x00\x00\xb3C\x00\x80\xe4C\x00\x80\xc7C\x00\x00-C\x00\x007C\x00\x00\x14B\x00\xc0\x0eD\x00\x80\xa4C\x00\x00\x08D\x00\x80\xd7C\x00\x00\xb2C\x00\x00\xf2B\x00\x80\x99C\x00\x80\xeeC\x00\x80\xbaC\x00\x00\xd8A\x00\x00\x9dC\x00\x80\xd0C\x00\x00\x85C\x00\x00\x18C\x00\x00&C\x00\x00\xefC\x00\x00\xa9C\x00\x00PB\x00\x00.C\x00\x00\x96B\x00\x80\x13D\x00\x00\xa6C\x00\x00=C\x00\x00?C\x00\x00\xf6C\x00\x00\xc0C\x00\x00|B\x00\x00@@\x00@\tD\x00\x80\xe0C\x00\x00\x1cC\x00\x00\xa4C\x00\x00\x88C\x00\x80\xe1C\x00\x00\x1cB\x00\x80\xd6C\x00\x00\x06D\x00\x00\x90A\x00\x00\x04D\x00\x00~C\x00\x00\xf8A\x00\x80\x02D\x00\x00\x00C\x00\x00\x89C\x00\x80\nD\x00@\x11D\x00\x80\x95C\x00\x00\xbcC\x00\x80\xd4C\x00\x00\nD\x00\x00\xd0A\x00\x00\x00A\x00\x80\xfdC\x00\x80\xb7C\x00\x00\xc6B\x00\x80\xeaC\x00\x00HB\x00\x80\tD\x00\xc0\x04D\x00\x00>C\x00\xc0\rD\x00\x00<B\x00\x80\xfeC\x00\x00\x06C\x00\x00"C\x00\x80\x07D\x00\x00\x17C\x00\x000A\x00\x00\xd0C\x00@\x03D\x00\xc0\x03D\x00\x00\xbeC\x00\xc0\x08D\x00\x00\x0cB\x00\x00!C\x00\x00\x11C\x00\x00\xceC\x00\x00\xd6B\x00\x00\x84C\x00\x00AC\x00\x00\xaaB\x00\x80\xaeC\x00\x00DC\x00\x00)C\x00\x80\xcfC\x00\x00\xd4C\x00\x00\xbaC\x00@\x0eD\x00\x00\xb8A\x00\x00\xd6C\x00\x00\x01D\x00\xc0\x06D\x00\x00\xd8C\x00\x00xB\x00\x00\x98A\x00\x00\'C\x00\x00\xadC\x00\xc0\x07D\x00\x80\x9dC\x00\x00wC\x00\x00,B\x00\x80\xdcC\x00\x80\x0fD\x00\x00\x16C\x00\x80\xa8C\x00\x00\xeaC\x00@\x15D\x00\x00\xf6B\x00\x00FC\x00\x00(C\x00\x00{C\x00\x80\xa5C\x00\x00\x8aB\x00\x00mC\x00\x00\x8dC\x00\x00\x02C\x00\x00\x0eC\x00\x80\x8bC\x00\x00HC\x00\x00\x0cD\x00\x00\x98B\x00\x00dC\x00\x00\x82C\x00\x00}C\x00\x00\xa3C\x00\x00\xb9C\x00\x00\x8fC\x00\x00\xc2B\x00\x80\xcbC\x00\x00\x1eC\x00\x00oC\x00\x00\xbfC\x00\x00\xcdC\x00@\x13D\x00\x80\x90C\x00\x00\xfdC\x00\x00\xaaC\x00\x005C\x00\x00:C\x00\x00\xa8A\x00\x00\xc5C\x00\x00\xfeC\x00\x00\x94C\x00\x00\x08B\x00\x00\x14D\x00\x80\x97C\x00\x80\xf2C\x00\x00\xc7C\x00@\x06D\x00\x00\x7fC\x00\x80\xb8C\x00\xc0\x02D\x00\x80\xc4C\x00\x80\xf0C\x00\x00\xc9C\x00\x00\x0bD\x00\x00\xdbC\x00\x00\x08C\x00\x00\xf0C\x00\x00@C\x00\x00\xe8B\x00\x80\x9fC\x00\xc0\x00D\x00\x80\xc8C\x00\x00\xd4B\x00\x00^C\x00\x00DB\x00\x80\xc2C\x00\x00\x14C\x00\x80\xf5C\x00\x00UC\x00\x80\xe2C\x00\x80\xc3C\x00\x00\x9cB\x00\x80\x00D\x00\x00\xccB\x00\x80\x8eC\x00\x80\x87C\x00\x00+C\x00\x000C\x00\x00\x19C\x00\x00\xa8C\x00\x00\x02D\x00\x00\xfcC\x00\x00\xceB\x00\x00tB\x00\x006C\x00\x00<C\x00\x00\xdcB\x00\x80\rD\x00\x00\xe8A\x00\x00\nC\x00\x00\x87C\x00\x00$C\x00\x80\xa1C\x00\x008B\x00\x00\x10C\x00\x00\x10D\x00\x80\xd8C\x00\x00 B\x00\x80\xe6C\x00\x00\xc0@\x00\x00\x13C\x00\x00\xf0A\x00\x00|C\x00\x009C\x00\x00PC\x00\x80\x01D\x00\x00\\B\x00\x80\xdaC\x00\x80\xf6C\x00\x00\xe0C\x00\x80\xdeC\x00\x80\xaaC\x00\x00\xa2C\x00\x00\x93C\x00\x80\xa3C\x00\x00\x99C\x00\xc0\x11D\x00\x00\x9bC\x00\x80\xe5C\x00\x00]C\x00\x00tC\x00\x80\xc5C\x00\x00\x15C\x00\x80\xc6C\x00\x00\\C\x00@\x07D\x00\x00\xa5C\x00\x00OC\x00@\x14D\x00\x00\xa2B\x00\x00\x88B\x00\x00rC\x00\xc0\x15D\x00\x00ZC\x00\x00\x94B\x00\x00\xeeC\x00\x00\xd1C\x00\x80\xbcC\x00\x00\xf7C\x00\xc0\x01D\x00\x000B\x00\x00\x1bC\x00\x00XB\x00\x00\x88A\x00\x00\tD\x00\x00\xbdC\x00@\x0fD\x00\x00LC\x00\x00\xe1C\x00\x00XC\x00\x80\xe8C\x00\x80\x94C\x00\x00#C\x00\x00\xa6B\x00\x00\xa0B\x00\x00\xd5C\x00\x80\xb4C\x00\x00\xb4B\x00\x00NC\x00\x00\x0fD\x00\x80\xc0C\x00\x80\xecC\x00\x80\x96C\x00\x00\xdaC\x00\x00\xe5C\x00\x80\xb1C\x00\x00\x8eB\x00\x80\x84C\x00\x00\x12C\x00\x00\x96C\x00\x00GC\x00\x00`C\x00\x80\x93C\x00\x00\xa0A\x00\xc0\x0fD\x00\x00\xb8B\x00\x00\xddC\x00\x003C\x00\x00\x11D\x00\x00\xccC\x00\x80\x12D\x00\x00\x8eC\x00\x00\xe0B\x00\x00\xe4C\x00\x00\x0bC\x00\x00\xacC\x00\x00\xb7C\x00\x00\xfaB\x00\x00\xdcC\x00\x00\x03C\x00\x00\x92C\x00\x00\x04C\x00\x80\xcdC\x00\x00\x07C\x00\x00fC\x00\x00EC\x00\x00\x80A\x00\x00\x18B\x00\x00\xb0B\x00\x00\xc8C\x00\x00\xbcB\x00\x00\x9fC\x00\x00 C\x00\x00@A\x00\x00\xc1C\x00\x00\xdaB\x00\x80\xb0C\x00\x00\x90C\x00\x00*C\x00\x80\x82C\x00\x00\x13D\x00\x00\xedC\x00\x00\x1fC\x00\x00\xc4B\x00\x00\x82B\x00@\x01D\x00\xc0\x05D\x00\x00\rC\x00\x00\xafC\x00\x80\xe7C\x00\x00\xe6B\x00\x00\x83C\x00\x00\xd9C'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4694
(dp4695
g59
(dp4696
g47
I01
sg55
I01
ssg61
g4687
sg62
(lp4697
g47
ag55
asg64
(lp4698
I600
aI1
asbsg66
S'random'
p4699
sg68
g69
(g50
(I0
tS'b'
tRp4700
(I1
(I600
I1
tg53
(S'i4'
I0
I1
tRp4701
(I3
S'<'
NNNI-1
I-1
I0
tbI01
S'$\x00\x00\x00L\x00\x00\x00\x00\x01\x00\x00.\x01\x00\x00\xe1\x00\x00\x00\x82\x00\x00\x00\xdc\x01\x00\x00\x19\x00\x00\x00F\x01\x00\x00\xc7\x00\x00\x00\x8f\x00\x00\x00V\x01\x00\x00D\x02\x00\x00\xff\x00\x00\x00\x80\x00\x00\x00\xce\x00\x00\x00=\x02\x00\x00\x08\x02\x00\x008\x01\x00\x00q\x01\x00\x00&\x02\x00\x00\x9e\x01\x00\x00K\x00\x00\x00k\x01\x00\x00\xd3\x00\x00\x00N\x00\x00\x00E\x01\x00\x00\x1c\x01\x00\x00\x83\x00\x00\x00\xd1\x01\x00\x00\xde\x01\x00\x00;\x01\x00\x00\xfc\x00\x00\x00\xa3\x00\x00\x00\xa2\x01\x00\x00\\\x01\x00\x00\x92\x00\x00\x00\x12\x01\x00\x00>\x02\x00\x005\x01\x00\x00\xda\x01\x00\x00\xde\x00\x00\x00i\x00\x00\x00w\x01\x00\x00\x05\x02\x00\x00\x06\x00\x00\x00\xd6\x01\x00\x00P\x01\x00\x00\x81\x00\x00\x00\xb9\x01\x00\x00K\x01\x00\x00v\x00\x00\x00$\x01\x00\x00\xe0\x00\x00\x00\x07\x02\x00\x00\xe3\x01\x00\x00\n\x01\x00\x00\x8d\x00\x00\x00\xc9\x00\x00\x00\\\x00\x00\x00A\x00\x00\x00\xcc\x01\x00\x00p\x01\x00\x00-\x01\x00\x00\x10\x00\x00\x00O\x02\x00\x00\xd7\x00\x00\x00\x05\x01\x00\x00\xfb\x01\x00\x00\x83\x01\x00\x00\xec\x00\x00\x00\x1f\x02\x00\x00\xba\x00\x00\x00 \x00\x00\x00\xff\x01\x00\x00&\x01\x00\x00\x8b\x01\x00\x00%\x00\x00\x00\xc0\x01\x00\x007\x00\x00\x00\x13\x02\x00\x00\xfa\x01\x00\x00#\x00\x00\x00\x12\x02\x00\x00\x9f\x00\x00\x00c\x01\x00\x00\xdf\x00\x00\x00\xa4\x00\x00\x00?\x02\x00\x00\x8b\x00\x00\x00\x16\x02\x00\x00Z\x00\x00\x00(\x02\x00\x00\xdd\x00\x00\x00A\x02\x00\x00f\x00\x00\x00:\x00\x00\x00\x92\x01\x00\x00N\x02\x00\x00I\x01\x00\x00(\x00\x00\x00\xad\x00\x00\x00\xc2\x01\x00\x00\xcb\x01\x00\x00\x1d\x00\x00\x00\x87\x00\x00\x00\xb7\x01\x00\x00`\x01\x00\x00\x89\x00\x00\x00F\x02\x00\x00\xcf\x01\x00\x00\x02\x01\x00\x00/\x02\x00\x00~\x00\x00\x00h\x00\x00\x00U\x02\x00\x00\xb3\x01\x00\x00\x0f\x00\x00\x00\xa0\x00\x00\x00p\x00\x00\x00\x04\x01\x00\x00\x18\x01\x00\x00J\x00\x00\x00~\x01\x00\x00\x0e\x00\x00\x004\x02\x00\x004\x00\x00\x00\x16\x00\x00\x00=\x01\x00\x00M\x00\x00\x00\x86\x01\x00\x006\x02\x00\x008\x02\x00\x00\xaf\x00\x00\x00R\x01\x00\x00:\x02\x00\x00\xb0\x01\x00\x00y\x00\x00\x00\xd2\x01\x00\x001\x02\x00\x00\xb4\x00\x00\x00R\x02\x00\x00\x87\x01\x00\x00\t\x00\x00\x00\xd7\x01\x00\x00^\x01\x00\x00!\x02\x00\x00\xdd\x01\x00\x00\xbb\x01\x00\x00\xf3\x01\x00\x00z\x01\x00\x00U\x01\x00\x00 \x01\x00\x00\xc7\x01\x00\x00O\x00\x00\x00\x06\x02\x00\x001\x01\x00\x00\xfe\x00\x00\x00\x94\x01\x00\x00M\x02\x00\x00C\x02\x00\x00]\x01\x00\x00S\x01\x00\x00\x11\x02\x00\x00\xd4\x01\x00\x00\xa7\x00\x00\x00!\x01\x00\x00r\x01\x00\x00\x80\x01\x00\x00f\x01\x00\x00I\x02\x00\x00\xc5\x01\x00\x00\xc6\x00\x00\x00\x10\x01\x00\x00%\x01\x00\x00`\x00\x00\x00\xc6\x01\x00\x00\x04\x00\x00\x00\xb7\x00\x00\x00*\x02\x00\x00\xbb\x00\x00\x00\x9c\x01\x00\x00\xcd\x01\x00\x00\x11\x01\x00\x00@\x00\x00\x00\xe0\x01\x00\x00\x9d\x01\x00\x00b\x00\x00\x00\xce\x01\x00\x00)\x01\x00\x00N\x01\x00\x00*\x01\x00\x00\xb2\x01\x00\x00b\x01\x00\x00+\x00\x00\x00^\x00\x00\x00e\x01\x00\x00<\x02\x00\x00\x7f\x01\x00\x00#\x02\x00\x00\x89\x01\x00\x00E\x00\x00\x00\x0c\x01\x00\x00\xc0\x00\x00\x00\x0c\x02\x00\x00\x1e\x00\x00\x00\x17\x02\x00\x00\xf8\x01\x00\x00\xe1\x01\x00\x00\xcb\x00\x00\x00\xe2\x00\x00\x00"\x00\x00\x00\xfd\x00\x00\x00\xbd\x01\x00\x000\x00\x00\x00;\x00\x00\x00\x0e\x02\x00\x00F\x00\x00\x00\xfe\x01\x00\x00D\x00\x00\x00\xf5\x01\x00\x00\xf0\x01\x00\x00\xb8\x01\x00\x00\xc2\x00\x00\x00$\x02\x00\x00\xf5\x00\x00\x00\x1a\x00\x00\x00]\x00\x00\x00\x8c\x01\x00\x00\xea\x00\x00\x00;\x02\x00\x00>\x00\x00\x00\xae\x00\x00\x00\x8a\x00\x00\x00\x11\x00\x00\x00\x0b\x01\x00\x00\x01\x01\x00\x00\x84\x01\x00\x00\x07\x01\x00\x00\x95\x01\x00\x00X\x00\x00\x009\x00\x00\x00\xfc\x01\x00\x00R\x00\x00\x00\xf1\x01\x00\x00\x8c\x00\x00\x00\xd8\x00\x00\x00v\x01\x00\x00\xa5\x00\x00\x00d\x00\x00\x008\x00\x00\x00\x81\x01\x00\x00\xdf\x01\x00\x00\x8e\x01\x00\x00:\x01\x00\x00\xa8\x01\x00\x00\xe3\x00\x00\x001\x00\x00\x00\x12\x00\x00\x00t\x00\x00\x00\x8d\x01\x00\x00J\x02\x00\x00V\x02\x00\x00\x0c\x00\x00\x00a\x01\x00\x00 \x02\x00\x00\x1f\x01\x00\x00P\x00\x00\x00\xac\x00\x00\x00\xa2\x00\x00\x00\xd3\x01\x00\x00\xc4\x01\x00\x003\x01\x00\x00\xdb\x00\x00\x00>\x01\x00\x00\x85\x00\x00\x00\xb6\x00\x00\x00u\x00\x00\x00\xf1\x00\x00\x00\x88\x01\x00\x00\x15\x00\x00\x00,\x00\x00\x00\x85\x01\x00\x00z\x00\x00\x00.\x02\x00\x00\xc3\x01\x00\x00\x91\x01\x00\x00.\x00\x00\x00H\x02\x00\x00\x99\x01\x00\x00\xe6\x00\x00\x00V\x00\x00\x007\x02\x00\x00\xe9\x00\x00\x00\xea\x01\x00\x00%\x02\x00\x00\xa1\x01\x00\x00\x10\x02\x00\x00j\x00\x00\x00A\x01\x00\x00"\x02\x00\x00\x1b\x02\x00\x00\xe7\x00\x00\x00\xa4\x01\x00\x00\xc4\x00\x00\x00\x84\x00\x00\x00\xec\x01\x00\x00\x19\x01\x00\x00B\x00\x00\x00-\x00\x00\x00\xee\x01\x00\x00\x98\x00\x00\x00\x1c\x00\x00\x00k\x00\x00\x00\x1d\x01\x00\x00u\x01\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00B\x02\x00\x00\xb4\x01\x00\x00\xee\x00\x00\x00\x13\x00\x00\x00\x8e\x00\x00\x00\xd5\x01\x00\x00\xe9\x01\x00\x00\x01\x00\x00\x00\x8f\x01\x00\x00\xeb\x01\x00\x002\x01\x00\x00\x14\x01\x00\x00\xf7\x01\x00\x00\x82\x01\x00\x00(\x01\x00\x00\xf7\x00\x00\x00\x05\x00\x00\x00g\x00\x00\x00\xc8\x01\x00\x00{\x01\x00\x00#\x01\x00\x00U\x00\x00\x00\x9b\x01\x00\x00\xe8\x01\x00\x00\xb9\x00\x00\x00\x02\x00\x00\x002\x02\x00\x00{\x00\x00\x00s\x01\x00\x00\x17\x00\x00\x002\x00\x00\x00d\x01\x00\x00S\x02\x00\x00\x9a\x00\x00\x00\xf9\x00\x00\x00G\x02\x00\x00\xc5\x00\x00\x00\x1e\x02\x00\x00\x17\x01\x00\x00\xc8\x00\x00\x00\r\x01\x00\x00I\x00\x00\x00\xf0\x00\x00\x00\x15\x02\x00\x00W\x00\x00\x00\n\x00\x00\x00\xd5\x00\x00\x00\xbd\x00\x00\x003\x02\x00\x00H\x01\x00\x00m\x00\x00\x00\xa9\x01\x00\x00\x90\x01\x00\x00\xbe\x00\x00\x00i\x01\x00\x00\x1b\x01\x00\x00Q\x00\x00\x00Y\x00\x00\x00B\x01\x00\x00\x02\x02\x00\x00\n\x02\x00\x00n\x00\x00\x00Z\x01\x00\x00H\x00\x00\x00\x96\x01\x00\x00\xd1\x00\x00\x00,\x01\x00\x00\x19\x02\x00\x00E\x02\x00\x00\x9b\x00\x00\x00\xb5\x00\x00\x00\xba\x01\x00\x00\xf4\x00\x00\x00\xbf\x01\x00\x00\xaa\x00\x00\x00\xab\x01\x00\x00\x9f\x01\x00\x00\xf2\x01\x00\x00\x99\x00\x00\x00\xf4\x01\x00\x00\xa6\x01\x00\x00\x0f\x01\x00\x00@\x02\x00\x00\xb6\x01\x00\x00\xad\x01\x00\x00\xda\x00\x00\x00\xf2\x00\x00\x00\xe8\x00\x00\x00r\x00\x00\x00\x93\x01\x00\x00,\x02\x00\x00\x90\x00\x00\x00\x97\x01\x00\x009\x02\x00\x00_\x01\x00\x00\xa9\x00\x00\x00\xfa\x00\x00\x00g\x01\x00\x00W\x01\x00\x00\x1e\x01\x00\x00\x01\x02\x00\x00\x06\x01\x00\x00\xa1\x00\x00\x00s\x00\x00\x00\xcd\x00\x00\x00x\x00\x00\x00h\x01\x00\x00C\x01\x00\x00\x14\x02\x00\x00\x95\x00\x00\x00l\x01\x00\x006\x01\x00\x00\xe4\x00\x00\x00\x16\x01\x00\x00o\x01\x00\x00\xd9\x01\x00\x00W\x02\x00\x00*\x00\x00\x00\x1c\x02\x00\x00\xe4\x01\x00\x00\xaf\x01\x00\x00\xc3\x00\x00\x005\x02\x00\x00x\x01\x00\x00)\x02\x00\x00\xb1\x00\x00\x00\x9c\x00\x00\x00\xe7\x01\x00\x00\xb2\x00\x00\x00\xd0\x00\x00\x00\xe6\x01\x00\x000\x01\x00\x00\r\x02\x00\x004\x01\x00\x00/\x00\x00\x00\xbe\x01\x00\x00\x93\x00\x00\x00\xb8\x00\x00\x000\x02\x00\x00\x0e\x01\x00\x00\x1d\x02\x00\x00\xef\x01\x00\x00w\x00\x00\x00\xdb\x01\x00\x00G\x00\x00\x00T\x02\x00\x00\xef\x00\x00\x00\x0f\x02\x00\x00\x96\x00\x00\x00!\x00\x00\x00|\x01\x00\x00J\x01\x00\x00\xc1\x00\x00\x00_\x00\x00\x00\x03\x01\x00\x00\x1a\x02\x00\x00L\x02\x00\x00\x07\x00\x00\x00\x00\x02\x00\x00\x1a\x01\x00\x00"\x01\x00\x00q\x00\x00\x00\xb1\x01\x00\x00\xac\x01\x00\x00\'\x00\x00\x00\x97\x00\x00\x00}\x00\x00\x00\xa5\x01\x00\x00\xb3\x00\x00\x00\r\x00\x00\x00\xcc\x00\x00\x00S\x00\x00\x00\xf6\x00\x00\x00\xbc\x01\x00\x00+\x01\x00\x00\xe5\x01\x00\x00\x03\x02\x00\x00\x1f\x00\x00\x00\x08\x00\x00\x00\x9e\x00\x00\x00\x1b\x00\x00\x00[\x00\x00\x00a\x00\x00\x00\xf8\x00\x00\x00\xbf\x00\x00\x00\xeb\x00\x00\x00\xca\x01\x00\x00\xa6\x00\x00\x00\x9a\x01\x00\x00G\x01\x00\x00\xa0\x01\x00\x00Q\x01\x00\x00e\x00\x00\x00\xd4\x00\x00\x00\xa8\x00\x00\x00\x9d\x00\x00\x00\xc1\x01\x00\x00\xb5\x01\x00\x00m\x01\x00\x00P\x02\x00\x00\xe2\x01\x00\x00\x04\x02\x00\x00\xc9\x01\x00\x00\x91\x00\x00\x00<\x01\x00\x00\xaa\x01\x00\x00\x86\x00\x00\x00X\x01\x00\x00\xd9\x00\x00\x00Y\x01\x00\x009\x01\x00\x00\xbc\x00\x00\x00&\x00\x00\x00M\x01\x00\x006\x00\x00\x00C\x00\x00\x00c\x00\x00\x00Q\x02\x00\x007\x01\x00\x00\xa7\x01\x00\x00\xed\x00\x00\x00n\x01\x00\x00\x88\x00\x00\x00\xf6\x01\x00\x00T\x01\x00\x00t\x01\x00\x00\x15\x01\x00\x00o\x00\x00\x00\x94\x00\x00\x00[\x01\x00\x00\t\x02\x00\x00/\x01\x00\x00L\x01\x00\x00)\x00\x00\x00D\x01\x00\x00<\x00\x00\x00?\x01\x00\x00l\x00\x00\x00\xae\x01\x00\x00\xdc\x00\x00\x00T\x00\x00\x00\xb0\x00\x00\x00\x8a\x01\x00\x00=\x00\x00\x00\x7f\x00\x00\x00\xcf\x00\x00\x00|\x00\x00\x00\x08\x01\x00\x00\xd0\x01\x00\x00O\x01\x00\x00\xab\x00\x00\x00j\x01\x00\x00?\x00\x00\x00\x13\x01\x00\x00\x18\x02\x00\x00\x0b\x02\x00\x00y\x01\x00\x00\'\x02\x00\x00\xd8\x01\x00\x00\t\x01\x00\x00\xca\x00\x00\x005\x00\x00\x00+\x02\x00\x00@\x01\x00\x00\xe5\x00\x00\x00\xed\x01\x00\x00\x18\x00\x00\x00\xf3\x00\x00\x00-\x02\x00\x00\xd2\x00\x00\x00K\x02\x00\x00\x98\x01\x00\x00\'\x01\x00\x00\x03\x00\x00\x00\xa3\x01\x00\x00\xf9\x01\x00\x00\xd6\x00\x00\x00\xfb\x00\x00\x00\x0b\x00\x00\x00}\x01\x00\x003\x00\x00\x00\xfd\x01\x00\x00'
tbsg73
I01
sg74
I1
sg75
I-1
sg76
(lp4702
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asg78
Nsg79
cnumpy.core.multiarray
scalar
p4703
(g4701
S'\xfd\x01\x00\x00'
tRp4704
sg80
I600
sg81
I0
sg82
I600
sg83
I01
sbag35
asS'savePickle'
p4705
I01
sb.