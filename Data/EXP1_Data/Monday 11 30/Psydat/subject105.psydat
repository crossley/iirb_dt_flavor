ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject105
p8
sS'runtimeInfo'
p9
NsS'name'
p10
Vsubject 105
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Button switch shown?'
p18
aS'Fast?'
p19
asS'autoLog'
p20
I01
sS'extraInfo'
p21
(dp22
S'gender'
p23
VF
sS'age'
p24
V21
p25
ssS'loopsUnfinished'
p26
(lp27
sS'saveWideText'
p28
I01
sS'thisEntry'
p29
(dp30
sS'version'
p31
S''
sS'_paramNamesSoFar'
p32
(lp33
sS'entries'
p34
(lp35
(dp36
g16
(lp37
S'k'
asS'.thisTrial'
p38
I528
sS'.thisRepN'
p39
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p40
I0
sS'.thisN'
p41
I0
sS'.thisIndex'
p42
cnumpy.core.multiarray
scalar
p43
(cnumpy
dtype
p44
(S'i4'
I0
I1
tRp45
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x10\x02\x00\x00'
tRp46
sg15
(lp47
S'd'
asg17
S'N'
sg14
I1
sa(dp48
g16
(lp49
S'd'
asg38
I7
sS'.thisRepN'
p50
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p51
I1
sS'.thisN'
p52
I1
sS'.thisIndex'
p53
g43
(g45
S'\x07\x00\x00\x00'
tRp54
sg15
(lp55
S'd'
asg17
S'Y'
sg14
I1
sa(dp56
g16
(lp57
S'k'
asg38
I479
sS'.thisRepN'
p58
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p59
I2
sS'.thisN'
p60
I2
sS'.thisIndex'
p61
g43
(g45
S'\xdf\x01\x00\x00'
tRp62
sg15
(lp63
S'k'
asg17
S'Y'
sg14
I1
sa(dp64
g16
(lp65
S'k'
asg38
I510
sS'.thisRepN'
p66
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p67
I3
sS'.thisN'
p68
I3
sS'.thisIndex'
p69
g43
(g45
S'\xfe\x01\x00\x00'
tRp70
sg15
(lp71
S'k'
asg17
S'Y'
sg14
I1
sa(dp72
g16
(lp73
S'k'
asg38
I339
sS'.thisRepN'
p74
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p75
I4
sS'.thisN'
p76
I4
sS'.thisIndex'
p77
g43
(g45
S'S\x01\x00\x00'
tRp78
sg15
(lp79
S'k'
asg17
S'Y'
sg14
I1
sa(dp80
g16
(lp81
S'd'
asg38
I76
sS'.thisRepN'
p82
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p83
I5
sS'.thisN'
p84
I5
sS'.thisIndex'
p85
g43
(g45
S'L\x00\x00\x00'
tRp86
sg15
(lp87
S'd'
asg17
S'Y'
sg14
I1
sa(dp88
g16
(lp89
S'k'
asg38
I549
sS'.thisRepN'
p90
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p91
I6
sS'.thisN'
p92
I6
sS'.thisIndex'
p93
g43
(g45
S'%\x02\x00\x00'
tRp94
sg15
(lp95
S'k'
asg17
S'Y'
sg14
I1
sa(dp96
g16
(lp97
S'k'
asg38
I414
sS'.thisRepN'
p98
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p99
I7
sS'.thisN'
p100
I7
sS'.thisIndex'
p101
g43
(g45
S'\x9e\x01\x00\x00'
tRp102
sg15
(lp103
S'd'
asg17
S'N'
sg14
I1
sa(dp104
g16
(lp105
S'k'
asg38
I436
sS'.thisRepN'
p106
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p107
I8
sS'.thisN'
p108
I8
sS'.thisIndex'
p109
g43
(g45
S'\xb4\x01\x00\x00'
tRp110
sg15
(lp111
S'd'
asg17
S'N'
sg14
I1
sa(dp112
g16
(lp113
S'd'
asg38
I24
sS'.thisRepN'
p114
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p115
I9
sS'.thisN'
p116
I9
sS'.thisIndex'
p117
g43
(g45
S'\x18\x00\x00\x00'
tRp118
sg15
(lp119
S'k'
asg17
S'N'
sg14
I1
sa(dp120
g16
(lp121
S'k'
asg38
I390
sS'.thisRepN'
p122
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p123
I10
sS'.thisN'
p124
I10
sS'.thisIndex'
p125
g43
(g45
S'\x86\x01\x00\x00'
tRp126
sg15
(lp127
S'k'
asg17
S'Y'
sg14
I1
sa(dp128
g16
(lp129
S'k'
asg38
I464
sS'.thisRepN'
p130
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p131
I11
sS'.thisN'
p132
I11
sS'.thisIndex'
p133
g43
(g45
S'\xd0\x01\x00\x00'
tRp134
sg15
(lp135
S'k'
asg17
S'Y'
sg14
I1
sa(dp136
g16
(lp137
S'd'
asg38
I57
sS'.thisRepN'
p138
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p139
I12
sS'.thisN'
p140
I12
sS'.thisIndex'
p141
g43
(g45
S'9\x00\x00\x00'
tRp142
sg15
(lp143
S'k'
asg17
S'N'
sg14
I1
sa(dp144
g16
(lp145
S'k'
asg38
I367
sS'.thisRepN'
p146
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p147
I13
sS'.thisN'
p148
I13
sS'.thisIndex'
p149
g43
(g45
S'o\x01\x00\x00'
tRp150
sg15
(lp151
S'd'
asg17
S'N'
sg14
I1
sa(dp152
g16
(lp153
S'd'
asg38
I245
sS'.thisRepN'
p154
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p155
I14
sS'.thisN'
p156
I14
sS'.thisIndex'
p157
g43
(g45
S'\xf5\x00\x00\x00'
tRp158
sg15
(lp159
S'k'
asg17
S'N'
sg14
I1
sa(dp160
g16
(lp161
S'd'
asg38
I58
sS'.thisRepN'
p162
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p163
I15
sS'.thisN'
p164
I15
sS'.thisIndex'
p165
g43
(g45
S':\x00\x00\x00'
tRp166
sg15
(lp167
S'd'
asg17
S'Y'
sg14
I1
sa(dp168
g16
(lp169
S'k'
asg38
I569
sS'.thisRepN'
p170
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p171
I16
sS'.thisN'
p172
I16
sS'.thisIndex'
p173
g43
(g45
S'9\x02\x00\x00'
tRp174
sg15
(lp175
S'k'
asg17
S'Y'
sg14
I1
sa(dp176
g16
(lp177
S'k'
asg38
I374
sS'.thisRepN'
p178
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p179
I17
sS'.thisN'
p180
I17
sS'.thisIndex'
p181
g43
(g45
S'v\x01\x00\x00'
tRp182
sg15
(lp183
S'k'
asg17
S'Y'
sg14
I1
sa(dp184
g16
(lp185
S'k'
asg38
I317
sS'.thisRepN'
p186
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p187
I18
sS'.thisN'
p188
I18
sS'.thisIndex'
p189
g43
(g45
S'=\x01\x00\x00'
tRp190
sg15
(lp191
S'd'
asg17
S'N'
sg14
I1
sa(dp192
g16
(lp193
S'k'
asg38
I397
sS'.thisRepN'
p194
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p195
I19
sS'.thisN'
p196
I19
sS'.thisIndex'
p197
g43
(g45
S'\x8d\x01\x00\x00'
tRp198
sg15
(lp199
S'k'
asg17
S'Y'
sg14
I1
sa(dp200
g16
(lp201
S'd'
asg38
I242
sS'.thisRepN'
p202
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p203
I20
sS'.thisN'
p204
I20
sS'.thisIndex'
p205
g43
(g45
S'\xf2\x00\x00\x00'
tRp206
sg15
(lp207
S'd'
asg17
S'Y'
sg14
I1
sa(dp208
g16
(lp209
S'k'
asg38
I336
sS'.thisRepN'
p210
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p211
I21
sS'.thisN'
p212
I21
sS'.thisIndex'
p213
g43
(g45
S'P\x01\x00\x00'
tRp214
sg15
(lp215
S'd'
asg17
S'N'
sg14
I1
sa(dp216
g16
(lp217
S'k'
asg38
I572
sS'.thisRepN'
p218
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p219
I22
sS'.thisN'
p220
I22
sS'.thisIndex'
p221
g43
(g45
S'<\x02\x00\x00'
tRp222
sg15
(lp223
S'd'
asg17
S'N'
sg14
I1
sa(dp224
g16
(lp225
S'd'
asg38
I114
sS'.thisRepN'
p226
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p227
I23
sS'.thisN'
p228
I23
sS'.thisIndex'
p229
g43
(g45
S'r\x00\x00\x00'
tRp230
sg15
(lp231
S'k'
asg17
S'N'
sg14
I1
sa(dp232
g16
(lp233
S'k'
asg38
I516
sS'.thisRepN'
p234
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p235
I24
sS'.thisN'
p236
I24
sS'.thisIndex'
p237
g43
(g45
S'\x04\x02\x00\x00'
tRp238
sg15
(lp239
S'd'
asg17
S'N'
sg14
I1
sa(dp240
g16
(lp241
S'k'
asg38
I459
sS'.thisRepN'
p242
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p243
I25
sS'.thisN'
p244
I25
sS'.thisIndex'
p245
g43
(g45
S'\xcb\x01\x00\x00'
tRp246
sg15
(lp247
S'k'
asg17
S'Y'
sg14
I1
sa(dp248
g16
(lp249
S'd'
asg38
I118
sS'.thisRepN'
p250
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p251
I26
sS'.thisN'
p252
I26
sS'.thisIndex'
p253
g43
(g45
S'v\x00\x00\x00'
tRp254
sg15
(lp255
S'd'
asg17
S'Y'
sg14
I1
sa(dp256
g16
(lp257
S'd'
asg38
I174
sS'.thisRepN'
p258
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p259
I27
sS'.thisN'
p260
I27
sS'.thisIndex'
p261
g43
(g45
S'\xae\x00\x00\x00'
tRp262
sg15
(lp263
S'k'
asg17
S'N'
sg14
I1
sa(dp264
g16
(lp265
S'k'
asg38
I420
sS'.thisRepN'
p266
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p267
I28
sS'.thisN'
p268
I28
sS'.thisIndex'
p269
g43
(g45
S'\xa4\x01\x00\x00'
tRp270
sg15
(lp271
S'd'
asg17
S'N'
sg14
I1
sa(dp272
g16
(lp273
S'k'
asg38
I392
sS'.thisRepN'
p274
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p275
I29
sS'.thisN'
p276
I29
sS'.thisIndex'
p277
g43
(g45
S'\x88\x01\x00\x00'
tRp278
sg15
(lp279
S'k'
asg17
S'Y'
sg14
I1
sa(dp280
g16
(lp281
S'k'
asg38
I343
sS'.thisRepN'
p282
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p283
I30
sS'.thisN'
p284
I30
sS'.thisIndex'
p285
g43
(g45
S'W\x01\x00\x00'
tRp286
sg15
(lp287
S'd'
asg17
S'N'
sg14
I1
sa(dp288
g16
(lp289
S'd'
asg38
I138
sS'.thisRepN'
p290
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p291
I31
sS'.thisN'
p292
I31
sS'.thisIndex'
p293
g43
(g45
S'\x8a\x00\x00\x00'
tRp294
sg15
(lp295
S'k'
asg17
S'N'
sg14
I1
sa(dp296
g16
(lp297
S'k'
asg38
I360
sS'.thisRepN'
p298
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p299
I32
sS'.thisN'
p300
I32
sS'.thisIndex'
p301
g43
(g45
S'h\x01\x00\x00'
tRp302
sg15
(lp303
S'd'
asg17
S'N'
sg14
I1
sa(dp304
g16
(lp305
S'd'
asg38
I264
sS'.thisRepN'
p306
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p307
I33
sS'.thisN'
p308
I33
sS'.thisIndex'
p309
g43
(g45
S'\x08\x01\x00\x00'
tRp310
sg15
(lp311
S'k'
asg17
S'N'
sg14
I1
sa(dp312
g16
(lp313
S'd'
asg38
I128
sS'.thisRepN'
p314
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p315
I34
sS'.thisN'
p316
I34
sS'.thisIndex'
p317
g43
(g45
S'\x80\x00\x00\x00'
tRp318
sg15
(lp319
S'k'
asg17
S'N'
sg14
I1
sa(dp320
g16
(lp321
S'k'
asg38
I430
sS'.thisRepN'
p322
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p323
I35
sS'.thisN'
p324
I35
sS'.thisIndex'
p325
g43
(g45
S'\xae\x01\x00\x00'
tRp326
sg15
(lp327
S'd'
asg17
S'N'
sg14
I1
sa(dp328
g16
(lp329
S'k'
asg38
I493
sS'.thisRepN'
p330
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p331
I36
sS'.thisN'
p332
I36
sS'.thisIndex'
p333
g43
(g45
S'\xed\x01\x00\x00'
tRp334
sg15
(lp335
S'k'
asg17
S'Y'
sg14
I1
sa(dp336
g16
(lp337
S'k'
asg38
I454
sS'.thisRepN'
p338
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p339
I37
sS'.thisN'
p340
I37
sS'.thisIndex'
p341
g43
(g45
S'\xc6\x01\x00\x00'
tRp342
sg15
(lp343
S'd'
asg17
S'N'
sg14
I1
sa(dp344
g16
(lp345
S'd'
asg38
I181
sS'.thisRepN'
p346
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p347
I38
sS'.thisN'
p348
I38
sS'.thisIndex'
p349
g43
(g45
S'\xb5\x00\x00\x00'
tRp350
sg15
(lp351
S'd'
asg17
S'Y'
sg14
I1
sa(dp352
g16
(lp353
S'k'
asg38
I433
sS'.thisRepN'
p354
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p355
I39
sS'.thisN'
p356
I39
sS'.thisIndex'
p357
g43
(g45
S'\xb1\x01\x00\x00'
tRp358
sg15
(lp359
S'k'
asg17
S'Y'
sg14
I1
sa(dp360
g16
(lp361
S'k'
asg38
I468
sS'.thisRepN'
p362
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p363
I40
sS'.thisN'
p364
I40
sS'.thisIndex'
p365
g43
(g45
S'\xd4\x01\x00\x00'
tRp366
sg15
(lp367
S'd'
asg17
S'N'
sg14
I1
sa(dp368
g16
(lp369
S'd'
asg38
I229
sS'.thisRepN'
p370
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p371
I41
sS'.thisN'
p372
I41
sS'.thisIndex'
p373
g43
(g45
S'\xe5\x00\x00\x00'
tRp374
sg15
(lp375
S'd'
asg17
S'Y'
sg14
I1
sa(dp376
g16
(lp377
S'k'
asg38
I421
sS'.thisRepN'
p378
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p379
I42
sS'.thisN'
p380
I42
sS'.thisIndex'
p381
g43
(g45
S'\xa5\x01\x00\x00'
tRp382
sg15
(lp383
S'k'
asg17
S'Y'
sg14
I1
sa(dp384
g16
(lp385
S'd'
asg38
I85
sS'.thisRepN'
p386
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p387
I43
sS'.thisN'
p388
I43
sS'.thisIndex'
p389
g43
(g45
S'U\x00\x00\x00'
tRp390
sg15
(lp391
S'k'
asg17
S'N'
sg14
I1
sa(dp392
g16
(lp393
S'k'
asg38
I580
sS'.thisRepN'
p394
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p395
I44
sS'.thisN'
p396
I44
sS'.thisIndex'
p397
g43
(g45
S'D\x02\x00\x00'
tRp398
sg15
(lp399
S'd'
asg17
S'N'
sg14
I1
sa(dp400
g16
(lp401
S'k'
asg38
I466
sS'.thisRepN'
p402
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p403
I45
sS'.thisN'
p404
I45
sS'.thisIndex'
p405
g43
(g45
S'\xd2\x01\x00\x00'
tRp406
sg15
(lp407
S'd'
asg17
S'N'
sg14
I1
sa(dp408
g16
(lp409
S'k'
asg38
I530
sS'.thisRepN'
p410
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p411
I46
sS'.thisN'
p412
I46
sS'.thisIndex'
p413
g43
(g45
S'\x12\x02\x00\x00'
tRp414
sg15
(lp415
S'd'
asg17
S'N'
sg14
I1
sa(dp416
g16
(lp417
S'd'
asg38
I159
sS'.thisRepN'
p418
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p419
I47
sS'.thisN'
p420
I47
sS'.thisIndex'
p421
g43
(g45
S'\x9f\x00\x00\x00'
tRp422
sg15
(lp423
S'k'
asg17
S'N'
sg14
I1
sa(dp424
g16
(lp425
S'd'
asg38
I273
sS'.thisRepN'
p426
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p427
I48
sS'.thisN'
p428
I48
sS'.thisIndex'
p429
g43
(g45
S'\x11\x01\x00\x00'
tRp430
sg15
(lp431
S'd'
asg17
S'Y'
sg14
I1
sa(dp432
g16
(lp433
S'k'
asg38
I525
sS'.thisRepN'
p434
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p435
I49
sS'.thisN'
p436
I49
sS'.thisIndex'
p437
g43
(g45
S'\r\x02\x00\x00'
tRp438
sg15
(lp439
S'k'
asg17
S'Y'
sg14
I1
sa(dp440
g16
(lp441
S'd'
asg38
I49
sS'.thisRepN'
p442
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p443
I50
sS'.thisN'
p444
I50
sS'.thisIndex'
p445
g43
(g45
S'1\x00\x00\x00'
tRp446
sg15
(lp447
S'd'
asg17
S'Y'
sg14
I2
sa(dp448
g16
(lp449
S'd'
asg38
I179
sS'.thisRepN'
p450
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p451
I51
sS'.thisN'
p452
I51
sS'.thisIndex'
p453
g43
(g45
S'\xb3\x00\x00\x00'
tRp454
sg15
(lp455
S'k'
asg17
S'N'
sg14
I2
sa(dp456
g16
(lp457
S'd'
asg38
I67
sS'.thisRepN'
p458
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p459
I52
sS'.thisN'
p460
I52
sS'.thisIndex'
p461
g43
(g45
S'C\x00\x00\x00'
tRp462
sg15
(lp463
S'd'
asg17
S'Y'
sg14
I2
sa(dp464
g16
(lp465
S'd'
asg38
I29
sS'.thisRepN'
p466
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p467
I53
sS'.thisN'
p468
I53
sS'.thisIndex'
p469
g43
(g45
S'\x1d\x00\x00\x00'
tRp470
sg15
(lp471
S'd'
asg17
S'Y'
sg14
I2
sa(dp472
g16
(lp473
S'd'
asg38
I227
sS'.thisRepN'
p474
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p475
I54
sS'.thisN'
p476
I54
sS'.thisIndex'
p477
g43
(g45
S'\xe3\x00\x00\x00'
tRp478
sg15
(lp479
S'd'
asg17
S'Y'
sg14
I2
sa(dp480
g16
(lp481
S'k'
asg38
I376
sS'.thisRepN'
p482
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p483
I55
sS'.thisN'
p484
I55
sS'.thisIndex'
p485
g43
(g45
S'x\x01\x00\x00'
tRp486
sg15
(lp487
S'd'
asg17
S'N'
sg14
I2
sa(dp488
g16
(lp489
S'd'
asg38
I98
sS'.thisRepN'
p490
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p491
I56
sS'.thisN'
p492
I56
sS'.thisIndex'
p493
g43
(g45
S'b\x00\x00\x00'
tRp494
sg15
(lp495
S'k'
asg17
S'N'
sg14
I2
sa(dp496
g16
(lp497
S'd'
asg38
I150
sS'.thisRepN'
p498
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p499
I57
sS'.thisN'
p500
I57
sS'.thisIndex'
p501
g43
(g45
S'\x96\x00\x00\x00'
tRp502
sg15
(lp503
S'd'
asg17
S'Y'
sg14
I2
sa(dp504
g16
(lp505
S'd'
asg38
I83
sS'.thisRepN'
p506
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p507
I58
sS'.thisN'
p508
I58
sS'.thisIndex'
p509
g43
(g45
S'S\x00\x00\x00'
tRp510
sg15
(lp511
S'k'
asg17
S'N'
sg14
I2
sa(dp512
g16
(lp513
S'k'
asg38
I478
sS'.thisRepN'
p514
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p515
I59
sS'.thisN'
p516
I59
sS'.thisIndex'
p517
g43
(g45
S'\xde\x01\x00\x00'
tRp518
sg15
(lp519
S'd'
asg17
S'N'
sg14
I2
sa(dp520
g16
(lp521
S'k'
asg38
I491
sS'.thisRepN'
p522
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p523
I60
sS'.thisN'
p524
I60
sS'.thisIndex'
p525
g43
(g45
S'\xeb\x01\x00\x00'
tRp526
sg15
(lp527
S'k'
asg17
S'Y'
sg14
I2
sa(dp528
g16
(lp529
S'k'
asg38
I571
sS'.thisRepN'
p530
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p531
I61
sS'.thisN'
p532
I61
sS'.thisIndex'
p533
g43
(g45
S';\x02\x00\x00'
tRp534
sg15
(lp535
S'k'
asg17
S'Y'
sg14
I2
sa(dp536
g16
(lp537
S'd'
asg38
I202
sS'.thisRepN'
p538
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p539
I62
sS'.thisN'
p540
I62
sS'.thisIndex'
p541
g43
(g45
S'\xca\x00\x00\x00'
tRp542
sg15
(lp543
S'k'
asg17
S'N'
sg14
I2
sa(dp544
g16
(lp545
S'k'
asg38
I428
sS'.thisRepN'
p546
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p547
I63
sS'.thisN'
p548
I63
sS'.thisIndex'
p549
g43
(g45
S'\xac\x01\x00\x00'
tRp550
sg15
(lp551
S'k'
asg17
S'Y'
sg14
I2
sa(dp552
g16
(lp553
S'd'
asg38
I90
sS'.thisRepN'
p554
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p555
I64
sS'.thisN'
p556
I64
sS'.thisIndex'
p557
g43
(g45
S'Z\x00\x00\x00'
tRp558
sg15
(lp559
S'd'
asg17
S'Y'
sg14
I2
sa(dp560
g16
(lp561
S'k'
asg38
I499
sS'.thisRepN'
p562
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p563
I65
sS'.thisN'
p564
I65
sS'.thisIndex'
p565
g43
(g45
S'\xf3\x01\x00\x00'
tRp566
sg15
(lp567
S'd'
asg17
S'N'
sg14
I2
sa(dp568
g16
(lp569
S'd'
asg38
I191
sS'.thisRepN'
p570
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p571
I66
sS'.thisN'
p572
I66
sS'.thisIndex'
p573
g43
(g45
S'\xbf\x00\x00\x00'
tRp574
sg15
(lp575
S'k'
asg17
S'N'
sg14
I2
sa(dp576
g16
(lp577
S'k'
asg38
I497
sS'.thisRepN'
p578
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p579
I67
sS'.thisN'
p580
I67
sS'.thisIndex'
p581
g43
(g45
S'\xf1\x01\x00\x00'
tRp582
sg15
(lp583
S'd'
asg17
S'N'
sg14
I2
sa(dp584
g16
(lp585
S'k'
asg38
I364
sS'.thisRepN'
p586
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p587
I68
sS'.thisN'
p588
I68
sS'.thisIndex'
p589
g43
(g45
S'l\x01\x00\x00'
tRp590
sg15
(lp591
S'k'
asg17
S'Y'
sg14
I2
sa(dp592
g16
(lp593
S'd'
asg38
I187
sS'.thisRepN'
p594
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p595
I69
sS'.thisN'
p596
I69
sS'.thisIndex'
p597
g43
(g45
S'\xbb\x00\x00\x00'
tRp598
sg15
(lp599
S'k'
asg17
S'N'
sg14
I2
sa(dp600
g16
(lp601
S'd'
asg38
I59
sS'.thisRepN'
p602
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p603
I70
sS'.thisN'
p604
I70
sS'.thisIndex'
p605
g43
(g45
S';\x00\x00\x00'
tRp606
sg15
(lp607
S'd'
asg17
S'Y'
sg14
I2
sa(dp608
g16
(lp609
S'd'
asg38
I50
sS'.thisRepN'
p610
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p611
I71
sS'.thisN'
p612
I71
sS'.thisIndex'
p613
g43
(g45
S'2\x00\x00\x00'
tRp614
sg15
(lp615
S'd'
asg17
S'Y'
sg14
I2
sa(dp616
g16
(lp617
S'k'
asg38
I588
sS'.thisRepN'
p618
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p619
I72
sS'.thisN'
p620
I72
sS'.thisIndex'
p621
g43
(g45
S'L\x02\x00\x00'
tRp622
sg15
(lp623
S'k'
asg17
S'Y'
sg14
I2
sa(dp624
g16
(lp625
S'd'
asg38
I132
sS'.thisRepN'
p626
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p627
I73
sS'.thisN'
p628
I73
sS'.thisIndex'
p629
g43
(g45
S'\x84\x00\x00\x00'
tRp630
sg15
(lp631
S'k'
asg17
S'N'
sg14
I2
sa(dp632
g16
(lp633
S'd'
asg38
I62
sS'.thisRepN'
p634
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p635
I74
sS'.thisN'
p636
I74
sS'.thisIndex'
p637
g43
(g45
S'>\x00\x00\x00'
tRp638
sg15
(lp639
S'd'
asg17
S'Y'
sg14
I2
sa(dp640
g16
(lp641
S'k'
asg38
I538
sS'.thisRepN'
p642
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p643
I75
sS'.thisN'
p644
I75
sS'.thisIndex'
p645
g43
(g45
S'\x1a\x02\x00\x00'
tRp646
sg15
(lp647
S'k'
asg17
S'Y'
sg14
I2
sa(dp648
g16
(lp649
S'd'
asg38
I148
sS'.thisRepN'
p650
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p651
I76
sS'.thisN'
p652
I76
sS'.thisIndex'
p653
g43
(g45
S'\x94\x00\x00\x00'
tRp654
sg15
(lp655
S'd'
asg17
S'Y'
sg14
I2
sa(dp656
g16
(lp657
S'k'
asg38
I377
sS'.thisRepN'
p658
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p659
I77
sS'.thisN'
p660
I77
sS'.thisIndex'
p661
g43
(g45
S'y\x01\x00\x00'
tRp662
sg15
(lp663
S'k'
asg17
S'Y'
sg14
I2
sa(dp664
g16
(lp665
S'k'
asg38
I407
sS'.thisRepN'
p666
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p667
I78
sS'.thisN'
p668
I78
sS'.thisIndex'
p669
g43
(g45
S'\x97\x01\x00\x00'
tRp670
sg15
(lp671
S'k'
asg17
S'Y'
sg14
I2
sa(dp672
g16
(lp673
S'k'
asg38
I345
sS'.thisRepN'
p674
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p675
I79
sS'.thisN'
p676
I79
sS'.thisIndex'
p677
g43
(g45
S'Y\x01\x00\x00'
tRp678
sg15
(lp679
S'd'
asg17
S'N'
sg14
I2
sa(dp680
g16
(lp681
S'd'
asg38
I292
sS'.thisRepN'
p682
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p683
I80
sS'.thisN'
p684
I80
sS'.thisIndex'
p685
g43
(g45
S'$\x01\x00\x00'
tRp686
sg15
(lp687
S'k'
asg17
S'N'
sg14
I2
sa(dp688
g16
(lp689
S'k'
asg38
I379
sS'.thisRepN'
p690
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p691
I81
sS'.thisN'
p692
I81
sS'.thisIndex'
p693
g43
(g45
S'{\x01\x00\x00'
tRp694
sg15
(lp695
S'd'
asg17
S'N'
sg14
I2
sa(dp696
g16
(lp697
S'd'
asg38
I172
sS'.thisRepN'
p698
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p699
I82
sS'.thisN'
p700
I82
sS'.thisIndex'
p701
g43
(g45
S'\xac\x00\x00\x00'
tRp702
sg15
(lp703
S'k'
asg17
S'N'
sg14
I2
sa(dp704
g16
(lp705
S'k'
asg38
I368
sS'.thisRepN'
p706
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p707
I83
sS'.thisN'
p708
I83
sS'.thisIndex'
p709
g43
(g45
S'p\x01\x00\x00'
tRp710
sg15
(lp711
S'd'
asg17
S'N'
sg14
I2
sa(dp712
g16
(lp713
S'k'
asg38
I422
sS'.thisRepN'
p714
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p715
I84
sS'.thisN'
p716
I84
sS'.thisIndex'
p717
g43
(g45
S'\xa6\x01\x00\x00'
tRp718
sg15
(lp719
S'k'
asg17
S'Y'
sg14
I2
sa(dp720
g16
(lp721
S'k'
asg38
I388
sS'.thisRepN'
p722
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p723
I85
sS'.thisN'
p724
I85
sS'.thisIndex'
p725
g43
(g45
S'\x84\x01\x00\x00'
tRp726
sg15
(lp727
S'k'
asg17
S'Y'
sg14
I2
sa(dp728
g16
(lp729
S'd'
asg38
I241
sS'.thisRepN'
p730
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p731
I86
sS'.thisN'
p732
I86
sS'.thisIndex'
p733
g43
(g45
S'\xf1\x00\x00\x00'
tRp734
sg15
(lp735
S'k'
asg17
S'N'
sg14
I2
sa(dp736
g16
(lp737
S'd'
asg38
I296
sS'.thisRepN'
p738
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p739
I87
sS'.thisN'
p740
I87
sS'.thisIndex'
p741
g43
(g45
S'(\x01\x00\x00'
tRp742
sg15
(lp743
S'k'
asg17
S'N'
sg14
I2
sa(dp744
g16
(lp745
S'd'
asg38
I17
sS'.thisRepN'
p746
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p747
I88
sS'.thisN'
p748
I88
sS'.thisIndex'
p749
g43
(g45
S'\x11\x00\x00\x00'
tRp750
sg15
(lp751
S'k'
asg17
S'N'
sg14
I2
sa(dp752
g16
(lp753
S'k'
asg38
I517
sS'.thisRepN'
p754
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p755
I89
sS'.thisN'
p756
I89
sS'.thisIndex'
p757
g43
(g45
S'\x05\x02\x00\x00'
tRp758
sg15
(lp759
S'd'
asg17
S'N'
sg14
I2
sa(dp760
g16
(lp761
S'd'
asg38
I82
sS'.thisRepN'
p762
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p763
I90
sS'.thisN'
p764
I90
sS'.thisIndex'
p765
g43
(g45
S'R\x00\x00\x00'
tRp766
sg15
(lp767
S'k'
asg17
S'N'
sg14
I2
sa(dp768
g16
(lp769
S'd'
asg38
I280
sS'.thisRepN'
p770
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p771
I91
sS'.thisN'
p772
I91
sS'.thisIndex'
p773
g43
(g45
S'\x18\x01\x00\x00'
tRp774
sg15
(lp775
S'd'
asg17
S'Y'
sg14
I2
sa(dp776
g16
(lp777
S'd'
asg38
I216
sS'.thisRepN'
p778
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p779
I92
sS'.thisN'
p780
I92
sS'.thisIndex'
p781
g43
(g45
S'\xd8\x00\x00\x00'
tRp782
sg15
(lp783
S'k'
asg17
S'N'
sg14
I2
sa(dp784
g16
(lp785
S'd'
asg38
I217
sS'.thisRepN'
p786
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p787
I93
sS'.thisN'
p788
I93
sS'.thisIndex'
p789
g43
(g45
S'\xd9\x00\x00\x00'
tRp790
sg15
(lp791
S'd'
asg17
S'Y'
sg14
I2
sa(dp792
g16
(lp793
S'k'
asg38
I439
sS'.thisRepN'
p794
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p795
I94
sS'.thisN'
p796
I94
sS'.thisIndex'
p797
g43
(g45
S'\xb7\x01\x00\x00'
tRp798
sg15
(lp799
S'k'
asg17
S'Y'
sg14
I2
sa(dp800
g16
(lp801
S'd'
asg38
I13
sS'.thisRepN'
p802
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p803
I95
sS'.thisN'
p804
I95
sS'.thisIndex'
p805
g43
(g45
S'\r\x00\x00\x00'
tRp806
sg15
(lp807
S'd'
asg17
S'Y'
sg14
I2
sa(dp808
g16
(lp809
S'd'
asg38
I70
sS'.thisRepN'
p810
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p811
I96
sS'.thisN'
p812
I96
sS'.thisIndex'
p813
g43
(g45
S'F\x00\x00\x00'
tRp814
sg15
(lp815
S'k'
asg17
S'N'
sg14
I2
sa(dp816
g16
(lp817
S'd'
asg38
I268
sS'.thisRepN'
p818
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p819
I97
sS'.thisN'
p820
I97
sS'.thisIndex'
p821
g43
(g45
S'\x0c\x01\x00\x00'
tRp822
sg15
(lp823
S'd'
asg17
S'Y'
sg14
I2
sa(dp824
g16
(lp825
S'k'
asg38
I355
sS'.thisRepN'
p826
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p827
I98
sS'.thisN'
p828
I98
sS'.thisIndex'
p829
g43
(g45
S'c\x01\x00\x00'
tRp830
sg15
(lp831
S'd'
asg17
S'N'
sg14
I2
sa(dp832
g16
(lp833
S'd'
asg38
I26
sS'.thisRepN'
p834
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p835
I99
sS'.thisN'
p836
I99
sS'.thisIndex'
p837
g43
(g45
S'\x1a\x00\x00\x00'
tRp838
sg15
(lp839
S'k'
asg17
S'N'
sg14
I2
sa(dp840
g16
(lp841
S'd'
asg38
I89
sS'.thisRepN'
p842
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p843
I100
sS'.thisN'
p844
I100
sS'.thisIndex'
p845
g43
(g45
S'Y\x00\x00\x00'
tRp846
sg15
(lp847
S'k'
asg17
S'N'
sg14
I3
sa(dp848
g16
(lp849
S'd'
asg38
I72
sS'.thisRepN'
p850
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p851
I101
sS'.thisN'
p852
I101
sS'.thisIndex'
p853
g43
(g45
S'H\x00\x00\x00'
tRp854
sg15
(lp855
S'd'
asg17
S'Y'
sg14
I3
sa(dp856
g16
(lp857
S'd'
asg38
I42
sS'.thisRepN'
p858
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p859
I102
sS'.thisN'
p860
I102
sS'.thisIndex'
p861
g43
(g45
S'*\x00\x00\x00'
tRp862
sg15
(lp863
S'd'
asg17
S'Y'
sg14
I3
sa(dp864
g16
(lp865
S'd'
asg38
I171
sS'.thisRepN'
p866
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p867
I103
sS'.thisN'
p868
I103
sS'.thisIndex'
p869
g43
(g45
S'\xab\x00\x00\x00'
tRp870
sg15
(lp871
S'd'
asg17
S'Y'
sg14
I3
sa(dp872
g16
(lp873
S'd'
asg38
I206
sS'.thisRepN'
p874
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p875
I104
sS'.thisN'
p876
I104
sS'.thisIndex'
p877
g43
(g45
S'\xce\x00\x00\x00'
tRp878
sg15
(lp879
S'k'
asg17
S'N'
sg14
I3
sa(dp880
g16
(lp881
S'k'
asg38
I581
sS'.thisRepN'
p882
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p883
I105
sS'.thisN'
p884
I105
sS'.thisIndex'
p885
g43
(g45
S'E\x02\x00\x00'
tRp886
sg15
(lp887
S'd'
asg17
S'N'
sg14
I3
sa(dp888
g16
(lp889
S'k'
asg38
I318
sS'.thisRepN'
p890
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p891
I106
sS'.thisN'
p892
I106
sS'.thisIndex'
p893
g43
(g45
S'>\x01\x00\x00'
tRp894
sg15
(lp895
S'k'
asg17
S'Y'
sg14
I3
sa(dp896
g16
(lp897
S'k'
asg38
I353
sS'.thisRepN'
p898
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p899
I107
sS'.thisN'
p900
I107
sS'.thisIndex'
p901
g43
(g45
S'a\x01\x00\x00'
tRp902
sg15
(lp903
S'd'
asg17
S'N'
sg14
I3
sa(dp904
g16
(lp905
S'd'
asg38
I200
sS'.thisRepN'
p906
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p907
I108
sS'.thisN'
p908
I108
sS'.thisIndex'
p909
g43
(g45
S'\xc8\x00\x00\x00'
tRp910
sg15
(lp911
S'k'
asg17
S'N'
sg14
I3
sa(dp912
g16
(lp913
S'd'
asg38
I22
sS'.thisRepN'
p914
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p915
I109
sS'.thisN'
p916
I109
sS'.thisIndex'
p917
g43
(g45
S'\x16\x00\x00\x00'
tRp918
sg15
(lp919
S'd'
asg17
S'Y'
sg14
I3
sa(dp920
g16
(lp921
S'k'
asg38
I570
sS'.thisRepN'
p922
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p923
I110
sS'.thisN'
p924
I110
sS'.thisIndex'
p925
g43
(g45
S':\x02\x00\x00'
tRp926
sg15
(lp927
S'd'
asg17
S'N'
sg14
I3
sa(dp928
g16
(lp929
S'd'
asg38
I222
sS'.thisRepN'
p930
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p931
I111
sS'.thisN'
p932
I111
sS'.thisIndex'
p933
g43
(g45
S'\xde\x00\x00\x00'
tRp934
sg15
(lp935
S'k'
asg17
S'N'
sg14
I3
sa(dp936
g16
(lp937
S'k'
asg38
I319
sS'.thisRepN'
p938
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p939
I112
sS'.thisN'
p940
I112
sS'.thisIndex'
p941
g43
(g45
S'?\x01\x00\x00'
tRp942
sg15
(lp943
S'd'
asg17
S'N'
sg14
I3
sa(dp944
g16
(lp945
S'd'
asg38
I247
sS'.thisRepN'
p946
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p947
I113
sS'.thisN'
p948
I113
sS'.thisIndex'
p949
g43
(g45
S'\xf7\x00\x00\x00'
tRp950
sg15
(lp951
S'k'
asg17
S'N'
sg14
I3
sa(dp952
g16
(lp953
S'k'
asg38
I395
sS'.thisRepN'
p954
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p955
I114
sS'.thisN'
p956
I114
sS'.thisIndex'
p957
g43
(g45
S'\x8b\x01\x00\x00'
tRp958
sg15
(lp959
S'd'
asg17
S'N'
sg14
I3
sa(dp960
g16
(lp961
S'k'
asg38
I441
sS'.thisRepN'
p962
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p963
I115
sS'.thisN'
p964
I115
sS'.thisIndex'
p965
g43
(g45
S'\xb9\x01\x00\x00'
tRp966
sg15
(lp967
S'k'
asg17
S'Y'
sg14
I3
sa(dp968
g16
(lp969
S'k'
asg38
I375
sS'.thisRepN'
p970
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p971
I116
sS'.thisN'
p972
I116
sS'.thisIndex'
p973
g43
(g45
S'w\x01\x00\x00'
tRp974
sg15
(lp975
S'k'
asg17
S'Y'
sg14
I3
sa(dp976
g16
(lp977
S'k'
asg38
I512
sS'.thisRepN'
p978
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p979
I117
sS'.thisN'
p980
I117
sS'.thisIndex'
p981
g43
(g45
S'\x00\x02\x00\x00'
tRp982
sg15
(lp983
S'k'
asg17
S'Y'
sg14
I3
sa(dp984
g16
(lp985
S'k'
asg38
I332
sS'.thisRepN'
p986
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p987
I118
sS'.thisN'
p988
I118
sS'.thisIndex'
p989
g43
(g45
S'L\x01\x00\x00'
tRp990
sg15
(lp991
S'k'
asg17
S'Y'
sg14
I3
sa(dp992
g16
(lp993
S'd'
asg38
I207
sS'.thisRepN'
p994
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p995
I119
sS'.thisN'
p996
I119
sS'.thisIndex'
p997
g43
(g45
S'\xcf\x00\x00\x00'
tRp998
sg15
(lp999
S'k'
asg17
S'N'
sg14
I3
sa(dp1000
g16
(lp1001
S'k'
asg38
I529
sS'.thisRepN'
p1002
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1003
I120
sS'.thisN'
p1004
I120
sS'.thisIndex'
p1005
g43
(g45
S'\x11\x02\x00\x00'
tRp1006
sg15
(lp1007
S'd'
asg17
S'N'
sg14
I3
sa(dp1008
g16
(lp1009
S'd'
asg38
I250
sS'.thisRepN'
p1010
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1011
I121
sS'.thisN'
p1012
I121
sS'.thisIndex'
p1013
g43
(g45
S'\xfa\x00\x00\x00'
tRp1014
sg15
(lp1015
S'd'
asg17
S'Y'
sg14
I3
sa(dp1016
g16
(lp1017
S'd'
asg38
I182
sS'.thisRepN'
p1018
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1019
I122
sS'.thisN'
p1020
I122
sS'.thisIndex'
p1021
g43
(g45
S'\xb6\x00\x00\x00'
tRp1022
sg15
(lp1023
S'k'
asg17
S'N'
sg14
I3
sa(dp1024
g16
(lp1025
S'd'
asg38
I161
sS'.thisRepN'
p1026
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1027
I123
sS'.thisN'
p1028
I123
sS'.thisIndex'
p1029
g43
(g45
S'\xa1\x00\x00\x00'
tRp1030
sg15
(lp1031
S'd'
asg17
S'Y'
sg14
I3
sa(dp1032
g16
(lp1033
S'd'
asg38
I74
sS'.thisRepN'
p1034
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1035
I124
sS'.thisN'
p1036
I124
sS'.thisIndex'
p1037
g43
(g45
S'J\x00\x00\x00'
tRp1038
sg15
(lp1039
S'd'
asg17
S'Y'
sg14
I3
sa(dp1040
g16
(lp1041
S'k'
asg38
I387
sS'.thisRepN'
p1042
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1043
I125
sS'.thisN'
p1044
I125
sS'.thisIndex'
p1045
g43
(g45
S'\x83\x01\x00\x00'
tRp1046
sg15
(lp1047
S'd'
asg17
S'N'
sg14
I3
sa(dp1048
g16
(lp1049
S'k'
asg38
I484
sS'.thisRepN'
p1050
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1051
I126
sS'.thisN'
p1052
I126
sS'.thisIndex'
p1053
g43
(g45
S'\xe4\x01\x00\x00'
tRp1054
sg15
(lp1055
S'k'
asg17
S'Y'
sg14
I3
sa(dp1056
g16
(lp1057
S'k'
asg38
I344
sS'.thisRepN'
p1058
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1059
I127
sS'.thisN'
p1060
I127
sS'.thisIndex'
p1061
g43
(g45
S'X\x01\x00\x00'
tRp1062
sg15
(lp1063
S'k'
asg17
S'Y'
sg14
I3
sa(dp1064
g16
(lp1065
S'd'
asg38
I15
sS'.thisRepN'
p1066
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1067
I128
sS'.thisN'
p1068
I128
sS'.thisIndex'
p1069
g43
(g45
S'\x0f\x00\x00\x00'
tRp1070
sg15
(lp1071
S'd'
asg17
S'Y'
sg14
I3
sa(dp1072
g16
(lp1073
S'd'
asg38
I270
sS'.thisRepN'
p1074
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1075
I129
sS'.thisN'
p1076
I129
sS'.thisIndex'
p1077
g43
(g45
S'\x0e\x01\x00\x00'
tRp1078
sg15
(lp1079
S'k'
asg17
S'N'
sg14
I3
sa(dp1080
g16
(lp1081
S'k'
asg38
I541
sS'.thisRepN'
p1082
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1083
I130
sS'.thisN'
p1084
I130
sS'.thisIndex'
p1085
g43
(g45
S'\x1d\x02\x00\x00'
tRp1086
sg15
(lp1087
S'd'
asg17
S'N'
sg14
I3
sa(dp1088
g16
(lp1089
S'k'
asg38
I413
sS'.thisRepN'
p1090
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1091
I131
sS'.thisN'
p1092
I131
sS'.thisIndex'
p1093
g43
(g45
S'\x9d\x01\x00\x00'
tRp1094
sg15
(lp1095
S'd'
asg17
S'N'
sg14
I3
sa(dp1096
g16
(lp1097
S'k'
asg38
I437
sS'.thisRepN'
p1098
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1099
I132
sS'.thisN'
p1100
I132
sS'.thisIndex'
p1101
g43
(g45
S'\xb5\x01\x00\x00'
tRp1102
sg15
(lp1103
S'k'
asg17
S'Y'
sg14
I3
sa(dp1104
g16
(lp1105
S'k'
asg38
I504
sS'.thisRepN'
p1106
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1107
I133
sS'.thisN'
p1108
I133
sS'.thisIndex'
p1109
g43
(g45
S'\xf8\x01\x00\x00'
tRp1110
sg15
(lp1111
S'k'
asg17
S'Y'
sg14
I3
sa(dp1112
g16
(lp1113
S'd'
asg38
I27
sS'.thisRepN'
p1114
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1115
I134
sS'.thisN'
p1116
I134
sS'.thisIndex'
p1117
g43
(g45
S'\x1b\x00\x00\x00'
tRp1118
sg15
(lp1119
S'k'
asg17
S'N'
sg14
I3
sa(dp1120
g16
(lp1121
S'd'
asg38
I243
sS'.thisRepN'
p1122
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1123
I135
sS'.thisN'
p1124
I135
sS'.thisIndex'
p1125
g43
(g45
S'\xf3\x00\x00\x00'
tRp1126
sg15
(lp1127
S'd'
asg17
S'Y'
sg14
I3
sa(dp1128
g16
(lp1129
S'd'
asg38
I175
sS'.thisRepN'
p1130
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1131
I136
sS'.thisN'
p1132
I136
sS'.thisIndex'
p1133
g43
(g45
S'\xaf\x00\x00\x00'
tRp1134
sg15
(lp1135
S'd'
asg17
S'Y'
sg14
I3
sa(dp1136
g16
(lp1137
S'k'
asg38
I431
sS'.thisRepN'
p1138
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1139
I137
sS'.thisN'
p1140
I137
sS'.thisIndex'
p1141
g43
(g45
S'\xaf\x01\x00\x00'
tRp1142
sg15
(lp1143
S'd'
asg17
S'N'
sg14
I3
sa(dp1144
g16
(lp1145
S'd'
asg38
I225
sS'.thisRepN'
p1146
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1147
I138
sS'.thisN'
p1148
I138
sS'.thisIndex'
p1149
g43
(g45
S'\xe1\x00\x00\x00'
tRp1150
sg15
(lp1151
S'k'
asg17
S'N'
sg14
I3
sa(dp1152
g16
(lp1153
S'd'
asg38
I286
sS'.thisRepN'
p1154
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1155
I139
sS'.thisN'
p1156
I139
sS'.thisIndex'
p1157
g43
(g45
S'\x1e\x01\x00\x00'
tRp1158
sg15
(lp1159
S'd'
asg17
S'Y'
sg14
I3
sa(dp1160
g16
(lp1161
S'd'
asg38
I201
sS'.thisRepN'
p1162
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1163
I140
sS'.thisN'
p1164
I140
sS'.thisIndex'
p1165
g43
(g45
S'\xc9\x00\x00\x00'
tRp1166
sg15
(lp1167
S'd'
asg17
S'Y'
sg14
I3
sa(dp1168
g16
(lp1169
S'k'
asg38
I465
sS'.thisRepN'
p1170
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1171
I141
sS'.thisN'
p1172
I141
sS'.thisIndex'
p1173
g43
(g45
S'\xd1\x01\x00\x00'
tRp1174
sg15
(lp1175
S'd'
asg17
S'N'
sg14
I3
sa(dp1176
g16
(lp1177
S'd'
asg38
I54
sS'.thisRepN'
p1178
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1179
I142
sS'.thisN'
p1180
I142
sS'.thisIndex'
p1181
g43
(g45
S'6\x00\x00\x00'
tRp1182
sg15
(lp1183
S'k'
asg17
S'N'
sg14
I3
sa(dp1184
g16
(lp1185
S'd'
asg38
I283
sS'.thisRepN'
p1186
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1187
I143
sS'.thisN'
p1188
I143
sS'.thisIndex'
p1189
g43
(g45
S'\x1b\x01\x00\x00'
tRp1190
sg15
(lp1191
S'd'
asg17
S'Y'
sg14
I3
sa(dp1192
g16
(lp1193
S'd'
asg38
I2
sS'.thisRepN'
p1194
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1195
I144
sS'.thisN'
p1196
I144
sS'.thisIndex'
p1197
g43
(g45
S'\x02\x00\x00\x00'
tRp1198
sg15
(lp1199
S'd'
asg17
S'Y'
sg14
I3
sa(dp1200
g16
(lp1201
S'd'
asg38
I95
sS'.thisRepN'
p1202
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1203
I145
sS'.thisN'
p1204
I145
sS'.thisIndex'
p1205
g43
(g45
S'_\x00\x00\x00'
tRp1206
sg15
(lp1207
S'd'
asg17
S'Y'
sg14
I3
sa(dp1208
g16
(lp1209
S'd'
asg38
I104
sS'.thisRepN'
p1210
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1211
I146
sS'.thisN'
p1212
I146
sS'.thisIndex'
p1213
g43
(g45
S'h\x00\x00\x00'
tRp1214
sg15
(lp1215
S'd'
asg17
S'Y'
sg14
I3
sa(dp1216
g16
(lp1217
S'k'
asg38
I590
sS'.thisRepN'
p1218
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1219
I147
sS'.thisN'
p1220
I147
sS'.thisIndex'
p1221
g43
(g45
S'N\x02\x00\x00'
tRp1222
sg15
(lp1223
S'd'
asg17
S'N'
sg14
I3
sa(dp1224
g16
(lp1225
S'd'
asg38
I285
sS'.thisRepN'
p1226
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1227
I148
sS'.thisN'
p1228
I148
sS'.thisIndex'
p1229
g43
(g45
S'\x1d\x01\x00\x00'
tRp1230
sg15
(lp1231
S'k'
asg17
S'N'
sg14
I3
sa(dp1232
g16
(lp1233
S'k'
asg38
I408
sS'.thisRepN'
p1234
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1235
I149
sS'.thisN'
p1236
I149
sS'.thisIndex'
p1237
g43
(g45
S'\x98\x01\x00\x00'
tRp1238
sg15
(lp1239
S'd'
asg17
S'N'
sg14
I3
sa(dp1240
g16
(lp1241
S'd'
asg38
I214
sS'.thisRepN'
p1242
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1243
I150
sS'.thisN'
p1244
I150
sS'.thisIndex'
p1245
g43
(g45
S'\xd6\x00\x00\x00'
tRp1246
sg15
(lp1247
S'd'
asg17
S'Y'
sg14
I4
sa(dp1248
g16
(lp1249
S'd'
asg38
I224
sS'.thisRepN'
p1250
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1251
I151
sS'.thisN'
p1252
I151
sS'.thisIndex'
p1253
g43
(g45
S'\xe0\x00\x00\x00'
tRp1254
sg15
(lp1255
S'k'
asg17
S'N'
sg14
I4
sa(dp1256
g16
(lp1257
S'd'
asg38
I109
sS'.thisRepN'
p1258
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1259
I152
sS'.thisN'
p1260
I152
sS'.thisIndex'
p1261
g43
(g45
S'm\x00\x00\x00'
tRp1262
sg15
(lp1263
S'd'
asg17
S'Y'
sg14
I4
sa(dp1264
g16
(lp1265
S'd'
asg38
I294
sS'.thisRepN'
p1266
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1267
I153
sS'.thisN'
p1268
I153
sS'.thisIndex'
p1269
g43
(g45
S'&\x01\x00\x00'
tRp1270
sg15
(lp1271
S'k'
asg17
S'N'
sg14
I4
sa(dp1272
g16
(lp1273
S'd'
asg38
I256
sS'.thisRepN'
p1274
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1275
I154
sS'.thisN'
p1276
I154
sS'.thisIndex'
p1277
g43
(g45
S'\x00\x01\x00\x00'
tRp1278
sg15
(lp1279
S'd'
asg17
S'Y'
sg14
I4
sa(dp1280
g16
(lp1281
S'k'
asg38
I456
sS'.thisRepN'
p1282
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1283
I155
sS'.thisN'
p1284
I155
sS'.thisIndex'
p1285
g43
(g45
S'\xc8\x01\x00\x00'
tRp1286
sg15
(lp1287
S'd'
asg17
S'N'
sg14
I4
sa(dp1288
g16
(lp1289
S'd'
asg38
I46
sS'.thisRepN'
p1290
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1291
I156
sS'.thisN'
p1292
I156
sS'.thisIndex'
p1293
g43
(g45
S'.\x00\x00\x00'
tRp1294
sg15
(lp1295
S'd'
asg17
S'Y'
sg14
I4
sa(dp1296
g16
(lp1297
S'k'
asg38
I356
sS'.thisRepN'
p1298
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1299
I157
sS'.thisN'
p1300
I157
sS'.thisIndex'
p1301
g43
(g45
S'd\x01\x00\x00'
tRp1302
sg15
(lp1303
S'd'
asg17
S'N'
sg14
I4
sa(dp1304
g16
(lp1305
S'k'
asg38
I544
sS'.thisRepN'
p1306
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1307
I158
sS'.thisN'
p1308
I158
sS'.thisIndex'
p1309
g43
(g45
S' \x02\x00\x00'
tRp1310
sg15
(lp1311
S'k'
asg17
S'Y'
sg14
I4
sa(dp1312
g16
(lp1313
S'd'
asg38
I121
sS'.thisRepN'
p1314
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1315
I159
sS'.thisN'
p1316
I159
sS'.thisIndex'
p1317
g43
(g45
S'y\x00\x00\x00'
tRp1318
sg15
(lp1319
S'k'
asg17
S'N'
sg14
I4
sa(dp1320
g16
(lp1321
S'd'
asg38
I5
sS'.thisRepN'
p1322
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1323
I160
sS'.thisN'
p1324
I160
sS'.thisIndex'
p1325
g43
(g45
S'\x05\x00\x00\x00'
tRp1326
sg15
(lp1327
S'd'
asg17
S'Y'
sg14
I4
sa(dp1328
g16
(lp1329
S'k'
asg38
I409
sS'.thisRepN'
p1330
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1331
I161
sS'.thisN'
p1332
I161
sS'.thisIndex'
p1333
g43
(g45
S'\x99\x01\x00\x00'
tRp1334
sg15
(lp1335
S'd'
asg17
S'N'
sg14
I4
sa(dp1336
g16
(lp1337
S'k'
asg38
I463
sS'.thisRepN'
p1338
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1339
I162
sS'.thisN'
p1340
I162
sS'.thisIndex'
p1341
g43
(g45
S'\xcf\x01\x00\x00'
tRp1342
sg15
(lp1343
S'k'
asg17
S'Y'
sg14
I4
sa(dp1344
g16
(lp1345
S'd'
asg38
I252
sS'.thisRepN'
p1346
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1347
I163
sS'.thisN'
p1348
I163
sS'.thisIndex'
p1349
g43
(g45
S'\xfc\x00\x00\x00'
tRp1350
sg15
(lp1351
S'k'
asg17
S'N'
sg14
I4
sa(dp1352
g16
(lp1353
S'd'
asg38
I40
sS'.thisRepN'
p1354
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1355
I164
sS'.thisN'
p1356
I164
sS'.thisIndex'
p1357
g43
(g45
S'(\x00\x00\x00'
tRp1358
sg15
(lp1359
S'd'
asg17
S'Y'
sg14
I4
sa(dp1360
g16
(lp1361
S'k'
asg38
I556
sS'.thisRepN'
p1362
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1363
I165
sS'.thisN'
p1364
I165
sS'.thisIndex'
p1365
g43
(g45
S',\x02\x00\x00'
tRp1366
sg15
(lp1367
S'k'
asg17
S'Y'
sg14
I4
sa(dp1368
g16
(lp1369
S'd'
asg38
I244
sS'.thisRepN'
p1370
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1371
I166
sS'.thisN'
p1372
I166
sS'.thisIndex'
p1373
g43
(g45
S'\xf4\x00\x00\x00'
tRp1374
sg15
(lp1375
S'd'
asg17
S'Y'
sg14
I4
sa(dp1376
g16
(lp1377
S'k'
asg38
I509
sS'.thisRepN'
p1378
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1379
I167
sS'.thisN'
p1380
I167
sS'.thisIndex'
p1381
g43
(g45
S'\xfd\x01\x00\x00'
tRp1382
sg15
(lp1383
S'k'
asg17
S'Y'
sg14
I4
sa(dp1384
g16
(lp1385
S'd'
asg38
I38
sS'.thisRepN'
p1386
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1387
I168
sS'.thisN'
p1388
I168
sS'.thisIndex'
p1389
g43
(g45
S'&\x00\x00\x00'
tRp1390
sg15
(lp1391
S'd'
asg17
S'Y'
sg14
I4
sa(dp1392
g16
(lp1393
S'd'
asg38
I233
sS'.thisRepN'
p1394
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1395
I169
sS'.thisN'
p1396
I169
sS'.thisIndex'
p1397
g43
(g45
S'\xe9\x00\x00\x00'
tRp1398
sg15
(lp1399
S'k'
asg17
S'N'
sg14
I4
sa(dp1400
g16
(lp1401
S'd'
asg38
I265
sS'.thisRepN'
p1402
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1403
I170
sS'.thisN'
p1404
I170
sS'.thisIndex'
p1405
g43
(g45
S'\t\x01\x00\x00'
tRp1406
sg15
(lp1407
S'd'
asg17
S'Y'
sg14
I4
sa(dp1408
g16
(lp1409
S'd'
asg38
I23
sS'.thisRepN'
p1410
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1411
I171
sS'.thisN'
p1412
I171
sS'.thisIndex'
p1413
g43
(g45
S'\x17\x00\x00\x00'
tRp1414
sg15
(lp1415
S'd'
asg17
S'Y'
sg14
I4
sa(dp1416
g16
(lp1417
S'k'
asg38
I599
sS'.thisRepN'
p1418
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1419
I172
sS'.thisN'
p1420
I172
sS'.thisIndex'
p1421
g43
(g45
S'W\x02\x00\x00'
tRp1422
sg15
(lp1423
S'd'
asg17
S'N'
sg14
I4
sa(dp1424
g16
(lp1425
S'k'
asg38
I371
sS'.thisRepN'
p1426
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1427
I173
sS'.thisN'
p1428
I173
sS'.thisIndex'
p1429
g43
(g45
S's\x01\x00\x00'
tRp1430
sg15
(lp1431
S'k'
asg17
S'Y'
sg14
I4
sa(dp1432
g16
(lp1433
S'd'
asg38
I129
sS'.thisRepN'
p1434
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1435
I174
sS'.thisN'
p1436
I174
sS'.thisIndex'
p1437
g43
(g45
S'\x81\x00\x00\x00'
tRp1438
sg15
(lp1439
S'k'
asg17
S'N'
sg14
I4
sa(dp1440
g16
(lp1441
S'd'
asg38
I211
sS'.thisRepN'
p1442
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1443
I175
sS'.thisN'
p1444
I175
sS'.thisIndex'
p1445
g43
(g45
S'\xd3\x00\x00\x00'
tRp1446
sg15
(lp1447
S'd'
asg17
S'Y'
sg14
I4
sa(dp1448
g16
(lp1449
S'd'
asg38
I215
sS'.thisRepN'
p1450
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1451
I176
sS'.thisN'
p1452
I176
sS'.thisIndex'
p1453
g43
(g45
S'\xd7\x00\x00\x00'
tRp1454
sg15
(lp1455
S'd'
asg17
S'Y'
sg14
I4
sa(dp1456
g16
(lp1457
S'd'
asg38
I45
sS'.thisRepN'
p1458
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1459
I177
sS'.thisN'
p1460
I177
sS'.thisIndex'
p1461
g43
(g45
S'-\x00\x00\x00'
tRp1462
sg15
(lp1463
S'k'
asg17
S'N'
sg14
I4
sa(dp1464
g16
(lp1465
S'k'
asg38
I506
sS'.thisRepN'
p1466
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1467
I178
sS'.thisN'
p1468
I178
sS'.thisIndex'
p1469
g43
(g45
S'\xfa\x01\x00\x00'
tRp1470
sg15
(lp1471
S'd'
asg17
S'N'
sg14
I4
sa(dp1472
g16
(lp1473
S'd'
asg38
I160
sS'.thisRepN'
p1474
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1475
I179
sS'.thisN'
p1476
I179
sS'.thisIndex'
p1477
g43
(g45
S'\xa0\x00\x00\x00'
tRp1478
sg15
(lp1479
S'k'
asg17
S'N'
sg14
I4
sa(dp1480
g16
(lp1481
S'k'
asg38
I531
sS'.thisRepN'
p1482
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1483
I180
sS'.thisN'
p1484
I180
sS'.thisIndex'
p1485
g43
(g45
S'\x13\x02\x00\x00'
tRp1486
sg15
(lp1487
S'd'
asg17
S'N'
sg14
I4
sa(dp1488
g16
(lp1489
S'k'
asg38
I539
sS'.thisRepN'
p1490
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1491
I181
sS'.thisN'
p1492
I181
sS'.thisIndex'
p1493
g43
(g45
S'\x1b\x02\x00\x00'
tRp1494
sg15
(lp1495
S'k'
asg17
S'Y'
sg14
I4
sa(dp1496
g16
(lp1497
S'd'
asg38
I197
sS'.thisRepN'
p1498
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1499
I182
sS'.thisN'
p1500
I182
sS'.thisIndex'
p1501
g43
(g45
S'\xc5\x00\x00\x00'
tRp1502
sg15
(lp1503
S'd'
asg17
S'Y'
sg14
I4
sa(dp1504
g16
(lp1505
S'k'
asg38
I342
sS'.thisRepN'
p1506
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1507
I183
sS'.thisN'
p1508
I183
sS'.thisIndex'
p1509
g43
(g45
S'V\x01\x00\x00'
tRp1510
sg15
(lp1511
S'd'
asg17
S'N'
sg14
I4
sa(dp1512
g16
(lp1513
S'd'
asg38
I282
sS'.thisRepN'
p1514
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1515
I184
sS'.thisN'
p1516
I184
sS'.thisIndex'
p1517
g43
(g45
S'\x1a\x01\x00\x00'
tRp1518
sg15
(lp1519
S'd'
asg17
S'Y'
sg14
I4
sa(dp1520
g16
(lp1521
S'k'
asg38
I597
sS'.thisRepN'
p1522
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1523
I185
sS'.thisN'
p1524
I185
sS'.thisIndex'
p1525
g43
(g45
S'U\x02\x00\x00'
tRp1526
sg15
(lp1527
S'd'
asg17
S'N'
sg14
I4
sa(dp1528
g16
(lp1529
S'd'
asg38
I259
sS'.thisRepN'
p1530
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1531
I186
sS'.thisN'
p1532
I186
sS'.thisIndex'
p1533
g43
(g45
S'\x03\x01\x00\x00'
tRp1534
sg15
(lp1535
S'k'
asg17
S'N'
sg14
I4
sa(dp1536
g16
(lp1537
S'd'
asg38
I32
sS'.thisRepN'
p1538
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1539
I187
sS'.thisN'
p1540
I187
sS'.thisIndex'
p1541
g43
(g45
S' \x00\x00\x00'
tRp1542
sg15
(lp1543
S'd'
asg17
S'Y'
sg14
I4
sa(dp1544
g16
(lp1545
S'k'
asg38
I560
sS'.thisRepN'
p1546
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1547
I188
sS'.thisN'
p1548
I188
sS'.thisIndex'
p1549
g43
(g45
S'0\x02\x00\x00'
tRp1550
sg15
(lp1551
S'd'
asg17
S'N'
sg14
I4
sa(dp1552
g16
(lp1553
S'd'
asg38
I220
sS'.thisRepN'
p1554
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1555
I189
sS'.thisN'
p1556
I189
sS'.thisIndex'
p1557
g43
(g45
S'\xdc\x00\x00\x00'
tRp1558
sg15
(lp1559
S'k'
asg17
S'N'
sg14
I4
sa(dp1560
g16
(lp1561
S'k'
asg38
I383
sS'.thisRepN'
p1562
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1563
I190
sS'.thisN'
p1564
I190
sS'.thisIndex'
p1565
g43
(g45
S'\x7f\x01\x00\x00'
tRp1566
sg15
(lp1567
S'd'
asg17
S'N'
sg14
I4
sa(dp1568
g16
(lp1569
S'k'
asg38
I391
sS'.thisRepN'
p1570
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1571
I191
sS'.thisN'
p1572
I191
sS'.thisIndex'
p1573
g43
(g45
S'\x87\x01\x00\x00'
tRp1574
sg15
(lp1575
S'k'
asg17
S'Y'
sg14
I4
sa(dp1576
g16
(lp1577
S'd'
asg38
I136
sS'.thisRepN'
p1578
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1579
I192
sS'.thisN'
p1580
I192
sS'.thisIndex'
p1581
g43
(g45
S'\x88\x00\x00\x00'
tRp1582
sg15
(lp1583
S'k'
asg17
S'N'
sg14
I4
sa(dp1584
g16
(lp1585
S'd'
asg38
I266
sS'.thisRepN'
p1586
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1587
I193
sS'.thisN'
p1588
I193
sS'.thisIndex'
p1589
g43
(g45
S'\n\x01\x00\x00'
tRp1590
sg15
(lp1591
S'd'
asg17
S'Y'
sg14
I4
sa(dp1592
g16
(lp1593
S'd'
asg38
I142
sS'.thisRepN'
p1594
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1595
I194
sS'.thisN'
p1596
I194
sS'.thisIndex'
p1597
g43
(g45
S'\x8e\x00\x00\x00'
tRp1598
sg15
(lp1599
S'd'
asg17
S'Y'
sg14
I4
sa(dp1600
g16
(lp1601
S'd'
asg38
I96
sS'.thisRepN'
p1602
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1603
I195
sS'.thisN'
p1604
I195
sS'.thisIndex'
p1605
g43
(g45
S'`\x00\x00\x00'
tRp1606
sg15
(lp1607
S'k'
asg17
S'N'
sg14
I4
sa(dp1608
g16
(lp1609
S'k'
asg38
I508
sS'.thisRepN'
p1610
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1611
I196
sS'.thisN'
p1612
I196
sS'.thisIndex'
p1613
g43
(g45
S'\xfc\x01\x00\x00'
tRp1614
sg15
(lp1615
S'k'
asg17
S'Y'
sg14
I4
sa(dp1616
g16
(lp1617
S'k'
asg38
I490
sS'.thisRepN'
p1618
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1619
I197
sS'.thisN'
p1620
I197
sS'.thisIndex'
p1621
g43
(g45
S'\xea\x01\x00\x00'
tRp1622
sg15
(lp1623
S'k'
asg17
S'Y'
sg14
I4
sa(dp1624
g16
(lp1625
S'd'
asg38
I177
sS'.thisRepN'
p1626
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1627
I198
sS'.thisN'
p1628
I198
sS'.thisIndex'
p1629
g43
(g45
S'\xb1\x00\x00\x00'
tRp1630
sg15
(lp1631
S'd'
asg17
S'Y'
sg14
I4
sa(dp1632
g16
(lp1633
S'd'
asg38
I157
sS'.thisRepN'
p1634
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1635
I199
sS'.thisN'
p1636
I199
sS'.thisIndex'
p1637
g43
(g45
S'\x9d\x00\x00\x00'
tRp1638
sg15
(lp1639
S'd'
asg17
S'Y'
sg14
I4
sa(dp1640
g16
(lp1641
S'k'
asg38
I316
sS'.thisRepN'
p1642
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1643
I200
sS'.thisN'
p1644
I200
sS'.thisIndex'
p1645
g43
(g45
S'<\x01\x00\x00'
tRp1646
sg15
(lp1647
S'k'
asg17
S'Y'
sg14
I5
sa(dp1648
g16
(lp1649
S'k'
asg38
I363
sS'.thisRepN'
p1650
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1651
I201
sS'.thisN'
p1652
I201
sS'.thisIndex'
p1653
g43
(g45
S'k\x01\x00\x00'
tRp1654
sg15
(lp1655
S'd'
asg17
S'N'
sg14
I5
sa(dp1656
g16
(lp1657
S'k'
asg38
I565
sS'.thisRepN'
p1658
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1659
I202
sS'.thisN'
p1660
I202
sS'.thisIndex'
p1661
g43
(g45
S'5\x02\x00\x00'
tRp1662
sg15
(lp1663
S'k'
asg17
S'Y'
sg14
I5
sa(dp1664
g16
(lp1665
S'k'
asg38
I532
sS'.thisRepN'
p1666
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1667
I203
sS'.thisN'
p1668
I203
sS'.thisIndex'
p1669
g43
(g45
S'\x14\x02\x00\x00'
tRp1670
sg15
(lp1671
S'd'
asg17
S'N'
sg14
I5
sa(dp1672
g16
(lp1673
S'k'
asg38
I309
sS'.thisRepN'
p1674
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1675
I204
sS'.thisN'
p1676
I204
sS'.thisIndex'
p1677
g43
(g45
S'5\x01\x00\x00'
tRp1678
sg15
(lp1679
S'k'
asg17
S'Y'
sg14
I5
sa(dp1680
g16
(lp1681
S'd'
asg38
I267
sS'.thisRepN'
p1682
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1683
I205
sS'.thisN'
p1684
I205
sS'.thisIndex'
p1685
g43
(g45
S'\x0b\x01\x00\x00'
tRp1686
sg15
(lp1687
S'd'
asg17
S'Y'
sg14
I5
sa(dp1688
g16
(lp1689
S'k'
asg38
I381
sS'.thisRepN'
p1690
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1691
I206
sS'.thisN'
p1692
I206
sS'.thisIndex'
p1693
g43
(g45
S'}\x01\x00\x00'
tRp1694
sg15
(lp1695
S'k'
asg17
S'Y'
sg14
I5
sa(dp1696
g16
(lp1697
S'k'
asg38
I438
sS'.thisRepN'
p1698
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1699
I207
sS'.thisN'
p1700
I207
sS'.thisIndex'
p1701
g43
(g45
S'\xb6\x01\x00\x00'
tRp1702
sg15
(lp1703
S'd'
asg17
S'N'
sg14
I5
sa(dp1704
g16
(lp1705
S'd'
asg38
I168
sS'.thisRepN'
p1706
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1707
I208
sS'.thisN'
p1708
I208
sS'.thisIndex'
p1709
g43
(g45
S'\xa8\x00\x00\x00'
tRp1710
sg15
(lp1711
S'd'
asg17
S'Y'
sg14
I5
sa(dp1712
g16
(lp1713
S'k'
asg38
I498
sS'.thisRepN'
p1714
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1715
I209
sS'.thisN'
p1716
I209
sS'.thisIndex'
p1717
g43
(g45
S'\xf2\x01\x00\x00'
tRp1718
sg15
(lp1719
S'k'
asg17
S'Y'
sg14
I5
sa(dp1720
g16
(lp1721
S'd'
asg38
I135
sS'.thisRepN'
p1722
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1723
I210
sS'.thisN'
p1724
I210
sS'.thisIndex'
p1725
g43
(g45
S'\x87\x00\x00\x00'
tRp1726
sg15
(lp1727
S'd'
asg17
S'Y'
sg14
I5
sa(dp1728
g16
(lp1729
S'd'
asg38
I87
sS'.thisRepN'
p1730
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1731
I211
sS'.thisN'
p1732
I211
sS'.thisIndex'
p1733
g43
(g45
S'W\x00\x00\x00'
tRp1734
sg15
(lp1735
S'k'
asg17
S'N'
sg14
I5
sa(dp1736
g16
(lp1737
S'k'
asg38
I312
sS'.thisRepN'
p1738
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1739
I212
sS'.thisN'
p1740
I212
sS'.thisIndex'
p1741
g43
(g45
S'8\x01\x00\x00'
tRp1742
sg15
(lp1743
S'd'
asg17
S'N'
sg14
I5
sa(dp1744
g16
(lp1745
S'd'
asg38
I137
sS'.thisRepN'
p1746
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1747
I213
sS'.thisN'
p1748
I213
sS'.thisIndex'
p1749
g43
(g45
S'\x89\x00\x00\x00'
tRp1750
sg15
(lp1751
S'k'
asg17
S'N'
sg14
I5
sa(dp1752
g16
(lp1753
S'd'
asg38
I198
sS'.thisRepN'
p1754
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1755
I214
sS'.thisN'
p1756
I214
sS'.thisIndex'
p1757
g43
(g45
S'\xc6\x00\x00\x00'
tRp1758
sg15
(lp1759
S'd'
asg17
S'Y'
sg14
I5
sa(dp1760
g16
(lp1761
S'k'
asg38
I480
sS'.thisRepN'
p1762
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1763
I215
sS'.thisN'
p1764
I215
sS'.thisIndex'
p1765
g43
(g45
S'\xe0\x01\x00\x00'
tRp1766
sg15
(lp1767
S'd'
asg17
S'N'
sg14
I5
sa(dp1768
g16
(lp1769
S'k'
asg38
I400
sS'.thisRepN'
p1770
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1771
I216
sS'.thisN'
p1772
I216
sS'.thisIndex'
p1773
g43
(g45
S'\x90\x01\x00\x00'
tRp1774
sg15
(lp1775
S'k'
asg17
S'Y'
sg14
I5
sa(dp1776
g16
(lp1777
S'k'
asg38
I359
sS'.thisRepN'
p1778
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1779
I217
sS'.thisN'
p1780
I217
sS'.thisIndex'
p1781
g43
(g45
S'g\x01\x00\x00'
tRp1782
sg15
(lp1783
S'd'
asg17
S'N'
sg14
I5
sa(dp1784
g16
(lp1785
S'd'
asg38
I193
sS'.thisRepN'
p1786
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1787
I218
sS'.thisN'
p1788
I218
sS'.thisIndex'
p1789
g43
(g45
S'\xc1\x00\x00\x00'
tRp1790
sg15
(lp1791
S'k'
asg17
S'N'
sg14
I5
sa(dp1792
g16
(lp1793
S'd'
asg38
I278
sS'.thisRepN'
p1794
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1795
I219
sS'.thisN'
p1796
I219
sS'.thisIndex'
p1797
g43
(g45
S'\x16\x01\x00\x00'
tRp1798
sg15
(lp1799
S'd'
asg17
S'Y'
sg14
I5
sa(dp1800
g16
(lp1801
S'd'
asg38
I236
sS'.thisRepN'
p1802
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1803
I220
sS'.thisN'
p1804
I220
sS'.thisIndex'
p1805
g43
(g45
S'\xec\x00\x00\x00'
tRp1806
sg15
(lp1807
S'd'
asg17
S'Y'
sg14
I5
sa(dp1808
g16
(lp1809
S'd'
asg38
I28
sS'.thisRepN'
p1810
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1811
I221
sS'.thisN'
p1812
I221
sS'.thisIndex'
p1813
g43
(g45
S'\x1c\x00\x00\x00'
tRp1814
sg15
(lp1815
S'k'
asg17
S'N'
sg14
I5
sa(dp1816
g16
(lp1817
S'k'
asg38
I423
sS'.thisRepN'
p1818
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1819
I222
sS'.thisN'
p1820
I222
sS'.thisIndex'
p1821
g43
(g45
S'\xa7\x01\x00\x00'
tRp1822
sg15
(lp1823
S'k'
asg17
S'Y'
sg14
I5
sa(dp1824
g16
(lp1825
S'k'
asg38
I489
sS'.thisRepN'
p1826
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1827
I223
sS'.thisN'
p1828
I223
sS'.thisIndex'
p1829
g43
(g45
S'\xe9\x01\x00\x00'
tRp1830
sg15
(lp1831
S'd'
asg17
S'N'
sg14
I5
sa(dp1832
g16
(lp1833
S'k'
asg38
I511
sS'.thisRepN'
p1834
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1835
I224
sS'.thisN'
p1836
I224
sS'.thisIndex'
p1837
g43
(g45
S'\xff\x01\x00\x00'
tRp1838
sg15
(lp1839
S'd'
asg17
S'N'
sg14
I5
sa(dp1840
g16
(lp1841
S'd'
asg38
I11
sS'.thisRepN'
p1842
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1843
I225
sS'.thisN'
p1844
I225
sS'.thisIndex'
p1845
g43
(g45
S'\x0b\x00\x00\x00'
tRp1846
sg15
(lp1847
S'd'
asg17
S'Y'
sg14
I5
sa(dp1848
g16
(lp1849
S'd'
asg38
I73
sS'.thisRepN'
p1850
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1851
I226
sS'.thisN'
p1852
I226
sS'.thisIndex'
p1853
g43
(g45
S'I\x00\x00\x00'
tRp1854
sg15
(lp1855
S'd'
asg17
S'Y'
sg14
I5
sa(dp1856
g16
(lp1857
S'd'
asg38
I203
sS'.thisRepN'
p1858
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1859
I227
sS'.thisN'
p1860
I227
sS'.thisIndex'
p1861
g43
(g45
S'\xcb\x00\x00\x00'
tRp1862
sg15
(lp1863
S'd'
asg17
S'Y'
sg14
I5
sa(dp1864
g16
(lp1865
S'd'
asg38
I232
sS'.thisRepN'
p1866
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1867
I228
sS'.thisN'
p1868
I228
sS'.thisIndex'
p1869
g43
(g45
S'\xe8\x00\x00\x00'
tRp1870
sg15
(lp1871
S'd'
asg17
S'Y'
sg14
I5
sa(dp1872
g16
(lp1873
S'd'
asg38
I16
sS'.thisRepN'
p1874
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1875
I229
sS'.thisN'
p1876
I229
sS'.thisIndex'
p1877
g43
(g45
S'\x10\x00\x00\x00'
tRp1878
sg15
(lp1879
S'd'
asg17
S'Y'
sg14
I5
sa(dp1880
g16
(lp1881
S'k'
asg38
I578
sS'.thisRepN'
p1882
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1883
I230
sS'.thisN'
p1884
I230
sS'.thisIndex'
p1885
g43
(g45
S'B\x02\x00\x00'
tRp1886
sg15
(lp1887
S'k'
asg17
S'Y'
sg14
I5
sa(dp1888
g16
(lp1889
S'k'
asg38
I579
sS'.thisRepN'
p1890
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1891
I231
sS'.thisN'
p1892
I231
sS'.thisIndex'
p1893
g43
(g45
S'C\x02\x00\x00'
tRp1894
sg15
(lp1895
S'd'
asg17
S'N'
sg14
I5
sa(dp1896
g16
(lp1897
S'k'
asg38
I406
sS'.thisRepN'
p1898
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1899
I232
sS'.thisN'
p1900
I232
sS'.thisIndex'
p1901
g43
(g45
S'\x96\x01\x00\x00'
tRp1902
sg15
(lp1903
S'k'
asg17
S'Y'
sg14
I5
sa(dp1904
g16
(lp1905
S'd'
asg38
I235
sS'.thisRepN'
p1906
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1907
I233
sS'.thisN'
p1908
I233
sS'.thisIndex'
p1909
g43
(g45
S'\xeb\x00\x00\x00'
tRp1910
sg15
(lp1911
S'd'
asg17
S'Y'
sg14
I5
sa(dp1912
g16
(lp1913
S'd'
asg38
I48
sS'.thisRepN'
p1914
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1915
I234
sS'.thisN'
p1916
I234
sS'.thisIndex'
p1917
g43
(g45
S'0\x00\x00\x00'
tRp1918
sg15
(lp1919
S'k'
asg17
S'N'
sg14
I5
sa(dp1920
g16
(lp1921
S'k'
asg38
I424
sS'.thisRepN'
p1922
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1923
I235
sS'.thisN'
p1924
I235
sS'.thisIndex'
p1925
g43
(g45
S'\xa8\x01\x00\x00'
tRp1926
sg15
(lp1927
S'd'
asg17
S'N'
sg14
I5
sa(dp1928
g16
(lp1929
S'k'
asg38
I372
sS'.thisRepN'
p1930
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1931
I236
sS'.thisN'
p1932
I236
sS'.thisIndex'
p1933
g43
(g45
S't\x01\x00\x00'
tRp1934
sg15
(lp1935
S'k'
asg17
S'Y'
sg14
I5
sa(dp1936
g16
(lp1937
S'd'
asg38
I133
sS'.thisRepN'
p1938
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1939
I237
sS'.thisN'
p1940
I237
sS'.thisIndex'
p1941
g43
(g45
S'\x85\x00\x00\x00'
tRp1942
sg15
(lp1943
S'd'
asg17
S'Y'
sg14
I5
sa(dp1944
g16
(lp1945
S'd'
asg38
I258
sS'.thisRepN'
p1946
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1947
I238
sS'.thisN'
p1948
I238
sS'.thisIndex'
p1949
g43
(g45
S'\x02\x01\x00\x00'
tRp1950
sg15
(lp1951
S'k'
asg17
S'N'
sg14
I5
sa(dp1952
g16
(lp1953
S'd'
asg38
I298
sS'.thisRepN'
p1954
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1955
I239
sS'.thisN'
p1956
I239
sS'.thisIndex'
p1957
g43
(g45
S'*\x01\x00\x00'
tRp1958
sg15
(lp1959
S'd'
asg17
S'Y'
sg14
I5
sa(dp1960
g16
(lp1961
S'd'
asg38
I1
sS'.thisRepN'
p1962
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1963
I240
sS'.thisN'
p1964
I240
sS'.thisIndex'
p1965
g43
(g45
S'\x01\x00\x00\x00'
tRp1966
sg15
(lp1967
S'k'
asg17
S'N'
sg14
I5
sa(dp1968
g16
(lp1969
S'd'
asg38
I208
sS'.thisRepN'
p1970
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1971
I241
sS'.thisN'
p1972
I241
sS'.thisIndex'
p1973
g43
(g45
S'\xd0\x00\x00\x00'
tRp1974
sg15
(lp1975
S'd'
asg17
S'Y'
sg14
I5
sa(dp1976
g16
(lp1977
S'k'
asg38
I469
sS'.thisRepN'
p1978
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1979
I242
sS'.thisN'
p1980
I242
sS'.thisIndex'
p1981
g43
(g45
S'\xd5\x01\x00\x00'
tRp1982
sg15
(lp1983
S'd'
asg17
S'N'
sg14
I5
sa(dp1984
g16
(lp1985
S'd'
asg38
I257
sS'.thisRepN'
p1986
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1987
I243
sS'.thisN'
p1988
I243
sS'.thisIndex'
p1989
g43
(g45
S'\x01\x01\x00\x00'
tRp1990
sg15
(lp1991
S'd'
asg17
S'Y'
sg14
I5
sa(dp1992
g16
(lp1993
S'd'
asg38
I60
sS'.thisRepN'
p1994
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p1995
I244
sS'.thisN'
p1996
I244
sS'.thisIndex'
p1997
g43
(g45
S'<\x00\x00\x00'
tRp1998
sg15
(lp1999
S'k'
asg17
S'N'
sg14
I5
sa(dp2000
g16
(lp2001
S'd'
asg38
I231
sS'.thisRepN'
p2002
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2003
I245
sS'.thisN'
p2004
I245
sS'.thisIndex'
p2005
g43
(g45
S'\xe7\x00\x00\x00'
tRp2006
sg15
(lp2007
S'd'
asg17
S'Y'
sg14
I5
sa(dp2008
g16
(lp2009
S'd'
asg38
I65
sS'.thisRepN'
p2010
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2011
I246
sS'.thisN'
p2012
I246
sS'.thisIndex'
p2013
g43
(g45
S'A\x00\x00\x00'
tRp2014
sg15
(lp2015
S'd'
asg17
S'Y'
sg14
I5
sa(dp2016
g16
(lp2017
S'd'
asg38
I164
sS'.thisRepN'
p2018
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2019
I247
sS'.thisN'
p2020
I247
sS'.thisIndex'
p2021
g43
(g45
S'\xa4\x00\x00\x00'
tRp2022
sg15
(lp2023
S'd'
asg17
S'Y'
sg14
I5
sa(dp2024
g16
(lp2025
S'k'
asg38
I587
sS'.thisRepN'
p2026
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2027
I248
sS'.thisN'
p2028
I248
sS'.thisIndex'
p2029
g43
(g45
S'K\x02\x00\x00'
tRp2030
sg15
(lp2031
S'd'
asg17
S'N'
sg14
I5
sa(dp2032
g16
(lp2033
S'd'
asg38
I289
sS'.thisRepN'
p2034
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2035
I249
sS'.thisN'
p2036
I249
sS'.thisIndex'
p2037
g43
(g45
S'!\x01\x00\x00'
tRp2038
sg15
(lp2039
S'd'
asg17
S'Y'
sg14
I5
sa(dp2040
g16
(lp2041
S'd'
asg38
I115
sS'.thisRepN'
p2042
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2043
I250
sS'.thisN'
p2044
I250
sS'.thisIndex'
p2045
g43
(g45
S's\x00\x00\x00'
tRp2046
sg15
(lp2047
S'k'
asg17
S'N'
sg14
I6
sa(dp2048
g16
(lp2049
S'k'
asg38
I435
sS'.thisRepN'
p2050
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2051
I251
sS'.thisN'
p2052
I251
sS'.thisIndex'
p2053
g43
(g45
S'\xb3\x01\x00\x00'
tRp2054
sg15
(lp2055
S'd'
asg17
S'N'
sg14
I6
sa(dp2056
g16
(lp2057
S'd'
asg38
I219
sS'.thisRepN'
p2058
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2059
I252
sS'.thisN'
p2060
I252
sS'.thisIndex'
p2061
g43
(g45
S'\xdb\x00\x00\x00'
tRp2062
sg15
(lp2063
S'd'
asg17
S'Y'
sg14
I6
sa(dp2064
g16
(lp2065
S'd'
asg38
I218
sS'.thisRepN'
p2066
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2067
I253
sS'.thisN'
p2068
I253
sS'.thisIndex'
p2069
g43
(g45
S'\xda\x00\x00\x00'
tRp2070
sg15
(lp2071
S'd'
asg17
S'Y'
sg14
I6
sa(dp2072
g16
(lp2073
S'k'
asg38
I329
sS'.thisRepN'
p2074
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2075
I254
sS'.thisN'
p2076
I254
sS'.thisIndex'
p2077
g43
(g45
S'I\x01\x00\x00'
tRp2078
sg15
(lp2079
S'k'
asg17
S'Y'
sg14
I6
sa(dp2080
g16
(lp2081
S'k'
asg38
I396
sS'.thisRepN'
p2082
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2083
I255
sS'.thisN'
p2084
I255
sS'.thisIndex'
p2085
g43
(g45
S'\x8c\x01\x00\x00'
tRp2086
sg15
(lp2087
S'd'
asg17
S'N'
sg14
I6
sa(dp2088
g16
(lp2089
S'k'
asg38
I361
sS'.thisRepN'
p2090
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2091
I256
sS'.thisN'
p2092
I256
sS'.thisIndex'
p2093
g43
(g45
S'i\x01\x00\x00'
tRp2094
sg15
(lp2095
S'd'
asg17
S'N'
sg14
I6
sa(dp2096
g16
(lp2097
S'd'
asg38
I260
sS'.thisRepN'
p2098
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2099
I257
sS'.thisN'
p2100
I257
sS'.thisIndex'
p2101
g43
(g45
S'\x04\x01\x00\x00'
tRp2102
sg15
(lp2103
S'd'
asg17
S'Y'
sg14
I6
sa(dp2104
g16
(lp2105
S'd'
asg38
I18
sS'.thisRepN'
p2106
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2107
I258
sS'.thisN'
p2108
I258
sS'.thisIndex'
p2109
g43
(g45
S'\x12\x00\x00\x00'
tRp2110
sg15
(lp2111
S'd'
asg17
S'Y'
sg14
I6
sa(dp2112
g16
(lp2113
S'k'
asg38
I562
sS'.thisRepN'
p2114
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2115
I259
sS'.thisN'
p2116
I259
sS'.thisIndex'
p2117
g43
(g45
S'2\x02\x00\x00'
tRp2118
sg15
(lp2119
S'k'
asg17
S'Y'
sg14
I6
sa(dp2120
g16
(lp2121
S'd'
asg38
I146
sS'.thisRepN'
p2122
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2123
I260
sS'.thisN'
p2124
I260
sS'.thisIndex'
p2125
g43
(g45
S'\x92\x00\x00\x00'
tRp2126
sg15
(lp2127
S'k'
asg17
S'N'
sg14
I6
sa(dp2128
g16
(lp2129
S'k'
asg38
I411
sS'.thisRepN'
p2130
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2131
I261
sS'.thisN'
p2132
I261
sS'.thisIndex'
p2133
g43
(g45
S'\x9b\x01\x00\x00'
tRp2134
sg15
(lp2135
S'd'
asg17
S'N'
sg14
I6
sa(dp2136
g16
(lp2137
S'd'
asg38
I226
sS'.thisRepN'
p2138
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2139
I262
sS'.thisN'
p2140
I262
sS'.thisIndex'
p2141
g43
(g45
S'\xe2\x00\x00\x00'
tRp2142
sg15
(lp2143
S'k'
asg17
S'N'
sg14
I6
sa(dp2144
g16
(lp2145
S'd'
asg38
I284
sS'.thisRepN'
p2146
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2147
I263
sS'.thisN'
p2148
I263
sS'.thisIndex'
p2149
g43
(g45
S'\x1c\x01\x00\x00'
tRp2150
sg15
(lp2151
S'd'
asg17
S'Y'
sg14
I6
sa(dp2152
g16
(lp2153
S'k'
asg38
I550
sS'.thisRepN'
p2154
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2155
I264
sS'.thisN'
p2156
I264
sS'.thisIndex'
p2157
g43
(g45
S'&\x02\x00\x00'
tRp2158
sg15
(lp2159
S'k'
asg17
S'Y'
sg14
I6
sa(dp2160
g16
(lp2161
S'd'
asg38
I199
sS'.thisRepN'
p2162
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2163
I265
sS'.thisN'
p2164
I265
sS'.thisIndex'
p2165
g43
(g45
S'\xc7\x00\x00\x00'
tRp2166
sg15
(lp2167
S'd'
asg17
S'Y'
sg14
I6
sa(dp2168
g16
(lp2169
S'k'
asg38
I557
sS'.thisRepN'
p2170
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2171
I266
sS'.thisN'
p2172
I266
sS'.thisIndex'
p2173
g43
(g45
S'-\x02\x00\x00'
tRp2174
sg15
(lp2175
S'k'
asg17
S'Y'
sg14
I6
sa(dp2176
g16
(lp2177
S'k'
asg38
I362
sS'.thisRepN'
p2178
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2179
I267
sS'.thisN'
p2180
I267
sS'.thisIndex'
p2181
g43
(g45
S'j\x01\x00\x00'
tRp2182
sg15
(lp2183
S'k'
asg17
S'Y'
sg14
I6
sa(dp2184
g16
(lp2185
S'k'
asg38
I461
sS'.thisRepN'
p2186
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2187
I268
sS'.thisN'
p2188
I268
sS'.thisIndex'
p2189
g43
(g45
S'\xcd\x01\x00\x00'
tRp2190
sg15
(lp2191
S'd'
asg17
S'N'
sg14
I6
sa(dp2192
g16
(lp2193
S'd'
asg38
I51
sS'.thisRepN'
p2194
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2195
I269
sS'.thisN'
p2196
I269
sS'.thisIndex'
p2197
g43
(g45
S'3\x00\x00\x00'
tRp2198
sg15
(lp2199
S'k'
asg17
S'N'
sg14
I6
sa(dp2200
g16
(lp2201
S'k'
asg38
I380
sS'.thisRepN'
p2202
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2203
I270
sS'.thisN'
p2204
I270
sS'.thisIndex'
p2205
g43
(g45
S'|\x01\x00\x00'
tRp2206
sg15
(lp2207
S'k'
asg17
S'Y'
sg14
I6
sa(dp2208
g16
(lp2209
S'k'
asg38
I473
sS'.thisRepN'
p2210
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2211
I271
sS'.thisN'
p2212
I271
sS'.thisIndex'
p2213
g43
(g45
S'\xd9\x01\x00\x00'
tRp2214
sg15
(lp2215
S'd'
asg17
S'N'
sg14
I6
sa(dp2216
g16
(lp2217
S'k'
asg38
I313
sS'.thisRepN'
p2218
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2219
I272
sS'.thisN'
p2220
I272
sS'.thisIndex'
p2221
g43
(g45
S'9\x01\x00\x00'
tRp2222
sg15
(lp2223
S'd'
asg17
S'N'
sg14
I6
sa(dp2224
g16
(lp2225
S'k'
asg38
I500
sS'.thisRepN'
p2226
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2227
I273
sS'.thisN'
p2228
I273
sS'.thisIndex'
p2229
g43
(g45
S'\xf4\x01\x00\x00'
tRp2230
sg15
(lp2231
S'k'
asg17
S'Y'
sg14
I6
sa(dp2232
g16
(lp2233
S'd'
asg38
I123
sS'.thisRepN'
p2234
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2235
I274
sS'.thisN'
p2236
I274
sS'.thisIndex'
p2237
g43
(g45
S'{\x00\x00\x00'
tRp2238
sg15
(lp2239
S'd'
asg17
S'Y'
sg14
I6
sa(dp2240
g16
(lp2241
S'k'
asg38
I410
sS'.thisRepN'
p2242
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2243
I275
sS'.thisN'
p2244
I275
sS'.thisIndex'
p2245
g43
(g45
S'\x9a\x01\x00\x00'
tRp2246
sg15
(lp2247
S'k'
asg17
S'Y'
sg14
I6
sa(dp2248
g16
(lp2249
S'k'
asg38
I401
sS'.thisRepN'
p2250
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2251
I276
sS'.thisN'
p2252
I276
sS'.thisIndex'
p2253
g43
(g45
S'\x91\x01\x00\x00'
tRp2254
sg15
(lp2255
S'd'
asg17
S'N'
sg14
I6
sa(dp2256
g16
(lp2257
S'd'
asg38
I30
sS'.thisRepN'
p2258
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2259
I277
sS'.thisN'
p2260
I277
sS'.thisIndex'
p2261
g43
(g45
S'\x1e\x00\x00\x00'
tRp2262
sg15
(lp2263
S'k'
asg17
S'N'
sg14
I6
sa(dp2264
g16
(lp2265
S'd'
asg38
I127
sS'.thisRepN'
p2266
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2267
I278
sS'.thisN'
p2268
I278
sS'.thisIndex'
p2269
g43
(g45
S'\x7f\x00\x00\x00'
tRp2270
sg15
(lp2271
S'd'
asg17
S'Y'
sg14
I6
sa(dp2272
g16
(lp2273
S'd'
asg38
I194
sS'.thisRepN'
p2274
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2275
I279
sS'.thisN'
p2276
I279
sS'.thisIndex'
p2277
g43
(g45
S'\xc2\x00\x00\x00'
tRp2278
sg15
(lp2279
S'd'
asg17
S'Y'
sg14
I6
sa(dp2280
g16
(lp2281
S'k'
asg38
I394
sS'.thisRepN'
p2282
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2283
I280
sS'.thisN'
p2284
I280
sS'.thisIndex'
p2285
g43
(g45
S'\x8a\x01\x00\x00'
tRp2286
sg15
(lp2287
S'd'
asg17
S'N'
sg14
I6
sa(dp2288
g16
(lp2289
S'd'
asg38
I10
sS'.thisRepN'
p2290
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2291
I281
sS'.thisN'
p2292
I281
sS'.thisIndex'
p2293
g43
(g45
S'\n\x00\x00\x00'
tRp2294
sg15
(lp2295
S'k'
asg17
S'N'
sg14
I6
sa(dp2296
g16
(lp2297
S'k'
asg38
I315
sS'.thisRepN'
p2298
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2299
I282
sS'.thisN'
p2300
I282
sS'.thisIndex'
p2301
g43
(g45
S';\x01\x00\x00'
tRp2302
sg15
(lp2303
S'd'
asg17
S'N'
sg14
I6
sa(dp2304
g16
(lp2305
S'k'
asg38
I483
sS'.thisRepN'
p2306
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2307
I283
sS'.thisN'
p2308
I283
sS'.thisIndex'
p2309
g43
(g45
S'\xe3\x01\x00\x00'
tRp2310
sg15
(lp2311
S'd'
asg17
S'N'
sg14
I6
sa(dp2312
g16
(lp2313
S'k'
asg38
I592
sS'.thisRepN'
p2314
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2315
I284
sS'.thisN'
p2316
I284
sS'.thisIndex'
p2317
g43
(g45
S'P\x02\x00\x00'
tRp2318
sg15
(lp2319
S'd'
asg17
S'N'
sg14
I6
sa(dp2320
g16
(lp2321
S'd'
asg38
I170
sS'.thisRepN'
p2322
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2323
I285
sS'.thisN'
p2324
I285
sS'.thisIndex'
p2325
g43
(g45
S'\xaa\x00\x00\x00'
tRp2326
sg15
(lp2327
S'k'
asg17
S'N'
sg14
I6
sa(dp2328
g16
(lp2329
S'k'
asg38
I514
sS'.thisRepN'
p2330
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2331
I286
sS'.thisN'
p2332
I286
sS'.thisIndex'
p2333
g43
(g45
S'\x02\x02\x00\x00'
tRp2334
sg15
(lp2335
S'd'
asg17
S'N'
sg14
I6
sa(dp2336
g16
(lp2337
S'd'
asg38
I53
sS'.thisRepN'
p2338
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2339
I287
sS'.thisN'
p2340
I287
sS'.thisIndex'
p2341
g43
(g45
S'5\x00\x00\x00'
tRp2342
sg15
(lp2343
S'k'
asg17
S'N'
sg14
I6
sa(dp2344
g16
(lp2345
S'k'
asg38
I481
sS'.thisRepN'
p2346
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2347
I288
sS'.thisN'
p2348
I288
sS'.thisIndex'
p2349
g43
(g45
S'\xe1\x01\x00\x00'
tRp2350
sg15
(lp2351
S'k'
asg17
S'Y'
sg14
I6
sa(dp2352
g16
(lp2353
S'd'
asg38
I276
sS'.thisRepN'
p2354
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2355
I289
sS'.thisN'
p2356
I289
sS'.thisIndex'
p2357
g43
(g45
S'\x14\x01\x00\x00'
tRp2358
sg15
(lp2359
S'd'
asg17
S'Y'
sg14
I6
sa(dp2360
g16
(lp2361
S'k'
asg38
I445
sS'.thisRepN'
p2362
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2363
I290
sS'.thisN'
p2364
I290
sS'.thisIndex'
p2365
g43
(g45
S'\xbd\x01\x00\x00'
tRp2366
sg15
(lp2367
S'd'
asg17
S'N'
sg14
I6
sa(dp2368
g16
(lp2369
S'k'
asg38
I476
sS'.thisRepN'
p2370
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2371
I291
sS'.thisN'
p2372
I291
sS'.thisIndex'
p2373
g43
(g45
S'\xdc\x01\x00\x00'
tRp2374
sg15
(lp2375
S'd'
asg17
S'N'
sg14
I6
sa(dp2376
g16
(lp2377
S'd'
asg38
I44
sS'.thisRepN'
p2378
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2379
I292
sS'.thisN'
p2380
I292
sS'.thisIndex'
p2381
g43
(g45
S',\x00\x00\x00'
tRp2382
sg15
(lp2383
S'k'
asg17
S'N'
sg14
I6
sa(dp2384
g16
(lp2385
S'd'
asg38
I263
sS'.thisRepN'
p2386
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2387
I293
sS'.thisN'
p2388
I293
sS'.thisIndex'
p2389
g43
(g45
S'\x07\x01\x00\x00'
tRp2390
sg15
(lp2391
S'd'
asg17
S'Y'
sg14
I6
sa(dp2392
g16
(lp2393
S'd'
asg38
I124
sS'.thisRepN'
p2394
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2395
I294
sS'.thisN'
p2396
I294
sS'.thisIndex'
p2397
g43
(g45
S'|\x00\x00\x00'
tRp2398
sg15
(lp2399
S'd'
asg17
S'Y'
sg14
I6
sa(dp2400
g16
(lp2401
S'k'
asg38
I567
sS'.thisRepN'
p2402
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2403
I295
sS'.thisN'
p2404
I295
sS'.thisIndex'
p2405
g43
(g45
S'7\x02\x00\x00'
tRp2406
sg15
(lp2407
S'd'
asg17
S'N'
sg14
I6
sa(dp2408
g16
(lp2409
S'k'
asg38
I447
sS'.thisRepN'
p2410
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2411
I296
sS'.thisN'
p2412
I296
sS'.thisIndex'
p2413
g43
(g45
S'\xbf\x01\x00\x00'
tRp2414
sg15
(lp2415
S'k'
asg17
S'Y'
sg14
I6
sa(dp2416
g16
(lp2417
S'd'
asg38
I178
sS'.thisRepN'
p2418
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2419
I297
sS'.thisN'
p2420
I297
sS'.thisIndex'
p2421
g43
(g45
S'\xb2\x00\x00\x00'
tRp2422
sg15
(lp2423
S'd'
asg17
S'Y'
sg14
I6
sa(dp2424
g16
(lp2425
S'd'
asg38
I107
sS'.thisRepN'
p2426
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2427
I298
sS'.thisN'
p2428
I298
sS'.thisIndex'
p2429
g43
(g45
S'k\x00\x00\x00'
tRp2430
sg15
(lp2431
S'd'
asg17
S'Y'
sg14
I6
sa(dp2432
g16
(lp2433
S'd'
asg38
I61
sS'.thisRepN'
p2434
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2435
I299
sS'.thisN'
p2436
I299
sS'.thisIndex'
p2437
g43
(g45
S'=\x00\x00\x00'
tRp2438
sg15
(lp2439
S'd'
asg17
S'Y'
sg14
I6
sa(dp2440
g16
(lp2441
S'k'
asg38
I591
sS'.thisRepN'
p2442
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2443
I300
sS'.thisN'
p2444
I300
sS'.thisIndex'
p2445
g43
(g45
S'O\x02\x00\x00'
tRp2446
sg15
(lp2447
S'd'
asg17
S'N'
sg14
I7
sa(dp2448
g16
(lp2449
S'd'
asg38
I293
sS'.thisRepN'
p2450
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2451
I301
sS'.thisN'
p2452
I301
sS'.thisIndex'
p2453
g43
(g45
S'%\x01\x00\x00'
tRp2454
sg15
(lp2455
S'd'
asg17
S'Y'
sg14
I7
sa(dp2456
g16
(lp2457
S'k'
asg38
I321
sS'.thisRepN'
p2458
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2459
I302
sS'.thisN'
p2460
I302
sS'.thisIndex'
p2461
g43
(g45
S'A\x01\x00\x00'
tRp2462
sg15
(lp2463
S'd'
asg17
S'N'
sg14
I7
sa(dp2464
g16
(lp2465
S'k'
asg38
I488
sS'.thisRepN'
p2466
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2467
I303
sS'.thisN'
p2468
I303
sS'.thisIndex'
p2469
g43
(g45
S'\xe8\x01\x00\x00'
tRp2470
sg15
(lp2471
S'd'
asg17
S'N'
sg14
I7
sa(dp2472
g16
(lp2473
S'd'
asg38
I158
sS'.thisRepN'
p2474
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2475
I304
sS'.thisN'
p2476
I304
sS'.thisIndex'
p2477
g43
(g45
S'\x9e\x00\x00\x00'
tRp2478
sg15
(lp2479
S'k'
asg17
S'N'
sg14
I7
sa(dp2480
g16
(lp2481
S'd'
asg38
I4
sS'.thisRepN'
p2482
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2483
I305
sS'.thisN'
p2484
I305
sS'.thisIndex'
p2485
g43
(g45
S'\x04\x00\x00\x00'
tRp2486
sg15
(lp2487
S'd'
asg17
S'Y'
sg14
I7
sa(dp2488
g16
(lp2489
S'k'
asg38
I349
sS'.thisRepN'
p2490
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2491
I306
sS'.thisN'
p2492
I306
sS'.thisIndex'
p2493
g43
(g45
S']\x01\x00\x00'
tRp2494
sg15
(lp2495
S'd'
asg17
S'N'
sg14
I7
sa(dp2496
g16
(lp2497
S'k'
asg38
I503
sS'.thisRepN'
p2498
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2499
I307
sS'.thisN'
p2500
I307
sS'.thisIndex'
p2501
g43
(g45
S'\xf7\x01\x00\x00'
tRp2502
sg15
(lp2503
S'k'
asg17
S'Y'
sg14
I7
sa(dp2504
g16
(lp2505
S'd'
asg38
I77
sS'.thisRepN'
p2506
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2507
I308
sS'.thisN'
p2508
I308
sS'.thisIndex'
p2509
g43
(g45
S'M\x00\x00\x00'
tRp2510
sg15
(lp2511
S'k'
asg17
S'N'
sg14
I7
sa(dp2512
g16
(lp2513
S'k'
asg38
I593
sS'.thisRepN'
p2514
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2515
I309
sS'.thisN'
p2516
I309
sS'.thisIndex'
p2517
g43
(g45
S'Q\x02\x00\x00'
tRp2518
sg15
(lp2519
S'd'
asg17
S'N'
sg14
I7
sa(dp2520
g16
(lp2521
S'd'
asg38
I223
sS'.thisRepN'
p2522
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2523
I310
sS'.thisN'
p2524
I310
sS'.thisIndex'
p2525
g43
(g45
S'\xdf\x00\x00\x00'
tRp2526
sg15
(lp2527
S'k'
asg17
S'N'
sg14
I7
sa(dp2528
g16
(lp2529
S'd'
asg38
I36
sS'.thisRepN'
p2530
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2531
I311
sS'.thisN'
p2532
I311
sS'.thisIndex'
p2533
g43
(g45
S'$\x00\x00\x00'
tRp2534
sg15
(lp2535
S'd'
asg17
S'Y'
sg14
I7
sa(dp2536
g16
(lp2537
S'd'
asg38
I209
sS'.thisRepN'
p2538
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2539
I312
sS'.thisN'
p2540
I312
sS'.thisIndex'
p2541
g43
(g45
S'\xd1\x00\x00\x00'
tRp2542
sg15
(lp2543
S'd'
asg17
S'Y'
sg14
I7
sa(dp2544
g16
(lp2545
S'k'
asg38
I452
sS'.thisRepN'
p2546
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2547
I313
sS'.thisN'
p2548
I313
sS'.thisIndex'
p2549
g43
(g45
S'\xc4\x01\x00\x00'
tRp2550
sg15
(lp2551
S'd'
asg17
S'N'
sg14
I7
sa(dp2552
g16
(lp2553
S'k'
asg38
I366
sS'.thisRepN'
p2554
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2555
I314
sS'.thisN'
p2556
I314
sS'.thisIndex'
p2557
g43
(g45
S'n\x01\x00\x00'
tRp2558
sg15
(lp2559
S'd'
asg17
S'N'
sg14
I7
sa(dp2560
g16
(lp2561
S'k'
asg38
I382
sS'.thisRepN'
p2562
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2563
I315
sS'.thisN'
p2564
I315
sS'.thisIndex'
p2565
g43
(g45
S'~\x01\x00\x00'
tRp2566
sg15
(lp2567
S'd'
asg17
S'N'
sg14
I7
sa(dp2568
g16
(lp2569
S'k'
asg38
I351
sS'.thisRepN'
p2570
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2571
I316
sS'.thisN'
p2572
I316
sS'.thisIndex'
p2573
g43
(g45
S'_\x01\x00\x00'
tRp2574
sg15
(lp2575
S'k'
asg17
S'Y'
sg14
I7
sa(dp2576
g16
(lp2577
S'k'
asg38
I467
sS'.thisRepN'
p2578
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2579
I317
sS'.thisN'
p2580
I317
sS'.thisIndex'
p2581
g43
(g45
S'\xd3\x01\x00\x00'
tRp2582
sg15
(lp2583
S'k'
asg17
S'Y'
sg14
I7
sa(dp2584
g16
(lp2585
S'd'
asg38
I240
sS'.thisRepN'
p2586
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2587
I318
sS'.thisN'
p2588
I318
sS'.thisIndex'
p2589
g43
(g45
S'\xf0\x00\x00\x00'
tRp2590
sg15
(lp2591
S'k'
asg17
S'N'
sg14
I7
sa(dp2592
g16
(lp2593
S'd'
asg38
I261
sS'.thisRepN'
p2594
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2595
I319
sS'.thisN'
p2596
I319
sS'.thisIndex'
p2597
g43
(g45
S'\x05\x01\x00\x00'
tRp2598
sg15
(lp2599
S'd'
asg17
S'Y'
sg14
I7
sa(dp2600
g16
(lp2601
S'k'
asg38
I471
sS'.thisRepN'
p2602
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2603
I320
sS'.thisN'
p2604
I320
sS'.thisIndex'
p2605
g43
(g45
S'\xd7\x01\x00\x00'
tRp2606
sg15
(lp2607
S'd'
asg17
S'N'
sg14
I7
sa(dp2608
g16
(lp2609
S'k'
asg38
I540
sS'.thisRepN'
p2610
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2611
I321
sS'.thisN'
p2612
I321
sS'.thisIndex'
p2613
g43
(g45
S'\x1c\x02\x00\x00'
tRp2614
sg15
(lp2615
S'k'
asg17
S'Y'
sg14
I7
sa(dp2616
g16
(lp2617
S'k'
asg38
I457
sS'.thisRepN'
p2618
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2619
I322
sS'.thisN'
p2620
I322
sS'.thisIndex'
p2621
g43
(g45
S'\xc9\x01\x00\x00'
tRp2622
sg15
(lp2623
S'd'
asg17
S'N'
sg14
I7
sa(dp2624
g16
(lp2625
S'd'
asg38
I122
sS'.thisRepN'
p2626
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2627
I323
sS'.thisN'
p2628
I323
sS'.thisIndex'
p2629
g43
(g45
S'z\x00\x00\x00'
tRp2630
sg15
(lp2631
S'k'
asg17
S'N'
sg14
I7
sa(dp2632
g16
(lp2633
S'd'
asg38
I101
sS'.thisRepN'
p2634
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2635
I324
sS'.thisN'
p2636
I324
sS'.thisIndex'
p2637
g43
(g45
S'e\x00\x00\x00'
tRp2638
sg15
(lp2639
S'd'
asg17
S'Y'
sg14
I7
sa(dp2640
g16
(lp2641
S'k'
asg38
I574
sS'.thisRepN'
p2642
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2643
I325
sS'.thisN'
p2644
I325
sS'.thisIndex'
p2645
g43
(g45
S'>\x02\x00\x00'
tRp2646
sg15
(lp2647
S'd'
asg17
S'N'
sg14
I7
sa(dp2648
g16
(lp2649
S'd'
asg38
I130
sS'.thisRepN'
p2650
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2651
I326
sS'.thisN'
p2652
I326
sS'.thisIndex'
p2653
g43
(g45
S'\x82\x00\x00\x00'
tRp2654
sg15
(lp2655
S'd'
asg17
S'Y'
sg14
I7
sa(dp2656
g16
(lp2657
S'd'
asg38
I66
sS'.thisRepN'
p2658
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2659
I327
sS'.thisN'
p2660
I327
sS'.thisIndex'
p2661
g43
(g45
S'B\x00\x00\x00'
tRp2662
sg15
(lp2663
S'd'
asg17
S'Y'
sg14
I7
sa(dp2664
g16
(lp2665
S'd'
asg38
I154
sS'.thisRepN'
p2666
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2667
I328
sS'.thisN'
p2668
I328
sS'.thisIndex'
p2669
g43
(g45
S'\x9a\x00\x00\x00'
tRp2670
sg15
(lp2671
S'd'
asg17
S'Y'
sg14
I7
sa(dp2672
g16
(lp2673
S'd'
asg38
I155
sS'.thisRepN'
p2674
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2675
I329
sS'.thisN'
p2676
I329
sS'.thisIndex'
p2677
g43
(g45
S'\x9b\x00\x00\x00'
tRp2678
sg15
(lp2679
S'k'
asg17
S'N'
sg14
I7
sa(dp2680
g16
(lp2681
S'k'
asg38
I573
sS'.thisRepN'
p2682
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2683
I330
sS'.thisN'
p2684
I330
sS'.thisIndex'
p2685
g43
(g45
S'=\x02\x00\x00'
tRp2686
sg15
(lp2687
S'k'
asg17
S'Y'
sg14
I7
sa(dp2688
g16
(lp2689
S'd'
asg38
I255
sS'.thisRepN'
p2690
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2691
I331
sS'.thisN'
p2692
I331
sS'.thisIndex'
p2693
g43
(g45
S'\xff\x00\x00\x00'
tRp2694
sg15
(lp2695
S'k'
asg17
S'N'
sg14
I7
sa(dp2696
g16
(lp2697
S'd'
asg38
I269
sS'.thisRepN'
p2698
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2699
I332
sS'.thisN'
p2700
I332
sS'.thisIndex'
p2701
g43
(g45
S'\r\x01\x00\x00'
tRp2702
sg15
(lp2703
S'd'
asg17
S'Y'
sg14
I7
sa(dp2704
g16
(lp2705
S'k'
asg38
I542
sS'.thisRepN'
p2706
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2707
I333
sS'.thisN'
p2708
I333
sS'.thisIndex'
p2709
g43
(g45
S'\x1e\x02\x00\x00'
tRp2710
sg15
(lp2711
S'k'
asg17
S'Y'
sg14
I7
sa(dp2712
g16
(lp2713
S'd'
asg38
I80
sS'.thisRepN'
p2714
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2715
I334
sS'.thisN'
p2716
I334
sS'.thisIndex'
p2717
g43
(g45
S'P\x00\x00\x00'
tRp2718
sg15
(lp2719
S'k'
asg17
S'N'
sg14
I7
sa(dp2720
g16
(lp2721
S'd'
asg38
I291
sS'.thisRepN'
p2722
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2723
I335
sS'.thisN'
p2724
I335
sS'.thisIndex'
p2725
g43
(g45
S'#\x01\x00\x00'
tRp2726
sg15
(lp2727
S'd'
asg17
S'Y'
sg14
I7
sa(dp2728
g16
(lp2729
S'k'
asg38
I419
sS'.thisRepN'
p2730
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2731
I336
sS'.thisN'
p2732
I336
sS'.thisIndex'
p2733
g43
(g45
S'\xa3\x01\x00\x00'
tRp2734
sg15
(lp2735
S'd'
asg17
S'N'
sg14
I7
sa(dp2736
g16
(lp2737
S'k'
asg38
I598
sS'.thisRepN'
p2738
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2739
I337
sS'.thisN'
p2740
I337
sS'.thisIndex'
p2741
g43
(g45
S'V\x02\x00\x00'
tRp2742
sg15
(lp2743
S'k'
asg17
S'Y'
sg14
I7
sa(dp2744
g16
(lp2745
S'd'
asg38
I91
sS'.thisRepN'
p2746
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2747
I338
sS'.thisN'
p2748
I338
sS'.thisIndex'
p2749
g43
(g45
S'[\x00\x00\x00'
tRp2750
sg15
(lp2751
S'd'
asg17
S'Y'
sg14
I7
sa(dp2752
g16
(lp2753
S'd'
asg38
I196
sS'.thisRepN'
p2754
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2755
I339
sS'.thisN'
p2756
I339
sS'.thisIndex'
p2757
g43
(g45
S'\xc4\x00\x00\x00'
tRp2758
sg15
(lp2759
S'k'
asg17
S'N'
sg14
I7
sa(dp2760
g16
(lp2761
S'd'
asg38
I295
sS'.thisRepN'
p2762
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2763
I340
sS'.thisN'
p2764
I340
sS'.thisIndex'
p2765
g43
(g45
S"'\x01\x00\x00"
tRp2766
sg15
(lp2767
S'd'
asg17
S'Y'
sg14
I7
sa(dp2768
g16
(lp2769
S'k'
asg38
I334
sS'.thisRepN'
p2770
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2771
I341
sS'.thisN'
p2772
I341
sS'.thisIndex'
p2773
g43
(g45
S'N\x01\x00\x00'
tRp2774
sg15
(lp2775
S'k'
asg17
S'Y'
sg14
I7
sa(dp2776
g16
(lp2777
S'k'
asg38
I320
sS'.thisRepN'
p2778
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2779
I342
sS'.thisN'
p2780
I342
sS'.thisIndex'
p2781
g43
(g45
S'@\x01\x00\x00'
tRp2782
sg15
(lp2783
S'd'
asg17
S'N'
sg14
I7
sa(dp2784
g16
(lp2785
S'd'
asg38
I162
sS'.thisRepN'
p2786
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2787
I343
sS'.thisN'
p2788
I343
sS'.thisIndex'
p2789
g43
(g45
S'\xa2\x00\x00\x00'
tRp2790
sg15
(lp2791
S'k'
asg17
S'N'
sg14
I7
sa(dp2792
g16
(lp2793
S'k'
asg38
I583
sS'.thisRepN'
p2794
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2795
I344
sS'.thisN'
p2796
I344
sS'.thisIndex'
p2797
g43
(g45
S'G\x02\x00\x00'
tRp2798
sg15
(lp2799
S'd'
asg17
S'N'
sg14
I7
sa(dp2800
g16
(lp2801
S'k'
asg38
I324
sS'.thisRepN'
p2802
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2803
I345
sS'.thisN'
p2804
I345
sS'.thisIndex'
p2805
g43
(g45
S'D\x01\x00\x00'
tRp2806
sg15
(lp2807
S'k'
asg17
S'Y'
sg14
I7
sa(dp2808
g16
(lp2809
S'd'
asg38
I204
sS'.thisRepN'
p2810
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2811
I346
sS'.thisN'
p2812
I346
sS'.thisIndex'
p2813
g43
(g45
S'\xcc\x00\x00\x00'
tRp2814
sg15
(lp2815
S'k'
asg17
S'N'
sg14
I7
sa(dp2816
g16
(lp2817
S'd'
asg38
I113
sS'.thisRepN'
p2818
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2819
I347
sS'.thisN'
p2820
I347
sS'.thisIndex'
p2821
g43
(g45
S'q\x00\x00\x00'
tRp2822
sg15
(lp2823
S'd'
asg17
S'Y'
sg14
I7
sa(dp2824
g16
(lp2825
S'k'
asg38
I446
sS'.thisRepN'
p2826
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2827
I348
sS'.thisN'
p2828
I348
sS'.thisIndex'
p2829
g43
(g45
S'\xbe\x01\x00\x00'
tRp2830
sg15
(lp2831
S'd'
asg17
S'N'
sg14
I7
sa(dp2832
g16
(lp2833
S'd'
asg38
I234
sS'.thisRepN'
p2834
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2835
I349
sS'.thisN'
p2836
I349
sS'.thisIndex'
p2837
g43
(g45
S'\xea\x00\x00\x00'
tRp2838
sg15
(lp2839
S'k'
asg17
S'N'
sg14
I7
sa(dp2840
g38
I119
sS'.thisN'
p2841
I350
sg23
VF
sg24
g25
sS'.thisTrialN'
p2842
I350
sS'.thisRepN'
p2843
I0
sS'.thisIndex'
p2844
g43
(g45
S'w\x00\x00\x00'
tRp2845
sg15
Nsg17
S'Timed out'
p2846
sg14
I8
sa(dp2847
g16
(lp2848
S'k'
asg38
I347
sS'.thisRepN'
p2849
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2850
I351
sS'.thisN'
p2851
I351
sS'.thisIndex'
p2852
g43
(g45
S'[\x01\x00\x00'
tRp2853
sg15
(lp2854
S'k'
asg17
S'Y'
sg14
I8
sa(dp2855
g16
(lp2856
S'd'
asg38
I134
sS'.thisRepN'
p2857
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2858
I352
sS'.thisN'
p2859
I352
sS'.thisIndex'
p2860
g43
(g45
S'\x86\x00\x00\x00'
tRp2861
sg15
(lp2862
S'd'
asg17
S'Y'
sg14
I8
sa(dp2863
g16
(lp2864
S'd'
asg38
I71
sS'.thisRepN'
p2865
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2866
I353
sS'.thisN'
p2867
I353
sS'.thisIndex'
p2868
g43
(g45
S'G\x00\x00\x00'
tRp2869
sg15
(lp2870
S'k'
asg17
S'N'
sg14
I8
sa(dp2871
g16
(lp2872
S'k'
asg38
I533
sS'.thisRepN'
p2873
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2874
I354
sS'.thisN'
p2875
I354
sS'.thisIndex'
p2876
g43
(g45
S'\x15\x02\x00\x00'
tRp2877
sg15
(lp2878
S'd'
asg17
S'N'
sg14
I8
sa(dp2879
g16
(lp2880
S'd'
asg38
I156
sS'.thisRepN'
p2881
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2882
I355
sS'.thisN'
p2883
I355
sS'.thisIndex'
p2884
g43
(g45
S'\x9c\x00\x00\x00'
tRp2885
sg15
(lp2886
S'd'
asg17
S'Y'
sg14
I8
sa(dp2887
g16
(lp2888
S'd'
asg38
I185
sS'.thisRepN'
p2889
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2890
I356
sS'.thisN'
p2891
I356
sS'.thisIndex'
p2892
g43
(g45
S'\xb9\x00\x00\x00'
tRp2893
sg15
(lp2894
S'k'
asg17
S'N'
sg14
I8
sa(dp2895
g16
(lp2896
S'd'
asg38
I111
sS'.thisRepN'
p2897
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2898
I357
sS'.thisN'
p2899
I357
sS'.thisIndex'
p2900
g43
(g45
S'o\x00\x00\x00'
tRp2901
sg15
(lp2902
S'd'
asg17
S'Y'
sg14
I8
sa(dp2903
g16
(lp2904
S'd'
asg38
I144
sS'.thisRepN'
p2905
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2906
I358
sS'.thisN'
p2907
I358
sS'.thisIndex'
p2908
g43
(g45
S'\x90\x00\x00\x00'
tRp2909
sg15
(lp2910
S'k'
asg17
S'N'
sg14
I8
sa(dp2911
g16
(lp2912
S'k'
asg38
I404
sS'.thisRepN'
p2913
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2914
I359
sS'.thisN'
p2915
I359
sS'.thisIndex'
p2916
g43
(g45
S'\x94\x01\x00\x00'
tRp2917
sg15
(lp2918
S'd'
asg17
S'N'
sg14
I8
sa(dp2919
g16
(lp2920
S'd'
asg38
I79
sS'.thisRepN'
p2921
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2922
I360
sS'.thisN'
p2923
I360
sS'.thisIndex'
p2924
g43
(g45
S'O\x00\x00\x00'
tRp2925
sg15
(lp2926
S'k'
asg17
S'N'
sg14
I8
sa(dp2927
g16
(lp2928
S'd'
asg38
I246
sS'.thisRepN'
p2929
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2930
I361
sS'.thisN'
p2931
I361
sS'.thisIndex'
p2932
g43
(g45
S'\xf6\x00\x00\x00'
tRp2933
sg15
(lp2934
S'd'
asg17
S'Y'
sg14
I8
sa(dp2935
g16
(lp2936
S'd'
asg38
I126
sS'.thisRepN'
p2937
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2938
I362
sS'.thisN'
p2939
I362
sS'.thisIndex'
p2940
g43
(g45
S'~\x00\x00\x00'
tRp2941
sg15
(lp2942
S'k'
asg17
S'N'
sg14
I8
sa(dp2943
g16
(lp2944
S'k'
asg38
I338
sS'.thisRepN'
p2945
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2946
I363
sS'.thisN'
p2947
I363
sS'.thisIndex'
p2948
g43
(g45
S'R\x01\x00\x00'
tRp2949
sg15
(lp2950
S'd'
asg17
S'N'
sg14
I8
sa(dp2951
g16
(lp2952
S'd'
asg38
I230
sS'.thisRepN'
p2953
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2954
I364
sS'.thisN'
p2955
I364
sS'.thisIndex'
p2956
g43
(g45
S'\xe6\x00\x00\x00'
tRp2957
sg15
(lp2958
S'k'
asg17
S'N'
sg14
I8
sa(dp2959
g16
(lp2960
S'k'
asg38
I322
sS'.thisRepN'
p2961
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2962
I365
sS'.thisN'
p2963
I365
sS'.thisIndex'
p2964
g43
(g45
S'B\x01\x00\x00'
tRp2965
sg15
(lp2966
S'd'
asg17
S'N'
sg14
I8
sa(dp2967
g16
(lp2968
S'k'
asg38
I403
sS'.thisRepN'
p2969
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2970
I366
sS'.thisN'
p2971
I366
sS'.thisIndex'
p2972
g43
(g45
S'\x93\x01\x00\x00'
tRp2973
sg15
(lp2974
S'k'
asg17
S'Y'
sg14
I8
sa(dp2975
g16
(lp2976
S'k'
asg38
I553
sS'.thisRepN'
p2977
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2978
I367
sS'.thisN'
p2979
I367
sS'.thisIndex'
p2980
g43
(g45
S')\x02\x00\x00'
tRp2981
sg15
(lp2982
S'k'
asg17
S'Y'
sg14
I8
sa(dp2983
g16
(lp2984
S'k'
asg38
I505
sS'.thisRepN'
p2985
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2986
I368
sS'.thisN'
p2987
I368
sS'.thisIndex'
p2988
g43
(g45
S'\xf9\x01\x00\x00'
tRp2989
sg15
(lp2990
S'd'
asg17
S'N'
sg14
I8
sa(dp2991
g16
(lp2992
S'k'
asg38
I398
sS'.thisRepN'
p2993
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p2994
I369
sS'.thisN'
p2995
I369
sS'.thisIndex'
p2996
g43
(g45
S'\x8e\x01\x00\x00'
tRp2997
sg15
(lp2998
S'k'
asg17
S'Y'
sg14
I8
sa(dp2999
g16
(lp3000
S'k'
asg38
I564
sS'.thisRepN'
p3001
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3002
I370
sS'.thisN'
p3003
I370
sS'.thisIndex'
p3004
g43
(g45
S'4\x02\x00\x00'
tRp3005
sg15
(lp3006
S'd'
asg17
S'N'
sg14
I8
sa(dp3007
g16
(lp3008
S'd'
asg38
I251
sS'.thisRepN'
p3009
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3010
I371
sS'.thisN'
p3011
I371
sS'.thisIndex'
p3012
g43
(g45
S'\xfb\x00\x00\x00'
tRp3013
sg15
(lp3014
S'k'
asg17
S'N'
sg14
I8
sa(dp3015
g16
(lp3016
S'd'
asg38
I52
sS'.thisRepN'
p3017
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3018
I372
sS'.thisN'
p3019
I372
sS'.thisIndex'
p3020
g43
(g45
S'4\x00\x00\x00'
tRp3021
sg15
(lp3022
S'd'
asg17
S'Y'
sg14
I8
sa(dp3023
g16
(lp3024
S'd'
asg38
I86
sS'.thisRepN'
p3025
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3026
I373
sS'.thisN'
p3027
I373
sS'.thisIndex'
p3028
g43
(g45
S'V\x00\x00\x00'
tRp3029
sg15
(lp3030
S'd'
asg17
S'Y'
sg14
I8
sa(dp3031
g16
(lp3032
S'k'
asg38
I551
sS'.thisRepN'
p3033
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3034
I374
sS'.thisN'
p3035
I374
sS'.thisIndex'
p3036
g43
(g45
S"'\x02\x00\x00"
tRp3037
sg15
(lp3038
S'k'
asg17
S'Y'
sg14
I8
sa(dp3039
g16
(lp3040
S'd'
asg38
I92
sS'.thisRepN'
p3041
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3042
I375
sS'.thisN'
p3043
I375
sS'.thisIndex'
p3044
g43
(g45
S'\\\x00\x00\x00'
tRp3045
sg15
(lp3046
S'd'
asg17
S'Y'
sg14
I8
sa(dp3047
g16
(lp3048
S'k'
asg38
I434
sS'.thisRepN'
p3049
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3050
I376
sS'.thisN'
p3051
I376
sS'.thisIndex'
p3052
g43
(g45
S'\xb2\x01\x00\x00'
tRp3053
sg15
(lp3054
S'k'
asg17
S'Y'
sg14
I8
sa(dp3055
g16
(lp3056
S'd'
asg38
I116
sS'.thisRepN'
p3057
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3058
I377
sS'.thisN'
p3059
I377
sS'.thisIndex'
p3060
g43
(g45
S't\x00\x00\x00'
tRp3061
sg15
(lp3062
S'd'
asg17
S'Y'
sg14
I8
sa(dp3063
g16
(lp3064
S'd'
asg38
I125
sS'.thisRepN'
p3065
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3066
I378
sS'.thisN'
p3067
I378
sS'.thisIndex'
p3068
g43
(g45
S'}\x00\x00\x00'
tRp3069
sg15
(lp3070
S'k'
asg17
S'N'
sg14
I8
sa(dp3071
g16
(lp3072
S'd'
asg38
I272
sS'.thisRepN'
p3073
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3074
I379
sS'.thisN'
p3075
I379
sS'.thisIndex'
p3076
g43
(g45
S'\x10\x01\x00\x00'
tRp3077
sg15
(lp3078
S'd'
asg17
S'Y'
sg14
I8
sa(dp3079
g16
(lp3080
S'd'
asg38
I254
sS'.thisRepN'
p3081
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3082
I380
sS'.thisN'
p3083
I380
sS'.thisIndex'
p3084
g43
(g45
S'\xfe\x00\x00\x00'
tRp3085
sg15
(lp3086
S'd'
asg17
S'Y'
sg14
I8
sa(dp3087
g16
(lp3088
S'd'
asg38
I110
sS'.thisRepN'
p3089
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3090
I381
sS'.thisN'
p3091
I381
sS'.thisIndex'
p3092
g43
(g45
S'n\x00\x00\x00'
tRp3093
sg15
(lp3094
S'k'
asg17
S'N'
sg14
I8
sa(dp3095
g16
(lp3096
S'k'
asg38
I412
sS'.thisRepN'
p3097
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3098
I382
sS'.thisN'
p3099
I382
sS'.thisIndex'
p3100
g43
(g45
S'\x9c\x01\x00\x00'
tRp3101
sg15
(lp3102
S'd'
asg17
S'N'
sg14
I8
sa(dp3103
g16
(lp3104
S'k'
asg38
I415
sS'.thisRepN'
p3105
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3106
I383
sS'.thisN'
p3107
I383
sS'.thisIndex'
p3108
g43
(g45
S'\x9f\x01\x00\x00'
tRp3109
sg15
(lp3110
S'k'
asg17
S'Y'
sg14
I8
sa(dp3111
g16
(lp3112
S'd'
asg38
I249
sS'.thisRepN'
p3113
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3114
I384
sS'.thisN'
p3115
I384
sS'.thisIndex'
p3116
g43
(g45
S'\xf9\x00\x00\x00'
tRp3117
sg15
(lp3118
S'k'
asg17
S'N'
sg14
I8
sa(dp3119
g16
(lp3120
S'k'
asg38
I402
sS'.thisRepN'
p3121
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3122
I385
sS'.thisN'
p3123
I385
sS'.thisIndex'
p3124
g43
(g45
S'\x92\x01\x00\x00'
tRp3125
sg15
(lp3126
S'd'
asg17
S'N'
sg14
I8
sa(dp3127
g16
(lp3128
S'd'
asg38
I212
sS'.thisRepN'
p3129
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3130
I386
sS'.thisN'
p3131
I386
sS'.thisIndex'
p3132
g43
(g45
S'\xd4\x00\x00\x00'
tRp3133
sg15
(lp3134
S'k'
asg17
S'N'
sg14
I8
sa(dp3135
g16
(lp3136
S'd'
asg38
I141
sS'.thisRepN'
p3137
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3138
I387
sS'.thisN'
p3139
I387
sS'.thisIndex'
p3140
g43
(g45
S'\x8d\x00\x00\x00'
tRp3141
sg15
(lp3142
S'd'
asg17
S'Y'
sg14
I8
sa(dp3143
g16
(lp3144
S'd'
asg38
I103
sS'.thisRepN'
p3145
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3146
I388
sS'.thisN'
p3147
I388
sS'.thisIndex'
p3148
g43
(g45
S'g\x00\x00\x00'
tRp3149
sg15
(lp3150
S'k'
asg17
S'N'
sg14
I8
sa(dp3151
g16
(lp3152
S'k'
asg38
I378
sS'.thisRepN'
p3153
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3154
I389
sS'.thisN'
p3155
I389
sS'.thisIndex'
p3156
g43
(g45
S'z\x01\x00\x00'
tRp3157
sg15
(lp3158
S'd'
asg17
S'N'
sg14
I8
sa(dp3159
g16
(lp3160
S'd'
asg38
I84
sS'.thisRepN'
p3161
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3162
I390
sS'.thisN'
p3163
I390
sS'.thisIndex'
p3164
g43
(g45
S'T\x00\x00\x00'
tRp3165
sg15
(lp3166
S'k'
asg17
S'N'
sg14
I8
sa(dp3167
g16
(lp3168
S'k'
asg38
I450
sS'.thisRepN'
p3169
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3170
I391
sS'.thisN'
p3171
I391
sS'.thisIndex'
p3172
g43
(g45
S'\xc2\x01\x00\x00'
tRp3173
sg15
(lp3174
S'd'
asg17
S'N'
sg14
I8
sa(dp3175
g16
(lp3176
S'k'
asg38
I393
sS'.thisRepN'
p3177
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3178
I392
sS'.thisN'
p3179
I392
sS'.thisIndex'
p3180
g43
(g45
S'\x89\x01\x00\x00'
tRp3181
sg15
(lp3182
S'k'
asg17
S'Y'
sg14
I8
sa(dp3183
g16
(lp3184
S'd'
asg38
I25
sS'.thisRepN'
p3185
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3186
I393
sS'.thisN'
p3187
I393
sS'.thisIndex'
p3188
g43
(g45
S'\x19\x00\x00\x00'
tRp3189
sg15
(lp3190
S'k'
asg17
S'N'
sg14
I8
sa(dp3191
g16
(lp3192
S'k'
asg38
I300
sS'.thisRepN'
p3193
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3194
I394
sS'.thisN'
p3195
I394
sS'.thisIndex'
p3196
g43
(g45
S',\x01\x00\x00'
tRp3197
sg15
(lp3198
S'd'
asg17
S'N'
sg14
I8
sa(dp3199
g16
(lp3200
S'd'
asg38
I63
sS'.thisRepN'
p3201
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3202
I395
sS'.thisN'
p3203
I395
sS'.thisIndex'
p3204
g43
(g45
S'?\x00\x00\x00'
tRp3205
sg15
(lp3206
S'k'
asg17
S'N'
sg14
I8
sa(dp3207
g16
(lp3208
S'k'
asg38
I472
sS'.thisRepN'
p3209
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3210
I396
sS'.thisN'
p3211
I396
sS'.thisIndex'
p3212
g43
(g45
S'\xd8\x01\x00\x00'
tRp3213
sg15
(lp3214
S'd'
asg17
S'N'
sg14
I8
sa(dp3215
g16
(lp3216
S'k'
asg38
I558
sS'.thisRepN'
p3217
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3218
I397
sS'.thisN'
p3219
I397
sS'.thisIndex'
p3220
g43
(g45
S'.\x02\x00\x00'
tRp3221
sg15
(lp3222
S'd'
asg17
S'N'
sg14
I8
sa(dp3223
g16
(lp3224
S'd'
asg38
I195
sS'.thisRepN'
p3225
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3226
I398
sS'.thisN'
p3227
I398
sS'.thisIndex'
p3228
g43
(g45
S'\xc3\x00\x00\x00'
tRp3229
sg15
(lp3230
S'k'
asg17
S'N'
sg14
I8
sa(dp3231
g16
(lp3232
S'k'
asg38
I426
sS'.thisRepN'
p3233
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3234
I399
sS'.thisN'
p3235
I399
sS'.thisIndex'
p3236
g43
(g45
S'\xaa\x01\x00\x00'
tRp3237
sg15
(lp3238
S'd'
asg17
S'N'
sg14
I8
sa(dp3239
g16
(lp3240
S'k'
asg38
I585
sS'.thisRepN'
p3241
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3242
I400
sS'.thisN'
p3243
I400
sS'.thisIndex'
p3244
g43
(g45
S'I\x02\x00\x00'
tRp3245
sg15
(lp3246
S'd'
asg17
S'N'
sg14
I9
sa(dp3247
g16
(lp3248
S'k'
asg38
I365
sS'.thisRepN'
p3249
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3250
I401
sS'.thisN'
p3251
I401
sS'.thisIndex'
p3252
g43
(g45
S'm\x01\x00\x00'
tRp3253
sg15
(lp3254
S'd'
asg17
S'N'
sg14
I9
sa(dp3255
g16
(lp3256
S'k'
asg38
I350
sS'.thisRepN'
p3257
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3258
I402
sS'.thisN'
p3259
I402
sS'.thisIndex'
p3260
g43
(g45
S'^\x01\x00\x00'
tRp3261
sg15
(lp3262
S'd'
asg17
S'N'
sg14
I9
sa(dp3263
g16
(lp3264
S'd'
asg38
I105
sS'.thisRepN'
p3265
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3266
I403
sS'.thisN'
p3267
I403
sS'.thisIndex'
p3268
g43
(g45
S'i\x00\x00\x00'
tRp3269
sg15
(lp3270
S'k'
asg17
S'N'
sg14
I9
sa(dp3271
g16
(lp3272
S'd'
asg38
I6
sS'.thisRepN'
p3273
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3274
I404
sS'.thisN'
p3275
I404
sS'.thisIndex'
p3276
g43
(g45
S'\x06\x00\x00\x00'
tRp3277
sg15
(lp3278
S'd'
asg17
S'Y'
sg14
I9
sa(dp3279
g16
(lp3280
S'd'
asg38
I99
sS'.thisRepN'
p3281
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3282
I405
sS'.thisN'
p3283
I405
sS'.thisIndex'
p3284
g43
(g45
S'c\x00\x00\x00'
tRp3285
sg15
(lp3286
S'd'
asg17
S'Y'
sg14
I9
sa(dp3287
g16
(lp3288
S'k'
asg38
I432
sS'.thisRepN'
p3289
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3290
I406
sS'.thisN'
p3291
I406
sS'.thisIndex'
p3292
g43
(g45
S'\xb0\x01\x00\x00'
tRp3293
sg15
(lp3294
S'd'
asg17
S'N'
sg14
I9
sa(dp3295
g16
(lp3296
S'd'
asg38
I165
sS'.thisRepN'
p3297
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3298
I407
sS'.thisN'
p3299
I407
sS'.thisIndex'
p3300
g43
(g45
S'\xa5\x00\x00\x00'
tRp3301
sg15
(lp3302
S'd'
asg17
S'Y'
sg14
I9
sa(dp3303
g16
(lp3304
S'k'
asg38
I373
sS'.thisRepN'
p3305
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3306
I408
sS'.thisN'
p3307
I408
sS'.thisIndex'
p3308
g43
(g45
S'u\x01\x00\x00'
tRp3309
sg15
(lp3310
S'd'
asg17
S'N'
sg14
I9
sa(dp3311
g16
(lp3312
S'k'
asg38
I534
sS'.thisRepN'
p3313
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3314
I409
sS'.thisN'
p3315
I409
sS'.thisIndex'
p3316
g43
(g45
S'\x16\x02\x00\x00'
tRp3317
sg15
(lp3318
S'k'
asg17
S'Y'
sg14
I9
sa(dp3319
g16
(lp3320
S'k'
asg38
I354
sS'.thisRepN'
p3321
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3322
I410
sS'.thisN'
p3323
I410
sS'.thisIndex'
p3324
g43
(g45
S'b\x01\x00\x00'
tRp3325
sg15
(lp3326
S'k'
asg17
S'Y'
sg14
I9
sa(dp3327
g16
(lp3328
S'k'
asg38
I341
sS'.thisRepN'
p3329
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3330
I411
sS'.thisN'
p3331
I411
sS'.thisIndex'
p3332
g43
(g45
S'U\x01\x00\x00'
tRp3333
sg15
(lp3334
S'k'
asg17
S'Y'
sg14
I9
sa(dp3335
g16
(lp3336
S'k'
asg38
I596
sS'.thisRepN'
p3337
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3338
I412
sS'.thisN'
p3339
I412
sS'.thisIndex'
p3340
g43
(g45
S'T\x02\x00\x00'
tRp3341
sg15
(lp3342
S'k'
asg17
S'Y'
sg14
I9
sa(dp3343
g16
(lp3344
S'd'
asg38
I78
sS'.thisRepN'
p3345
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3346
I413
sS'.thisN'
p3347
I413
sS'.thisIndex'
p3348
g43
(g45
S'N\x00\x00\x00'
tRp3349
sg15
(lp3350
S'k'
asg17
S'N'
sg14
I9
sa(dp3351
g16
(lp3352
S'k'
asg38
I524
sS'.thisRepN'
p3353
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3354
I414
sS'.thisN'
p3355
I414
sS'.thisIndex'
p3356
g43
(g45
S'\x0c\x02\x00\x00'
tRp3357
sg15
(lp3358
S'd'
asg17
S'N'
sg14
I9
sa(dp3359
g16
(lp3360
S'k'
asg38
I519
sS'.thisRepN'
p3361
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3362
I415
sS'.thisN'
p3363
I415
sS'.thisIndex'
p3364
g43
(g45
S'\x07\x02\x00\x00'
tRp3365
sg15
(lp3366
S'k'
asg17
S'Y'
sg14
I9
sa(dp3367
g16
(lp3368
S'k'
asg38
I305
sS'.thisRepN'
p3369
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3370
I416
sS'.thisN'
p3371
I416
sS'.thisIndex'
p3372
g43
(g45
S'1\x01\x00\x00'
tRp3373
sg15
(lp3374
S'k'
asg17
S'Y'
sg14
I9
sa(dp3375
g16
(lp3376
S'd'
asg38
I33
sS'.thisRepN'
p3377
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3378
I417
sS'.thisN'
p3379
I417
sS'.thisIndex'
p3380
g43
(g45
S'!\x00\x00\x00'
tRp3381
sg15
(lp3382
S'k'
asg17
S'N'
sg14
I9
sa(dp3383
g16
(lp3384
S'd'
asg38
I271
sS'.thisRepN'
p3385
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3386
I418
sS'.thisN'
p3387
I418
sS'.thisIndex'
p3388
g43
(g45
S'\x0f\x01\x00\x00'
tRp3389
sg15
(lp3390
S'k'
asg17
S'N'
sg14
I9
sa(dp3391
g16
(lp3392
S'k'
asg38
I455
sS'.thisRepN'
p3393
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3394
I419
sS'.thisN'
p3395
I419
sS'.thisIndex'
p3396
g43
(g45
S'\xc7\x01\x00\x00'
tRp3397
sg15
(lp3398
S'd'
asg17
S'N'
sg14
I9
sa(dp3399
g16
(lp3400
S'k'
asg38
I417
sS'.thisRepN'
p3401
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3402
I420
sS'.thisN'
p3403
I420
sS'.thisIndex'
p3404
g43
(g45
S'\xa1\x01\x00\x00'
tRp3405
sg15
(lp3406
S'k'
asg17
S'Y'
sg14
I9
sa(dp3407
g16
(lp3408
S'k'
asg38
I515
sS'.thisRepN'
p3409
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3410
I421
sS'.thisN'
p3411
I421
sS'.thisIndex'
p3412
g43
(g45
S'\x03\x02\x00\x00'
tRp3413
sg15
(lp3414
S'k'
asg17
S'Y'
sg14
I9
sa(dp3415
g16
(lp3416
S'k'
asg38
I576
sS'.thisRepN'
p3417
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3418
I422
sS'.thisN'
p3419
I422
sS'.thisIndex'
p3420
g43
(g45
S'@\x02\x00\x00'
tRp3421
sg15
(lp3422
S'd'
asg17
S'N'
sg14
I9
sa(dp3423
g16
(lp3424
S'k'
asg38
I575
sS'.thisRepN'
p3425
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3426
I423
sS'.thisN'
p3427
I423
sS'.thisIndex'
p3428
g43
(g45
S'?\x02\x00\x00'
tRp3429
sg15
(lp3430
S'k'
asg17
S'Y'
sg14
I9
sa(dp3431
g16
(lp3432
S'k'
asg38
I492
sS'.thisRepN'
p3433
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3434
I424
sS'.thisN'
p3435
I424
sS'.thisIndex'
p3436
g43
(g45
S'\xec\x01\x00\x00'
tRp3437
sg15
(lp3438
S'd'
asg17
S'N'
sg14
I9
sa(dp3439
g16
(lp3440
S'd'
asg38
I3
sS'.thisRepN'
p3441
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3442
I425
sS'.thisN'
p3443
I425
sS'.thisIndex'
p3444
g43
(g45
S'\x03\x00\x00\x00'
tRp3445
sg15
(lp3446
S'k'
asg17
S'N'
sg14
I9
sa(dp3447
g16
(lp3448
S'k'
asg38
I444
sS'.thisRepN'
p3449
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3450
I426
sS'.thisN'
p3451
I426
sS'.thisIndex'
p3452
g43
(g45
S'\xbc\x01\x00\x00'
tRp3453
sg15
(lp3454
S'd'
asg17
S'N'
sg14
I9
sa(dp3455
g16
(lp3456
S'd'
asg38
I147
sS'.thisRepN'
p3457
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3458
I427
sS'.thisN'
p3459
I427
sS'.thisIndex'
p3460
g43
(g45
S'\x93\x00\x00\x00'
tRp3461
sg15
(lp3462
S'k'
asg17
S'N'
sg14
I9
sa(dp3463
g16
(lp3464
S'k'
asg38
I522
sS'.thisRepN'
p3465
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3466
I428
sS'.thisN'
p3467
I428
sS'.thisIndex'
p3468
g43
(g45
S'\n\x02\x00\x00'
tRp3469
sg15
(lp3470
S'd'
asg17
S'N'
sg14
I9
sa(dp3471
g16
(lp3472
S'k'
asg38
I555
sS'.thisRepN'
p3473
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3474
I429
sS'.thisN'
p3475
I429
sS'.thisIndex'
p3476
g43
(g45
S'+\x02\x00\x00'
tRp3477
sg15
(lp3478
S'd'
asg17
S'N'
sg14
I9
sa(dp3479
g16
(lp3480
S'd'
asg38
I75
sS'.thisRepN'
p3481
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3482
I430
sS'.thisN'
p3483
I430
sS'.thisIndex'
p3484
g43
(g45
S'K\x00\x00\x00'
tRp3485
sg15
(lp3486
S'd'
asg17
S'Y'
sg14
I9
sa(dp3487
g16
(lp3488
S'k'
asg38
I311
sS'.thisRepN'
p3489
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3490
I431
sS'.thisN'
p3491
I431
sS'.thisIndex'
p3492
g43
(g45
S'7\x01\x00\x00'
tRp3493
sg15
(lp3494
S'd'
asg17
S'N'
sg14
I9
sa(dp3495
g16
(lp3496
S'k'
asg38
I474
sS'.thisRepN'
p3497
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3498
I432
sS'.thisN'
p3499
I432
sS'.thisIndex'
p3500
g43
(g45
S'\xda\x01\x00\x00'
tRp3501
sg15
(lp3502
S'k'
asg17
S'Y'
sg14
I9
sa(dp3503
g16
(lp3504
S'k'
asg38
I563
sS'.thisRepN'
p3505
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3506
I433
sS'.thisN'
p3507
I433
sS'.thisIndex'
p3508
g43
(g45
S'3\x02\x00\x00'
tRp3509
sg15
(lp3510
S'd'
asg17
S'N'
sg14
I9
sa(dp3511
g16
(lp3512
S'k'
asg38
I577
sS'.thisRepN'
p3513
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3514
I434
sS'.thisN'
p3515
I434
sS'.thisIndex'
p3516
g43
(g45
S'A\x02\x00\x00'
tRp3517
sg15
(lp3518
S'k'
asg17
S'Y'
sg14
I9
sa(dp3519
g16
(lp3520
S'd'
asg38
I277
sS'.thisRepN'
p3521
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3522
I435
sS'.thisN'
p3523
I435
sS'.thisIndex'
p3524
g43
(g45
S'\x15\x01\x00\x00'
tRp3525
sg15
(lp3526
S'k'
asg17
S'N'
sg14
I9
sa(dp3527
g16
(lp3528
S'd'
asg38
I169
sS'.thisRepN'
p3529
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3530
I436
sS'.thisN'
p3531
I436
sS'.thisIndex'
p3532
g43
(g45
S'\xa9\x00\x00\x00'
tRp3533
sg15
(lp3534
S'k'
asg17
S'N'
sg14
I9
sa(dp3535
g16
(lp3536
S'd'
asg38
I68
sS'.thisRepN'
p3537
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3538
I437
sS'.thisN'
p3539
I437
sS'.thisIndex'
p3540
g43
(g45
S'D\x00\x00\x00'
tRp3541
sg15
(lp3542
S'd'
asg17
S'Y'
sg14
I9
sa(dp3543
g16
(lp3544
S'k'
asg38
I502
sS'.thisRepN'
p3545
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3546
I438
sS'.thisN'
p3547
I438
sS'.thisIndex'
p3548
g43
(g45
S'\xf6\x01\x00\x00'
tRp3549
sg15
(lp3550
S'k'
asg17
S'Y'
sg14
I9
sa(dp3551
g16
(lp3552
S'd'
asg38
I55
sS'.thisRepN'
p3553
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3554
I439
sS'.thisN'
p3555
I439
sS'.thisIndex'
p3556
g43
(g45
S'7\x00\x00\x00'
tRp3557
sg15
(lp3558
S'k'
asg17
S'N'
sg14
I9
sa(dp3559
g16
(lp3560
S'd'
asg38
I167
sS'.thisRepN'
p3561
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3562
I440
sS'.thisN'
p3563
I440
sS'.thisIndex'
p3564
g43
(g45
S'\xa7\x00\x00\x00'
tRp3565
sg15
(lp3566
S'd'
asg17
S'Y'
sg14
I9
sa(dp3567
g16
(lp3568
S'k'
asg38
I477
sS'.thisRepN'
p3569
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3570
I441
sS'.thisN'
p3571
I441
sS'.thisIndex'
p3572
g43
(g45
S'\xdd\x01\x00\x00'
tRp3573
sg15
(lp3574
S'k'
asg17
S'Y'
sg14
I9
sa(dp3575
g16
(lp3576
S'd'
asg38
I221
sS'.thisRepN'
p3577
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3578
I442
sS'.thisN'
p3579
I442
sS'.thisIndex'
p3580
g43
(g45
S'\xdd\x00\x00\x00'
tRp3581
sg15
(lp3582
S'd'
asg17
S'Y'
sg14
I9
sa(dp3583
g16
(lp3584
S'd'
asg38
I106
sS'.thisRepN'
p3585
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3586
I443
sS'.thisN'
p3587
I443
sS'.thisIndex'
p3588
g43
(g45
S'j\x00\x00\x00'
tRp3589
sg15
(lp3590
S'k'
asg17
S'N'
sg14
I9
sa(dp3591
g16
(lp3592
S'k'
asg38
I495
sS'.thisRepN'
p3593
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3594
I444
sS'.thisN'
p3595
I444
sS'.thisIndex'
p3596
g43
(g45
S'\xef\x01\x00\x00'
tRp3597
sg15
(lp3598
S'd'
asg17
S'N'
sg14
I9
sa(dp3599
g16
(lp3600
S'k'
asg38
I582
sS'.thisRepN'
p3601
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3602
I445
sS'.thisN'
p3603
I445
sS'.thisIndex'
p3604
g43
(g45
S'F\x02\x00\x00'
tRp3605
sg15
(lp3606
S'k'
asg17
S'Y'
sg14
I9
sa(dp3607
g16
(lp3608
S'd'
asg38
I0
sS'.thisRepN'
p3609
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3610
I446
sS'.thisN'
p3611
I446
sS'.thisIndex'
p3612
g43
(g45
S'\x00\x00\x00\x00'
tRp3613
sg15
(lp3614
S'k'
asg17
S'N'
sg14
I9
sa(dp3615
g16
(lp3616
S'd'
asg38
I93
sS'.thisRepN'
p3617
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3618
I447
sS'.thisN'
p3619
I447
sS'.thisIndex'
p3620
g43
(g45
S']\x00\x00\x00'
tRp3621
sg15
(lp3622
S'd'
asg17
S'Y'
sg14
I9
sa(dp3623
g16
(lp3624
S'd'
asg38
I47
sS'.thisRepN'
p3625
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3626
I448
sS'.thisN'
p3627
I448
sS'.thisIndex'
p3628
g43
(g45
S'/\x00\x00\x00'
tRp3629
sg15
(lp3630
S'd'
asg17
S'Y'
sg14
I9
sa(dp3631
g16
(lp3632
S'k'
asg38
I513
sS'.thisRepN'
p3633
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3634
I449
sS'.thisN'
p3635
I449
sS'.thisIndex'
p3636
g43
(g45
S'\x01\x02\x00\x00'
tRp3637
sg15
(lp3638
S'k'
asg17
S'Y'
sg14
I9
sa(dp3639
g16
(lp3640
S'd'
asg38
I205
sS'.thisRepN'
p3641
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3642
I450
sS'.thisN'
p3643
I450
sS'.thisIndex'
p3644
g43
(g45
S'\xcd\x00\x00\x00'
tRp3645
sg15
(lp3646
S'd'
asg17
S'Y'
sg14
I10
sa(dp3647
g16
(lp3648
S'k'
asg38
I548
sS'.thisRepN'
p3649
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3650
I451
sS'.thisN'
p3651
I451
sS'.thisIndex'
p3652
g43
(g45
S'$\x02\x00\x00'
tRp3653
sg15
(lp3654
S'd'
asg17
S'N'
sg14
I10
sa(dp3655
g16
(lp3656
S'd'
asg38
I69
sS'.thisRepN'
p3657
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3658
I452
sS'.thisN'
p3659
I452
sS'.thisIndex'
p3660
g43
(g45
S'E\x00\x00\x00'
tRp3661
sg15
(lp3662
S'k'
asg17
S'N'
sg14
I10
sa(dp3663
g16
(lp3664
S'k'
asg38
I520
sS'.thisRepN'
p3665
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3666
I453
sS'.thisN'
p3667
I453
sS'.thisIndex'
p3668
g43
(g45
S'\x08\x02\x00\x00'
tRp3669
sg15
(lp3670
S'd'
asg17
S'N'
sg14
I10
sa(dp3671
g16
(lp3672
S'k'
asg38
I418
sS'.thisRepN'
p3673
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3674
I454
sS'.thisN'
p3675
I454
sS'.thisIndex'
p3676
g43
(g45
S'\xa2\x01\x00\x00'
tRp3677
sg15
(lp3678
S'd'
asg17
S'N'
sg14
I10
sa(dp3679
g16
(lp3680
S'd'
asg38
I153
sS'.thisRepN'
p3681
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3682
I455
sS'.thisN'
p3683
I455
sS'.thisIndex'
p3684
g43
(g45
S'\x99\x00\x00\x00'
tRp3685
sg15
(lp3686
S'k'
asg17
S'N'
sg14
I10
sa(dp3687
g16
(lp3688
S'd'
asg38
I183
sS'.thisRepN'
p3689
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3690
I456
sS'.thisN'
p3691
I456
sS'.thisIndex'
p3692
g43
(g45
S'\xb7\x00\x00\x00'
tRp3693
sg15
(lp3694
S'k'
asg17
S'N'
sg14
I10
sa(dp3695
g16
(lp3696
S'k'
asg38
I554
sS'.thisRepN'
p3697
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3698
I457
sS'.thisN'
p3699
I457
sS'.thisIndex'
p3700
g43
(g45
S'*\x02\x00\x00'
tRp3701
sg15
(lp3702
S'd'
asg17
S'N'
sg14
I10
sa(dp3703
g16
(lp3704
S'k'
asg38
I340
sS'.thisRepN'
p3705
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3706
I458
sS'.thisN'
p3707
I458
sS'.thisIndex'
p3708
g43
(g45
S'T\x01\x00\x00'
tRp3709
sg15
(lp3710
S'k'
asg17
S'Y'
sg14
I10
sa(dp3711
g16
(lp3712
S'd'
asg38
I275
sS'.thisRepN'
p3713
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3714
I459
sS'.thisN'
p3715
I459
sS'.thisIndex'
p3716
g43
(g45
S'\x13\x01\x00\x00'
tRp3717
sg15
(lp3718
S'k'
asg17
S'N'
sg14
I10
sa(dp3719
g16
(lp3720
S'd'
asg38
I139
sS'.thisRepN'
p3721
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3722
I460
sS'.thisN'
p3723
I460
sS'.thisIndex'
p3724
g43
(g45
S'\x8b\x00\x00\x00'
tRp3725
sg15
(lp3726
S'd'
asg17
S'Y'
sg14
I10
sa(dp3727
g16
(lp3728
S'd'
asg38
I180
sS'.thisRepN'
p3729
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3730
I461
sS'.thisN'
p3731
I461
sS'.thisIndex'
p3732
g43
(g45
S'\xb4\x00\x00\x00'
tRp3733
sg15
(lp3734
S'k'
asg17
S'N'
sg14
I10
sa(dp3735
g16
(lp3736
S'k'
asg38
I389
sS'.thisRepN'
p3737
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3738
I462
sS'.thisN'
p3739
I462
sS'.thisIndex'
p3740
g43
(g45
S'\x85\x01\x00\x00'
tRp3741
sg15
(lp3742
S'k'
asg17
S'Y'
sg14
I10
sa(dp3743
g16
(lp3744
S'd'
asg38
I64
sS'.thisRepN'
p3745
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3746
I463
sS'.thisN'
p3747
I463
sS'.thisIndex'
p3748
g43
(g45
S'@\x00\x00\x00'
tRp3749
sg15
(lp3750
S'd'
asg17
S'Y'
sg14
I10
sa(dp3751
g16
(lp3752
S'k'
asg38
I304
sS'.thisRepN'
p3753
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3754
I464
sS'.thisN'
p3755
I464
sS'.thisIndex'
p3756
g43
(g45
S'0\x01\x00\x00'
tRp3757
sg15
(lp3758
S'k'
asg17
S'Y'
sg14
I10
sa(dp3759
g16
(lp3760
S'k'
asg38
I314
sS'.thisRepN'
p3761
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3762
I465
sS'.thisN'
p3763
I465
sS'.thisIndex'
p3764
g43
(g45
S':\x01\x00\x00'
tRp3765
sg15
(lp3766
S'd'
asg17
S'N'
sg14
I10
sa(dp3767
g16
(lp3768
S'k'
asg38
I460
sS'.thisRepN'
p3769
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3770
I466
sS'.thisN'
p3771
I466
sS'.thisIndex'
p3772
g43
(g45
S'\xcc\x01\x00\x00'
tRp3773
sg15
(lp3774
S'd'
asg17
S'N'
sg14
I10
sa(dp3775
g16
(lp3776
S'k'
asg38
I385
sS'.thisRepN'
p3777
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3778
I467
sS'.thisN'
p3779
I467
sS'.thisIndex'
p3780
g43
(g45
S'\x81\x01\x00\x00'
tRp3781
sg15
(lp3782
S'd'
asg17
S'N'
sg14
I10
sa(dp3783
g16
(lp3784
S'k'
asg38
I330
sS'.thisRepN'
p3785
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3786
I468
sS'.thisN'
p3787
I468
sS'.thisIndex'
p3788
g43
(g45
S'J\x01\x00\x00'
tRp3789
sg15
(lp3790
S'd'
asg17
S'N'
sg14
I10
sa(dp3791
g16
(lp3792
S'k'
asg38
I346
sS'.thisRepN'
p3793
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3794
I469
sS'.thisN'
p3795
I469
sS'.thisIndex'
p3796
g43
(g45
S'Z\x01\x00\x00'
tRp3797
sg15
(lp3798
S'd'
asg17
S'N'
sg14
I10
sa(dp3799
g16
(lp3800
S'k'
asg38
I527
sS'.thisRepN'
p3801
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3802
I470
sS'.thisN'
p3803
I470
sS'.thisIndex'
p3804
g43
(g45
S'\x0f\x02\x00\x00'
tRp3805
sg15
(lp3806
S'd'
asg17
S'N'
sg14
I10
sa(dp3807
g16
(lp3808
S'd'
asg38
I88
sS'.thisRepN'
p3809
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3810
I471
sS'.thisN'
p3811
I471
sS'.thisIndex'
p3812
g43
(g45
S'X\x00\x00\x00'
tRp3813
sg15
(lp3814
S'k'
asg17
S'N'
sg14
I10
sa(dp3815
g16
(lp3816
S'k'
asg38
I507
sS'.thisRepN'
p3817
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3818
I472
sS'.thisN'
p3819
I472
sS'.thisIndex'
p3820
g43
(g45
S'\xfb\x01\x00\x00'
tRp3821
sg15
(lp3822
S'k'
asg17
S'Y'
sg14
I10
sa(dp3823
g16
(lp3824
S'k'
asg38
I303
sS'.thisRepN'
p3825
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3826
I473
sS'.thisN'
p3827
I473
sS'.thisIndex'
p3828
g43
(g45
S'/\x01\x00\x00'
tRp3829
sg15
(lp3830
S'k'
asg17
S'Y'
sg14
I10
sa(dp3831
g16
(lp3832
S'd'
asg38
I210
sS'.thisRepN'
p3833
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3834
I474
sS'.thisN'
p3835
I474
sS'.thisIndex'
p3836
g43
(g45
S'\xd2\x00\x00\x00'
tRp3837
sg15
(lp3838
S'k'
asg17
S'N'
sg14
I10
sa(dp3839
g16
(lp3840
S'd'
asg38
I288
sS'.thisRepN'
p3841
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3842
I475
sS'.thisN'
p3843
I475
sS'.thisIndex'
p3844
g43
(g45
S' \x01\x00\x00'
tRp3845
sg15
(lp3846
S'k'
asg17
S'N'
sg14
I10
sa(dp3847
g16
(lp3848
S'd'
asg38
I102
sS'.thisRepN'
p3849
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3850
I476
sS'.thisN'
p3851
I476
sS'.thisIndex'
p3852
g43
(g45
S'f\x00\x00\x00'
tRp3853
sg15
(lp3854
S'd'
asg17
S'Y'
sg14
I10
sa(dp3855
g16
(lp3856
S'd'
asg38
I237
sS'.thisRepN'
p3857
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3858
I477
sS'.thisN'
p3859
I477
sS'.thisIndex'
p3860
g43
(g45
S'\xed\x00\x00\x00'
tRp3861
sg15
(lp3862
S'd'
asg17
S'Y'
sg14
I10
sa(dp3863
g16
(lp3864
S'k'
asg38
I357
sS'.thisRepN'
p3865
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3866
I478
sS'.thisN'
p3867
I478
sS'.thisIndex'
p3868
g43
(g45
S'e\x01\x00\x00'
tRp3869
sg15
(lp3870
S'k'
asg17
S'Y'
sg14
I10
sa(dp3871
g16
(lp3872
S'd'
asg38
I56
sS'.thisRepN'
p3873
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3874
I479
sS'.thisN'
p3875
I479
sS'.thisIndex'
p3876
g43
(g45
S'8\x00\x00\x00'
tRp3877
sg15
(lp3878
S'd'
asg17
S'Y'
sg14
I10
sa(dp3879
g16
(lp3880
S'k'
asg38
I586
sS'.thisRepN'
p3881
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3882
I480
sS'.thisN'
p3883
I480
sS'.thisIndex'
p3884
g43
(g45
S'J\x02\x00\x00'
tRp3885
sg15
(lp3886
S'k'
asg17
S'Y'
sg14
I10
sa(dp3887
g16
(lp3888
S'k'
asg38
I568
sS'.thisRepN'
p3889
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3890
I481
sS'.thisN'
p3891
I481
sS'.thisIndex'
p3892
g43
(g45
S'8\x02\x00\x00'
tRp3893
sg15
(lp3894
S'd'
asg17
S'N'
sg14
I10
sa(dp3895
g16
(lp3896
S'd'
asg38
I21
sS'.thisRepN'
p3897
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3898
I482
sS'.thisN'
p3899
I482
sS'.thisIndex'
p3900
g43
(g45
S'\x15\x00\x00\x00'
tRp3901
sg15
(lp3902
S'k'
asg17
S'N'
sg14
I10
sa(dp3903
g16
(lp3904
S'd'
asg38
I41
sS'.thisRepN'
p3905
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3906
I483
sS'.thisN'
p3907
I483
sS'.thisIndex'
p3908
g43
(g45
S')\x00\x00\x00'
tRp3909
sg15
(lp3910
S'd'
asg17
S'Y'
sg14
I10
sa(dp3911
g16
(lp3912
S'd'
asg38
I43
sS'.thisRepN'
p3913
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3914
I484
sS'.thisN'
p3915
I484
sS'.thisIndex'
p3916
g43
(g45
S'+\x00\x00\x00'
tRp3917
sg15
(lp3918
S'k'
asg17
S'N'
sg14
I10
sa(dp3919
g16
(lp3920
S'k'
asg38
I523
sS'.thisRepN'
p3921
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3922
I485
sS'.thisN'
p3923
I485
sS'.thisIndex'
p3924
g43
(g45
S'\x0b\x02\x00\x00'
tRp3925
sg15
(lp3926
S'd'
asg17
S'N'
sg14
I10
sa(dp3927
g16
(lp3928
S'k'
asg38
I326
sS'.thisRepN'
p3929
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3930
I486
sS'.thisN'
p3931
I486
sS'.thisIndex'
p3932
g43
(g45
S'F\x01\x00\x00'
tRp3933
sg15
(lp3934
S'd'
asg17
S'N'
sg14
I10
sa(dp3935
g16
(lp3936
S'k'
asg38
I442
sS'.thisRepN'
p3937
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3938
I487
sS'.thisN'
p3939
I487
sS'.thisIndex'
p3940
g43
(g45
S'\xba\x01\x00\x00'
tRp3941
sg15
(lp3942
S'k'
asg17
S'Y'
sg14
I10
sa(dp3943
g16
(lp3944
S'd'
asg38
I9
sS'.thisRepN'
p3945
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3946
I488
sS'.thisN'
p3947
I488
sS'.thisIndex'
p3948
g43
(g45
S'\t\x00\x00\x00'
tRp3949
sg15
(lp3950
S'k'
asg17
S'N'
sg14
I10
sa(dp3951
g16
(lp3952
S'k'
asg38
I325
sS'.thisRepN'
p3953
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3954
I489
sS'.thisN'
p3955
I489
sS'.thisIndex'
p3956
g43
(g45
S'E\x01\x00\x00'
tRp3957
sg15
(lp3958
S'd'
asg17
S'N'
sg14
I10
sa(dp3959
g16
(lp3960
S'k'
asg38
I537
sS'.thisRepN'
p3961
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3962
I490
sS'.thisN'
p3963
I490
sS'.thisIndex'
p3964
g43
(g45
S'\x19\x02\x00\x00'
tRp3965
sg15
(lp3966
S'k'
asg17
S'Y'
sg14
I10
sa(dp3967
g16
(lp3968
S'd'
asg38
I35
sS'.thisRepN'
p3969
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3970
I491
sS'.thisN'
p3971
I491
sS'.thisIndex'
p3972
g43
(g45
S'#\x00\x00\x00'
tRp3973
sg15
(lp3974
S'k'
asg17
S'N'
sg14
I10
sa(dp3975
g16
(lp3976
S'd'
asg38
I253
sS'.thisRepN'
p3977
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3978
I492
sS'.thisN'
p3979
I492
sS'.thisIndex'
p3980
g43
(g45
S'\xfd\x00\x00\x00'
tRp3981
sg15
(lp3982
S'k'
asg17
S'N'
sg14
I10
sa(dp3983
g16
(lp3984
S'k'
asg38
I589
sS'.thisRepN'
p3985
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3986
I493
sS'.thisN'
p3987
I493
sS'.thisIndex'
p3988
g43
(g45
S'M\x02\x00\x00'
tRp3989
sg15
(lp3990
S'k'
asg17
S'Y'
sg14
I10
sa(dp3991
g16
(lp3992
S'k'
asg38
I458
sS'.thisRepN'
p3993
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p3994
I494
sS'.thisN'
p3995
I494
sS'.thisIndex'
p3996
g43
(g45
S'\xca\x01\x00\x00'
tRp3997
sg15
(lp3998
S'k'
asg17
S'Y'
sg14
I10
sa(dp3999
g16
(lp4000
S'k'
asg38
I331
sS'.thisRepN'
p4001
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4002
I495
sS'.thisN'
p4003
I495
sS'.thisIndex'
p4004
g43
(g45
S'K\x01\x00\x00'
tRp4005
sg15
(lp4006
S'k'
asg17
S'Y'
sg14
I10
sa(dp4007
g16
(lp4008
S'k'
asg38
I501
sS'.thisRepN'
p4009
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4010
I496
sS'.thisN'
p4011
I496
sS'.thisIndex'
p4012
g43
(g45
S'\xf5\x01\x00\x00'
tRp4013
sg15
(lp4014
S'k'
asg17
S'Y'
sg14
I10
sa(dp4015
g16
(lp4016
S'k'
asg38
I328
sS'.thisRepN'
p4017
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4018
I497
sS'.thisN'
p4019
I497
sS'.thisIndex'
p4020
g43
(g45
S'H\x01\x00\x00'
tRp4021
sg15
(lp4022
S'k'
asg17
S'Y'
sg14
I10
sa(dp4023
g16
(lp4024
S'd'
asg38
I184
sS'.thisRepN'
p4025
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4026
I498
sS'.thisN'
p4027
I498
sS'.thisIndex'
p4028
g43
(g45
S'\xb8\x00\x00\x00'
tRp4029
sg15
(lp4030
S'd'
asg17
S'Y'
sg14
I10
sa(dp4031
g16
(lp4032
S'k'
asg38
I301
sS'.thisRepN'
p4033
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4034
I499
sS'.thisN'
p4035
I499
sS'.thisIndex'
p4036
g43
(g45
S'-\x01\x00\x00'
tRp4037
sg15
(lp4038
S'd'
asg17
S'N'
sg14
I10
sa(dp4039
g16
(lp4040
S'k'
asg38
I545
sS'.thisRepN'
p4041
I0
sg19
S'Y'
sg18
S'Y'
sg23
VF
sg24
g25
sS'.thisTrialN'
p4042
I500
sS'.thisN'
p4043
I500
sS'.thisIndex'
p4044
g43
(g45
S'!\x02\x00\x00'
tRp4045
sg15
(lp4046
S'd'
asg17
S'Y'
sg14
I11
sa(dp4047
g16
(lp4048
S'k'
asg38
I370
sS'.thisRepN'
p4049
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4050
I501
sS'.thisN'
p4051
I501
sS'.thisIndex'
p4052
g43
(g45
S'r\x01\x00\x00'
tRp4053
sg15
(lp4054
S'd'
asg17
S'N'
sg14
I11
sa(dp4055
g16
(lp4056
S'd'
asg38
I297
sS'.thisRepN'
p4057
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4058
I502
sS'.thisN'
p4059
I502
sS'.thisIndex'
p4060
g43
(g45
S')\x01\x00\x00'
tRp4061
sg15
(lp4062
S'k'
asg17
S'N'
sg14
I11
sa(dp4063
g16
(lp4064
S'd'
asg38
I173
sS'.thisRepN'
p4065
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4066
I503
sS'.thisN'
p4067
I503
sS'.thisIndex'
p4068
g43
(g45
S'\xad\x00\x00\x00'
tRp4069
sg15
(lp4070
S'd'
asg17
S'Y'
sg14
I11
sa(dp4071
g16
(lp4072
S'k'
asg38
I429
sS'.thisRepN'
p4073
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4074
I504
sS'.thisN'
p4075
I504
sS'.thisIndex'
p4076
g43
(g45
S'\xad\x01\x00\x00'
tRp4077
sg15
(lp4078
S'd'
asg17
S'N'
sg14
I11
sa(dp4079
g16
(lp4080
S'k'
asg38
I443
sS'.thisRepN'
p4081
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4082
I505
sS'.thisN'
p4083
I505
sS'.thisIndex'
p4084
g43
(g45
S'\xbb\x01\x00\x00'
tRp4085
sg15
(lp4086
S'd'
asg17
S'N'
sg14
I11
sa(dp4087
g16
(lp4088
S'd'
asg38
I287
sS'.thisRepN'
p4089
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4090
I506
sS'.thisN'
p4091
I506
sS'.thisIndex'
p4092
g43
(g45
S'\x1f\x01\x00\x00'
tRp4093
sg15
(lp4094
S'k'
asg17
S'N'
sg14
I11
sa(dp4095
g16
(lp4096
S'k'
asg38
I399
sS'.thisRepN'
p4097
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4098
I507
sS'.thisN'
p4099
I507
sS'.thisIndex'
p4100
g43
(g45
S'\x8f\x01\x00\x00'
tRp4101
sg15
(lp4102
S'd'
asg17
S'N'
sg14
I11
sa(dp4103
g16
(lp4104
S'd'
asg38
I186
sS'.thisRepN'
p4105
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4106
I508
sS'.thisN'
p4107
I508
sS'.thisIndex'
p4108
g43
(g45
S'\xba\x00\x00\x00'
tRp4109
sg15
(lp4110
S'd'
asg17
S'Y'
sg14
I11
sa(dp4111
g16
(lp4112
S'k'
asg38
I337
sS'.thisRepN'
p4113
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4114
I509
sS'.thisN'
p4115
I509
sS'.thisIndex'
p4116
g43
(g45
S'Q\x01\x00\x00'
tRp4117
sg15
(lp4118
S'k'
asg17
S'Y'
sg14
I11
sa(dp4119
g16
(lp4120
S'd'
asg38
I20
sS'.thisRepN'
p4121
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4122
I510
sS'.thisN'
p4123
I510
sS'.thisIndex'
p4124
g43
(g45
S'\x14\x00\x00\x00'
tRp4125
sg15
(lp4126
S'd'
asg17
S'Y'
sg14
I11
sa(dp4127
g16
(lp4128
S'd'
asg38
I120
sS'.thisRepN'
p4129
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4130
I511
sS'.thisN'
p4131
I511
sS'.thisIndex'
p4132
g43
(g45
S'x\x00\x00\x00'
tRp4133
sg15
(lp4134
S'd'
asg17
S'Y'
sg14
I11
sa(dp4135
g16
(lp4136
S'k'
asg38
I306
sS'.thisRepN'
p4137
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4138
I512
sS'.thisN'
p4139
I512
sS'.thisIndex'
p4140
g43
(g45
S'2\x01\x00\x00'
tRp4141
sg15
(lp4142
S'k'
asg17
S'Y'
sg14
I11
sa(dp4143
g16
(lp4144
S'd'
asg38
I188
sS'.thisRepN'
p4145
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4146
I513
sS'.thisN'
p4147
I513
sS'.thisIndex'
p4148
g43
(g45
S'\xbc\x00\x00\x00'
tRp4149
sg15
(lp4150
S'k'
asg17
S'N'
sg14
I11
sa(dp4151
g16
(lp4152
S'k'
asg38
I369
sS'.thisRepN'
p4153
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4154
I514
sS'.thisN'
p4155
I514
sS'.thisIndex'
p4156
g43
(g45
S'q\x01\x00\x00'
tRp4157
sg15
(lp4158
S'd'
asg17
S'N'
sg14
I11
sa(dp4159
g16
(lp4160
S'd'
asg38
I152
sS'.thisRepN'
p4161
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4162
I515
sS'.thisN'
p4163
I515
sS'.thisIndex'
p4164
g43
(g45
S'\x98\x00\x00\x00'
tRp4165
sg15
(lp4166
S'd'
asg17
S'Y'
sg14
I11
sa(dp4167
g16
(lp4168
S'd'
asg38
I279
sS'.thisRepN'
p4169
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4170
I516
sS'.thisN'
p4171
I516
sS'.thisIndex'
p4172
g43
(g45
S'\x17\x01\x00\x00'
tRp4173
sg15
(lp4174
S'k'
asg17
S'N'
sg14
I11
sa(dp4175
g16
(lp4176
S'k'
asg38
I546
sS'.thisRepN'
p4177
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4178
I517
sS'.thisN'
p4179
I517
sS'.thisIndex'
p4180
g43
(g45
S'"\x02\x00\x00'
tRp4181
sg15
(lp4182
S'k'
asg17
S'Y'
sg14
I11
sa(dp4183
g16
(lp4184
S'd'
asg38
I8
sS'.thisRepN'
p4185
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4186
I518
sS'.thisN'
p4187
I518
sS'.thisIndex'
p4188
g43
(g45
S'\x08\x00\x00\x00'
tRp4189
sg15
(lp4190
S'd'
asg17
S'Y'
sg14
I11
sa(dp4191
g16
(lp4192
S'k'
asg38
I526
sS'.thisRepN'
p4193
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4194
I519
sS'.thisN'
p4195
I519
sS'.thisIndex'
p4196
g43
(g45
S'\x0e\x02\x00\x00'
tRp4197
sg15
(lp4198
S'k'
asg17
S'Y'
sg14
I11
sa(dp4199
g16
(lp4200
S'd'
asg38
I281
sS'.thisRepN'
p4201
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4202
I520
sS'.thisN'
p4203
I520
sS'.thisIndex'
p4204
g43
(g45
S'\x19\x01\x00\x00'
tRp4205
sg15
(lp4206
S'd'
asg17
S'Y'
sg14
I11
sa(dp4207
g16
(lp4208
S'k'
asg38
I561
sS'.thisRepN'
p4209
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4210
I521
sS'.thisN'
p4211
I521
sS'.thisIndex'
p4212
g43
(g45
S'1\x02\x00\x00'
tRp4213
sg15
(lp4214
S'd'
asg17
S'N'
sg14
I11
sa(dp4215
g16
(lp4216
S'k'
asg38
I427
sS'.thisRepN'
p4217
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4218
I522
sS'.thisN'
p4219
I522
sS'.thisIndex'
p4220
g43
(g45
S'\xab\x01\x00\x00'
tRp4221
sg15
(lp4222
S'k'
asg17
S'Y'
sg14
I11
sa(dp4223
g16
(lp4224
S'k'
asg38
I307
sS'.thisRepN'
p4225
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4226
I523
sS'.thisN'
p4227
I523
sS'.thisIndex'
p4228
g43
(g45
S'3\x01\x00\x00'
tRp4229
sg15
(lp4230
S'k'
asg17
S'Y'
sg14
I11
sa(dp4231
g16
(lp4232
S'k'
asg38
I521
sS'.thisRepN'
p4233
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4234
I524
sS'.thisN'
p4235
I524
sS'.thisIndex'
p4236
g43
(g45
S'\t\x02\x00\x00'
tRp4237
sg15
(lp4238
S'k'
asg17
S'Y'
sg14
I11
sa(dp4239
g16
(lp4240
S'd'
asg38
I299
sS'.thisRepN'
p4241
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4242
I525
sS'.thisN'
p4243
I525
sS'.thisIndex'
p4244
g43
(g45
S'+\x01\x00\x00'
tRp4245
sg15
(lp4246
S'k'
asg17
S'N'
sg14
I11
sa(dp4247
g16
(lp4248
S'd'
asg38
I81
sS'.thisRepN'
p4249
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4250
I526
sS'.thisN'
p4251
I526
sS'.thisIndex'
p4252
g43
(g45
S'Q\x00\x00\x00'
tRp4253
sg15
(lp4254
S'd'
asg17
S'Y'
sg14
I11
sa(dp4255
g16
(lp4256
S'k'
asg38
I566
sS'.thisRepN'
p4257
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4258
I527
sS'.thisN'
p4259
I527
sS'.thisIndex'
p4260
g43
(g45
S'6\x02\x00\x00'
tRp4261
sg15
(lp4262
S'd'
asg17
S'N'
sg14
I11
sa(dp4263
g16
(lp4264
S'd'
asg38
I131
sS'.thisRepN'
p4265
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4266
I528
sS'.thisN'
p4267
I528
sS'.thisIndex'
p4268
g43
(g45
S'\x83\x00\x00\x00'
tRp4269
sg15
(lp4270
S'k'
asg17
S'N'
sg14
I11
sa(dp4271
g16
(lp4272
S'd'
asg38
I163
sS'.thisRepN'
p4273
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4274
I529
sS'.thisN'
p4275
I529
sS'.thisIndex'
p4276
g43
(g45
S'\xa3\x00\x00\x00'
tRp4277
sg15
(lp4278
S'd'
asg17
S'Y'
sg14
I11
sa(dp4279
g16
(lp4280
S'k'
asg38
I559
sS'.thisRepN'
p4281
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4282
I530
sS'.thisN'
p4283
I530
sS'.thisIndex'
p4284
g43
(g45
S'/\x02\x00\x00'
tRp4285
sg15
(lp4286
S'd'
asg17
S'N'
sg14
I11
sa(dp4287
g16
(lp4288
S'd'
asg38
I189
sS'.thisRepN'
p4289
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4290
I531
sS'.thisN'
p4291
I531
sS'.thisIndex'
p4292
g43
(g45
S'\xbd\x00\x00\x00'
tRp4293
sg15
(lp4294
S'k'
asg17
S'N'
sg14
I11
sa(dp4295
g16
(lp4296
S'k'
asg38
I547
sS'.thisRepN'
p4297
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4298
I532
sS'.thisN'
p4299
I532
sS'.thisIndex'
p4300
g43
(g45
S'#\x02\x00\x00'
tRp4301
sg15
(lp4302
S'k'
asg17
S'Y'
sg14
I11
sa(dp4303
g16
(lp4304
S'd'
asg38
I12
sS'.thisRepN'
p4305
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4306
I533
sS'.thisN'
p4307
I533
sS'.thisIndex'
p4308
g43
(g45
S'\x0c\x00\x00\x00'
tRp4309
sg15
(lp4310
S'd'
asg17
S'Y'
sg14
I11
sa(dp4311
g16
(lp4312
S'k'
asg38
I595
sS'.thisRepN'
p4313
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4314
I534
sS'.thisN'
p4315
I534
sS'.thisIndex'
p4316
g43
(g45
S'S\x02\x00\x00'
tRp4317
sg15
(lp4318
S'k'
asg17
S'Y'
sg14
I11
sa(dp4319
g16
(lp4320
S'k'
asg38
I405
sS'.thisRepN'
p4321
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4322
I535
sS'.thisN'
p4323
I535
sS'.thisIndex'
p4324
g43
(g45
S'\x95\x01\x00\x00'
tRp4325
sg15
(lp4326
S'k'
asg17
S'Y'
sg14
I11
sa(dp4327
g16
(lp4328
S'k'
asg38
I486
sS'.thisRepN'
p4329
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4330
I536
sS'.thisN'
p4331
I536
sS'.thisIndex'
p4332
g43
(g45
S'\xe6\x01\x00\x00'
tRp4333
sg15
(lp4334
S'k'
asg17
S'Y'
sg14
I11
sa(dp4335
g16
(lp4336
S'k'
asg38
I496
sS'.thisRepN'
p4337
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4338
I537
sS'.thisN'
p4339
I537
sS'.thisIndex'
p4340
g43
(g45
S'\xf0\x01\x00\x00'
tRp4341
sg15
(lp4342
S'k'
asg17
S'Y'
sg14
I11
sa(dp4343
g16
(lp4344
S'k'
asg38
I485
sS'.thisRepN'
p4345
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4346
I538
sS'.thisN'
p4347
I538
sS'.thisIndex'
p4348
g43
(g45
S'\xe5\x01\x00\x00'
tRp4349
sg15
(lp4350
S'k'
asg17
S'Y'
sg14
I11
sa(dp4351
g16
(lp4352
S'd'
asg38
I248
sS'.thisRepN'
p4353
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4354
I539
sS'.thisN'
p4355
I539
sS'.thisIndex'
p4356
g43
(g45
S'\xf8\x00\x00\x00'
tRp4357
sg15
(lp4358
S'k'
asg17
S'N'
sg14
I11
sa(dp4359
g16
(lp4360
S'k'
asg38
I327
sS'.thisRepN'
p4361
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4362
I540
sS'.thisN'
p4363
I540
sS'.thisIndex'
p4364
g43
(g45
S'G\x01\x00\x00'
tRp4365
sg15
(lp4366
S'k'
asg17
S'Y'
sg14
I11
sa(dp4367
g16
(lp4368
S'd'
asg38
I143
sS'.thisRepN'
p4369
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4370
I541
sS'.thisN'
p4371
I541
sS'.thisIndex'
p4372
g43
(g45
S'\x8f\x00\x00\x00'
tRp4373
sg15
(lp4374
S'k'
asg17
S'N'
sg14
I11
sa(dp4375
g16
(lp4376
S'k'
asg38
I449
sS'.thisRepN'
p4377
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4378
I542
sS'.thisN'
p4379
I542
sS'.thisIndex'
p4380
g43
(g45
S'\xc1\x01\x00\x00'
tRp4381
sg15
(lp4382
S'd'
asg17
S'N'
sg14
I11
sa(dp4383
g16
(lp4384
S'k'
asg38
I482
sS'.thisRepN'
p4385
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4386
I543
sS'.thisN'
p4387
I543
sS'.thisIndex'
p4388
g43
(g45
S'\xe2\x01\x00\x00'
tRp4389
sg15
(lp4390
S'k'
asg17
S'Y'
sg14
I11
sa(dp4391
g16
(lp4392
S'k'
asg38
I310
sS'.thisRepN'
p4393
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4394
I544
sS'.thisN'
p4395
I544
sS'.thisIndex'
p4396
g43
(g45
S'6\x01\x00\x00'
tRp4397
sg15
(lp4398
S'k'
asg17
S'Y'
sg14
I11
sa(dp4399
g16
(lp4400
S'k'
asg38
I584
sS'.thisRepN'
p4401
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4402
I545
sS'.thisN'
p4403
I545
sS'.thisIndex'
p4404
g43
(g45
S'H\x02\x00\x00'
tRp4405
sg15
(lp4406
S'd'
asg17
S'N'
sg14
I11
sa(dp4407
g16
(lp4408
S'k'
asg38
I440
sS'.thisRepN'
p4409
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4410
I546
sS'.thisN'
p4411
I546
sS'.thisIndex'
p4412
g43
(g45
S'\xb8\x01\x00\x00'
tRp4413
sg15
(lp4414
S'k'
asg17
S'Y'
sg14
I11
sa(dp4415
g16
(lp4416
S'k'
asg38
I302
sS'.thisRepN'
p4417
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4418
I547
sS'.thisN'
p4419
I547
sS'.thisIndex'
p4420
g43
(g45
S'.\x01\x00\x00'
tRp4421
sg15
(lp4422
S'k'
asg17
S'Y'
sg14
I11
sa(dp4423
g16
(lp4424
S'k'
asg38
I536
sS'.thisRepN'
p4425
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4426
I548
sS'.thisN'
p4427
I548
sS'.thisIndex'
p4428
g43
(g45
S'\x18\x02\x00\x00'
tRp4429
sg15
(lp4430
S'k'
asg17
S'Y'
sg14
I11
sa(dp4431
g16
(lp4432
S'd'
asg38
I117
sS'.thisRepN'
p4433
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4434
I549
sS'.thisN'
p4435
I549
sS'.thisIndex'
p4436
g43
(g45
S'u\x00\x00\x00'
tRp4437
sg15
(lp4438
S'k'
asg17
S'N'
sg14
I11
sa(dp4439
g16
(lp4440
S'k'
asg38
I451
sS'.thisRepN'
p4441
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4442
I550
sS'.thisN'
p4443
I550
sS'.thisIndex'
p4444
g43
(g45
S'\xc3\x01\x00\x00'
tRp4445
sg15
(lp4446
S'k'
asg17
S'Y'
sg14
I12
sa(dp4447
g16
(lp4448
S'd'
asg38
I112
sS'.thisRepN'
p4449
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4450
I551
sS'.thisN'
p4451
I551
sS'.thisIndex'
p4452
g43
(g45
S'p\x00\x00\x00'
tRp4453
sg15
(lp4454
S'k'
asg17
S'N'
sg14
I12
sa(dp4455
g16
(lp4456
S'k'
asg38
I453
sS'.thisRepN'
p4457
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4458
I552
sS'.thisN'
p4459
I552
sS'.thisIndex'
p4460
g43
(g45
S'\xc5\x01\x00\x00'
tRp4461
sg15
(lp4462
S'k'
asg17
S'Y'
sg14
I12
sa(dp4463
g16
(lp4464
S'd'
asg38
I145
sS'.thisRepN'
p4465
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4466
I553
sS'.thisN'
p4467
I553
sS'.thisIndex'
p4468
g43
(g45
S'\x91\x00\x00\x00'
tRp4469
sg15
(lp4470
S'k'
asg17
S'N'
sg14
I12
sa(dp4471
g16
(lp4472
S'k'
asg38
I348
sS'.thisRepN'
p4473
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4474
I554
sS'.thisN'
p4475
I554
sS'.thisIndex'
p4476
g43
(g45
S'\\\x01\x00\x00'
tRp4477
sg15
(lp4478
S'k'
asg17
S'Y'
sg14
I12
sa(dp4479
g16
(lp4480
S'd'
asg38
I176
sS'.thisRepN'
p4481
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4482
I555
sS'.thisN'
p4483
I555
sS'.thisIndex'
p4484
g43
(g45
S'\xb0\x00\x00\x00'
tRp4485
sg15
(lp4486
S'k'
asg17
S'N'
sg14
I12
sa(dp4487
g16
(lp4488
S'k'
asg38
I487
sS'.thisRepN'
p4489
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4490
I556
sS'.thisN'
p4491
I556
sS'.thisIndex'
p4492
g43
(g45
S'\xe7\x01\x00\x00'
tRp4493
sg15
(lp4494
S'k'
asg17
S'Y'
sg14
I12
sa(dp4495
g16
(lp4496
S'd'
asg38
I140
sS'.thisRepN'
p4497
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4498
I557
sS'.thisN'
p4499
I557
sS'.thisIndex'
p4500
g43
(g45
S'\x8c\x00\x00\x00'
tRp4501
sg15
(lp4502
S'd'
asg17
S'Y'
sg14
I12
sa(dp4503
g16
(lp4504
S'd'
asg38
I190
sS'.thisRepN'
p4505
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4506
I558
sS'.thisN'
p4507
I558
sS'.thisIndex'
p4508
g43
(g45
S'\xbe\x00\x00\x00'
tRp4509
sg15
(lp4510
S'k'
asg17
S'N'
sg14
I12
sa(dp4511
g16
(lp4512
S'd'
asg38
I149
sS'.thisRepN'
p4513
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4514
I559
sS'.thisN'
p4515
I559
sS'.thisIndex'
p4516
g43
(g45
S'\x95\x00\x00\x00'
tRp4517
sg15
(lp4518
S'd'
asg17
S'Y'
sg14
I12
sa(dp4519
g16
(lp4520
S'k'
asg38
I386
sS'.thisRepN'
p4521
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4522
I560
sS'.thisN'
p4523
I560
sS'.thisIndex'
p4524
g43
(g45
S'\x82\x01\x00\x00'
tRp4525
sg15
(lp4526
S'k'
asg17
S'Y'
sg14
I12
sa(dp4527
g16
(lp4528
S'd'
asg38
I239
sS'.thisRepN'
p4529
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4530
I561
sS'.thisN'
p4531
I561
sS'.thisIndex'
p4532
g43
(g45
S'\xef\x00\x00\x00'
tRp4533
sg15
(lp4534
S'd'
asg17
S'Y'
sg14
I12
sa(dp4535
g16
(lp4536
S'k'
asg38
I470
sS'.thisRepN'
p4537
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4538
I562
sS'.thisN'
p4539
I562
sS'.thisIndex'
p4540
g43
(g45
S'\xd6\x01\x00\x00'
tRp4541
sg15
(lp4542
S'k'
asg17
S'Y'
sg14
I12
sa(dp4543
g16
(lp4544
S'd'
asg38
I39
sS'.thisRepN'
p4545
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4546
I563
sS'.thisN'
p4547
I563
sS'.thisIndex'
p4548
g43
(g45
S"'\x00\x00\x00"
tRp4549
sg15
(lp4550
S'd'
asg17
S'Y'
sg14
I12
sa(dp4551
g16
(lp4552
S'd'
asg38
I274
sS'.thisRepN'
p4553
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4554
I564
sS'.thisN'
p4555
I564
sS'.thisIndex'
p4556
g43
(g45
S'\x12\x01\x00\x00'
tRp4557
sg15
(lp4558
S'k'
asg17
S'N'
sg14
I12
sa(dp4559
g16
(lp4560
S'd'
asg38
I31
sS'.thisRepN'
p4561
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4562
I565
sS'.thisN'
p4563
I565
sS'.thisIndex'
p4564
g43
(g45
S'\x1f\x00\x00\x00'
tRp4565
sg15
(lp4566
S'd'
asg17
S'Y'
sg14
I12
sa(dp4567
g16
(lp4568
S'd'
asg38
I97
sS'.thisRepN'
p4569
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4570
I566
sS'.thisN'
p4571
I566
sS'.thisIndex'
p4572
g43
(g45
S'a\x00\x00\x00'
tRp4573
sg15
(lp4574
S'k'
asg17
S'N'
sg14
I12
sa(dp4575
g16
(lp4576
S'k'
asg38
I358
sS'.thisRepN'
p4577
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4578
I567
sS'.thisN'
p4579
I567
sS'.thisIndex'
p4580
g43
(g45
S'f\x01\x00\x00'
tRp4581
sg15
(lp4582
S'd'
asg17
S'N'
sg14
I12
sa(dp4583
g16
(lp4584
S'k'
asg38
I425
sS'.thisRepN'
p4585
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4586
I568
sS'.thisN'
p4587
I568
sS'.thisIndex'
p4588
g43
(g45
S'\xa9\x01\x00\x00'
tRp4589
sg15
(lp4590
S'k'
asg17
S'Y'
sg14
I12
sa(dp4591
g16
(lp4592
S'd'
asg38
I192
sS'.thisRepN'
p4593
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4594
I569
sS'.thisN'
p4595
I569
sS'.thisIndex'
p4596
g43
(g45
S'\xc0\x00\x00\x00'
tRp4597
sg15
(lp4598
S'd'
asg17
S'Y'
sg14
I12
sa(dp4599
g16
(lp4600
S'd'
asg38
I14
sS'.thisRepN'
p4601
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4602
I570
sS'.thisN'
p4603
I570
sS'.thisIndex'
p4604
g43
(g45
S'\x0e\x00\x00\x00'
tRp4605
sg15
(lp4606
S'd'
asg17
S'Y'
sg14
I12
sa(dp4607
g16
(lp4608
S'd'
asg38
I290
sS'.thisRepN'
p4609
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4610
I571
sS'.thisN'
p4611
I571
sS'.thisIndex'
p4612
g43
(g45
S'"\x01\x00\x00'
tRp4613
sg15
(lp4614
S'k'
asg17
S'N'
sg14
I12
sa(dp4615
g16
(lp4616
S'k'
asg38
I308
sS'.thisRepN'
p4617
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4618
I572
sS'.thisN'
p4619
I572
sS'.thisIndex'
p4620
g43
(g45
S'4\x01\x00\x00'
tRp4621
sg15
(lp4622
S'd'
asg17
S'N'
sg14
I12
sa(dp4623
g16
(lp4624
S'k'
asg38
I416
sS'.thisRepN'
p4625
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4626
I573
sS'.thisN'
p4627
I573
sS'.thisIndex'
p4628
g43
(g45
S'\xa0\x01\x00\x00'
tRp4629
sg15
(lp4630
S'k'
asg17
S'Y'
sg14
I12
sa(dp4631
g16
(lp4632
S'k'
asg38
I543
sS'.thisRepN'
p4633
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4634
I574
sS'.thisN'
p4635
I574
sS'.thisIndex'
p4636
g43
(g45
S'\x1f\x02\x00\x00'
tRp4637
sg15
(lp4638
S'k'
asg17
S'Y'
sg14
I12
sa(dp4639
g16
(lp4640
S'd'
asg38
I151
sS'.thisRepN'
p4641
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4642
I575
sS'.thisN'
p4643
I575
sS'.thisIndex'
p4644
g43
(g45
S'\x97\x00\x00\x00'
tRp4645
sg15
(lp4646
S'k'
asg17
S'N'
sg14
I12
sa(dp4647
g16
(lp4648
S'k'
asg38
I594
sS'.thisRepN'
p4649
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4650
I576
sS'.thisN'
p4651
I576
sS'.thisIndex'
p4652
g43
(g45
S'R\x02\x00\x00'
tRp4653
sg15
(lp4654
S'k'
asg17
S'Y'
sg14
I12
sa(dp4655
g16
(lp4656
S'k'
asg38
I518
sS'.thisRepN'
p4657
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4658
I577
sS'.thisN'
p4659
I577
sS'.thisIndex'
p4660
g43
(g45
S'\x06\x02\x00\x00'
tRp4661
sg15
(lp4662
S'k'
asg17
S'Y'
sg14
I12
sa(dp4663
g16
(lp4664
S'k'
asg38
I475
sS'.thisRepN'
p4665
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4666
I578
sS'.thisN'
p4667
I578
sS'.thisIndex'
p4668
g43
(g45
S'\xdb\x01\x00\x00'
tRp4669
sg15
(lp4670
S'k'
asg17
S'Y'
sg14
I12
sa(dp4671
g16
(lp4672
S'k'
asg38
I494
sS'.thisRepN'
p4673
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4674
I579
sS'.thisN'
p4675
I579
sS'.thisIndex'
p4676
g43
(g45
S'\xee\x01\x00\x00'
tRp4677
sg15
(lp4678
S'k'
asg17
S'Y'
sg14
I12
sa(dp4679
g16
(lp4680
S'd'
asg38
I37
sS'.thisRepN'
p4681
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4682
I580
sS'.thisN'
p4683
I580
sS'.thisIndex'
p4684
g43
(g45
S'%\x00\x00\x00'
tRp4685
sg15
(lp4686
S'k'
asg17
S'N'
sg14
I12
sa(dp4687
g16
(lp4688
S'd'
asg38
I94
sS'.thisRepN'
p4689
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4690
I581
sS'.thisN'
p4691
I581
sS'.thisIndex'
p4692
g43
(g45
S'^\x00\x00\x00'
tRp4693
sg15
(lp4694
S'd'
asg17
S'Y'
sg14
I12
sa(dp4695
g16
(lp4696
S'd'
asg38
I108
sS'.thisRepN'
p4697
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4698
I582
sS'.thisN'
p4699
I582
sS'.thisIndex'
p4700
g43
(g45
S'l\x00\x00\x00'
tRp4701
sg15
(lp4702
S'd'
asg17
S'Y'
sg14
I12
sa(dp4703
g16
(lp4704
S'd'
asg38
I262
sS'.thisRepN'
p4705
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4706
I583
sS'.thisN'
p4707
I583
sS'.thisIndex'
p4708
g43
(g45
S'\x06\x01\x00\x00'
tRp4709
sg15
(lp4710
S'd'
asg17
S'Y'
sg14
I12
sa(dp4711
g16
(lp4712
S'd'
asg38
I213
sS'.thisRepN'
p4713
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4714
I584
sS'.thisN'
p4715
I584
sS'.thisIndex'
p4716
g43
(g45
S'\xd5\x00\x00\x00'
tRp4717
sg15
(lp4718
S'd'
asg17
S'Y'
sg14
I12
sa(dp4719
g16
(lp4720
S'k'
asg38
I352
sS'.thisRepN'
p4721
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4722
I585
sS'.thisN'
p4723
I585
sS'.thisIndex'
p4724
g43
(g45
S'`\x01\x00\x00'
tRp4725
sg15
(lp4726
S'd'
asg17
S'N'
sg14
I12
sa(dp4727
g16
(lp4728
S'k'
asg38
I384
sS'.thisRepN'
p4729
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4730
I586
sS'.thisN'
p4731
I586
sS'.thisIndex'
p4732
g43
(g45
S'\x80\x01\x00\x00'
tRp4733
sg15
(lp4734
S'k'
asg17
S'Y'
sg14
I12
sa(dp4735
g16
(lp4736
S'd'
asg38
I19
sS'.thisRepN'
p4737
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4738
I587
sS'.thisN'
p4739
I587
sS'.thisIndex'
p4740
g43
(g45
S'\x13\x00\x00\x00'
tRp4741
sg15
(lp4742
S'k'
asg17
S'N'
sg14
I12
sa(dp4743
g16
(lp4744
S'k'
asg38
I323
sS'.thisRepN'
p4745
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4746
I588
sS'.thisN'
p4747
I588
sS'.thisIndex'
p4748
g43
(g45
S'C\x01\x00\x00'
tRp4749
sg15
(lp4750
S'd'
asg17
S'N'
sg14
I12
sa(dp4751
g16
(lp4752
S'k'
asg38
I552
sS'.thisRepN'
p4753
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4754
I589
sS'.thisN'
p4755
I589
sS'.thisIndex'
p4756
g43
(g45
S'(\x02\x00\x00'
tRp4757
sg15
(lp4758
S'k'
asg17
S'Y'
sg14
I12
sa(dp4759
g16
(lp4760
S'd'
asg38
I238
sS'.thisRepN'
p4761
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4762
I590
sS'.thisN'
p4763
I590
sS'.thisIndex'
p4764
g43
(g45
S'\xee\x00\x00\x00'
tRp4765
sg15
(lp4766
S'k'
asg17
S'N'
sg14
I12
sa(dp4767
g16
(lp4768
S'k'
asg38
I462
sS'.thisRepN'
p4769
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4770
I591
sS'.thisN'
p4771
I591
sS'.thisIndex'
p4772
g43
(g45
S'\xce\x01\x00\x00'
tRp4773
sg15
(lp4774
S'd'
asg17
S'N'
sg14
I12
sa(dp4775
g16
(lp4776
S'd'
asg38
I166
sS'.thisRepN'
p4777
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4778
I592
sS'.thisN'
p4779
I592
sS'.thisIndex'
p4780
g43
(g45
S'\xa6\x00\x00\x00'
tRp4781
sg15
(lp4782
S'k'
asg17
S'N'
sg14
I12
sa(dp4783
g16
(lp4784
S'k'
asg38
I448
sS'.thisRepN'
p4785
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4786
I593
sS'.thisN'
p4787
I593
sS'.thisIndex'
p4788
g43
(g45
S'\xc0\x01\x00\x00'
tRp4789
sg15
(lp4790
S'd'
asg17
S'N'
sg14
I12
sa(dp4791
g16
(lp4792
S'k'
asg38
I335
sS'.thisRepN'
p4793
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4794
I594
sS'.thisN'
p4795
I594
sS'.thisIndex'
p4796
g43
(g45
S'O\x01\x00\x00'
tRp4797
sg15
(lp4798
S'k'
asg17
S'Y'
sg14
I12
sa(dp4799
g16
(lp4800
S'd'
asg38
I100
sS'.thisRepN'
p4801
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4802
I595
sS'.thisN'
p4803
I595
sS'.thisIndex'
p4804
g43
(g45
S'd\x00\x00\x00'
tRp4805
sg15
(lp4806
S'k'
asg17
S'N'
sg14
I12
sa(dp4807
g16
(lp4808
S'd'
asg38
I228
sS'.thisRepN'
p4809
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4810
I596
sS'.thisN'
p4811
I596
sS'.thisIndex'
p4812
g43
(g45
S'\xe4\x00\x00\x00'
tRp4813
sg15
(lp4814
S'k'
asg17
S'N'
sg14
I12
sa(dp4815
g16
(lp4816
S'k'
asg38
I333
sS'.thisRepN'
p4817
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4818
I597
sS'.thisN'
p4819
I597
sS'.thisIndex'
p4820
g43
(g45
S'M\x01\x00\x00'
tRp4821
sg15
(lp4822
S'k'
asg17
S'Y'
sg14
I12
sa(dp4823
g16
(lp4824
S'k'
asg38
I535
sS'.thisRepN'
p4825
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4826
I598
sS'.thisN'
p4827
I598
sS'.thisIndex'
p4828
g43
(g45
S'\x17\x02\x00\x00'
tRp4829
sg15
(lp4830
S'd'
asg17
S'N'
sg14
I12
sa(dp4831
g16
(lp4832
S'd'
asg38
I34
sS'.thisRepN'
p4833
I0
sg23
VF
sg24
g25
sS'.thisTrialN'
p4834
I599
sS'.thisN'
p4835
I599
sS'.thisIndex'
p4836
g43
(g45
S'"\x00\x00\x00'
tRp4837
sg15
(lp4838
S'k'
asg17
S'N'
sg14
I12
sasS'loops'
p4839
(lp4840
g1
(cpsychopy.data
TrialHandler
p4841
g3
NtRp4842
(dp4843
S'origin'
p4844
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4845
sS'thisTrial'
p4846
(lp4847
sS'_exp'
p4848
I65737616
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p4849
sS'thisRepN'
p4850
I1
sg20
I01
sg21
NsS'data'
p4851
g1
(cpsychopy.data
DataHandler
p4852
c__builtin__
dict
p4853
(dp4854
S'ran'
p4855
cnumpy.ma.core
_mareconstruct
p4856
(cnumpy.ma.core
MaskedArray
p4857
cnumpy
ndarray
p4858
(I0
tp4859
S'b'
tRp4860
(I1
(I600
I1
tg44
(S'f4'
I0
I1
tRp4861
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p4862
g4856
(g4857
g4858
g4859
S'b'
tRp4863
(I1
(I600
I1
tg4861
I00
S'\x00\x00\xdfC\x00\x00pC\x00\x00\x10C\x00\x80\xd4C\x00\x80\x98C\x00\x00 C\x00\x00\xcaC\x00\x00\x80?\x00\x80\x01D\x00\x00\xf4C\x00\x80\x8cC\x00\x00aC\x00@\x05D\x00\x00\xbeB\x00\x80\x0eD\x00\x00\x00C\x00\x00eC\x00\x00\xb0B\x00\x00\x81C\x00\xc0\x12D\x00\x00\xffC\x00\x00\xf1C\x00\x00\xdaB\x00\x00+C\x00\x00\x10A\x00\x80\xc4C\x00\x00\xc6B\x00\x00\x06C\x00\x00]C\x00\x00TB\x00\x80\x8aC\x00@\rD\x00\x00;C\x00\x80\xd0C\x00\xc0\x15D\x00\x80\xf5C\x00\x80\x9bC\x00\x00\x11D\x00\x00(C\x00\xc0\x0cD\x00\x00$C\x00\x80\xf1C\x00\x00\xccB\x00\x00\xf2C\x00\x00\x92C\x00\x001C\x00\x00\x1cC\x00\x00\xe0C\x00\x00jC\x00\x00HB\x00\x00\x8eB\x00\x80\x86C\x00\x00\xbaC\x00\x80\x8fC\x00\x00\x0eC\x00\x80\xdbC\x00\x80\xefC\x00\x00@A\x00\x00pA\x00\x00\x8cB\x00\x00tC\x00\x80\x95C\x00\x00\x94B\x00\x80\xc5C\x00\x80\xe7C\x00\x00vC\x00\x80\xa3C\x00\x00PB\x00\x80\xdaC\x00\x00\xe2C\x00\x00\xc0B\x00\x80\xb0C\x00\x00\xcaB\x00\x00bC\x00\x00\xf8B\x00\x00\xd7C\x00\x00\xa0@\x00\x00\x9aC\x00\x80\xceC\x00\x00\xb4C\x00\x00\xa7C\x00\x80\x03D\x00\x00\xb4B\x00\x00hB\x00\x00\xc3C\x00\x00,B\x00\x80\xbaC\x00\x00SC\x00\x80\xebC\x00\x00\xc8B\x00\x00\x80B\x00\x00\xa9C\x00\x80\xbbC\x00\x80\xdfC\x00@\x11D\x00\x00\x11C\x00\x00CC\x00\x80\rD\x00\x00`B\x00\x80\xcaC\x00\xc0\x14D\x00\x00\xa2C\x00\x00\xeeC\x00\x00\xc2C\x00\x00\x12C\x00\x80\xc9C\x00\x80\xddC\x00\x00\x95C\x00\x80\x11D\x00\x00\x18C\x00\x80\xbeC\x00\x80\xb2C\x00\xc0\tD\x00\x80\xadC\x00\x00\xb8A\x00\x00zC\x00\x80\xbcC\x00@\tD\x00\x00\xd0A\x00\x00\xafC\x00\x80\xffC\x00\x00\x1fC\x00\x80\xa1C\x00\x00\x89C\x00\x00\x93C\x00\x00\xbdC\x00\x00\xb5C\x00\x00\x8bC\x00\x00\x08B\x00\x00.C\x00\x00\xa3C\x00\x00\x04D\x00\x00\x92B\x00\x00mC\x00\x00\xb0C\x00\x00RC\x00\x00@C\x00\x00UC\x00\x00\xf8A\x00\x00\xe6C\x00@\x0bD\x00\x80\xc1C\x00\x00BC\x00@\x07D\x00\x00\xb3C\x00@\nD\x00\x00\x82C\x00\x80\xd5C\x00\x00\x98B\x00\xc0\x0bD\x00\x00dB\x00\xc0\x0fD\x00\xc0\x00D\x00\x80\xe3C\x00\x00\xa4C\x00\x80\xa4C\x00\x80\xb1C\x00\x00GC\x00\x00\x98C\x00\x00<B\x00\x003C\x00\x00\xf6B\x00\x80\xabC\x00@\x04D\x00\x00wC\x00\x80\xcbC\x00\x00\x14D\x00\x00\xdcC\x00\x00PC\x00\x00\xdaC\x00\x80\x8eC\x00\x00\xceB\x00\x00\xa4B\x00\x80\xfbC\x00\x00\xd8A\x00\x00\x08C\x00\xc0\nD\x00\x00FC\x00\x80\x94C\x00\x00LB\x00\x80\xe6C\x00\x00\x18B\x00\x00\xf4B\x00\x00\xe4C\x00\x00\xf9C\x00\x00\xb2C\x00\x00\xfeC\x00\x00\x8aB\x00@\x00D\x00\xc0\x04D\x00\x80\x0bD\x00\x00\x84B\x00@\x0eD\x00\x00ZC\x00\x80\x8bC\x00\x00\xc7C\x00\x80\xa9C\x00\x006C\x00\x00VC\x00\x80\x84C\x00\x00\xd8B\x00\x00\x0cC\x00\x00xB\x00\x00cC\x00\x00\xadC\x00\x00\xe1C\x00\x00\xd0B\x00\x00\xeeB\x00\x00qC\x00\x00\x9cC\x00\x00\xedC\x00\x00/C\x00\x00\xc1C\x00\x00\x12D\x00\x00\x16C\x00\x000C\x00\x00\xb8B\x00\x00\xbaB\x00\x00}C\x00\x00|C\x00\x00=C\x00\x00\xddC\x00\x00\xdeB\x00\x00\x9bC\x00\x00\x17C\x00\x00\nC\x00\x00\x83C\x00\x00XB\x00\x00\x15D\x00\x00$B\x00\x00\xb6C\x00\x00uC\x00\x00dC\x00\x00)C\x00\x80\xaeC\x00\x00iC\x00\x00\\C\x00\x80\xeeC\x00\x80\x13D\x00@\x0cD\x00\x00\x9fC\x00\x00\xacB\x00\x00\xa0A\x00\x00\x07C\x00\x00&C\x00\x00`A\x00\x80\xb4C\x00\x00\xe2B\x00\xc0\x06D\x00\x00\xc0C\x00\x00\xf2B\x00\x80\xb9C\x00\x00#C\x00\x00\xf6C\x00\x00\xbeC\x00\x80\xa5C\x00\x00\x1aC\x00\x00sC\x00\x00nC\x00\x00:C\x00\x80\x80C\x00\x80\x9fC\x00\xc0\x11D\x00\x80\x92C\x00\x00\x04B\x00\x00*C\x00\x00AC\x00\x00MC\x00\x00\xc2B\x00\x00\xa6C\x00\x00\x01C\x00\x00\xd1C\x00\x80\xbdC\x00\x00@B\x00\x00\rD\x00\x80\xe5C\x00\x80\x90C\x00\x80\xd9C\x00\x00[C\x00\x00\x01D\x00\x00\xb6B\x00\x00\x02D\x00\x008C\x00\x00\x0fC\x00\x80\x83C\x00\x00\x14C\x00\x00\x0bC\x00\x00\xfdC\x00\x80\xedC\x00\x00yC\x00\xc0\x0eD\x00\x80\xa7C\x00\x00\xa0B\x00\x80\x96C\x00\x00\x19C\x00\x00\xaaC\x00\x00\xaeB\x00\x00\xfbC\x00\x00oC\x00@\x03D\x00\x00\xc5C\x00\x80\xf9C\x00\xc0\x08D\x00\x80\xecC\x00\x00\xe8C\x00\x00\xd0C\x00\x00\x00D\x00\xc0\x02D\x00\x00\x0fD\x00\x00LC\x00\x00\x08D\x00\x80\xd7C\x00\x00TC\x00\x00\x88C\x00\x80\xe8C\x00\x00\x8dC\x00\x00HC\x00\x00\x90A\x00\x00\xd4B\x00\x00\xe0B\x00\x00\xabC\x00\x00\x97C\x00\x80\xb6C\x00\x00\x13D\x00\x80\xacC\x00\x80\xf4C\x00\x00\xf3C\x00\x00\x07D\x00\x80\xf8C\x00\x00~C\x00\x00\xeaC\x00\x80\xf7C\x00\x00\xecB\x00@\x15D\x00\x80\xaaC\x00\x80\x14D\x00\x00\xa8A\x00\x80\xfeC\x00\x80\xb5C\x00\x00\x80@\x00\x00\xe5C\x00\x80\xcdC\x00\x007C\x00\x00\xf0A\x00\x00\xfeB\x00\x00\x9eB\x00\x80\xeaC\x00\x80\xafC\x00\x80\nD\x00\x00\x99C\x00\x00\xc9C\x00\x00\x9eC\x00@\x12D\x00\x00\xd6B\x00\x00\xcdC\x00\x00\xc4B\x00\x00\x1dC\x00\x00\xefC\x00\xc0\rD\x00\x00YC\x00\x00\x00B\x00\x00\x80C\x00\x80\x85C\x00\x00IC\x00\x00\x88B\x00\x80\xc8C\x00\x00\x9dC\x00\x00PA\x00\x00\xa6B\x00\x80\x00D\x00\x80\xfaC\x00\x00-C\x00\x00lC\x00\x00\xccC\x00\x00\x88A\x00\x00\xe8B\x00\x00\\B\x00\x00\x9aB\x00\x80\xc2C\x00\x00\xa2B\x00\x00\x87C\x00\x00NC\x00\x80\x9dC\x00\x00>C\x00\x80\x12D\x00\x80\xe9C\x00\x00\x0cD\x00\x00\xfaB\x00\x00\xaaB\x00\x00\xe7C\x00\x00 A\x00\x00?C\x00\x00\xe8A\x00\x00\xc4C\x00\x00\x8cC\x00\x00\xe4B\x00\x00\x7fC\x00\x00\x98A\x00\x80\xb8C\x00\x80\xfdC\x00\x00XC\x00\x00\x8aC\x00\x80\xc0C\x00\x00\xb7C\x00\x80\xb3C\x00\xc0\x05D\x00\x00hC\x00\x00\x9cB\x00\x00\x15C\x00\x00!C\x00\x80\x89C\x00\x80\x82C\x00\x00\xbfC\x00\x00\x03C\x00\x00\xe0@\x00\x80\xbfC\x00@\x0fD\x00\x00\xd2C\x00\x00\xe3C\x00\x00\xa8C\x00\x00\xe0A\x00\x00(B\x00\x00\xa8B\x00\x00^C\x00\x00kC\x00\x00\x0eD\x00\x80\xc7C\x00\x80\x02D\x00\x00|B\x00\x00\xfcC\x00\x00\x0cB\x00\x00\tC\x00\x00\xcbC\x00\x00\x1cB\x00\x00\xbcC\x00\x00{C\x00\x00\x00A\x00\x00\x04C\x00\x00OC\x00\x00\xbcB\x00\x80\x08D\x00\x00\xe6B\x00\x80\xf3C\x00\x80\xfcC\x00\x00\xd5C\x00\x00\x91C\x00\x00\xaeC\x00\x00\x94C\x00@\x14D\x00\x80\x07D\x00\x80\xc3C\x00\x80\tD\x00\x80\x9cC\x00\x00\nD\x00\x00\x14B\x00\x80\xd1C\x00\x00\x1bC\x00\x00\xa1C\x00\x00\xf7C\x00\x00\xc8A\x00\x00\xe9C\x00\x00\x86C\x00\xc0\x13D\x00\x00"C\x00\x000A\x00\x00\rC\x00\x004B\x00\x80\x9eC\x00\x00 B\x00\x00rC\x00\x80\x0cD\x00\x00\xa0C\x00\x00\xc6C\x00\x80\x87C\x00\x00\xd8C\x00\x80\x10D\x00\x80\x91C\x00\x80\xdcC\x00\x00lB\x00\x00\x00@\x00\x00WC\x00\x00\x90C\x00\xc0\x07D\x00\x80\x8dC\x00\x00\xfcB\x00\x80\x06D\x00\x00\x06D\x00\x00\x0bD\x00\x80\x97C\x00\x00_C\x00\x00EC\x00\x00pB\x00\x00\xd4C\x00\x00\x10B\x00\xc0\x10D\x00\x00\xdeC\x00@\x06D\x00\x00\x86B\x00\x00QC\x00\x00\x82B\x00\x80\x88C\x00\x00\xf8C\x00\x00\xdbC\x00\x80\x99C\x00\x00\x05C\x00\x00\xb8C\x00\x002C\x00\x00\xecC\x00\x00DC\x00\x00\'C\x00\x00@@\x00\x00`C\x00\x00\xeaB\x00\x80\xe0C\x00\x00\x8fC\x00\x80\xd2C\x00\x00\xc0A\x00\x00\xb2B\x00@\x10D\x00\x80\xcfC\x00\x80\xe2C\x00\x00\x03D\x00\x00\xd6C\x00\x80\xf2C\x00\x00\xcfC\x00\x00DB\x00\xc0\x01D\x00\x00\xebC\x00\x00\x00\x00\x00\x00\xf0B\x00\x008B\x00\x004C\x00\x00KC\x00\x00\xb1C\x00\x80\xccC\x00\x80\x15D\x00\x00\tD\x00\x00\xf5C\x00\x00\x96B\x00\x005C\x00\x80\xa0C\x00\x00\x02C\x00\x80\xa6C\x00\x80\x0fD\x00\x00\x1eC\x00\x00\xfaC\x00@\x01D\x00\x00\x05D\x00\x80\xe1C\x00\x00\xc0@\x00\x00\x84C\x00\x00\xbbC\x00@\x13D\x00\x80\xb7C\x00\x80\xe4C\x00\x80\xd6C\x00\x00%C\x00\x00\x85C\x00\x80\xc6C\x00\x80\x04D\x00\x00<C\x00@\x02D\x00\x80\x81C\x00\x80\xd8C\x00\x00\xb9C\x00\x00JC\x00\xc0\x03D\x00\x80\x93C\x00\x80\xf0C\x00\x00\x80A\x00\x00\xdcB\x00\x00tB\x00\x00\xb0A\x00\x00\xa5C\x00\x80\xa2C\x00\x80\xd3C\x00\x00\xd3C\x00\x00\xd9C\x00\x00fC\x00\x00gC\x00\x000B\x00\x00\xd2B\x00\x80\xdeC\x00\x00\xacC\x00@\x08D\x00\x00\xc8C\x00\x00\xf0C\x00\x00xC\x00\x00\x90B\x00\x80\xf6C\x00\x00\x13C\x00\x00\x96C\x00\x00\x8eC\x00\x80\x9aC\x00\x00\x10D\x00\x80\x05D\x00\x00\xceC\x00\x009C\x00\x80\xa8C\x00\x00,C'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4864
(dp4865
S'isNumeric'
p4866
(dp4867
g4855
I01
sg4862
I01
ssS'trials'
p4868
g4842
sS'dataTypes'
p4869
(lp4870
g4855
ag4862
asS'dataShape'
p4871
(lp4872
I600
aI1
asbsS'method'
p4873
S'random'
p4874
sS'sequenceIndices'
p4875
cnumpy.core.multiarray
_reconstruct
p4876
(g4858
(I0
tS'b'
tRp4877
(I1
(I600
I1
tg45
I01
S'\x10\x02\x00\x00\x07\x00\x00\x00\xdf\x01\x00\x00\xfe\x01\x00\x00S\x01\x00\x00L\x00\x00\x00%\x02\x00\x00\x9e\x01\x00\x00\xb4\x01\x00\x00\x18\x00\x00\x00\x86\x01\x00\x00\xd0\x01\x00\x009\x00\x00\x00o\x01\x00\x00\xf5\x00\x00\x00:\x00\x00\x009\x02\x00\x00v\x01\x00\x00=\x01\x00\x00\x8d\x01\x00\x00\xf2\x00\x00\x00P\x01\x00\x00<\x02\x00\x00r\x00\x00\x00\x04\x02\x00\x00\xcb\x01\x00\x00v\x00\x00\x00\xae\x00\x00\x00\xa4\x01\x00\x00\x88\x01\x00\x00W\x01\x00\x00\x8a\x00\x00\x00h\x01\x00\x00\x08\x01\x00\x00\x80\x00\x00\x00\xae\x01\x00\x00\xed\x01\x00\x00\xc6\x01\x00\x00\xb5\x00\x00\x00\xb1\x01\x00\x00\xd4\x01\x00\x00\xe5\x00\x00\x00\xa5\x01\x00\x00U\x00\x00\x00D\x02\x00\x00\xd2\x01\x00\x00\x12\x02\x00\x00\x9f\x00\x00\x00\x11\x01\x00\x00\r\x02\x00\x001\x00\x00\x00\xb3\x00\x00\x00C\x00\x00\x00\x1d\x00\x00\x00\xe3\x00\x00\x00x\x01\x00\x00b\x00\x00\x00\x96\x00\x00\x00S\x00\x00\x00\xde\x01\x00\x00\xeb\x01\x00\x00;\x02\x00\x00\xca\x00\x00\x00\xac\x01\x00\x00Z\x00\x00\x00\xf3\x01\x00\x00\xbf\x00\x00\x00\xf1\x01\x00\x00l\x01\x00\x00\xbb\x00\x00\x00;\x00\x00\x002\x00\x00\x00L\x02\x00\x00\x84\x00\x00\x00>\x00\x00\x00\x1a\x02\x00\x00\x94\x00\x00\x00y\x01\x00\x00\x97\x01\x00\x00Y\x01\x00\x00$\x01\x00\x00{\x01\x00\x00\xac\x00\x00\x00p\x01\x00\x00\xa6\x01\x00\x00\x84\x01\x00\x00\xf1\x00\x00\x00(\x01\x00\x00\x11\x00\x00\x00\x05\x02\x00\x00R\x00\x00\x00\x18\x01\x00\x00\xd8\x00\x00\x00\xd9\x00\x00\x00\xb7\x01\x00\x00\r\x00\x00\x00F\x00\x00\x00\x0c\x01\x00\x00c\x01\x00\x00\x1a\x00\x00\x00Y\x00\x00\x00H\x00\x00\x00*\x00\x00\x00\xab\x00\x00\x00\xce\x00\x00\x00E\x02\x00\x00>\x01\x00\x00a\x01\x00\x00\xc8\x00\x00\x00\x16\x00\x00\x00:\x02\x00\x00\xde\x00\x00\x00?\x01\x00\x00\xf7\x00\x00\x00\x8b\x01\x00\x00\xb9\x01\x00\x00w\x01\x00\x00\x00\x02\x00\x00L\x01\x00\x00\xcf\x00\x00\x00\x11\x02\x00\x00\xfa\x00\x00\x00\xb6\x00\x00\x00\xa1\x00\x00\x00J\x00\x00\x00\x83\x01\x00\x00\xe4\x01\x00\x00X\x01\x00\x00\x0f\x00\x00\x00\x0e\x01\x00\x00\x1d\x02\x00\x00\x9d\x01\x00\x00\xb5\x01\x00\x00\xf8\x01\x00\x00\x1b\x00\x00\x00\xf3\x00\x00\x00\xaf\x00\x00\x00\xaf\x01\x00\x00\xe1\x00\x00\x00\x1e\x01\x00\x00\xc9\x00\x00\x00\xd1\x01\x00\x006\x00\x00\x00\x1b\x01\x00\x00\x02\x00\x00\x00_\x00\x00\x00h\x00\x00\x00N\x02\x00\x00\x1d\x01\x00\x00\x98\x01\x00\x00\xd6\x00\x00\x00\xe0\x00\x00\x00m\x00\x00\x00&\x01\x00\x00\x00\x01\x00\x00\xc8\x01\x00\x00.\x00\x00\x00d\x01\x00\x00 \x02\x00\x00y\x00\x00\x00\x05\x00\x00\x00\x99\x01\x00\x00\xcf\x01\x00\x00\xfc\x00\x00\x00(\x00\x00\x00,\x02\x00\x00\xf4\x00\x00\x00\xfd\x01\x00\x00&\x00\x00\x00\xe9\x00\x00\x00\t\x01\x00\x00\x17\x00\x00\x00W\x02\x00\x00s\x01\x00\x00\x81\x00\x00\x00\xd3\x00\x00\x00\xd7\x00\x00\x00-\x00\x00\x00\xfa\x01\x00\x00\xa0\x00\x00\x00\x13\x02\x00\x00\x1b\x02\x00\x00\xc5\x00\x00\x00V\x01\x00\x00\x1a\x01\x00\x00U\x02\x00\x00\x03\x01\x00\x00 \x00\x00\x000\x02\x00\x00\xdc\x00\x00\x00\x7f\x01\x00\x00\x87\x01\x00\x00\x88\x00\x00\x00\n\x01\x00\x00\x8e\x00\x00\x00`\x00\x00\x00\xfc\x01\x00\x00\xea\x01\x00\x00\xb1\x00\x00\x00\x9d\x00\x00\x00<\x01\x00\x00k\x01\x00\x005\x02\x00\x00\x14\x02\x00\x005\x01\x00\x00\x0b\x01\x00\x00}\x01\x00\x00\xb6\x01\x00\x00\xa8\x00\x00\x00\xf2\x01\x00\x00\x87\x00\x00\x00W\x00\x00\x008\x01\x00\x00\x89\x00\x00\x00\xc6\x00\x00\x00\xe0\x01\x00\x00\x90\x01\x00\x00g\x01\x00\x00\xc1\x00\x00\x00\x16\x01\x00\x00\xec\x00\x00\x00\x1c\x00\x00\x00\xa7\x01\x00\x00\xe9\x01\x00\x00\xff\x01\x00\x00\x0b\x00\x00\x00I\x00\x00\x00\xcb\x00\x00\x00\xe8\x00\x00\x00\x10\x00\x00\x00B\x02\x00\x00C\x02\x00\x00\x96\x01\x00\x00\xeb\x00\x00\x000\x00\x00\x00\xa8\x01\x00\x00t\x01\x00\x00\x85\x00\x00\x00\x02\x01\x00\x00*\x01\x00\x00\x01\x00\x00\x00\xd0\x00\x00\x00\xd5\x01\x00\x00\x01\x01\x00\x00<\x00\x00\x00\xe7\x00\x00\x00A\x00\x00\x00\xa4\x00\x00\x00K\x02\x00\x00!\x01\x00\x00s\x00\x00\x00\xb3\x01\x00\x00\xdb\x00\x00\x00\xda\x00\x00\x00I\x01\x00\x00\x8c\x01\x00\x00i\x01\x00\x00\x04\x01\x00\x00\x12\x00\x00\x002\x02\x00\x00\x92\x00\x00\x00\x9b\x01\x00\x00\xe2\x00\x00\x00\x1c\x01\x00\x00&\x02\x00\x00\xc7\x00\x00\x00-\x02\x00\x00j\x01\x00\x00\xcd\x01\x00\x003\x00\x00\x00|\x01\x00\x00\xd9\x01\x00\x009\x01\x00\x00\xf4\x01\x00\x00{\x00\x00\x00\x9a\x01\x00\x00\x91\x01\x00\x00\x1e\x00\x00\x00\x7f\x00\x00\x00\xc2\x00\x00\x00\x8a\x01\x00\x00\n\x00\x00\x00;\x01\x00\x00\xe3\x01\x00\x00P\x02\x00\x00\xaa\x00\x00\x00\x02\x02\x00\x005\x00\x00\x00\xe1\x01\x00\x00\x14\x01\x00\x00\xbd\x01\x00\x00\xdc\x01\x00\x00,\x00\x00\x00\x07\x01\x00\x00|\x00\x00\x007\x02\x00\x00\xbf\x01\x00\x00\xb2\x00\x00\x00k\x00\x00\x00=\x00\x00\x00O\x02\x00\x00%\x01\x00\x00A\x01\x00\x00\xe8\x01\x00\x00\x9e\x00\x00\x00\x04\x00\x00\x00]\x01\x00\x00\xf7\x01\x00\x00M\x00\x00\x00Q\x02\x00\x00\xdf\x00\x00\x00$\x00\x00\x00\xd1\x00\x00\x00\xc4\x01\x00\x00n\x01\x00\x00~\x01\x00\x00_\x01\x00\x00\xd3\x01\x00\x00\xf0\x00\x00\x00\x05\x01\x00\x00\xd7\x01\x00\x00\x1c\x02\x00\x00\xc9\x01\x00\x00z\x00\x00\x00e\x00\x00\x00>\x02\x00\x00\x82\x00\x00\x00B\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00=\x02\x00\x00\xff\x00\x00\x00\r\x01\x00\x00\x1e\x02\x00\x00P\x00\x00\x00#\x01\x00\x00\xa3\x01\x00\x00V\x02\x00\x00[\x00\x00\x00\xc4\x00\x00\x00\'\x01\x00\x00N\x01\x00\x00@\x01\x00\x00\xa2\x00\x00\x00G\x02\x00\x00D\x01\x00\x00\xcc\x00\x00\x00q\x00\x00\x00\xbe\x01\x00\x00\xea\x00\x00\x00w\x00\x00\x00[\x01\x00\x00\x86\x00\x00\x00G\x00\x00\x00\x15\x02\x00\x00\x9c\x00\x00\x00\xb9\x00\x00\x00o\x00\x00\x00\x90\x00\x00\x00\x94\x01\x00\x00O\x00\x00\x00\xf6\x00\x00\x00~\x00\x00\x00R\x01\x00\x00\xe6\x00\x00\x00B\x01\x00\x00\x93\x01\x00\x00)\x02\x00\x00\xf9\x01\x00\x00\x8e\x01\x00\x004\x02\x00\x00\xfb\x00\x00\x004\x00\x00\x00V\x00\x00\x00\'\x02\x00\x00\\\x00\x00\x00\xb2\x01\x00\x00t\x00\x00\x00}\x00\x00\x00\x10\x01\x00\x00\xfe\x00\x00\x00n\x00\x00\x00\x9c\x01\x00\x00\x9f\x01\x00\x00\xf9\x00\x00\x00\x92\x01\x00\x00\xd4\x00\x00\x00\x8d\x00\x00\x00g\x00\x00\x00z\x01\x00\x00T\x00\x00\x00\xc2\x01\x00\x00\x89\x01\x00\x00\x19\x00\x00\x00,\x01\x00\x00?\x00\x00\x00\xd8\x01\x00\x00.\x02\x00\x00\xc3\x00\x00\x00\xaa\x01\x00\x00I\x02\x00\x00m\x01\x00\x00^\x01\x00\x00i\x00\x00\x00\x06\x00\x00\x00c\x00\x00\x00\xb0\x01\x00\x00\xa5\x00\x00\x00u\x01\x00\x00\x16\x02\x00\x00b\x01\x00\x00U\x01\x00\x00T\x02\x00\x00N\x00\x00\x00\x0c\x02\x00\x00\x07\x02\x00\x001\x01\x00\x00!\x00\x00\x00\x0f\x01\x00\x00\xc7\x01\x00\x00\xa1\x01\x00\x00\x03\x02\x00\x00@\x02\x00\x00?\x02\x00\x00\xec\x01\x00\x00\x03\x00\x00\x00\xbc\x01\x00\x00\x93\x00\x00\x00\n\x02\x00\x00+\x02\x00\x00K\x00\x00\x007\x01\x00\x00\xda\x01\x00\x003\x02\x00\x00A\x02\x00\x00\x15\x01\x00\x00\xa9\x00\x00\x00D\x00\x00\x00\xf6\x01\x00\x007\x00\x00\x00\xa7\x00\x00\x00\xdd\x01\x00\x00\xdd\x00\x00\x00j\x00\x00\x00\xef\x01\x00\x00F\x02\x00\x00\x00\x00\x00\x00]\x00\x00\x00/\x00\x00\x00\x01\x02\x00\x00\xcd\x00\x00\x00$\x02\x00\x00E\x00\x00\x00\x08\x02\x00\x00\xa2\x01\x00\x00\x99\x00\x00\x00\xb7\x00\x00\x00*\x02\x00\x00T\x01\x00\x00\x13\x01\x00\x00\x8b\x00\x00\x00\xb4\x00\x00\x00\x85\x01\x00\x00@\x00\x00\x000\x01\x00\x00:\x01\x00\x00\xcc\x01\x00\x00\x81\x01\x00\x00J\x01\x00\x00Z\x01\x00\x00\x0f\x02\x00\x00X\x00\x00\x00\xfb\x01\x00\x00/\x01\x00\x00\xd2\x00\x00\x00 \x01\x00\x00f\x00\x00\x00\xed\x00\x00\x00e\x01\x00\x008\x00\x00\x00J\x02\x00\x008\x02\x00\x00\x15\x00\x00\x00)\x00\x00\x00+\x00\x00\x00\x0b\x02\x00\x00F\x01\x00\x00\xba\x01\x00\x00\t\x00\x00\x00E\x01\x00\x00\x19\x02\x00\x00#\x00\x00\x00\xfd\x00\x00\x00M\x02\x00\x00\xca\x01\x00\x00K\x01\x00\x00\xf5\x01\x00\x00H\x01\x00\x00\xb8\x00\x00\x00-\x01\x00\x00!\x02\x00\x00r\x01\x00\x00)\x01\x00\x00\xad\x00\x00\x00\xad\x01\x00\x00\xbb\x01\x00\x00\x1f\x01\x00\x00\x8f\x01\x00\x00\xba\x00\x00\x00Q\x01\x00\x00\x14\x00\x00\x00x\x00\x00\x002\x01\x00\x00\xbc\x00\x00\x00q\x01\x00\x00\x98\x00\x00\x00\x17\x01\x00\x00"\x02\x00\x00\x08\x00\x00\x00\x0e\x02\x00\x00\x19\x01\x00\x001\x02\x00\x00\xab\x01\x00\x003\x01\x00\x00\t\x02\x00\x00+\x01\x00\x00Q\x00\x00\x006\x02\x00\x00\x83\x00\x00\x00\xa3\x00\x00\x00/\x02\x00\x00\xbd\x00\x00\x00#\x02\x00\x00\x0c\x00\x00\x00S\x02\x00\x00\x95\x01\x00\x00\xe6\x01\x00\x00\xf0\x01\x00\x00\xe5\x01\x00\x00\xf8\x00\x00\x00G\x01\x00\x00\x8f\x00\x00\x00\xc1\x01\x00\x00\xe2\x01\x00\x006\x01\x00\x00H\x02\x00\x00\xb8\x01\x00\x00.\x01\x00\x00\x18\x02\x00\x00u\x00\x00\x00\xc3\x01\x00\x00p\x00\x00\x00\xc5\x01\x00\x00\x91\x00\x00\x00\\\x01\x00\x00\xb0\x00\x00\x00\xe7\x01\x00\x00\x8c\x00\x00\x00\xbe\x00\x00\x00\x95\x00\x00\x00\x82\x01\x00\x00\xef\x00\x00\x00\xd6\x01\x00\x00\'\x00\x00\x00\x12\x01\x00\x00\x1f\x00\x00\x00a\x00\x00\x00f\x01\x00\x00\xa9\x01\x00\x00\xc0\x00\x00\x00\x0e\x00\x00\x00"\x01\x00\x004\x01\x00\x00\xa0\x01\x00\x00\x1f\x02\x00\x00\x97\x00\x00\x00R\x02\x00\x00\x06\x02\x00\x00\xdb\x01\x00\x00\xee\x01\x00\x00%\x00\x00\x00^\x00\x00\x00l\x00\x00\x00\x06\x01\x00\x00\xd5\x00\x00\x00`\x01\x00\x00\x80\x01\x00\x00\x13\x00\x00\x00C\x01\x00\x00(\x02\x00\x00\xee\x00\x00\x00\xce\x01\x00\x00\xa6\x00\x00\x00\xc0\x01\x00\x00O\x01\x00\x00d\x00\x00\x00\xe4\x00\x00\x00M\x01\x00\x00\x17\x02\x00\x00"\x00\x00\x00'
tbsS'finished'
p4878
I01
sS'nReps'
p4879
I1
sS'nRemaining'
p4880
I-1
sS'trialList'
p4881
(lp4882
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asS'seed'
p4883
NsS'thisIndex'
p4884
g4837
sS'thisN'
p4885
I600
sS'thisTrialN'
p4886
I0
sS'nTotal'
p4887
I600
sS'_warnUseOfNext'
p4888
I01
sbasS'savePickle'
p4889
I01
sb.