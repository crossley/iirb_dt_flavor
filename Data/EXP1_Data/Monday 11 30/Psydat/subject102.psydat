ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject102
p8
sS'runtimeInfo'
p9
NsS'name'
p10
Vsubject 102
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Total correct'
p18
aS'Percent correct'
p19
aS'Button switch shown?'
p20
aS'Fast?'
p21
asS'autoLog'
p22
I01
sS'extraInfo'
p23
(dp24
S'gender'
p25
VFemale
p26
sS'age'
p27
V20
p28
ssS'loopsUnfinished'
p29
(lp30
sS'saveWideText'
p31
I01
sS'thisEntry'
p32
(dp33
sS'version'
p34
S''
sS'_paramNamesSoFar'
p35
(lp36
sS'entries'
p37
(lp38
(dp39
g16
(lp40
S'k'
asS'.thisTrial'
p41
I571
sS'.thisRepN'
p42
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p43
I0
sS'.thisN'
p44
I0
sS'.thisIndex'
p45
cnumpy.core.multiarray
scalar
p46
(cnumpy
dtype
p47
(S'i4'
I0
I1
tRp48
(I3
S'<'
NNNI-1
I-1
I0
tbS';\x02\x00\x00'
tRp49
sg15
(lp50
S'k'
asg17
S'Y'
sg14
I1
sa(dp51
g16
(lp52
S'd'
asg41
I107
sS'.thisRepN'
p53
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p54
I1
sS'.thisN'
p55
I1
sS'.thisIndex'
p56
g46
(g48
S'k\x00\x00\x00'
tRp57
sg15
(lp58
S'd'
asg17
S'Y'
sg14
I1
sa(dp59
g16
(lp60
S'd'
asg41
I182
sS'.thisRepN'
p61
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p62
I2
sS'.thisN'
p63
I2
sS'.thisIndex'
p64
g46
(g48
S'\xb6\x00\x00\x00'
tRp65
sg15
(lp66
S'k'
asg17
S'N'
sg14
I1
sa(dp67
g16
(lp68
S'd'
asg41
I189
sS'.thisRepN'
p69
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p70
I3
sS'.thisN'
p71
I3
sS'.thisIndex'
p72
g46
(g48
S'\xbd\x00\x00\x00'
tRp73
sg15
(lp74
S'k'
asg17
S'N'
sg14
I1
sa(dp75
g16
(lp76
S'k'
asg41
I578
sS'.thisRepN'
p77
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p78
I4
sS'.thisN'
p79
I4
sS'.thisIndex'
p80
g46
(g48
S'B\x02\x00\x00'
tRp81
sg15
(lp82
S'd'
asg17
S'N'
sg14
I1
sa(dp83
g16
(lp84
S'k'
asg41
I417
sS'.thisRepN'
p85
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p86
I5
sS'.thisN'
p87
I5
sS'.thisIndex'
p88
g46
(g48
S'\xa1\x01\x00\x00'
tRp89
sg15
(lp90
S'd'
asg17
S'N'
sg14
I1
sa(dp91
g16
(lp92
S'k'
asg41
I319
sS'.thisRepN'
p93
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p94
I6
sS'.thisN'
p95
I6
sS'.thisIndex'
p96
g46
(g48
S'?\x01\x00\x00'
tRp97
sg15
(lp98
S'k'
asg17
S'Y'
sg14
I1
sa(dp99
g16
(lp100
S'd'
asg41
I14
sS'.thisRepN'
p101
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p102
I7
sS'.thisN'
p103
I7
sS'.thisIndex'
p104
g46
(g48
S'\x0e\x00\x00\x00'
tRp105
sg15
(lp106
S'k'
asg17
S'N'
sg14
I1
sa(dp107
g16
(lp108
S'd'
asg41
I86
sS'.thisRepN'
p109
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p110
I8
sS'.thisN'
p111
I8
sS'.thisIndex'
p112
g46
(g48
S'V\x00\x00\x00'
tRp113
sg15
(lp114
S'k'
asg17
S'N'
sg14
I1
sa(dp115
g16
(lp116
S'k'
asg41
I556
sS'.thisRepN'
p117
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p118
I9
sS'.thisN'
p119
I9
sS'.thisIndex'
p120
g46
(g48
S',\x02\x00\x00'
tRp121
sg15
(lp122
S'd'
asg17
S'N'
sg14
I1
sa(dp123
g16
(lp124
S'k'
asg41
I565
sS'.thisRepN'
p125
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p126
I10
sS'.thisN'
p127
I10
sS'.thisIndex'
p128
g46
(g48
S'5\x02\x00\x00'
tRp129
sg15
(lp130
S'k'
asg17
S'Y'
sg14
I1
sa(dp131
g16
(lp132
S'd'
asg41
I31
sS'.thisRepN'
p133
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p134
I11
sS'.thisN'
p135
I11
sS'.thisIndex'
p136
g46
(g48
S'\x1f\x00\x00\x00'
tRp137
sg15
(lp138
S'k'
asg17
S'N'
sg14
I1
sa(dp139
g16
(lp140
S'd'
asg41
I72
sS'.thisRepN'
p141
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p142
I12
sS'.thisN'
p143
I12
sS'.thisIndex'
p144
g46
(g48
S'H\x00\x00\x00'
tRp145
sg15
(lp146
S'd'
asg17
S'Y'
sg14
I1
sa(dp147
g16
(lp148
S'd'
asg41
I186
sS'.thisRepN'
p149
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p150
I13
sS'.thisN'
p151
I13
sS'.thisIndex'
p152
g46
(g48
S'\xba\x00\x00\x00'
tRp153
sg15
(lp154
S'k'
asg17
S'N'
sg14
I1
sa(dp155
g16
(lp156
S'k'
asg41
I476
sS'.thisRepN'
p157
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p158
I14
sS'.thisN'
p159
I14
sS'.thisIndex'
p160
g46
(g48
S'\xdc\x01\x00\x00'
tRp161
sg15
(lp162
S'd'
asg17
S'N'
sg14
I1
sa(dp163
g16
(lp164
S'd'
asg41
I191
sS'.thisRepN'
p165
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p166
I15
sS'.thisN'
p167
I15
sS'.thisIndex'
p168
g46
(g48
S'\xbf\x00\x00\x00'
tRp169
sg15
(lp170
S'k'
asg17
S'N'
sg14
I1
sa(dp171
g16
(lp172
S'k'
asg41
I371
sS'.thisRepN'
p173
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p174
I16
sS'.thisN'
p175
I16
sS'.thisIndex'
p176
g46
(g48
S's\x01\x00\x00'
tRp177
sg15
(lp178
S'd'
asg17
S'N'
sg14
I1
sa(dp179
g16
(lp180
S'k'
asg41
I376
sS'.thisRepN'
p181
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p182
I17
sS'.thisN'
p183
I17
sS'.thisIndex'
p184
g46
(g48
S'x\x01\x00\x00'
tRp185
sg15
(lp186
S'k'
asg17
S'Y'
sg14
I1
sa(dp187
g16
(lp188
S'k'
asg41
I517
sS'.thisRepN'
p189
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p190
I18
sS'.thisN'
p191
I18
sS'.thisIndex'
p192
g46
(g48
S'\x05\x02\x00\x00'
tRp193
sg15
(lp194
S'k'
asg17
S'Y'
sg14
I1
sa(dp195
g16
(lp196
S'k'
asg41
I323
sS'.thisRepN'
p197
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p198
I19
sS'.thisN'
p199
I19
sS'.thisIndex'
p200
g46
(g48
S'C\x01\x00\x00'
tRp201
sg15
(lp202
S'k'
asg17
S'Y'
sg14
I1
sa(dp203
g16
(lp204
S'd'
asg41
I180
sS'.thisRepN'
p205
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p206
I20
sS'.thisN'
p207
I20
sS'.thisIndex'
p208
g46
(g48
S'\xb4\x00\x00\x00'
tRp209
sg15
(lp210
S'd'
asg17
S'Y'
sg14
I1
sa(dp211
g16
(lp212
S'd'
asg41
I5
sS'.thisRepN'
p213
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p214
I21
sS'.thisN'
p215
I21
sS'.thisIndex'
p216
g46
(g48
S'\x05\x00\x00\x00'
tRp217
sg15
(lp218
S'k'
asg17
S'N'
sg14
I1
sa(dp219
g16
(lp220
S'k'
asg41
I540
sS'.thisRepN'
p221
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p222
I22
sS'.thisN'
p223
I22
sS'.thisIndex'
p224
g46
(g48
S'\x1c\x02\x00\x00'
tRp225
sg15
(lp226
S'k'
asg17
S'Y'
sg14
I1
sa(dp227
g16
(lp228
S'd'
asg41
I50
sS'.thisRepN'
p229
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p230
I23
sS'.thisN'
p231
I23
sS'.thisIndex'
p232
g46
(g48
S'2\x00\x00\x00'
tRp233
sg15
(lp234
S'd'
asg17
S'Y'
sg14
I1
sa(dp235
g16
(lp236
S'k'
asg41
I581
sS'.thisRepN'
p237
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p238
I24
sS'.thisN'
p239
I24
sS'.thisIndex'
p240
g46
(g48
S'E\x02\x00\x00'
tRp241
sg15
(lp242
S'd'
asg17
S'N'
sg14
I1
sa(dp243
g16
(lp244
S'k'
asg41
I481
sS'.thisRepN'
p245
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p246
I25
sS'.thisN'
p247
I25
sS'.thisIndex'
p248
g46
(g48
S'\xe1\x01\x00\x00'
tRp249
sg15
(lp250
S'k'
asg17
S'Y'
sg14
I1
sa(dp251
g16
(lp252
S'k'
asg41
I399
sS'.thisRepN'
p253
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p254
I26
sS'.thisN'
p255
I26
sS'.thisIndex'
p256
g46
(g48
S'\x8f\x01\x00\x00'
tRp257
sg15
(lp258
S'd'
asg17
S'N'
sg14
I1
sa(dp259
g16
(lp260
S'd'
asg41
I135
sS'.thisRepN'
p261
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p262
I27
sS'.thisN'
p263
I27
sS'.thisIndex'
p264
g46
(g48
S'\x87\x00\x00\x00'
tRp265
sg15
(lp266
S'k'
asg17
S'N'
sg14
I1
sa(dp267
g16
(lp268
S'k'
asg41
I451
sS'.thisRepN'
p269
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p270
I28
sS'.thisN'
p271
I28
sS'.thisIndex'
p272
g46
(g48
S'\xc3\x01\x00\x00'
tRp273
sg15
(lp274
S'd'
asg17
S'N'
sg14
I1
sa(dp275
g16
(lp276
S'k'
asg41
I307
sS'.thisRepN'
p277
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p278
I29
sS'.thisN'
p279
I29
sS'.thisIndex'
p280
g46
(g48
S'3\x01\x00\x00'
tRp281
sg15
(lp282
S'k'
asg17
S'Y'
sg14
I1
sa(dp283
g16
(lp284
S'k'
asg41
I490
sS'.thisRepN'
p285
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p286
I30
sS'.thisN'
p287
I30
sS'.thisIndex'
p288
g46
(g48
S'\xea\x01\x00\x00'
tRp289
sg15
(lp290
S'k'
asg17
S'Y'
sg14
I1
sa(dp291
g16
(lp292
S'd'
asg41
I243
sS'.thisRepN'
p293
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p294
I31
sS'.thisN'
p295
I31
sS'.thisIndex'
p296
g46
(g48
S'\xf3\x00\x00\x00'
tRp297
sg15
(lp298
S'k'
asg17
S'N'
sg14
I1
sa(dp299
g16
(lp300
S'd'
asg41
I134
sS'.thisRepN'
p301
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p302
I32
sS'.thisN'
p303
I32
sS'.thisIndex'
p304
g46
(g48
S'\x86\x00\x00\x00'
tRp305
sg15
(lp306
S'k'
asg17
S'N'
sg14
I1
sa(dp307
g16
(lp308
S'k'
asg41
I357
sS'.thisRepN'
p309
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p310
I33
sS'.thisN'
p311
I33
sS'.thisIndex'
p312
g46
(g48
S'e\x01\x00\x00'
tRp313
sg15
(lp314
S'd'
asg17
S'N'
sg14
I1
sa(dp315
g16
(lp316
S'd'
asg41
I229
sS'.thisRepN'
p317
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p318
I34
sS'.thisN'
p319
I34
sS'.thisIndex'
p320
g46
(g48
S'\xe5\x00\x00\x00'
tRp321
sg15
(lp322
S'k'
asg17
S'N'
sg14
I1
sa(dp323
g16
(lp324
S'd'
asg41
I145
sS'.thisRepN'
p325
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p326
I35
sS'.thisN'
p327
I35
sS'.thisIndex'
p328
g46
(g48
S'\x91\x00\x00\x00'
tRp329
sg15
(lp330
S'k'
asg17
S'N'
sg14
I1
sa(dp331
g16
(lp332
S'd'
asg41
I270
sS'.thisRepN'
p333
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p334
I36
sS'.thisN'
p335
I36
sS'.thisIndex'
p336
g46
(g48
S'\x0e\x01\x00\x00'
tRp337
sg15
(lp338
S'd'
asg17
S'Y'
sg14
I1
sa(dp339
g16
(lp340
S'd'
asg41
I41
sS'.thisRepN'
p341
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p342
I37
sS'.thisN'
p343
I37
sS'.thisIndex'
p344
g46
(g48
S')\x00\x00\x00'
tRp345
sg15
(lp346
S'd'
asg17
S'Y'
sg14
I1
sa(dp347
g16
(lp348
S'd'
asg41
I154
sS'.thisRepN'
p349
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p350
I38
sS'.thisN'
p351
I38
sS'.thisIndex'
p352
g46
(g48
S'\x9a\x00\x00\x00'
tRp353
sg15
(lp354
S'd'
asg17
S'Y'
sg14
I1
sa(dp355
g16
(lp356
S'd'
asg41
I9
sS'.thisRepN'
p357
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p358
I39
sS'.thisN'
p359
I39
sS'.thisIndex'
p360
g46
(g48
S'\t\x00\x00\x00'
tRp361
sg15
(lp362
S'k'
asg17
S'N'
sg14
I1
sa(dp363
g16
(lp364
S'd'
asg41
I132
sS'.thisRepN'
p365
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p366
I40
sS'.thisN'
p367
I40
sS'.thisIndex'
p368
g46
(g48
S'\x84\x00\x00\x00'
tRp369
sg15
(lp370
S'd'
asg17
S'Y'
sg14
I1
sa(dp371
g16
(lp372
S'k'
asg41
I563
sS'.thisRepN'
p373
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p374
I41
sS'.thisN'
p375
I41
sS'.thisIndex'
p376
g46
(g48
S'3\x02\x00\x00'
tRp377
sg15
(lp378
S'k'
asg17
S'Y'
sg14
I1
sa(dp379
g16
(lp380
S'd'
asg41
I125
sS'.thisRepN'
p381
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p382
I42
sS'.thisN'
p383
I42
sS'.thisIndex'
p384
g46
(g48
S'}\x00\x00\x00'
tRp385
sg15
(lp386
S'd'
asg17
S'Y'
sg14
I1
sa(dp387
g16
(lp388
S'd'
asg41
I208
sS'.thisRepN'
p389
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p390
I43
sS'.thisN'
p391
I43
sS'.thisIndex'
p392
g46
(g48
S'\xd0\x00\x00\x00'
tRp393
sg15
(lp394
S'd'
asg17
S'Y'
sg14
I1
sa(dp395
g16
(lp396
S'd'
asg41
I149
sS'.thisRepN'
p397
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p398
I44
sS'.thisN'
p399
I44
sS'.thisIndex'
p400
g46
(g48
S'\x95\x00\x00\x00'
tRp401
sg15
(lp402
S'd'
asg17
S'Y'
sg14
I1
sa(dp403
g16
(lp404
S'd'
asg41
I16
sS'.thisRepN'
p405
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p406
I45
sS'.thisN'
p407
I45
sS'.thisIndex'
p408
g46
(g48
S'\x10\x00\x00\x00'
tRp409
sg15
(lp410
S'd'
asg17
S'Y'
sg14
I1
sa(dp411
g16
(lp412
S'd'
asg41
I274
sS'.thisRepN'
p413
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p414
I46
sS'.thisN'
p415
I46
sS'.thisIndex'
p416
g46
(g48
S'\x12\x01\x00\x00'
tRp417
sg15
(lp418
S'd'
asg17
S'Y'
sg14
I1
sa(dp419
g16
(lp420
S'd'
asg41
I11
sS'.thisRepN'
p421
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p422
I47
sS'.thisN'
p423
I47
sS'.thisIndex'
p424
g46
(g48
S'\x0b\x00\x00\x00'
tRp425
sg15
(lp426
S'd'
asg17
S'Y'
sg14
I1
sa(dp427
g16
(lp428
S'd'
asg41
I273
sS'.thisRepN'
p429
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p430
I48
sS'.thisN'
p431
I48
sS'.thisIndex'
p432
g46
(g48
S'\x11\x01\x00\x00'
tRp433
sg15
(lp434
S'k'
asg17
S'N'
sg14
I1
sa(dp435
g16
(lp436
S'k'
asg41
I583
sS'.thisRepN'
p437
I0
sg25
g26
sg19
S'0'
sS'.thisTrialN'
p438
I49
sS'.thisN'
p439
I49
sS'.thisIndex'
p440
g46
(g48
S'G\x02\x00\x00'
tRp441
sg15
(lp442
S'k'
asg18
I26
sg17
S'Y'
sg14
I1
sg27
g28
sa(dp443
g16
(lp444
S'd'
asg41
I66
sS'.thisRepN'
p445
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p446
I50
sS'.thisN'
p447
I50
sS'.thisIndex'
p448
g46
(g48
S'B\x00\x00\x00'
tRp449
sg15
(lp450
S'k'
asg17
S'N'
sg14
I2
sa(dp451
g16
(lp452
S'd'
asg41
I291
sS'.thisRepN'
p453
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p454
I51
sS'.thisN'
p455
I51
sS'.thisIndex'
p456
g46
(g48
S'#\x01\x00\x00'
tRp457
sg15
(lp458
S'd'
asg17
S'Y'
sg14
I2
sa(dp459
g16
(lp460
S'k'
asg41
I597
sS'.thisRepN'
p461
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p462
I52
sS'.thisN'
p463
I52
sS'.thisIndex'
p464
g46
(g48
S'U\x02\x00\x00'
tRp465
sg15
(lp466
S'k'
asg17
S'Y'
sg14
I2
sa(dp467
g16
(lp468
S'd'
asg41
I153
sS'.thisRepN'
p469
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p470
I53
sS'.thisN'
p471
I53
sS'.thisIndex'
p472
g46
(g48
S'\x99\x00\x00\x00'
tRp473
sg15
(lp474
S'd'
asg17
S'Y'
sg14
I2
sa(dp475
g16
(lp476
S'd'
asg41
I232
sS'.thisRepN'
p477
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p478
I54
sS'.thisN'
p479
I54
sS'.thisIndex'
p480
g46
(g48
S'\xe8\x00\x00\x00'
tRp481
sg15
(lp482
S'd'
asg17
S'Y'
sg14
I2
sa(dp483
g16
(lp484
S'k'
asg41
I377
sS'.thisRepN'
p485
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p486
I55
sS'.thisN'
p487
I55
sS'.thisIndex'
p488
g46
(g48
S'y\x01\x00\x00'
tRp489
sg15
(lp490
S'k'
asg17
S'Y'
sg14
I2
sa(dp491
g16
(lp492
S'k'
asg41
I374
sS'.thisRepN'
p493
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p494
I56
sS'.thisN'
p495
I56
sS'.thisIndex'
p496
g46
(g48
S'v\x01\x00\x00'
tRp497
sg15
(lp498
S'k'
asg17
S'Y'
sg14
I2
sa(dp499
g16
(lp500
S'k'
asg41
I378
sS'.thisRepN'
p501
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p502
I57
sS'.thisN'
p503
I57
sS'.thisIndex'
p504
g46
(g48
S'z\x01\x00\x00'
tRp505
sg15
(lp506
S'k'
asg17
S'Y'
sg14
I2
sa(dp507
g16
(lp508
S'd'
asg41
I204
sS'.thisRepN'
p509
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p510
I58
sS'.thisN'
p511
I58
sS'.thisIndex'
p512
g46
(g48
S'\xcc\x00\x00\x00'
tRp513
sg15
(lp514
S'd'
asg17
S'Y'
sg14
I2
sa(dp515
g16
(lp516
S'k'
asg41
I502
sS'.thisRepN'
p517
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p518
I59
sS'.thisN'
p519
I59
sS'.thisIndex'
p520
g46
(g48
S'\xf6\x01\x00\x00'
tRp521
sg15
(lp522
S'k'
asg17
S'Y'
sg14
I2
sa(dp523
g16
(lp524
S'd'
asg41
I209
sS'.thisRepN'
p525
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p526
I60
sS'.thisN'
p527
I60
sS'.thisIndex'
p528
g46
(g48
S'\xd1\x00\x00\x00'
tRp529
sg15
(lp530
S'd'
asg17
S'Y'
sg14
I2
sa(dp531
g16
(lp532
S'd'
asg41
I275
sS'.thisRepN'
p533
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p534
I61
sS'.thisN'
p535
I61
sS'.thisIndex'
p536
g46
(g48
S'\x13\x01\x00\x00'
tRp537
sg15
(lp538
S'd'
asg17
S'Y'
sg14
I2
sa(dp539
g16
(lp540
S'k'
asg41
I474
sS'.thisRepN'
p541
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p542
I62
sS'.thisN'
p543
I62
sS'.thisIndex'
p544
g46
(g48
S'\xda\x01\x00\x00'
tRp545
sg15
(lp546
S'k'
asg17
S'Y'
sg14
I2
sa(dp547
g16
(lp548
S'k'
asg41
I439
sS'.thisRepN'
p549
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p550
I63
sS'.thisN'
p551
I63
sS'.thisIndex'
p552
g46
(g48
S'\xb7\x01\x00\x00'
tRp553
sg15
(lp554
S'k'
asg17
S'Y'
sg14
I2
sa(dp555
g16
(lp556
S'k'
asg41
I368
sS'.thisRepN'
p557
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p558
I64
sS'.thisN'
p559
I64
sS'.thisIndex'
p560
g46
(g48
S'p\x01\x00\x00'
tRp561
sg15
(lp562
S'k'
asg17
S'Y'
sg14
I2
sa(dp563
g16
(lp564
S'k'
asg41
I449
sS'.thisRepN'
p565
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p566
I65
sS'.thisN'
p567
I65
sS'.thisIndex'
p568
g46
(g48
S'\xc1\x01\x00\x00'
tRp569
sg15
(lp570
S'k'
asg17
S'Y'
sg14
I2
sa(dp571
g16
(lp572
S'd'
asg41
I32
sS'.thisRepN'
p573
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p574
I66
sS'.thisN'
p575
I66
sS'.thisIndex'
p576
g46
(g48
S' \x00\x00\x00'
tRp577
sg15
(lp578
S'd'
asg17
S'Y'
sg14
I2
sa(dp579
g16
(lp580
S'k'
asg41
I413
sS'.thisRepN'
p581
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p582
I67
sS'.thisN'
p583
I67
sS'.thisIndex'
p584
g46
(g48
S'\x9d\x01\x00\x00'
tRp585
sg15
(lp586
S'k'
asg17
S'Y'
sg14
I2
sa(dp587
g16
(lp588
S'd'
asg41
I290
sS'.thisRepN'
p589
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p590
I68
sS'.thisN'
p591
I68
sS'.thisIndex'
p592
g46
(g48
S'"\x01\x00\x00'
tRp593
sg15
(lp594
S'd'
asg17
S'Y'
sg14
I2
sa(dp595
g16
(lp596
S'k'
asg41
I576
sS'.thisRepN'
p597
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p598
I69
sS'.thisN'
p599
I69
sS'.thisIndex'
p600
g46
(g48
S'@\x02\x00\x00'
tRp601
sg15
(lp602
S'k'
asg17
S'Y'
sg14
I2
sa(dp603
g16
(lp604
S'k'
asg41
I389
sS'.thisRepN'
p605
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p606
I70
sS'.thisN'
p607
I70
sS'.thisIndex'
p608
g46
(g48
S'\x85\x01\x00\x00'
tRp609
sg15
(lp610
S'k'
asg17
S'Y'
sg14
I2
sa(dp611
g16
(lp612
S'd'
asg41
I2
sS'.thisRepN'
p613
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p614
I71
sS'.thisN'
p615
I71
sS'.thisIndex'
p616
g46
(g48
S'\x02\x00\x00\x00'
tRp617
sg15
(lp618
S'k'
asg17
S'N'
sg14
I2
sa(dp619
g16
(lp620
S'd'
asg41
I269
sS'.thisRepN'
p621
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p622
I72
sS'.thisN'
p623
I72
sS'.thisIndex'
p624
g46
(g48
S'\r\x01\x00\x00'
tRp625
sg15
(lp626
S'd'
asg17
S'Y'
sg14
I2
sa(dp627
g16
(lp628
S'd'
asg41
I292
sS'.thisRepN'
p629
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p630
I73
sS'.thisN'
p631
I73
sS'.thisIndex'
p632
g46
(g48
S'$\x01\x00\x00'
tRp633
sg15
(lp634
S'd'
asg17
S'Y'
sg14
I2
sa(dp635
g16
(lp636
S'k'
asg41
I534
sS'.thisRepN'
p637
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p638
I74
sS'.thisN'
p639
I74
sS'.thisIndex'
p640
g46
(g48
S'\x16\x02\x00\x00'
tRp641
sg15
(lp642
S'k'
asg17
S'Y'
sg14
I2
sa(dp643
g16
(lp644
S'k'
asg41
I585
sS'.thisRepN'
p645
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p646
I75
sS'.thisN'
p647
I75
sS'.thisIndex'
p648
g46
(g48
S'I\x02\x00\x00'
tRp649
sg15
(lp650
S'k'
asg17
S'Y'
sg14
I2
sa(dp651
g16
(lp652
S'd'
asg41
I85
sS'.thisRepN'
p653
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p654
I76
sS'.thisN'
p655
I76
sS'.thisIndex'
p656
g46
(g48
S'U\x00\x00\x00'
tRp657
sg15
(lp658
S'd'
asg17
S'Y'
sg14
I2
sa(dp659
g16
(lp660
S'k'
asg41
I538
sS'.thisRepN'
p661
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p662
I77
sS'.thisN'
p663
I77
sS'.thisIndex'
p664
g46
(g48
S'\x1a\x02\x00\x00'
tRp665
sg15
(lp666
S'k'
asg17
S'Y'
sg14
I2
sa(dp667
g16
(lp668
S'k'
asg41
I548
sS'.thisRepN'
p669
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p670
I78
sS'.thisN'
p671
I78
sS'.thisIndex'
p672
g46
(g48
S'$\x02\x00\x00'
tRp673
sg15
(lp674
S'k'
asg17
S'Y'
sg14
I2
sa(dp675
g16
(lp676
S'k'
asg41
I559
sS'.thisRepN'
p677
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p678
I79
sS'.thisN'
p679
I79
sS'.thisIndex'
p680
g46
(g48
S'/\x02\x00\x00'
tRp681
sg15
(lp682
S'k'
asg17
S'Y'
sg14
I2
sa(dp683
g16
(lp684
S'd'
asg41
I148
sS'.thisRepN'
p685
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p686
I80
sS'.thisN'
p687
I80
sS'.thisIndex'
p688
g46
(g48
S'\x94\x00\x00\x00'
tRp689
sg15
(lp690
S'd'
asg17
S'Y'
sg14
I2
sa(dp691
g16
(lp692
S'k'
asg41
I351
sS'.thisRepN'
p693
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p694
I81
sS'.thisN'
p695
I81
sS'.thisIndex'
p696
g46
(g48
S'_\x01\x00\x00'
tRp697
sg15
(lp698
S'k'
asg17
S'Y'
sg14
I2
sa(dp699
g16
(lp700
S'k'
asg41
I352
sS'.thisRepN'
p701
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p702
I82
sS'.thisN'
p703
I82
sS'.thisIndex'
p704
g46
(g48
S'`\x01\x00\x00'
tRp705
sg15
(lp706
S'k'
asg17
S'Y'
sg14
I2
sa(dp707
g16
(lp708
S'd'
asg41
I236
sS'.thisRepN'
p709
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p710
I83
sS'.thisN'
p711
I83
sS'.thisIndex'
p712
g46
(g48
S'\xec\x00\x00\x00'
tRp713
sg15
(lp714
S'd'
asg17
S'Y'
sg14
I2
sa(dp715
g16
(lp716
S'd'
asg41
I278
sS'.thisRepN'
p717
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p718
I84
sS'.thisN'
p719
I84
sS'.thisIndex'
p720
g46
(g48
S'\x16\x01\x00\x00'
tRp721
sg15
(lp722
S'd'
asg17
S'Y'
sg14
I2
sa(dp723
g16
(lp724
S'k'
asg41
I305
sS'.thisRepN'
p725
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p726
I85
sS'.thisN'
p727
I85
sS'.thisIndex'
p728
g46
(g48
S'1\x01\x00\x00'
tRp729
sg15
(lp730
S'k'
asg17
S'Y'
sg14
I2
sa(dp731
g16
(lp732
S'd'
asg41
I117
sS'.thisRepN'
p733
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p734
I86
sS'.thisN'
p735
I86
sS'.thisIndex'
p736
g46
(g48
S'u\x00\x00\x00'
tRp737
sg15
(lp738
S'd'
asg17
S'Y'
sg14
I2
sa(dp739
g16
(lp740
S'k'
asg41
I436
sS'.thisRepN'
p741
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p742
I87
sS'.thisN'
p743
I87
sS'.thisIndex'
p744
g46
(g48
S'\xb4\x01\x00\x00'
tRp745
sg15
(lp746
S'd'
asg17
S'N'
sg14
I2
sa(dp747
g16
(lp748
S'd'
asg41
I83
sS'.thisRepN'
p749
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p750
I88
sS'.thisN'
p751
I88
sS'.thisIndex'
p752
g46
(g48
S'S\x00\x00\x00'
tRp753
sg15
(lp754
S'd'
asg17
S'Y'
sg14
I2
sa(dp755
g16
(lp756
S'd'
asg41
I22
sS'.thisRepN'
p757
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p758
I89
sS'.thisN'
p759
I89
sS'.thisIndex'
p760
g46
(g48
S'\x16\x00\x00\x00'
tRp761
sg15
(lp762
S'd'
asg17
S'Y'
sg14
I2
sa(dp763
g16
(lp764
S'd'
asg41
I293
sS'.thisRepN'
p765
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p766
I90
sS'.thisN'
p767
I90
sS'.thisIndex'
p768
g46
(g48
S'%\x01\x00\x00'
tRp769
sg15
(lp770
S'd'
asg17
S'Y'
sg14
I2
sa(dp771
g16
(lp772
S'k'
asg41
I589
sS'.thisRepN'
p773
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p774
I91
sS'.thisN'
p775
I91
sS'.thisIndex'
p776
g46
(g48
S'M\x02\x00\x00'
tRp777
sg15
(lp778
S'k'
asg17
S'Y'
sg14
I2
sa(dp779
g16
(lp780
S'k'
asg41
I482
sS'.thisRepN'
p781
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p782
I92
sS'.thisN'
p783
I92
sS'.thisIndex'
p784
g46
(g48
S'\xe2\x01\x00\x00'
tRp785
sg15
(lp786
S'k'
asg17
S'Y'
sg14
I2
sa(dp787
g16
(lp788
S'k'
asg41
I327
sS'.thisRepN'
p789
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p790
I93
sS'.thisN'
p791
I93
sS'.thisIndex'
p792
g46
(g48
S'G\x01\x00\x00'
tRp793
sg15
(lp794
S'k'
asg17
S'Y'
sg14
I2
sa(dp795
g16
(lp796
S'd'
asg41
I238
sS'.thisRepN'
p797
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p798
I94
sS'.thisN'
p799
I94
sS'.thisIndex'
p800
g46
(g48
S'\xee\x00\x00\x00'
tRp801
sg15
(lp802
S'd'
asg17
S'Y'
sg14
I2
sa(dp803
g16
(lp804
S'd'
asg41
I164
sS'.thisRepN'
p805
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p806
I95
sS'.thisN'
p807
I95
sS'.thisIndex'
p808
g46
(g48
S'\xa4\x00\x00\x00'
tRp809
sg15
(lp810
S'd'
asg17
S'Y'
sg14
I2
sa(dp811
g16
(lp812
S'k'
asg41
I430
sS'.thisRepN'
p813
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p814
I96
sS'.thisN'
p815
I96
sS'.thisIndex'
p816
g46
(g48
S'\xae\x01\x00\x00'
tRp817
sg15
(lp818
S'k'
asg17
S'Y'
sg14
I2
sa(dp819
g16
(lp820
S'k'
asg41
I412
sS'.thisRepN'
p821
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p822
I97
sS'.thisN'
p823
I97
sS'.thisIndex'
p824
g46
(g48
S'\x9c\x01\x00\x00'
tRp825
sg15
(lp826
S'k'
asg17
S'Y'
sg14
I2
sa(dp827
g16
(lp828
S'd'
asg41
I4
sS'.thisRepN'
p829
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p830
I98
sS'.thisN'
p831
I98
sS'.thisIndex'
p832
g46
(g48
S'\x04\x00\x00\x00'
tRp833
sg15
(lp834
S'k'
asg17
S'N'
sg14
I2
sa(dp835
g16
(lp836
S'd'
asg41
I137
sS'.thisRepN'
p837
I0
sg25
g26
sg19
S'0'
sS'.thisTrialN'
p838
I99
sS'.thisN'
p839
I99
sS'.thisIndex'
p840
g46
(g48
S'\x89\x00\x00\x00'
tRp841
sg15
(lp842
S'd'
asg18
I46
sg17
S'Y'
sg14
I2
sg27
g28
sa(dp843
g16
(lp844
S'd'
asg41
I163
sS'.thisRepN'
p845
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p846
I100
sS'.thisN'
p847
I100
sS'.thisIndex'
p848
g46
(g48
S'\xa3\x00\x00\x00'
tRp849
sg15
(lp850
S'd'
asg17
S'Y'
sg14
I3
sa(dp851
g16
(lp852
S'd'
asg41
I39
sS'.thisRepN'
p853
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p854
I101
sS'.thisN'
p855
I101
sS'.thisIndex'
p856
g46
(g48
S"'\x00\x00\x00"
tRp857
sg15
(lp858
S'd'
asg17
S'Y'
sg14
I3
sa(dp859
g16
(lp860
S'd'
asg41
I253
sS'.thisRepN'
p861
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p862
I102
sS'.thisN'
p863
I102
sS'.thisIndex'
p864
g46
(g48
S'\xfd\x00\x00\x00'
tRp865
sg15
(lp866
S'd'
asg17
S'Y'
sg14
I3
sa(dp867
g16
(lp868
S'k'
asg41
I568
sS'.thisRepN'
p869
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p870
I103
sS'.thisN'
p871
I103
sS'.thisIndex'
p872
g46
(g48
S'8\x02\x00\x00'
tRp873
sg15
(lp874
S'k'
asg17
S'Y'
sg14
I3
sa(dp875
g16
(lp876
S'k'
asg41
I457
sS'.thisRepN'
p877
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p878
I104
sS'.thisN'
p879
I104
sS'.thisIndex'
p880
g46
(g48
S'\xc9\x01\x00\x00'
tRp881
sg15
(lp882
S'k'
asg17
S'Y'
sg14
I3
sa(dp883
g16
(lp884
S'k'
asg41
I426
sS'.thisRepN'
p885
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p886
I105
sS'.thisN'
p887
I105
sS'.thisIndex'
p888
g46
(g48
S'\xaa\x01\x00\x00'
tRp889
sg15
(lp890
S'k'
asg17
S'Y'
sg14
I3
sa(dp891
g16
(lp892
S'd'
asg41
I289
sS'.thisRepN'
p893
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p894
I106
sS'.thisN'
p895
I106
sS'.thisIndex'
p896
g46
(g48
S'!\x01\x00\x00'
tRp897
sg15
(lp898
S'd'
asg17
S'Y'
sg14
I3
sa(dp899
g16
(lp900
S'k'
asg41
I475
sS'.thisRepN'
p901
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p902
I107
sS'.thisN'
p903
I107
sS'.thisIndex'
p904
g46
(g48
S'\xdb\x01\x00\x00'
tRp905
sg15
(lp906
S'k'
asg17
S'Y'
sg14
I3
sa(dp907
g16
(lp908
S'd'
asg41
I174
sS'.thisRepN'
p909
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p910
I108
sS'.thisN'
p911
I108
sS'.thisIndex'
p912
g46
(g48
S'\xae\x00\x00\x00'
tRp913
sg15
(lp914
S'd'
asg17
S'Y'
sg14
I3
sa(dp915
g16
(lp916
S'k'
asg41
I596
sS'.thisRepN'
p917
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p918
I109
sS'.thisN'
p919
I109
sS'.thisIndex'
p920
g46
(g48
S'T\x02\x00\x00'
tRp921
sg15
(lp922
S'k'
asg17
S'Y'
sg14
I3
sa(dp923
g16
(lp924
S'k'
asg41
I331
sS'.thisRepN'
p925
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p926
I110
sS'.thisN'
p927
I110
sS'.thisIndex'
p928
g46
(g48
S'K\x01\x00\x00'
tRp929
sg15
(lp930
S'k'
asg17
S'Y'
sg14
I3
sa(dp931
g16
(lp932
S'k'
asg41
I349
sS'.thisRepN'
p933
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p934
I111
sS'.thisN'
p935
I111
sS'.thisIndex'
p936
g46
(g48
S']\x01\x00\x00'
tRp937
sg15
(lp938
S'k'
asg17
S'Y'
sg14
I3
sa(dp939
g16
(lp940
S'k'
asg41
I427
sS'.thisRepN'
p941
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p942
I112
sS'.thisN'
p943
I112
sS'.thisIndex'
p944
g46
(g48
S'\xab\x01\x00\x00'
tRp945
sg15
(lp946
S'k'
asg17
S'Y'
sg14
I3
sa(dp947
g16
(lp948
S'k'
asg41
I460
sS'.thisRepN'
p949
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p950
I113
sS'.thisN'
p951
I113
sS'.thisIndex'
p952
g46
(g48
S'\xcc\x01\x00\x00'
tRp953
sg15
(lp954
S'k'
asg17
S'Y'
sg14
I3
sa(dp955
g16
(lp956
S'd'
asg41
I216
sS'.thisRepN'
p957
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p958
I114
sS'.thisN'
p959
I114
sS'.thisIndex'
p960
g46
(g48
S'\xd8\x00\x00\x00'
tRp961
sg15
(lp962
S'd'
asg17
S'Y'
sg14
I3
sa(dp963
g16
(lp964
S'd'
asg41
I75
sS'.thisRepN'
p965
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p966
I115
sS'.thisN'
p967
I115
sS'.thisIndex'
p968
g46
(g48
S'K\x00\x00\x00'
tRp969
sg15
(lp970
S'd'
asg17
S'Y'
sg14
I3
sa(dp971
g16
(lp972
S'k'
asg41
I448
sS'.thisRepN'
p973
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p974
I116
sS'.thisN'
p975
I116
sS'.thisIndex'
p976
g46
(g48
S'\xc0\x01\x00\x00'
tRp977
sg15
(lp978
S'k'
asg17
S'Y'
sg14
I3
sa(dp979
g16
(lp980
S'k'
asg41
I366
sS'.thisRepN'
p981
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p982
I117
sS'.thisN'
p983
I117
sS'.thisIndex'
p984
g46
(g48
S'n\x01\x00\x00'
tRp985
sg15
(lp986
S'k'
asg17
S'Y'
sg14
I3
sa(dp987
g16
(lp988
S'k'
asg41
I514
sS'.thisRepN'
p989
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p990
I118
sS'.thisN'
p991
I118
sS'.thisIndex'
p992
g46
(g48
S'\x02\x02\x00\x00'
tRp993
sg15
(lp994
S'd'
asg17
S'N'
sg14
I3
sa(dp995
g16
(lp996
S'd'
asg41
I55
sS'.thisRepN'
p997
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p998
I119
sS'.thisN'
p999
I119
sS'.thisIndex'
p1000
g46
(g48
S'7\x00\x00\x00'
tRp1001
sg15
(lp1002
S'k'
asg17
S'N'
sg14
I3
sa(dp1003
g16
(lp1004
S'd'
asg41
I213
sS'.thisRepN'
p1005
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1006
I120
sS'.thisN'
p1007
I120
sS'.thisIndex'
p1008
g46
(g48
S'\xd5\x00\x00\x00'
tRp1009
sg15
(lp1010
S'd'
asg17
S'Y'
sg14
I3
sa(dp1011
g16
(lp1012
S'd'
asg41
I261
sS'.thisRepN'
p1013
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1014
I121
sS'.thisN'
p1015
I121
sS'.thisIndex'
p1016
g46
(g48
S'\x05\x01\x00\x00'
tRp1017
sg15
(lp1018
S'd'
asg17
S'Y'
sg14
I3
sa(dp1019
g16
(lp1020
S'd'
asg41
I259
sS'.thisRepN'
p1021
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1022
I122
sS'.thisN'
p1023
I122
sS'.thisIndex'
p1024
g46
(g48
S'\x03\x01\x00\x00'
tRp1025
sg15
(lp1026
S'd'
asg17
S'Y'
sg14
I3
sa(dp1027
g16
(lp1028
S'd'
asg41
I61
sS'.thisRepN'
p1029
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1030
I123
sS'.thisN'
p1031
I123
sS'.thisIndex'
p1032
g46
(g48
S'=\x00\x00\x00'
tRp1033
sg15
(lp1034
S'd'
asg17
S'Y'
sg14
I3
sa(dp1035
g16
(lp1036
S'k'
asg41
I591
sS'.thisRepN'
p1037
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1038
I124
sS'.thisN'
p1039
I124
sS'.thisIndex'
p1040
g46
(g48
S'O\x02\x00\x00'
tRp1041
sg15
(lp1042
S'k'
asg17
S'Y'
sg14
I3
sa(dp1043
g16
(lp1044
S'd'
asg41
I81
sS'.thisRepN'
p1045
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1046
I125
sS'.thisN'
p1047
I125
sS'.thisIndex'
p1048
g46
(g48
S'Q\x00\x00\x00'
tRp1049
sg15
(lp1050
S'd'
asg17
S'Y'
sg14
I3
sa(dp1051
g16
(lp1052
S'k'
asg41
I511
sS'.thisRepN'
p1053
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1054
I126
sS'.thisN'
p1055
I126
sS'.thisIndex'
p1056
g46
(g48
S'\xff\x01\x00\x00'
tRp1057
sg15
(lp1058
S'k'
asg17
S'Y'
sg14
I3
sa(dp1059
g16
(lp1060
S'k'
asg41
I470
sS'.thisRepN'
p1061
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1062
I127
sS'.thisN'
p1063
I127
sS'.thisIndex'
p1064
g46
(g48
S'\xd6\x01\x00\x00'
tRp1065
sg15
(lp1066
S'k'
asg17
S'Y'
sg14
I3
sa(dp1067
g16
(lp1068
S'd'
asg41
I173
sS'.thisRepN'
p1069
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1070
I128
sS'.thisN'
p1071
I128
sS'.thisIndex'
p1072
g46
(g48
S'\xad\x00\x00\x00'
tRp1073
sg15
(lp1074
S'd'
asg17
S'Y'
sg14
I3
sa(dp1075
g16
(lp1076
S'd'
asg41
I277
sS'.thisRepN'
p1077
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1078
I129
sS'.thisN'
p1079
I129
sS'.thisIndex'
p1080
g46
(g48
S'\x15\x01\x00\x00'
tRp1081
sg15
(lp1082
S'd'
asg17
S'Y'
sg14
I3
sa(dp1083
g16
(lp1084
S'k'
asg41
I489
sS'.thisRepN'
p1085
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1086
I130
sS'.thisN'
p1087
I130
sS'.thisIndex'
p1088
g46
(g48
S'\xe9\x01\x00\x00'
tRp1089
sg15
(lp1090
S'k'
asg17
S'Y'
sg14
I3
sa(dp1091
g16
(lp1092
S'd'
asg41
I36
sS'.thisRepN'
p1093
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1094
I131
sS'.thisN'
p1095
I131
sS'.thisIndex'
p1096
g46
(g48
S'$\x00\x00\x00'
tRp1097
sg15
(lp1098
S'd'
asg17
S'Y'
sg14
I3
sa(dp1099
g16
(lp1100
S'd'
asg41
I241
sS'.thisRepN'
p1101
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1102
I132
sS'.thisN'
p1103
I132
sS'.thisIndex'
p1104
g46
(g48
S'\xf1\x00\x00\x00'
tRp1105
sg15
(lp1106
S'd'
asg17
S'Y'
sg14
I3
sa(dp1107
g16
(lp1108
S'k'
asg41
I334
sS'.thisRepN'
p1109
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1110
I133
sS'.thisN'
p1111
I133
sS'.thisIndex'
p1112
g46
(g48
S'N\x01\x00\x00'
tRp1113
sg15
(lp1114
S'k'
asg17
S'Y'
sg14
I3
sa(dp1115
g16
(lp1116
S'd'
asg41
I146
sS'.thisRepN'
p1117
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1118
I134
sS'.thisN'
p1119
I134
sS'.thisIndex'
p1120
g46
(g48
S'\x92\x00\x00\x00'
tRp1121
sg15
(lp1122
S'd'
asg17
S'Y'
sg14
I3
sa(dp1123
g16
(lp1124
S'd'
asg41
I262
sS'.thisRepN'
p1125
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1126
I135
sS'.thisN'
p1127
I135
sS'.thisIndex'
p1128
g46
(g48
S'\x06\x01\x00\x00'
tRp1129
sg15
(lp1130
S'd'
asg17
S'Y'
sg14
I3
sa(dp1131
g16
(lp1132
S'd'
asg41
I179
sS'.thisRepN'
p1133
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1134
I136
sS'.thisN'
p1135
I136
sS'.thisIndex'
p1136
g46
(g48
S'\xb3\x00\x00\x00'
tRp1137
sg15
(lp1138
S'd'
asg17
S'Y'
sg14
I3
sa(dp1139
g16
(lp1140
S'd'
asg41
I260
sS'.thisRepN'
p1141
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1142
I137
sS'.thisN'
p1143
I137
sS'.thisIndex'
p1144
g46
(g48
S'\x04\x01\x00\x00'
tRp1145
sg15
(lp1146
S'd'
asg17
S'Y'
sg14
I3
sa(dp1147
g16
(lp1148
S'k'
asg41
I313
sS'.thisRepN'
p1149
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1150
I138
sS'.thisN'
p1151
I138
sS'.thisIndex'
p1152
g46
(g48
S'9\x01\x00\x00'
tRp1153
sg15
(lp1154
S'k'
asg17
S'Y'
sg14
I3
sa(dp1155
g16
(lp1156
S'd'
asg41
I123
sS'.thisRepN'
p1157
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1158
I139
sS'.thisN'
p1159
I139
sS'.thisIndex'
p1160
g46
(g48
S'{\x00\x00\x00'
tRp1161
sg15
(lp1162
S'd'
asg17
S'Y'
sg14
I3
sa(dp1163
g16
(lp1164
S'k'
asg41
I529
sS'.thisRepN'
p1165
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1166
I140
sS'.thisN'
p1167
I140
sS'.thisIndex'
p1168
g46
(g48
S'\x11\x02\x00\x00'
tRp1169
sg15
(lp1170
S'k'
asg17
S'Y'
sg14
I3
sa(dp1171
g16
(lp1172
S'k'
asg41
I501
sS'.thisRepN'
p1173
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1174
I141
sS'.thisN'
p1175
I141
sS'.thisIndex'
p1176
g46
(g48
S'\xf5\x01\x00\x00'
tRp1177
sg15
(lp1178
S'k'
asg17
S'Y'
sg14
I3
sa(dp1179
g16
(lp1180
S'd'
asg41
I122
sS'.thisRepN'
p1181
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1182
I142
sS'.thisN'
p1183
I142
sS'.thisIndex'
p1184
g46
(g48
S'z\x00\x00\x00'
tRp1185
sg15
(lp1186
S'd'
asg17
S'Y'
sg14
I3
sa(dp1187
g16
(lp1188
S'k'
asg41
I355
sS'.thisRepN'
p1189
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1190
I143
sS'.thisN'
p1191
I143
sS'.thisIndex'
p1192
g46
(g48
S'c\x01\x00\x00'
tRp1193
sg15
(lp1194
S'k'
asg17
S'Y'
sg14
I3
sa(dp1195
g16
(lp1196
S'k'
asg41
I348
sS'.thisRepN'
p1197
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1198
I144
sS'.thisN'
p1199
I144
sS'.thisIndex'
p1200
g46
(g48
S'\\\x01\x00\x00'
tRp1201
sg15
(lp1202
S'k'
asg17
S'Y'
sg14
I3
sa(dp1203
g16
(lp1204
S'k'
asg41
I599
sS'.thisRepN'
p1205
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1206
I145
sS'.thisN'
p1207
I145
sS'.thisIndex'
p1208
g46
(g48
S'W\x02\x00\x00'
tRp1209
sg15
(lp1210
S'k'
asg17
S'Y'
sg14
I3
sa(dp1211
g16
(lp1212
S'd'
asg41
I47
sS'.thisRepN'
p1213
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1214
I146
sS'.thisN'
p1215
I146
sS'.thisIndex'
p1216
g46
(g48
S'/\x00\x00\x00'
tRp1217
sg15
(lp1218
S'd'
asg17
S'Y'
sg14
I3
sa(dp1219
g16
(lp1220
S'k'
asg41
I586
sS'.thisRepN'
p1221
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1222
I147
sS'.thisN'
p1223
I147
sS'.thisIndex'
p1224
g46
(g48
S'J\x02\x00\x00'
tRp1225
sg15
(lp1226
S'k'
asg17
S'Y'
sg14
I3
sa(dp1227
g16
(lp1228
S'd'
asg41
I71
sS'.thisRepN'
p1229
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1230
I148
sS'.thisN'
p1231
I148
sS'.thisIndex'
p1232
g46
(g48
S'G\x00\x00\x00'
tRp1233
sg15
(lp1234
S'd'
asg17
S'Y'
sg14
I3
sa(dp1235
g16
(lp1236
S'd'
asg41
I104
sS'.thisRepN'
p1237
I0
sg25
g26
sg19
S'0'
sS'.thisTrialN'
p1238
I149
sS'.thisN'
p1239
I149
sS'.thisIndex'
p1240
g46
(g48
S'h\x00\x00\x00'
tRp1241
sg15
(lp1242
S'd'
asg18
I48
sg17
S'Y'
sg14
I3
sg27
g28
sa(dp1243
g16
(lp1244
S'k'
asg41
I312
sS'.thisRepN'
p1245
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1246
I150
sS'.thisN'
p1247
I150
sS'.thisIndex'
p1248
g46
(g48
S'8\x01\x00\x00'
tRp1249
sg15
(lp1250
S'k'
asg17
S'Y'
sg14
I4
sa(dp1251
g16
(lp1252
S'k'
asg41
I391
sS'.thisRepN'
p1253
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1254
I151
sS'.thisN'
p1255
I151
sS'.thisIndex'
p1256
g46
(g48
S'\x87\x01\x00\x00'
tRp1257
sg15
(lp1258
S'k'
asg17
S'Y'
sg14
I4
sa(dp1259
g16
(lp1260
S'k'
asg41
I549
sS'.thisRepN'
p1261
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1262
I152
sS'.thisN'
p1263
I152
sS'.thisIndex'
p1264
g46
(g48
S'%\x02\x00\x00'
tRp1265
sg15
(lp1266
S'k'
asg17
S'Y'
sg14
I4
sa(dp1267
g16
(lp1268
S'k'
asg41
I564
sS'.thisRepN'
p1269
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1270
I153
sS'.thisN'
p1271
I153
sS'.thisIndex'
p1272
g46
(g48
S'4\x02\x00\x00'
tRp1273
sg15
(lp1274
S'k'
asg17
S'Y'
sg14
I4
sa(dp1275
g16
(lp1276
S'k'
asg41
I361
sS'.thisRepN'
p1277
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1278
I154
sS'.thisN'
p1279
I154
sS'.thisIndex'
p1280
g46
(g48
S'i\x01\x00\x00'
tRp1281
sg15
(lp1282
S'k'
asg17
S'Y'
sg14
I4
sa(dp1283
g16
(lp1284
S'k'
asg41
I362
sS'.thisRepN'
p1285
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1286
I155
sS'.thisN'
p1287
I155
sS'.thisIndex'
p1288
g46
(g48
S'j\x01\x00\x00'
tRp1289
sg15
(lp1290
S'k'
asg17
S'Y'
sg14
I4
sa(dp1291
g16
(lp1292
S'k'
asg41
I566
sS'.thisRepN'
p1293
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1294
I156
sS'.thisN'
p1295
I156
sS'.thisIndex'
p1296
g46
(g48
S'6\x02\x00\x00'
tRp1297
sg15
(lp1298
S'k'
asg17
S'Y'
sg14
I4
sa(dp1299
g16
(lp1300
S'k'
asg41
I573
sS'.thisRepN'
p1301
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1302
I157
sS'.thisN'
p1303
I157
sS'.thisIndex'
p1304
g46
(g48
S'=\x02\x00\x00'
tRp1305
sg15
(lp1306
S'k'
asg17
S'Y'
sg14
I4
sa(dp1307
g16
(lp1308
S'd'
asg41
I203
sS'.thisRepN'
p1309
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1310
I158
sS'.thisN'
p1311
I158
sS'.thisIndex'
p1312
g46
(g48
S'\xcb\x00\x00\x00'
tRp1313
sg15
(lp1314
S'd'
asg17
S'Y'
sg14
I4
sa(dp1315
g16
(lp1316
S'd'
asg41
I192
sS'.thisRepN'
p1317
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1318
I159
sS'.thisN'
p1319
I159
sS'.thisIndex'
p1320
g46
(g48
S'\xc0\x00\x00\x00'
tRp1321
sg15
(lp1322
S'd'
asg17
S'Y'
sg14
I4
sa(dp1323
g16
(lp1324
S'd'
asg41
I249
sS'.thisRepN'
p1325
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1326
I160
sS'.thisN'
p1327
I160
sS'.thisIndex'
p1328
g46
(g48
S'\xf9\x00\x00\x00'
tRp1329
sg15
(lp1330
S'd'
asg17
S'Y'
sg14
I4
sa(dp1331
g16
(lp1332
S'd'
asg41
I124
sS'.thisRepN'
p1333
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1334
I161
sS'.thisN'
p1335
I161
sS'.thisIndex'
p1336
g46
(g48
S'|\x00\x00\x00'
tRp1337
sg15
(lp1338
S'd'
asg17
S'Y'
sg14
I4
sa(dp1339
g16
(lp1340
S'd'
asg41
I113
sS'.thisRepN'
p1341
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1342
I162
sS'.thisN'
p1343
I162
sS'.thisIndex'
p1344
g46
(g48
S'q\x00\x00\x00'
tRp1345
sg15
(lp1346
S'd'
asg17
S'Y'
sg14
I4
sa(dp1347
g16
(lp1348
S'd'
asg41
I78
sS'.thisRepN'
p1349
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1350
I163
sS'.thisN'
p1351
I163
sS'.thisIndex'
p1352
g46
(g48
S'N\x00\x00\x00'
tRp1353
sg15
(lp1354
S'd'
asg17
S'Y'
sg14
I4
sa(dp1355
g16
(lp1356
S'd'
asg41
I184
sS'.thisRepN'
p1357
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1358
I164
sS'.thisN'
p1359
I164
sS'.thisIndex'
p1360
g46
(g48
S'\xb8\x00\x00\x00'
tRp1361
sg15
(lp1362
S'd'
asg17
S'Y'
sg14
I4
sa(dp1363
g16
(lp1364
S'k'
asg41
I381
sS'.thisRepN'
p1365
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1366
I165
sS'.thisN'
p1367
I165
sS'.thisIndex'
p1368
g46
(g48
S'}\x01\x00\x00'
tRp1369
sg15
(lp1370
S'k'
asg17
S'Y'
sg14
I4
sa(dp1371
g16
(lp1372
S'd'
asg41
I95
sS'.thisRepN'
p1373
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1374
I166
sS'.thisN'
p1375
I166
sS'.thisIndex'
p1376
g46
(g48
S'_\x00\x00\x00'
tRp1377
sg15
(lp1378
S'd'
asg17
S'Y'
sg14
I4
sa(dp1379
g16
(lp1380
S'k'
asg41
I370
sS'.thisRepN'
p1381
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1382
I167
sS'.thisN'
p1383
I167
sS'.thisIndex'
p1384
g46
(g48
S'r\x01\x00\x00'
tRp1385
sg15
(lp1386
S'k'
asg17
S'Y'
sg14
I4
sa(dp1387
g16
(lp1388
S'k'
asg41
I575
sS'.thisRepN'
p1389
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1390
I168
sS'.thisN'
p1391
I168
sS'.thisIndex'
p1392
g46
(g48
S'?\x02\x00\x00'
tRp1393
sg15
(lp1394
S'k'
asg17
S'Y'
sg14
I4
sa(dp1395
g16
(lp1396
S'k'
asg41
I459
sS'.thisRepN'
p1397
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1398
I169
sS'.thisN'
p1399
I169
sS'.thisIndex'
p1400
g46
(g48
S'\xcb\x01\x00\x00'
tRp1401
sg15
(lp1402
S'k'
asg17
S'Y'
sg14
I4
sa(dp1403
g16
(lp1404
S'k'
asg41
I384
sS'.thisRepN'
p1405
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1406
I170
sS'.thisN'
p1407
I170
sS'.thisIndex'
p1408
g46
(g48
S'\x80\x01\x00\x00'
tRp1409
sg15
(lp1410
S'k'
asg17
S'Y'
sg14
I4
sa(dp1411
g16
(lp1412
S'd'
asg41
I106
sS'.thisRepN'
p1413
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1414
I171
sS'.thisN'
p1415
I171
sS'.thisIndex'
p1416
g46
(g48
S'j\x00\x00\x00'
tRp1417
sg15
(lp1418
S'd'
asg17
S'Y'
sg14
I4
sa(dp1419
g16
(lp1420
S'k'
asg41
I509
sS'.thisRepN'
p1421
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1422
I172
sS'.thisN'
p1423
I172
sS'.thisIndex'
p1424
g46
(g48
S'\xfd\x01\x00\x00'
tRp1425
sg15
(lp1426
S'k'
asg17
S'Y'
sg14
I4
sa(dp1427
g16
(lp1428
S'd'
asg41
I7
sS'.thisRepN'
p1429
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1430
I173
sS'.thisN'
p1431
I173
sS'.thisIndex'
p1432
g46
(g48
S'\x07\x00\x00\x00'
tRp1433
sg15
(lp1434
S'd'
asg17
S'Y'
sg14
I4
sa(dp1435
g16
(lp1436
S'k'
asg41
I595
sS'.thisRepN'
p1437
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1438
I174
sS'.thisN'
p1439
I174
sS'.thisIndex'
p1440
g46
(g48
S'S\x02\x00\x00'
tRp1441
sg15
(lp1442
S'k'
asg17
S'Y'
sg14
I4
sa(dp1443
g16
(lp1444
S'k'
asg41
I503
sS'.thisRepN'
p1445
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1446
I175
sS'.thisN'
p1447
I175
sS'.thisIndex'
p1448
g46
(g48
S'\xf7\x01\x00\x00'
tRp1449
sg15
(lp1450
S'k'
asg17
S'Y'
sg14
I4
sa(dp1451
g16
(lp1452
S'd'
asg41
I235
sS'.thisRepN'
p1453
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1454
I176
sS'.thisN'
p1455
I176
sS'.thisIndex'
p1456
g46
(g48
S'\xeb\x00\x00\x00'
tRp1457
sg15
(lp1458
S'd'
asg17
S'Y'
sg14
I4
sa(dp1459
g16
(lp1460
S'd'
asg41
I284
sS'.thisRepN'
p1461
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1462
I177
sS'.thisN'
p1463
I177
sS'.thisIndex'
p1464
g46
(g48
S'\x1c\x01\x00\x00'
tRp1465
sg15
(lp1466
S'd'
asg17
S'Y'
sg14
I4
sa(dp1467
g16
(lp1468
S'k'
asg41
I526
sS'.thisRepN'
p1469
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1470
I178
sS'.thisN'
p1471
I178
sS'.thisIndex'
p1472
g46
(g48
S'\x0e\x02\x00\x00'
tRp1473
sg15
(lp1474
S'k'
asg17
S'Y'
sg14
I4
sa(dp1475
g16
(lp1476
S'd'
asg41
I43
sS'.thisRepN'
p1477
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1478
I179
sS'.thisN'
p1479
I179
sS'.thisIndex'
p1480
g46
(g48
S'+\x00\x00\x00'
tRp1481
sg15
(lp1482
S'd'
asg17
S'Y'
sg14
I4
sa(dp1483
g16
(lp1484
S'd'
asg41
I287
sS'.thisRepN'
p1485
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1486
I180
sS'.thisN'
p1487
I180
sS'.thisIndex'
p1488
g46
(g48
S'\x1f\x01\x00\x00'
tRp1489
sg15
(lp1490
S'd'
asg17
S'Y'
sg14
I4
sa(dp1491
g41
I400
sS'.thisN'
p1492
I181
sg25
g26
sg27
g28
sS'.thisTrialN'
p1493
I181
sS'.thisRepN'
p1494
I0
sS'.thisIndex'
p1495
g46
(g48
S'\x90\x01\x00\x00'
tRp1496
sg15
Nsg17
S'Timed out'
p1497
sg14
I4
sa(dp1498
g16
(lp1499
S'k'
asg41
I495
sS'.thisRepN'
p1500
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1501
I182
sS'.thisN'
p1502
I182
sS'.thisIndex'
p1503
g46
(g48
S'\xef\x01\x00\x00'
tRp1504
sg15
(lp1505
S'k'
asg17
S'Y'
sg14
I4
sa(dp1506
g16
(lp1507
S'd'
asg41
I272
sS'.thisRepN'
p1508
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1509
I183
sS'.thisN'
p1510
I183
sS'.thisIndex'
p1511
g46
(g48
S'\x10\x01\x00\x00'
tRp1512
sg15
(lp1513
S'd'
asg17
S'Y'
sg14
I4
sa(dp1514
g16
(lp1515
S'd'
asg41
I44
sS'.thisRepN'
p1516
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1517
I184
sS'.thisN'
p1518
I184
sS'.thisIndex'
p1519
g46
(g48
S',\x00\x00\x00'
tRp1520
sg15
(lp1521
S'd'
asg17
S'Y'
sg14
I4
sa(dp1522
g16
(lp1523
S'd'
asg41
I218
sS'.thisRepN'
p1524
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1525
I185
sS'.thisN'
p1526
I185
sS'.thisIndex'
p1527
g46
(g48
S'\xda\x00\x00\x00'
tRp1528
sg15
(lp1529
S'd'
asg17
S'Y'
sg14
I4
sa(dp1530
g16
(lp1531
S'd'
asg41
I214
sS'.thisRepN'
p1532
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1533
I186
sS'.thisN'
p1534
I186
sS'.thisIndex'
p1535
g46
(g48
S'\xd6\x00\x00\x00'
tRp1536
sg15
(lp1537
S'd'
asg17
S'Y'
sg14
I4
sa(dp1538
g16
(lp1539
S'k'
asg41
I333
sS'.thisRepN'
p1540
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1541
I187
sS'.thisN'
p1542
I187
sS'.thisIndex'
p1543
g46
(g48
S'M\x01\x00\x00'
tRp1544
sg15
(lp1545
S'k'
asg17
S'Y'
sg14
I4
sa(dp1546
g16
(lp1547
S'k'
asg41
I518
sS'.thisRepN'
p1548
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1549
I188
sS'.thisN'
p1550
I188
sS'.thisIndex'
p1551
g46
(g48
S'\x06\x02\x00\x00'
tRp1552
sg15
(lp1553
S'k'
asg17
S'Y'
sg14
I4
sa(dp1554
g16
(lp1555
S'd'
asg41
I130
sS'.thisRepN'
p1556
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1557
I189
sS'.thisN'
p1558
I189
sS'.thisIndex'
p1559
g46
(g48
S'\x82\x00\x00\x00'
tRp1560
sg15
(lp1561
S'd'
asg17
S'Y'
sg14
I4
sa(dp1562
g16
(lp1563
S'd'
asg41
I245
sS'.thisRepN'
p1564
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1565
I190
sS'.thisN'
p1566
I190
sS'.thisIndex'
p1567
g46
(g48
S'\xf5\x00\x00\x00'
tRp1568
sg15
(lp1569
S'd'
asg17
S'Y'
sg14
I4
sa(dp1570
g16
(lp1571
S'd'
asg41
I110
sS'.thisRepN'
p1572
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1573
I191
sS'.thisN'
p1574
I191
sS'.thisIndex'
p1575
g46
(g48
S'n\x00\x00\x00'
tRp1576
sg15
(lp1577
S'd'
asg17
S'Y'
sg14
I4
sa(dp1578
g16
(lp1579
S'k'
asg41
I587
sS'.thisRepN'
p1580
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1581
I192
sS'.thisN'
p1582
I192
sS'.thisIndex'
p1583
g46
(g48
S'K\x02\x00\x00'
tRp1584
sg15
(lp1585
S'k'
asg17
S'Y'
sg14
I4
sa(dp1586
g16
(lp1587
S'd'
asg41
I26
sS'.thisRepN'
p1588
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1589
I193
sS'.thisN'
p1590
I193
sS'.thisIndex'
p1591
g46
(g48
S'\x1a\x00\x00\x00'
tRp1592
sg15
(lp1593
S'd'
asg17
S'Y'
sg14
I4
sa(dp1594
g16
(lp1595
S'd'
asg41
I10
sS'.thisRepN'
p1596
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1597
I194
sS'.thisN'
p1598
I194
sS'.thisIndex'
p1599
g46
(g48
S'\n\x00\x00\x00'
tRp1600
sg15
(lp1601
S'd'
asg17
S'Y'
sg14
I4
sa(dp1602
g16
(lp1603
S'd'
asg41
I198
sS'.thisRepN'
p1604
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1605
I195
sS'.thisN'
p1606
I195
sS'.thisIndex'
p1607
g46
(g48
S'\xc6\x00\x00\x00'
tRp1608
sg15
(lp1609
S'd'
asg17
S'Y'
sg14
I4
sa(dp1610
g16
(lp1611
S'k'
asg41
I373
sS'.thisRepN'
p1612
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1613
I196
sS'.thisN'
p1614
I196
sS'.thisIndex'
p1615
g46
(g48
S'u\x01\x00\x00'
tRp1616
sg15
(lp1617
S'k'
asg17
S'Y'
sg14
I4
sa(dp1618
g16
(lp1619
S'd'
asg41
I57
sS'.thisRepN'
p1620
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1621
I197
sS'.thisN'
p1622
I197
sS'.thisIndex'
p1623
g46
(g48
S'9\x00\x00\x00'
tRp1624
sg15
(lp1625
S'd'
asg17
S'Y'
sg14
I4
sa(dp1626
g16
(lp1627
S'd'
asg41
I80
sS'.thisRepN'
p1628
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1629
I198
sS'.thisN'
p1630
I198
sS'.thisIndex'
p1631
g46
(g48
S'P\x00\x00\x00'
tRp1632
sg15
(lp1633
S'd'
asg17
S'Y'
sg14
I4
sa(dp1634
g16
(lp1635
S'd'
asg41
I103
sS'.thisRepN'
p1636
I0
sg25
g26
sg19
S'0'
sS'.thisTrialN'
p1637
I199
sS'.thisN'
p1638
I199
sS'.thisIndex'
p1639
g46
(g48
S'g\x00\x00\x00'
tRp1640
sg15
(lp1641
S'd'
asg18
I49
sg17
S'Y'
sg14
I4
sg27
g28
sa(dp1642
g16
(lp1643
S'k'
asg41
I335
sS'.thisRepN'
p1644
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1645
I200
sS'.thisN'
p1646
I200
sS'.thisIndex'
p1647
g46
(g48
S'O\x01\x00\x00'
tRp1648
sg15
(lp1649
S'k'
asg17
S'Y'
sg14
I5
sa(dp1650
g16
(lp1651
S'd'
asg41
I90
sS'.thisRepN'
p1652
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1653
I201
sS'.thisN'
p1654
I201
sS'.thisIndex'
p1655
g46
(g48
S'Z\x00\x00\x00'
tRp1656
sg15
(lp1657
S'd'
asg17
S'Y'
sg14
I5
sa(dp1658
g16
(lp1659
S'k'
asg41
I561
sS'.thisRepN'
p1660
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1661
I202
sS'.thisN'
p1662
I202
sS'.thisIndex'
p1663
g46
(g48
S'1\x02\x00\x00'
tRp1664
sg15
(lp1665
S'k'
asg17
S'Y'
sg14
I5
sa(dp1666
g16
(lp1667
S'k'
asg41
I525
sS'.thisRepN'
p1668
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1669
I203
sS'.thisN'
p1670
I203
sS'.thisIndex'
p1671
g46
(g48
S'\r\x02\x00\x00'
tRp1672
sg15
(lp1673
S'k'
asg17
S'Y'
sg14
I5
sa(dp1674
g16
(lp1675
S'k'
asg41
I485
sS'.thisRepN'
p1676
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1677
I204
sS'.thisN'
p1678
I204
sS'.thisIndex'
p1679
g46
(g48
S'\xe5\x01\x00\x00'
tRp1680
sg15
(lp1681
S'k'
asg17
S'Y'
sg14
I5
sa(dp1682
g16
(lp1683
S'k'
asg41
I390
sS'.thisRepN'
p1684
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1685
I205
sS'.thisN'
p1686
I205
sS'.thisIndex'
p1687
g46
(g48
S'\x86\x01\x00\x00'
tRp1688
sg15
(lp1689
S'k'
asg17
S'Y'
sg14
I5
sa(dp1690
g16
(lp1691
S'k'
asg41
I396
sS'.thisRepN'
p1692
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1693
I206
sS'.thisN'
p1694
I206
sS'.thisIndex'
p1695
g46
(g48
S'\x8c\x01\x00\x00'
tRp1696
sg15
(lp1697
S'k'
asg17
S'Y'
sg14
I5
sa(dp1698
g16
(lp1699
S'k'
asg41
I461
sS'.thisRepN'
p1700
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1701
I207
sS'.thisN'
p1702
I207
sS'.thisIndex'
p1703
g46
(g48
S'\xcd\x01\x00\x00'
tRp1704
sg15
(lp1705
S'k'
asg17
S'Y'
sg14
I5
sa(dp1706
g16
(lp1707
S'd'
asg41
I227
sS'.thisRepN'
p1708
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1709
I208
sS'.thisN'
p1710
I208
sS'.thisIndex'
p1711
g46
(g48
S'\xe3\x00\x00\x00'
tRp1712
sg15
(lp1713
S'd'
asg17
S'Y'
sg14
I5
sa(dp1714
g16
(lp1715
S'd'
asg41
I264
sS'.thisRepN'
p1716
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1717
I209
sS'.thisN'
p1718
I209
sS'.thisIndex'
p1719
g46
(g48
S'\x08\x01\x00\x00'
tRp1720
sg15
(lp1721
S'd'
asg17
S'Y'
sg14
I5
sa(dp1722
g16
(lp1723
S'k'
asg41
I302
sS'.thisRepN'
p1724
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1725
I210
sS'.thisN'
p1726
I210
sS'.thisIndex'
p1727
g46
(g48
S'.\x01\x00\x00'
tRp1728
sg15
(lp1729
S'k'
asg17
S'Y'
sg14
I5
sa(dp1730
g16
(lp1731
S'd'
asg41
I175
sS'.thisRepN'
p1732
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1733
I211
sS'.thisN'
p1734
I211
sS'.thisIndex'
p1735
g46
(g48
S'\xaf\x00\x00\x00'
tRp1736
sg15
(lp1737
S'k'
asg17
S'N'
sg14
I5
sa(dp1738
g16
(lp1739
S'k'
asg41
I444
sS'.thisRepN'
p1740
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1741
I212
sS'.thisN'
p1742
I212
sS'.thisIndex'
p1743
g46
(g48
S'\xbc\x01\x00\x00'
tRp1744
sg15
(lp1745
S'k'
asg17
S'Y'
sg14
I5
sa(dp1746
g16
(lp1747
S'k'
asg41
I539
sS'.thisRepN'
p1748
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1749
I213
sS'.thisN'
p1750
I213
sS'.thisIndex'
p1751
g46
(g48
S'\x1b\x02\x00\x00'
tRp1752
sg15
(lp1753
S'k'
asg17
S'Y'
sg14
I5
sa(dp1754
g16
(lp1755
S'd'
asg41
I119
sS'.thisRepN'
p1756
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1757
I214
sS'.thisN'
p1758
I214
sS'.thisIndex'
p1759
g46
(g48
S'w\x00\x00\x00'
tRp1760
sg15
(lp1761
S'd'
asg17
S'Y'
sg14
I5
sa(dp1762
g16
(lp1763
S'k'
asg41
I363
sS'.thisRepN'
p1764
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1765
I215
sS'.thisN'
p1766
I215
sS'.thisIndex'
p1767
g46
(g48
S'k\x01\x00\x00'
tRp1768
sg15
(lp1769
S'k'
asg17
S'Y'
sg14
I5
sa(dp1770
g16
(lp1771
S'd'
asg41
I23
sS'.thisRepN'
p1772
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1773
I216
sS'.thisN'
p1774
I216
sS'.thisIndex'
p1775
g46
(g48
S'\x17\x00\x00\x00'
tRp1776
sg15
(lp1777
S'd'
asg17
S'Y'
sg14
I5
sa(dp1778
g16
(lp1779
S'd'
asg41
I190
sS'.thisRepN'
p1780
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1781
I217
sS'.thisN'
p1782
I217
sS'.thisIndex'
p1783
g46
(g48
S'\xbe\x00\x00\x00'
tRp1784
sg15
(lp1785
S'd'
asg17
S'Y'
sg14
I5
sa(dp1786
g16
(lp1787
S'd'
asg41
I202
sS'.thisRepN'
p1788
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1789
I218
sS'.thisN'
p1790
I218
sS'.thisIndex'
p1791
g46
(g48
S'\xca\x00\x00\x00'
tRp1792
sg15
(lp1793
S'd'
asg17
S'Y'
sg14
I5
sa(dp1794
g16
(lp1795
S'k'
asg41
I521
sS'.thisRepN'
p1796
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1797
I219
sS'.thisN'
p1798
I219
sS'.thisIndex'
p1799
g46
(g48
S'\t\x02\x00\x00'
tRp1800
sg15
(lp1801
S'k'
asg17
S'Y'
sg14
I5
sa(dp1802
g16
(lp1803
S'k'
asg41
I403
sS'.thisRepN'
p1804
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1805
I220
sS'.thisN'
p1806
I220
sS'.thisIndex'
p1807
g46
(g48
S'\x93\x01\x00\x00'
tRp1808
sg15
(lp1809
S'd'
asg17
S'N'
sg14
I5
sa(dp1810
g16
(lp1811
S'd'
asg41
I237
sS'.thisRepN'
p1812
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1813
I221
sS'.thisN'
p1814
I221
sS'.thisIndex'
p1815
g46
(g48
S'\xed\x00\x00\x00'
tRp1816
sg15
(lp1817
S'd'
asg17
S'Y'
sg14
I5
sa(dp1818
g16
(lp1819
S'd'
asg41
I147
sS'.thisRepN'
p1820
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1821
I222
sS'.thisN'
p1822
I222
sS'.thisIndex'
p1823
g46
(g48
S'\x93\x00\x00\x00'
tRp1824
sg15
(lp1825
S'd'
asg17
S'Y'
sg14
I5
sa(dp1826
g16
(lp1827
S'k'
asg41
I486
sS'.thisRepN'
p1828
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1829
I223
sS'.thisN'
p1830
I223
sS'.thisIndex'
p1831
g46
(g48
S'\xe6\x01\x00\x00'
tRp1832
sg15
(lp1833
S'k'
asg17
S'Y'
sg14
I5
sa(dp1834
g16
(lp1835
S'k'
asg41
I480
sS'.thisRepN'
p1836
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1837
I224
sS'.thisN'
p1838
I224
sS'.thisIndex'
p1839
g46
(g48
S'\xe0\x01\x00\x00'
tRp1840
sg15
(lp1841
S'k'
asg17
S'Y'
sg14
I5
sa(dp1842
g16
(lp1843
S'd'
asg41
I294
sS'.thisRepN'
p1844
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1845
I225
sS'.thisN'
p1846
I225
sS'.thisIndex'
p1847
g46
(g48
S'&\x01\x00\x00'
tRp1848
sg15
(lp1849
S'd'
asg17
S'Y'
sg14
I5
sa(dp1850
g16
(lp1851
S'd'
asg41
I219
sS'.thisRepN'
p1852
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1853
I226
sS'.thisN'
p1854
I226
sS'.thisIndex'
p1855
g46
(g48
S'\xdb\x00\x00\x00'
tRp1856
sg15
(lp1857
S'd'
asg17
S'Y'
sg14
I5
sa(dp1858
g16
(lp1859
S'd'
asg41
I263
sS'.thisRepN'
p1860
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1861
I227
sS'.thisN'
p1862
I227
sS'.thisIndex'
p1863
g46
(g48
S'\x07\x01\x00\x00'
tRp1864
sg15
(lp1865
S'd'
asg17
S'Y'
sg14
I5
sa(dp1866
g16
(lp1867
S'k'
asg41
I429
sS'.thisRepN'
p1868
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1869
I228
sS'.thisN'
p1870
I228
sS'.thisIndex'
p1871
g46
(g48
S'\xad\x01\x00\x00'
tRp1872
sg15
(lp1873
S'k'
asg17
S'Y'
sg14
I5
sa(dp1874
g16
(lp1875
S'd'
asg41
I131
sS'.thisRepN'
p1876
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1877
I229
sS'.thisN'
p1878
I229
sS'.thisIndex'
p1879
g46
(g48
S'\x83\x00\x00\x00'
tRp1880
sg15
(lp1881
S'd'
asg17
S'Y'
sg14
I5
sa(dp1882
g16
(lp1883
S'd'
asg41
I207
sS'.thisRepN'
p1884
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1885
I230
sS'.thisN'
p1886
I230
sS'.thisIndex'
p1887
g46
(g48
S'\xcf\x00\x00\x00'
tRp1888
sg15
(lp1889
S'd'
asg17
S'Y'
sg14
I5
sa(dp1890
g16
(lp1891
S'k'
asg41
I554
sS'.thisRepN'
p1892
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1893
I231
sS'.thisN'
p1894
I231
sS'.thisIndex'
p1895
g46
(g48
S'*\x02\x00\x00'
tRp1896
sg15
(lp1897
S'k'
asg17
S'Y'
sg14
I5
sa(dp1898
g16
(lp1899
S'd'
asg41
I226
sS'.thisRepN'
p1900
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1901
I232
sS'.thisN'
p1902
I232
sS'.thisIndex'
p1903
g46
(g48
S'\xe2\x00\x00\x00'
tRp1904
sg15
(lp1905
S'd'
asg17
S'Y'
sg14
I5
sa(dp1906
g16
(lp1907
S'k'
asg41
I487
sS'.thisRepN'
p1908
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1909
I233
sS'.thisN'
p1910
I233
sS'.thisIndex'
p1911
g46
(g48
S'\xe7\x01\x00\x00'
tRp1912
sg15
(lp1913
S'k'
asg17
S'Y'
sg14
I5
sa(dp1914
g16
(lp1915
S'k'
asg41
I324
sS'.thisRepN'
p1916
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1917
I234
sS'.thisN'
p1918
I234
sS'.thisIndex'
p1919
g46
(g48
S'D\x01\x00\x00'
tRp1920
sg15
(lp1921
S'd'
asg17
S'N'
sg14
I5
sa(dp1922
g16
(lp1923
S'k'
asg41
I394
sS'.thisRepN'
p1924
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1925
I235
sS'.thisN'
p1926
I235
sS'.thisIndex'
p1927
g46
(g48
S'\x8a\x01\x00\x00'
tRp1928
sg15
(lp1929
S'k'
asg17
S'Y'
sg14
I5
sa(dp1930
g16
(lp1931
S'd'
asg41
I165
sS'.thisRepN'
p1932
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1933
I236
sS'.thisN'
p1934
I236
sS'.thisIndex'
p1935
g46
(g48
S'\xa5\x00\x00\x00'
tRp1936
sg15
(lp1937
S'd'
asg17
S'Y'
sg14
I5
sa(dp1938
g16
(lp1939
S'k'
asg41
I405
sS'.thisRepN'
p1940
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1941
I237
sS'.thisN'
p1942
I237
sS'.thisIndex'
p1943
g46
(g48
S'\x95\x01\x00\x00'
tRp1944
sg15
(lp1945
S'k'
asg17
S'Y'
sg14
I5
sa(dp1946
g16
(lp1947
S'd'
asg41
I77
sS'.thisRepN'
p1948
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1949
I238
sS'.thisN'
p1950
I238
sS'.thisIndex'
p1951
g46
(g48
S'M\x00\x00\x00'
tRp1952
sg15
(lp1953
S'd'
asg17
S'Y'
sg14
I5
sa(dp1954
g16
(lp1955
S'd'
asg41
I223
sS'.thisRepN'
p1956
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1957
I239
sS'.thisN'
p1958
I239
sS'.thisIndex'
p1959
g46
(g48
S'\xdf\x00\x00\x00'
tRp1960
sg15
(lp1961
S'd'
asg17
S'Y'
sg14
I5
sa(dp1962
g16
(lp1963
S'd'
asg41
I176
sS'.thisRepN'
p1964
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1965
I240
sS'.thisN'
p1966
I240
sS'.thisIndex'
p1967
g46
(g48
S'\xb0\x00\x00\x00'
tRp1968
sg15
(lp1969
S'd'
asg17
S'Y'
sg14
I5
sa(dp1970
g16
(lp1971
S'd'
asg41
I299
sS'.thisRepN'
p1972
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1973
I241
sS'.thisN'
p1974
I241
sS'.thisIndex'
p1975
g46
(g48
S'+\x01\x00\x00'
tRp1976
sg15
(lp1977
S'd'
asg17
S'Y'
sg14
I5
sa(dp1978
g16
(lp1979
S'd'
asg41
I199
sS'.thisRepN'
p1980
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1981
I242
sS'.thisN'
p1982
I242
sS'.thisIndex'
p1983
g46
(g48
S'\xc7\x00\x00\x00'
tRp1984
sg15
(lp1985
S'd'
asg17
S'Y'
sg14
I5
sa(dp1986
g16
(lp1987
S'k'
asg41
I382
sS'.thisRepN'
p1988
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1989
I243
sS'.thisN'
p1990
I243
sS'.thisIndex'
p1991
g46
(g48
S'~\x01\x00\x00'
tRp1992
sg15
(lp1993
S'k'
asg17
S'Y'
sg14
I5
sa(dp1994
g16
(lp1995
S'k'
asg41
I569
sS'.thisRepN'
p1996
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p1997
I244
sS'.thisN'
p1998
I244
sS'.thisIndex'
p1999
g46
(g48
S'9\x02\x00\x00'
tRp2000
sg15
(lp2001
S'k'
asg17
S'Y'
sg14
I5
sa(dp2002
g16
(lp2003
S'd'
asg41
I169
sS'.thisRepN'
p2004
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2005
I245
sS'.thisN'
p2006
I245
sS'.thisIndex'
p2007
g46
(g48
S'\xa9\x00\x00\x00'
tRp2008
sg15
(lp2009
S'd'
asg17
S'Y'
sg14
I5
sa(dp2010
g16
(lp2011
S'd'
asg41
I240
sS'.thisRepN'
p2012
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2013
I246
sS'.thisN'
p2014
I246
sS'.thisIndex'
p2015
g46
(g48
S'\xf0\x00\x00\x00'
tRp2016
sg15
(lp2017
S'd'
asg17
S'Y'
sg14
I5
sa(dp2018
g16
(lp2019
S'd'
asg41
I168
sS'.thisRepN'
p2020
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2021
I247
sS'.thisN'
p2022
I247
sS'.thisIndex'
p2023
g46
(g48
S'\xa8\x00\x00\x00'
tRp2024
sg15
(lp2025
S'd'
asg17
S'Y'
sg14
I5
sa(dp2026
g16
(lp2027
S'k'
asg41
I477
sS'.thisRepN'
p2028
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2029
I248
sS'.thisN'
p2030
I248
sS'.thisIndex'
p2031
g46
(g48
S'\xdd\x01\x00\x00'
tRp2032
sg15
(lp2033
S'k'
asg17
S'Y'
sg14
I5
sa(dp2034
g16
(lp2035
S'k'
asg41
I562
sS'.thisRepN'
p2036
I0
sg25
g26
sg19
S'0'
sS'.thisTrialN'
p2037
I249
sS'.thisN'
p2038
I249
sS'.thisIndex'
p2039
g46
(g48
S'2\x02\x00\x00'
tRp2040
sg15
(lp2041
S'k'
asg18
I47
sg17
S'Y'
sg14
I5
sg27
g28
sa(dp2042
g16
(lp2043
S'k'
asg41
I515
sS'.thisRepN'
p2044
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2045
I250
sS'.thisN'
p2046
I250
sS'.thisIndex'
p2047
g46
(g48
S'\x03\x02\x00\x00'
tRp2048
sg15
(lp2049
S'k'
asg17
S'Y'
sg14
I6
sa(dp2050
g16
(lp2051
S'k'
asg41
I364
sS'.thisRepN'
p2052
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2053
I251
sS'.thisN'
p2054
I251
sS'.thisIndex'
p2055
g46
(g48
S'l\x01\x00\x00'
tRp2056
sg15
(lp2057
S'k'
asg17
S'Y'
sg14
I6
sa(dp2058
g16
(lp2059
S'd'
asg41
I172
sS'.thisRepN'
p2060
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2061
I252
sS'.thisN'
p2062
I252
sS'.thisIndex'
p2063
g46
(g48
S'\xac\x00\x00\x00'
tRp2064
sg15
(lp2065
S'd'
asg17
S'Y'
sg14
I6
sa(dp2066
g16
(lp2067
S'k'
asg41
I423
sS'.thisRepN'
p2068
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2069
I253
sS'.thisN'
p2070
I253
sS'.thisIndex'
p2071
g46
(g48
S'\xa7\x01\x00\x00'
tRp2072
sg15
(lp2073
S'k'
asg17
S'Y'
sg14
I6
sa(dp2074
g16
(lp2075
S'd'
asg41
I112
sS'.thisRepN'
p2076
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2077
I254
sS'.thisN'
p2078
I254
sS'.thisIndex'
p2079
g46
(g48
S'p\x00\x00\x00'
tRp2080
sg15
(lp2081
S'd'
asg17
S'Y'
sg14
I6
sa(dp2082
g16
(lp2083
S'k'
asg41
I508
sS'.thisRepN'
p2084
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2085
I255
sS'.thisN'
p2086
I255
sS'.thisIndex'
p2087
g46
(g48
S'\xfc\x01\x00\x00'
tRp2088
sg15
(lp2089
S'k'
asg17
S'Y'
sg14
I6
sa(dp2090
g16
(lp2091
S'k'
asg41
I519
sS'.thisRepN'
p2092
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2093
I256
sS'.thisN'
p2094
I256
sS'.thisIndex'
p2095
g46
(g48
S'\x07\x02\x00\x00'
tRp2096
sg15
(lp2097
S'k'
asg17
S'Y'
sg14
I6
sa(dp2098
g16
(lp2099
S'd'
asg41
I298
sS'.thisRepN'
p2100
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2101
I257
sS'.thisN'
p2102
I257
sS'.thisIndex'
p2103
g46
(g48
S'*\x01\x00\x00'
tRp2104
sg15
(lp2105
S'd'
asg17
S'Y'
sg14
I6
sa(dp2106
g16
(lp2107
S'd'
asg41
I76
sS'.thisRepN'
p2108
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2109
I258
sS'.thisN'
p2110
I258
sS'.thisIndex'
p2111
g46
(g48
S'L\x00\x00\x00'
tRp2112
sg15
(lp2113
S'd'
asg17
S'Y'
sg14
I6
sa(dp2114
g16
(lp2115
S'k'
asg41
I584
sS'.thisRepN'
p2116
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2117
I259
sS'.thisN'
p2118
I259
sS'.thisIndex'
p2119
g46
(g48
S'H\x02\x00\x00'
tRp2120
sg15
(lp2121
S'k'
asg17
S'Y'
sg14
I6
sa(dp2122
g16
(lp2123
S'k'
asg41
I435
sS'.thisRepN'
p2124
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2125
I260
sS'.thisN'
p2126
I260
sS'.thisIndex'
p2127
g46
(g48
S'\xb3\x01\x00\x00'
tRp2128
sg15
(lp2129
S'k'
asg17
S'Y'
sg14
I6
sa(dp2130
g16
(lp2131
S'k'
asg41
I491
sS'.thisRepN'
p2132
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2133
I261
sS'.thisN'
p2134
I261
sS'.thisIndex'
p2135
g46
(g48
S'\xeb\x01\x00\x00'
tRp2136
sg15
(lp2137
S'd'
asg17
S'N'
sg14
I6
sa(dp2138
g16
(lp2139
S'd'
asg41
I20
sS'.thisRepN'
p2140
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2141
I262
sS'.thisN'
p2142
I262
sS'.thisIndex'
p2143
g46
(g48
S'\x14\x00\x00\x00'
tRp2144
sg15
(lp2145
S'd'
asg17
S'Y'
sg14
I6
sa(dp2146
g16
(lp2147
S'd'
asg41
I88
sS'.thisRepN'
p2148
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2149
I263
sS'.thisN'
p2150
I263
sS'.thisIndex'
p2151
g46
(g48
S'X\x00\x00\x00'
tRp2152
sg15
(lp2153
S'd'
asg17
S'Y'
sg14
I6
sa(dp2154
g16
(lp2155
S'k'
asg41
I574
sS'.thisRepN'
p2156
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2157
I264
sS'.thisN'
p2158
I264
sS'.thisIndex'
p2159
g46
(g48
S'>\x02\x00\x00'
tRp2160
sg15
(lp2161
S'k'
asg17
S'Y'
sg14
I6
sa(dp2162
g16
(lp2163
S'd'
asg41
I271
sS'.thisRepN'
p2164
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2165
I265
sS'.thisN'
p2166
I265
sS'.thisIndex'
p2167
g46
(g48
S'\x0f\x01\x00\x00'
tRp2168
sg15
(lp2169
S'd'
asg17
S'Y'
sg14
I6
sa(dp2170
g16
(lp2171
S'k'
asg41
I328
sS'.thisRepN'
p2172
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2173
I266
sS'.thisN'
p2174
I266
sS'.thisIndex'
p2175
g46
(g48
S'H\x01\x00\x00'
tRp2176
sg15
(lp2177
S'k'
asg17
S'Y'
sg14
I6
sa(dp2178
g16
(lp2179
S'd'
asg41
I252
sS'.thisRepN'
p2180
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2181
I267
sS'.thisN'
p2182
I267
sS'.thisIndex'
p2183
g46
(g48
S'\xfc\x00\x00\x00'
tRp2184
sg15
(lp2185
S'k'
asg17
S'N'
sg14
I6
sa(dp2186
g16
(lp2187
S'k'
asg41
I410
sS'.thisRepN'
p2188
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2189
I268
sS'.thisN'
p2190
I268
sS'.thisIndex'
p2191
g46
(g48
S'\x9a\x01\x00\x00'
tRp2192
sg15
(lp2193
S'k'
asg17
S'Y'
sg14
I6
sa(dp2194
g16
(lp2195
S'k'
asg41
I541
sS'.thisRepN'
p2196
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2197
I269
sS'.thisN'
p2198
I269
sS'.thisIndex'
p2199
g46
(g48
S'\x1d\x02\x00\x00'
tRp2200
sg15
(lp2201
S'k'
asg17
S'Y'
sg14
I6
sa(dp2202
g16
(lp2203
S'd'
asg41
I297
sS'.thisRepN'
p2204
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2205
I270
sS'.thisN'
p2206
I270
sS'.thisIndex'
p2207
g46
(g48
S')\x01\x00\x00'
tRp2208
sg15
(lp2209
S'd'
asg17
S'Y'
sg14
I6
sa(dp2210
g16
(lp2211
S'k'
asg41
I336
sS'.thisRepN'
p2212
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2213
I271
sS'.thisN'
p2214
I271
sS'.thisIndex'
p2215
g46
(g48
S'P\x01\x00\x00'
tRp2216
sg15
(lp2217
S'k'
asg17
S'Y'
sg14
I6
sa(dp2218
g16
(lp2219
S'k'
asg41
I338
sS'.thisRepN'
p2220
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2221
I272
sS'.thisN'
p2222
I272
sS'.thisIndex'
p2223
g46
(g48
S'R\x01\x00\x00'
tRp2224
sg15
(lp2225
S'k'
asg17
S'Y'
sg14
I6
sa(dp2226
g16
(lp2227
S'd'
asg41
I155
sS'.thisRepN'
p2228
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2229
I273
sS'.thisN'
p2230
I273
sS'.thisIndex'
p2231
g46
(g48
S'\x9b\x00\x00\x00'
tRp2232
sg15
(lp2233
S'd'
asg17
S'Y'
sg14
I6
sa(dp2234
g16
(lp2235
S'k'
asg41
I344
sS'.thisRepN'
p2236
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2237
I274
sS'.thisN'
p2238
I274
sS'.thisIndex'
p2239
g46
(g48
S'X\x01\x00\x00'
tRp2240
sg15
(lp2241
S'k'
asg17
S'Y'
sg14
I6
sa(dp2242
g16
(lp2243
S'd'
asg41
I258
sS'.thisRepN'
p2244
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2245
I275
sS'.thisN'
p2246
I275
sS'.thisIndex'
p2247
g46
(g48
S'\x02\x01\x00\x00'
tRp2248
sg15
(lp2249
S'd'
asg17
S'Y'
sg14
I6
sa(dp2250
g16
(lp2251
S'k'
asg41
I442
sS'.thisRepN'
p2252
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2253
I276
sS'.thisN'
p2254
I276
sS'.thisIndex'
p2255
g46
(g48
S'\xba\x01\x00\x00'
tRp2256
sg15
(lp2257
S'k'
asg17
S'Y'
sg14
I6
sa(dp2258
g41
I234
sS'.thisN'
p2259
I277
sg25
g26
sg27
g28
sS'.thisTrialN'
p2260
I277
sS'.thisRepN'
p2261
I0
sS'.thisIndex'
p2262
g46
(g48
S'\xea\x00\x00\x00'
tRp2263
sg15
Nsg17
g1497
sg14
I6
sa(dp2264
g41
I217
sS'.thisN'
p2265
I278
sg25
g26
sg27
g28
sS'.thisTrialN'
p2266
I278
sS'.thisRepN'
p2267
I0
sS'.thisIndex'
p2268
g46
(g48
S'\xd9\x00\x00\x00'
tRp2269
sg15
Nsg17
g1497
sg14
I6
sa(dp2270
g16
(lp2271
S'k'
asg41
I415
sS'.thisRepN'
p2272
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2273
I279
sS'.thisN'
p2274
I279
sS'.thisIndex'
p2275
g46
(g48
S'\x9f\x01\x00\x00'
tRp2276
sg15
(lp2277
S'k'
asg17
S'Y'
sg14
I6
sa(dp2278
g16
(lp2279
S'd'
asg41
I133
sS'.thisRepN'
p2280
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2281
I280
sS'.thisN'
p2282
I280
sS'.thisIndex'
p2283
g46
(g48
S'\x85\x00\x00\x00'
tRp2284
sg15
(lp2285
S'd'
asg17
S'Y'
sg14
I6
sa(dp2286
g16
(lp2287
S'd'
asg41
I56
sS'.thisRepN'
p2288
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2289
I281
sS'.thisN'
p2290
I281
sS'.thisIndex'
p2291
g46
(g48
S'8\x00\x00\x00'
tRp2292
sg15
(lp2293
S'd'
asg17
S'Y'
sg14
I6
sa(dp2294
g16
(lp2295
S'k'
asg41
I419
sS'.thisRepN'
p2296
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2297
I282
sS'.thisN'
p2298
I282
sS'.thisIndex'
p2299
g46
(g48
S'\xa3\x01\x00\x00'
tRp2300
sg15
(lp2301
S'k'
asg17
S'Y'
sg14
I6
sa(dp2302
g16
(lp2303
S'd'
asg41
I178
sS'.thisRepN'
p2304
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2305
I283
sS'.thisN'
p2306
I283
sS'.thisIndex'
p2307
g46
(g48
S'\xb2\x00\x00\x00'
tRp2308
sg15
(lp2309
S'd'
asg17
S'Y'
sg14
I6
sa(dp2310
g16
(lp2311
S'k'
asg41
I343
sS'.thisRepN'
p2312
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2313
I284
sS'.thisN'
p2314
I284
sS'.thisIndex'
p2315
g46
(g48
S'W\x01\x00\x00'
tRp2316
sg15
(lp2317
S'k'
asg17
S'Y'
sg14
I6
sa(dp2318
g16
(lp2319
S'd'
asg41
I82
sS'.thisRepN'
p2320
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2321
I285
sS'.thisN'
p2322
I285
sS'.thisIndex'
p2323
g46
(g48
S'R\x00\x00\x00'
tRp2324
sg15
(lp2325
S'd'
asg17
S'Y'
sg14
I6
sa(dp2326
g16
(lp2327
S'd'
asg41
I171
sS'.thisRepN'
p2328
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2329
I286
sS'.thisN'
p2330
I286
sS'.thisIndex'
p2331
g46
(g48
S'\xab\x00\x00\x00'
tRp2332
sg15
(lp2333
S'd'
asg17
S'Y'
sg14
I6
sa(dp2334
g16
(lp2335
S'k'
asg41
I414
sS'.thisRepN'
p2336
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2337
I287
sS'.thisN'
p2338
I287
sS'.thisIndex'
p2339
g46
(g48
S'\x9e\x01\x00\x00'
tRp2340
sg15
(lp2341
S'k'
asg17
S'Y'
sg14
I6
sa(dp2342
g16
(lp2343
S'd'
asg41
I156
sS'.thisRepN'
p2344
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2345
I288
sS'.thisN'
p2346
I288
sS'.thisIndex'
p2347
g46
(g48
S'\x9c\x00\x00\x00'
tRp2348
sg15
(lp2349
S'd'
asg17
S'Y'
sg14
I6
sa(dp2350
g16
(lp2351
S'd'
asg41
I89
sS'.thisRepN'
p2352
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2353
I289
sS'.thisN'
p2354
I289
sS'.thisIndex'
p2355
g46
(g48
S'Y\x00\x00\x00'
tRp2356
sg15
(lp2357
S'd'
asg17
S'Y'
sg14
I6
sa(dp2358
g16
(lp2359
S'k'
asg41
I450
sS'.thisRepN'
p2360
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2361
I290
sS'.thisN'
p2362
I290
sS'.thisIndex'
p2363
g46
(g48
S'\xc2\x01\x00\x00'
tRp2364
sg15
(lp2365
S'k'
asg17
S'Y'
sg14
I6
sa(dp2366
g16
(lp2367
S'k'
asg41
I537
sS'.thisRepN'
p2368
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2369
I291
sS'.thisN'
p2370
I291
sS'.thisIndex'
p2371
g46
(g48
S'\x19\x02\x00\x00'
tRp2372
sg15
(lp2373
S'k'
asg17
S'Y'
sg14
I6
sa(dp2374
g16
(lp2375
S'd'
asg41
I221
sS'.thisRepN'
p2376
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2377
I292
sS'.thisN'
p2378
I292
sS'.thisIndex'
p2379
g46
(g48
S'\xdd\x00\x00\x00'
tRp2380
sg15
(lp2381
S'd'
asg17
S'Y'
sg14
I6
sa(dp2382
g16
(lp2383
S'k'
asg41
I325
sS'.thisRepN'
p2384
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2385
I293
sS'.thisN'
p2386
I293
sS'.thisIndex'
p2387
g46
(g48
S'E\x01\x00\x00'
tRp2388
sg15
(lp2389
S'k'
asg17
S'Y'
sg14
I6
sa(dp2390
g16
(lp2391
S'd'
asg41
I128
sS'.thisRepN'
p2392
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2393
I294
sS'.thisN'
p2394
I294
sS'.thisIndex'
p2395
g46
(g48
S'\x80\x00\x00\x00'
tRp2396
sg15
(lp2397
S'd'
asg17
S'Y'
sg14
I6
sa(dp2398
g16
(lp2399
S'k'
asg41
I359
sS'.thisRepN'
p2400
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2401
I295
sS'.thisN'
p2402
I295
sS'.thisIndex'
p2403
g46
(g48
S'g\x01\x00\x00'
tRp2404
sg15
(lp2405
S'k'
asg17
S'Y'
sg14
I6
sa(dp2406
g16
(lp2407
S'k'
asg41
I572
sS'.thisRepN'
p2408
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2409
I296
sS'.thisN'
p2410
I296
sS'.thisIndex'
p2411
g46
(g48
S'<\x02\x00\x00'
tRp2412
sg15
(lp2413
S'k'
asg17
S'Y'
sg14
I6
sa(dp2414
g16
(lp2415
S'k'
asg41
I528
sS'.thisRepN'
p2416
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2417
I297
sS'.thisN'
p2418
I297
sS'.thisIndex'
p2419
g46
(g48
S'\x10\x02\x00\x00'
tRp2420
sg15
(lp2421
S'k'
asg17
S'Y'
sg14
I6
sa(dp2422
g16
(lp2423
S'd'
asg41
I267
sS'.thisRepN'
p2424
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2425
I298
sS'.thisN'
p2426
I298
sS'.thisIndex'
p2427
g46
(g48
S'\x0b\x01\x00\x00'
tRp2428
sg15
(lp2429
S'd'
asg17
S'Y'
sg14
I6
sa(dp2430
g16
(lp2431
S'k'
asg41
I467
sS'.thisRepN'
p2432
I0
sg25
g26
sg19
S'0'
sS'.thisTrialN'
p2433
I299
sS'.thisN'
p2434
I299
sS'.thisIndex'
p2435
g46
(g48
S'\xd3\x01\x00\x00'
tRp2436
sg15
(lp2437
S'k'
asg18
I46
sg17
S'Y'
sg14
I6
sg27
g28
sa(dp2438
g16
(lp2439
S'd'
asg41
I211
sS'.thisRepN'
p2440
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2441
I300
sS'.thisN'
p2442
I300
sS'.thisIndex'
p2443
g46
(g48
S'\xd3\x00\x00\x00'
tRp2444
sg15
(lp2445
S'd'
asg17
S'Y'
sg14
I7
sa(dp2446
g16
(lp2447
S'd'
asg41
I256
sS'.thisRepN'
p2448
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2449
I301
sS'.thisN'
p2450
I301
sS'.thisIndex'
p2451
g46
(g48
S'\x00\x01\x00\x00'
tRp2452
sg15
(lp2453
S'd'
asg17
S'Y'
sg14
I7
sa(dp2454
g16
(lp2455
S'k'
asg41
I365
sS'.thisRepN'
p2456
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2457
I302
sS'.thisN'
p2458
I302
sS'.thisIndex'
p2459
g46
(g48
S'm\x01\x00\x00'
tRp2460
sg15
(lp2461
S'k'
asg17
S'Y'
sg14
I7
sa(dp2462
g16
(lp2463
S'd'
asg41
I60
sS'.thisRepN'
p2464
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2465
I303
sS'.thisN'
p2466
I303
sS'.thisIndex'
p2467
g46
(g48
S'<\x00\x00\x00'
tRp2468
sg15
(lp2469
S'd'
asg17
S'Y'
sg14
I7
sa(dp2470
g16
(lp2471
S'k'
asg41
I310
sS'.thisRepN'
p2472
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2473
I304
sS'.thisN'
p2474
I304
sS'.thisIndex'
p2475
g46
(g48
S'6\x01\x00\x00'
tRp2476
sg15
(lp2477
S'k'
asg17
S'Y'
sg14
I7
sa(dp2478
g16
(lp2479
S'k'
asg41
I455
sS'.thisRepN'
p2480
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2481
I305
sS'.thisN'
p2482
I305
sS'.thisIndex'
p2483
g46
(g48
S'\xc7\x01\x00\x00'
tRp2484
sg15
(lp2485
S'k'
asg17
S'Y'
sg14
I7
sa(dp2486
g16
(lp2487
S'd'
asg41
I188
sS'.thisRepN'
p2488
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2489
I306
sS'.thisN'
p2490
I306
sS'.thisIndex'
p2491
g46
(g48
S'\xbc\x00\x00\x00'
tRp2492
sg15
(lp2493
S'd'
asg17
S'Y'
sg14
I7
sa(dp2494
g16
(lp2495
S'd'
asg41
I150
sS'.thisRepN'
p2496
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2497
I307
sS'.thisN'
p2498
I307
sS'.thisIndex'
p2499
g46
(g48
S'\x96\x00\x00\x00'
tRp2500
sg15
(lp2501
S'd'
asg17
S'Y'
sg14
I7
sa(dp2502
g16
(lp2503
S'd'
asg41
I144
sS'.thisRepN'
p2504
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2505
I308
sS'.thisN'
p2506
I308
sS'.thisIndex'
p2507
g46
(g48
S'\x90\x00\x00\x00'
tRp2508
sg15
(lp2509
S'd'
asg17
S'Y'
sg14
I7
sa(dp2510
g16
(lp2511
S'k'
asg41
I588
sS'.thisRepN'
p2512
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2513
I309
sS'.thisN'
p2514
I309
sS'.thisIndex'
p2515
g46
(g48
S'L\x02\x00\x00'
tRp2516
sg15
(lp2517
S'k'
asg17
S'Y'
sg14
I7
sa(dp2518
g16
(lp2519
S'd'
asg41
I53
sS'.thisRepN'
p2520
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2521
I310
sS'.thisN'
p2522
I310
sS'.thisIndex'
p2523
g46
(g48
S'5\x00\x00\x00'
tRp2524
sg15
(lp2525
S'd'
asg17
S'Y'
sg14
I7
sa(dp2526
g16
(lp2527
S'd'
asg41
I242
sS'.thisRepN'
p2528
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2529
I311
sS'.thisN'
p2530
I311
sS'.thisIndex'
p2531
g46
(g48
S'\xf2\x00\x00\x00'
tRp2532
sg15
(lp2533
S'd'
asg17
S'Y'
sg14
I7
sa(dp2534
g16
(lp2535
S'k'
asg41
I353
sS'.thisRepN'
p2536
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2537
I312
sS'.thisN'
p2538
I312
sS'.thisIndex'
p2539
g46
(g48
S'a\x01\x00\x00'
tRp2540
sg15
(lp2541
S'k'
asg17
S'Y'
sg14
I7
sa(dp2542
g16
(lp2543
S'd'
asg41
I136
sS'.thisRepN'
p2544
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2545
I313
sS'.thisN'
p2546
I313
sS'.thisIndex'
p2547
g46
(g48
S'\x88\x00\x00\x00'
tRp2548
sg15
(lp2549
S'd'
asg17
S'Y'
sg14
I7
sa(dp2550
g16
(lp2551
S'k'
asg41
I445
sS'.thisRepN'
p2552
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2553
I314
sS'.thisN'
p2554
I314
sS'.thisIndex'
p2555
g46
(g48
S'\xbd\x01\x00\x00'
tRp2556
sg15
(lp2557
S'k'
asg17
S'Y'
sg14
I7
sa(dp2558
g16
(lp2559
S'k'
asg41
I311
sS'.thisRepN'
p2560
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2561
I315
sS'.thisN'
p2562
I315
sS'.thisIndex'
p2563
g46
(g48
S'7\x01\x00\x00'
tRp2564
sg15
(lp2565
S'k'
asg17
S'Y'
sg14
I7
sa(dp2566
g16
(lp2567
S'd'
asg41
I166
sS'.thisRepN'
p2568
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2569
I316
sS'.thisN'
p2570
I316
sS'.thisIndex'
p2571
g46
(g48
S'\xa6\x00\x00\x00'
tRp2572
sg15
(lp2573
S'd'
asg17
S'Y'
sg14
I7
sa(dp2574
g16
(lp2575
S'd'
asg41
I40
sS'.thisRepN'
p2576
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2577
I317
sS'.thisN'
p2578
I317
sS'.thisIndex'
p2579
g46
(g48
S'(\x00\x00\x00'
tRp2580
sg15
(lp2581
S'd'
asg17
S'Y'
sg14
I7
sa(dp2582
g16
(lp2583
S'k'
asg41
I309
sS'.thisRepN'
p2584
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2585
I318
sS'.thisN'
p2586
I318
sS'.thisIndex'
p2587
g46
(g48
S'5\x01\x00\x00'
tRp2588
sg15
(lp2589
S'k'
asg17
S'Y'
sg14
I7
sa(dp2590
g16
(lp2591
S'd'
asg41
I6
sS'.thisRepN'
p2592
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2593
I319
sS'.thisN'
p2594
I319
sS'.thisIndex'
p2595
g46
(g48
S'\x06\x00\x00\x00'
tRp2596
sg15
(lp2597
S'k'
asg17
S'N'
sg14
I7
sa(dp2598
g16
(lp2599
S'd'
asg41
I228
sS'.thisRepN'
p2600
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2601
I320
sS'.thisN'
p2602
I320
sS'.thisIndex'
p2603
g46
(g48
S'\xe4\x00\x00\x00'
tRp2604
sg15
(lp2605
S'd'
asg17
S'Y'
sg14
I7
sa(dp2606
g16
(lp2607
S'd'
asg41
I48
sS'.thisRepN'
p2608
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2609
I321
sS'.thisN'
p2610
I321
sS'.thisIndex'
p2611
g46
(g48
S'0\x00\x00\x00'
tRp2612
sg15
(lp2613
S'd'
asg17
S'Y'
sg14
I7
sa(dp2614
g16
(lp2615
S'k'
asg41
I383
sS'.thisRepN'
p2616
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2617
I322
sS'.thisN'
p2618
I322
sS'.thisIndex'
p2619
g46
(g48
S'\x7f\x01\x00\x00'
tRp2620
sg15
(lp2621
S'k'
asg17
S'Y'
sg14
I7
sa(dp2622
g16
(lp2623
S'k'
asg41
I385
sS'.thisRepN'
p2624
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2625
I323
sS'.thisN'
p2626
I323
sS'.thisIndex'
p2627
g46
(g48
S'\x81\x01\x00\x00'
tRp2628
sg15
(lp2629
S'k'
asg17
S'Y'
sg14
I7
sa(dp2630
g16
(lp2631
S'k'
asg41
I558
sS'.thisRepN'
p2632
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2633
I324
sS'.thisN'
p2634
I324
sS'.thisIndex'
p2635
g46
(g48
S'.\x02\x00\x00'
tRp2636
sg15
(lp2637
S'k'
asg17
S'Y'
sg14
I7
sa(dp2638
g16
(lp2639
S'k'
asg41
I437
sS'.thisRepN'
p2640
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2641
I325
sS'.thisN'
p2642
I325
sS'.thisIndex'
p2643
g46
(g48
S'\xb5\x01\x00\x00'
tRp2644
sg15
(lp2645
S'k'
asg17
S'Y'
sg14
I7
sa(dp2646
g16
(lp2647
S'k'
asg41
I387
sS'.thisRepN'
p2648
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2649
I326
sS'.thisN'
p2650
I326
sS'.thisIndex'
p2651
g46
(g48
S'\x83\x01\x00\x00'
tRp2652
sg15
(lp2653
S'k'
asg17
S'Y'
sg14
I7
sa(dp2654
g16
(lp2655
S'k'
asg41
I516
sS'.thisRepN'
p2656
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2657
I327
sS'.thisN'
p2658
I327
sS'.thisIndex'
p2659
g46
(g48
S'\x04\x02\x00\x00'
tRp2660
sg15
(lp2661
S'k'
asg17
S'Y'
sg14
I7
sa(dp2662
g16
(lp2663
S'k'
asg41
I555
sS'.thisRepN'
p2664
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2665
I328
sS'.thisN'
p2666
I328
sS'.thisIndex'
p2667
g46
(g48
S'+\x02\x00\x00'
tRp2668
sg15
(lp2669
S'k'
asg17
S'Y'
sg14
I7
sa(dp2670
g16
(lp2671
S'k'
asg41
I492
sS'.thisRepN'
p2672
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2673
I329
sS'.thisN'
p2674
I329
sS'.thisIndex'
p2675
g46
(g48
S'\xec\x01\x00\x00'
tRp2676
sg15
(lp2677
S'k'
asg17
S'Y'
sg14
I7
sa(dp2678
g16
(lp2679
S'd'
asg41
I257
sS'.thisRepN'
p2680
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2681
I330
sS'.thisN'
p2682
I330
sS'.thisIndex'
p2683
g46
(g48
S'\x01\x01\x00\x00'
tRp2684
sg15
(lp2685
S'd'
asg17
S'Y'
sg14
I7
sa(dp2686
g16
(lp2687
S'd'
asg41
I37
sS'.thisRepN'
p2688
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2689
I331
sS'.thisN'
p2690
I331
sS'.thisIndex'
p2691
g46
(g48
S'%\x00\x00\x00'
tRp2692
sg15
(lp2693
S'd'
asg17
S'Y'
sg14
I7
sa(dp2694
g16
(lp2695
S'd'
asg41
I247
sS'.thisRepN'
p2696
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2697
I332
sS'.thisN'
p2698
I332
sS'.thisIndex'
p2699
g46
(g48
S'\xf7\x00\x00\x00'
tRp2700
sg15
(lp2701
S'd'
asg17
S'Y'
sg14
I7
sa(dp2702
g16
(lp2703
S'd'
asg41
I248
sS'.thisRepN'
p2704
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2705
I333
sS'.thisN'
p2706
I333
sS'.thisIndex'
p2707
g46
(g48
S'\xf8\x00\x00\x00'
tRp2708
sg15
(lp2709
S'd'
asg17
S'Y'
sg14
I7
sa(dp2710
g16
(lp2711
S'd'
asg41
I151
sS'.thisRepN'
p2712
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2713
I334
sS'.thisN'
p2714
I334
sS'.thisIndex'
p2715
g46
(g48
S'\x97\x00\x00\x00'
tRp2716
sg15
(lp2717
S'd'
asg17
S'Y'
sg14
I7
sa(dp2718
g16
(lp2719
S'k'
asg41
I498
sS'.thisRepN'
p2720
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2721
I335
sS'.thisN'
p2722
I335
sS'.thisIndex'
p2723
g46
(g48
S'\xf2\x01\x00\x00'
tRp2724
sg15
(lp2725
S'k'
asg17
S'Y'
sg14
I7
sa(dp2726
g16
(lp2727
S'd'
asg41
I167
sS'.thisRepN'
p2728
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2729
I336
sS'.thisN'
p2730
I336
sS'.thisIndex'
p2731
g46
(g48
S'\xa7\x00\x00\x00'
tRp2732
sg15
(lp2733
S'd'
asg17
S'Y'
sg14
I7
sa(dp2734
g16
(lp2735
S'k'
asg41
I469
sS'.thisRepN'
p2736
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2737
I337
sS'.thisN'
p2738
I337
sS'.thisIndex'
p2739
g46
(g48
S'\xd5\x01\x00\x00'
tRp2740
sg15
(lp2741
S'k'
asg17
S'Y'
sg14
I7
sa(dp2742
g16
(lp2743
S'k'
asg41
I440
sS'.thisRepN'
p2744
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2745
I338
sS'.thisN'
p2746
I338
sS'.thisIndex'
p2747
g46
(g48
S'\xb8\x01\x00\x00'
tRp2748
sg15
(lp2749
S'k'
asg17
S'Y'
sg14
I7
sa(dp2750
g16
(lp2751
S'd'
asg41
I220
sS'.thisRepN'
p2752
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2753
I339
sS'.thisN'
p2754
I339
sS'.thisIndex'
p2755
g46
(g48
S'\xdc\x00\x00\x00'
tRp2756
sg15
(lp2757
S'd'
asg17
S'Y'
sg14
I7
sa(dp2758
g16
(lp2759
S'd'
asg41
I35
sS'.thisRepN'
p2760
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2761
I340
sS'.thisN'
p2762
I340
sS'.thisIndex'
p2763
g46
(g48
S'#\x00\x00\x00'
tRp2764
sg15
(lp2765
S'd'
asg17
S'Y'
sg14
I7
sa(dp2766
g16
(lp2767
S'k'
asg41
I388
sS'.thisRepN'
p2768
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2769
I341
sS'.thisN'
p2770
I341
sS'.thisIndex'
p2771
g46
(g48
S'\x84\x01\x00\x00'
tRp2772
sg15
(lp2773
S'k'
asg17
S'Y'
sg14
I7
sa(dp2774
g16
(lp2775
S'd'
asg41
I18
sS'.thisRepN'
p2776
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2777
I342
sS'.thisN'
p2778
I342
sS'.thisIndex'
p2779
g46
(g48
S'\x12\x00\x00\x00'
tRp2780
sg15
(lp2781
S'd'
asg17
S'Y'
sg14
I7
sa(dp2782
g16
(lp2783
S'd'
asg41
I140
sS'.thisRepN'
p2784
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2785
I343
sS'.thisN'
p2786
I343
sS'.thisIndex'
p2787
g46
(g48
S'\x8c\x00\x00\x00'
tRp2788
sg15
(lp2789
S'd'
asg17
S'Y'
sg14
I7
sa(dp2790
g16
(lp2791
S'k'
asg41
I560
sS'.thisRepN'
p2792
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2793
I344
sS'.thisN'
p2794
I344
sS'.thisIndex'
p2795
g46
(g48
S'0\x02\x00\x00'
tRp2796
sg15
(lp2797
S'k'
asg17
S'Y'
sg14
I7
sa(dp2798
g16
(lp2799
S'k'
asg41
I456
sS'.thisRepN'
p2800
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2801
I345
sS'.thisN'
p2802
I345
sS'.thisIndex'
p2803
g46
(g48
S'\xc8\x01\x00\x00'
tRp2804
sg15
(lp2805
S'k'
asg17
S'Y'
sg14
I7
sa(dp2806
g16
(lp2807
S'd'
asg41
I87
sS'.thisRepN'
p2808
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2809
I346
sS'.thisN'
p2810
I346
sS'.thisIndex'
p2811
g46
(g48
S'W\x00\x00\x00'
tRp2812
sg15
(lp2813
S'd'
asg17
S'Y'
sg14
I7
sa(dp2814
g16
(lp2815
S'k'
asg41
I301
sS'.thisRepN'
p2816
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2817
I347
sS'.thisN'
p2818
I347
sS'.thisIndex'
p2819
g46
(g48
S'-\x01\x00\x00'
tRp2820
sg15
(lp2821
S'k'
asg17
S'Y'
sg14
I7
sa(dp2822
g16
(lp2823
S'k'
asg41
I504
sS'.thisRepN'
p2824
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2825
I348
sS'.thisN'
p2826
I348
sS'.thisIndex'
p2827
g46
(g48
S'\xf8\x01\x00\x00'
tRp2828
sg15
(lp2829
S'k'
asg17
S'Y'
sg14
I7
sa(dp2830
g16
(lp2831
S'k'
asg41
I350
sS'.thisRepN'
p2832
I0
sg25
g26
sg19
S'0'
sS'.thisTrialN'
p2833
I349
sS'.thisN'
p2834
I349
sS'.thisIndex'
p2835
g46
(g48
S'^\x01\x00\x00'
tRp2836
sg15
(lp2837
S'k'
asg18
I49
sg17
S'Y'
sg14
I7
sg27
g28
sa(dp2838
g16
(lp2839
S'k'
asg41
I401
sS'.thisRepN'
p2840
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2841
I350
sS'.thisN'
p2842
I350
sS'.thisIndex'
p2843
g46
(g48
S'\x91\x01\x00\x00'
tRp2844
sg15
(lp2845
S'k'
asg17
S'Y'
sg14
I8
sa(dp2846
g16
(lp2847
S'k'
asg41
I360
sS'.thisRepN'
p2848
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2849
I351
sS'.thisN'
p2850
I351
sS'.thisIndex'
p2851
g46
(g48
S'h\x01\x00\x00'
tRp2852
sg15
(lp2853
S'k'
asg17
S'Y'
sg14
I8
sa(dp2854
g16
(lp2855
S'k'
asg41
I315
sS'.thisRepN'
p2856
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2857
I352
sS'.thisN'
p2858
I352
sS'.thisIndex'
p2859
g46
(g48
S';\x01\x00\x00'
tRp2860
sg15
(lp2861
S'k'
asg17
S'Y'
sg14
I8
sa(dp2862
g16
(lp2863
S'k'
asg41
I447
sS'.thisRepN'
p2864
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2865
I353
sS'.thisN'
p2866
I353
sS'.thisIndex'
p2867
g46
(g48
S'\xbf\x01\x00\x00'
tRp2868
sg15
(lp2869
S'k'
asg17
S'Y'
sg14
I8
sa(dp2870
g16
(lp2871
S'k'
asg41
I527
sS'.thisRepN'
p2872
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2873
I354
sS'.thisN'
p2874
I354
sS'.thisIndex'
p2875
g46
(g48
S'\x0f\x02\x00\x00'
tRp2876
sg15
(lp2877
S'k'
asg17
S'Y'
sg14
I8
sa(dp2878
g16
(lp2879
S'd'
asg41
I158
sS'.thisRepN'
p2880
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2881
I355
sS'.thisN'
p2882
I355
sS'.thisIndex'
p2883
g46
(g48
S'\x9e\x00\x00\x00'
tRp2884
sg15
(lp2885
S'd'
asg17
S'Y'
sg14
I8
sa(dp2886
g16
(lp2887
S'k'
asg41
I329
sS'.thisRepN'
p2888
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2889
I356
sS'.thisN'
p2890
I356
sS'.thisIndex'
p2891
g46
(g48
S'I\x01\x00\x00'
tRp2892
sg15
(lp2893
S'k'
asg17
S'Y'
sg14
I8
sa(dp2894
g16
(lp2895
S'd'
asg41
I17
sS'.thisRepN'
p2896
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2897
I357
sS'.thisN'
p2898
I357
sS'.thisIndex'
p2899
g46
(g48
S'\x11\x00\x00\x00'
tRp2900
sg15
(lp2901
S'd'
asg17
S'Y'
sg14
I8
sa(dp2902
g16
(lp2903
S'd'
asg41
I254
sS'.thisRepN'
p2904
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2905
I358
sS'.thisN'
p2906
I358
sS'.thisIndex'
p2907
g46
(g48
S'\xfe\x00\x00\x00'
tRp2908
sg15
(lp2909
S'd'
asg17
S'Y'
sg14
I8
sa(dp2910
g16
(lp2911
S'k'
asg41
I438
sS'.thisRepN'
p2912
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2913
I359
sS'.thisN'
p2914
I359
sS'.thisIndex'
p2915
g46
(g48
S'\xb6\x01\x00\x00'
tRp2916
sg15
(lp2917
S'k'
asg17
S'Y'
sg14
I8
sa(dp2918
g16
(lp2919
S'k'
asg41
I506
sS'.thisRepN'
p2920
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2921
I360
sS'.thisN'
p2922
I360
sS'.thisIndex'
p2923
g46
(g48
S'\xfa\x01\x00\x00'
tRp2924
sg15
(lp2925
S'k'
asg17
S'Y'
sg14
I8
sa(dp2926
g16
(lp2927
S'k'
asg41
I395
sS'.thisRepN'
p2928
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2929
I361
sS'.thisN'
p2930
I361
sS'.thisIndex'
p2931
g46
(g48
S'\x8b\x01\x00\x00'
tRp2932
sg15
(lp2933
S'k'
asg17
S'Y'
sg14
I8
sa(dp2934
g16
(lp2935
S'd'
asg41
I288
sS'.thisRepN'
p2936
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2937
I362
sS'.thisN'
p2938
I362
sS'.thisIndex'
p2939
g46
(g48
S' \x01\x00\x00'
tRp2940
sg15
(lp2941
S'd'
asg17
S'Y'
sg14
I8
sa(dp2942
g16
(lp2943
S'd'
asg41
I27
sS'.thisRepN'
p2944
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2945
I363
sS'.thisN'
p2946
I363
sS'.thisIndex'
p2947
g46
(g48
S'\x1b\x00\x00\x00'
tRp2948
sg15
(lp2949
S'd'
asg17
S'Y'
sg14
I8
sa(dp2950
g16
(lp2951
S'k'
asg41
I500
sS'.thisRepN'
p2952
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2953
I364
sS'.thisN'
p2954
I364
sS'.thisIndex'
p2955
g46
(g48
S'\xf4\x01\x00\x00'
tRp2956
sg15
(lp2957
S'k'
asg17
S'Y'
sg14
I8
sa(dp2958
g16
(lp2959
S'k'
asg41
I303
sS'.thisRepN'
p2960
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2961
I365
sS'.thisN'
p2962
I365
sS'.thisIndex'
p2963
g46
(g48
S'/\x01\x00\x00'
tRp2964
sg15
(lp2965
S'k'
asg17
S'Y'
sg14
I8
sa(dp2966
g16
(lp2967
S'd'
asg41
I94
sS'.thisRepN'
p2968
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2969
I366
sS'.thisN'
p2970
I366
sS'.thisIndex'
p2971
g46
(g48
S'^\x00\x00\x00'
tRp2972
sg15
(lp2973
S'd'
asg17
S'Y'
sg14
I8
sa(dp2974
g16
(lp2975
S'd'
asg41
I142
sS'.thisRepN'
p2976
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2977
I367
sS'.thisN'
p2978
I367
sS'.thisIndex'
p2979
g46
(g48
S'\x8e\x00\x00\x00'
tRp2980
sg15
(lp2981
S'd'
asg17
S'Y'
sg14
I8
sa(dp2982
g16
(lp2983
S'd'
asg41
I224
sS'.thisRepN'
p2984
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2985
I368
sS'.thisN'
p2986
I368
sS'.thisIndex'
p2987
g46
(g48
S'\xe0\x00\x00\x00'
tRp2988
sg15
(lp2989
S'd'
asg17
S'Y'
sg14
I8
sa(dp2990
g16
(lp2991
S'd'
asg41
I38
sS'.thisRepN'
p2992
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p2993
I369
sS'.thisN'
p2994
I369
sS'.thisIndex'
p2995
g46
(g48
S'&\x00\x00\x00'
tRp2996
sg15
(lp2997
S'd'
asg17
S'Y'
sg14
I8
sa(dp2998
g16
(lp2999
S'd'
asg41
I109
sS'.thisRepN'
p3000
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3001
I370
sS'.thisN'
p3002
I370
sS'.thisIndex'
p3003
g46
(g48
S'm\x00\x00\x00'
tRp3004
sg15
(lp3005
S'd'
asg17
S'Y'
sg14
I8
sa(dp3006
g16
(lp3007
S'd'
asg41
I200
sS'.thisRepN'
p3008
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3009
I371
sS'.thisN'
p3010
I371
sS'.thisIndex'
p3011
g46
(g48
S'\xc8\x00\x00\x00'
tRp3012
sg15
(lp3013
S'd'
asg17
S'Y'
sg14
I8
sa(dp3014
g16
(lp3015
S'd'
asg41
I181
sS'.thisRepN'
p3016
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3017
I372
sS'.thisN'
p3018
I372
sS'.thisIndex'
p3019
g46
(g48
S'\xb5\x00\x00\x00'
tRp3020
sg15
(lp3021
S'd'
asg17
S'Y'
sg14
I8
sa(dp3022
g16
(lp3023
S'd'
asg41
I70
sS'.thisRepN'
p3024
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3025
I373
sS'.thisN'
p3026
I373
sS'.thisIndex'
p3027
g46
(g48
S'F\x00\x00\x00'
tRp3028
sg15
(lp3029
S'd'
asg17
S'Y'
sg14
I8
sa(dp3030
g16
(lp3031
S'k'
asg41
I543
sS'.thisRepN'
p3032
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3033
I374
sS'.thisN'
p3034
I374
sS'.thisIndex'
p3035
g46
(g48
S'\x1f\x02\x00\x00'
tRp3036
sg15
(lp3037
S'k'
asg17
S'Y'
sg14
I8
sa(dp3038
g16
(lp3039
S'k'
asg41
I420
sS'.thisRepN'
p3040
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3041
I375
sS'.thisN'
p3042
I375
sS'.thisIndex'
p3043
g46
(g48
S'\xa4\x01\x00\x00'
tRp3044
sg15
(lp3045
S'k'
asg17
S'Y'
sg14
I8
sa(dp3046
g16
(lp3047
S'd'
asg41
I84
sS'.thisRepN'
p3048
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3049
I376
sS'.thisN'
p3050
I376
sS'.thisIndex'
p3051
g46
(g48
S'T\x00\x00\x00'
tRp3052
sg15
(lp3053
S'd'
asg17
S'Y'
sg14
I8
sa(dp3054
g16
(lp3055
S'd'
asg41
I65
sS'.thisRepN'
p3056
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3057
I377
sS'.thisN'
p3058
I377
sS'.thisIndex'
p3059
g46
(g48
S'A\x00\x00\x00'
tRp3060
sg15
(lp3061
S'd'
asg17
S'Y'
sg14
I8
sa(dp3062
g16
(lp3063
S'd'
asg41
I183
sS'.thisRepN'
p3064
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3065
I378
sS'.thisN'
p3066
I378
sS'.thisIndex'
p3067
g46
(g48
S'\xb7\x00\x00\x00'
tRp3068
sg15
(lp3069
S'd'
asg17
S'Y'
sg14
I8
sa(dp3070
g16
(lp3071
S'k'
asg41
I424
sS'.thisRepN'
p3072
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3073
I379
sS'.thisN'
p3074
I379
sS'.thisIndex'
p3075
g46
(g48
S'\xa8\x01\x00\x00'
tRp3076
sg15
(lp3077
S'k'
asg17
S'Y'
sg14
I8
sa(dp3078
g16
(lp3079
S'd'
asg41
I46
sS'.thisRepN'
p3080
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3081
I380
sS'.thisN'
p3082
I380
sS'.thisIndex'
p3083
g46
(g48
S'.\x00\x00\x00'
tRp3084
sg15
(lp3085
S'd'
asg17
S'Y'
sg14
I8
sa(dp3086
g16
(lp3087
S'd'
asg41
I29
sS'.thisRepN'
p3088
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3089
I381
sS'.thisN'
p3090
I381
sS'.thisIndex'
p3091
g46
(g48
S'\x1d\x00\x00\x00'
tRp3092
sg15
(lp3093
S'd'
asg17
S'Y'
sg14
I8
sa(dp3094
g16
(lp3095
S'k'
asg41
I443
sS'.thisRepN'
p3096
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3097
I382
sS'.thisN'
p3098
I382
sS'.thisIndex'
p3099
g46
(g48
S'\xbb\x01\x00\x00'
tRp3100
sg15
(lp3101
S'k'
asg17
S'Y'
sg14
I8
sa(dp3102
g16
(lp3103
S'd'
asg41
I115
sS'.thisRepN'
p3104
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3105
I383
sS'.thisN'
p3106
I383
sS'.thisIndex'
p3107
g46
(g48
S's\x00\x00\x00'
tRp3108
sg15
(lp3109
S'd'
asg17
S'Y'
sg14
I8
sa(dp3110
g16
(lp3111
S'd'
asg41
I59
sS'.thisRepN'
p3112
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3113
I384
sS'.thisN'
p3114
I384
sS'.thisIndex'
p3115
g46
(g48
S';\x00\x00\x00'
tRp3116
sg15
(lp3117
S'd'
asg17
S'Y'
sg14
I8
sa(dp3118
g16
(lp3119
S'k'
asg41
I356
sS'.thisRepN'
p3120
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3121
I385
sS'.thisN'
p3122
I385
sS'.thisIndex'
p3123
g46
(g48
S'd\x01\x00\x00'
tRp3124
sg15
(lp3125
S'k'
asg17
S'Y'
sg14
I8
sa(dp3126
g16
(lp3127
S'k'
asg41
I473
sS'.thisRepN'
p3128
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3129
I386
sS'.thisN'
p3130
I386
sS'.thisIndex'
p3131
g46
(g48
S'\xd9\x01\x00\x00'
tRp3132
sg15
(lp3133
S'd'
asg17
S'N'
sg14
I8
sa(dp3134
g16
(lp3135
S'k'
asg41
I458
sS'.thisRepN'
p3136
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3137
I387
sS'.thisN'
p3138
I387
sS'.thisIndex'
p3139
g46
(g48
S'\xca\x01\x00\x00'
tRp3140
sg15
(lp3141
S'k'
asg17
S'Y'
sg14
I8
sa(dp3142
g16
(lp3143
S'k'
asg41
I580
sS'.thisRepN'
p3144
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3145
I388
sS'.thisN'
p3146
I388
sS'.thisIndex'
p3147
g46
(g48
S'D\x02\x00\x00'
tRp3148
sg15
(lp3149
S'k'
asg17
S'Y'
sg14
I8
sa(dp3150
g16
(lp3151
S'k'
asg41
I499
sS'.thisRepN'
p3152
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3153
I389
sS'.thisN'
p3154
I389
sS'.thisIndex'
p3155
g46
(g48
S'\xf3\x01\x00\x00'
tRp3156
sg15
(lp3157
S'k'
asg17
S'Y'
sg14
I8
sa(dp3158
g16
(lp3159
S'd'
asg41
I91
sS'.thisRepN'
p3160
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3161
I390
sS'.thisN'
p3162
I390
sS'.thisIndex'
p3163
g46
(g48
S'[\x00\x00\x00'
tRp3164
sg15
(lp3165
S'd'
asg17
S'Y'
sg14
I8
sa(dp3166
g16
(lp3167
S'k'
asg41
I428
sS'.thisRepN'
p3168
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3169
I391
sS'.thisN'
p3170
I391
sS'.thisIndex'
p3171
g46
(g48
S'\xac\x01\x00\x00'
tRp3172
sg15
(lp3173
S'k'
asg17
S'Y'
sg14
I8
sa(dp3174
g16
(lp3175
S'k'
asg41
I453
sS'.thisRepN'
p3176
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3177
I392
sS'.thisN'
p3178
I392
sS'.thisIndex'
p3179
g46
(g48
S'\xc5\x01\x00\x00'
tRp3180
sg15
(lp3181
S'k'
asg17
S'Y'
sg14
I8
sa(dp3182
g16
(lp3183
S'k'
asg41
I332
sS'.thisRepN'
p3184
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3185
I393
sS'.thisN'
p3186
I393
sS'.thisIndex'
p3187
g46
(g48
S'L\x01\x00\x00'
tRp3188
sg15
(lp3189
S'k'
asg17
S'Y'
sg14
I8
sa(dp3190
g16
(lp3191
S'k'
asg41
I346
sS'.thisRepN'
p3192
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3193
I394
sS'.thisN'
p3194
I394
sS'.thisIndex'
p3195
g46
(g48
S'Z\x01\x00\x00'
tRp3196
sg15
(lp3197
S'k'
asg17
S'Y'
sg14
I8
sa(dp3198
g16
(lp3199
S'd'
asg41
I93
sS'.thisRepN'
p3200
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3201
I395
sS'.thisN'
p3202
I395
sS'.thisIndex'
p3203
g46
(g48
S']\x00\x00\x00'
tRp3204
sg15
(lp3205
S'd'
asg17
S'Y'
sg14
I8
sa(dp3206
g16
(lp3207
S'k'
asg41
I409
sS'.thisRepN'
p3208
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3209
I396
sS'.thisN'
p3210
I396
sS'.thisIndex'
p3211
g46
(g48
S'\x99\x01\x00\x00'
tRp3212
sg15
(lp3213
S'k'
asg17
S'Y'
sg14
I8
sa(dp3214
g16
(lp3215
S'd'
asg41
I286
sS'.thisRepN'
p3216
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3217
I397
sS'.thisN'
p3218
I397
sS'.thisIndex'
p3219
g46
(g48
S'\x1e\x01\x00\x00'
tRp3220
sg15
(lp3221
S'd'
asg17
S'Y'
sg14
I8
sa(dp3222
g16
(lp3223
S'd'
asg41
I231
sS'.thisRepN'
p3224
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3225
I398
sS'.thisN'
p3226
I398
sS'.thisIndex'
p3227
g46
(g48
S'\xe7\x00\x00\x00'
tRp3228
sg15
(lp3229
S'd'
asg17
S'Y'
sg14
I8
sa(dp3230
g16
(lp3231
S'k'
asg41
I418
sS'.thisRepN'
p3232
I0
sg25
g26
sg19
S'0'
sS'.thisTrialN'
p3233
I399
sS'.thisN'
p3234
I399
sS'.thisIndex'
p3235
g46
(g48
S'\xa2\x01\x00\x00'
tRp3236
sg15
(lp3237
S'k'
asg18
I49
sg17
S'Y'
sg14
I8
sg27
g28
sa(dp3238
g16
(lp3239
S'd'
asg41
I79
sS'.thisRepN'
p3240
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3241
I400
sS'.thisN'
p3242
I400
sS'.thisIndex'
p3243
g46
(g48
S'O\x00\x00\x00'
tRp3244
sg15
(lp3245
S'd'
asg17
S'Y'
sg14
I9
sa(dp3246
g16
(lp3247
S'k'
asg41
I372
sS'.thisRepN'
p3248
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3249
I401
sS'.thisN'
p3250
I401
sS'.thisIndex'
p3251
g46
(g48
S't\x01\x00\x00'
tRp3252
sg15
(lp3253
S'k'
asg17
S'Y'
sg14
I9
sa(dp3254
g16
(lp3255
S'k'
asg41
I510
sS'.thisRepN'
p3256
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3257
I402
sS'.thisN'
p3258
I402
sS'.thisIndex'
p3259
g46
(g48
S'\xfe\x01\x00\x00'
tRp3260
sg15
(lp3261
S'k'
asg17
S'Y'
sg14
I9
sa(dp3262
g16
(lp3263
S'k'
asg41
I367
sS'.thisRepN'
p3264
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3265
I403
sS'.thisN'
p3266
I403
sS'.thisIndex'
p3267
g46
(g48
S'o\x01\x00\x00'
tRp3268
sg15
(lp3269
S'k'
asg17
S'Y'
sg14
I9
sa(dp3270
g16
(lp3271
S'd'
asg41
I30
sS'.thisRepN'
p3272
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3273
I404
sS'.thisN'
p3274
I404
sS'.thisIndex'
p3275
g46
(g48
S'\x1e\x00\x00\x00'
tRp3276
sg15
(lp3277
S'd'
asg17
S'Y'
sg14
I9
sa(dp3278
g16
(lp3279
S'k'
asg41
I397
sS'.thisRepN'
p3280
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3281
I405
sS'.thisN'
p3282
I405
sS'.thisIndex'
p3283
g46
(g48
S'\x8d\x01\x00\x00'
tRp3284
sg15
(lp3285
S'k'
asg17
S'Y'
sg14
I9
sa(dp3286
g16
(lp3287
S'd'
asg41
I194
sS'.thisRepN'
p3288
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3289
I406
sS'.thisN'
p3290
I406
sS'.thisIndex'
p3291
g46
(g48
S'\xc2\x00\x00\x00'
tRp3292
sg15
(lp3293
S'd'
asg17
S'Y'
sg14
I9
sa(dp3294
g16
(lp3295
S'k'
asg41
I432
sS'.thisRepN'
p3296
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3297
I407
sS'.thisN'
p3298
I407
sS'.thisIndex'
p3299
g46
(g48
S'\xb0\x01\x00\x00'
tRp3300
sg15
(lp3301
S'k'
asg17
S'Y'
sg14
I9
sa(dp3302
g16
(lp3303
S'd'
asg41
I19
sS'.thisRepN'
p3304
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3305
I408
sS'.thisN'
p3306
I408
sS'.thisIndex'
p3307
g46
(g48
S'\x13\x00\x00\x00'
tRp3308
sg15
(lp3309
S'd'
asg17
S'Y'
sg14
I9
sa(dp3310
g16
(lp3311
S'd'
asg41
I42
sS'.thisRepN'
p3312
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3313
I409
sS'.thisN'
p3314
I409
sS'.thisIndex'
p3315
g46
(g48
S'*\x00\x00\x00'
tRp3316
sg15
(lp3317
S'd'
asg17
S'Y'
sg14
I9
sa(dp3318
g16
(lp3319
S'k'
asg41
I479
sS'.thisRepN'
p3320
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3321
I410
sS'.thisN'
p3322
I410
sS'.thisIndex'
p3323
g46
(g48
S'\xdf\x01\x00\x00'
tRp3324
sg15
(lp3325
S'k'
asg17
S'Y'
sg14
I9
sa(dp3326
g16
(lp3327
S'd'
asg41
I246
sS'.thisRepN'
p3328
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3329
I411
sS'.thisN'
p3330
I411
sS'.thisIndex'
p3331
g46
(g48
S'\xf6\x00\x00\x00'
tRp3332
sg15
(lp3333
S'd'
asg17
S'Y'
sg14
I9
sa(dp3334
g16
(lp3335
S'k'
asg41
I308
sS'.thisRepN'
p3336
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3337
I412
sS'.thisN'
p3338
I412
sS'.thisIndex'
p3339
g46
(g48
S'4\x01\x00\x00'
tRp3340
sg15
(lp3341
S'k'
asg17
S'Y'
sg14
I9
sa(dp3342
g16
(lp3343
S'd'
asg41
I159
sS'.thisRepN'
p3344
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3345
I413
sS'.thisN'
p3346
I413
sS'.thisIndex'
p3347
g46
(g48
S'\x9f\x00\x00\x00'
tRp3348
sg15
(lp3349
S'd'
asg17
S'Y'
sg14
I9
sa(dp3350
g16
(lp3351
S'd'
asg41
I74
sS'.thisRepN'
p3352
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3353
I414
sS'.thisN'
p3354
I414
sS'.thisIndex'
p3355
g46
(g48
S'J\x00\x00\x00'
tRp3356
sg15
(lp3357
S'd'
asg17
S'Y'
sg14
I9
sa(dp3358
g16
(lp3359
S'k'
asg41
I523
sS'.thisRepN'
p3360
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3361
I415
sS'.thisN'
p3362
I415
sS'.thisIndex'
p3363
g46
(g48
S'\x0b\x02\x00\x00'
tRp3364
sg15
(lp3365
S'k'
asg17
S'Y'
sg14
I9
sa(dp3366
g16
(lp3367
S'k'
asg41
I488
sS'.thisRepN'
p3368
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3369
I416
sS'.thisN'
p3370
I416
sS'.thisIndex'
p3371
g46
(g48
S'\xe8\x01\x00\x00'
tRp3372
sg15
(lp3373
S'k'
asg17
S'Y'
sg14
I9
sa(dp3374
g16
(lp3375
S'k'
asg41
I530
sS'.thisRepN'
p3376
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3377
I417
sS'.thisN'
p3378
I417
sS'.thisIndex'
p3379
g46
(g48
S'\x12\x02\x00\x00'
tRp3380
sg15
(lp3381
S'k'
asg17
S'Y'
sg14
I9
sa(dp3382
g16
(lp3383
S'd'
asg41
I15
sS'.thisRepN'
p3384
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3385
I418
sS'.thisN'
p3386
I418
sS'.thisIndex'
p3387
g46
(g48
S'\x0f\x00\x00\x00'
tRp3388
sg15
(lp3389
S'd'
asg17
S'Y'
sg14
I9
sa(dp3390
g16
(lp3391
S'd'
asg41
I100
sS'.thisRepN'
p3392
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3393
I419
sS'.thisN'
p3394
I419
sS'.thisIndex'
p3395
g46
(g48
S'd\x00\x00\x00'
tRp3396
sg15
(lp3397
S'd'
asg17
S'Y'
sg14
I9
sa(dp3398
g16
(lp3399
S'd'
asg41
I244
sS'.thisRepN'
p3400
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3401
I420
sS'.thisN'
p3402
I420
sS'.thisIndex'
p3403
g46
(g48
S'\xf4\x00\x00\x00'
tRp3404
sg15
(lp3405
S'd'
asg17
S'Y'
sg14
I9
sa(dp3406
g16
(lp3407
S'k'
asg41
I547
sS'.thisRepN'
p3408
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3409
I421
sS'.thisN'
p3410
I421
sS'.thisIndex'
p3411
g46
(g48
S'#\x02\x00\x00'
tRp3412
sg15
(lp3413
S'k'
asg17
S'Y'
sg14
I9
sa(dp3414
g16
(lp3415
S'd'
asg41
I152
sS'.thisRepN'
p3416
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3417
I422
sS'.thisN'
p3418
I422
sS'.thisIndex'
p3419
g46
(g48
S'\x98\x00\x00\x00'
tRp3420
sg15
(lp3421
S'd'
asg17
S'Y'
sg14
I9
sa(dp3422
g16
(lp3423
S'k'
asg41
I567
sS'.thisRepN'
p3424
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3425
I423
sS'.thisN'
p3426
I423
sS'.thisIndex'
p3427
g46
(g48
S'7\x02\x00\x00'
tRp3428
sg15
(lp3429
S'k'
asg17
S'Y'
sg14
I9
sa(dp3430
g41
I318
sS'.thisN'
p3431
I424
sg25
g26
sg27
g28
sS'.thisTrialN'
p3432
I424
sS'.thisRepN'
p3433
I0
sS'.thisIndex'
p3434
g46
(g48
S'>\x01\x00\x00'
tRp3435
sg15
Nsg17
g1497
sg14
I9
sa(dp3436
g16
(lp3437
S'k'
asg41
I422
sS'.thisRepN'
p3438
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3439
I425
sS'.thisN'
p3440
I425
sS'.thisIndex'
p3441
g46
(g48
S'\xa6\x01\x00\x00'
tRp3442
sg15
(lp3443
S'k'
asg17
S'Y'
sg14
I9
sa(dp3444
g16
(lp3445
S'd'
asg41
I187
sS'.thisRepN'
p3446
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3447
I426
sS'.thisN'
p3448
I426
sS'.thisIndex'
p3449
g46
(g48
S'\xbb\x00\x00\x00'
tRp3450
sg15
(lp3451
S'd'
asg17
S'Y'
sg14
I9
sa(dp3452
g16
(lp3453
S'd'
asg41
I121
sS'.thisRepN'
p3454
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3455
I427
sS'.thisN'
p3456
I427
sS'.thisIndex'
p3457
g46
(g48
S'y\x00\x00\x00'
tRp3458
sg15
(lp3459
S'd'
asg17
S'Y'
sg14
I9
sa(dp3460
g16
(lp3461
S'k'
asg41
I496
sS'.thisRepN'
p3462
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3463
I428
sS'.thisN'
p3464
I428
sS'.thisIndex'
p3465
g46
(g48
S'\xf0\x01\x00\x00'
tRp3466
sg15
(lp3467
S'k'
asg17
S'Y'
sg14
I9
sa(dp3468
g16
(lp3469
S'k'
asg41
I582
sS'.thisRepN'
p3470
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3471
I429
sS'.thisN'
p3472
I429
sS'.thisIndex'
p3473
g46
(g48
S'F\x02\x00\x00'
tRp3474
sg15
(lp3475
S'k'
asg17
S'Y'
sg14
I9
sa(dp3476
g16
(lp3477
S'k'
asg41
I342
sS'.thisRepN'
p3478
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3479
I430
sS'.thisN'
p3480
I430
sS'.thisIndex'
p3481
g46
(g48
S'V\x01\x00\x00'
tRp3482
sg15
(lp3483
S'k'
asg17
S'Y'
sg14
I9
sa(dp3484
g16
(lp3485
S'k'
asg41
I557
sS'.thisRepN'
p3486
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3487
I431
sS'.thisN'
p3488
I431
sS'.thisIndex'
p3489
g46
(g48
S'-\x02\x00\x00'
tRp3490
sg15
(lp3491
S'k'
asg17
S'Y'
sg14
I9
sa(dp3492
g16
(lp3493
S'd'
asg41
I114
sS'.thisRepN'
p3494
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3495
I432
sS'.thisN'
p3496
I432
sS'.thisIndex'
p3497
g46
(g48
S'r\x00\x00\x00'
tRp3498
sg15
(lp3499
S'd'
asg17
S'Y'
sg14
I9
sa(dp3500
g16
(lp3501
S'k'
asg41
I512
sS'.thisRepN'
p3502
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3503
I433
sS'.thisN'
p3504
I433
sS'.thisIndex'
p3505
g46
(g48
S'\x00\x02\x00\x00'
tRp3506
sg15
(lp3507
S'k'
asg17
S'Y'
sg14
I9
sa(dp3508
g16
(lp3509
S'k'
asg41
I314
sS'.thisRepN'
p3510
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3511
I434
sS'.thisN'
p3512
I434
sS'.thisIndex'
p3513
g46
(g48
S':\x01\x00\x00'
tRp3514
sg15
(lp3515
S'k'
asg17
S'Y'
sg14
I9
sa(dp3516
g16
(lp3517
S'k'
asg41
I553
sS'.thisRepN'
p3518
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3519
I435
sS'.thisN'
p3520
I435
sS'.thisIndex'
p3521
g46
(g48
S')\x02\x00\x00'
tRp3522
sg15
(lp3523
S'k'
asg17
S'Y'
sg14
I9
sa(dp3524
g16
(lp3525
S'k'
asg41
I494
sS'.thisRepN'
p3526
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3527
I436
sS'.thisN'
p3528
I436
sS'.thisIndex'
p3529
g46
(g48
S'\xee\x01\x00\x00'
tRp3530
sg15
(lp3531
S'k'
asg17
S'Y'
sg14
I9
sa(dp3532
g16
(lp3533
S'k'
asg41
I406
sS'.thisRepN'
p3534
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3535
I437
sS'.thisN'
p3536
I437
sS'.thisIndex'
p3537
g46
(g48
S'\x96\x01\x00\x00'
tRp3538
sg15
(lp3539
S'k'
asg17
S'Y'
sg14
I9
sa(dp3540
g16
(lp3541
S'd'
asg41
I283
sS'.thisRepN'
p3542
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3543
I438
sS'.thisN'
p3544
I438
sS'.thisIndex'
p3545
g46
(g48
S'\x1b\x01\x00\x00'
tRp3546
sg15
(lp3547
S'd'
asg17
S'Y'
sg14
I9
sa(dp3548
g16
(lp3549
S'd'
asg41
I255
sS'.thisRepN'
p3550
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3551
I439
sS'.thisN'
p3552
I439
sS'.thisIndex'
p3553
g46
(g48
S'\xff\x00\x00\x00'
tRp3554
sg15
(lp3555
S'd'
asg17
S'Y'
sg14
I9
sa(dp3556
g16
(lp3557
S'k'
asg41
I379
sS'.thisRepN'
p3558
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3559
I440
sS'.thisN'
p3560
I440
sS'.thisIndex'
p3561
g46
(g48
S'{\x01\x00\x00'
tRp3562
sg15
(lp3563
S'k'
asg17
S'Y'
sg14
I9
sa(dp3564
g16
(lp3565
S'k'
asg41
I304
sS'.thisRepN'
p3566
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3567
I441
sS'.thisN'
p3568
I441
sS'.thisIndex'
p3569
g46
(g48
S'0\x01\x00\x00'
tRp3570
sg15
(lp3571
S'k'
asg17
S'Y'
sg14
I9
sa(dp3572
g16
(lp3573
S'd'
asg41
I1
sS'.thisRepN'
p3574
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3575
I442
sS'.thisN'
p3576
I442
sS'.thisIndex'
p3577
g46
(g48
S'\x01\x00\x00\x00'
tRp3578
sg15
(lp3579
S'd'
asg17
S'Y'
sg14
I9
sa(dp3580
g16
(lp3581
S'd'
asg41
I295
sS'.thisRepN'
p3582
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3583
I443
sS'.thisN'
p3584
I443
sS'.thisIndex'
p3585
g46
(g48
S"'\x01\x00\x00"
tRp3586
sg15
(lp3587
S'd'
asg17
S'Y'
sg14
I9
sa(dp3588
g16
(lp3589
S'd'
asg41
I282
sS'.thisRepN'
p3590
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3591
I444
sS'.thisN'
p3592
I444
sS'.thisIndex'
p3593
g46
(g48
S'\x1a\x01\x00\x00'
tRp3594
sg15
(lp3595
S'd'
asg17
S'Y'
sg14
I9
sa(dp3596
g16
(lp3597
S'k'
asg41
I465
sS'.thisRepN'
p3598
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3599
I445
sS'.thisN'
p3600
I445
sS'.thisIndex'
p3601
g46
(g48
S'\xd1\x01\x00\x00'
tRp3602
sg15
(lp3603
S'k'
asg17
S'Y'
sg14
I9
sa(dp3604
g16
(lp3605
S'k'
asg41
I462
sS'.thisRepN'
p3606
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3607
I446
sS'.thisN'
p3608
I446
sS'.thisIndex'
p3609
g46
(g48
S'\xce\x01\x00\x00'
tRp3610
sg15
(lp3611
S'k'
asg17
S'Y'
sg14
I9
sa(dp3612
g16
(lp3613
S'k'
asg41
I339
sS'.thisRepN'
p3614
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3615
I447
sS'.thisN'
p3616
I447
sS'.thisIndex'
p3617
g46
(g48
S'S\x01\x00\x00'
tRp3618
sg15
(lp3619
S'k'
asg17
S'Y'
sg14
I9
sa(dp3620
g16
(lp3621
S'd'
asg41
I34
sS'.thisRepN'
p3622
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3623
I448
sS'.thisN'
p3624
I448
sS'.thisIndex'
p3625
g46
(g48
S'"\x00\x00\x00'
tRp3626
sg15
(lp3627
S'd'
asg17
S'Y'
sg14
I9
sa(dp3628
g16
(lp3629
S'd'
asg41
I49
sS'.thisRepN'
p3630
I0
sg25
g26
sg19
S'0'
sS'.thisTrialN'
p3631
I449
sS'.thisN'
p3632
I449
sS'.thisIndex'
p3633
g46
(g48
S'1\x00\x00\x00'
tRp3634
sg15
(lp3635
S'd'
asg18
I49
sg17
S'Y'
sg14
I9
sg27
g28
sa(dp3636
g16
(lp3637
S'd'
asg41
I102
sS'.thisRepN'
p3638
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3639
I450
sS'.thisN'
p3640
I450
sS'.thisIndex'
p3641
g46
(g48
S'f\x00\x00\x00'
tRp3642
sg15
(lp3643
S'd'
asg17
S'Y'
sg14
I10
sa(dp3644
g16
(lp3645
S'k'
asg41
I369
sS'.thisRepN'
p3646
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3647
I451
sS'.thisN'
p3648
I451
sS'.thisIndex'
p3649
g46
(g48
S'q\x01\x00\x00'
tRp3650
sg15
(lp3651
S'k'
asg17
S'Y'
sg14
I10
sa(dp3652
g16
(lp3653
S'k'
asg41
I590
sS'.thisRepN'
p3654
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3655
I452
sS'.thisN'
p3656
I452
sS'.thisIndex'
p3657
g46
(g48
S'N\x02\x00\x00'
tRp3658
sg15
(lp3659
S'k'
asg17
S'Y'
sg14
I10
sa(dp3660
g16
(lp3661
S'd'
asg41
I69
sS'.thisRepN'
p3662
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3663
I453
sS'.thisN'
p3664
I453
sS'.thisIndex'
p3665
g46
(g48
S'E\x00\x00\x00'
tRp3666
sg15
(lp3667
S'd'
asg17
S'Y'
sg14
I10
sa(dp3668
g16
(lp3669
S'd'
asg41
I73
sS'.thisRepN'
p3670
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3671
I454
sS'.thisN'
p3672
I454
sS'.thisIndex'
p3673
g46
(g48
S'I\x00\x00\x00'
tRp3674
sg15
(lp3675
S'd'
asg17
S'Y'
sg14
I10
sa(dp3676
g16
(lp3677
S'k'
asg41
I380
sS'.thisRepN'
p3678
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3679
I455
sS'.thisN'
p3680
I455
sS'.thisIndex'
p3681
g46
(g48
S'|\x01\x00\x00'
tRp3682
sg15
(lp3683
S'k'
asg17
S'Y'
sg14
I10
sa(dp3684
g16
(lp3685
S'k'
asg41
I425
sS'.thisRepN'
p3686
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3687
I456
sS'.thisN'
p3688
I456
sS'.thisIndex'
p3689
g46
(g48
S'\xa9\x01\x00\x00'
tRp3690
sg15
(lp3691
S'k'
asg17
S'Y'
sg14
I10
sa(dp3692
g16
(lp3693
S'k'
asg41
I483
sS'.thisRepN'
p3694
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3695
I457
sS'.thisN'
p3696
I457
sS'.thisIndex'
p3697
g46
(g48
S'\xe3\x01\x00\x00'
tRp3698
sg15
(lp3699
S'k'
asg17
S'Y'
sg14
I10
sa(dp3700
g16
(lp3701
S'd'
asg41
I185
sS'.thisRepN'
p3702
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3703
I458
sS'.thisN'
p3704
I458
sS'.thisIndex'
p3705
g46
(g48
S'\xb9\x00\x00\x00'
tRp3706
sg15
(lp3707
S'd'
asg17
S'Y'
sg14
I10
sa(dp3708
g16
(lp3709
S'd'
asg41
I33
sS'.thisRepN'
p3710
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3711
I459
sS'.thisN'
p3712
I459
sS'.thisIndex'
p3713
g46
(g48
S'!\x00\x00\x00'
tRp3714
sg15
(lp3715
S'd'
asg17
S'Y'
sg14
I10
sa(dp3716
g16
(lp3717
S'k'
asg41
I570
sS'.thisRepN'
p3718
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3719
I460
sS'.thisN'
p3720
I460
sS'.thisIndex'
p3721
g46
(g48
S':\x02\x00\x00'
tRp3722
sg15
(lp3723
S'k'
asg17
S'Y'
sg14
I10
sa(dp3724
g16
(lp3725
S'k'
asg41
I411
sS'.thisRepN'
p3726
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3727
I461
sS'.thisN'
p3728
I461
sS'.thisIndex'
p3729
g46
(g48
S'\x9b\x01\x00\x00'
tRp3730
sg15
(lp3731
S'k'
asg17
S'Y'
sg14
I10
sa(dp3732
g16
(lp3733
S'd'
asg41
I161
sS'.thisRepN'
p3734
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3735
I462
sS'.thisN'
p3736
I462
sS'.thisIndex'
p3737
g46
(g48
S'\xa1\x00\x00\x00'
tRp3738
sg15
(lp3739
S'd'
asg17
S'Y'
sg14
I10
sa(dp3740
g16
(lp3741
S'd'
asg41
I108
sS'.thisRepN'
p3742
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3743
I463
sS'.thisN'
p3744
I463
sS'.thisIndex'
p3745
g46
(g48
S'l\x00\x00\x00'
tRp3746
sg15
(lp3747
S'd'
asg17
S'Y'
sg14
I10
sa(dp3748
g16
(lp3749
S'k'
asg41
I524
sS'.thisRepN'
p3750
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3751
I464
sS'.thisN'
p3752
I464
sS'.thisIndex'
p3753
g46
(g48
S'\x0c\x02\x00\x00'
tRp3754
sg15
(lp3755
S'k'
asg17
S'Y'
sg14
I10
sa(dp3756
g16
(lp3757
S'k'
asg41
I594
sS'.thisRepN'
p3758
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3759
I465
sS'.thisN'
p3760
I465
sS'.thisIndex'
p3761
g46
(g48
S'R\x02\x00\x00'
tRp3762
sg15
(lp3763
S'k'
asg17
S'Y'
sg14
I10
sa(dp3764
g16
(lp3765
S'k'
asg41
I592
sS'.thisRepN'
p3766
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3767
I466
sS'.thisN'
p3768
I466
sS'.thisIndex'
p3769
g46
(g48
S'P\x02\x00\x00'
tRp3770
sg15
(lp3771
S'k'
asg17
S'Y'
sg14
I10
sa(dp3772
g16
(lp3773
S'd'
asg41
I13
sS'.thisRepN'
p3774
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3775
I467
sS'.thisN'
p3776
I467
sS'.thisIndex'
p3777
g46
(g48
S'\r\x00\x00\x00'
tRp3778
sg15
(lp3779
S'd'
asg17
S'Y'
sg14
I10
sa(dp3780
g16
(lp3781
S'd'
asg41
I162
sS'.thisRepN'
p3782
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3783
I468
sS'.thisN'
p3784
I468
sS'.thisIndex'
p3785
g46
(g48
S'\xa2\x00\x00\x00'
tRp3786
sg15
(lp3787
S'd'
asg17
S'Y'
sg14
I10
sa(dp3788
g16
(lp3789
S'k'
asg41
I446
sS'.thisRepN'
p3790
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3791
I469
sS'.thisN'
p3792
I469
sS'.thisIndex'
p3793
g46
(g48
S'\xbe\x01\x00\x00'
tRp3794
sg15
(lp3795
S'k'
asg17
S'Y'
sg14
I10
sa(dp3796
g16
(lp3797
S'd'
asg41
I225
sS'.thisRepN'
p3798
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3799
I470
sS'.thisN'
p3800
I470
sS'.thisIndex'
p3801
g46
(g48
S'\xe1\x00\x00\x00'
tRp3802
sg15
(lp3803
S'd'
asg17
S'Y'
sg14
I10
sa(dp3804
g16
(lp3805
S'k'
asg41
I531
sS'.thisRepN'
p3806
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3807
I471
sS'.thisN'
p3808
I471
sS'.thisIndex'
p3809
g46
(g48
S'\x13\x02\x00\x00'
tRp3810
sg15
(lp3811
S'k'
asg17
S'Y'
sg14
I10
sa(dp3812
g16
(lp3813
S'd'
asg41
I143
sS'.thisRepN'
p3814
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3815
I472
sS'.thisN'
p3816
I472
sS'.thisIndex'
p3817
g46
(g48
S'\x8f\x00\x00\x00'
tRp3818
sg15
(lp3819
S'd'
asg17
S'Y'
sg14
I10
sa(dp3820
g16
(lp3821
S'k'
asg41
I536
sS'.thisRepN'
p3822
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3823
I473
sS'.thisN'
p3824
I473
sS'.thisIndex'
p3825
g46
(g48
S'\x18\x02\x00\x00'
tRp3826
sg15
(lp3827
S'k'
asg17
S'Y'
sg14
I10
sa(dp3828
g16
(lp3829
S'k'
asg41
I347
sS'.thisRepN'
p3830
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3831
I474
sS'.thisN'
p3832
I474
sS'.thisIndex'
p3833
g46
(g48
S'[\x01\x00\x00'
tRp3834
sg15
(lp3835
S'k'
asg17
S'Y'
sg14
I10
sa(dp3836
g16
(lp3837
S'k'
asg41
I497
sS'.thisRepN'
p3838
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3839
I475
sS'.thisN'
p3840
I475
sS'.thisIndex'
p3841
g46
(g48
S'\xf1\x01\x00\x00'
tRp3842
sg15
(lp3843
S'k'
asg17
S'Y'
sg14
I10
sa(dp3844
g16
(lp3845
S'd'
asg41
I111
sS'.thisRepN'
p3846
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3847
I476
sS'.thisN'
p3848
I476
sS'.thisIndex'
p3849
g46
(g48
S'o\x00\x00\x00'
tRp3850
sg15
(lp3851
S'd'
asg17
S'Y'
sg14
I10
sa(dp3852
g16
(lp3853
S'd'
asg41
I24
sS'.thisRepN'
p3854
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3855
I477
sS'.thisN'
p3856
I477
sS'.thisIndex'
p3857
g46
(g48
S'\x18\x00\x00\x00'
tRp3858
sg15
(lp3859
S'd'
asg17
S'Y'
sg14
I10
sa(dp3860
g16
(lp3861
S'd'
asg41
I63
sS'.thisRepN'
p3862
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3863
I478
sS'.thisN'
p3864
I478
sS'.thisIndex'
p3865
g46
(g48
S'?\x00\x00\x00'
tRp3866
sg15
(lp3867
S'd'
asg17
S'Y'
sg14
I10
sa(dp3868
g16
(lp3869
S'k'
asg41
I408
sS'.thisRepN'
p3870
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3871
I479
sS'.thisN'
p3872
I479
sS'.thisIndex'
p3873
g46
(g48
S'\x98\x01\x00\x00'
tRp3874
sg15
(lp3875
S'k'
asg17
S'Y'
sg14
I10
sa(dp3876
g16
(lp3877
S'k'
asg41
I345
sS'.thisRepN'
p3878
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3879
I480
sS'.thisN'
p3880
I480
sS'.thisIndex'
p3881
g46
(g48
S'Y\x01\x00\x00'
tRp3882
sg15
(lp3883
S'k'
asg17
S'Y'
sg14
I10
sa(dp3884
g16
(lp3885
S'k'
asg41
I535
sS'.thisRepN'
p3886
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3887
I481
sS'.thisN'
p3888
I481
sS'.thisIndex'
p3889
g46
(g48
S'\x17\x02\x00\x00'
tRp3890
sg15
(lp3891
S'k'
asg17
S'Y'
sg14
I10
sa(dp3892
g16
(lp3893
S'd'
asg41
I98
sS'.thisRepN'
p3894
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3895
I482
sS'.thisN'
p3896
I482
sS'.thisIndex'
p3897
g46
(g48
S'b\x00\x00\x00'
tRp3898
sg15
(lp3899
S'd'
asg17
S'Y'
sg14
I10
sa(dp3900
g16
(lp3901
S'k'
asg41
I484
sS'.thisRepN'
p3902
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3903
I483
sS'.thisN'
p3904
I483
sS'.thisIndex'
p3905
g46
(g48
S'\xe4\x01\x00\x00'
tRp3906
sg15
(lp3907
S'k'
asg17
S'Y'
sg14
I10
sa(dp3908
g16
(lp3909
S'k'
asg41
I505
sS'.thisRepN'
p3910
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3911
I484
sS'.thisN'
p3912
I484
sS'.thisIndex'
p3913
g46
(g48
S'\xf9\x01\x00\x00'
tRp3914
sg15
(lp3915
S'k'
asg17
S'Y'
sg14
I10
sa(dp3916
g16
(lp3917
S'd'
asg41
I51
sS'.thisRepN'
p3918
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3919
I485
sS'.thisN'
p3920
I485
sS'.thisIndex'
p3921
g46
(g48
S'3\x00\x00\x00'
tRp3922
sg15
(lp3923
S'd'
asg17
S'Y'
sg14
I10
sa(dp3924
g16
(lp3925
S'k'
asg41
I330
sS'.thisRepN'
p3926
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3927
I486
sS'.thisN'
p3928
I486
sS'.thisIndex'
p3929
g46
(g48
S'J\x01\x00\x00'
tRp3930
sg15
(lp3931
S'k'
asg17
S'Y'
sg14
I10
sa(dp3932
g16
(lp3933
S'd'
asg41
I160
sS'.thisRepN'
p3934
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3935
I487
sS'.thisN'
p3936
I487
sS'.thisIndex'
p3937
g46
(g48
S'\xa0\x00\x00\x00'
tRp3938
sg15
(lp3939
S'd'
asg17
S'Y'
sg14
I10
sa(dp3940
g16
(lp3941
S'd'
asg41
I92
sS'.thisRepN'
p3942
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3943
I488
sS'.thisN'
p3944
I488
sS'.thisIndex'
p3945
g46
(g48
S'\\\x00\x00\x00'
tRp3946
sg15
(lp3947
S'd'
asg17
S'Y'
sg14
I10
sa(dp3948
g16
(lp3949
S'd'
asg41
I21
sS'.thisRepN'
p3950
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3951
I489
sS'.thisN'
p3952
I489
sS'.thisIndex'
p3953
g46
(g48
S'\x15\x00\x00\x00'
tRp3954
sg15
(lp3955
S'k'
asg17
S'N'
sg14
I10
sa(dp3956
g16
(lp3957
S'd'
asg41
I52
sS'.thisRepN'
p3958
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3959
I490
sS'.thisN'
p3960
I490
sS'.thisIndex'
p3961
g46
(g48
S'4\x00\x00\x00'
tRp3962
sg15
(lp3963
S'd'
asg17
S'Y'
sg14
I10
sa(dp3964
g16
(lp3965
S'd'
asg41
I197
sS'.thisRepN'
p3966
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3967
I491
sS'.thisN'
p3968
I491
sS'.thisIndex'
p3969
g46
(g48
S'\xc5\x00\x00\x00'
tRp3970
sg15
(lp3971
S'd'
asg17
S'Y'
sg14
I10
sa(dp3972
g16
(lp3973
S'd'
asg41
I268
sS'.thisRepN'
p3974
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3975
I492
sS'.thisN'
p3976
I492
sS'.thisIndex'
p3977
g46
(g48
S'\x0c\x01\x00\x00'
tRp3978
sg15
(lp3979
S'd'
asg17
S'Y'
sg14
I10
sa(dp3980
g16
(lp3981
S'k'
asg41
I322
sS'.thisRepN'
p3982
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3983
I493
sS'.thisN'
p3984
I493
sS'.thisIndex'
p3985
g46
(g48
S'B\x01\x00\x00'
tRp3986
sg15
(lp3987
S'k'
asg17
S'Y'
sg14
I10
sa(dp3988
g16
(lp3989
S'k'
asg41
I354
sS'.thisRepN'
p3990
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3991
I494
sS'.thisN'
p3992
I494
sS'.thisIndex'
p3993
g46
(g48
S'b\x01\x00\x00'
tRp3994
sg15
(lp3995
S'k'
asg17
S'Y'
sg14
I10
sa(dp3996
g16
(lp3997
S'd'
asg41
I233
sS'.thisRepN'
p3998
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p3999
I495
sS'.thisN'
p4000
I495
sS'.thisIndex'
p4001
g46
(g48
S'\xe9\x00\x00\x00'
tRp4002
sg15
(lp4003
S'd'
asg17
S'Y'
sg14
I10
sa(dp4004
g16
(lp4005
S'd'
asg41
I58
sS'.thisRepN'
p4006
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4007
I496
sS'.thisN'
p4008
I496
sS'.thisIndex'
p4009
g46
(g48
S':\x00\x00\x00'
tRp4010
sg15
(lp4011
S'd'
asg17
S'Y'
sg14
I10
sa(dp4012
g16
(lp4013
S'k'
asg41
I468
sS'.thisRepN'
p4014
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4015
I497
sS'.thisN'
p4016
I497
sS'.thisIndex'
p4017
g46
(g48
S'\xd4\x01\x00\x00'
tRp4018
sg15
(lp4019
S'k'
asg17
S'Y'
sg14
I10
sa(dp4020
g16
(lp4021
S'k'
asg41
I552
sS'.thisRepN'
p4022
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4023
I498
sS'.thisN'
p4024
I498
sS'.thisIndex'
p4025
g46
(g48
S'(\x02\x00\x00'
tRp4026
sg15
(lp4027
S'k'
asg17
S'Y'
sg14
I10
sa(dp4028
g16
(lp4029
S'd'
asg41
I206
sS'.thisRepN'
p4030
I0
sg25
g26
sg19
S'0'
sS'.thisTrialN'
p4031
I499
sS'.thisN'
p4032
I499
sS'.thisIndex'
p4033
g46
(g48
S'\xce\x00\x00\x00'
tRp4034
sg15
(lp4035
S'd'
asg18
I49
sg17
S'Y'
sg14
I10
sg27
g28
sa(dp4036
g16
(lp4037
S'k'
asg41
I416
sS'.thisRepN'
p4038
I0
sg21
S'Y'
sg20
S'Y'
sg25
g26
sg27
g28
sS'.thisTrialN'
p4039
I500
sS'.thisN'
p4040
I500
sS'.thisIndex'
p4041
g46
(g48
S'\xa0\x01\x00\x00'
tRp4042
sg15
(lp4043
S'd'
asg17
S'N'
sg14
I11
sa(dp4044
g16
(lp4045
S'd'
asg41
I54
sS'.thisRepN'
p4046
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4047
I501
sS'.thisN'
p4048
I501
sS'.thisIndex'
p4049
g46
(g48
S'6\x00\x00\x00'
tRp4050
sg15
(lp4051
S'k'
asg17
S'N'
sg14
I11
sa(dp4052
g16
(lp4053
S'd'
asg41
I222
sS'.thisRepN'
p4054
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4055
I502
sS'.thisN'
p4056
I502
sS'.thisIndex'
p4057
g46
(g48
S'\xde\x00\x00\x00'
tRp4058
sg15
(lp4059
S'd'
asg17
S'Y'
sg14
I11
sa(dp4060
g16
(lp4061
S'k'
asg41
I579
sS'.thisRepN'
p4062
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4063
I503
sS'.thisN'
p4064
I503
sS'.thisIndex'
p4065
g46
(g48
S'C\x02\x00\x00'
tRp4066
sg15
(lp4067
S'k'
asg17
S'Y'
sg14
I11
sa(dp4068
g16
(lp4069
S'd'
asg41
I212
sS'.thisRepN'
p4070
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4071
I504
sS'.thisN'
p4072
I504
sS'.thisIndex'
p4073
g46
(g48
S'\xd4\x00\x00\x00'
tRp4074
sg15
(lp4075
S'd'
asg17
S'Y'
sg14
I11
sa(dp4076
g16
(lp4077
S'd'
asg41
I126
sS'.thisRepN'
p4078
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4079
I505
sS'.thisN'
p4080
I505
sS'.thisIndex'
p4081
g46
(g48
S'~\x00\x00\x00'
tRp4082
sg15
(lp4083
S'd'
asg17
S'Y'
sg14
I11
sa(dp4084
g16
(lp4085
S'd'
asg41
I250
sS'.thisRepN'
p4086
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4087
I506
sS'.thisN'
p4088
I506
sS'.thisIndex'
p4089
g46
(g48
S'\xfa\x00\x00\x00'
tRp4090
sg15
(lp4091
S'd'
asg17
S'Y'
sg14
I11
sa(dp4092
g16
(lp4093
S'k'
asg41
I598
sS'.thisRepN'
p4094
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4095
I507
sS'.thisN'
p4096
I507
sS'.thisIndex'
p4097
g46
(g48
S'V\x02\x00\x00'
tRp4098
sg15
(lp4099
S'k'
asg17
S'Y'
sg14
I11
sa(dp4100
g16
(lp4101
S'd'
asg41
I12
sS'.thisRepN'
p4102
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4103
I508
sS'.thisN'
p4104
I508
sS'.thisIndex'
p4105
g46
(g48
S'\x0c\x00\x00\x00'
tRp4106
sg15
(lp4107
S'd'
asg17
S'Y'
sg14
I11
sa(dp4108
g16
(lp4109
S'k'
asg41
I550
sS'.thisRepN'
p4110
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4111
I509
sS'.thisN'
p4112
I509
sS'.thisIndex'
p4113
g46
(g48
S'&\x02\x00\x00'
tRp4114
sg15
(lp4115
S'k'
asg17
S'Y'
sg14
I11
sa(dp4116
g16
(lp4117
S'k'
asg41
I398
sS'.thisRepN'
p4118
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4119
I510
sS'.thisN'
p4120
I510
sS'.thisIndex'
p4121
g46
(g48
S'\x8e\x01\x00\x00'
tRp4122
sg15
(lp4123
S'k'
asg17
S'Y'
sg14
I11
sa(dp4124
g16
(lp4125
S'd'
asg41
I230
sS'.thisRepN'
p4126
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4127
I511
sS'.thisN'
p4128
I511
sS'.thisIndex'
p4129
g46
(g48
S'\xe6\x00\x00\x00'
tRp4130
sg15
(lp4131
S'd'
asg17
S'Y'
sg14
I11
sa(dp4132
g16
(lp4133
S'k'
asg41
I542
sS'.thisRepN'
p4134
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4135
I512
sS'.thisN'
p4136
I512
sS'.thisIndex'
p4137
g46
(g48
S'\x1e\x02\x00\x00'
tRp4138
sg15
(lp4139
S'k'
asg17
S'Y'
sg14
I11
sa(dp4140
g16
(lp4141
S'd'
asg41
I141
sS'.thisRepN'
p4142
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4143
I513
sS'.thisN'
p4144
I513
sS'.thisIndex'
p4145
g46
(g48
S'\x8d\x00\x00\x00'
tRp4146
sg15
(lp4147
S'd'
asg17
S'Y'
sg14
I11
sa(dp4148
g16
(lp4149
S'k'
asg41
I433
sS'.thisRepN'
p4150
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4151
I514
sS'.thisN'
p4152
I514
sS'.thisIndex'
p4153
g46
(g48
S'\xb1\x01\x00\x00'
tRp4154
sg15
(lp4155
S'k'
asg17
S'Y'
sg14
I11
sa(dp4156
g16
(lp4157
S'k'
asg41
I421
sS'.thisRepN'
p4158
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4159
I515
sS'.thisN'
p4160
I515
sS'.thisIndex'
p4161
g46
(g48
S'\xa5\x01\x00\x00'
tRp4162
sg15
(lp4163
S'k'
asg17
S'Y'
sg14
I11
sa(dp4164
g16
(lp4165
S'd'
asg41
I25
sS'.thisRepN'
p4166
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4167
I516
sS'.thisN'
p4168
I516
sS'.thisIndex'
p4169
g46
(g48
S'\x19\x00\x00\x00'
tRp4170
sg15
(lp4171
S'd'
asg17
S'Y'
sg14
I11
sa(dp4172
g16
(lp4173
S'd'
asg41
I239
sS'.thisRepN'
p4174
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4175
I517
sS'.thisN'
p4176
I517
sS'.thisIndex'
p4177
g46
(g48
S'\xef\x00\x00\x00'
tRp4178
sg15
(lp4179
S'd'
asg17
S'Y'
sg14
I11
sa(dp4180
g16
(lp4181
S'k'
asg41
I300
sS'.thisRepN'
p4182
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4183
I518
sS'.thisN'
p4184
I518
sS'.thisIndex'
p4185
g46
(g48
S',\x01\x00\x00'
tRp4186
sg15
(lp4187
S'k'
asg17
S'Y'
sg14
I11
sa(dp4188
g16
(lp4189
S'k'
asg41
I546
sS'.thisRepN'
p4190
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4191
I519
sS'.thisN'
p4192
I519
sS'.thisIndex'
p4193
g46
(g48
S'"\x02\x00\x00'
tRp4194
sg15
(lp4195
S'k'
asg17
S'Y'
sg14
I11
sa(dp4196
g16
(lp4197
S'k'
asg41
I466
sS'.thisRepN'
p4198
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4199
I520
sS'.thisN'
p4200
I520
sS'.thisIndex'
p4201
g46
(g48
S'\xd2\x01\x00\x00'
tRp4202
sg15
(lp4203
S'k'
asg17
S'Y'
sg14
I11
sa(dp4204
g16
(lp4205
S'd'
asg41
I138
sS'.thisRepN'
p4206
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4207
I521
sS'.thisN'
p4208
I521
sS'.thisIndex'
p4209
g46
(g48
S'\x8a\x00\x00\x00'
tRp4210
sg15
(lp4211
S'd'
asg17
S'Y'
sg14
I11
sa(dp4212
g16
(lp4213
S'k'
asg41
I392
sS'.thisRepN'
p4214
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4215
I522
sS'.thisN'
p4216
I522
sS'.thisIndex'
p4217
g46
(g48
S'\x88\x01\x00\x00'
tRp4218
sg15
(lp4219
S'k'
asg17
S'Y'
sg14
I11
sa(dp4220
g16
(lp4221
S'k'
asg41
I463
sS'.thisRepN'
p4222
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4223
I523
sS'.thisN'
p4224
I523
sS'.thisIndex'
p4225
g46
(g48
S'\xcf\x01\x00\x00'
tRp4226
sg15
(lp4227
S'k'
asg17
S'Y'
sg14
I11
sa(dp4228
g16
(lp4229
S'k'
asg41
I393
sS'.thisRepN'
p4230
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4231
I524
sS'.thisN'
p4232
I524
sS'.thisIndex'
p4233
g46
(g48
S'\x89\x01\x00\x00'
tRp4234
sg15
(lp4235
S'k'
asg17
S'Y'
sg14
I11
sa(dp4236
g16
(lp4237
S'k'
asg41
I513
sS'.thisRepN'
p4238
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4239
I525
sS'.thisN'
p4240
I525
sS'.thisIndex'
p4241
g46
(g48
S'\x01\x02\x00\x00'
tRp4242
sg15
(lp4243
S'k'
asg17
S'Y'
sg14
I11
sa(dp4244
g16
(lp4245
S'k'
asg41
I337
sS'.thisRepN'
p4246
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4247
I526
sS'.thisN'
p4248
I526
sS'.thisIndex'
p4249
g46
(g48
S'Q\x01\x00\x00'
tRp4250
sg15
(lp4251
S'k'
asg17
S'Y'
sg14
I11
sa(dp4252
g16
(lp4253
S'k'
asg41
I472
sS'.thisRepN'
p4254
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4255
I527
sS'.thisN'
p4256
I527
sS'.thisIndex'
p4257
g46
(g48
S'\xd8\x01\x00\x00'
tRp4258
sg15
(lp4259
S'k'
asg17
S'Y'
sg14
I11
sa(dp4260
g16
(lp4261
S'k'
asg41
I341
sS'.thisRepN'
p4262
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4263
I528
sS'.thisN'
p4264
I528
sS'.thisIndex'
p4265
g46
(g48
S'U\x01\x00\x00'
tRp4266
sg15
(lp4267
S'k'
asg17
S'Y'
sg14
I11
sa(dp4268
g16
(lp4269
S'k'
asg41
I593
sS'.thisRepN'
p4270
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4271
I529
sS'.thisN'
p4272
I529
sS'.thisIndex'
p4273
g46
(g48
S'Q\x02\x00\x00'
tRp4274
sg15
(lp4275
S'k'
asg17
S'Y'
sg14
I11
sa(dp4276
g16
(lp4277
S'd'
asg41
I116
sS'.thisRepN'
p4278
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4279
I530
sS'.thisN'
p4280
I530
sS'.thisIndex'
p4281
g46
(g48
S't\x00\x00\x00'
tRp4282
sg15
(lp4283
S'k'
asg17
S'N'
sg14
I11
sa(dp4284
g16
(lp4285
S'k'
asg41
I478
sS'.thisRepN'
p4286
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4287
I531
sS'.thisN'
p4288
I531
sS'.thisIndex'
p4289
g46
(g48
S'\xde\x01\x00\x00'
tRp4290
sg15
(lp4291
S'k'
asg17
S'Y'
sg14
I11
sa(dp4292
g16
(lp4293
S'd'
asg41
I279
sS'.thisRepN'
p4294
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4295
I532
sS'.thisN'
p4296
I532
sS'.thisIndex'
p4297
g46
(g48
S'\x17\x01\x00\x00'
tRp4298
sg15
(lp4299
S'd'
asg17
S'Y'
sg14
I11
sa(dp4300
g16
(lp4301
S'k'
asg41
I493
sS'.thisRepN'
p4302
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4303
I533
sS'.thisN'
p4304
I533
sS'.thisIndex'
p4305
g46
(g48
S'\xed\x01\x00\x00'
tRp4306
sg15
(lp4307
S'k'
asg17
S'Y'
sg14
I11
sa(dp4308
g16
(lp4309
S'k'
asg41
I522
sS'.thisRepN'
p4310
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4311
I534
sS'.thisN'
p4312
I534
sS'.thisIndex'
p4313
g46
(g48
S'\n\x02\x00\x00'
tRp4314
sg15
(lp4315
S'k'
asg17
S'Y'
sg14
I11
sa(dp4316
g16
(lp4317
S'k'
asg41
I326
sS'.thisRepN'
p4318
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4319
I535
sS'.thisN'
p4320
I535
sS'.thisIndex'
p4321
g46
(g48
S'F\x01\x00\x00'
tRp4322
sg15
(lp4323
S'k'
asg17
S'Y'
sg14
I11
sa(dp4324
g16
(lp4325
S'k'
asg41
I386
sS'.thisRepN'
p4326
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4327
I536
sS'.thisN'
p4328
I536
sS'.thisIndex'
p4329
g46
(g48
S'\x82\x01\x00\x00'
tRp4330
sg15
(lp4331
S'k'
asg17
S'Y'
sg14
I11
sa(dp4332
g16
(lp4333
S'k'
asg41
I520
sS'.thisRepN'
p4334
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4335
I537
sS'.thisN'
p4336
I537
sS'.thisIndex'
p4337
g46
(g48
S'\x08\x02\x00\x00'
tRp4338
sg15
(lp4339
S'k'
asg17
S'Y'
sg14
I11
sa(dp4340
g16
(lp4341
S'k'
asg41
I375
sS'.thisRepN'
p4342
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4343
I538
sS'.thisN'
p4344
I538
sS'.thisIndex'
p4345
g46
(g48
S'w\x01\x00\x00'
tRp4346
sg15
(lp4347
S'k'
asg17
S'Y'
sg14
I11
sa(dp4348
g16
(lp4349
S'd'
asg41
I276
sS'.thisRepN'
p4350
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4351
I539
sS'.thisN'
p4352
I539
sS'.thisIndex'
p4353
g46
(g48
S'\x14\x01\x00\x00'
tRp4354
sg15
(lp4355
S'd'
asg17
S'Y'
sg14
I11
sa(dp4356
g16
(lp4357
S'd'
asg41
I101
sS'.thisRepN'
p4358
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4359
I540
sS'.thisN'
p4360
I540
sS'.thisIndex'
p4361
g46
(g48
S'e\x00\x00\x00'
tRp4362
sg15
(lp4363
S'd'
asg17
S'Y'
sg14
I11
sa(dp4364
g16
(lp4365
S'd'
asg41
I285
sS'.thisRepN'
p4366
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4367
I541
sS'.thisN'
p4368
I541
sS'.thisIndex'
p4369
g46
(g48
S'\x1d\x01\x00\x00'
tRp4370
sg15
(lp4371
S'd'
asg17
S'Y'
sg14
I11
sa(dp4372
g16
(lp4373
S'd'
asg41
I210
sS'.thisRepN'
p4374
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4375
I542
sS'.thisN'
p4376
I542
sS'.thisIndex'
p4377
g46
(g48
S'\xd2\x00\x00\x00'
tRp4378
sg15
(lp4379
S'd'
asg17
S'Y'
sg14
I11
sa(dp4380
g16
(lp4381
S'k'
asg41
I533
sS'.thisRepN'
p4382
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4383
I543
sS'.thisN'
p4384
I543
sS'.thisIndex'
p4385
g46
(g48
S'\x15\x02\x00\x00'
tRp4386
sg15
(lp4387
S'k'
asg17
S'Y'
sg14
I11
sa(dp4388
g16
(lp4389
S'k'
asg41
I306
sS'.thisRepN'
p4390
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4391
I544
sS'.thisN'
p4392
I544
sS'.thisIndex'
p4393
g46
(g48
S'2\x01\x00\x00'
tRp4394
sg15
(lp4395
S'k'
asg17
S'Y'
sg14
I11
sa(dp4396
g16
(lp4397
S'd'
asg41
I193
sS'.thisRepN'
p4398
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4399
I545
sS'.thisN'
p4400
I545
sS'.thisIndex'
p4401
g46
(g48
S'\xc1\x00\x00\x00'
tRp4402
sg15
(lp4403
S'k'
asg17
S'N'
sg14
I11
sa(dp4404
g16
(lp4405
S'd'
asg41
I62
sS'.thisRepN'
p4406
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4407
I546
sS'.thisN'
p4408
I546
sS'.thisIndex'
p4409
g46
(g48
S'>\x00\x00\x00'
tRp4410
sg15
(lp4411
S'd'
asg17
S'Y'
sg14
I11
sa(dp4412
g16
(lp4413
S'k'
asg41
I402
sS'.thisRepN'
p4414
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4415
I547
sS'.thisN'
p4416
I547
sS'.thisIndex'
p4417
g46
(g48
S'\x92\x01\x00\x00'
tRp4418
sg15
(lp4419
S'k'
asg17
S'Y'
sg14
I11
sa(dp4420
g16
(lp4421
S'd'
asg41
I139
sS'.thisRepN'
p4422
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4423
I548
sS'.thisN'
p4424
I548
sS'.thisIndex'
p4425
g46
(g48
S'\x8b\x00\x00\x00'
tRp4426
sg15
(lp4427
S'd'
asg17
S'Y'
sg14
I11
sa(dp4428
g16
(lp4429
S'k'
asg41
I452
sS'.thisRepN'
p4430
I0
sg25
g26
sg19
S'0'
sS'.thisTrialN'
p4431
I549
sS'.thisN'
p4432
I549
sS'.thisIndex'
p4433
g46
(g48
S'\xc4\x01\x00\x00'
tRp4434
sg15
(lp4435
S'k'
asg18
I46
sg17
S'Y'
sg14
I11
sg27
g28
sa(dp4436
g16
(lp4437
S'k'
asg41
I316
sS'.thisRepN'
p4438
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4439
I550
sS'.thisN'
p4440
I550
sS'.thisIndex'
p4441
g46
(g48
S'<\x01\x00\x00'
tRp4442
sg15
(lp4443
S'k'
asg17
S'Y'
sg14
I12
sa(dp4444
g16
(lp4445
S'k'
asg41
I545
sS'.thisRepN'
p4446
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4447
I551
sS'.thisN'
p4448
I551
sS'.thisIndex'
p4449
g46
(g48
S'!\x02\x00\x00'
tRp4450
sg15
(lp4451
S'k'
asg17
S'Y'
sg14
I12
sa(dp4452
g16
(lp4453
S'd'
asg41
I3
sS'.thisRepN'
p4454
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4455
I552
sS'.thisN'
p4456
I552
sS'.thisIndex'
p4457
g46
(g48
S'\x03\x00\x00\x00'
tRp4458
sg15
(lp4459
S'd'
asg17
S'Y'
sg14
I12
sa(dp4460
g16
(lp4461
S'd'
asg41
I266
sS'.thisRepN'
p4462
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4463
I553
sS'.thisN'
p4464
I553
sS'.thisIndex'
p4465
g46
(g48
S'\n\x01\x00\x00'
tRp4466
sg15
(lp4467
S'd'
asg17
S'Y'
sg14
I12
sa(dp4468
g16
(lp4469
S'd'
asg41
I45
sS'.thisRepN'
p4470
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4471
I554
sS'.thisN'
p4472
I554
sS'.thisIndex'
p4473
g46
(g48
S'-\x00\x00\x00'
tRp4474
sg15
(lp4475
S'd'
asg17
S'Y'
sg14
I12
sa(dp4476
g16
(lp4477
S'd'
asg41
I127
sS'.thisRepN'
p4478
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4479
I555
sS'.thisN'
p4480
I555
sS'.thisIndex'
p4481
g46
(g48
S'\x7f\x00\x00\x00'
tRp4482
sg15
(lp4483
S'd'
asg17
S'Y'
sg14
I12
sa(dp4484
g16
(lp4485
S'k'
asg41
I320
sS'.thisRepN'
p4486
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4487
I556
sS'.thisN'
p4488
I556
sS'.thisIndex'
p4489
g46
(g48
S'@\x01\x00\x00'
tRp4490
sg15
(lp4491
S'd'
asg17
S'N'
sg14
I12
sa(dp4492
g16
(lp4493
S'd'
asg41
I170
sS'.thisRepN'
p4494
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4495
I557
sS'.thisN'
p4496
I557
sS'.thisIndex'
p4497
g46
(g48
S'\xaa\x00\x00\x00'
tRp4498
sg15
(lp4499
S'd'
asg17
S'Y'
sg14
I12
sa(dp4500
g16
(lp4501
S'k'
asg41
I551
sS'.thisRepN'
p4502
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4503
I558
sS'.thisN'
p4504
I558
sS'.thisIndex'
p4505
g46
(g48
S"'\x02\x00\x00"
tRp4506
sg15
(lp4507
S'k'
asg17
S'Y'
sg14
I12
sa(dp4508
g16
(lp4509
S'd'
asg41
I195
sS'.thisRepN'
p4510
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4511
I559
sS'.thisN'
p4512
I559
sS'.thisIndex'
p4513
g46
(g48
S'\xc3\x00\x00\x00'
tRp4514
sg15
(lp4515
S'k'
asg17
S'N'
sg14
I12
sa(dp4516
g16
(lp4517
S'd'
asg41
I129
sS'.thisRepN'
p4518
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4519
I560
sS'.thisN'
p4520
I560
sS'.thisIndex'
p4521
g46
(g48
S'\x81\x00\x00\x00'
tRp4522
sg15
(lp4523
S'd'
asg17
S'Y'
sg14
I12
sa(dp4524
g16
(lp4525
S'k'
asg41
I317
sS'.thisRepN'
p4526
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4527
I561
sS'.thisN'
p4528
I561
sS'.thisIndex'
p4529
g46
(g48
S'=\x01\x00\x00'
tRp4530
sg15
(lp4531
S'k'
asg17
S'Y'
sg14
I12
sa(dp4532
g16
(lp4533
S'd'
asg41
I64
sS'.thisRepN'
p4534
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4535
I562
sS'.thisN'
p4536
I562
sS'.thisIndex'
p4537
g46
(g48
S'@\x00\x00\x00'
tRp4538
sg15
(lp4539
S'd'
asg17
S'Y'
sg14
I12
sa(dp4540
g16
(lp4541
S'd'
asg41
I296
sS'.thisRepN'
p4542
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4543
I563
sS'.thisN'
p4544
I563
sS'.thisIndex'
p4545
g46
(g48
S'(\x01\x00\x00'
tRp4546
sg15
(lp4547
S'd'
asg17
S'Y'
sg14
I12
sa(dp4548
g16
(lp4549
S'd'
asg41
I196
sS'.thisRepN'
p4550
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4551
I564
sS'.thisN'
p4552
I564
sS'.thisIndex'
p4553
g46
(g48
S'\xc4\x00\x00\x00'
tRp4554
sg15
(lp4555
S'd'
asg17
S'Y'
sg14
I12
sa(dp4556
g16
(lp4557
S'd'
asg41
I201
sS'.thisRepN'
p4558
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4559
I565
sS'.thisN'
p4560
I565
sS'.thisIndex'
p4561
g46
(g48
S'\xc9\x00\x00\x00'
tRp4562
sg15
(lp4563
S'd'
asg17
S'Y'
sg14
I12
sa(dp4564
g16
(lp4565
S'k'
asg41
I431
sS'.thisRepN'
p4566
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4567
I566
sS'.thisN'
p4568
I566
sS'.thisIndex'
p4569
g46
(g48
S'\xaf\x01\x00\x00'
tRp4570
sg15
(lp4571
S'k'
asg17
S'Y'
sg14
I12
sa(dp4572
g16
(lp4573
S'k'
asg41
I471
sS'.thisRepN'
p4574
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4575
I567
sS'.thisN'
p4576
I567
sS'.thisIndex'
p4577
g46
(g48
S'\xd7\x01\x00\x00'
tRp4578
sg15
(lp4579
S'k'
asg17
S'Y'
sg14
I12
sa(dp4580
g16
(lp4581
S'k'
asg41
I321
sS'.thisRepN'
p4582
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4583
I568
sS'.thisN'
p4584
I568
sS'.thisIndex'
p4585
g46
(g48
S'A\x01\x00\x00'
tRp4586
sg15
(lp4587
S'k'
asg17
S'Y'
sg14
I12
sa(dp4588
g16
(lp4589
S'k'
asg41
I358
sS'.thisRepN'
p4590
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4591
I569
sS'.thisN'
p4592
I569
sS'.thisIndex'
p4593
g46
(g48
S'f\x01\x00\x00'
tRp4594
sg15
(lp4595
S'd'
asg17
S'N'
sg14
I12
sa(dp4596
g16
(lp4597
S'd'
asg41
I157
sS'.thisRepN'
p4598
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4599
I570
sS'.thisN'
p4600
I570
sS'.thisIndex'
p4601
g46
(g48
S'\x9d\x00\x00\x00'
tRp4602
sg15
(lp4603
S'd'
asg17
S'Y'
sg14
I12
sa(dp4604
g16
(lp4605
S'k'
asg41
I434
sS'.thisRepN'
p4606
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4607
I571
sS'.thisN'
p4608
I571
sS'.thisIndex'
p4609
g46
(g48
S'\xb2\x01\x00\x00'
tRp4610
sg15
(lp4611
S'k'
asg17
S'Y'
sg14
I12
sa(dp4612
g16
(lp4613
S'd'
asg41
I281
sS'.thisRepN'
p4614
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4615
I572
sS'.thisN'
p4616
I572
sS'.thisIndex'
p4617
g46
(g48
S'\x19\x01\x00\x00'
tRp4618
sg15
(lp4619
S'd'
asg17
S'Y'
sg14
I12
sa(dp4620
g16
(lp4621
S'd'
asg41
I280
sS'.thisRepN'
p4622
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4623
I573
sS'.thisN'
p4624
I573
sS'.thisIndex'
p4625
g46
(g48
S'\x18\x01\x00\x00'
tRp4626
sg15
(lp4627
S'd'
asg17
S'Y'
sg14
I12
sa(dp4628
g16
(lp4629
S'd'
asg41
I28
sS'.thisRepN'
p4630
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4631
I574
sS'.thisN'
p4632
I574
sS'.thisIndex'
p4633
g46
(g48
S'\x1c\x00\x00\x00'
tRp4634
sg15
(lp4635
S'd'
asg17
S'Y'
sg14
I12
sa(dp4636
g16
(lp4637
S'd'
asg41
I97
sS'.thisRepN'
p4638
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4639
I575
sS'.thisN'
p4640
I575
sS'.thisIndex'
p4641
g46
(g48
S'a\x00\x00\x00'
tRp4642
sg15
(lp4643
S'd'
asg17
S'Y'
sg14
I12
sa(dp4644
g16
(lp4645
S'k'
asg41
I340
sS'.thisRepN'
p4646
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4647
I576
sS'.thisN'
p4648
I576
sS'.thisIndex'
p4649
g46
(g48
S'T\x01\x00\x00'
tRp4650
sg15
(lp4651
S'k'
asg17
S'Y'
sg14
I12
sa(dp4652
g16
(lp4653
S'd'
asg41
I120
sS'.thisRepN'
p4654
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4655
I577
sS'.thisN'
p4656
I577
sS'.thisIndex'
p4657
g46
(g48
S'x\x00\x00\x00'
tRp4658
sg15
(lp4659
S'd'
asg17
S'Y'
sg14
I12
sa(dp4660
g16
(lp4661
S'd'
asg41
I99
sS'.thisRepN'
p4662
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4663
I578
sS'.thisN'
p4664
I578
sS'.thisIndex'
p4665
g46
(g48
S'c\x00\x00\x00'
tRp4666
sg15
(lp4667
S'd'
asg17
S'Y'
sg14
I12
sa(dp4668
g16
(lp4669
S'k'
asg41
I407
sS'.thisRepN'
p4670
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4671
I579
sS'.thisN'
p4672
I579
sS'.thisIndex'
p4673
g46
(g48
S'\x97\x01\x00\x00'
tRp4674
sg15
(lp4675
S'k'
asg17
S'Y'
sg14
I12
sa(dp4676
g16
(lp4677
S'k'
asg41
I544
sS'.thisRepN'
p4678
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4679
I580
sS'.thisN'
p4680
I580
sS'.thisIndex'
p4681
g46
(g48
S' \x02\x00\x00'
tRp4682
sg15
(lp4683
S'k'
asg17
S'Y'
sg14
I12
sa(dp4684
g16
(lp4685
S'k'
asg41
I454
sS'.thisRepN'
p4686
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4687
I581
sS'.thisN'
p4688
I581
sS'.thisIndex'
p4689
g46
(g48
S'\xc6\x01\x00\x00'
tRp4690
sg15
(lp4691
S'k'
asg17
S'Y'
sg14
I12
sa(dp4692
g16
(lp4693
S'k'
asg41
I404
sS'.thisRepN'
p4694
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4695
I582
sS'.thisN'
p4696
I582
sS'.thisIndex'
p4697
g46
(g48
S'\x94\x01\x00\x00'
tRp4698
sg15
(lp4699
S'd'
asg17
S'N'
sg14
I12
sa(dp4700
g16
(lp4701
S'k'
asg41
I532
sS'.thisRepN'
p4702
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4703
I583
sS'.thisN'
p4704
I583
sS'.thisIndex'
p4705
g46
(g48
S'\x14\x02\x00\x00'
tRp4706
sg15
(lp4707
S'k'
asg17
S'Y'
sg14
I12
sa(dp4708
g16
(lp4709
S'k'
asg41
I464
sS'.thisRepN'
p4710
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4711
I584
sS'.thisN'
p4712
I584
sS'.thisIndex'
p4713
g46
(g48
S'\xd0\x01\x00\x00'
tRp4714
sg15
(lp4715
S'k'
asg17
S'Y'
sg14
I12
sa(dp4716
g16
(lp4717
S'd'
asg41
I0
sS'.thisRepN'
p4718
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4719
I585
sS'.thisN'
p4720
I585
sS'.thisIndex'
p4721
g46
(g48
S'\x00\x00\x00\x00'
tRp4722
sg15
(lp4723
S'd'
asg17
S'Y'
sg14
I12
sa(dp4724
g16
(lp4725
S'k'
asg41
I577
sS'.thisRepN'
p4726
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4727
I586
sS'.thisN'
p4728
I586
sS'.thisIndex'
p4729
g46
(g48
S'A\x02\x00\x00'
tRp4730
sg15
(lp4731
S'k'
asg17
S'Y'
sg14
I12
sa(dp4732
g16
(lp4733
S'd'
asg41
I205
sS'.thisRepN'
p4734
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4735
I587
sS'.thisN'
p4736
I587
sS'.thisIndex'
p4737
g46
(g48
S'\xcd\x00\x00\x00'
tRp4738
sg15
(lp4739
S'd'
asg17
S'Y'
sg14
I12
sa(dp4740
g16
(lp4741
S'd'
asg41
I118
sS'.thisRepN'
p4742
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4743
I588
sS'.thisN'
p4744
I588
sS'.thisIndex'
p4745
g46
(g48
S'v\x00\x00\x00'
tRp4746
sg15
(lp4747
S'd'
asg17
S'Y'
sg14
I12
sa(dp4748
g16
(lp4749
S'd'
asg41
I8
sS'.thisRepN'
p4750
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4751
I589
sS'.thisN'
p4752
I589
sS'.thisIndex'
p4753
g46
(g48
S'\x08\x00\x00\x00'
tRp4754
sg15
(lp4755
S'd'
asg17
S'Y'
sg14
I12
sa(dp4756
g16
(lp4757
S'd'
asg41
I265
sS'.thisRepN'
p4758
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4759
I590
sS'.thisN'
p4760
I590
sS'.thisIndex'
p4761
g46
(g48
S'\t\x01\x00\x00'
tRp4762
sg15
(lp4763
S'd'
asg17
S'Y'
sg14
I12
sa(dp4764
g16
(lp4765
S'd'
asg41
I177
sS'.thisRepN'
p4766
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4767
I591
sS'.thisN'
p4768
I591
sS'.thisIndex'
p4769
g46
(g48
S'\xb1\x00\x00\x00'
tRp4770
sg15
(lp4771
S'd'
asg17
S'Y'
sg14
I12
sa(dp4772
g16
(lp4773
S'd'
asg41
I105
sS'.thisRepN'
p4774
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4775
I592
sS'.thisN'
p4776
I592
sS'.thisIndex'
p4777
g46
(g48
S'i\x00\x00\x00'
tRp4778
sg15
(lp4779
S'd'
asg17
S'Y'
sg14
I12
sa(dp4780
g16
(lp4781
S'd'
asg41
I68
sS'.thisRepN'
p4782
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4783
I593
sS'.thisN'
p4784
I593
sS'.thisIndex'
p4785
g46
(g48
S'D\x00\x00\x00'
tRp4786
sg15
(lp4787
S'd'
asg17
S'Y'
sg14
I12
sa(dp4788
g16
(lp4789
S'd'
asg41
I215
sS'.thisRepN'
p4790
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4791
I594
sS'.thisN'
p4792
I594
sS'.thisIndex'
p4793
g46
(g48
S'\xd7\x00\x00\x00'
tRp4794
sg15
(lp4795
S'k'
asg17
S'N'
sg14
I12
sa(dp4796
g16
(lp4797
S'd'
asg41
I251
sS'.thisRepN'
p4798
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4799
I595
sS'.thisN'
p4800
I595
sS'.thisIndex'
p4801
g46
(g48
S'\xfb\x00\x00\x00'
tRp4802
sg15
(lp4803
S'd'
asg17
S'Y'
sg14
I12
sa(dp4804
g16
(lp4805
S'd'
asg41
I67
sS'.thisRepN'
p4806
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4807
I596
sS'.thisN'
p4808
I596
sS'.thisIndex'
p4809
g46
(g48
S'C\x00\x00\x00'
tRp4810
sg15
(lp4811
S'd'
asg17
S'Y'
sg14
I12
sa(dp4812
g16
(lp4813
S'k'
asg41
I441
sS'.thisRepN'
p4814
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4815
I597
sS'.thisN'
p4816
I597
sS'.thisIndex'
p4817
g46
(g48
S'\xb9\x01\x00\x00'
tRp4818
sg15
(lp4819
S'k'
asg17
S'Y'
sg14
I12
sa(dp4820
g16
(lp4821
S'd'
asg41
I96
sS'.thisRepN'
p4822
I0
sg25
g26
sg27
g28
sS'.thisTrialN'
p4823
I598
sS'.thisN'
p4824
I598
sS'.thisIndex'
p4825
g46
(g48
S'`\x00\x00\x00'
tRp4826
sg15
(lp4827
S'd'
asg17
S'Y'
sg14
I12
sa(dp4828
g16
(lp4829
S'k'
asg41
I507
sS'.thisRepN'
p4830
I0
sg25
g26
sg19
S'0'
sS'.thisTrialN'
p4831
I599
sS'.thisN'
p4832
I599
sS'.thisIndex'
p4833
g46
(g48
S'\xfb\x01\x00\x00'
tRp4834
sg15
(lp4835
S'k'
asg18
I45
sg17
S'Y'
sg14
I12
sg27
g28
sasS'loops'
p4836
(lp4837
g1
(cpsychopy.data
TrialHandler
p4838
g3
NtRp4839
(dp4840
S'origin'
p4841
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4842
sS'thisTrial'
p4843
(lp4844
sS'_exp'
p4845
I63132528
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p4846
sS'thisRepN'
p4847
I1
sg22
I01
sg23
NsS'data'
p4848
g1
(cpsychopy.data
DataHandler
p4849
c__builtin__
dict
p4850
(dp4851
S'ran'
p4852
cnumpy.ma.core
_mareconstruct
p4853
(cnumpy.ma.core
MaskedArray
p4854
cnumpy
ndarray
p4855
(I0
tp4856
S'b'
tRp4857
(I1
(I600
I1
tg47
(S'f4'
I0
I1
tRp4858
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p4859
g4853
(g4854
g4855
g4856
S'b'
tRp4860
(I1
(I600
I1
tg4858
I00
S'\x00@\x12D\x00\x00\xddC\x00\x00\x8eB\x00\x00\nD\x00\x00\xc4B\x00\x00\xa8A\x00\x80\x9fC\x00\x00-C\x00@\x13D\x00\x00\x1cB\x00\x00BC\x00\x00<B\x00\x00\xfeC\x00\x80\xe9C\x00\x00\xe0@\x00\x00\xd1C\x00\x004B\x00\x80\xb2C\x00\x00\xabC\x00\x00\xccC\x00\x00\x83C\x00\x80\xf4C\x00\x00\xb2B\x00\x00XC\x00\x80\xeeC\x00\x00\x01D\x00\x00AC\x00\x80\xb5C\x00\x80\x0fD\x00\x80\xbeC\x00\x00\xcaC\x00\x000A\x00\x00\x84B\x00\x80\xe5C\x00\x00\xe0C\x00\x00\xaaC\x00\x00\x03C\x00\x80\xa5C\x00\x80\xb8C\x00\x00\xcaB\x00\x80\x9eC\x00\x00\x14B\x00\x80\xccC\x00\x003C\x00\x008C\x00\x80\nD\x00\x00\xbeC\x00\x00\x12C\x00\x80\xa0C\x00\x80\xe0C\x00\x00\xb8A\x00\x80\xf2C\x00\x00\xf5C\x00\x00\x9bC\x00\x80\xfaC\x00\x00\xeeB\x00\x80\x8cC\x00\x00EC\x00\x00\xf8C\x00\x00\xc0C\x00\x80\x97C\x00\x00\xf6B\x00\x80\x08D\x00\x00\xefC\x00\x80\x0cD\x00\x80\xbcC\x00\x00HB\x00\x00\x15D\x00@\x14D\x00\x80\xe2C\x00\x80\xbaC\x00\x00\x14C\x00\x00@A\x00\x00\xe3C\x00\x00\xcfC\x00\x00\xe6B\x00\x00\x81C\x00\x00nC\x00\x00#C\x00\x00\xc8C\x00\x00FC\x00\x00\xfaB\x00\x80\x8eC\x00\x00\xb0B\x00\x00\xbcC\x00\x00\x98B\x00\x00\x00A\x00\x00\xadC\x00\x80\x83C\x00\x80\x90C\x00\x00IC\x00\x00\xc3C\x00\x00\xf4C\x00\x80\xc5C\x00\x00\xb7C\x00\x00&C\x00\x80\x15D\x00\xc0\x0fD\x00\x00\xf1C\x00\x80\x10D\x00\x80\xd1C\x00\x00\x07D\x00\x00\xe1C\x00\x00GC\x00\x00\x15C\x00\x00\x14D\x00\x00+C\x00\x00\x80?\x00\x80\xe7C\x00\x00\xb9C\x00\x00?C\x00\x00\xeeC\x00\x00~C\x00\x00"C\x00\x00\xd8C\x00\x80\xbfC\x00\x80\x04D\x00\x00\xacB\x00\x00\x13D\x00\x00VC\x00@\x10D\x00\x80\xd5C\x00\x00\x0eC\x00\x00\x0bC\x00\x00!C\x00\x00(B\x00\x80\xfcC\x00\xc0\nD\x00\x00\x93C\x00\x00\x0cD\x00\x00=C\x00\x00eC\x00\x00 B\x00\x00\x8cC\x00\x00\x00B\x00\x00\xd8A\x00\x80\x9cC\x00\x00\xc6B\x00@\x02D\x00\x00\tD\x00\x80\xabC\x00@\x00D\x00\x80\xb7C\x00\x00\xecC\x00\x00\x9aC\x00\x00\x0cB\x00\x00\x06C\x00\x00^C\x00\x00\xa0B\x00\x000B\x00\x80\x99C\x00\x00\xa7C\x00\x00\xd3C\x00\x00TB\x00\x00\x18B\x00\x80\x88C\x00\x00\x90C\x00\x80\x0eD\x00\x80\xb1C\x00\x80\xceC\x00\x80\xf3C\x00\x00\xe7C\x00\x00\xeaC\x00\x00\xc8B\x00\x00\xbeB\x00\x00lC\x00\x00\x9eC\x00\x00\xa8C\x00\x00wC\x00\x00uC\x00@\x0bD\x00\x00\x8fC\x00\x00|C\x00\x00\x00C\x00\x00\xd8B\x00\x00SC\x00\x00pC\x00\xc0\x13D\x00\x80\x8dC\x00\x00\x08C\x00\x00\xa0A\x00\x00\xbaC\x00\x00\x00@\x00\x00\xbdC\x00\x00$C\x00\x00\xe5C\x00\x00PA\x00\x00\xd5C\x00\x00\x99C\x00\x00@@\x00\x00YC\x00\x00pA\x00\x00\x1fC\x00@\x08D\x00\x00\xcbC\x00\xc0\x0bD\x00\x00\rD\x00\x80\xf5C\x00\x00CC\x00\x00rC\x00\x80\xb9C\x00@\rD\x00\x00ZC\x00\x00\x1eC\x00\x00hB\x00\xc0\x12D\x00\x80\xf9C\x00\x00fC\x00\x00,B\x00\x00pB\x00\x80\x07D\x00\x00\x96C\x00\x00\xfcC\x00\x00\xf0B\x00\x00:C\x00\x80\x14D\x00\x00\xe4B\x00\x00\x8bC\x00\x009C\x00\x00bC\x00\x80\xa9C\x00\x00\x92C\x00\x00\xfbC\x00\x00oC\x00\x00\xb8C\x00\x00\xebC\x00\x00hC\x00\x00PC\x00\x00\xa0C\x00\x00\x08B\x00\x80\xffC\x00\x00\xc7C\x00\x00XB\x00\x80\xf7C\x00\x80\x8aC\x00\x000C\x00\x00\xa6B\x00\x00]C\x00\x00\xbcB\x00@\x01D\x00\x00vC\x00\x00\x04C\x00\x80\x9bC\x00\x00\xf8A\x00\x00\xd2C\x00\x00>C\x00\x80\xcdC\x00\x00\xa6C\x00\x80\xa6C\x00\x00 C\x00\x00\xfdC\x00\xc0\x14D\x00\x80\x85C\x00\x00\xccB\x00\x00\xb3C\x00\x80\xdbC\x00\x80\x96C\x00\x00\xa5C\x00\x80\x89C\x00\x00\xf4B\x00\x00\tC\x00\x00\xf2B\x00\x00\x07C\x00\x00cC\x00\x00QC\x00\x80\x13D\x00@\nD\x00\x00\x95C\x00\x00\xf6C\x00\x00\x90B\x00\x00\x10B\x00\x80\x84C\x00\x007C\x00\x00@B\x00\x008B\x00\x00tB\x00\xc0\x06D\x00\x00\x01C\x00\x00\xa8B\x00\x00\x05D\x00@\x0fD\x00\x00\x0fD\x00\x00\xdeC\x00\x00\xdbC\x00\x001C\x00@\x07D\x00\x80\xc6C\x00\x004C\x00\x00\xb5C\x00\x00\xd4B\x00\x00\x88B\x00\x00LB\x00\x00\x92B\x00\x00\xb4B\x00\x00aC\x00\x80\xddC\x00\xc0\x0cD\x00\x00\x87C\x00\x80\x80C\x00\x00qC\x00\x80\x01D\x00\x80\xadC\x00\x00RC\x00\x80\xb6C\x00\x80\xdcC\x00\x00\xaaB\x00\x00\x08D\x00\x00\xe8A\x00\x00\xceC\x00\x00\x9fC\x00\x00\x98C\x00\x80\x9dC\x00\x00\x16C\x00\x00\nC\x00\x00\xd9C\x00\x00\xb0C\x00\x80\tD\x00@\x0cD\x00\x00\xd4C\x00\x00\xc0@\x00\x00\x0bD\x00\x00\x0eD\x00\x80\xf6C\x00\x00\x98A\x00\x00jC\x00\x80\x92C\x00\xc0\x05D\x00\x00\xbaB\x00\x00\x85C\x00\x00\xb2C\x00\x00\xf3C\x00\x00\xdcB\x00\x80\xc4C\x00\x00;C\x00\x00\x05C\x00\x00HC\x00\x80\x87C\x00\x80\x03D\x00\x00\x88C\x00\x80\xdfC\x00\x00\x10D\x00\x00\x04D\x00\x00\xd7C\x00\x00\x8eC\x00\x00\x89C\x00\x00\xf0C\x00\x00\xc5C\x00\x00\xedC\x00\x00\x10C\x00\x00\xdeB\x00\x80\xaeC\x00\x00\xa2B\x00\x00\xa4B\x00\x00\x9cC\x00\x00\xf7C\x00\x00\x0fC\x00\x80\xc0C\x00\x00\x04B\x00@\x0eD\x00\x80\x93C\x00\x80\xafC\x00\x00\x1aC\x00\x00\x1bC\x00\x00WC\x00\x00{C\x00\x00\x97C\x00\x00\xeaB\x00\x80\xc9C\x00\x00\x80B\x00\x80\xe1C\x00\x00\'C\x00\x00\x80A\x00\x80\xc8C\x00\x00DC\x00\x00`B\x00\x80\x06D\x00\x00\x88A\x00\x00\\B\x00\x00dB\x00\x00\xdcC\x00\x80\xe3C\x00\x00%C\x00\x00sC\x00\x00\xa1C\x00\x00*C\x00\x80\xa1C\x00\x00\x06D\x00\x00\xa3C\x00\x80\xaaC\x00\x00\x8cB\x00\x00MC\x00\x00\x17C\x00\x80\x02D\x00\x00\x03D\x00\x00kC\x00\x80\xb4C\x00\x00NC\x00\x80\xcaC\x00\x00\xffC\x00\x00\xd0A\x00\x005C\x00\x00\xafC\x00\xc0\x08D\x00\x00\\C\x00\x80\x11D\x00\x00mC\x00\x80\xdaC\x00\xc0\x10D\x00\x80\xefC\x00\x00\xc6C\x00\x00\x86C\x00\x80\xe6C\x00\x00\xc2B\x00\x00\x86B\x00\x80\x8fC\x00\x80\x8bC\x00\x00\xfaC\x00\x00\xa0@\x00\x80\xc7C\x00\x00\x8dC\x00\x80\xbbC\x00\xc0\x00D\x00\x80\xd4C\x00\x00}C\x00\x80\xbdC\x00\x00\xe4C\x00\x00\xd2B\x00\x00\xe0B\x00\x80\xc3C\x00\x00dC\x00\x00\xc0B\x00\x80\rD\x00\x80\xcbC\x00\x80\x00D\x00\xc0\x0eD\x00\x00\x82C\x00\x00\xaeB\x00\x80\xa2C\x00\x80\xb3C\x00\x00|B\x00\x00\xa9C\x00@\x15D\x00\x00\x8aC\x00\x00\xbfC\x00\x00TC\x00\x00\x9dC\x00\x80\xeaC\x00\x80\xb0C\x00\x00\xe8B\x00\x00\x82B\x00\x00\x91C\x00\x00\xe0A\x00@\tD\x00\x00\xc4C\x00@\x11D\x00\x80\x98C\x00\x80\xacC\x00\x00\xd0B\x00\x80\xc1C\x00\x00)C\x00\x00\xe2B\x00\x00OC\x00\x00\xdfC\x00\xc0\x02D\x00\x00\x12D\x00\x80\xdeC\x00\x00\x02D\x00\x80\x95C\x00\x80\xf8C\x00\x80\xa8C\x00\x00\xfeB\x00\xc0\rD\x00\xc0\x03D\x00\x00\xc1C\x00\x00xB\x00\x00\xd6B\x00\x00`A\x00\x00xC\x00\xc0\x04D\x00\x00\xcdC\x00\x00`C\x00\x00\xc8A\x00\x00\xb8B\x00\x80\xe4C\x00\x80\xf1C\x00\x00LC\x00\x00_C\x00\x00iC\x00\x00\xd0C\x00\x00\x02C\x00\x00\xf0A\x00\x80\x82C\x00\x80\xa4C\x00@\x05D\x00\x00\xdaC\x00\x006C\x00\x00\xd6C\x00\x80\xedC\x00\x80\xa7C\x00\x80\xc2C\x00\x00\xb6C\x00\x00\rC\x00\x00lB\x00\x00/C\x00\x00\xaeC\x00\x00\xf2C\x00\x00\xb4C\x00\xc0\x15D\x00\x00\x7fC\x00\x00,C\x00\x00\xc9C\x00\x00\xfcB\x00\x80\xd8C\x00@\x03D\x00\x00\xecB\x00\x00zC\x00\x80\xa3C\x00\x00\x90A\x00\x00<C\x00\x00\x80C\x00@\x06D\x00\x00[C\x00\x80\x05D\x00\x80\xcfC\x00\x00\xe8C\x00\x00KC\x00\x002C\x00\x00\xb1C\x00\x80\x94C\x00\x00\x0cC\x00\x80\xd0C\x00\x80\xebC\x00\xc0\x11D\x00\xc0\x07D\x00\x00\x94B\x00\x80\xf0C\x00\x80\xecC\x00\x80\x91C\x00\x00\x9aB\x00\x00UC\x00\x00\xb0A\x00\x80\x86C\x00\x00\x00D\x00\x00\xbbC\x00\x00\x11D\x00\xc0\tD\x00\xc0\x01D\x00\x80\xd2C\x00\x00\x9cB\x00\x00\x18C\x00\x80\xfeC\x00\x80\x0bD\x00\x00\xf9C\x00\x80\xd9C\x00\x00gC\x00\x00\xa4C\x00\x00\x10A\x00\x80\xd7C\x00\x00\xa2C\x00\x00\x9eB\x00\x00\xacC\x00\x00JC\x00\x00yC\x00\x00$B\x00\x00\x19C\x00\x00 A\x00\x00\x1cC\x00\x80\xd3C\x00\x00\xceB\x00\x00tC\x00\x00\xe6C\x00\x00\x00\x00\x00\x00\x94C\x00\x00\x1dC\x00\x00\x84C\x00\x00(C\x00\x00\x8aB\x00\x80\x12D\x00\x00\x80@\x00\x80\xfbC\x00\x00\xc2C\x00\x00\xc0A\x00\x80\xd6C\x00\x00DB\x00\x80\x81C\x00\x00\x96B\x00\x00\x13C\x00\x00@C\x00\x80\x9aC\x00\x00\xb6B\x00\x00\xe2C\x00\x00\xf8B\x00\x00\xe9C\x00@\x04D\x00\x80\xe8C\x00\x00.C\x00\x00\xdaB\x00\x00PB\x00\x80\xfdC\x00\x00\x11C'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4861
(dp4862
S'isNumeric'
p4863
(dp4864
g4852
I01
sg4859
I01
ssS'trials'
p4865
g4839
sS'dataTypes'
p4866
(lp4867
g4852
ag4859
asS'dataShape'
p4868
(lp4869
I600
aI1
asbsS'method'
p4870
S'random'
p4871
sS'sequenceIndices'
p4872
cnumpy.core.multiarray
_reconstruct
p4873
(g4855
(I0
tS'b'
tRp4874
(I1
(I600
I1
tg48
I01
S';\x02\x00\x00k\x00\x00\x00\xb6\x00\x00\x00\xbd\x00\x00\x00B\x02\x00\x00\xa1\x01\x00\x00?\x01\x00\x00\x0e\x00\x00\x00V\x00\x00\x00,\x02\x00\x005\x02\x00\x00\x1f\x00\x00\x00H\x00\x00\x00\xba\x00\x00\x00\xdc\x01\x00\x00\xbf\x00\x00\x00s\x01\x00\x00x\x01\x00\x00\x05\x02\x00\x00C\x01\x00\x00\xb4\x00\x00\x00\x05\x00\x00\x00\x1c\x02\x00\x002\x00\x00\x00E\x02\x00\x00\xe1\x01\x00\x00\x8f\x01\x00\x00\x87\x00\x00\x00\xc3\x01\x00\x003\x01\x00\x00\xea\x01\x00\x00\xf3\x00\x00\x00\x86\x00\x00\x00e\x01\x00\x00\xe5\x00\x00\x00\x91\x00\x00\x00\x0e\x01\x00\x00)\x00\x00\x00\x9a\x00\x00\x00\t\x00\x00\x00\x84\x00\x00\x003\x02\x00\x00}\x00\x00\x00\xd0\x00\x00\x00\x95\x00\x00\x00\x10\x00\x00\x00\x12\x01\x00\x00\x0b\x00\x00\x00\x11\x01\x00\x00G\x02\x00\x00B\x00\x00\x00#\x01\x00\x00U\x02\x00\x00\x99\x00\x00\x00\xe8\x00\x00\x00y\x01\x00\x00v\x01\x00\x00z\x01\x00\x00\xcc\x00\x00\x00\xf6\x01\x00\x00\xd1\x00\x00\x00\x13\x01\x00\x00\xda\x01\x00\x00\xb7\x01\x00\x00p\x01\x00\x00\xc1\x01\x00\x00 \x00\x00\x00\x9d\x01\x00\x00"\x01\x00\x00@\x02\x00\x00\x85\x01\x00\x00\x02\x00\x00\x00\r\x01\x00\x00$\x01\x00\x00\x16\x02\x00\x00I\x02\x00\x00U\x00\x00\x00\x1a\x02\x00\x00$\x02\x00\x00/\x02\x00\x00\x94\x00\x00\x00_\x01\x00\x00`\x01\x00\x00\xec\x00\x00\x00\x16\x01\x00\x001\x01\x00\x00u\x00\x00\x00\xb4\x01\x00\x00S\x00\x00\x00\x16\x00\x00\x00%\x01\x00\x00M\x02\x00\x00\xe2\x01\x00\x00G\x01\x00\x00\xee\x00\x00\x00\xa4\x00\x00\x00\xae\x01\x00\x00\x9c\x01\x00\x00\x04\x00\x00\x00\x89\x00\x00\x00\xa3\x00\x00\x00\'\x00\x00\x00\xfd\x00\x00\x008\x02\x00\x00\xc9\x01\x00\x00\xaa\x01\x00\x00!\x01\x00\x00\xdb\x01\x00\x00\xae\x00\x00\x00T\x02\x00\x00K\x01\x00\x00]\x01\x00\x00\xab\x01\x00\x00\xcc\x01\x00\x00\xd8\x00\x00\x00K\x00\x00\x00\xc0\x01\x00\x00n\x01\x00\x00\x02\x02\x00\x007\x00\x00\x00\xd5\x00\x00\x00\x05\x01\x00\x00\x03\x01\x00\x00=\x00\x00\x00O\x02\x00\x00Q\x00\x00\x00\xff\x01\x00\x00\xd6\x01\x00\x00\xad\x00\x00\x00\x15\x01\x00\x00\xe9\x01\x00\x00$\x00\x00\x00\xf1\x00\x00\x00N\x01\x00\x00\x92\x00\x00\x00\x06\x01\x00\x00\xb3\x00\x00\x00\x04\x01\x00\x009\x01\x00\x00{\x00\x00\x00\x11\x02\x00\x00\xf5\x01\x00\x00z\x00\x00\x00c\x01\x00\x00\\\x01\x00\x00W\x02\x00\x00/\x00\x00\x00J\x02\x00\x00G\x00\x00\x00h\x00\x00\x008\x01\x00\x00\x87\x01\x00\x00%\x02\x00\x004\x02\x00\x00i\x01\x00\x00j\x01\x00\x006\x02\x00\x00=\x02\x00\x00\xcb\x00\x00\x00\xc0\x00\x00\x00\xf9\x00\x00\x00|\x00\x00\x00q\x00\x00\x00N\x00\x00\x00\xb8\x00\x00\x00}\x01\x00\x00_\x00\x00\x00r\x01\x00\x00?\x02\x00\x00\xcb\x01\x00\x00\x80\x01\x00\x00j\x00\x00\x00\xfd\x01\x00\x00\x07\x00\x00\x00S\x02\x00\x00\xf7\x01\x00\x00\xeb\x00\x00\x00\x1c\x01\x00\x00\x0e\x02\x00\x00+\x00\x00\x00\x1f\x01\x00\x00\x90\x01\x00\x00\xef\x01\x00\x00\x10\x01\x00\x00,\x00\x00\x00\xda\x00\x00\x00\xd6\x00\x00\x00M\x01\x00\x00\x06\x02\x00\x00\x82\x00\x00\x00\xf5\x00\x00\x00n\x00\x00\x00K\x02\x00\x00\x1a\x00\x00\x00\n\x00\x00\x00\xc6\x00\x00\x00u\x01\x00\x009\x00\x00\x00P\x00\x00\x00g\x00\x00\x00O\x01\x00\x00Z\x00\x00\x001\x02\x00\x00\r\x02\x00\x00\xe5\x01\x00\x00\x86\x01\x00\x00\x8c\x01\x00\x00\xcd\x01\x00\x00\xe3\x00\x00\x00\x08\x01\x00\x00.\x01\x00\x00\xaf\x00\x00\x00\xbc\x01\x00\x00\x1b\x02\x00\x00w\x00\x00\x00k\x01\x00\x00\x17\x00\x00\x00\xbe\x00\x00\x00\xca\x00\x00\x00\t\x02\x00\x00\x93\x01\x00\x00\xed\x00\x00\x00\x93\x00\x00\x00\xe6\x01\x00\x00\xe0\x01\x00\x00&\x01\x00\x00\xdb\x00\x00\x00\x07\x01\x00\x00\xad\x01\x00\x00\x83\x00\x00\x00\xcf\x00\x00\x00*\x02\x00\x00\xe2\x00\x00\x00\xe7\x01\x00\x00D\x01\x00\x00\x8a\x01\x00\x00\xa5\x00\x00\x00\x95\x01\x00\x00M\x00\x00\x00\xdf\x00\x00\x00\xb0\x00\x00\x00+\x01\x00\x00\xc7\x00\x00\x00~\x01\x00\x009\x02\x00\x00\xa9\x00\x00\x00\xf0\x00\x00\x00\xa8\x00\x00\x00\xdd\x01\x00\x002\x02\x00\x00\x03\x02\x00\x00l\x01\x00\x00\xac\x00\x00\x00\xa7\x01\x00\x00p\x00\x00\x00\xfc\x01\x00\x00\x07\x02\x00\x00*\x01\x00\x00L\x00\x00\x00H\x02\x00\x00\xb3\x01\x00\x00\xeb\x01\x00\x00\x14\x00\x00\x00X\x00\x00\x00>\x02\x00\x00\x0f\x01\x00\x00H\x01\x00\x00\xfc\x00\x00\x00\x9a\x01\x00\x00\x1d\x02\x00\x00)\x01\x00\x00P\x01\x00\x00R\x01\x00\x00\x9b\x00\x00\x00X\x01\x00\x00\x02\x01\x00\x00\xba\x01\x00\x00\xea\x00\x00\x00\xd9\x00\x00\x00\x9f\x01\x00\x00\x85\x00\x00\x008\x00\x00\x00\xa3\x01\x00\x00\xb2\x00\x00\x00W\x01\x00\x00R\x00\x00\x00\xab\x00\x00\x00\x9e\x01\x00\x00\x9c\x00\x00\x00Y\x00\x00\x00\xc2\x01\x00\x00\x19\x02\x00\x00\xdd\x00\x00\x00E\x01\x00\x00\x80\x00\x00\x00g\x01\x00\x00<\x02\x00\x00\x10\x02\x00\x00\x0b\x01\x00\x00\xd3\x01\x00\x00\xd3\x00\x00\x00\x00\x01\x00\x00m\x01\x00\x00<\x00\x00\x006\x01\x00\x00\xc7\x01\x00\x00\xbc\x00\x00\x00\x96\x00\x00\x00\x90\x00\x00\x00L\x02\x00\x005\x00\x00\x00\xf2\x00\x00\x00a\x01\x00\x00\x88\x00\x00\x00\xbd\x01\x00\x007\x01\x00\x00\xa6\x00\x00\x00(\x00\x00\x005\x01\x00\x00\x06\x00\x00\x00\xe4\x00\x00\x000\x00\x00\x00\x7f\x01\x00\x00\x81\x01\x00\x00.\x02\x00\x00\xb5\x01\x00\x00\x83\x01\x00\x00\x04\x02\x00\x00+\x02\x00\x00\xec\x01\x00\x00\x01\x01\x00\x00%\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\x97\x00\x00\x00\xf2\x01\x00\x00\xa7\x00\x00\x00\xd5\x01\x00\x00\xb8\x01\x00\x00\xdc\x00\x00\x00#\x00\x00\x00\x84\x01\x00\x00\x12\x00\x00\x00\x8c\x00\x00\x000\x02\x00\x00\xc8\x01\x00\x00W\x00\x00\x00-\x01\x00\x00\xf8\x01\x00\x00^\x01\x00\x00\x91\x01\x00\x00h\x01\x00\x00;\x01\x00\x00\xbf\x01\x00\x00\x0f\x02\x00\x00\x9e\x00\x00\x00I\x01\x00\x00\x11\x00\x00\x00\xfe\x00\x00\x00\xb6\x01\x00\x00\xfa\x01\x00\x00\x8b\x01\x00\x00 \x01\x00\x00\x1b\x00\x00\x00\xf4\x01\x00\x00/\x01\x00\x00^\x00\x00\x00\x8e\x00\x00\x00\xe0\x00\x00\x00&\x00\x00\x00m\x00\x00\x00\xc8\x00\x00\x00\xb5\x00\x00\x00F\x00\x00\x00\x1f\x02\x00\x00\xa4\x01\x00\x00T\x00\x00\x00A\x00\x00\x00\xb7\x00\x00\x00\xa8\x01\x00\x00.\x00\x00\x00\x1d\x00\x00\x00\xbb\x01\x00\x00s\x00\x00\x00;\x00\x00\x00d\x01\x00\x00\xd9\x01\x00\x00\xca\x01\x00\x00D\x02\x00\x00\xf3\x01\x00\x00[\x00\x00\x00\xac\x01\x00\x00\xc5\x01\x00\x00L\x01\x00\x00Z\x01\x00\x00]\x00\x00\x00\x99\x01\x00\x00\x1e\x01\x00\x00\xe7\x00\x00\x00\xa2\x01\x00\x00O\x00\x00\x00t\x01\x00\x00\xfe\x01\x00\x00o\x01\x00\x00\x1e\x00\x00\x00\x8d\x01\x00\x00\xc2\x00\x00\x00\xb0\x01\x00\x00\x13\x00\x00\x00*\x00\x00\x00\xdf\x01\x00\x00\xf6\x00\x00\x004\x01\x00\x00\x9f\x00\x00\x00J\x00\x00\x00\x0b\x02\x00\x00\xe8\x01\x00\x00\x12\x02\x00\x00\x0f\x00\x00\x00d\x00\x00\x00\xf4\x00\x00\x00#\x02\x00\x00\x98\x00\x00\x007\x02\x00\x00>\x01\x00\x00\xa6\x01\x00\x00\xbb\x00\x00\x00y\x00\x00\x00\xf0\x01\x00\x00F\x02\x00\x00V\x01\x00\x00-\x02\x00\x00r\x00\x00\x00\x00\x02\x00\x00:\x01\x00\x00)\x02\x00\x00\xee\x01\x00\x00\x96\x01\x00\x00\x1b\x01\x00\x00\xff\x00\x00\x00{\x01\x00\x000\x01\x00\x00\x01\x00\x00\x00\'\x01\x00\x00\x1a\x01\x00\x00\xd1\x01\x00\x00\xce\x01\x00\x00S\x01\x00\x00"\x00\x00\x001\x00\x00\x00f\x00\x00\x00q\x01\x00\x00N\x02\x00\x00E\x00\x00\x00I\x00\x00\x00|\x01\x00\x00\xa9\x01\x00\x00\xe3\x01\x00\x00\xb9\x00\x00\x00!\x00\x00\x00:\x02\x00\x00\x9b\x01\x00\x00\xa1\x00\x00\x00l\x00\x00\x00\x0c\x02\x00\x00R\x02\x00\x00P\x02\x00\x00\r\x00\x00\x00\xa2\x00\x00\x00\xbe\x01\x00\x00\xe1\x00\x00\x00\x13\x02\x00\x00\x8f\x00\x00\x00\x18\x02\x00\x00[\x01\x00\x00\xf1\x01\x00\x00o\x00\x00\x00\x18\x00\x00\x00?\x00\x00\x00\x98\x01\x00\x00Y\x01\x00\x00\x17\x02\x00\x00b\x00\x00\x00\xe4\x01\x00\x00\xf9\x01\x00\x003\x00\x00\x00J\x01\x00\x00\xa0\x00\x00\x00\\\x00\x00\x00\x15\x00\x00\x004\x00\x00\x00\xc5\x00\x00\x00\x0c\x01\x00\x00B\x01\x00\x00b\x01\x00\x00\xe9\x00\x00\x00:\x00\x00\x00\xd4\x01\x00\x00(\x02\x00\x00\xce\x00\x00\x00\xa0\x01\x00\x006\x00\x00\x00\xde\x00\x00\x00C\x02\x00\x00\xd4\x00\x00\x00~\x00\x00\x00\xfa\x00\x00\x00V\x02\x00\x00\x0c\x00\x00\x00&\x02\x00\x00\x8e\x01\x00\x00\xe6\x00\x00\x00\x1e\x02\x00\x00\x8d\x00\x00\x00\xb1\x01\x00\x00\xa5\x01\x00\x00\x19\x00\x00\x00\xef\x00\x00\x00,\x01\x00\x00"\x02\x00\x00\xd2\x01\x00\x00\x8a\x00\x00\x00\x88\x01\x00\x00\xcf\x01\x00\x00\x89\x01\x00\x00\x01\x02\x00\x00Q\x01\x00\x00\xd8\x01\x00\x00U\x01\x00\x00Q\x02\x00\x00t\x00\x00\x00\xde\x01\x00\x00\x17\x01\x00\x00\xed\x01\x00\x00\n\x02\x00\x00F\x01\x00\x00\x82\x01\x00\x00\x08\x02\x00\x00w\x01\x00\x00\x14\x01\x00\x00e\x00\x00\x00\x1d\x01\x00\x00\xd2\x00\x00\x00\x15\x02\x00\x002\x01\x00\x00\xc1\x00\x00\x00>\x00\x00\x00\x92\x01\x00\x00\x8b\x00\x00\x00\xc4\x01\x00\x00<\x01\x00\x00!\x02\x00\x00\x03\x00\x00\x00\n\x01\x00\x00-\x00\x00\x00\x7f\x00\x00\x00@\x01\x00\x00\xaa\x00\x00\x00\'\x02\x00\x00\xc3\x00\x00\x00\x81\x00\x00\x00=\x01\x00\x00@\x00\x00\x00(\x01\x00\x00\xc4\x00\x00\x00\xc9\x00\x00\x00\xaf\x01\x00\x00\xd7\x01\x00\x00A\x01\x00\x00f\x01\x00\x00\x9d\x00\x00\x00\xb2\x01\x00\x00\x19\x01\x00\x00\x18\x01\x00\x00\x1c\x00\x00\x00a\x00\x00\x00T\x01\x00\x00x\x00\x00\x00c\x00\x00\x00\x97\x01\x00\x00 \x02\x00\x00\xc6\x01\x00\x00\x94\x01\x00\x00\x14\x02\x00\x00\xd0\x01\x00\x00\x00\x00\x00\x00A\x02\x00\x00\xcd\x00\x00\x00v\x00\x00\x00\x08\x00\x00\x00\t\x01\x00\x00\xb1\x00\x00\x00i\x00\x00\x00D\x00\x00\x00\xd7\x00\x00\x00\xfb\x00\x00\x00C\x00\x00\x00\xb9\x01\x00\x00`\x00\x00\x00\xfb\x01\x00\x00'
tbsS'finished'
p4875
I01
sS'nReps'
p4876
I1
sS'nRemaining'
p4877
I-1
sS'trialList'
p4878
(lp4879
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asS'seed'
p4880
NsS'thisIndex'
p4881
g4834
sS'thisN'
p4882
I600
sS'thisTrialN'
p4883
I0
sS'nTotal'
p4884
I600
sS'_warnUseOfNext'
p4885
I01
sbasS'savePickle'
p4886
I01
sb.