ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject217
p8
sS'runtimeInfo'
p9
NsS'name'
p10
Vsubject 217
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Button switch shown?'
p18
aS'Actually switched?'
p19
aS'Fast?'
p20
asS'autoLog'
p21
I01
sS'extraInfo'
p22
(dp23
S'gender'
p24
VF
sS'age'
p25
V23
p26
ssS'loopsUnfinished'
p27
(lp28
sS'saveWideText'
p29
I01
sS'thisEntry'
p30
(dp31
sS'version'
p32
S''
sS'_paramNamesSoFar'
p33
(lp34
sS'entries'
p35
(lp36
(dp37
g16
(lp38
S'k'
asS'.thisTrial'
p39
I437
sS'.thisRepN'
p40
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p41
I0
sS'.thisN'
p42
I0
sS'.thisIndex'
p43
cnumpy.core.multiarray
scalar
p44
(cnumpy
dtype
p45
(S'i4'
I0
I1
tRp46
(I3
S'<'
NNNI-1
I-1
I0
tbS'\xb5\x01\x00\x00'
tRp47
sg15
(lp48
S'd'
asg17
S'N'
sg14
I1
sa(dp49
g16
(lp50
S'k'
asg39
I495
sS'.thisRepN'
p51
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p52
I1
sS'.thisN'
p53
I1
sS'.thisIndex'
p54
g44
(g46
S'\xef\x01\x00\x00'
tRp55
sg15
(lp56
S'k'
asg17
S'Y'
sg14
I1
sa(dp57
g16
(lp58
S'k'
asg39
I552
sS'.thisRepN'
p59
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p60
I2
sS'.thisN'
p61
I2
sS'.thisIndex'
p62
g44
(g46
S'(\x02\x00\x00'
tRp63
sg15
(lp64
S'd'
asg17
S'N'
sg14
I1
sa(dp65
g16
(lp66
S'd'
asg39
I55
sS'.thisRepN'
p67
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p68
I3
sS'.thisN'
p69
I3
sS'.thisIndex'
p70
g44
(g46
S'7\x00\x00\x00'
tRp71
sg15
(lp72
S'd'
asg17
S'Y'
sg14
I1
sa(dp73
g16
(lp74
S'd'
asg39
I23
sS'.thisRepN'
p75
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p76
I4
sS'.thisN'
p77
I4
sS'.thisIndex'
p78
g44
(g46
S'\x17\x00\x00\x00'
tRp79
sg15
(lp80
S'k'
asg17
S'N'
sg14
I1
sa(dp81
g39
I449
sS'.thisN'
p82
I5
sg24
VF
sg25
g26
sS'.thisTrialN'
p83
I5
sS'.thisRepN'
p84
I0
sS'.thisIndex'
p85
g44
(g46
S'\xc1\x01\x00\x00'
tRp86
sg15
Nsg17
S'Timed out'
p87
sg14
I1
sa(dp88
g16
(lp89
S'k'
asg39
I528
sS'.thisRepN'
p90
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p91
I6
sS'.thisN'
p92
I6
sS'.thisIndex'
p93
g44
(g46
S'\x10\x02\x00\x00'
tRp94
sg15
(lp95
S'd'
asg17
S'N'
sg14
I1
sa(dp96
g16
(lp97
S'd'
asg39
I275
sS'.thisRepN'
p98
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p99
I7
sS'.thisN'
p100
I7
sS'.thisIndex'
p101
g44
(g46
S'\x13\x01\x00\x00'
tRp102
sg15
(lp103
S'd'
asg17
S'Y'
sg14
I1
sa(dp104
g16
(lp105
S'k'
asg39
I315
sS'.thisRepN'
p106
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p107
I8
sS'.thisN'
p108
I8
sS'.thisIndex'
p109
g44
(g46
S';\x01\x00\x00'
tRp110
sg15
(lp111
S'k'
asg17
S'Y'
sg14
I1
sa(dp112
g16
(lp113
S'k'
asg39
I440
sS'.thisRepN'
p114
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p115
I9
sS'.thisN'
p116
I9
sS'.thisIndex'
p117
g44
(g46
S'\xb8\x01\x00\x00'
tRp118
sg15
(lp119
S'k'
asg17
S'Y'
sg14
I1
sa(dp120
g16
(lp121
S'k'
asg39
I342
sS'.thisRepN'
p122
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p123
I10
sS'.thisN'
p124
I10
sS'.thisIndex'
p125
g44
(g46
S'V\x01\x00\x00'
tRp126
sg15
(lp127
S'd'
asg17
S'N'
sg14
I1
sa(dp128
g16
(lp129
S'k'
asg39
I380
sS'.thisRepN'
p130
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p131
I11
sS'.thisN'
p132
I11
sS'.thisIndex'
p133
g44
(g46
S'|\x01\x00\x00'
tRp134
sg15
(lp135
S'k'
asg17
S'Y'
sg14
I1
sa(dp136
g16
(lp137
S'k'
asg39
I547
sS'.thisRepN'
p138
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p139
I12
sS'.thisN'
p140
I12
sS'.thisIndex'
p141
g44
(g46
S'#\x02\x00\x00'
tRp142
sg15
(lp143
S'k'
asg17
S'Y'
sg14
I1
sa(dp144
g16
(lp145
S'k'
asg39
I381
sS'.thisRepN'
p146
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p147
I13
sS'.thisN'
p148
I13
sS'.thisIndex'
p149
g44
(g46
S'}\x01\x00\x00'
tRp150
sg15
(lp151
S'k'
asg17
S'Y'
sg14
I1
sa(dp152
g16
(lp153
S'k'
asg39
I486
sS'.thisRepN'
p154
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p155
I14
sS'.thisN'
p156
I14
sS'.thisIndex'
p157
g44
(g46
S'\xe6\x01\x00\x00'
tRp158
sg15
(lp159
S'k'
asg17
S'Y'
sg14
I1
sa(dp160
g16
(lp161
S'k'
asg39
I549
sS'.thisRepN'
p162
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p163
I15
sS'.thisN'
p164
I15
sS'.thisIndex'
p165
g44
(g46
S'%\x02\x00\x00'
tRp166
sg15
(lp167
S'k'
asg17
S'Y'
sg14
I1
sa(dp168
g16
(lp169
S'k'
asg39
I442
sS'.thisRepN'
p170
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p171
I16
sS'.thisN'
p172
I16
sS'.thisIndex'
p173
g44
(g46
S'\xba\x01\x00\x00'
tRp174
sg15
(lp175
S'k'
asg17
S'Y'
sg14
I1
sa(dp176
g16
(lp177
S'd'
asg39
I108
sS'.thisRepN'
p178
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p179
I17
sS'.thisN'
p180
I17
sS'.thisIndex'
p181
g44
(g46
S'l\x00\x00\x00'
tRp182
sg15
(lp183
S'd'
asg17
S'Y'
sg14
I1
sa(dp184
g16
(lp185
S'd'
asg39
I73
sS'.thisRepN'
p186
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p187
I18
sS'.thisN'
p188
I18
sS'.thisIndex'
p189
g44
(g46
S'I\x00\x00\x00'
tRp190
sg15
(lp191
S'k'
asg17
S'N'
sg14
I1
sa(dp192
g16
(lp193
S'k'
asg39
I575
sS'.thisRepN'
p194
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p195
I19
sS'.thisN'
p196
I19
sS'.thisIndex'
p197
g44
(g46
S'?\x02\x00\x00'
tRp198
sg15
(lp199
S'd'
asg17
S'N'
sg14
I1
sa(dp200
g16
(lp201
S'd'
asg39
I135
sS'.thisRepN'
p202
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p203
I20
sS'.thisN'
p204
I20
sS'.thisIndex'
p205
g44
(g46
S'\x87\x00\x00\x00'
tRp206
sg15
(lp207
S'd'
asg17
S'Y'
sg14
I1
sa(dp208
g16
(lp209
S'k'
asg39
I485
sS'.thisRepN'
p210
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p211
I21
sS'.thisN'
p212
I21
sS'.thisIndex'
p213
g44
(g46
S'\xe5\x01\x00\x00'
tRp214
sg15
(lp215
S'k'
asg17
S'Y'
sg14
I1
sa(dp216
g16
(lp217
S'k'
asg39
I386
sS'.thisRepN'
p218
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p219
I22
sS'.thisN'
p220
I22
sS'.thisIndex'
p221
g44
(g46
S'\x82\x01\x00\x00'
tRp222
sg15
(lp223
S'k'
asg17
S'Y'
sg14
I1
sa(dp224
g16
(lp225
S'k'
asg39
I546
sS'.thisRepN'
p226
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p227
I23
sS'.thisN'
p228
I23
sS'.thisIndex'
p229
g44
(g46
S'"\x02\x00\x00'
tRp230
sg15
(lp231
S'k'
asg17
S'Y'
sg14
I1
sa(dp232
g16
(lp233
S'k'
asg39
I385
sS'.thisRepN'
p234
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p235
I24
sS'.thisN'
p236
I24
sS'.thisIndex'
p237
g44
(g46
S'\x81\x01\x00\x00'
tRp238
sg15
(lp239
S'k'
asg17
S'Y'
sg14
I1
sa(dp240
g16
(lp241
S'd'
asg39
I69
sS'.thisRepN'
p242
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p243
I25
sS'.thisN'
p244
I25
sS'.thisIndex'
p245
g44
(g46
S'E\x00\x00\x00'
tRp246
sg15
(lp247
S'd'
asg17
S'Y'
sg14
I1
sa(dp248
g16
(lp249
S'k'
asg39
I582
sS'.thisRepN'
p250
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p251
I26
sS'.thisN'
p252
I26
sS'.thisIndex'
p253
g44
(g46
S'F\x02\x00\x00'
tRp254
sg15
(lp255
S'k'
asg17
S'Y'
sg14
I1
sa(dp256
g16
(lp257
S'd'
asg39
I182
sS'.thisRepN'
p258
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p259
I27
sS'.thisN'
p260
I27
sS'.thisIndex'
p261
g44
(g46
S'\xb6\x00\x00\x00'
tRp262
sg15
(lp263
S'd'
asg17
S'Y'
sg14
I1
sa(dp264
g16
(lp265
S'd'
asg39
I115
sS'.thisRepN'
p266
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p267
I28
sS'.thisN'
p268
I28
sS'.thisIndex'
p269
g44
(g46
S's\x00\x00\x00'
tRp270
sg15
(lp271
S'd'
asg17
S'Y'
sg14
I1
sa(dp272
g16
(lp273
S'd'
asg39
I63
sS'.thisRepN'
p274
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p275
I29
sS'.thisN'
p276
I29
sS'.thisIndex'
p277
g44
(g46
S'?\x00\x00\x00'
tRp278
sg15
(lp279
S'k'
asg17
S'N'
sg14
I1
sa(dp280
g16
(lp281
S'k'
asg39
I586
sS'.thisRepN'
p282
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p283
I30
sS'.thisN'
p284
I30
sS'.thisIndex'
p285
g44
(g46
S'J\x02\x00\x00'
tRp286
sg15
(lp287
S'k'
asg17
S'Y'
sg14
I1
sa(dp288
g16
(lp289
S'k'
asg39
I361
sS'.thisRepN'
p290
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p291
I31
sS'.thisN'
p292
I31
sS'.thisIndex'
p293
g44
(g46
S'i\x01\x00\x00'
tRp294
sg15
(lp295
S'k'
asg17
S'Y'
sg14
I1
sa(dp296
g16
(lp297
S'k'
asg39
I471
sS'.thisRepN'
p298
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p299
I32
sS'.thisN'
p300
I32
sS'.thisIndex'
p301
g44
(g46
S'\xd7\x01\x00\x00'
tRp302
sg15
(lp303
S'd'
asg17
S'N'
sg14
I1
sa(dp304
g16
(lp305
S'd'
asg39
I178
sS'.thisRepN'
p306
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p307
I33
sS'.thisN'
p308
I33
sS'.thisIndex'
p309
g44
(g46
S'\xb2\x00\x00\x00'
tRp310
sg15
(lp311
S'd'
asg17
S'Y'
sg14
I1
sa(dp312
g16
(lp313
S'k'
asg39
I533
sS'.thisRepN'
p314
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p315
I34
sS'.thisN'
p316
I34
sS'.thisIndex'
p317
g44
(g46
S'\x15\x02\x00\x00'
tRp318
sg15
(lp319
S'k'
asg17
S'Y'
sg14
I1
sa(dp320
g16
(lp321
S'k'
asg39
I421
sS'.thisRepN'
p322
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p323
I35
sS'.thisN'
p324
I35
sS'.thisIndex'
p325
g44
(g46
S'\xa5\x01\x00\x00'
tRp326
sg15
(lp327
S'k'
asg17
S'Y'
sg14
I1
sa(dp328
g16
(lp329
S'k'
asg39
I379
sS'.thisRepN'
p330
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p331
I36
sS'.thisN'
p332
I36
sS'.thisIndex'
p333
g44
(g46
S'{\x01\x00\x00'
tRp334
sg15
(lp335
S'd'
asg17
S'N'
sg14
I1
sa(dp336
g16
(lp337
S'k'
asg39
I541
sS'.thisRepN'
p338
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p339
I37
sS'.thisN'
p340
I37
sS'.thisIndex'
p341
g44
(g46
S'\x1d\x02\x00\x00'
tRp342
sg15
(lp343
S'k'
asg17
S'Y'
sg14
I1
sa(dp344
g16
(lp345
S'd'
asg39
I198
sS'.thisRepN'
p346
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p347
I38
sS'.thisN'
p348
I38
sS'.thisIndex'
p349
g44
(g46
S'\xc6\x00\x00\x00'
tRp350
sg15
(lp351
S'd'
asg17
S'Y'
sg14
I1
sa(dp352
g16
(lp353
S'd'
asg39
I252
sS'.thisRepN'
p354
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p355
I39
sS'.thisN'
p356
I39
sS'.thisIndex'
p357
g44
(g46
S'\xfc\x00\x00\x00'
tRp358
sg15
(lp359
S'd'
asg17
S'Y'
sg14
I1
sa(dp360
g16
(lp361
S'k'
asg39
I405
sS'.thisRepN'
p362
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p363
I40
sS'.thisN'
p364
I40
sS'.thisIndex'
p365
g44
(g46
S'\x95\x01\x00\x00'
tRp366
sg15
(lp367
S'k'
asg17
S'Y'
sg14
I1
sa(dp368
g16
(lp369
S'k'
asg39
I456
sS'.thisRepN'
p370
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p371
I41
sS'.thisN'
p372
I41
sS'.thisIndex'
p373
g44
(g46
S'\xc8\x01\x00\x00'
tRp374
sg15
(lp375
S'k'
asg17
S'Y'
sg14
I1
sa(dp376
g16
(lp377
S'd'
asg39
I283
sS'.thisRepN'
p378
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p379
I42
sS'.thisN'
p380
I42
sS'.thisIndex'
p381
g44
(g46
S'\x1b\x01\x00\x00'
tRp382
sg15
(lp383
S'k'
asg17
S'N'
sg14
I1
sa(dp384
g39
I7
sS'.thisN'
p385
I43
sg24
VF
sg25
g26
sS'.thisTrialN'
p386
I43
sS'.thisRepN'
p387
I0
sS'.thisIndex'
p388
g44
(g46
S'\x07\x00\x00\x00'
tRp389
sg15
Nsg17
g87
sg14
I1
sa(dp390
g16
(lp391
S'k'
asg39
I457
sS'.thisRepN'
p392
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p393
I44
sS'.thisN'
p394
I44
sS'.thisIndex'
p395
g44
(g46
S'\xc9\x01\x00\x00'
tRp396
sg15
(lp397
S'k'
asg17
S'Y'
sg14
I1
sa(dp398
g16
(lp399
S'k'
asg39
I410
sS'.thisRepN'
p400
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p401
I45
sS'.thisN'
p402
I45
sS'.thisIndex'
p403
g44
(g46
S'\x9a\x01\x00\x00'
tRp404
sg15
(lp405
S'k'
asg17
S'Y'
sg14
I1
sa(dp406
g16
(lp407
S'k'
asg39
I450
sS'.thisRepN'
p408
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p409
I46
sS'.thisN'
p410
I46
sS'.thisIndex'
p411
g44
(g46
S'\xc2\x01\x00\x00'
tRp412
sg15
(lp413
S'd'
asg17
S'N'
sg14
I1
sa(dp414
g16
(lp415
S'd'
asg39
I280
sS'.thisRepN'
p416
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p417
I47
sS'.thisN'
p418
I47
sS'.thisIndex'
p419
g44
(g46
S'\x18\x01\x00\x00'
tRp420
sg15
(lp421
S'd'
asg17
S'Y'
sg14
I1
sa(dp422
g16
(lp423
S'k'
asg39
I365
sS'.thisRepN'
p424
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p425
I48
sS'.thisN'
p426
I48
sS'.thisIndex'
p427
g44
(g46
S'm\x01\x00\x00'
tRp428
sg15
(lp429
S'k'
asg17
S'Y'
sg14
I1
sa(dp430
g16
(lp431
S'd'
asg39
I262
sS'.thisRepN'
p432
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p433
I49
sS'.thisN'
p434
I49
sS'.thisIndex'
p435
g44
(g46
S'\x06\x01\x00\x00'
tRp436
sg15
(lp437
S'd'
asg17
S'Y'
sg14
I1
sa(dp438
g16
(lp439
S'k'
asg39
I530
sS'.thisRepN'
p440
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p441
I50
sS'.thisN'
p442
I50
sS'.thisIndex'
p443
g44
(g46
S'\x12\x02\x00\x00'
tRp444
sg15
(lp445
S'k'
asg17
S'Y'
sg14
I2
sa(dp446
g16
(lp447
S'd'
asg39
I231
sS'.thisRepN'
p448
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p449
I51
sS'.thisN'
p450
I51
sS'.thisIndex'
p451
g44
(g46
S'\xe7\x00\x00\x00'
tRp452
sg15
(lp453
S'd'
asg17
S'Y'
sg14
I2
sa(dp454
g16
(lp455
S'd'
asg39
I210
sS'.thisRepN'
p456
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p457
I52
sS'.thisN'
p458
I52
sS'.thisIndex'
p459
g44
(g46
S'\xd2\x00\x00\x00'
tRp460
sg15
(lp461
S'd'
asg17
S'Y'
sg14
I2
sa(dp462
g16
(lp463
S'k'
asg39
I384
sS'.thisRepN'
p464
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p465
I53
sS'.thisN'
p466
I53
sS'.thisIndex'
p467
g44
(g46
S'\x80\x01\x00\x00'
tRp468
sg15
(lp469
S'k'
asg17
S'Y'
sg14
I2
sa(dp470
g16
(lp471
S'k'
asg39
I522
sS'.thisRepN'
p472
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p473
I54
sS'.thisN'
p474
I54
sS'.thisIndex'
p475
g44
(g46
S'\n\x02\x00\x00'
tRp476
sg15
(lp477
S'd'
asg17
S'N'
sg14
I2
sa(dp478
g16
(lp479
S'd'
asg39
I230
sS'.thisRepN'
p480
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p481
I55
sS'.thisN'
p482
I55
sS'.thisIndex'
p483
g44
(g46
S'\xe6\x00\x00\x00'
tRp484
sg15
(lp485
S'd'
asg17
S'Y'
sg14
I2
sa(dp486
g16
(lp487
S'k'
asg39
I376
sS'.thisRepN'
p488
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p489
I56
sS'.thisN'
p490
I56
sS'.thisIndex'
p491
g44
(g46
S'x\x01\x00\x00'
tRp492
sg15
(lp493
S'k'
asg17
S'Y'
sg14
I2
sa(dp494
g16
(lp495
S'k'
asg39
I504
sS'.thisRepN'
p496
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p497
I57
sS'.thisN'
p498
I57
sS'.thisIndex'
p499
g44
(g46
S'\xf8\x01\x00\x00'
tRp500
sg15
(lp501
S'k'
asg17
S'Y'
sg14
I2
sa(dp502
g16
(lp503
S'k'
asg39
I431
sS'.thisRepN'
p504
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p505
I58
sS'.thisN'
p506
I58
sS'.thisIndex'
p507
g44
(g46
S'\xaf\x01\x00\x00'
tRp508
sg15
(lp509
S'k'
asg17
S'Y'
sg14
I2
sa(dp510
g16
(lp511
S'd'
asg39
I86
sS'.thisRepN'
p512
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p513
I59
sS'.thisN'
p514
I59
sS'.thisIndex'
p515
g44
(g46
S'V\x00\x00\x00'
tRp516
sg15
(lp517
S'k'
asg17
S'N'
sg14
I2
sa(dp518
g16
(lp519
S'd'
asg39
I179
sS'.thisRepN'
p520
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p521
I60
sS'.thisN'
p522
I60
sS'.thisIndex'
p523
g44
(g46
S'\xb3\x00\x00\x00'
tRp524
sg15
(lp525
S'k'
asg17
S'N'
sg14
I2
sa(dp526
g16
(lp527
S'd'
asg39
I277
sS'.thisRepN'
p528
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p529
I61
sS'.thisN'
p530
I61
sS'.thisIndex'
p531
g44
(g46
S'\x15\x01\x00\x00'
tRp532
sg15
(lp533
S'd'
asg17
S'Y'
sg14
I2
sa(dp534
g16
(lp535
S'd'
asg39
I81
sS'.thisRepN'
p536
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p537
I62
sS'.thisN'
p538
I62
sS'.thisIndex'
p539
g44
(g46
S'Q\x00\x00\x00'
tRp540
sg15
(lp541
S'k'
asg17
S'N'
sg14
I2
sa(dp542
g16
(lp543
S'k'
asg39
I345
sS'.thisRepN'
p544
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p545
I63
sS'.thisN'
p546
I63
sS'.thisIndex'
p547
g44
(g46
S'Y\x01\x00\x00'
tRp548
sg15
(lp549
S'k'
asg17
S'Y'
sg14
I2
sa(dp550
g16
(lp551
S'd'
asg39
I290
sS'.thisRepN'
p552
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p553
I64
sS'.thisN'
p554
I64
sS'.thisIndex'
p555
g44
(g46
S'"\x01\x00\x00'
tRp556
sg15
(lp557
S'd'
asg17
S'Y'
sg14
I2
sa(dp558
g16
(lp559
S'k'
asg39
I483
sS'.thisRepN'
p560
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p561
I65
sS'.thisN'
p562
I65
sS'.thisIndex'
p563
g44
(g46
S'\xe3\x01\x00\x00'
tRp564
sg15
(lp565
S'd'
asg17
S'N'
sg14
I2
sa(dp566
g16
(lp567
S'd'
asg39
I258
sS'.thisRepN'
p568
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p569
I66
sS'.thisN'
p570
I66
sS'.thisIndex'
p571
g44
(g46
S'\x02\x01\x00\x00'
tRp572
sg15
(lp573
S'd'
asg17
S'Y'
sg14
I2
sa(dp574
g16
(lp575
S'k'
asg39
I436
sS'.thisRepN'
p576
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p577
I67
sS'.thisN'
p578
I67
sS'.thisIndex'
p579
g44
(g46
S'\xb4\x01\x00\x00'
tRp580
sg15
(lp581
S'k'
asg17
S'Y'
sg14
I2
sa(dp582
g16
(lp583
S'd'
asg39
I236
sS'.thisRepN'
p584
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p585
I68
sS'.thisN'
p586
I68
sS'.thisIndex'
p587
g44
(g46
S'\xec\x00\x00\x00'
tRp588
sg15
(lp589
S'd'
asg17
S'Y'
sg14
I2
sa(dp590
g16
(lp591
S'd'
asg39
I291
sS'.thisRepN'
p592
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p593
I69
sS'.thisN'
p594
I69
sS'.thisIndex'
p595
g44
(g46
S'#\x01\x00\x00'
tRp596
sg15
(lp597
S'k'
asg17
S'N'
sg14
I2
sa(dp598
g16
(lp599
S'k'
asg39
I502
sS'.thisRepN'
p600
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p601
I70
sS'.thisN'
p602
I70
sS'.thisIndex'
p603
g44
(g46
S'\xf6\x01\x00\x00'
tRp604
sg15
(lp605
S'k'
asg17
S'Y'
sg14
I2
sa(dp606
g16
(lp607
S'd'
asg39
I209
sS'.thisRepN'
p608
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p609
I71
sS'.thisN'
p610
I71
sS'.thisIndex'
p611
g44
(g46
S'\xd1\x00\x00\x00'
tRp612
sg15
(lp613
S'd'
asg17
S'Y'
sg14
I2
sa(dp614
g16
(lp615
S'k'
asg39
I569
sS'.thisRepN'
p616
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p617
I72
sS'.thisN'
p618
I72
sS'.thisIndex'
p619
g44
(g46
S'9\x02\x00\x00'
tRp620
sg15
(lp621
S'k'
asg17
S'Y'
sg14
I2
sa(dp622
g16
(lp623
S'd'
asg39
I163
sS'.thisRepN'
p624
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p625
I73
sS'.thisN'
p626
I73
sS'.thisIndex'
p627
g44
(g46
S'\xa3\x00\x00\x00'
tRp628
sg15
(lp629
S'd'
asg17
S'Y'
sg14
I2
sa(dp630
g16
(lp631
S'd'
asg39
I208
sS'.thisRepN'
p632
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p633
I74
sS'.thisN'
p634
I74
sS'.thisIndex'
p635
g44
(g46
S'\xd0\x00\x00\x00'
tRp636
sg15
(lp637
S'd'
asg17
S'Y'
sg14
I2
sa(dp638
g16
(lp639
S'd'
asg39
I285
sS'.thisRepN'
p640
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p641
I75
sS'.thisN'
p642
I75
sS'.thisIndex'
p643
g44
(g46
S'\x1d\x01\x00\x00'
tRp644
sg15
(lp645
S'd'
asg17
S'Y'
sg14
I2
sa(dp646
g16
(lp647
S'k'
asg39
I550
sS'.thisRepN'
p648
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p649
I76
sS'.thisN'
p650
I76
sS'.thisIndex'
p651
g44
(g46
S'&\x02\x00\x00'
tRp652
sg15
(lp653
S'k'
asg17
S'Y'
sg14
I2
sa(dp654
g16
(lp655
S'k'
asg39
I545
sS'.thisRepN'
p656
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p657
I77
sS'.thisN'
p658
I77
sS'.thisIndex'
p659
g44
(g46
S'!\x02\x00\x00'
tRp660
sg15
(lp661
S'k'
asg17
S'Y'
sg14
I2
sa(dp662
g16
(lp663
S'd'
asg39
I177
sS'.thisRepN'
p664
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p665
I78
sS'.thisN'
p666
I78
sS'.thisIndex'
p667
g44
(g46
S'\xb1\x00\x00\x00'
tRp668
sg15
(lp669
S'd'
asg17
S'Y'
sg14
I2
sa(dp670
g16
(lp671
S'd'
asg39
I157
sS'.thisRepN'
p672
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p673
I79
sS'.thisN'
p674
I79
sS'.thisIndex'
p675
g44
(g46
S'\x9d\x00\x00\x00'
tRp676
sg15
(lp677
S'd'
asg17
S'Y'
sg14
I2
sa(dp678
g16
(lp679
S'd'
asg39
I102
sS'.thisRepN'
p680
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p681
I80
sS'.thisN'
p682
I80
sS'.thisIndex'
p683
g44
(g46
S'f\x00\x00\x00'
tRp684
sg15
(lp685
S'd'
asg17
S'Y'
sg14
I2
sa(dp686
g16
(lp687
S'd'
asg39
I244
sS'.thisRepN'
p688
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p689
I81
sS'.thisN'
p690
I81
sS'.thisIndex'
p691
g44
(g46
S'\xf4\x00\x00\x00'
tRp692
sg15
(lp693
S'd'
asg17
S'Y'
sg14
I2
sa(dp694
g16
(lp695
S'k'
asg39
I368
sS'.thisRepN'
p696
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p697
I82
sS'.thisN'
p698
I82
sS'.thisIndex'
p699
g44
(g46
S'p\x01\x00\x00'
tRp700
sg15
(lp701
S'k'
asg17
S'Y'
sg14
I2
sa(dp702
g16
(lp703
S'k'
asg39
I307
sS'.thisRepN'
p704
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p705
I83
sS'.thisN'
p706
I83
sS'.thisIndex'
p707
g44
(g46
S'3\x01\x00\x00'
tRp708
sg15
(lp709
S'k'
asg17
S'Y'
sg14
I2
sa(dp710
g16
(lp711
S'k'
asg39
I500
sS'.thisRepN'
p712
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p713
I84
sS'.thisN'
p714
I84
sS'.thisIndex'
p715
g44
(g46
S'\xf4\x01\x00\x00'
tRp716
sg15
(lp717
S'd'
asg17
S'N'
sg14
I2
sa(dp718
g16
(lp719
S'd'
asg39
I33
sS'.thisRepN'
p720
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p721
I85
sS'.thisN'
p722
I85
sS'.thisIndex'
p723
g44
(g46
S'!\x00\x00\x00'
tRp724
sg15
(lp725
S'd'
asg17
S'Y'
sg14
I2
sa(dp726
g16
(lp727
S'k'
asg39
I570
sS'.thisRepN'
p728
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p729
I86
sS'.thisN'
p730
I86
sS'.thisIndex'
p731
g44
(g46
S':\x02\x00\x00'
tRp732
sg15
(lp733
S'k'
asg17
S'Y'
sg14
I2
sa(dp734
g16
(lp735
S'd'
asg39
I221
sS'.thisRepN'
p736
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p737
I87
sS'.thisN'
p738
I87
sS'.thisIndex'
p739
g44
(g46
S'\xdd\x00\x00\x00'
tRp740
sg15
(lp741
S'd'
asg17
S'Y'
sg14
I2
sa(dp742
g16
(lp743
S'd'
asg39
I276
sS'.thisRepN'
p744
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p745
I88
sS'.thisN'
p746
I88
sS'.thisIndex'
p747
g44
(g46
S'\x14\x01\x00\x00'
tRp748
sg15
(lp749
S'd'
asg17
S'Y'
sg14
I2
sa(dp750
g16
(lp751
S'k'
asg39
I336
sS'.thisRepN'
p752
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p753
I89
sS'.thisN'
p754
I89
sS'.thisIndex'
p755
g44
(g46
S'P\x01\x00\x00'
tRp756
sg15
(lp757
S'k'
asg17
S'Y'
sg14
I2
sa(dp758
g16
(lp759
S'd'
asg39
I84
sS'.thisRepN'
p760
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p761
I90
sS'.thisN'
p762
I90
sS'.thisIndex'
p763
g44
(g46
S'T\x00\x00\x00'
tRp764
sg15
(lp765
S'd'
asg17
S'Y'
sg14
I2
sa(dp766
g16
(lp767
S'd'
asg39
I98
sS'.thisRepN'
p768
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p769
I91
sS'.thisN'
p770
I91
sS'.thisIndex'
p771
g44
(g46
S'b\x00\x00\x00'
tRp772
sg15
(lp773
S'd'
asg17
S'Y'
sg14
I2
sa(dp774
g16
(lp775
S'k'
asg39
I479
sS'.thisRepN'
p776
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p777
I92
sS'.thisN'
p778
I92
sS'.thisIndex'
p779
g44
(g46
S'\xdf\x01\x00\x00'
tRp780
sg15
(lp781
S'k'
asg17
S'Y'
sg14
I2
sa(dp782
g16
(lp783
S'd'
asg39
I79
sS'.thisRepN'
p784
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p785
I93
sS'.thisN'
p786
I93
sS'.thisIndex'
p787
g44
(g46
S'O\x00\x00\x00'
tRp788
sg15
(lp789
S'd'
asg17
S'Y'
sg14
I2
sa(dp790
g16
(lp791
S'd'
asg39
I92
sS'.thisRepN'
p792
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p793
I94
sS'.thisN'
p794
I94
sS'.thisIndex'
p795
g44
(g46
S'\\\x00\x00\x00'
tRp796
sg15
(lp797
S'd'
asg17
S'Y'
sg14
I2
sa(dp798
g16
(lp799
S'k'
asg39
I317
sS'.thisRepN'
p800
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p801
I95
sS'.thisN'
p802
I95
sS'.thisIndex'
p803
g44
(g46
S'=\x01\x00\x00'
tRp804
sg15
(lp805
S'k'
asg17
S'Y'
sg14
I2
sa(dp806
g16
(lp807
S'k'
asg39
I574
sS'.thisRepN'
p808
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p809
I96
sS'.thisN'
p810
I96
sS'.thisIndex'
p811
g44
(g46
S'>\x02\x00\x00'
tRp812
sg15
(lp813
S'k'
asg17
S'Y'
sg14
I2
sa(dp814
g16
(lp815
S'd'
asg39
I39
sS'.thisRepN'
p816
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p817
I97
sS'.thisN'
p818
I97
sS'.thisIndex'
p819
g44
(g46
S"'\x00\x00\x00"
tRp820
sg15
(lp821
S'k'
asg17
S'N'
sg14
I2
sa(dp822
g16
(lp823
S'd'
asg39
I12
sS'.thisRepN'
p824
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p825
I98
sS'.thisN'
p826
I98
sS'.thisIndex'
p827
g44
(g46
S'\x0c\x00\x00\x00'
tRp828
sg15
(lp829
S'd'
asg17
S'Y'
sg14
I2
sa(dp830
g16
(lp831
S'k'
asg39
I360
sS'.thisRepN'
p832
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p833
I99
sS'.thisN'
p834
I99
sS'.thisIndex'
p835
g44
(g46
S'h\x01\x00\x00'
tRp836
sg15
(lp837
S'k'
asg17
S'Y'
sg14
I2
sa(dp838
g16
(lp839
S'd'
asg39
I47
sS'.thisRepN'
p840
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p841
I100
sS'.thisN'
p842
I100
sS'.thisIndex'
p843
g44
(g46
S'/\x00\x00\x00'
tRp844
sg15
(lp845
S'd'
asg17
S'Y'
sg14
I3
sa(dp846
g16
(lp847
S'd'
asg39
I263
sS'.thisRepN'
p848
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p849
I101
sS'.thisN'
p850
I101
sS'.thisIndex'
p851
g44
(g46
S'\x07\x01\x00\x00'
tRp852
sg15
(lp853
S'd'
asg17
S'Y'
sg14
I3
sa(dp854
g16
(lp855
S'k'
asg39
I583
sS'.thisRepN'
p856
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p857
I102
sS'.thisN'
p858
I102
sS'.thisIndex'
p859
g44
(g46
S'G\x02\x00\x00'
tRp860
sg15
(lp861
S'k'
asg17
S'Y'
sg14
I3
sa(dp862
g16
(lp863
S'd'
asg39
I155
sS'.thisRepN'
p864
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p865
I103
sS'.thisN'
p866
I103
sS'.thisIndex'
p867
g44
(g46
S'\x9b\x00\x00\x00'
tRp868
sg15
(lp869
S'd'
asg17
S'Y'
sg14
I3
sa(dp870
g16
(lp871
S'k'
asg39
I497
sS'.thisRepN'
p872
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p873
I104
sS'.thisN'
p874
I104
sS'.thisIndex'
p875
g44
(g46
S'\xf1\x01\x00\x00'
tRp876
sg15
(lp877
S'k'
asg17
S'Y'
sg14
I3
sa(dp878
g16
(lp879
S'k'
asg39
I490
sS'.thisRepN'
p880
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p881
I105
sS'.thisN'
p882
I105
sS'.thisIndex'
p883
g44
(g46
S'\xea\x01\x00\x00'
tRp884
sg15
(lp885
S'k'
asg17
S'Y'
sg14
I3
sa(dp886
g16
(lp887
S'd'
asg39
I191
sS'.thisRepN'
p888
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p889
I106
sS'.thisN'
p890
I106
sS'.thisIndex'
p891
g44
(g46
S'\xbf\x00\x00\x00'
tRp892
sg15
(lp893
S'd'
asg17
S'Y'
sg14
I3
sa(dp894
g16
(lp895
S'k'
asg39
I521
sS'.thisRepN'
p896
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p897
I107
sS'.thisN'
p898
I107
sS'.thisIndex'
p899
g44
(g46
S'\t\x02\x00\x00'
tRp900
sg15
(lp901
S'k'
asg17
S'Y'
sg14
I3
sa(dp902
g16
(lp903
S'd'
asg39
I131
sS'.thisRepN'
p904
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p905
I108
sS'.thisN'
p906
I108
sS'.thisIndex'
p907
g44
(g46
S'\x83\x00\x00\x00'
tRp908
sg15
(lp909
S'd'
asg17
S'Y'
sg14
I3
sa(dp910
g16
(lp911
S'k'
asg39
I538
sS'.thisRepN'
p912
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p913
I109
sS'.thisN'
p914
I109
sS'.thisIndex'
p915
g44
(g46
S'\x1a\x02\x00\x00'
tRp916
sg15
(lp917
S'k'
asg17
S'Y'
sg14
I3
sa(dp918
g16
(lp919
S'k'
asg39
I448
sS'.thisRepN'
p920
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p921
I110
sS'.thisN'
p922
I110
sS'.thisIndex'
p923
g44
(g46
S'\xc0\x01\x00\x00'
tRp924
sg15
(lp925
S'k'
asg17
S'Y'
sg14
I3
sa(dp926
g16
(lp927
S'd'
asg39
I247
sS'.thisRepN'
p928
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p929
I111
sS'.thisN'
p930
I111
sS'.thisIndex'
p931
g44
(g46
S'\xf7\x00\x00\x00'
tRp932
sg15
(lp933
S'd'
asg17
S'Y'
sg14
I3
sa(dp934
g16
(lp935
S'd'
asg39
I216
sS'.thisRepN'
p936
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p937
I112
sS'.thisN'
p938
I112
sS'.thisIndex'
p939
g44
(g46
S'\xd8\x00\x00\x00'
tRp940
sg15
(lp941
S'k'
asg17
S'N'
sg14
I3
sa(dp942
g16
(lp943
S'k'
asg39
I321
sS'.thisRepN'
p944
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p945
I113
sS'.thisN'
p946
I113
sS'.thisIndex'
p947
g44
(g46
S'A\x01\x00\x00'
tRp948
sg15
(lp949
S'k'
asg17
S'Y'
sg14
I3
sa(dp950
g16
(lp951
S'd'
asg39
I26
sS'.thisRepN'
p952
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p953
I114
sS'.thisN'
p954
I114
sS'.thisIndex'
p955
g44
(g46
S'\x1a\x00\x00\x00'
tRp956
sg15
(lp957
S'k'
asg17
S'N'
sg14
I3
sa(dp958
g16
(lp959
S'd'
asg39
I15
sS'.thisRepN'
p960
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p961
I115
sS'.thisN'
p962
I115
sS'.thisIndex'
p963
g44
(g46
S'\x0f\x00\x00\x00'
tRp964
sg15
(lp965
S'd'
asg17
S'Y'
sg14
I3
sa(dp966
g16
(lp967
S'd'
asg39
I106
sS'.thisRepN'
p968
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p969
I116
sS'.thisN'
p970
I116
sS'.thisIndex'
p971
g44
(g46
S'j\x00\x00\x00'
tRp972
sg15
(lp973
S'd'
asg17
S'Y'
sg14
I3
sa(dp974
g16
(lp975
S'k'
asg39
I334
sS'.thisRepN'
p976
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p977
I117
sS'.thisN'
p978
I117
sS'.thisIndex'
p979
g44
(g46
S'N\x01\x00\x00'
tRp980
sg15
(lp981
S'k'
asg17
S'Y'
sg14
I3
sa(dp982
g16
(lp983
S'k'
asg39
I481
sS'.thisRepN'
p984
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p985
I118
sS'.thisN'
p986
I118
sS'.thisIndex'
p987
g44
(g46
S'\xe1\x01\x00\x00'
tRp988
sg15
(lp989
S'k'
asg17
S'Y'
sg14
I3
sa(dp990
g16
(lp991
S'k'
asg39
I566
sS'.thisRepN'
p992
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p993
I119
sS'.thisN'
p994
I119
sS'.thisIndex'
p995
g44
(g46
S'6\x02\x00\x00'
tRp996
sg15
(lp997
S'k'
asg17
S'Y'
sg14
I3
sa(dp998
g16
(lp999
S'd'
asg39
I144
sS'.thisRepN'
p1000
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1001
I120
sS'.thisN'
p1002
I120
sS'.thisIndex'
p1003
g44
(g46
S'\x90\x00\x00\x00'
tRp1004
sg15
(lp1005
S'd'
asg17
S'Y'
sg14
I3
sa(dp1006
g16
(lp1007
S'd'
asg39
I66
sS'.thisRepN'
p1008
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1009
I121
sS'.thisN'
p1010
I121
sS'.thisIndex'
p1011
g44
(g46
S'B\x00\x00\x00'
tRp1012
sg15
(lp1013
S'd'
asg17
S'Y'
sg14
I3
sa(dp1014
g16
(lp1015
S'k'
asg39
I527
sS'.thisRepN'
p1016
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1017
I122
sS'.thisN'
p1018
I122
sS'.thisIndex'
p1019
g44
(g46
S'\x0f\x02\x00\x00'
tRp1020
sg15
(lp1021
S'k'
asg17
S'Y'
sg14
I3
sa(dp1022
g16
(lp1023
S'd'
asg39
I120
sS'.thisRepN'
p1024
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1025
I123
sS'.thisN'
p1026
I123
sS'.thisIndex'
p1027
g44
(g46
S'x\x00\x00\x00'
tRp1028
sg15
(lp1029
S'd'
asg17
S'Y'
sg14
I3
sa(dp1030
g16
(lp1031
S'k'
asg39
I555
sS'.thisRepN'
p1032
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1033
I124
sS'.thisN'
p1034
I124
sS'.thisIndex'
p1035
g44
(g46
S'+\x02\x00\x00'
tRp1036
sg15
(lp1037
S'k'
asg17
S'Y'
sg14
I3
sa(dp1038
g16
(lp1039
S'k'
asg39
I506
sS'.thisRepN'
p1040
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1041
I125
sS'.thisN'
p1042
I125
sS'.thisIndex'
p1043
g44
(g46
S'\xfa\x01\x00\x00'
tRp1044
sg15
(lp1045
S'k'
asg17
S'Y'
sg14
I3
sa(dp1046
g16
(lp1047
S'd'
asg39
I114
sS'.thisRepN'
p1048
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1049
I126
sS'.thisN'
p1050
I126
sS'.thisIndex'
p1051
g44
(g46
S'r\x00\x00\x00'
tRp1052
sg15
(lp1053
S'd'
asg17
S'Y'
sg14
I3
sa(dp1054
g16
(lp1055
S'k'
asg39
I513
sS'.thisRepN'
p1056
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1057
I127
sS'.thisN'
p1058
I127
sS'.thisIndex'
p1059
g44
(g46
S'\x01\x02\x00\x00'
tRp1060
sg15
(lp1061
S'k'
asg17
S'Y'
sg14
I3
sa(dp1062
g16
(lp1063
S'k'
asg39
I427
sS'.thisRepN'
p1064
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1065
I128
sS'.thisN'
p1066
I128
sS'.thisIndex'
p1067
g44
(g46
S'\xab\x01\x00\x00'
tRp1068
sg15
(lp1069
S'k'
asg17
S'Y'
sg14
I3
sa(dp1070
g16
(lp1071
S'd'
asg39
I27
sS'.thisRepN'
p1072
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1073
I129
sS'.thisN'
p1074
I129
sS'.thisIndex'
p1075
g44
(g46
S'\x1b\x00\x00\x00'
tRp1076
sg15
(lp1077
S'd'
asg17
S'Y'
sg14
I3
sa(dp1078
g16
(lp1079
S'k'
asg39
I395
sS'.thisRepN'
p1080
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1081
I130
sS'.thisN'
p1082
I130
sS'.thisIndex'
p1083
g44
(g46
S'\x8b\x01\x00\x00'
tRp1084
sg15
(lp1085
S'd'
asg17
S'N'
sg14
I3
sa(dp1086
g16
(lp1087
S'k'
asg39
I455
sS'.thisRepN'
p1088
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1089
I131
sS'.thisN'
p1090
I131
sS'.thisIndex'
p1091
g44
(g46
S'\xc7\x01\x00\x00'
tRp1092
sg15
(lp1093
S'k'
asg17
S'Y'
sg14
I3
sa(dp1094
g16
(lp1095
S'd'
asg39
I58
sS'.thisRepN'
p1096
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1097
I132
sS'.thisN'
p1098
I132
sS'.thisIndex'
p1099
g44
(g46
S':\x00\x00\x00'
tRp1100
sg15
(lp1101
S'k'
asg17
S'N'
sg14
I3
sa(dp1102
g16
(lp1103
S'k'
asg39
I489
sS'.thisRepN'
p1104
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1105
I133
sS'.thisN'
p1106
I133
sS'.thisIndex'
p1107
g44
(g46
S'\xe9\x01\x00\x00'
tRp1108
sg15
(lp1109
S'd'
asg17
S'N'
sg14
I3
sa(dp1110
g16
(lp1111
S'd'
asg39
I154
sS'.thisRepN'
p1112
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1113
I134
sS'.thisN'
p1114
I134
sS'.thisIndex'
p1115
g44
(g46
S'\x9a\x00\x00\x00'
tRp1116
sg15
(lp1117
S'd'
asg17
S'Y'
sg14
I3
sa(dp1118
g16
(lp1119
S'd'
asg39
I242
sS'.thisRepN'
p1120
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1121
I135
sS'.thisN'
p1122
I135
sS'.thisIndex'
p1123
g44
(g46
S'\xf2\x00\x00\x00'
tRp1124
sg15
(lp1125
S'k'
asg17
S'N'
sg14
I3
sa(dp1126
g16
(lp1127
S'k'
asg39
I439
sS'.thisRepN'
p1128
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1129
I136
sS'.thisN'
p1130
I136
sS'.thisIndex'
p1131
g44
(g46
S'\xb7\x01\x00\x00'
tRp1132
sg15
(lp1133
S'd'
asg17
S'N'
sg14
I3
sa(dp1134
g16
(lp1135
S'k'
asg39
I463
sS'.thisRepN'
p1136
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1137
I137
sS'.thisN'
p1138
I137
sS'.thisIndex'
p1139
g44
(g46
S'\xcf\x01\x00\x00'
tRp1140
sg15
(lp1141
S'k'
asg17
S'Y'
sg14
I3
sa(dp1142
g16
(lp1143
S'd'
asg39
I161
sS'.thisRepN'
p1144
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1145
I138
sS'.thisN'
p1146
I138
sS'.thisIndex'
p1147
g44
(g46
S'\xa1\x00\x00\x00'
tRp1148
sg15
(lp1149
S'd'
asg17
S'Y'
sg14
I3
sa(dp1150
g16
(lp1151
S'k'
asg39
I453
sS'.thisRepN'
p1152
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1153
I139
sS'.thisN'
p1154
I139
sS'.thisIndex'
p1155
g44
(g46
S'\xc5\x01\x00\x00'
tRp1156
sg15
(lp1157
S'k'
asg17
S'Y'
sg14
I3
sa(dp1158
g16
(lp1159
S'k'
asg39
I494
sS'.thisRepN'
p1160
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1161
I140
sS'.thisN'
p1162
I140
sS'.thisIndex'
p1163
g44
(g46
S'\xee\x01\x00\x00'
tRp1164
sg15
(lp1165
S'k'
asg17
S'Y'
sg14
I3
sa(dp1166
g16
(lp1167
S'd'
asg39
I62
sS'.thisRepN'
p1168
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1169
I141
sS'.thisN'
p1170
I141
sS'.thisIndex'
p1171
g44
(g46
S'>\x00\x00\x00'
tRp1172
sg15
(lp1173
S'd'
asg17
S'Y'
sg14
I3
sa(dp1174
g16
(lp1175
S'd'
asg39
I54
sS'.thisRepN'
p1176
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1177
I142
sS'.thisN'
p1178
I142
sS'.thisIndex'
p1179
g44
(g46
S'6\x00\x00\x00'
tRp1180
sg15
(lp1181
S'd'
asg17
S'Y'
sg14
I3
sa(dp1182
g16
(lp1183
S'k'
asg39
I338
sS'.thisRepN'
p1184
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1185
I143
sS'.thisN'
p1186
I143
sS'.thisIndex'
p1187
g44
(g46
S'R\x01\x00\x00'
tRp1188
sg15
(lp1189
S'k'
asg17
S'Y'
sg14
I3
sa(dp1190
g16
(lp1191
S'd'
asg39
I9
sS'.thisRepN'
p1192
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1193
I144
sS'.thisN'
p1194
I144
sS'.thisIndex'
p1195
g44
(g46
S'\t\x00\x00\x00'
tRp1196
sg15
(lp1197
S'd'
asg17
S'Y'
sg14
I3
sa(dp1198
g16
(lp1199
S'k'
asg39
I396
sS'.thisRepN'
p1200
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1201
I145
sS'.thisN'
p1202
I145
sS'.thisIndex'
p1203
g44
(g46
S'\x8c\x01\x00\x00'
tRp1204
sg15
(lp1205
S'd'
asg17
S'N'
sg14
I3
sa(dp1206
g16
(lp1207
S'd'
asg39
I97
sS'.thisRepN'
p1208
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1209
I146
sS'.thisN'
p1210
I146
sS'.thisIndex'
p1211
g44
(g46
S'a\x00\x00\x00'
tRp1212
sg15
(lp1213
S'd'
asg17
S'Y'
sg14
I3
sa(dp1214
g16
(lp1215
S'k'
asg39
I428
sS'.thisRepN'
p1216
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1217
I147
sS'.thisN'
p1218
I147
sS'.thisIndex'
p1219
g44
(g46
S'\xac\x01\x00\x00'
tRp1220
sg15
(lp1221
S'k'
asg17
S'Y'
sg14
I3
sa(dp1222
g16
(lp1223
S'd'
asg39
I36
sS'.thisRepN'
p1224
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1225
I148
sS'.thisN'
p1226
I148
sS'.thisIndex'
p1227
g44
(g46
S'$\x00\x00\x00'
tRp1228
sg15
(lp1229
S'd'
asg17
S'Y'
sg14
I3
sa(dp1230
g16
(lp1231
S'd'
asg39
I296
sS'.thisRepN'
p1232
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1233
I149
sS'.thisN'
p1234
I149
sS'.thisIndex'
p1235
g44
(g46
S'(\x01\x00\x00'
tRp1236
sg15
(lp1237
S'd'
asg17
S'Y'
sg14
I3
sa(dp1238
g16
(lp1239
S'k'
asg39
I340
sS'.thisRepN'
p1240
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1241
I150
sS'.thisN'
p1242
I150
sS'.thisIndex'
p1243
g44
(g46
S'T\x01\x00\x00'
tRp1244
sg15
(lp1245
S'k'
asg17
S'Y'
sg14
I4
sa(dp1246
g16
(lp1247
S'd'
asg39
I207
sS'.thisRepN'
p1248
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1249
I151
sS'.thisN'
p1250
I151
sS'.thisIndex'
p1251
g44
(g46
S'\xcf\x00\x00\x00'
tRp1252
sg15
(lp1253
S'd'
asg17
S'Y'
sg14
I4
sa(dp1254
g16
(lp1255
S'k'
asg39
I587
sS'.thisRepN'
p1256
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1257
I152
sS'.thisN'
p1258
I152
sS'.thisIndex'
p1259
g44
(g46
S'K\x02\x00\x00'
tRp1260
sg15
(lp1261
S'k'
asg17
S'Y'
sg14
I4
sa(dp1262
g16
(lp1263
S'd'
asg39
I45
sS'.thisRepN'
p1264
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1265
I153
sS'.thisN'
p1266
I153
sS'.thisIndex'
p1267
g44
(g46
S'-\x00\x00\x00'
tRp1268
sg15
(lp1269
S'd'
asg17
S'Y'
sg14
I4
sa(dp1270
g16
(lp1271
S'd'
asg39
I51
sS'.thisRepN'
p1272
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1273
I154
sS'.thisN'
p1274
I154
sS'.thisIndex'
p1275
g44
(g46
S'3\x00\x00\x00'
tRp1276
sg15
(lp1277
S'd'
asg17
S'Y'
sg14
I4
sa(dp1278
g16
(lp1279
S'k'
asg39
I430
sS'.thisRepN'
p1280
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1281
I155
sS'.thisN'
p1282
I155
sS'.thisIndex'
p1283
g44
(g46
S'\xae\x01\x00\x00'
tRp1284
sg15
(lp1285
S'k'
asg17
S'Y'
sg14
I4
sa(dp1286
g16
(lp1287
S'd'
asg39
I288
sS'.thisRepN'
p1288
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1289
I156
sS'.thisN'
p1290
I156
sS'.thisIndex'
p1291
g44
(g46
S' \x01\x00\x00'
tRp1292
sg15
(lp1293
S'k'
asg17
S'N'
sg14
I4
sa(dp1294
g16
(lp1295
S'd'
asg39
I186
sS'.thisRepN'
p1296
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1297
I157
sS'.thisN'
p1298
I157
sS'.thisIndex'
p1299
g44
(g46
S'\xba\x00\x00\x00'
tRp1300
sg15
(lp1301
S'd'
asg17
S'Y'
sg14
I4
sa(dp1302
g16
(lp1303
S'k'
asg39
I363
sS'.thisRepN'
p1304
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1305
I158
sS'.thisN'
p1306
I158
sS'.thisIndex'
p1307
g44
(g46
S'k\x01\x00\x00'
tRp1308
sg15
(lp1309
S'k'
asg17
S'Y'
sg14
I4
sa(dp1310
g16
(lp1311
S'd'
asg39
I121
sS'.thisRepN'
p1312
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1313
I159
sS'.thisN'
p1314
I159
sS'.thisIndex'
p1315
g44
(g46
S'y\x00\x00\x00'
tRp1316
sg15
(lp1317
S'd'
asg17
S'Y'
sg14
I4
sa(dp1318
g16
(lp1319
S'd'
asg39
I196
sS'.thisRepN'
p1320
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1321
I160
sS'.thisN'
p1322
I160
sS'.thisIndex'
p1323
g44
(g46
S'\xc4\x00\x00\x00'
tRp1324
sg15
(lp1325
S'k'
asg17
S'N'
sg14
I4
sa(dp1326
g16
(lp1327
S'k'
asg39
I516
sS'.thisRepN'
p1328
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1329
I161
sS'.thisN'
p1330
I161
sS'.thisIndex'
p1331
g44
(g46
S'\x04\x02\x00\x00'
tRp1332
sg15
(lp1333
S'k'
asg17
S'Y'
sg14
I4
sa(dp1334
g16
(lp1335
S'd'
asg39
I136
sS'.thisRepN'
p1336
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1337
I162
sS'.thisN'
p1338
I162
sS'.thisIndex'
p1339
g44
(g46
S'\x88\x00\x00\x00'
tRp1340
sg15
(lp1341
S'd'
asg17
S'Y'
sg14
I4
sa(dp1342
g16
(lp1343
S'd'
asg39
I167
sS'.thisRepN'
p1344
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1345
I163
sS'.thisN'
p1346
I163
sS'.thisIndex'
p1347
g44
(g46
S'\xa7\x00\x00\x00'
tRp1348
sg15
(lp1349
S'd'
asg17
S'Y'
sg14
I4
sa(dp1350
g16
(lp1351
S'd'
asg39
I35
sS'.thisRepN'
p1352
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1353
I164
sS'.thisN'
p1354
I164
sS'.thisIndex'
p1355
g44
(g46
S'#\x00\x00\x00'
tRp1356
sg15
(lp1357
S'd'
asg17
S'Y'
sg14
I4
sa(dp1358
g16
(lp1359
S'k'
asg39
I444
sS'.thisRepN'
p1360
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1361
I165
sS'.thisN'
p1362
I165
sS'.thisIndex'
p1363
g44
(g46
S'\xbc\x01\x00\x00'
tRp1364
sg15
(lp1365
S'k'
asg17
S'Y'
sg14
I4
sa(dp1366
g16
(lp1367
S'd'
asg39
I116
sS'.thisRepN'
p1368
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1369
I166
sS'.thisN'
p1370
I166
sS'.thisIndex'
p1371
g44
(g46
S't\x00\x00\x00'
tRp1372
sg15
(lp1373
S'd'
asg17
S'Y'
sg14
I4
sa(dp1374
g16
(lp1375
S'k'
asg39
I593
sS'.thisRepN'
p1376
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1377
I167
sS'.thisN'
p1378
I167
sS'.thisIndex'
p1379
g44
(g46
S'Q\x02\x00\x00'
tRp1380
sg15
(lp1381
S'k'
asg17
S'Y'
sg14
I4
sa(dp1382
g16
(lp1383
S'k'
asg39
I573
sS'.thisRepN'
p1384
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1385
I168
sS'.thisN'
p1386
I168
sS'.thisIndex'
p1387
g44
(g46
S'=\x02\x00\x00'
tRp1388
sg15
(lp1389
S'k'
asg17
S'Y'
sg14
I4
sa(dp1390
g16
(lp1391
S'd'
asg39
I71
sS'.thisRepN'
p1392
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1393
I169
sS'.thisN'
p1394
I169
sS'.thisIndex'
p1395
g44
(g46
S'G\x00\x00\x00'
tRp1396
sg15
(lp1397
S'd'
asg17
S'Y'
sg14
I4
sa(dp1398
g16
(lp1399
S'd'
asg39
I151
sS'.thisRepN'
p1400
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1401
I170
sS'.thisN'
p1402
I170
sS'.thisIndex'
p1403
g44
(g46
S'\x97\x00\x00\x00'
tRp1404
sg15
(lp1405
S'd'
asg17
S'Y'
sg14
I4
sa(dp1406
g16
(lp1407
S'd'
asg39
I68
sS'.thisRepN'
p1408
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1409
I171
sS'.thisN'
p1410
I171
sS'.thisIndex'
p1411
g44
(g46
S'D\x00\x00\x00'
tRp1412
sg15
(lp1413
S'd'
asg17
S'Y'
sg14
I4
sa(dp1414
g16
(lp1415
S'k'
asg39
I523
sS'.thisRepN'
p1416
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1417
I172
sS'.thisN'
p1418
I172
sS'.thisIndex'
p1419
g44
(g46
S'\x0b\x02\x00\x00'
tRp1420
sg15
(lp1421
S'd'
asg17
S'N'
sg14
I4
sa(dp1422
g16
(lp1423
S'd'
asg39
I107
sS'.thisRepN'
p1424
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1425
I173
sS'.thisN'
p1426
I173
sS'.thisIndex'
p1427
g44
(g46
S'k\x00\x00\x00'
tRp1428
sg15
(lp1429
S'd'
asg17
S'Y'
sg14
I4
sa(dp1430
g16
(lp1431
S'k'
asg39
I311
sS'.thisRepN'
p1432
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1433
I174
sS'.thisN'
p1434
I174
sS'.thisIndex'
p1435
g44
(g46
S'7\x01\x00\x00'
tRp1436
sg15
(lp1437
S'd'
asg17
S'N'
sg14
I4
sa(dp1438
g16
(lp1439
S'd'
asg39
I287
sS'.thisRepN'
p1440
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1441
I175
sS'.thisN'
p1442
I175
sS'.thisIndex'
p1443
g44
(g46
S'\x1f\x01\x00\x00'
tRp1444
sg15
(lp1445
S'd'
asg17
S'Y'
sg14
I4
sa(dp1446
g16
(lp1447
S'k'
asg39
I452
sS'.thisRepN'
p1448
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1449
I176
sS'.thisN'
p1450
I176
sS'.thisIndex'
p1451
g44
(g46
S'\xc4\x01\x00\x00'
tRp1452
sg15
(lp1453
S'k'
asg17
S'Y'
sg14
I4
sa(dp1454
g16
(lp1455
S'k'
asg39
I584
sS'.thisRepN'
p1456
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1457
I177
sS'.thisN'
p1458
I177
sS'.thisIndex'
p1459
g44
(g46
S'H\x02\x00\x00'
tRp1460
sg15
(lp1461
S'd'
asg17
S'N'
sg14
I4
sa(dp1462
g16
(lp1463
S'd'
asg39
I137
sS'.thisRepN'
p1464
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1465
I178
sS'.thisN'
p1466
I178
sS'.thisIndex'
p1467
g44
(g46
S'\x89\x00\x00\x00'
tRp1468
sg15
(lp1469
S'k'
asg17
S'N'
sg14
I4
sa(dp1470
g16
(lp1471
S'd'
asg39
I250
sS'.thisRepN'
p1472
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1473
I179
sS'.thisN'
p1474
I179
sS'.thisIndex'
p1475
g44
(g46
S'\xfa\x00\x00\x00'
tRp1476
sg15
(lp1477
S'd'
asg17
S'Y'
sg14
I4
sa(dp1478
g16
(lp1479
S'k'
asg39
I537
sS'.thisRepN'
p1480
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1481
I180
sS'.thisN'
p1482
I180
sS'.thisIndex'
p1483
g44
(g46
S'\x19\x02\x00\x00'
tRp1484
sg15
(lp1485
S'k'
asg17
S'Y'
sg14
I4
sa(dp1486
g16
(lp1487
S'd'
asg39
I217
sS'.thisRepN'
p1488
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1489
I181
sS'.thisN'
p1490
I181
sS'.thisIndex'
p1491
g44
(g46
S'\xd9\x00\x00\x00'
tRp1492
sg15
(lp1493
S'k'
asg17
S'N'
sg14
I4
sa(dp1494
g16
(lp1495
S'k'
asg39
I557
sS'.thisRepN'
p1496
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1497
I182
sS'.thisN'
p1498
I182
sS'.thisIndex'
p1499
g44
(g46
S'-\x02\x00\x00'
tRp1500
sg15
(lp1501
S'k'
asg17
S'Y'
sg14
I4
sa(dp1502
g16
(lp1503
S'd'
asg39
I265
sS'.thisRepN'
p1504
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1505
I183
sS'.thisN'
p1506
I183
sS'.thisIndex'
p1507
g44
(g46
S'\t\x01\x00\x00'
tRp1508
sg15
(lp1509
S'd'
asg17
S'Y'
sg14
I4
sa(dp1510
g16
(lp1511
S'd'
asg39
I37
sS'.thisRepN'
p1512
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1513
I184
sS'.thisN'
p1514
I184
sS'.thisIndex'
p1515
g44
(g46
S'%\x00\x00\x00'
tRp1516
sg15
(lp1517
S'd'
asg17
S'Y'
sg14
I4
sa(dp1518
g16
(lp1519
S'k'
asg39
I487
sS'.thisRepN'
p1520
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1521
I185
sS'.thisN'
p1522
I185
sS'.thisIndex'
p1523
g44
(g46
S'\xe7\x01\x00\x00'
tRp1524
sg15
(lp1525
S'k'
asg17
S'Y'
sg14
I4
sa(dp1526
g16
(lp1527
S'k'
asg39
I542
sS'.thisRepN'
p1528
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1529
I186
sS'.thisN'
p1530
I186
sS'.thisIndex'
p1531
g44
(g46
S'\x1e\x02\x00\x00'
tRp1532
sg15
(lp1533
S'k'
asg17
S'Y'
sg14
I4
sa(dp1534
g16
(lp1535
S'k'
asg39
I349
sS'.thisRepN'
p1536
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1537
I187
sS'.thisN'
p1538
I187
sS'.thisIndex'
p1539
g44
(g46
S']\x01\x00\x00'
tRp1540
sg15
(lp1541
S'd'
asg17
S'N'
sg14
I4
sa(dp1542
g16
(lp1543
S'd'
asg39
I192
sS'.thisRepN'
p1544
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1545
I188
sS'.thisN'
p1546
I188
sS'.thisIndex'
p1547
g44
(g46
S'\xc0\x00\x00\x00'
tRp1548
sg15
(lp1549
S'd'
asg17
S'Y'
sg14
I4
sa(dp1550
g16
(lp1551
S'd'
asg39
I4
sS'.thisRepN'
p1552
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1553
I189
sS'.thisN'
p1554
I189
sS'.thisIndex'
p1555
g44
(g46
S'\x04\x00\x00\x00'
tRp1556
sg15
(lp1557
S'd'
asg17
S'Y'
sg14
I4
sa(dp1558
g16
(lp1559
S'k'
asg39
I553
sS'.thisRepN'
p1560
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1561
I190
sS'.thisN'
p1562
I190
sS'.thisIndex'
p1563
g44
(g46
S')\x02\x00\x00'
tRp1564
sg15
(lp1565
S'k'
asg17
S'Y'
sg14
I4
sa(dp1566
g16
(lp1567
S'k'
asg39
I567
sS'.thisRepN'
p1568
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1569
I191
sS'.thisN'
p1570
I191
sS'.thisIndex'
p1571
g44
(g46
S'7\x02\x00\x00'
tRp1572
sg15
(lp1573
S'k'
asg17
S'Y'
sg14
I4
sa(dp1574
g16
(lp1575
S'd'
asg39
I90
sS'.thisRepN'
p1576
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1577
I192
sS'.thisN'
p1578
I192
sS'.thisIndex'
p1579
g44
(g46
S'Z\x00\x00\x00'
tRp1580
sg15
(lp1581
S'k'
asg17
S'N'
sg14
I4
sa(dp1582
g16
(lp1583
S'k'
asg39
I447
sS'.thisRepN'
p1584
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1585
I193
sS'.thisN'
p1586
I193
sS'.thisIndex'
p1587
g44
(g46
S'\xbf\x01\x00\x00'
tRp1588
sg15
(lp1589
S'k'
asg17
S'Y'
sg14
I4
sa(dp1590
g16
(lp1591
S'd'
asg39
I228
sS'.thisRepN'
p1592
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1593
I194
sS'.thisN'
p1594
I194
sS'.thisIndex'
p1595
g44
(g46
S'\xe4\x00\x00\x00'
tRp1596
sg15
(lp1597
S'd'
asg17
S'Y'
sg14
I4
sa(dp1598
g16
(lp1599
S'd'
asg39
I20
sS'.thisRepN'
p1600
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1601
I195
sS'.thisN'
p1602
I195
sS'.thisIndex'
p1603
g44
(g46
S'\x14\x00\x00\x00'
tRp1604
sg15
(lp1605
S'd'
asg17
S'Y'
sg14
I4
sa(dp1606
g16
(lp1607
S'k'
asg39
I597
sS'.thisRepN'
p1608
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1609
I196
sS'.thisN'
p1610
I196
sS'.thisIndex'
p1611
g44
(g46
S'U\x02\x00\x00'
tRp1612
sg15
(lp1613
S'k'
asg17
S'Y'
sg14
I4
sa(dp1614
g16
(lp1615
S'd'
asg39
I104
sS'.thisRepN'
p1616
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1617
I197
sS'.thisN'
p1618
I197
sS'.thisIndex'
p1619
g44
(g46
S'h\x00\x00\x00'
tRp1620
sg15
(lp1621
S'd'
asg17
S'Y'
sg14
I4
sa(dp1622
g16
(lp1623
S'k'
asg39
I309
sS'.thisRepN'
p1624
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1625
I198
sS'.thisN'
p1626
I198
sS'.thisIndex'
p1627
g44
(g46
S'5\x01\x00\x00'
tRp1628
sg15
(lp1629
S'k'
asg17
S'Y'
sg14
I4
sa(dp1630
g16
(lp1631
S'd'
asg39
I147
sS'.thisRepN'
p1632
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1633
I199
sS'.thisN'
p1634
I199
sS'.thisIndex'
p1635
g44
(g46
S'\x93\x00\x00\x00'
tRp1636
sg15
(lp1637
S'd'
asg17
S'Y'
sg14
I4
sa(dp1638
g16
(lp1639
S'd'
asg39
I34
sS'.thisRepN'
p1640
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1641
I200
sS'.thisN'
p1642
I200
sS'.thisIndex'
p1643
g44
(g46
S'"\x00\x00\x00'
tRp1644
sg15
(lp1645
S'k'
asg17
S'N'
sg14
I5
sa(dp1646
g16
(lp1647
S'k'
asg39
I373
sS'.thisRepN'
p1648
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1649
I201
sS'.thisN'
p1650
I201
sS'.thisIndex'
p1651
g44
(g46
S'u\x01\x00\x00'
tRp1652
sg15
(lp1653
S'd'
asg17
S'N'
sg14
I5
sa(dp1654
g16
(lp1655
S'k'
asg39
I559
sS'.thisRepN'
p1656
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1657
I202
sS'.thisN'
p1658
I202
sS'.thisIndex'
p1659
g44
(g46
S'/\x02\x00\x00'
tRp1660
sg15
(lp1661
S'k'
asg17
S'Y'
sg14
I5
sa(dp1662
g16
(lp1663
S'd'
asg39
I173
sS'.thisRepN'
p1664
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1665
I203
sS'.thisN'
p1666
I203
sS'.thisIndex'
p1667
g44
(g46
S'\xad\x00\x00\x00'
tRp1668
sg15
(lp1669
S'k'
asg17
S'N'
sg14
I5
sa(dp1670
g16
(lp1671
S'k'
asg39
I302
sS'.thisRepN'
p1672
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1673
I204
sS'.thisN'
p1674
I204
sS'.thisIndex'
p1675
g44
(g46
S'.\x01\x00\x00'
tRp1676
sg15
(lp1677
S'k'
asg17
S'Y'
sg14
I5
sa(dp1678
g16
(lp1679
S'd'
asg39
I256
sS'.thisRepN'
p1680
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1681
I205
sS'.thisN'
p1682
I205
sS'.thisIndex'
p1683
g44
(g46
S'\x00\x01\x00\x00'
tRp1684
sg15
(lp1685
S'k'
asg17
S'N'
sg14
I5
sa(dp1686
g16
(lp1687
S'k'
asg39
I507
sS'.thisRepN'
p1688
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1689
I206
sS'.thisN'
p1690
I206
sS'.thisIndex'
p1691
g44
(g46
S'\xfb\x01\x00\x00'
tRp1692
sg15
(lp1693
S'k'
asg17
S'Y'
sg14
I5
sa(dp1694
g16
(lp1695
S'd'
asg39
I124
sS'.thisRepN'
p1696
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1697
I207
sS'.thisN'
p1698
I207
sS'.thisIndex'
p1699
g44
(g46
S'|\x00\x00\x00'
tRp1700
sg15
(lp1701
S'd'
asg17
S'Y'
sg14
I5
sa(dp1702
g16
(lp1703
S'k'
asg39
I434
sS'.thisRepN'
p1704
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1705
I208
sS'.thisN'
p1706
I208
sS'.thisIndex'
p1707
g44
(g46
S'\xb2\x01\x00\x00'
tRp1708
sg15
(lp1709
S'k'
asg17
S'Y'
sg14
I5
sa(dp1710
g16
(lp1711
S'd'
asg39
I53
sS'.thisRepN'
p1712
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1713
I209
sS'.thisN'
p1714
I209
sS'.thisIndex'
p1715
g44
(g46
S'5\x00\x00\x00'
tRp1716
sg15
(lp1717
S'd'
asg17
S'Y'
sg14
I5
sa(dp1718
g16
(lp1719
S'k'
asg39
I524
sS'.thisRepN'
p1720
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1721
I210
sS'.thisN'
p1722
I210
sS'.thisIndex'
p1723
g44
(g46
S'\x0c\x02\x00\x00'
tRp1724
sg15
(lp1725
S'k'
asg17
S'Y'
sg14
I5
sa(dp1726
g16
(lp1727
S'd'
asg39
I253
sS'.thisRepN'
p1728
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1729
I211
sS'.thisN'
p1730
I211
sS'.thisIndex'
p1731
g44
(g46
S'\xfd\x00\x00\x00'
tRp1732
sg15
(lp1733
S'k'
asg17
S'N'
sg14
I5
sa(dp1734
g16
(lp1735
S'd'
asg39
I245
sS'.thisRepN'
p1736
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1737
I212
sS'.thisN'
p1738
I212
sS'.thisIndex'
p1739
g44
(g46
S'\xf5\x00\x00\x00'
tRp1740
sg15
(lp1741
S'd'
asg17
S'Y'
sg14
I5
sa(dp1742
g16
(lp1743
S'k'
asg39
I322
sS'.thisRepN'
p1744
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1745
I213
sS'.thisN'
p1746
I213
sS'.thisIndex'
p1747
g44
(g46
S'B\x01\x00\x00'
tRp1748
sg15
(lp1749
S'k'
asg17
S'Y'
sg14
I5
sa(dp1750
g16
(lp1751
S'k'
asg39
I394
sS'.thisRepN'
p1752
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1753
I214
sS'.thisN'
p1754
I214
sS'.thisIndex'
p1755
g44
(g46
S'\x8a\x01\x00\x00'
tRp1756
sg15
(lp1757
S'k'
asg17
S'Y'
sg14
I5
sa(dp1758
g16
(lp1759
S'd'
asg39
I28
sS'.thisRepN'
p1760
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1761
I215
sS'.thisN'
p1762
I215
sS'.thisIndex'
p1763
g44
(g46
S'\x1c\x00\x00\x00'
tRp1764
sg15
(lp1765
S'k'
asg17
S'N'
sg14
I5
sa(dp1766
g16
(lp1767
S'd'
asg39
I61
sS'.thisRepN'
p1768
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1769
I216
sS'.thisN'
p1770
I216
sS'.thisIndex'
p1771
g44
(g46
S'=\x00\x00\x00'
tRp1772
sg15
(lp1773
S'd'
asg17
S'Y'
sg14
I5
sa(dp1774
g16
(lp1775
S'd'
asg39
I205
sS'.thisRepN'
p1776
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1777
I217
sS'.thisN'
p1778
I217
sS'.thisIndex'
p1779
g44
(g46
S'\xcd\x00\x00\x00'
tRp1780
sg15
(lp1781
S'd'
asg17
S'Y'
sg14
I5
sa(dp1782
g16
(lp1783
S'k'
asg39
I387
sS'.thisRepN'
p1784
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1785
I218
sS'.thisN'
p1786
I218
sS'.thisIndex'
p1787
g44
(g46
S'\x83\x01\x00\x00'
tRp1788
sg15
(lp1789
S'k'
asg17
S'Y'
sg14
I5
sa(dp1790
g16
(lp1791
S'd'
asg39
I76
sS'.thisRepN'
p1792
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1793
I219
sS'.thisN'
p1794
I219
sS'.thisIndex'
p1795
g44
(g46
S'L\x00\x00\x00'
tRp1796
sg15
(lp1797
S'd'
asg17
S'Y'
sg14
I5
sa(dp1798
g16
(lp1799
S'k'
asg39
I451
sS'.thisRepN'
p1800
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1801
I220
sS'.thisN'
p1802
I220
sS'.thisIndex'
p1803
g44
(g46
S'\xc3\x01\x00\x00'
tRp1804
sg15
(lp1805
S'k'
asg17
S'Y'
sg14
I5
sa(dp1806
g16
(lp1807
S'd'
asg39
I148
sS'.thisRepN'
p1808
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1809
I221
sS'.thisN'
p1810
I221
sS'.thisIndex'
p1811
g44
(g46
S'\x94\x00\x00\x00'
tRp1812
sg15
(lp1813
S'd'
asg17
S'Y'
sg14
I5
sa(dp1814
g16
(lp1815
S'd'
asg39
I43
sS'.thisRepN'
p1816
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1817
I222
sS'.thisN'
p1818
I222
sS'.thisIndex'
p1819
g44
(g46
S'+\x00\x00\x00'
tRp1820
sg15
(lp1821
S'k'
asg17
S'N'
sg14
I5
sa(dp1822
g16
(lp1823
S'k'
asg39
I540
sS'.thisRepN'
p1824
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1825
I223
sS'.thisN'
p1826
I223
sS'.thisIndex'
p1827
g44
(g46
S'\x1c\x02\x00\x00'
tRp1828
sg15
(lp1829
S'k'
asg17
S'Y'
sg14
I5
sa(dp1830
g16
(lp1831
S'd'
asg39
I78
sS'.thisRepN'
p1832
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1833
I224
sS'.thisN'
p1834
I224
sS'.thisIndex'
p1835
g44
(g46
S'N\x00\x00\x00'
tRp1836
sg15
(lp1837
S'k'
asg17
S'N'
sg14
I5
sa(dp1838
g16
(lp1839
S'd'
asg39
I176
sS'.thisRepN'
p1840
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1841
I225
sS'.thisN'
p1842
I225
sS'.thisIndex'
p1843
g44
(g46
S'\xb0\x00\x00\x00'
tRp1844
sg15
(lp1845
S'd'
asg17
S'Y'
sg14
I5
sa(dp1846
g16
(lp1847
S'k'
asg39
I329
sS'.thisRepN'
p1848
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1849
I226
sS'.thisN'
p1850
I226
sS'.thisIndex'
p1851
g44
(g46
S'I\x01\x00\x00'
tRp1852
sg15
(lp1853
S'k'
asg17
S'Y'
sg14
I5
sa(dp1854
g16
(lp1855
S'd'
asg39
I19
sS'.thisRepN'
p1856
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1857
I227
sS'.thisN'
p1858
I227
sS'.thisIndex'
p1859
g44
(g46
S'\x13\x00\x00\x00'
tRp1860
sg15
(lp1861
S'd'
asg17
S'Y'
sg14
I5
sa(dp1862
g16
(lp1863
S'k'
asg39
I325
sS'.thisRepN'
p1864
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1865
I228
sS'.thisN'
p1866
I228
sS'.thisIndex'
p1867
g44
(g46
S'E\x01\x00\x00'
tRp1868
sg15
(lp1869
S'k'
asg17
S'Y'
sg14
I5
sa(dp1870
g16
(lp1871
S'k'
asg39
I374
sS'.thisRepN'
p1872
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1873
I229
sS'.thisN'
p1874
I229
sS'.thisIndex'
p1875
g44
(g46
S'v\x01\x00\x00'
tRp1876
sg15
(lp1877
S'd'
asg17
S'N'
sg14
I5
sa(dp1878
g16
(lp1879
S'k'
asg39
I525
sS'.thisRepN'
p1880
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1881
I230
sS'.thisN'
p1882
I230
sS'.thisIndex'
p1883
g44
(g46
S'\r\x02\x00\x00'
tRp1884
sg15
(lp1885
S'k'
asg17
S'Y'
sg14
I5
sa(dp1886
g16
(lp1887
S'k'
asg39
I392
sS'.thisRepN'
p1888
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1889
I231
sS'.thisN'
p1890
I231
sS'.thisIndex'
p1891
g44
(g46
S'\x88\x01\x00\x00'
tRp1892
sg15
(lp1893
S'k'
asg17
S'Y'
sg14
I5
sa(dp1894
g16
(lp1895
S'k'
asg39
I323
sS'.thisRepN'
p1896
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1897
I232
sS'.thisN'
p1898
I232
sS'.thisIndex'
p1899
g44
(g46
S'C\x01\x00\x00'
tRp1900
sg15
(lp1901
S'k'
asg17
S'Y'
sg14
I5
sa(dp1902
g16
(lp1903
S'k'
asg39
I478
sS'.thisRepN'
p1904
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1905
I233
sS'.thisN'
p1906
I233
sS'.thisIndex'
p1907
g44
(g46
S'\xde\x01\x00\x00'
tRp1908
sg15
(lp1909
S'k'
asg17
S'Y'
sg14
I5
sa(dp1910
g16
(lp1911
S'd'
asg39
I218
sS'.thisRepN'
p1912
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1913
I234
sS'.thisN'
p1914
I234
sS'.thisIndex'
p1915
g44
(g46
S'\xda\x00\x00\x00'
tRp1916
sg15
(lp1917
S'd'
asg17
S'Y'
sg14
I5
sa(dp1918
g16
(lp1919
S'd'
asg39
I59
sS'.thisRepN'
p1920
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1921
I235
sS'.thisN'
p1922
I235
sS'.thisIndex'
p1923
g44
(g46
S';\x00\x00\x00'
tRp1924
sg15
(lp1925
S'k'
asg17
S'N'
sg14
I5
sa(dp1926
g16
(lp1927
S'd'
asg39
I284
sS'.thisRepN'
p1928
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1929
I236
sS'.thisN'
p1930
I236
sS'.thisIndex'
p1931
g44
(g46
S'\x1c\x01\x00\x00'
tRp1932
sg15
(lp1933
S'd'
asg17
S'Y'
sg14
I5
sa(dp1934
g16
(lp1935
S'd'
asg39
I42
sS'.thisRepN'
p1936
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1937
I237
sS'.thisN'
p1938
I237
sS'.thisIndex'
p1939
g44
(g46
S'*\x00\x00\x00'
tRp1940
sg15
(lp1941
S'd'
asg17
S'Y'
sg14
I5
sa(dp1942
g16
(lp1943
S'd'
asg39
I203
sS'.thisRepN'
p1944
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1945
I238
sS'.thisN'
p1946
I238
sS'.thisIndex'
p1947
g44
(g46
S'\xcb\x00\x00\x00'
tRp1948
sg15
(lp1949
S'd'
asg17
S'Y'
sg14
I5
sa(dp1950
g16
(lp1951
S'k'
asg39
I355
sS'.thisRepN'
p1952
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1953
I239
sS'.thisN'
p1954
I239
sS'.thisIndex'
p1955
g44
(g46
S'c\x01\x00\x00'
tRp1956
sg15
(lp1957
S'k'
asg17
S'Y'
sg14
I5
sa(dp1958
g16
(lp1959
S'd'
asg39
I130
sS'.thisRepN'
p1960
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1961
I240
sS'.thisN'
p1962
I240
sS'.thisIndex'
p1963
g44
(g46
S'\x82\x00\x00\x00'
tRp1964
sg15
(lp1965
S'k'
asg17
S'N'
sg14
I5
sa(dp1966
g16
(lp1967
S'k'
asg39
I572
sS'.thisRepN'
p1968
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1969
I241
sS'.thisN'
p1970
I241
sS'.thisIndex'
p1971
g44
(g46
S'<\x02\x00\x00'
tRp1972
sg15
(lp1973
S'k'
asg17
S'Y'
sg14
I5
sa(dp1974
g16
(lp1975
S'd'
asg39
I127
sS'.thisRepN'
p1976
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1977
I242
sS'.thisN'
p1978
I242
sS'.thisIndex'
p1979
g44
(g46
S'\x7f\x00\x00\x00'
tRp1980
sg15
(lp1981
S'd'
asg17
S'Y'
sg14
I5
sa(dp1982
g16
(lp1983
S'd'
asg39
I111
sS'.thisRepN'
p1984
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1985
I243
sS'.thisN'
p1986
I243
sS'.thisIndex'
p1987
g44
(g46
S'o\x00\x00\x00'
tRp1988
sg15
(lp1989
S'd'
asg17
S'Y'
sg14
I5
sa(dp1990
g16
(lp1991
S'k'
asg39
I510
sS'.thisRepN'
p1992
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1993
I244
sS'.thisN'
p1994
I244
sS'.thisIndex'
p1995
g44
(g46
S'\xfe\x01\x00\x00'
tRp1996
sg15
(lp1997
S'k'
asg17
S'Y'
sg14
I5
sa(dp1998
g16
(lp1999
S'd'
asg39
I269
sS'.thisRepN'
p2000
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2001
I245
sS'.thisN'
p2002
I245
sS'.thisIndex'
p2003
g44
(g46
S'\r\x01\x00\x00'
tRp2004
sg15
(lp2005
S'd'
asg17
S'Y'
sg14
I5
sa(dp2006
g16
(lp2007
S'k'
asg39
I441
sS'.thisRepN'
p2008
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2009
I246
sS'.thisN'
p2010
I246
sS'.thisIndex'
p2011
g44
(g46
S'\xb9\x01\x00\x00'
tRp2012
sg15
(lp2013
S'k'
asg17
S'Y'
sg14
I5
sa(dp2014
g16
(lp2015
S'k'
asg39
I408
sS'.thisRepN'
p2016
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2017
I247
sS'.thisN'
p2018
I247
sS'.thisIndex'
p2019
g44
(g46
S'\x98\x01\x00\x00'
tRp2020
sg15
(lp2021
S'k'
asg17
S'Y'
sg14
I5
sa(dp2022
g16
(lp2023
S'd'
asg39
I67
sS'.thisRepN'
p2024
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2025
I248
sS'.thisN'
p2026
I248
sS'.thisIndex'
p2027
g44
(g46
S'C\x00\x00\x00'
tRp2028
sg15
(lp2029
S'd'
asg17
S'Y'
sg14
I5
sa(dp2030
g16
(lp2031
S'k'
asg39
I326
sS'.thisRepN'
p2032
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2033
I249
sS'.thisN'
p2034
I249
sS'.thisIndex'
p2035
g44
(g46
S'F\x01\x00\x00'
tRp2036
sg15
(lp2037
S'k'
asg17
S'Y'
sg14
I5
sa(dp2038
g16
(lp2039
S'k'
asg39
I425
sS'.thisRepN'
p2040
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2041
I250
sS'.thisN'
p2042
I250
sS'.thisIndex'
p2043
g44
(g46
S'\xa9\x01\x00\x00'
tRp2044
sg15
(lp2045
S'k'
asg17
S'Y'
sg14
I6
sa(dp2046
g16
(lp2047
S'd'
asg39
I212
sS'.thisRepN'
p2048
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2049
I251
sS'.thisN'
p2050
I251
sS'.thisIndex'
p2051
g44
(g46
S'\xd4\x00\x00\x00'
tRp2052
sg15
(lp2053
S'd'
asg17
S'Y'
sg14
I6
sa(dp2054
g16
(lp2055
S'k'
asg39
I531
sS'.thisRepN'
p2056
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2057
I252
sS'.thisN'
p2058
I252
sS'.thisIndex'
p2059
g44
(g46
S'\x13\x02\x00\x00'
tRp2060
sg15
(lp2061
S'k'
asg17
S'Y'
sg14
I6
sa(dp2062
g16
(lp2063
S'd'
asg39
I21
sS'.thisRepN'
p2064
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2065
I253
sS'.thisN'
p2066
I253
sS'.thisIndex'
p2067
g44
(g46
S'\x15\x00\x00\x00'
tRp2068
sg15
(lp2069
S'd'
asg17
S'Y'
sg14
I6
sa(dp2070
g16
(lp2071
S'd'
asg39
I56
sS'.thisRepN'
p2072
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2073
I254
sS'.thisN'
p2074
I254
sS'.thisIndex'
p2075
g44
(g46
S'8\x00\x00\x00'
tRp2076
sg15
(lp2077
S'd'
asg17
S'Y'
sg14
I6
sa(dp2078
g16
(lp2079
S'd'
asg39
I289
sS'.thisRepN'
p2080
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2081
I255
sS'.thisN'
p2082
I255
sS'.thisIndex'
p2083
g44
(g46
S'!\x01\x00\x00'
tRp2084
sg15
(lp2085
S'k'
asg17
S'N'
sg14
I6
sa(dp2086
g16
(lp2087
S'k'
asg39
I585
sS'.thisRepN'
p2088
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2089
I256
sS'.thisN'
p2090
I256
sS'.thisIndex'
p2091
g44
(g46
S'I\x02\x00\x00'
tRp2092
sg15
(lp2093
S'k'
asg17
S'Y'
sg14
I6
sa(dp2094
g16
(lp2095
S'd'
asg39
I153
sS'.thisRepN'
p2096
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2097
I257
sS'.thisN'
p2098
I257
sS'.thisIndex'
p2099
g44
(g46
S'\x99\x00\x00\x00'
tRp2100
sg15
(lp2101
S'd'
asg17
S'Y'
sg14
I6
sa(dp2102
g16
(lp2103
S'd'
asg39
I29
sS'.thisRepN'
p2104
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2105
I258
sS'.thisN'
p2106
I258
sS'.thisIndex'
p2107
g44
(g46
S'\x1d\x00\x00\x00'
tRp2108
sg15
(lp2109
S'd'
asg17
S'Y'
sg14
I6
sa(dp2110
g16
(lp2111
S'd'
asg39
I3
sS'.thisRepN'
p2112
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2113
I259
sS'.thisN'
p2114
I259
sS'.thisIndex'
p2115
g44
(g46
S'\x03\x00\x00\x00'
tRp2116
sg15
(lp2117
S'd'
asg17
S'Y'
sg14
I6
sa(dp2118
g16
(lp2119
S'd'
asg39
I16
sS'.thisRepN'
p2120
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2121
I260
sS'.thisN'
p2122
I260
sS'.thisIndex'
p2123
g44
(g46
S'\x10\x00\x00\x00'
tRp2124
sg15
(lp2125
S'd'
asg17
S'Y'
sg14
I6
sa(dp2126
g16
(lp2127
S'd'
asg39
I204
sS'.thisRepN'
p2128
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2129
I261
sS'.thisN'
p2130
I261
sS'.thisIndex'
p2131
g44
(g46
S'\xcc\x00\x00\x00'
tRp2132
sg15
(lp2133
S'd'
asg17
S'Y'
sg14
I6
sa(dp2134
g16
(lp2135
S'd'
asg39
I171
sS'.thisRepN'
p2136
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2137
I262
sS'.thisN'
p2138
I262
sS'.thisIndex'
p2139
g44
(g46
S'\xab\x00\x00\x00'
tRp2140
sg15
(lp2141
S'd'
asg17
S'Y'
sg14
I6
sa(dp2142
g16
(lp2143
S'k'
asg39
I423
sS'.thisRepN'
p2144
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2145
I263
sS'.thisN'
p2146
I263
sS'.thisIndex'
p2147
g44
(g46
S'\xa7\x01\x00\x00'
tRp2148
sg15
(lp2149
S'k'
asg17
S'Y'
sg14
I6
sa(dp2150
g16
(lp2151
S'k'
asg39
I543
sS'.thisRepN'
p2152
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2153
I264
sS'.thisN'
p2154
I264
sS'.thisIndex'
p2155
g44
(g46
S'\x1f\x02\x00\x00'
tRp2156
sg15
(lp2157
S'k'
asg17
S'Y'
sg14
I6
sa(dp2158
g16
(lp2159
S'k'
asg39
I571
sS'.thisRepN'
p2160
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2161
I265
sS'.thisN'
p2162
I265
sS'.thisIndex'
p2163
g44
(g46
S';\x02\x00\x00'
tRp2164
sg15
(lp2165
S'k'
asg17
S'Y'
sg14
I6
sa(dp2166
g16
(lp2167
S'k'
asg39
I548
sS'.thisRepN'
p2168
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2169
I266
sS'.thisN'
p2170
I266
sS'.thisIndex'
p2171
g44
(g46
S'$\x02\x00\x00'
tRp2172
sg15
(lp2173
S'k'
asg17
S'Y'
sg14
I6
sa(dp2174
g16
(lp2175
S'd'
asg39
I93
sS'.thisRepN'
p2176
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2177
I267
sS'.thisN'
p2178
I267
sS'.thisIndex'
p2179
g44
(g46
S']\x00\x00\x00'
tRp2180
sg15
(lp2181
S'd'
asg17
S'Y'
sg14
I6
sa(dp2182
g16
(lp2183
S'k'
asg39
I470
sS'.thisRepN'
p2184
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2185
I268
sS'.thisN'
p2186
I268
sS'.thisIndex'
p2187
g44
(g46
S'\xd6\x01\x00\x00'
tRp2188
sg15
(lp2189
S'k'
asg17
S'Y'
sg14
I6
sa(dp2190
g16
(lp2191
S'k'
asg39
I419
sS'.thisRepN'
p2192
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2193
I269
sS'.thisN'
p2194
I269
sS'.thisIndex'
p2195
g44
(g46
S'\xa3\x01\x00\x00'
tRp2196
sg15
(lp2197
S'k'
asg17
S'Y'
sg14
I6
sa(dp2198
g16
(lp2199
S'k'
asg39
I464
sS'.thisRepN'
p2200
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2201
I270
sS'.thisN'
p2202
I270
sS'.thisIndex'
p2203
g44
(g46
S'\xd0\x01\x00\x00'
tRp2204
sg15
(lp2205
S'k'
asg17
S'Y'
sg14
I6
sa(dp2206
g16
(lp2207
S'd'
asg39
I174
sS'.thisRepN'
p2208
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2209
I271
sS'.thisN'
p2210
I271
sS'.thisIndex'
p2211
g44
(g46
S'\xae\x00\x00\x00'
tRp2212
sg15
(lp2213
S'd'
asg17
S'Y'
sg14
I6
sa(dp2214
g16
(lp2215
S'd'
asg39
I65
sS'.thisRepN'
p2216
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2217
I272
sS'.thisN'
p2218
I272
sS'.thisIndex'
p2219
g44
(g46
S'A\x00\x00\x00'
tRp2220
sg15
(lp2221
S'd'
asg17
S'Y'
sg14
I6
sa(dp2222
g16
(lp2223
S'k'
asg39
I505
sS'.thisRepN'
p2224
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2225
I273
sS'.thisN'
p2226
I273
sS'.thisIndex'
p2227
g44
(g46
S'\xf9\x01\x00\x00'
tRp2228
sg15
(lp2229
S'd'
asg17
S'N'
sg14
I6
sa(dp2230
g16
(lp2231
S'k'
asg39
I589
sS'.thisRepN'
p2232
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2233
I274
sS'.thisN'
p2234
I274
sS'.thisIndex'
p2235
g44
(g46
S'M\x02\x00\x00'
tRp2236
sg15
(lp2237
S'k'
asg17
S'Y'
sg14
I6
sa(dp2238
g16
(lp2239
S'd'
asg39
I44
sS'.thisRepN'
p2240
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2241
I275
sS'.thisN'
p2242
I275
sS'.thisIndex'
p2243
g44
(g46
S',\x00\x00\x00'
tRp2244
sg15
(lp2245
S'd'
asg17
S'Y'
sg14
I6
sa(dp2246
g16
(lp2247
S'd'
asg39
I146
sS'.thisRepN'
p2248
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2249
I276
sS'.thisN'
p2250
I276
sS'.thisIndex'
p2251
g44
(g46
S'\x92\x00\x00\x00'
tRp2252
sg15
(lp2253
S'd'
asg17
S'Y'
sg14
I6
sa(dp2254
g16
(lp2255
S'd'
asg39
I233
sS'.thisRepN'
p2256
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2257
I277
sS'.thisN'
p2258
I277
sS'.thisIndex'
p2259
g44
(g46
S'\xe9\x00\x00\x00'
tRp2260
sg15
(lp2261
S'k'
asg17
S'N'
sg14
I6
sa(dp2262
g16
(lp2263
S'k'
asg39
I468
sS'.thisRepN'
p2264
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2265
I278
sS'.thisN'
p2266
I278
sS'.thisIndex'
p2267
g44
(g46
S'\xd4\x01\x00\x00'
tRp2268
sg15
(lp2269
S'k'
asg17
S'Y'
sg14
I6
sa(dp2270
g16
(lp2271
S'd'
asg39
I96
sS'.thisRepN'
p2272
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2273
I279
sS'.thisN'
p2274
I279
sS'.thisIndex'
p2275
g44
(g46
S'`\x00\x00\x00'
tRp2276
sg15
(lp2277
S'd'
asg17
S'Y'
sg14
I6
sa(dp2278
g16
(lp2279
S'k'
asg39
I369
sS'.thisRepN'
p2280
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2281
I280
sS'.thisN'
p2282
I280
sS'.thisIndex'
p2283
g44
(g46
S'q\x01\x00\x00'
tRp2284
sg15
(lp2285
S'k'
asg17
S'Y'
sg14
I6
sa(dp2286
g16
(lp2287
S'k'
asg39
I359
sS'.thisRepN'
p2288
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2289
I281
sS'.thisN'
p2290
I281
sS'.thisIndex'
p2291
g44
(g46
S'g\x01\x00\x00'
tRp2292
sg15
(lp2293
S'k'
asg17
S'Y'
sg14
I6
sa(dp2294
g16
(lp2295
S'k'
asg39
I458
sS'.thisRepN'
p2296
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2297
I282
sS'.thisN'
p2298
I282
sS'.thisIndex'
p2299
g44
(g46
S'\xca\x01\x00\x00'
tRp2300
sg15
(lp2301
S'k'
asg17
S'Y'
sg14
I6
sa(dp2302
g16
(lp2303
S'd'
asg39
I5
sS'.thisRepN'
p2304
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2305
I283
sS'.thisN'
p2306
I283
sS'.thisIndex'
p2307
g44
(g46
S'\x05\x00\x00\x00'
tRp2308
sg15
(lp2309
S'k'
asg17
S'N'
sg14
I6
sa(dp2310
g16
(lp2311
S'k'
asg39
I331
sS'.thisRepN'
p2312
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2313
I284
sS'.thisN'
p2314
I284
sS'.thisIndex'
p2315
g44
(g46
S'K\x01\x00\x00'
tRp2316
sg15
(lp2317
S'k'
asg17
S'Y'
sg14
I6
sa(dp2318
g16
(lp2319
S'd'
asg39
I138
sS'.thisRepN'
p2320
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2321
I285
sS'.thisN'
p2322
I285
sS'.thisIndex'
p2323
g44
(g46
S'\x8a\x00\x00\x00'
tRp2324
sg15
(lp2325
S'k'
asg17
S'N'
sg14
I6
sa(dp2326
g16
(lp2327
S'k'
asg39
I579
sS'.thisRepN'
p2328
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2329
I286
sS'.thisN'
p2330
I286
sS'.thisIndex'
p2331
g44
(g46
S'C\x02\x00\x00'
tRp2332
sg15
(lp2333
S'd'
asg17
S'N'
sg14
I6
sa(dp2334
g16
(lp2335
S'd'
asg39
I1
sS'.thisRepN'
p2336
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2337
I287
sS'.thisN'
p2338
I287
sS'.thisIndex'
p2339
g44
(g46
S'\x01\x00\x00\x00'
tRp2340
sg15
(lp2341
S'd'
asg17
S'Y'
sg14
I6
sa(dp2342
g16
(lp2343
S'd'
asg39
I57
sS'.thisRepN'
p2344
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2345
I288
sS'.thisN'
p2346
I288
sS'.thisIndex'
p2347
g44
(g46
S'9\x00\x00\x00'
tRp2348
sg15
(lp2349
S'd'
asg17
S'Y'
sg14
I6
sa(dp2350
g16
(lp2351
S'd'
asg39
I2
sS'.thisRepN'
p2352
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2353
I289
sS'.thisN'
p2354
I289
sS'.thisIndex'
p2355
g44
(g46
S'\x02\x00\x00\x00'
tRp2356
sg15
(lp2357
S'k'
asg17
S'N'
sg14
I6
sa(dp2358
g16
(lp2359
S'd'
asg39
I215
sS'.thisRepN'
p2360
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2361
I290
sS'.thisN'
p2362
I290
sS'.thisIndex'
p2363
g44
(g46
S'\xd7\x00\x00\x00'
tRp2364
sg15
(lp2365
S'd'
asg17
S'Y'
sg14
I6
sa(dp2366
g16
(lp2367
S'k'
asg39
I366
sS'.thisRepN'
p2368
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2369
I291
sS'.thisN'
p2370
I291
sS'.thisIndex'
p2371
g44
(g46
S'n\x01\x00\x00'
tRp2372
sg15
(lp2373
S'k'
asg17
S'Y'
sg14
I6
sa(dp2374
g16
(lp2375
S'd'
asg39
I222
sS'.thisRepN'
p2376
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2377
I292
sS'.thisN'
p2378
I292
sS'.thisIndex'
p2379
g44
(g46
S'\xde\x00\x00\x00'
tRp2380
sg15
(lp2381
S'k'
asg17
S'N'
sg14
I6
sa(dp2382
g16
(lp2383
S'd'
asg39
I224
sS'.thisRepN'
p2384
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2385
I293
sS'.thisN'
p2386
I293
sS'.thisIndex'
p2387
g44
(g46
S'\xe0\x00\x00\x00'
tRp2388
sg15
(lp2389
S'd'
asg17
S'Y'
sg14
I6
sa(dp2390
g16
(lp2391
S'k'
asg39
I519
sS'.thisRepN'
p2392
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2393
I294
sS'.thisN'
p2394
I294
sS'.thisIndex'
p2395
g44
(g46
S'\x07\x02\x00\x00'
tRp2396
sg15
(lp2397
S'k'
asg17
S'Y'
sg14
I6
sa(dp2398
g16
(lp2399
S'k'
asg39
I517
sS'.thisRepN'
p2400
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2401
I295
sS'.thisN'
p2402
I295
sS'.thisIndex'
p2403
g44
(g46
S'\x05\x02\x00\x00'
tRp2404
sg15
(lp2405
S'k'
asg17
S'Y'
sg14
I6
sa(dp2406
g16
(lp2407
S'k'
asg39
I554
sS'.thisRepN'
p2408
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2409
I296
sS'.thisN'
p2410
I296
sS'.thisIndex'
p2411
g44
(g46
S'*\x02\x00\x00'
tRp2412
sg15
(lp2413
S'k'
asg17
S'Y'
sg14
I6
sa(dp2414
g16
(lp2415
S'k'
asg39
I435
sS'.thisRepN'
p2416
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2417
I297
sS'.thisN'
p2418
I297
sS'.thisIndex'
p2419
g44
(g46
S'\xb3\x01\x00\x00'
tRp2420
sg15
(lp2421
S'k'
asg17
S'Y'
sg14
I6
sa(dp2422
g16
(lp2423
S'k'
asg39
I350
sS'.thisRepN'
p2424
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2425
I298
sS'.thisN'
p2426
I298
sS'.thisIndex'
p2427
g44
(g46
S'^\x01\x00\x00'
tRp2428
sg15
(lp2429
S'k'
asg17
S'Y'
sg14
I6
sa(dp2430
g16
(lp2431
S'k'
asg39
I406
sS'.thisRepN'
p2432
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2433
I299
sS'.thisN'
p2434
I299
sS'.thisIndex'
p2435
g44
(g46
S'\x96\x01\x00\x00'
tRp2436
sg15
(lp2437
S'k'
asg17
S'Y'
sg14
I6
sa(dp2438
g16
(lp2439
S'k'
asg39
I563
sS'.thisRepN'
p2440
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2441
I300
sS'.thisN'
p2442
I300
sS'.thisIndex'
p2443
g44
(g46
S'3\x02\x00\x00'
tRp2444
sg15
(lp2445
S'k'
asg17
S'Y'
sg14
I7
sa(dp2446
g16
(lp2447
S'k'
asg39
I508
sS'.thisRepN'
p2448
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2449
I301
sS'.thisN'
p2450
I301
sS'.thisIndex'
p2451
g44
(g46
S'\xfc\x01\x00\x00'
tRp2452
sg15
(lp2453
S'k'
asg17
S'Y'
sg14
I7
sa(dp2454
g16
(lp2455
S'd'
asg39
I185
sS'.thisRepN'
p2456
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2457
I302
sS'.thisN'
p2458
I302
sS'.thisIndex'
p2459
g44
(g46
S'\xb9\x00\x00\x00'
tRp2460
sg15
(lp2461
S'd'
asg17
S'Y'
sg14
I7
sa(dp2462
g16
(lp2463
S'k'
asg39
I564
sS'.thisRepN'
p2464
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2465
I303
sS'.thisN'
p2466
I303
sS'.thisIndex'
p2467
g44
(g46
S'4\x02\x00\x00'
tRp2468
sg15
(lp2469
S'd'
asg17
S'N'
sg14
I7
sa(dp2470
g16
(lp2471
S'd'
asg39
I41
sS'.thisRepN'
p2472
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2473
I304
sS'.thisN'
p2474
I304
sS'.thisIndex'
p2475
g44
(g46
S')\x00\x00\x00'
tRp2476
sg15
(lp2477
S'd'
asg17
S'Y'
sg14
I7
sa(dp2478
g16
(lp2479
S'd'
asg39
I169
sS'.thisRepN'
p2480
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2481
I305
sS'.thisN'
p2482
I305
sS'.thisIndex'
p2483
g44
(g46
S'\xa9\x00\x00\x00'
tRp2484
sg15
(lp2485
S'd'
asg17
S'Y'
sg14
I7
sa(dp2486
g16
(lp2487
S'k'
asg39
I598
sS'.thisRepN'
p2488
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2489
I306
sS'.thisN'
p2490
I306
sS'.thisIndex'
p2491
g44
(g46
S'V\x02\x00\x00'
tRp2492
sg15
(lp2493
S'k'
asg17
S'Y'
sg14
I7
sa(dp2494
g16
(lp2495
S'k'
asg39
I347
sS'.thisRepN'
p2496
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2497
I307
sS'.thisN'
p2498
I307
sS'.thisIndex'
p2499
g44
(g46
S'[\x01\x00\x00'
tRp2500
sg15
(lp2501
S'k'
asg17
S'Y'
sg14
I7
sa(dp2502
g16
(lp2503
S'd'
asg39
I271
sS'.thisRepN'
p2504
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2505
I308
sS'.thisN'
p2506
I308
sS'.thisIndex'
p2507
g44
(g46
S'\x0f\x01\x00\x00'
tRp2508
sg15
(lp2509
S'd'
asg17
S'Y'
sg14
I7
sa(dp2510
g16
(lp2511
S'k'
asg39
I514
sS'.thisRepN'
p2512
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2513
I309
sS'.thisN'
p2514
I309
sS'.thisIndex'
p2515
g44
(g46
S'\x02\x02\x00\x00'
tRp2516
sg15
(lp2517
S'k'
asg17
S'Y'
sg14
I7
sa(dp2518
g16
(lp2519
S'k'
asg39
I403
sS'.thisRepN'
p2520
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2521
I310
sS'.thisN'
p2522
I310
sS'.thisIndex'
p2523
g44
(g46
S'\x93\x01\x00\x00'
tRp2524
sg15
(lp2525
S'd'
asg17
S'N'
sg14
I7
sa(dp2526
g16
(lp2527
S'd'
asg39
I282
sS'.thisRepN'
p2528
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2529
I311
sS'.thisN'
p2530
I311
sS'.thisIndex'
p2531
g44
(g46
S'\x1a\x01\x00\x00'
tRp2532
sg15
(lp2533
S'd'
asg17
S'Y'
sg14
I7
sa(dp2534
g16
(lp2535
S'd'
asg39
I257
sS'.thisRepN'
p2536
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2537
I312
sS'.thisN'
p2538
I312
sS'.thisIndex'
p2539
g44
(g46
S'\x01\x01\x00\x00'
tRp2540
sg15
(lp2541
S'd'
asg17
S'Y'
sg14
I7
sa(dp2542
g16
(lp2543
S'k'
asg39
I474
sS'.thisRepN'
p2544
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2545
I313
sS'.thisN'
p2546
I313
sS'.thisIndex'
p2547
g44
(g46
S'\xda\x01\x00\x00'
tRp2548
sg15
(lp2549
S'k'
asg17
S'Y'
sg14
I7
sa(dp2550
g16
(lp2551
S'd'
asg39
I83
sS'.thisRepN'
p2552
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2553
I314
sS'.thisN'
p2554
I314
sS'.thisIndex'
p2555
g44
(g46
S'S\x00\x00\x00'
tRp2556
sg15
(lp2557
S'k'
asg17
S'N'
sg14
I7
sa(dp2558
g16
(lp2559
S'd'
asg39
I184
sS'.thisRepN'
p2560
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2561
I315
sS'.thisN'
p2562
I315
sS'.thisIndex'
p2563
g44
(g46
S'\xb8\x00\x00\x00'
tRp2564
sg15
(lp2565
S'k'
asg17
S'N'
sg14
I7
sa(dp2566
g16
(lp2567
S'k'
asg39
I509
sS'.thisRepN'
p2568
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2569
I316
sS'.thisN'
p2570
I316
sS'.thisIndex'
p2571
g44
(g46
S'\xfd\x01\x00\x00'
tRp2572
sg15
(lp2573
S'k'
asg17
S'Y'
sg14
I7
sa(dp2574
g16
(lp2575
S'k'
asg39
I314
sS'.thisRepN'
p2576
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2577
I317
sS'.thisN'
p2578
I317
sS'.thisIndex'
p2579
g44
(g46
S':\x01\x00\x00'
tRp2580
sg15
(lp2581
S'k'
asg17
S'Y'
sg14
I7
sa(dp2582
g16
(lp2583
S'k'
asg39
I308
sS'.thisRepN'
p2584
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2585
I318
sS'.thisN'
p2586
I318
sS'.thisIndex'
p2587
g44
(g46
S'4\x01\x00\x00'
tRp2588
sg15
(lp2589
S'k'
asg17
S'Y'
sg14
I7
sa(dp2590
g16
(lp2591
S'k'
asg39
I426
sS'.thisRepN'
p2592
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2593
I319
sS'.thisN'
p2594
I319
sS'.thisIndex'
p2595
g44
(g46
S'\xaa\x01\x00\x00'
tRp2596
sg15
(lp2597
S'k'
asg17
S'Y'
sg14
I7
sa(dp2598
g16
(lp2599
S'd'
asg39
I22
sS'.thisRepN'
p2600
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2601
I320
sS'.thisN'
p2602
I320
sS'.thisIndex'
p2603
g44
(g46
S'\x16\x00\x00\x00'
tRp2604
sg15
(lp2605
S'd'
asg17
S'Y'
sg14
I7
sa(dp2606
g16
(lp2607
S'k'
asg39
I352
sS'.thisRepN'
p2608
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2609
I321
sS'.thisN'
p2610
I321
sS'.thisIndex'
p2611
g44
(g46
S'`\x01\x00\x00'
tRp2612
sg15
(lp2613
S'k'
asg17
S'Y'
sg14
I7
sa(dp2614
g16
(lp2615
S'k'
asg39
I416
sS'.thisRepN'
p2616
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2617
I322
sS'.thisN'
p2618
I322
sS'.thisIndex'
p2619
g44
(g46
S'\xa0\x01\x00\x00'
tRp2620
sg15
(lp2621
S'k'
asg17
S'Y'
sg14
I7
sa(dp2622
g16
(lp2623
S'd'
asg39
I292
sS'.thisRepN'
p2624
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2625
I323
sS'.thisN'
p2626
I323
sS'.thisIndex'
p2627
g44
(g46
S'$\x01\x00\x00'
tRp2628
sg15
(lp2629
S'k'
asg17
S'N'
sg14
I7
sa(dp2630
g16
(lp2631
S'd'
asg39
I149
sS'.thisRepN'
p2632
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2633
I324
sS'.thisN'
p2634
I324
sS'.thisIndex'
p2635
g44
(g46
S'\x95\x00\x00\x00'
tRp2636
sg15
(lp2637
S'k'
asg17
S'N'
sg14
I7
sa(dp2638
g16
(lp2639
S'k'
asg39
I313
sS'.thisRepN'
p2640
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2641
I325
sS'.thisN'
p2642
I325
sS'.thisIndex'
p2643
g44
(g46
S'9\x01\x00\x00'
tRp2644
sg15
(lp2645
S'k'
asg17
S'Y'
sg14
I7
sa(dp2646
g16
(lp2647
S'd'
asg39
I160
sS'.thisRepN'
p2648
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2649
I326
sS'.thisN'
p2650
I326
sS'.thisIndex'
p2651
g44
(g46
S'\xa0\x00\x00\x00'
tRp2652
sg15
(lp2653
S'd'
asg17
S'Y'
sg14
I7
sa(dp2654
g16
(lp2655
S'd'
asg39
I261
sS'.thisRepN'
p2656
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2657
I327
sS'.thisN'
p2658
I327
sS'.thisIndex'
p2659
g44
(g46
S'\x05\x01\x00\x00'
tRp2660
sg15
(lp2661
S'd'
asg17
S'Y'
sg14
I7
sa(dp2662
g16
(lp2663
S'd'
asg39
I80
sS'.thisRepN'
p2664
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2665
I328
sS'.thisN'
p2666
I328
sS'.thisIndex'
p2667
g44
(g46
S'P\x00\x00\x00'
tRp2668
sg15
(lp2669
S'd'
asg17
S'Y'
sg14
I7
sa(dp2670
g16
(lp2671
S'k'
asg39
I320
sS'.thisRepN'
p2672
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2673
I329
sS'.thisN'
p2674
I329
sS'.thisIndex'
p2675
g44
(g46
S'@\x01\x00\x00'
tRp2676
sg15
(lp2677
S'k'
asg17
S'Y'
sg14
I7
sa(dp2678
g16
(lp2679
S'd'
asg39
I125
sS'.thisRepN'
p2680
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2681
I330
sS'.thisN'
p2682
I330
sS'.thisIndex'
p2683
g44
(g46
S'}\x00\x00\x00'
tRp2684
sg15
(lp2685
S'd'
asg17
S'Y'
sg14
I7
sa(dp2686
g16
(lp2687
S'd'
asg39
I122
sS'.thisRepN'
p2688
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2689
I331
sS'.thisN'
p2690
I331
sS'.thisIndex'
p2691
g44
(g46
S'z\x00\x00\x00'
tRp2692
sg15
(lp2693
S'k'
asg17
S'N'
sg14
I7
sa(dp2694
g16
(lp2695
S'k'
asg39
I562
sS'.thisRepN'
p2696
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2697
I332
sS'.thisN'
p2698
I332
sS'.thisIndex'
p2699
g44
(g46
S'2\x02\x00\x00'
tRp2700
sg15
(lp2701
S'k'
asg17
S'Y'
sg14
I7
sa(dp2702
g16
(lp2703
S'd'
asg39
I128
sS'.thisRepN'
p2704
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2705
I333
sS'.thisN'
p2706
I333
sS'.thisIndex'
p2707
g44
(g46
S'\x80\x00\x00\x00'
tRp2708
sg15
(lp2709
S'd'
asg17
S'Y'
sg14
I7
sa(dp2710
g16
(lp2711
S'k'
asg39
I328
sS'.thisRepN'
p2712
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2713
I334
sS'.thisN'
p2714
I334
sS'.thisIndex'
p2715
g44
(g46
S'H\x01\x00\x00'
tRp2716
sg15
(lp2717
S'k'
asg17
S'Y'
sg14
I7
sa(dp2718
g16
(lp2719
S'k'
asg39
I461
sS'.thisRepN'
p2720
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2721
I335
sS'.thisN'
p2722
I335
sS'.thisIndex'
p2723
g44
(g46
S'\xcd\x01\x00\x00'
tRp2724
sg15
(lp2725
S'k'
asg17
S'Y'
sg14
I7
sa(dp2726
g16
(lp2727
S'k'
asg39
I484
sS'.thisRepN'
p2728
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2729
I336
sS'.thisN'
p2730
I336
sS'.thisIndex'
p2731
g44
(g46
S'\xe4\x01\x00\x00'
tRp2732
sg15
(lp2733
S'k'
asg17
S'Y'
sg14
I7
sa(dp2734
g16
(lp2735
S'd'
asg39
I162
sS'.thisRepN'
p2736
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2737
I337
sS'.thisN'
p2738
I337
sS'.thisIndex'
p2739
g44
(g46
S'\xa2\x00\x00\x00'
tRp2740
sg15
(lp2741
S'd'
asg17
S'Y'
sg14
I7
sa(dp2742
g16
(lp2743
S'k'
asg39
I388
sS'.thisRepN'
p2744
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2745
I338
sS'.thisN'
p2746
I338
sS'.thisIndex'
p2747
g44
(g46
S'\x84\x01\x00\x00'
tRp2748
sg15
(lp2749
S'k'
asg17
S'Y'
sg14
I7
sa(dp2750
g16
(lp2751
S'k'
asg39
I518
sS'.thisRepN'
p2752
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2753
I339
sS'.thisN'
p2754
I339
sS'.thisIndex'
p2755
g44
(g46
S'\x06\x02\x00\x00'
tRp2756
sg15
(lp2757
S'k'
asg17
S'Y'
sg14
I7
sa(dp2758
g16
(lp2759
S'd'
asg39
I46
sS'.thisRepN'
p2760
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2761
I340
sS'.thisN'
p2762
I340
sS'.thisIndex'
p2763
g44
(g46
S'.\x00\x00\x00'
tRp2764
sg15
(lp2765
S'd'
asg17
S'Y'
sg14
I7
sa(dp2766
g16
(lp2767
S'k'
asg39
I339
sS'.thisRepN'
p2768
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2769
I341
sS'.thisN'
p2770
I341
sS'.thisIndex'
p2771
g44
(g46
S'S\x01\x00\x00'
tRp2772
sg15
(lp2773
S'k'
asg17
S'Y'
sg14
I7
sa(dp2774
g16
(lp2775
S'k'
asg39
I591
sS'.thisRepN'
p2776
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2777
I342
sS'.thisN'
p2778
I342
sS'.thisIndex'
p2779
g44
(g46
S'O\x02\x00\x00'
tRp2780
sg15
(lp2781
S'k'
asg17
S'Y'
sg14
I7
sa(dp2782
g16
(lp2783
S'd'
asg39
I220
sS'.thisRepN'
p2784
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2785
I343
sS'.thisN'
p2786
I343
sS'.thisIndex'
p2787
g44
(g46
S'\xdc\x00\x00\x00'
tRp2788
sg15
(lp2789
S'd'
asg17
S'Y'
sg14
I7
sa(dp2790
g16
(lp2791
S'd'
asg39
I226
sS'.thisRepN'
p2792
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2793
I344
sS'.thisN'
p2794
I344
sS'.thisIndex'
p2795
g44
(g46
S'\xe2\x00\x00\x00'
tRp2796
sg15
(lp2797
S'd'
asg17
S'Y'
sg14
I7
sa(dp2798
g16
(lp2799
S'k'
asg39
I377
sS'.thisRepN'
p2800
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2801
I345
sS'.thisN'
p2802
I345
sS'.thisIndex'
p2803
g44
(g46
S'y\x01\x00\x00'
tRp2804
sg15
(lp2805
S'k'
asg17
S'Y'
sg14
I7
sa(dp2806
g16
(lp2807
S'k'
asg39
I577
sS'.thisRepN'
p2808
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2809
I346
sS'.thisN'
p2810
I346
sS'.thisIndex'
p2811
g44
(g46
S'A\x02\x00\x00'
tRp2812
sg15
(lp2813
S'd'
asg17
S'N'
sg14
I7
sa(dp2814
g16
(lp2815
S'd'
asg39
I274
sS'.thisRepN'
p2816
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2817
I347
sS'.thisN'
p2818
I347
sS'.thisIndex'
p2819
g44
(g46
S'\x12\x01\x00\x00'
tRp2820
sg15
(lp2821
S'd'
asg17
S'Y'
sg14
I7
sa(dp2822
g16
(lp2823
S'k'
asg39
I319
sS'.thisRepN'
p2824
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2825
I348
sS'.thisN'
p2826
I348
sS'.thisIndex'
p2827
g44
(g46
S'?\x01\x00\x00'
tRp2828
sg15
(lp2829
S'k'
asg17
S'Y'
sg14
I7
sa(dp2830
g16
(lp2831
S'd'
asg39
I133
sS'.thisRepN'
p2832
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2833
I349
sS'.thisN'
p2834
I349
sS'.thisIndex'
p2835
g44
(g46
S'\x85\x00\x00\x00'
tRp2836
sg15
(lp2837
S'd'
asg17
S'Y'
sg14
I7
sa(dp2838
g16
(lp2839
S'k'
asg39
I578
sS'.thisRepN'
p2840
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2841
I350
sS'.thisN'
p2842
I350
sS'.thisIndex'
p2843
g44
(g46
S'B\x02\x00\x00'
tRp2844
sg15
(lp2845
S'k'
asg17
S'Y'
sg14
I8
sa(dp2846
g16
(lp2847
S'd'
asg39
I229
sS'.thisRepN'
p2848
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2849
I351
sS'.thisN'
p2850
I351
sS'.thisIndex'
p2851
g44
(g46
S'\xe5\x00\x00\x00'
tRp2852
sg15
(lp2853
S'd'
asg17
S'Y'
sg14
I8
sa(dp2854
g16
(lp2855
S'k'
asg39
I312
sS'.thisRepN'
p2856
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2857
I352
sS'.thisN'
p2858
I352
sS'.thisIndex'
p2859
g44
(g46
S'8\x01\x00\x00'
tRp2860
sg15
(lp2861
S'k'
asg17
S'Y'
sg14
I8
sa(dp2862
g16
(lp2863
S'd'
asg39
I168
sS'.thisRepN'
p2864
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2865
I353
sS'.thisN'
p2866
I353
sS'.thisIndex'
p2867
g44
(g46
S'\xa8\x00\x00\x00'
tRp2868
sg15
(lp2869
S'd'
asg17
S'Y'
sg14
I8
sa(dp2870
g16
(lp2871
S'd'
asg39
I142
sS'.thisRepN'
p2872
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2873
I354
sS'.thisN'
p2874
I354
sS'.thisIndex'
p2875
g44
(g46
S'\x8e\x00\x00\x00'
tRp2876
sg15
(lp2877
S'd'
asg17
S'Y'
sg14
I8
sa(dp2878
g16
(lp2879
S'd'
asg39
I248
sS'.thisRepN'
p2880
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2881
I355
sS'.thisN'
p2882
I355
sS'.thisIndex'
p2883
g44
(g46
S'\xf8\x00\x00\x00'
tRp2884
sg15
(lp2885
S'd'
asg17
S'Y'
sg14
I8
sa(dp2886
g16
(lp2887
S'd'
asg39
I246
sS'.thisRepN'
p2888
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2889
I356
sS'.thisN'
p2890
I356
sS'.thisIndex'
p2891
g44
(g46
S'\xf6\x00\x00\x00'
tRp2892
sg15
(lp2893
S'd'
asg17
S'Y'
sg14
I8
sa(dp2894
g16
(lp2895
S'k'
asg39
I305
sS'.thisRepN'
p2896
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2897
I357
sS'.thisN'
p2898
I357
sS'.thisIndex'
p2899
g44
(g46
S'1\x01\x00\x00'
tRp2900
sg15
(lp2901
S'k'
asg17
S'Y'
sg14
I8
sa(dp2902
g16
(lp2903
S'k'
asg39
I341
sS'.thisRepN'
p2904
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2905
I358
sS'.thisN'
p2906
I358
sS'.thisIndex'
p2907
g44
(g46
S'U\x01\x00\x00'
tRp2908
sg15
(lp2909
S'd'
asg17
S'N'
sg14
I8
sa(dp2910
g16
(lp2911
S'd'
asg39
I52
sS'.thisRepN'
p2912
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2913
I359
sS'.thisN'
p2914
I359
sS'.thisIndex'
p2915
g44
(g46
S'4\x00\x00\x00'
tRp2916
sg15
(lp2917
S'd'
asg17
S'Y'
sg14
I8
sa(dp2918
g16
(lp2919
S'k'
asg39
I357
sS'.thisRepN'
p2920
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2921
I360
sS'.thisN'
p2922
I360
sS'.thisIndex'
p2923
g44
(g46
S'e\x01\x00\x00'
tRp2924
sg15
(lp2925
S'k'
asg17
S'Y'
sg14
I8
sa(dp2926
g16
(lp2927
S'k'
asg39
I491
sS'.thisRepN'
p2928
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2929
I361
sS'.thisN'
p2930
I361
sS'.thisIndex'
p2931
g44
(g46
S'\xeb\x01\x00\x00'
tRp2932
sg15
(lp2933
S'k'
asg17
S'Y'
sg14
I8
sa(dp2934
g16
(lp2935
S'd'
asg39
I156
sS'.thisRepN'
p2936
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2937
I362
sS'.thisN'
p2938
I362
sS'.thisIndex'
p2939
g44
(g46
S'\x9c\x00\x00\x00'
tRp2940
sg15
(lp2941
S'd'
asg17
S'Y'
sg14
I8
sa(dp2942
g16
(lp2943
S'd'
asg39
I103
sS'.thisRepN'
p2944
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2945
I363
sS'.thisN'
p2946
I363
sS'.thisIndex'
p2947
g44
(g46
S'g\x00\x00\x00'
tRp2948
sg15
(lp2949
S'd'
asg17
S'Y'
sg14
I8
sa(dp2950
g16
(lp2951
S'k'
asg39
I576
sS'.thisRepN'
p2952
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2953
I364
sS'.thisN'
p2954
I364
sS'.thisIndex'
p2955
g44
(g46
S'@\x02\x00\x00'
tRp2956
sg15
(lp2957
S'k'
asg17
S'Y'
sg14
I8
sa(dp2958
g16
(lp2959
S'd'
asg39
I219
sS'.thisRepN'
p2960
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2961
I365
sS'.thisN'
p2962
I365
sS'.thisIndex'
p2963
g44
(g46
S'\xdb\x00\x00\x00'
tRp2964
sg15
(lp2965
S'd'
asg17
S'Y'
sg14
I8
sa(dp2966
g16
(lp2967
S'd'
asg39
I202
sS'.thisRepN'
p2968
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2969
I366
sS'.thisN'
p2970
I366
sS'.thisIndex'
p2971
g44
(g46
S'\xca\x00\x00\x00'
tRp2972
sg15
(lp2973
S'd'
asg17
S'Y'
sg14
I8
sa(dp2974
g16
(lp2975
S'k'
asg39
I415
sS'.thisRepN'
p2976
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2977
I367
sS'.thisN'
p2978
I367
sS'.thisIndex'
p2979
g44
(g46
S'\x9f\x01\x00\x00'
tRp2980
sg15
(lp2981
S'k'
asg17
S'Y'
sg14
I8
sa(dp2982
g16
(lp2983
S'd'
asg39
I187
sS'.thisRepN'
p2984
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2985
I368
sS'.thisN'
p2986
I368
sS'.thisIndex'
p2987
g44
(g46
S'\xbb\x00\x00\x00'
tRp2988
sg15
(lp2989
S'd'
asg17
S'Y'
sg14
I8
sa(dp2990
g16
(lp2991
S'k'
asg39
I596
sS'.thisRepN'
p2992
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2993
I369
sS'.thisN'
p2994
I369
sS'.thisIndex'
p2995
g44
(g46
S'T\x02\x00\x00'
tRp2996
sg15
(lp2997
S'k'
asg17
S'Y'
sg14
I8
sa(dp2998
g16
(lp2999
S'd'
asg39
I189
sS'.thisRepN'
p3000
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3001
I370
sS'.thisN'
p3002
I370
sS'.thisIndex'
p3003
g44
(g46
S'\xbd\x00\x00\x00'
tRp3004
sg15
(lp3005
S'k'
asg17
S'N'
sg14
I8
sa(dp3006
g16
(lp3007
S'k'
asg39
I424
sS'.thisRepN'
p3008
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3009
I371
sS'.thisN'
p3010
I371
sS'.thisIndex'
p3011
g44
(g46
S'\xa8\x01\x00\x00'
tRp3012
sg15
(lp3013
S'k'
asg17
S'Y'
sg14
I8
sa(dp3014
g16
(lp3015
S'k'
asg39
I454
sS'.thisRepN'
p3016
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3017
I372
sS'.thisN'
p3018
I372
sS'.thisIndex'
p3019
g44
(g46
S'\xc6\x01\x00\x00'
tRp3020
sg15
(lp3021
S'k'
asg17
S'Y'
sg14
I8
sa(dp3022
g16
(lp3023
S'k'
asg39
I432
sS'.thisRepN'
p3024
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3025
I373
sS'.thisN'
p3026
I373
sS'.thisIndex'
p3027
g44
(g46
S'\xb0\x01\x00\x00'
tRp3028
sg15
(lp3029
S'k'
asg17
S'Y'
sg14
I8
sa(dp3030
g16
(lp3031
S'd'
asg39
I91
sS'.thisRepN'
p3032
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3033
I374
sS'.thisN'
p3034
I374
sS'.thisIndex'
p3035
g44
(g46
S'[\x00\x00\x00'
tRp3036
sg15
(lp3037
S'd'
asg17
S'Y'
sg14
I8
sa(dp3038
g16
(lp3039
S'd'
asg39
I232
sS'.thisRepN'
p3040
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3041
I375
sS'.thisN'
p3042
I375
sS'.thisIndex'
p3043
g44
(g46
S'\xe8\x00\x00\x00'
tRp3044
sg15
(lp3045
S'd'
asg17
S'Y'
sg14
I8
sa(dp3046
g16
(lp3047
S'k'
asg39
I324
sS'.thisRepN'
p3048
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3049
I376
sS'.thisN'
p3050
I376
sS'.thisIndex'
p3051
g44
(g46
S'D\x01\x00\x00'
tRp3052
sg15
(lp3053
S'k'
asg17
S'Y'
sg14
I8
sa(dp3054
g16
(lp3055
S'd'
asg39
I183
sS'.thisRepN'
p3056
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3057
I377
sS'.thisN'
p3058
I377
sS'.thisIndex'
p3059
g44
(g46
S'\xb7\x00\x00\x00'
tRp3060
sg15
(lp3061
S'd'
asg17
S'Y'
sg14
I8
sa(dp3062
g16
(lp3063
S'k'
asg39
I382
sS'.thisRepN'
p3064
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3065
I378
sS'.thisN'
p3066
I378
sS'.thisIndex'
p3067
g44
(g46
S'~\x01\x00\x00'
tRp3068
sg15
(lp3069
S'k'
asg17
S'Y'
sg14
I8
sa(dp3070
g16
(lp3071
S'k'
asg39
I496
sS'.thisRepN'
p3072
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3073
I379
sS'.thisN'
p3074
I379
sS'.thisIndex'
p3075
g44
(g46
S'\xf0\x01\x00\x00'
tRp3076
sg15
(lp3077
S'k'
asg17
S'Y'
sg14
I8
sa(dp3078
g16
(lp3079
S'k'
asg39
I337
sS'.thisRepN'
p3080
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3081
I380
sS'.thisN'
p3082
I380
sS'.thisIndex'
p3083
g44
(g46
S'Q\x01\x00\x00'
tRp3084
sg15
(lp3085
S'k'
asg17
S'Y'
sg14
I8
sa(dp3086
g16
(lp3087
S'd'
asg39
I50
sS'.thisRepN'
p3088
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3089
I381
sS'.thisN'
p3090
I381
sS'.thisIndex'
p3091
g44
(g46
S'2\x00\x00\x00'
tRp3092
sg15
(lp3093
S'd'
asg17
S'Y'
sg14
I8
sa(dp3094
g16
(lp3095
S'k'
asg39
I367
sS'.thisRepN'
p3096
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3097
I382
sS'.thisN'
p3098
I382
sS'.thisIndex'
p3099
g44
(g46
S'o\x01\x00\x00'
tRp3100
sg15
(lp3101
S'k'
asg17
S'Y'
sg14
I8
sa(dp3102
g16
(lp3103
S'd'
asg39
I273
sS'.thisRepN'
p3104
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3105
I383
sS'.thisN'
p3106
I383
sS'.thisIndex'
p3107
g44
(g46
S'\x11\x01\x00\x00'
tRp3108
sg15
(lp3109
S'k'
asg17
S'N'
sg14
I8
sa(dp3110
g16
(lp3111
S'k'
asg39
I511
sS'.thisRepN'
p3112
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3113
I384
sS'.thisN'
p3114
I384
sS'.thisIndex'
p3115
g44
(g46
S'\xff\x01\x00\x00'
tRp3116
sg15
(lp3117
S'k'
asg17
S'Y'
sg14
I8
sa(dp3118
g16
(lp3119
S'k'
asg39
I473
sS'.thisRepN'
p3120
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3121
I385
sS'.thisN'
p3122
I385
sS'.thisIndex'
p3123
g44
(g46
S'\xd9\x01\x00\x00'
tRp3124
sg15
(lp3125
S'k'
asg17
S'Y'
sg14
I8
sa(dp3126
g16
(lp3127
S'd'
asg39
I49
sS'.thisRepN'
p3128
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3129
I386
sS'.thisN'
p3130
I386
sS'.thisIndex'
p3131
g44
(g46
S'1\x00\x00\x00'
tRp3132
sg15
(lp3133
S'k'
asg17
S'N'
sg14
I8
sa(dp3134
g16
(lp3135
S'd'
asg39
I105
sS'.thisRepN'
p3136
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3137
I387
sS'.thisN'
p3138
I387
sS'.thisIndex'
p3139
g44
(g46
S'i\x00\x00\x00'
tRp3140
sg15
(lp3141
S'd'
asg17
S'Y'
sg14
I8
sa(dp3142
g16
(lp3143
S'k'
asg39
I304
sS'.thisRepN'
p3144
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3145
I388
sS'.thisN'
p3146
I388
sS'.thisIndex'
p3147
g44
(g46
S'0\x01\x00\x00'
tRp3148
sg15
(lp3149
S'k'
asg17
S'Y'
sg14
I8
sa(dp3150
g16
(lp3151
S'k'
asg39
I499
sS'.thisRepN'
p3152
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3153
I389
sS'.thisN'
p3154
I389
sS'.thisIndex'
p3155
g44
(g46
S'\xf3\x01\x00\x00'
tRp3156
sg15
(lp3157
S'k'
asg17
S'Y'
sg14
I8
sa(dp3158
g16
(lp3159
S'd'
asg39
I18
sS'.thisRepN'
p3160
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3161
I390
sS'.thisN'
p3162
I390
sS'.thisIndex'
p3163
g44
(g46
S'\x12\x00\x00\x00'
tRp3164
sg15
(lp3165
S'd'
asg17
S'Y'
sg14
I8
sa(dp3166
g16
(lp3167
S'd'
asg39
I190
sS'.thisRepN'
p3168
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3169
I391
sS'.thisN'
p3170
I391
sS'.thisIndex'
p3171
g44
(g46
S'\xbe\x00\x00\x00'
tRp3172
sg15
(lp3173
S'k'
asg17
S'N'
sg14
I8
sa(dp3174
g16
(lp3175
S'd'
asg39
I206
sS'.thisRepN'
p3176
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3177
I392
sS'.thisN'
p3178
I392
sS'.thisIndex'
p3179
g44
(g46
S'\xce\x00\x00\x00'
tRp3180
sg15
(lp3181
S'd'
asg17
S'Y'
sg14
I8
sa(dp3182
g16
(lp3183
S'k'
asg39
I397
sS'.thisRepN'
p3184
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3185
I393
sS'.thisN'
p3186
I393
sS'.thisIndex'
p3187
g44
(g46
S'\x8d\x01\x00\x00'
tRp3188
sg15
(lp3189
S'k'
asg17
S'Y'
sg14
I8
sa(dp3190
g16
(lp3191
S'd'
asg39
I193
sS'.thisRepN'
p3192
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3193
I394
sS'.thisN'
p3194
I394
sS'.thisIndex'
p3195
g44
(g46
S'\xc1\x00\x00\x00'
tRp3196
sg15
(lp3197
S'd'
asg17
S'Y'
sg14
I8
sa(dp3198
g16
(lp3199
S'd'
asg39
I166
sS'.thisRepN'
p3200
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3201
I395
sS'.thisN'
p3202
I395
sS'.thisIndex'
p3203
g44
(g46
S'\xa6\x00\x00\x00'
tRp3204
sg15
(lp3205
S'd'
asg17
S'Y'
sg14
I8
sa(dp3206
g16
(lp3207
S'd'
asg39
I132
sS'.thisRepN'
p3208
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3209
I396
sS'.thisN'
p3210
I396
sS'.thisIndex'
p3211
g44
(g46
S'\x84\x00\x00\x00'
tRp3212
sg15
(lp3213
S'd'
asg17
S'Y'
sg14
I8
sa(dp3214
g16
(lp3215
S'k'
asg39
I438
sS'.thisRepN'
p3216
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3217
I397
sS'.thisN'
p3218
I397
sS'.thisIndex'
p3219
g44
(g46
S'\xb6\x01\x00\x00'
tRp3220
sg15
(lp3221
S'k'
asg17
S'Y'
sg14
I8
sa(dp3222
g16
(lp3223
S'd'
asg39
I64
sS'.thisRepN'
p3224
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3225
I398
sS'.thisN'
p3226
I398
sS'.thisIndex'
p3227
g44
(g46
S'@\x00\x00\x00'
tRp3228
sg15
(lp3229
S'd'
asg17
S'Y'
sg14
I8
sa(dp3230
g16
(lp3231
S'd'
asg39
I40
sS'.thisRepN'
p3232
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3233
I399
sS'.thisN'
p3234
I399
sS'.thisIndex'
p3235
g44
(g46
S'(\x00\x00\x00'
tRp3236
sg15
(lp3237
S'k'
asg17
S'N'
sg14
I8
sa(dp3238
g16
(lp3239
S'k'
asg39
I535
sS'.thisRepN'
p3240
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3241
I400
sS'.thisN'
p3242
I400
sS'.thisIndex'
p3243
g44
(g46
S'\x17\x02\x00\x00'
tRp3244
sg15
(lp3245
S'k'
asg17
S'Y'
sg14
I9
sa(dp3246
g16
(lp3247
S'k'
asg39
I558
sS'.thisRepN'
p3248
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3249
I401
sS'.thisN'
p3250
I401
sS'.thisIndex'
p3251
g44
(g46
S'.\x02\x00\x00'
tRp3252
sg15
(lp3253
S'k'
asg17
S'Y'
sg14
I9
sa(dp3254
g16
(lp3255
S'k'
asg39
I599
sS'.thisRepN'
p3256
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3257
I402
sS'.thisN'
p3258
I402
sS'.thisIndex'
p3259
g44
(g46
S'W\x02\x00\x00'
tRp3260
sg15
(lp3261
S'k'
asg17
S'Y'
sg14
I9
sa(dp3262
g16
(lp3263
S'd'
asg39
I38
sS'.thisRepN'
p3264
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3265
I403
sS'.thisN'
p3266
I403
sS'.thisIndex'
p3267
g44
(g46
S'&\x00\x00\x00'
tRp3268
sg15
(lp3269
S'd'
asg17
S'Y'
sg14
I9
sa(dp3270
g16
(lp3271
S'd'
asg39
I235
sS'.thisRepN'
p3272
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3273
I404
sS'.thisN'
p3274
I404
sS'.thisIndex'
p3275
g44
(g46
S'\xeb\x00\x00\x00'
tRp3276
sg15
(lp3277
S'd'
asg17
S'Y'
sg14
I9
sa(dp3278
g16
(lp3279
S'd'
asg39
I165
sS'.thisRepN'
p3280
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3281
I405
sS'.thisN'
p3282
I405
sS'.thisIndex'
p3283
g44
(g46
S'\xa5\x00\x00\x00'
tRp3284
sg15
(lp3285
S'd'
asg17
S'Y'
sg14
I9
sa(dp3286
g16
(lp3287
S'k'
asg39
I551
sS'.thisRepN'
p3288
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3289
I406
sS'.thisN'
p3290
I406
sS'.thisIndex'
p3291
g44
(g46
S"'\x02\x00\x00"
tRp3292
sg15
(lp3293
S'k'
asg17
S'Y'
sg14
I9
sa(dp3294
g16
(lp3295
S'k'
asg39
I318
sS'.thisRepN'
p3296
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3297
I407
sS'.thisN'
p3298
I407
sS'.thisIndex'
p3299
g44
(g46
S'>\x01\x00\x00'
tRp3300
sg15
(lp3301
S'k'
asg17
S'Y'
sg14
I9
sa(dp3302
g16
(lp3303
S'k'
asg39
I399
sS'.thisRepN'
p3304
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3305
I408
sS'.thisN'
p3306
I408
sS'.thisIndex'
p3307
g44
(g46
S'\x8f\x01\x00\x00'
tRp3308
sg15
(lp3309
S'k'
asg17
S'Y'
sg14
I9
sa(dp3310
g16
(lp3311
S'k'
asg39
I539
sS'.thisRepN'
p3312
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3313
I409
sS'.thisN'
p3314
I409
sS'.thisIndex'
p3315
g44
(g46
S'\x1b\x02\x00\x00'
tRp3316
sg15
(lp3317
S'k'
asg17
S'Y'
sg14
I9
sa(dp3318
g16
(lp3319
S'd'
asg39
I75
sS'.thisRepN'
p3320
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3321
I410
sS'.thisN'
p3322
I410
sS'.thisIndex'
p3323
g44
(g46
S'K\x00\x00\x00'
tRp3324
sg15
(lp3325
S'd'
asg17
S'Y'
sg14
I9
sa(dp3326
g16
(lp3327
S'k'
asg39
I378
sS'.thisRepN'
p3328
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3329
I411
sS'.thisN'
p3330
I411
sS'.thisIndex'
p3331
g44
(g46
S'z\x01\x00\x00'
tRp3332
sg15
(lp3333
S'k'
asg17
S'Y'
sg14
I9
sa(dp3334
g16
(lp3335
S'd'
asg39
I254
sS'.thisRepN'
p3336
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3337
I412
sS'.thisN'
p3338
I412
sS'.thisIndex'
p3339
g44
(g46
S'\xfe\x00\x00\x00'
tRp3340
sg15
(lp3341
S'd'
asg17
S'Y'
sg14
I9
sa(dp3342
g16
(lp3343
S'k'
asg39
I466
sS'.thisRepN'
p3344
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3345
I413
sS'.thisN'
p3346
I413
sS'.thisIndex'
p3347
g44
(g46
S'\xd2\x01\x00\x00'
tRp3348
sg15
(lp3349
S'k'
asg17
S'Y'
sg14
I9
sa(dp3350
g16
(lp3351
S'k'
asg39
I532
sS'.thisRepN'
p3352
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3353
I414
sS'.thisN'
p3354
I414
sS'.thisIndex'
p3355
g44
(g46
S'\x14\x02\x00\x00'
tRp3356
sg15
(lp3357
S'k'
asg17
S'Y'
sg14
I9
sa(dp3358
g16
(lp3359
S'k'
asg39
I462
sS'.thisRepN'
p3360
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3361
I415
sS'.thisN'
p3362
I415
sS'.thisIndex'
p3363
g44
(g46
S'\xce\x01\x00\x00'
tRp3364
sg15
(lp3365
S'k'
asg17
S'Y'
sg14
I9
sa(dp3366
g16
(lp3367
S'd'
asg39
I281
sS'.thisRepN'
p3368
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3369
I416
sS'.thisN'
p3370
I416
sS'.thisIndex'
p3371
g44
(g46
S'\x19\x01\x00\x00'
tRp3372
sg15
(lp3373
S'd'
asg17
S'Y'
sg14
I9
sa(dp3374
g16
(lp3375
S'd'
asg39
I113
sS'.thisRepN'
p3376
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3377
I417
sS'.thisN'
p3378
I417
sS'.thisIndex'
p3379
g44
(g46
S'q\x00\x00\x00'
tRp3380
sg15
(lp3381
S'd'
asg17
S'Y'
sg14
I9
sa(dp3382
g16
(lp3383
S'k'
asg39
I358
sS'.thisRepN'
p3384
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3385
I418
sS'.thisN'
p3386
I418
sS'.thisIndex'
p3387
g44
(g46
S'f\x01\x00\x00'
tRp3388
sg15
(lp3389
S'k'
asg17
S'Y'
sg14
I9
sa(dp3390
g16
(lp3391
S'k'
asg39
I375
sS'.thisRepN'
p3392
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3393
I419
sS'.thisN'
p3394
I419
sS'.thisIndex'
p3395
g44
(g46
S'w\x01\x00\x00'
tRp3396
sg15
(lp3397
S'k'
asg17
S'Y'
sg14
I9
sa(dp3398
g16
(lp3399
S'k'
asg39
I443
sS'.thisRepN'
p3400
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3401
I420
sS'.thisN'
p3402
I420
sS'.thisIndex'
p3403
g44
(g46
S'\xbb\x01\x00\x00'
tRp3404
sg15
(lp3405
S'd'
asg17
S'N'
sg14
I9
sa(dp3406
g16
(lp3407
S'd'
asg39
I60
sS'.thisRepN'
p3408
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3409
I421
sS'.thisN'
p3410
I421
sS'.thisIndex'
p3411
g44
(g46
S'<\x00\x00\x00'
tRp3412
sg15
(lp3413
S'd'
asg17
S'Y'
sg14
I9
sa(dp3414
g16
(lp3415
S'k'
asg39
I371
sS'.thisRepN'
p3416
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3417
I422
sS'.thisN'
p3418
I422
sS'.thisIndex'
p3419
g44
(g46
S's\x01\x00\x00'
tRp3420
sg15
(lp3421
S'k'
asg17
S'Y'
sg14
I9
sa(dp3422
g16
(lp3423
S'd'
asg39
I72
sS'.thisRepN'
p3424
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3425
I423
sS'.thisN'
p3426
I423
sS'.thisIndex'
p3427
g44
(g46
S'H\x00\x00\x00'
tRp3428
sg15
(lp3429
S'd'
asg17
S'Y'
sg14
I9
sa(dp3430
g16
(lp3431
S'k'
asg39
I383
sS'.thisRepN'
p3432
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3433
I424
sS'.thisN'
p3434
I424
sS'.thisIndex'
p3435
g44
(g46
S'\x7f\x01\x00\x00'
tRp3436
sg15
(lp3437
S'k'
asg17
S'Y'
sg14
I9
sa(dp3438
g16
(lp3439
S'k'
asg39
I565
sS'.thisRepN'
p3440
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3441
I425
sS'.thisN'
p3442
I425
sS'.thisIndex'
p3443
g44
(g46
S'5\x02\x00\x00'
tRp3444
sg15
(lp3445
S'k'
asg17
S'Y'
sg14
I9
sa(dp3446
g16
(lp3447
S'd'
asg39
I94
sS'.thisRepN'
p3448
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3449
I426
sS'.thisN'
p3450
I426
sS'.thisIndex'
p3451
g44
(g46
S'^\x00\x00\x00'
tRp3452
sg15
(lp3453
S'd'
asg17
S'Y'
sg14
I9
sa(dp3454
g16
(lp3455
S'k'
asg39
I354
sS'.thisRepN'
p3456
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3457
I427
sS'.thisN'
p3458
I427
sS'.thisIndex'
p3459
g44
(g46
S'b\x01\x00\x00'
tRp3460
sg15
(lp3461
S'k'
asg17
S'Y'
sg14
I9
sa(dp3462
g16
(lp3463
S'd'
asg39
I85
sS'.thisRepN'
p3464
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3465
I428
sS'.thisN'
p3466
I428
sS'.thisIndex'
p3467
g44
(g46
S'U\x00\x00\x00'
tRp3468
sg15
(lp3469
S'k'
asg17
S'N'
sg14
I9
sa(dp3470
g16
(lp3471
S'k'
asg39
I370
sS'.thisRepN'
p3472
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3473
I429
sS'.thisN'
p3474
I429
sS'.thisIndex'
p3475
g44
(g46
S'r\x01\x00\x00'
tRp3476
sg15
(lp3477
S'k'
asg17
S'Y'
sg14
I9
sa(dp3478
g16
(lp3479
S'k'
asg39
I391
sS'.thisRepN'
p3480
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3481
I430
sS'.thisN'
p3482
I430
sS'.thisIndex'
p3483
g44
(g46
S'\x87\x01\x00\x00'
tRp3484
sg15
(lp3485
S'k'
asg17
S'Y'
sg14
I9
sa(dp3486
g16
(lp3487
S'k'
asg39
I303
sS'.thisRepN'
p3488
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3489
I431
sS'.thisN'
p3490
I431
sS'.thisIndex'
p3491
g44
(g46
S'/\x01\x00\x00'
tRp3492
sg15
(lp3493
S'k'
asg17
S'Y'
sg14
I9
sa(dp3494
g16
(lp3495
S'd'
asg39
I200
sS'.thisRepN'
p3496
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3497
I432
sS'.thisN'
p3498
I432
sS'.thisIndex'
p3499
g44
(g46
S'\xc8\x00\x00\x00'
tRp3500
sg15
(lp3501
S'd'
asg17
S'Y'
sg14
I9
sa(dp3502
g16
(lp3503
S'k'
asg39
I301
sS'.thisRepN'
p3504
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3505
I433
sS'.thisN'
p3506
I433
sS'.thisIndex'
p3507
g44
(g46
S'-\x01\x00\x00'
tRp3508
sg15
(lp3509
S'k'
asg17
S'Y'
sg14
I9
sa(dp3510
g16
(lp3511
S'd'
asg39
I197
sS'.thisRepN'
p3512
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3513
I434
sS'.thisN'
p3514
I434
sS'.thisIndex'
p3515
g44
(g46
S'\xc5\x00\x00\x00'
tRp3516
sg15
(lp3517
S'd'
asg17
S'Y'
sg14
I9
sa(dp3518
g16
(lp3519
S'd'
asg39
I294
sS'.thisRepN'
p3520
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3521
I435
sS'.thisN'
p3522
I435
sS'.thisIndex'
p3523
g44
(g46
S'&\x01\x00\x00'
tRp3524
sg15
(lp3525
S'd'
asg17
S'Y'
sg14
I9
sa(dp3526
g16
(lp3527
S'k'
asg39
I417
sS'.thisRepN'
p3528
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3529
I436
sS'.thisN'
p3530
I436
sS'.thisIndex'
p3531
g44
(g46
S'\xa1\x01\x00\x00'
tRp3532
sg15
(lp3533
S'd'
asg17
S'N'
sg14
I9
sa(dp3534
g16
(lp3535
S'd'
asg39
I11
sS'.thisRepN'
p3536
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3537
I437
sS'.thisN'
p3538
I437
sS'.thisIndex'
p3539
g44
(g46
S'\x0b\x00\x00\x00'
tRp3540
sg15
(lp3541
S'd'
asg17
S'Y'
sg14
I9
sa(dp3542
g16
(lp3543
S'd'
asg39
I30
sS'.thisRepN'
p3544
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3545
I438
sS'.thisN'
p3546
I438
sS'.thisIndex'
p3547
g44
(g46
S'\x1e\x00\x00\x00'
tRp3548
sg15
(lp3549
S'd'
asg17
S'Y'
sg14
I9
sa(dp3550
g16
(lp3551
S'k'
asg39
I348
sS'.thisRepN'
p3552
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3553
I439
sS'.thisN'
p3554
I439
sS'.thisIndex'
p3555
g44
(g46
S'\\\x01\x00\x00'
tRp3556
sg15
(lp3557
S'k'
asg17
S'Y'
sg14
I9
sa(dp3558
g16
(lp3559
S'k'
asg39
I460
sS'.thisRepN'
p3560
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3561
I440
sS'.thisN'
p3562
I440
sS'.thisIndex'
p3563
g44
(g46
S'\xcc\x01\x00\x00'
tRp3564
sg15
(lp3565
S'k'
asg17
S'Y'
sg14
I9
sa(dp3566
g16
(lp3567
S'k'
asg39
I310
sS'.thisRepN'
p3568
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3569
I441
sS'.thisN'
p3570
I441
sS'.thisIndex'
p3571
g44
(g46
S'6\x01\x00\x00'
tRp3572
sg15
(lp3573
S'k'
asg17
S'Y'
sg14
I9
sa(dp3574
g16
(lp3575
S'd'
asg39
I278
sS'.thisRepN'
p3576
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3577
I442
sS'.thisN'
p3578
I442
sS'.thisIndex'
p3579
g44
(g46
S'\x16\x01\x00\x00'
tRp3580
sg15
(lp3581
S'd'
asg17
S'Y'
sg14
I9
sa(dp3582
g16
(lp3583
S'k'
asg39
I465
sS'.thisRepN'
p3584
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3585
I443
sS'.thisN'
p3586
I443
sS'.thisIndex'
p3587
g44
(g46
S'\xd1\x01\x00\x00'
tRp3588
sg15
(lp3589
S'k'
asg17
S'Y'
sg14
I9
sa(dp3590
g16
(lp3591
S'd'
asg39
I24
sS'.thisRepN'
p3592
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3593
I444
sS'.thisN'
p3594
I444
sS'.thisIndex'
p3595
g44
(g46
S'\x18\x00\x00\x00'
tRp3596
sg15
(lp3597
S'd'
asg17
S'Y'
sg14
I9
sa(dp3598
g16
(lp3599
S'k'
asg39
I477
sS'.thisRepN'
p3600
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3601
I445
sS'.thisN'
p3602
I445
sS'.thisIndex'
p3603
g44
(g46
S'\xdd\x01\x00\x00'
tRp3604
sg15
(lp3605
S'd'
asg17
S'N'
sg14
I9
sa(dp3606
g16
(lp3607
S'k'
asg39
I560
sS'.thisRepN'
p3608
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3609
I446
sS'.thisN'
p3610
I446
sS'.thisIndex'
p3611
g44
(g46
S'0\x02\x00\x00'
tRp3612
sg15
(lp3613
S'k'
asg17
S'Y'
sg14
I9
sa(dp3614
g16
(lp3615
S'k'
asg39
I488
sS'.thisRepN'
p3616
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3617
I447
sS'.thisN'
p3618
I447
sS'.thisIndex'
p3619
g44
(g46
S'\xe8\x01\x00\x00'
tRp3620
sg15
(lp3621
S'k'
asg17
S'Y'
sg14
I9
sa(dp3622
g16
(lp3623
S'k'
asg39
I401
sS'.thisRepN'
p3624
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3625
I448
sS'.thisN'
p3626
I448
sS'.thisIndex'
p3627
g44
(g46
S'\x91\x01\x00\x00'
tRp3628
sg15
(lp3629
S'k'
asg17
S'Y'
sg14
I9
sa(dp3630
g16
(lp3631
S'k'
asg39
I445
sS'.thisRepN'
p3632
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3633
I449
sS'.thisN'
p3634
I449
sS'.thisIndex'
p3635
g44
(g46
S'\xbd\x01\x00\x00'
tRp3636
sg15
(lp3637
S'k'
asg17
S'Y'
sg14
I9
sa(dp3638
g16
(lp3639
S'd'
asg39
I181
sS'.thisRepN'
p3640
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3641
I450
sS'.thisN'
p3642
I450
sS'.thisIndex'
p3643
g44
(g46
S'\xb5\x00\x00\x00'
tRp3644
sg15
(lp3645
S'k'
asg17
S'N'
sg14
I10
sa(dp3646
g16
(lp3647
S'd'
asg39
I260
sS'.thisRepN'
p3648
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3649
I451
sS'.thisN'
p3650
I451
sS'.thisIndex'
p3651
g44
(g46
S'\x04\x01\x00\x00'
tRp3652
sg15
(lp3653
S'd'
asg17
S'Y'
sg14
I10
sa(dp3654
g16
(lp3655
S'd'
asg39
I255
sS'.thisRepN'
p3656
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3657
I452
sS'.thisN'
p3658
I452
sS'.thisIndex'
p3659
g44
(g46
S'\xff\x00\x00\x00'
tRp3660
sg15
(lp3661
S'k'
asg17
S'N'
sg14
I10
sa(dp3662
g16
(lp3663
S'd'
asg39
I25
sS'.thisRepN'
p3664
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3665
I453
sS'.thisN'
p3666
I453
sS'.thisIndex'
p3667
g44
(g46
S'\x19\x00\x00\x00'
tRp3668
sg15
(lp3669
S'd'
asg17
S'Y'
sg14
I10
sa(dp3670
g16
(lp3671
S'k'
asg39
I544
sS'.thisRepN'
p3672
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3673
I454
sS'.thisN'
p3674
I454
sS'.thisIndex'
p3675
g44
(g46
S' \x02\x00\x00'
tRp3676
sg15
(lp3677
S'k'
asg17
S'Y'
sg14
I10
sa(dp3678
g16
(lp3679
S'd'
asg39
I129
sS'.thisRepN'
p3680
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3681
I455
sS'.thisN'
p3682
I455
sS'.thisIndex'
p3683
g44
(g46
S'\x81\x00\x00\x00'
tRp3684
sg15
(lp3685
S'd'
asg17
S'Y'
sg14
I10
sa(dp3686
g16
(lp3687
S'k'
asg39
I418
sS'.thisRepN'
p3688
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3689
I456
sS'.thisN'
p3690
I456
sS'.thisIndex'
p3691
g44
(g46
S'\xa2\x01\x00\x00'
tRp3692
sg15
(lp3693
S'k'
asg17
S'Y'
sg14
I10
sa(dp3694
g16
(lp3695
S'k'
asg39
I398
sS'.thisRepN'
p3696
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3697
I457
sS'.thisN'
p3698
I457
sS'.thisIndex'
p3699
g44
(g46
S'\x8e\x01\x00\x00'
tRp3700
sg15
(lp3701
S'k'
asg17
S'Y'
sg14
I10
sa(dp3702
g16
(lp3703
S'd'
asg39
I214
sS'.thisRepN'
p3704
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3705
I458
sS'.thisN'
p3706
I458
sS'.thisIndex'
p3707
g44
(g46
S'\xd6\x00\x00\x00'
tRp3708
sg15
(lp3709
S'd'
asg17
S'Y'
sg14
I10
sa(dp3710
g16
(lp3711
S'k'
asg39
I476
sS'.thisRepN'
p3712
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3713
I459
sS'.thisN'
p3714
I459
sS'.thisIndex'
p3715
g44
(g46
S'\xdc\x01\x00\x00'
tRp3716
sg15
(lp3717
S'k'
asg17
S'Y'
sg14
I10
sa(dp3718
g16
(lp3719
S'k'
asg39
I356
sS'.thisRepN'
p3720
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3721
I460
sS'.thisN'
p3722
I460
sS'.thisIndex'
p3723
g44
(g46
S'd\x01\x00\x00'
tRp3724
sg15
(lp3725
S'k'
asg17
S'Y'
sg14
I10
sa(dp3726
g16
(lp3727
S'd'
asg39
I118
sS'.thisRepN'
p3728
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3729
I461
sS'.thisN'
p3730
I461
sS'.thisIndex'
p3731
g44
(g46
S'v\x00\x00\x00'
tRp3732
sg15
(lp3733
S'd'
asg17
S'Y'
sg14
I10
sa(dp3734
g16
(lp3735
S'd'
asg39
I264
sS'.thisRepN'
p3736
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3737
I462
sS'.thisN'
p3738
I462
sS'.thisIndex'
p3739
g44
(g46
S'\x08\x01\x00\x00'
tRp3740
sg15
(lp3741
S'd'
asg17
S'Y'
sg14
I10
sa(dp3742
g16
(lp3743
S'k'
asg39
I402
sS'.thisRepN'
p3744
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3745
I463
sS'.thisN'
p3746
I463
sS'.thisIndex'
p3747
g44
(g46
S'\x92\x01\x00\x00'
tRp3748
sg15
(lp3749
S'k'
asg17
S'Y'
sg14
I10
sa(dp3750
g16
(lp3751
S'k'
asg39
I362
sS'.thisRepN'
p3752
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3753
I464
sS'.thisN'
p3754
I464
sS'.thisIndex'
p3755
g44
(g46
S'j\x01\x00\x00'
tRp3756
sg15
(lp3757
S'k'
asg17
S'Y'
sg14
I10
sa(dp3758
g16
(lp3759
S'd'
asg39
I88
sS'.thisRepN'
p3760
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3761
I465
sS'.thisN'
p3762
I465
sS'.thisIndex'
p3763
g44
(g46
S'X\x00\x00\x00'
tRp3764
sg15
(lp3765
S'd'
asg17
S'Y'
sg14
I10
sa(dp3766
g16
(lp3767
S'k'
asg39
I413
sS'.thisRepN'
p3768
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3769
I466
sS'.thisN'
p3770
I466
sS'.thisIndex'
p3771
g44
(g46
S'\x9d\x01\x00\x00'
tRp3772
sg15
(lp3773
S'k'
asg17
S'Y'
sg14
I10
sa(dp3774
g16
(lp3775
S'k'
asg39
I407
sS'.thisRepN'
p3776
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3777
I467
sS'.thisN'
p3778
I467
sS'.thisIndex'
p3779
g44
(g46
S'\x97\x01\x00\x00'
tRp3780
sg15
(lp3781
S'k'
asg17
S'Y'
sg14
I10
sa(dp3782
g16
(lp3783
S'k'
asg39
I594
sS'.thisRepN'
p3784
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3785
I468
sS'.thisN'
p3786
I468
sS'.thisIndex'
p3787
g44
(g46
S'R\x02\x00\x00'
tRp3788
sg15
(lp3789
S'k'
asg17
S'Y'
sg14
I10
sa(dp3790
g16
(lp3791
S'd'
asg39
I109
sS'.thisRepN'
p3792
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3793
I469
sS'.thisN'
p3794
I469
sS'.thisIndex'
p3795
g44
(g46
S'm\x00\x00\x00'
tRp3796
sg15
(lp3797
S'd'
asg17
S'Y'
sg14
I10
sa(dp3798
g16
(lp3799
S'd'
asg39
I225
sS'.thisRepN'
p3800
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3801
I470
sS'.thisN'
p3802
I470
sS'.thisIndex'
p3803
g44
(g46
S'\xe1\x00\x00\x00'
tRp3804
sg15
(lp3805
S'd'
asg17
S'Y'
sg14
I10
sa(dp3806
g16
(lp3807
S'k'
asg39
I588
sS'.thisRepN'
p3808
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3809
I471
sS'.thisN'
p3810
I471
sS'.thisIndex'
p3811
g44
(g46
S'L\x02\x00\x00'
tRp3812
sg15
(lp3813
S'k'
asg17
S'Y'
sg14
I10
sa(dp3814
g16
(lp3815
S'd'
asg39
I272
sS'.thisRepN'
p3816
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3817
I472
sS'.thisN'
p3818
I472
sS'.thisIndex'
p3819
g44
(g46
S'\x10\x01\x00\x00'
tRp3820
sg15
(lp3821
S'd'
asg17
S'Y'
sg14
I10
sa(dp3822
g16
(lp3823
S'd'
asg39
I150
sS'.thisRepN'
p3824
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3825
I473
sS'.thisN'
p3826
I473
sS'.thisIndex'
p3827
g44
(g46
S'\x96\x00\x00\x00'
tRp3828
sg15
(lp3829
S'd'
asg17
S'Y'
sg14
I10
sa(dp3830
g16
(lp3831
S'd'
asg39
I259
sS'.thisRepN'
p3832
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3833
I474
sS'.thisN'
p3834
I474
sS'.thisIndex'
p3835
g44
(g46
S'\x03\x01\x00\x00'
tRp3836
sg15
(lp3837
S'd'
asg17
S'Y'
sg14
I10
sa(dp3838
g16
(lp3839
S'd'
asg39
I139
sS'.thisRepN'
p3840
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3841
I475
sS'.thisN'
p3842
I475
sS'.thisIndex'
p3843
g44
(g46
S'\x8b\x00\x00\x00'
tRp3844
sg15
(lp3845
S'd'
asg17
S'Y'
sg14
I10
sa(dp3846
g16
(lp3847
S'd'
asg39
I213
sS'.thisRepN'
p3848
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3849
I476
sS'.thisN'
p3850
I476
sS'.thisIndex'
p3851
g44
(g46
S'\xd5\x00\x00\x00'
tRp3852
sg15
(lp3853
S'd'
asg17
S'Y'
sg14
I10
sa(dp3854
g16
(lp3855
S'k'
asg39
I429
sS'.thisRepN'
p3856
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3857
I477
sS'.thisN'
p3858
I477
sS'.thisIndex'
p3859
g44
(g46
S'\xad\x01\x00\x00'
tRp3860
sg15
(lp3861
S'k'
asg17
S'Y'
sg14
I10
sa(dp3862
g16
(lp3863
S'd'
asg39
I100
sS'.thisRepN'
p3864
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3865
I478
sS'.thisN'
p3866
I478
sS'.thisIndex'
p3867
g44
(g46
S'd\x00\x00\x00'
tRp3868
sg15
(lp3869
S'd'
asg17
S'Y'
sg14
I10
sa(dp3870
g16
(lp3871
S'k'
asg39
I512
sS'.thisRepN'
p3872
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3873
I479
sS'.thisN'
p3874
I479
sS'.thisIndex'
p3875
g44
(g46
S'\x00\x02\x00\x00'
tRp3876
sg15
(lp3877
S'd'
asg17
S'N'
sg14
I10
sa(dp3878
g16
(lp3879
S'd'
asg39
I164
sS'.thisRepN'
p3880
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3881
I480
sS'.thisN'
p3882
I480
sS'.thisIndex'
p3883
g44
(g46
S'\xa4\x00\x00\x00'
tRp3884
sg15
(lp3885
S'd'
asg17
S'Y'
sg14
I10
sa(dp3886
g16
(lp3887
S'd'
asg39
I270
sS'.thisRepN'
p3888
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3889
I481
sS'.thisN'
p3890
I481
sS'.thisIndex'
p3891
g44
(g46
S'\x0e\x01\x00\x00'
tRp3892
sg15
(lp3893
S'd'
asg17
S'Y'
sg14
I10
sa(dp3894
g16
(lp3895
S'k'
asg39
I472
sS'.thisRepN'
p3896
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3897
I482
sS'.thisN'
p3898
I482
sS'.thisIndex'
p3899
g44
(g46
S'\xd8\x01\x00\x00'
tRp3900
sg15
(lp3901
S'k'
asg17
S'Y'
sg14
I10
sa(dp3902
g16
(lp3903
S'd'
asg39
I170
sS'.thisRepN'
p3904
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3905
I483
sS'.thisN'
p3906
I483
sS'.thisIndex'
p3907
g44
(g46
S'\xaa\x00\x00\x00'
tRp3908
sg15
(lp3909
S'd'
asg17
S'Y'
sg14
I10
sa(dp3910
g16
(lp3911
S'k'
asg39
I364
sS'.thisRepN'
p3912
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3913
I484
sS'.thisN'
p3914
I484
sS'.thisIndex'
p3915
g44
(g46
S'l\x01\x00\x00'
tRp3916
sg15
(lp3917
S'k'
asg17
S'Y'
sg14
I10
sa(dp3918
g16
(lp3919
S'd'
asg39
I240
sS'.thisRepN'
p3920
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3921
I485
sS'.thisN'
p3922
I485
sS'.thisIndex'
p3923
g44
(g46
S'\xf0\x00\x00\x00'
tRp3924
sg15
(lp3925
S'd'
asg17
S'Y'
sg14
I10
sa(dp3926
g16
(lp3927
S'd'
asg39
I6
sS'.thisRepN'
p3928
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3929
I486
sS'.thisN'
p3930
I486
sS'.thisIndex'
p3931
g44
(g46
S'\x06\x00\x00\x00'
tRp3932
sg15
(lp3933
S'd'
asg17
S'Y'
sg14
I10
sa(dp3934
g16
(lp3935
S'd'
asg39
I295
sS'.thisRepN'
p3936
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3937
I487
sS'.thisN'
p3938
I487
sS'.thisIndex'
p3939
g44
(g46
S"'\x01\x00\x00"
tRp3940
sg15
(lp3941
S'd'
asg17
S'Y'
sg14
I10
sa(dp3942
g16
(lp3943
S'd'
asg39
I199
sS'.thisRepN'
p3944
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3945
I488
sS'.thisN'
p3946
I488
sS'.thisIndex'
p3947
g44
(g46
S'\xc7\x00\x00\x00'
tRp3948
sg15
(lp3949
S'd'
asg17
S'Y'
sg14
I10
sa(dp3950
g16
(lp3951
S'k'
asg39
I503
sS'.thisRepN'
p3952
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3953
I489
sS'.thisN'
p3954
I489
sS'.thisIndex'
p3955
g44
(g46
S'\xf7\x01\x00\x00'
tRp3956
sg15
(lp3957
S'k'
asg17
S'Y'
sg14
I10
sa(dp3958
g16
(lp3959
S'd'
asg39
I87
sS'.thisRepN'
p3960
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3961
I490
sS'.thisN'
p3962
I490
sS'.thisIndex'
p3963
g44
(g46
S'W\x00\x00\x00'
tRp3964
sg15
(lp3965
S'd'
asg17
S'Y'
sg14
I10
sa(dp3966
g16
(lp3967
S'k'
asg39
I556
sS'.thisRepN'
p3968
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3969
I491
sS'.thisN'
p3970
I491
sS'.thisIndex'
p3971
g44
(g46
S',\x02\x00\x00'
tRp3972
sg15
(lp3973
S'k'
asg17
S'Y'
sg14
I10
sa(dp3974
g16
(lp3975
S'd'
asg39
I293
sS'.thisRepN'
p3976
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3977
I492
sS'.thisN'
p3978
I492
sS'.thisIndex'
p3979
g44
(g46
S'%\x01\x00\x00'
tRp3980
sg15
(lp3981
S'd'
asg17
S'Y'
sg14
I10
sa(dp3982
g16
(lp3983
S'k'
asg39
I492
sS'.thisRepN'
p3984
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3985
I493
sS'.thisN'
p3986
I493
sS'.thisIndex'
p3987
g44
(g46
S'\xec\x01\x00\x00'
tRp3988
sg15
(lp3989
S'k'
asg17
S'Y'
sg14
I10
sa(dp3990
g16
(lp3991
S'k'
asg39
I467
sS'.thisRepN'
p3992
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3993
I494
sS'.thisN'
p3994
I494
sS'.thisIndex'
p3995
g44
(g46
S'\xd3\x01\x00\x00'
tRp3996
sg15
(lp3997
S'd'
asg17
S'N'
sg14
I10
sa(dp3998
g16
(lp3999
S'd'
asg39
I32
sS'.thisRepN'
p4000
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p4001
I495
sS'.thisN'
p4002
I495
sS'.thisIndex'
p4003
g44
(g46
S' \x00\x00\x00'
tRp4004
sg15
(lp4005
S'd'
asg17
S'Y'
sg14
I10
sa(dp4006
g16
(lp4007
S'k'
asg39
I529
sS'.thisRepN'
p4008
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p4009
I496
sS'.thisN'
p4010
I496
sS'.thisIndex'
p4011
g44
(g46
S'\x11\x02\x00\x00'
tRp4012
sg15
(lp4013
S'k'
asg17
S'Y'
sg14
I10
sa(dp4014
g16
(lp4015
S'd'
asg39
I298
sS'.thisRepN'
p4016
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p4017
I497
sS'.thisN'
p4018
I497
sS'.thisIndex'
p4019
g44
(g46
S'*\x01\x00\x00'
tRp4020
sg15
(lp4021
S'd'
asg17
S'Y'
sg14
I10
sa(dp4022
g16
(lp4023
S'k'
asg39
I520
sS'.thisRepN'
p4024
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p4025
I498
sS'.thisN'
p4026
I498
sS'.thisIndex'
p4027
g44
(g46
S'\x08\x02\x00\x00'
tRp4028
sg15
(lp4029
S'k'
asg17
S'Y'
sg14
I10
sa(dp4030
g16
(lp4031
S'd'
asg39
I48
sS'.thisRepN'
p4032
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p4033
I499
sS'.thisN'
p4034
I499
sS'.thisIndex'
p4035
g44
(g46
S'0\x00\x00\x00'
tRp4036
sg15
(lp4037
S'd'
asg17
S'Y'
sg14
I10
sa(dp4038
g16
(lp4039
S'd'
asg39
I159
sS'.thisRepN'
p4040
I0
sg19
S'Y'
sg20
S'Y'
sg18
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4041
I500
sS'.thisN'
p4042
I500
sS'.thisIndex'
p4043
g44
(g46
S'\x9f\x00\x00\x00'
tRp4044
sg15
(lp4045
S'd'
asg17
S'N'
sg14
I11
sa(dp4046
g16
(lp4047
S'k'
asg39
I469
sS'.thisRepN'
p4048
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4049
I501
sS'.thisN'
p4050
I501
sS'.thisIndex'
p4051
g44
(g46
S'\xd5\x01\x00\x00'
tRp4052
sg15
(lp4053
S'd'
asg17
S'Y'
sg14
I11
sa(dp4054
g16
(lp4055
S'k'
asg39
I590
sS'.thisRepN'
p4056
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4057
I502
sS'.thisN'
p4058
I502
sS'.thisIndex'
p4059
g44
(g46
S'N\x02\x00\x00'
tRp4060
sg15
(lp4061
S'd'
asg17
S'Y'
sg14
I11
sa(dp4062
g16
(lp4063
S'd'
asg39
I243
sS'.thisRepN'
p4064
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4065
I503
sS'.thisN'
p4066
I503
sS'.thisIndex'
p4067
g44
(g46
S'\xf3\x00\x00\x00'
tRp4068
sg15
(lp4069
S'k'
asg17
S'Y'
sg14
I11
sa(dp4070
g39
I389
sS'.thisRepN'
p4071
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4072
I504
sS'.thisN'
p4073
I504
sS'.thisIndex'
p4074
g44
(g46
S'\x85\x01\x00\x00'
tRp4075
sg15
Nsg17
g87
sg14
I11
sa(dp4076
g16
(lp4077
S'd'
asg39
I31
sS'.thisRepN'
p4078
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4079
I505
sS'.thisN'
p4080
I505
sS'.thisIndex'
p4081
g44
(g46
S'\x1f\x00\x00\x00'
tRp4082
sg15
(lp4083
S'd'
asg17
S'N'
sg14
I11
sa(dp4084
g16
(lp4085
S'd'
asg39
I266
sS'.thisRepN'
p4086
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4087
I506
sS'.thisN'
p4088
I506
sS'.thisIndex'
p4089
g44
(g46
S'\n\x01\x00\x00'
tRp4090
sg15
(lp4091
S'k'
asg17
S'Y'
sg14
I11
sa(dp4092
g16
(lp4093
S'd'
asg39
I234
sS'.thisRepN'
p4094
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4095
I507
sS'.thisN'
p4096
I507
sS'.thisIndex'
p4097
g44
(g46
S'\xea\x00\x00\x00'
tRp4098
sg15
(lp4099
S'k'
asg17
S'Y'
sg14
I11
sa(dp4100
g16
(lp4101
S'k'
asg39
I353
sS'.thisRepN'
p4102
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4103
I508
sS'.thisN'
p4104
I508
sS'.thisIndex'
p4105
g44
(g46
S'a\x01\x00\x00'
tRp4106
sg15
(lp4107
S'd'
asg17
S'Y'
sg14
I11
sa(dp4108
g16
(lp4109
S'd'
asg39
I227
sS'.thisRepN'
p4110
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4111
I509
sS'.thisN'
p4112
I509
sS'.thisIndex'
p4113
g44
(g46
S'\xe3\x00\x00\x00'
tRp4114
sg15
(lp4115
S'k'
asg17
S'Y'
sg14
I11
sa(dp4116
g16
(lp4117
S'd'
asg39
I0
sS'.thisRepN'
p4118
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4119
I510
sS'.thisN'
p4120
I510
sS'.thisIndex'
p4121
g44
(g46
S'\x00\x00\x00\x00'
tRp4122
sg15
(lp4123
S'k'
asg17
S'Y'
sg14
I11
sa(dp4124
g16
(lp4125
S'd'
asg39
I99
sS'.thisRepN'
p4126
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4127
I511
sS'.thisN'
p4128
I511
sS'.thisIndex'
p4129
g44
(g46
S'c\x00\x00\x00'
tRp4130
sg15
(lp4131
S'k'
asg17
S'Y'
sg14
I11
sa(dp4132
g16
(lp4133
S'd'
asg39
I172
sS'.thisRepN'
p4134
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4135
I512
sS'.thisN'
p4136
I512
sS'.thisIndex'
p4137
g44
(g46
S'\xac\x00\x00\x00'
tRp4138
sg15
(lp4139
S'k'
asg17
S'Y'
sg14
I11
sa(dp4140
g16
(lp4141
S'd'
asg39
I74
sS'.thisRepN'
p4142
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4143
I513
sS'.thisN'
p4144
I513
sS'.thisIndex'
p4145
g44
(g46
S'J\x00\x00\x00'
tRp4146
sg15
(lp4147
S'k'
asg17
S'Y'
sg14
I11
sa(dp4148
g16
(lp4149
S'd'
asg39
I239
sS'.thisRepN'
p4150
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4151
I514
sS'.thisN'
p4152
I514
sS'.thisIndex'
p4153
g44
(g46
S'\xef\x00\x00\x00'
tRp4154
sg15
(lp4155
S'k'
asg17
S'Y'
sg14
I11
sa(dp4156
g16
(lp4157
S'd'
asg39
I70
sS'.thisRepN'
p4158
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4159
I515
sS'.thisN'
p4160
I515
sS'.thisIndex'
p4161
g44
(g46
S'F\x00\x00\x00'
tRp4162
sg15
(lp4163
S'd'
asg17
S'N'
sg14
I11
sa(dp4164
g16
(lp4165
S'k'
asg39
I501
sS'.thisRepN'
p4166
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4167
I516
sS'.thisN'
p4168
I516
sS'.thisIndex'
p4169
g44
(g46
S'\xf5\x01\x00\x00'
tRp4170
sg15
(lp4171
S'd'
asg17
S'Y'
sg14
I11
sa(dp4172
g16
(lp4173
S'k'
asg39
I333
sS'.thisRepN'
p4174
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4175
I517
sS'.thisN'
p4176
I517
sS'.thisIndex'
p4177
g44
(g46
S'M\x01\x00\x00'
tRp4178
sg15
(lp4179
S'd'
asg17
S'Y'
sg14
I11
sa(dp4180
g16
(lp4181
S'k'
asg39
I526
sS'.thisRepN'
p4182
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4183
I518
sS'.thisN'
p4184
I518
sS'.thisIndex'
p4185
g44
(g46
S'\x0e\x02\x00\x00'
tRp4186
sg15
(lp4187
S'd'
asg17
S'Y'
sg14
I11
sa(dp4188
g16
(lp4189
S'd'
asg39
I241
sS'.thisRepN'
p4190
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4191
I519
sS'.thisN'
p4192
I519
sS'.thisIndex'
p4193
g44
(g46
S'\xf1\x00\x00\x00'
tRp4194
sg15
(lp4195
S'k'
asg17
S'Y'
sg14
I11
sa(dp4196
g16
(lp4197
S'd'
asg39
I13
sS'.thisRepN'
p4198
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4199
I520
sS'.thisN'
p4200
I520
sS'.thisIndex'
p4201
g44
(g46
S'\r\x00\x00\x00'
tRp4202
sg15
(lp4203
S'k'
asg17
S'Y'
sg14
I11
sa(dp4204
g16
(lp4205
S'k'
asg39
I515
sS'.thisRepN'
p4206
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4207
I521
sS'.thisN'
p4208
I521
sS'.thisIndex'
p4209
g44
(g46
S'\x03\x02\x00\x00'
tRp4210
sg15
(lp4211
S'd'
asg17
S'Y'
sg14
I11
sa(dp4212
g16
(lp4213
S'd'
asg39
I251
sS'.thisRepN'
p4214
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4215
I522
sS'.thisN'
p4216
I522
sS'.thisIndex'
p4217
g44
(g46
S'\xfb\x00\x00\x00'
tRp4218
sg15
(lp4219
S'k'
asg17
S'Y'
sg14
I11
sa(dp4220
g16
(lp4221
S'd'
asg39
I195
sS'.thisRepN'
p4222
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4223
I523
sS'.thisN'
p4224
I523
sS'.thisIndex'
p4225
g44
(g46
S'\xc3\x00\x00\x00'
tRp4226
sg15
(lp4227
S'k'
asg17
S'Y'
sg14
I11
sa(dp4228
g16
(lp4229
S'd'
asg39
I267
sS'.thisRepN'
p4230
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4231
I524
sS'.thisN'
p4232
I524
sS'.thisIndex'
p4233
g44
(g46
S'\x0b\x01\x00\x00'
tRp4234
sg15
(lp4235
S'k'
asg17
S'Y'
sg14
I11
sa(dp4236
g16
(lp4237
S'k'
asg39
I300
sS'.thisRepN'
p4238
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4239
I525
sS'.thisN'
p4240
I525
sS'.thisIndex'
p4241
g44
(g46
S',\x01\x00\x00'
tRp4242
sg15
(lp4243
S'd'
asg17
S'Y'
sg14
I11
sa(dp4244
g16
(lp4245
S'k'
asg39
I404
sS'.thisRepN'
p4246
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4247
I526
sS'.thisN'
p4248
I526
sS'.thisIndex'
p4249
g44
(g46
S'\x94\x01\x00\x00'
tRp4250
sg15
(lp4251
S'k'
asg17
S'N'
sg14
I11
sa(dp4252
g16
(lp4253
S'k'
asg39
I412
sS'.thisRepN'
p4254
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4255
I527
sS'.thisN'
p4256
I527
sS'.thisIndex'
p4257
g44
(g46
S'\x9c\x01\x00\x00'
tRp4258
sg15
(lp4259
S'k'
asg17
S'N'
sg14
I11
sa(dp4260
g16
(lp4261
S'd'
asg39
I101
sS'.thisRepN'
p4262
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4263
I528
sS'.thisN'
p4264
I528
sS'.thisIndex'
p4265
g44
(g46
S'e\x00\x00\x00'
tRp4266
sg15
(lp4267
S'k'
asg17
S'Y'
sg14
I11
sa(dp4268
g16
(lp4269
S'd'
asg39
I126
sS'.thisRepN'
p4270
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4271
I529
sS'.thisN'
p4272
I529
sS'.thisIndex'
p4273
g44
(g46
S'~\x00\x00\x00'
tRp4274
sg15
(lp4275
S'k'
asg17
S'Y'
sg14
I11
sa(dp4276
g16
(lp4277
S'k'
asg39
I330
sS'.thisRepN'
p4278
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4279
I530
sS'.thisN'
p4280
I530
sS'.thisIndex'
p4281
g44
(g46
S'J\x01\x00\x00'
tRp4282
sg15
(lp4283
S'k'
asg17
S'N'
sg14
I11
sa(dp4284
g16
(lp4285
S'd'
asg39
I286
sS'.thisRepN'
p4286
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4287
I531
sS'.thisN'
p4288
I531
sS'.thisIndex'
p4289
g44
(g46
S'\x1e\x01\x00\x00'
tRp4290
sg15
(lp4291
S'k'
asg17
S'Y'
sg14
I11
sa(dp4292
g16
(lp4293
S'd'
asg39
I95
sS'.thisRepN'
p4294
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4295
I532
sS'.thisN'
p4296
I532
sS'.thisIndex'
p4297
g44
(g46
S'_\x00\x00\x00'
tRp4298
sg15
(lp4299
S'k'
asg17
S'Y'
sg14
I11
sa(dp4300
g16
(lp4301
S'k'
asg39
I327
sS'.thisRepN'
p4302
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4303
I533
sS'.thisN'
p4304
I533
sS'.thisIndex'
p4305
g44
(g46
S'G\x01\x00\x00'
tRp4306
sg15
(lp4307
S'k'
asg17
S'N'
sg14
I11
sa(dp4308
g16
(lp4309
S'd'
asg39
I268
sS'.thisRepN'
p4310
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4311
I534
sS'.thisN'
p4312
I534
sS'.thisIndex'
p4313
g44
(g46
S'\x0c\x01\x00\x00'
tRp4314
sg15
(lp4315
S'k'
asg17
S'Y'
sg14
I11
sa(dp4316
g16
(lp4317
S'k'
asg39
I568
sS'.thisRepN'
p4318
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4319
I535
sS'.thisN'
p4320
I535
sS'.thisIndex'
p4321
g44
(g46
S'8\x02\x00\x00'
tRp4322
sg15
(lp4323
S'k'
asg17
S'N'
sg14
I11
sa(dp4324
g16
(lp4325
S'd'
asg39
I143
sS'.thisRepN'
p4326
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4327
I536
sS'.thisN'
p4328
I536
sS'.thisIndex'
p4329
g44
(g46
S'\x8f\x00\x00\x00'
tRp4330
sg15
(lp4331
S'k'
asg17
S'Y'
sg14
I11
sa(dp4332
g16
(lp4333
S'k'
asg39
I534
sS'.thisRepN'
p4334
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4335
I537
sS'.thisN'
p4336
I537
sS'.thisIndex'
p4337
g44
(g46
S'\x16\x02\x00\x00'
tRp4338
sg15
(lp4339
S'd'
asg17
S'Y'
sg14
I11
sa(dp4340
g16
(lp4341
S'k'
asg39
I422
sS'.thisRepN'
p4342
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4343
I538
sS'.thisN'
p4344
I538
sS'.thisIndex'
p4345
g44
(g46
S'\xa6\x01\x00\x00'
tRp4346
sg15
(lp4347
S'd'
asg17
S'Y'
sg14
I11
sa(dp4348
g16
(lp4349
S'd'
asg39
I145
sS'.thisRepN'
p4350
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4351
I539
sS'.thisN'
p4352
I539
sS'.thisIndex'
p4353
g44
(g46
S'\x91\x00\x00\x00'
tRp4354
sg15
(lp4355
S'k'
asg17
S'Y'
sg14
I11
sa(dp4356
g16
(lp4357
S'k'
asg39
I343
sS'.thisRepN'
p4358
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4359
I540
sS'.thisN'
p4360
I540
sS'.thisIndex'
p4361
g44
(g46
S'W\x01\x00\x00'
tRp4362
sg15
(lp4363
S'd'
asg17
S'Y'
sg14
I11
sa(dp4364
g16
(lp4365
S'd'
asg39
I223
sS'.thisRepN'
p4366
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4367
I541
sS'.thisN'
p4368
I541
sS'.thisIndex'
p4369
g44
(g46
S'\xdf\x00\x00\x00'
tRp4370
sg15
(lp4371
S'k'
asg17
S'Y'
sg14
I11
sa(dp4372
g16
(lp4373
S'k'
asg39
I480
sS'.thisRepN'
p4374
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4375
I542
sS'.thisN'
p4376
I542
sS'.thisIndex'
p4377
g44
(g46
S'\xe0\x01\x00\x00'
tRp4378
sg15
(lp4379
S'd'
asg17
S'Y'
sg14
I11
sa(dp4380
g16
(lp4381
S'd'
asg39
I89
sS'.thisRepN'
p4382
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4383
I543
sS'.thisN'
p4384
I543
sS'.thisIndex'
p4385
g44
(g46
S'Y\x00\x00\x00'
tRp4386
sg15
(lp4387
S'd'
asg17
S'N'
sg14
I11
sa(dp4388
g16
(lp4389
S'd'
asg39
I152
sS'.thisRepN'
p4390
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4391
I544
sS'.thisN'
p4392
I544
sS'.thisIndex'
p4393
g44
(g46
S'\x98\x00\x00\x00'
tRp4394
sg15
(lp4395
S'd'
asg17
S'N'
sg14
I11
sa(dp4396
g16
(lp4397
S'k'
asg39
I581
sS'.thisRepN'
p4398
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4399
I545
sS'.thisN'
p4400
I545
sS'.thisIndex'
p4401
g44
(g46
S'E\x02\x00\x00'
tRp4402
sg15
(lp4403
S'd'
asg17
S'Y'
sg14
I11
sa(dp4404
g16
(lp4405
S'd'
asg39
I110
sS'.thisRepN'
p4406
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4407
I546
sS'.thisN'
p4408
I546
sS'.thisIndex'
p4409
g44
(g46
S'n\x00\x00\x00'
tRp4410
sg15
(lp4411
S'k'
asg17
S'Y'
sg14
I11
sa(dp4412
g16
(lp4413
S'k'
asg39
I561
sS'.thisRepN'
p4414
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4415
I547
sS'.thisN'
p4416
I547
sS'.thisIndex'
p4417
g44
(g46
S'1\x02\x00\x00'
tRp4418
sg15
(lp4419
S'd'
asg17
S'Y'
sg14
I11
sa(dp4420
g16
(lp4421
S'd'
asg39
I237
sS'.thisRepN'
p4422
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4423
I548
sS'.thisN'
p4424
I548
sS'.thisIndex'
p4425
g44
(g46
S'\xed\x00\x00\x00'
tRp4426
sg15
(lp4427
S'k'
asg17
S'Y'
sg14
I11
sa(dp4428
g16
(lp4429
S'k'
asg39
I536
sS'.thisRepN'
p4430
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4431
I549
sS'.thisN'
p4432
I549
sS'.thisIndex'
p4433
g44
(g46
S'\x18\x02\x00\x00'
tRp4434
sg15
(lp4435
S'd'
asg17
S'Y'
sg14
I11
sa(dp4436
g16
(lp4437
S'd'
asg39
I201
sS'.thisRepN'
p4438
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4439
I550
sS'.thisN'
p4440
I550
sS'.thisIndex'
p4441
g44
(g46
S'\xc9\x00\x00\x00'
tRp4442
sg15
(lp4443
S'd'
asg17
S'N'
sg14
I12
sa(dp4444
g16
(lp4445
S'k'
asg39
I335
sS'.thisRepN'
p4446
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4447
I551
sS'.thisN'
p4448
I551
sS'.thisIndex'
p4449
g44
(g46
S'O\x01\x00\x00'
tRp4450
sg15
(lp4451
S'd'
asg17
S'Y'
sg14
I12
sa(dp4452
g16
(lp4453
S'k'
asg39
I409
sS'.thisRepN'
p4454
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4455
I552
sS'.thisN'
p4456
I552
sS'.thisIndex'
p4457
g44
(g46
S'\x99\x01\x00\x00'
tRp4458
sg15
(lp4459
S'd'
asg17
S'Y'
sg14
I12
sa(dp4460
g16
(lp4461
S'k'
asg39
I400
sS'.thisRepN'
p4462
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4463
I553
sS'.thisN'
p4464
I553
sS'.thisIndex'
p4465
g44
(g46
S'\x90\x01\x00\x00'
tRp4466
sg15
(lp4467
S'd'
asg17
S'Y'
sg14
I12
sa(dp4468
g16
(lp4469
S'd'
asg39
I211
sS'.thisRepN'
p4470
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4471
I554
sS'.thisN'
p4472
I554
sS'.thisIndex'
p4473
g44
(g46
S'\xd3\x00\x00\x00'
tRp4474
sg15
(lp4475
S'k'
asg17
S'Y'
sg14
I12
sa(dp4476
g16
(lp4477
S'k'
asg39
I580
sS'.thisRepN'
p4478
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4479
I555
sS'.thisN'
p4480
I555
sS'.thisIndex'
p4481
g44
(g46
S'D\x02\x00\x00'
tRp4482
sg15
(lp4483
S'd'
asg17
S'Y'
sg14
I12
sa(dp4484
g16
(lp4485
S'd'
asg39
I279
sS'.thisRepN'
p4486
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4487
I556
sS'.thisN'
p4488
I556
sS'.thisIndex'
p4489
g44
(g46
S'\x17\x01\x00\x00'
tRp4490
sg15
(lp4491
S'd'
asg17
S'N'
sg14
I12
sa(dp4492
g16
(lp4493
S'k'
asg39
I316
sS'.thisRepN'
p4494
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4495
I557
sS'.thisN'
p4496
I557
sS'.thisIndex'
p4497
g44
(g46
S'<\x01\x00\x00'
tRp4498
sg15
(lp4499
S'd'
asg17
S'Y'
sg14
I12
sa(dp4500
g16
(lp4501
S'd'
asg39
I134
sS'.thisRepN'
p4502
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4503
I558
sS'.thisN'
p4504
I558
sS'.thisIndex'
p4505
g44
(g46
S'\x86\x00\x00\x00'
tRp4506
sg15
(lp4507
S'k'
asg17
S'Y'
sg14
I12
sa(dp4508
g16
(lp4509
S'd'
asg39
I10
sS'.thisRepN'
p4510
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4511
I559
sS'.thisN'
p4512
I559
sS'.thisIndex'
p4513
g44
(g46
S'\n\x00\x00\x00'
tRp4514
sg15
(lp4515
S'k'
asg17
S'Y'
sg14
I12
sa(dp4516
g16
(lp4517
S'k'
asg39
I346
sS'.thisRepN'
p4518
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4519
I560
sS'.thisN'
p4520
I560
sS'.thisIndex'
p4521
g44
(g46
S'Z\x01\x00\x00'
tRp4522
sg15
(lp4523
S'd'
asg17
S'Y'
sg14
I12
sa(dp4524
g16
(lp4525
S'k'
asg39
I344
sS'.thisRepN'
p4526
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4527
I561
sS'.thisN'
p4528
I561
sS'.thisIndex'
p4529
g44
(g46
S'X\x01\x00\x00'
tRp4530
sg15
(lp4531
S'd'
asg17
S'Y'
sg14
I12
sa(dp4532
g16
(lp4533
S'k'
asg39
I390
sS'.thisRepN'
p4534
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4535
I562
sS'.thisN'
p4536
I562
sS'.thisIndex'
p4537
g44
(g46
S'\x86\x01\x00\x00'
tRp4538
sg15
(lp4539
S'd'
asg17
S'Y'
sg14
I12
sa(dp4540
g16
(lp4541
S'k'
asg39
I498
sS'.thisRepN'
p4542
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4543
I563
sS'.thisN'
p4544
I563
sS'.thisIndex'
p4545
g44
(g46
S'\xf2\x01\x00\x00'
tRp4546
sg15
(lp4547
S'd'
asg17
S'Y'
sg14
I12
sa(dp4548
g16
(lp4549
S'k'
asg39
I433
sS'.thisRepN'
p4550
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4551
I564
sS'.thisN'
p4552
I564
sS'.thisIndex'
p4553
g44
(g46
S'\xb1\x01\x00\x00'
tRp4554
sg15
(lp4555
S'k'
asg17
S'N'
sg14
I12
sa(dp4556
g16
(lp4557
S'k'
asg39
I332
sS'.thisRepN'
p4558
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4559
I565
sS'.thisN'
p4560
I565
sS'.thisIndex'
p4561
g44
(g46
S'L\x01\x00\x00'
tRp4562
sg15
(lp4563
S'd'
asg17
S'Y'
sg14
I12
sa(dp4564
g16
(lp4565
S'k'
asg39
I420
sS'.thisRepN'
p4566
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4567
I566
sS'.thisN'
p4568
I566
sS'.thisIndex'
p4569
g44
(g46
S'\xa4\x01\x00\x00'
tRp4570
sg15
(lp4571
S'd'
asg17
S'Y'
sg14
I12
sa(dp4572
g16
(lp4573
S'd'
asg39
I8
sS'.thisRepN'
p4574
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4575
I567
sS'.thisN'
p4576
I567
sS'.thisIndex'
p4577
g44
(g46
S'\x08\x00\x00\x00'
tRp4578
sg15
(lp4579
S'k'
asg17
S'Y'
sg14
I12
sa(dp4580
g16
(lp4581
S'k'
asg39
I393
sS'.thisRepN'
p4582
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4583
I568
sS'.thisN'
p4584
I568
sS'.thisIndex'
p4585
g44
(g46
S'\x89\x01\x00\x00'
tRp4586
sg15
(lp4587
S'd'
asg17
S'Y'
sg14
I12
sa(dp4588
g16
(lp4589
S'd'
asg39
I238
sS'.thisRepN'
p4590
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4591
I569
sS'.thisN'
p4592
I569
sS'.thisIndex'
p4593
g44
(g46
S'\xee\x00\x00\x00'
tRp4594
sg15
(lp4595
S'd'
asg17
S'N'
sg14
I12
sa(dp4596
g16
(lp4597
S'k'
asg39
I493
sS'.thisRepN'
p4598
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4599
I570
sS'.thisN'
p4600
I570
sS'.thisIndex'
p4601
g44
(g46
S'\xed\x01\x00\x00'
tRp4602
sg15
(lp4603
S'd'
asg17
S'Y'
sg14
I12
sa(dp4604
g16
(lp4605
S'k'
asg39
I414
sS'.thisRepN'
p4606
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4607
I571
sS'.thisN'
p4608
I571
sS'.thisIndex'
p4609
g44
(g46
S'\x9e\x01\x00\x00'
tRp4610
sg15
(lp4611
S'd'
asg17
S'Y'
sg14
I12
sa(dp4612
g16
(lp4613
S'd'
asg39
I141
sS'.thisRepN'
p4614
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4615
I572
sS'.thisN'
p4616
I572
sS'.thisIndex'
p4617
g44
(g46
S'\x8d\x00\x00\x00'
tRp4618
sg15
(lp4619
S'k'
asg17
S'Y'
sg14
I12
sa(dp4620
g16
(lp4621
S'd'
asg39
I140
sS'.thisRepN'
p4622
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4623
I573
sS'.thisN'
p4624
I573
sS'.thisIndex'
p4625
g44
(g46
S'\x8c\x00\x00\x00'
tRp4626
sg15
(lp4627
S'k'
asg17
S'Y'
sg14
I12
sa(dp4628
g16
(lp4629
S'd'
asg39
I299
sS'.thisRepN'
p4630
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4631
I574
sS'.thisN'
p4632
I574
sS'.thisIndex'
p4633
g44
(g46
S'+\x01\x00\x00'
tRp4634
sg15
(lp4635
S'k'
asg17
S'Y'
sg14
I12
sa(dp4636
g16
(lp4637
S'k'
asg39
I459
sS'.thisRepN'
p4638
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4639
I575
sS'.thisN'
p4640
I575
sS'.thisIndex'
p4641
g44
(g46
S'\xcb\x01\x00\x00'
tRp4642
sg15
(lp4643
S'd'
asg17
S'Y'
sg14
I12
sa(dp4644
g16
(lp4645
S'd'
asg39
I249
sS'.thisRepN'
p4646
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4647
I576
sS'.thisN'
p4648
I576
sS'.thisIndex'
p4649
g44
(g46
S'\xf9\x00\x00\x00'
tRp4650
sg15
(lp4651
S'k'
asg17
S'Y'
sg14
I12
sa(dp4652
g16
(lp4653
S'd'
asg39
I188
sS'.thisRepN'
p4654
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4655
I577
sS'.thisN'
p4656
I577
sS'.thisIndex'
p4657
g44
(g46
S'\xbc\x00\x00\x00'
tRp4658
sg15
(lp4659
S'k'
asg17
S'Y'
sg14
I12
sa(dp4660
g16
(lp4661
S'k'
asg39
I306
sS'.thisRepN'
p4662
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4663
I578
sS'.thisN'
p4664
I578
sS'.thisIndex'
p4665
g44
(g46
S'2\x01\x00\x00'
tRp4666
sg15
(lp4667
S'k'
asg17
S'N'
sg14
I12
sa(dp4668
g16
(lp4669
S'k'
asg39
I595
sS'.thisRepN'
p4670
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4671
I579
sS'.thisN'
p4672
I579
sS'.thisIndex'
p4673
g44
(g46
S'S\x02\x00\x00'
tRp4674
sg15
(lp4675
S'd'
asg17
S'Y'
sg14
I12
sa(dp4676
g16
(lp4677
S'd'
asg39
I175
sS'.thisRepN'
p4678
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4679
I580
sS'.thisN'
p4680
I580
sS'.thisIndex'
p4681
g44
(g46
S'\xaf\x00\x00\x00'
tRp4682
sg15
(lp4683
S'k'
asg17
S'Y'
sg14
I12
sa(dp4684
g16
(lp4685
S'k'
asg39
I482
sS'.thisRepN'
p4686
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4687
I581
sS'.thisN'
p4688
I581
sS'.thisIndex'
p4689
g44
(g46
S'\xe2\x01\x00\x00'
tRp4690
sg15
(lp4691
S'd'
asg17
S'Y'
sg14
I12
sa(dp4692
g16
(lp4693
S'k'
asg39
I411
sS'.thisRepN'
p4694
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4695
I582
sS'.thisN'
p4696
I582
sS'.thisIndex'
p4697
g44
(g46
S'\x9b\x01\x00\x00'
tRp4698
sg15
(lp4699
S'd'
asg17
S'Y'
sg14
I12
sa(dp4700
g16
(lp4701
S'd'
asg39
I112
sS'.thisRepN'
p4702
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4703
I583
sS'.thisN'
p4704
I583
sS'.thisIndex'
p4705
g44
(g46
S'p\x00\x00\x00'
tRp4706
sg15
(lp4707
S'k'
asg17
S'Y'
sg14
I12
sa(dp4708
g16
(lp4709
S'd'
asg39
I158
sS'.thisRepN'
p4710
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4711
I584
sS'.thisN'
p4712
I584
sS'.thisIndex'
p4713
g44
(g46
S'\x9e\x00\x00\x00'
tRp4714
sg15
(lp4715
S'k'
asg17
S'Y'
sg14
I12
sa(dp4716
g16
(lp4717
S'k'
asg39
I446
sS'.thisRepN'
p4718
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4719
I585
sS'.thisN'
p4720
I585
sS'.thisIndex'
p4721
g44
(g46
S'\xbe\x01\x00\x00'
tRp4722
sg15
(lp4723
S'd'
asg17
S'Y'
sg14
I12
sa(dp4724
g16
(lp4725
S'k'
asg39
I592
sS'.thisRepN'
p4726
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4727
I586
sS'.thisN'
p4728
I586
sS'.thisIndex'
p4729
g44
(g46
S'P\x02\x00\x00'
tRp4730
sg15
(lp4731
S'd'
asg17
S'Y'
sg14
I12
sa(dp4732
g16
(lp4733
S'k'
asg39
I372
sS'.thisRepN'
p4734
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4735
I587
sS'.thisN'
p4736
I587
sS'.thisIndex'
p4737
g44
(g46
S't\x01\x00\x00'
tRp4738
sg15
(lp4739
S'd'
asg17
S'Y'
sg14
I12
sa(dp4740
g16
(lp4741
S'd'
asg39
I180
sS'.thisRepN'
p4742
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4743
I588
sS'.thisN'
p4744
I588
sS'.thisIndex'
p4745
g44
(g46
S'\xb4\x00\x00\x00'
tRp4746
sg15
(lp4747
S'k'
asg17
S'Y'
sg14
I12
sa(dp4748
g16
(lp4749
S'k'
asg39
I351
sS'.thisRepN'
p4750
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4751
I589
sS'.thisN'
p4752
I589
sS'.thisIndex'
p4753
g44
(g46
S'_\x01\x00\x00'
tRp4754
sg15
(lp4755
S'd'
asg17
S'Y'
sg14
I12
sa(dp4756
g16
(lp4757
S'd'
asg39
I297
sS'.thisRepN'
p4758
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4759
I590
sS'.thisN'
p4760
I590
sS'.thisIndex'
p4761
g44
(g46
S')\x01\x00\x00'
tRp4762
sg15
(lp4763
S'k'
asg17
S'Y'
sg14
I12
sa(dp4764
g16
(lp4765
S'd'
asg39
I194
sS'.thisRepN'
p4766
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4767
I591
sS'.thisN'
p4768
I591
sS'.thisIndex'
p4769
g44
(g46
S'\xc2\x00\x00\x00'
tRp4770
sg15
(lp4771
S'd'
asg17
S'N'
sg14
I12
sa(dp4772
g16
(lp4773
S'd'
asg39
I77
sS'.thisRepN'
p4774
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4775
I592
sS'.thisN'
p4776
I592
sS'.thisIndex'
p4777
g44
(g46
S'M\x00\x00\x00'
tRp4778
sg15
(lp4779
S'k'
asg17
S'Y'
sg14
I12
sa(dp4780
g16
(lp4781
S'd'
asg39
I117
sS'.thisRepN'
p4782
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4783
I593
sS'.thisN'
p4784
I593
sS'.thisIndex'
p4785
g44
(g46
S'u\x00\x00\x00'
tRp4786
sg15
(lp4787
S'd'
asg17
S'N'
sg14
I12
sa(dp4788
g16
(lp4789
S'd'
asg39
I17
sS'.thisRepN'
p4790
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4791
I594
sS'.thisN'
p4792
I594
sS'.thisIndex'
p4793
g44
(g46
S'\x11\x00\x00\x00'
tRp4794
sg15
(lp4795
S'k'
asg17
S'Y'
sg14
I12
sa(dp4796
g16
(lp4797
S'k'
asg39
I475
sS'.thisRepN'
p4798
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4799
I595
sS'.thisN'
p4800
I595
sS'.thisIndex'
p4801
g44
(g46
S'\xdb\x01\x00\x00'
tRp4802
sg15
(lp4803
S'k'
asg17
S'N'
sg14
I12
sa(dp4804
g16
(lp4805
S'd'
asg39
I123
sS'.thisRepN'
p4806
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4807
I596
sS'.thisN'
p4808
I596
sS'.thisIndex'
p4809
g44
(g46
S'{\x00\x00\x00'
tRp4810
sg15
(lp4811
S'k'
asg17
S'Y'
sg14
I12
sa(dp4812
g16
(lp4813
S'd'
asg39
I119
sS'.thisRepN'
p4814
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4815
I597
sS'.thisN'
p4816
I597
sS'.thisIndex'
p4817
g44
(g46
S'w\x00\x00\x00'
tRp4818
sg15
(lp4819
S'k'
asg17
S'Y'
sg14
I12
sa(dp4820
g16
(lp4821
S'd'
asg39
I14
sS'.thisRepN'
p4822
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4823
I598
sS'.thisN'
p4824
I598
sS'.thisIndex'
p4825
g44
(g46
S'\x0e\x00\x00\x00'
tRp4826
sg15
(lp4827
S'k'
asg17
S'Y'
sg14
I12
sa(dp4828
g16
(lp4829
S'd'
asg39
I82
sS'.thisRepN'
p4830
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4831
I599
sS'.thisN'
p4832
I599
sS'.thisIndex'
p4833
g44
(g46
S'R\x00\x00\x00'
tRp4834
sg15
(lp4835
S'k'
asg17
S'Y'
sg14
I12
sasS'loops'
p4836
(lp4837
g1
(cpsychopy.data
TrialHandler
p4838
g3
NtRp4839
(dp4840
S'origin'
p4841
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4842
sS'thisTrial'
p4843
(lp4844
sS'_exp'
p4845
I60867440
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p4846
sS'thisRepN'
p4847
I1
sg21
I01
sg22
NsS'data'
p4848
g1
(cpsychopy.data
DataHandler
p4849
c__builtin__
dict
p4850
(dp4851
S'ran'
p4852
cnumpy.ma.core
_mareconstruct
p4853
(cnumpy.ma.core
MaskedArray
p4854
cnumpy
ndarray
p4855
(I0
tp4856
S'b'
tRp4857
(I1
(I600
I1
tg45
(S'f4'
I0
I1
tRp4858
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p4859
g4853
(g4854
g4855
g4856
S'b'
tRp4860
(I1
(I600
I1
tg4858
I00
S'\x00\x00\xffC\x00\x80\x8fC\x00\x80\x90C\x00\x80\x81C\x00\x00=C\x00\x80\x8dC\x00\x00\xf3C\x00\x00,B\x00\xc0\rD\x00\x00\x10C\x00\xc0\x0bD\x00\x80\xdaC\x00\x00\xc4B\x00\x00\x02D\x00\x80\x15D\x00\x00\xe6B\x00\x00\x82C\x00\x80\x14D\x00\x00\xc3C\x00\x00cC\x00\x00CC\x00\x00}C\x00\x00\xa0C\x00\x00\x80@\x00\x00\xdeC\x00\x80\xe2C\x00\x00\xe4B\x00\x00\x01C\x00\x00WC\x00\x00\x81C\x00\x00\xdbC\x00\x80\xfcC\x00\x80\xf7C\x00\x00\xaaB\x00\x00HC\x00\x00$C\x00\x00\x14C\x00\x008C\x00\x80\xc9C\x00\x00\xc2B\x00\x80\xc7C\x00\x00\x98C\x00\x00mC\x00\x00^C\x00\x80\x89C\x00\x00\x19C\x00\x00\xaaC\x00\x00\xc8B\x00\x80\xf9C\x00\x00\xc1C\x00\x80\xbeC\x00\x00\x1aC\x00\x80\xb3C\x00\x00QC\x00\x00\x0eC\x00\x00@@\x00\x00~C\x00\x00\x90C\x00\x00\x04C\x00\x00kC\x00\x80\xd2C\x00\x00XC\x00\x00\rC\x00\x00\xe8A\x00\x00\xc7C\x00\x00\x88C\x00\x00\xf2B\x00\x00xC\x00\x00+C\x00\x00\xc8A\x00\xc0\x00D\x00\x00)C\x00\x80\xd3C\x00\x00\x90A\x00@\x00D\x00\x00\xcdC\x00\x00[C\x00\x00\x14D\x00\x00`C\x00\x00\xbaB\x00\x00\xa4C\x00\x00xB\x00\xc0\x15D\x00\x00\x9dC\x00\x00\xb4B\x00\x00\xd6C\x00\x00lB\x00\x00\xf5C\x00\x80\xe8C\x00\xc0\x07D\x00\x00@C\x00\x00\xbbC\x00\x00\xbcB\x00\x80\x85C\x00\x00\xd5C\x00\x00\x05D\x00\x80\x8bC\x00\x00\x12C\x00\x00\xb6B\x00\x80\xffC\x00\x00\xefC\x00\x00\x04D\x00\x00\xa0B\x00\x80\xb5C\x00\x00EC\x00\x80\xc1C\x00\x00\xe8B\x00\x00-C\x00\x00\x88A\x00\x80\xeaC\x00\x80\x08D\x00\x00sC\x00\xc0\x11D\x00\x80\xd0C\x00\x00\xfcB\x00\x00\xe0A\x00\x00&C\x00@\x14D\x00\x80\xe6C\x00@\x15D\x00\x00\xf6B\x00\x00\x1fC\x00\x80\xa5C\x00\x00\x15D\x00\x00OC\x00\x00\xa5C\x00@\x04D\x00\x00rC\x00\x80\xa6C\x00\x80\xe3C\x00\x00pC\x00\x00\xd8B\x00\x00\xc6C\x00\x80\xaeC\x00\x80\x0bD\x00\x00\xa0A\x00\x00"C\x00\x002C\x00\x80\x8eC\x00\x80\xedC\x00@\x0fD\x00\x00\x0fD\x00\x00\xb1C\x00\x00\x06D\x00\x00\xf0B\x00\xc0\x06D\x00\x00\x8aC\x00\x00GC\x00\x00]C\x00\x00\xa2C\x00\x80\xecC\x00\x00*C\x00\x00\x08D\x00\x80\x80C\x00\x00\x06C\x00\x00\xceB\x00\x00\xb5C\x00\x00\x9eB\x00\x00\x12D\x00\x00\xfaC\x00\x00\xa3C\x00\x00\nC\x00\x80\xa8C\x00\x00\x92B\x00\x00\xf0C\x00\x80\xcaC\x00\x80\xc5C\x00\x00#C\x00\x80\xb0C\x00\x80\x98C\x00\x80\xf1C\x00\x00\x83C\x00\x00\x00D\x00\x00KC\x00\x80\x87C\x00\x00\x11D\x00\x00aC\x00\x00\x9cB\x00\x00\x04B\x00\x00pB\x00\x00\x13D\x00\x00\xe1C\x00\x00\xd8A\x00\x80\xbcC\x00\x80\x9dC\x00\x00\x97C\x00\x00\x1dC\x00\x00\xb8C\x00@\x10D\x00\x00\xb9C\x00\x80\xc3C\x00\x00\xd4B\x00\x00<C\x00\x00\xc5C\x00\xc0\x13D\x00\xc0\x02D\x00\x00 C\x00\x00\xd9C\x00\x00\x18B\x00\x00\xf4C\x00\x00\xd8C\x00\x80\tD\x00\x00\xb7C\x00\x00nC\x00\x80\x82C\x00\x00YC\x00\x00\xc4C\x00\x00\x17C\x00\x00\x94B\x00\x00\x8eB\x00\x00PB\x00\x80\nD\x00\x00{C\x00\x00\xeeC\x00\x00\xe5C\x00\x00\x91C\x00\x00\xe0B\x00\x005C\x00\x00jC\x00\x80\xb6C\x00\x80\xabC\x00\x00\xaeB\x00\x00\x92C\x00@\x07D\x00\x80\x92C\x00\x00\xebC\x00\x00\xacC\x00\x80\xfeC\x00\x00BC\x00\x80\xafC\x00\x00\\B\x00\x00LB\x00\x80\xbbC\x00\x80\x8aC\x00\x80\xfdC\x00\x00\xcaC\x00\x00\x88B\x00\x00\tD\x00@\x0eD\x00\x80\x00D\x00\x80\xf2C\x00\xc0\x01D\x00\x00\x07C\x00\x80\xfbC\x00\x00\xa2B\x00\x00TC\x00\x00\xb2C\x00\x00\xdeB\x00\x80\xb1C\x00\x00\x10D\x00\x003C\x00\x80\x02D\x00\x00\x1cB\x00\x00SC\x00\x00\xceC\x00\x00\xe2C\x00\x00MC\x00\x00\x9cC\x00\x00\x84B\x00\x00\xedC\x00\x80\xe1C\x00\x80\xa3C\x00\x00DB\x00\x00\xcaB\x00\x00\xe7C\x00\x007C\x00\x00\xfdC\x00\x00\x03D\x00\x80\x05D\x00\x00uC\x00\x80\xf0C\x00\x00\x9aC\x00\x00\xecC\x00\x80\xbfC\x00\x80\xadC\x00\x00\xe0@\x00\x00\xb0B\x00\x00tB\x00\x00\xddC\x00\x00\x0bD\x00\x00<B\x00\x00\xd0C\x00\x80\x9bC\x00\x00(B\x00\x00lC\x00\x00\x96B\x00\xc0\x04D\x00\x00/C\x00\x00\x1cC\x00\x00\x7fC\x00\x00\x80B\x00\x00\x8aB\x00\x80\xa1C\x00\x00\xf6C\x00\x80\xd9C\x00\x80\xf3C\x00\x00\x15C\x00\x80\x13D\x00\x80\xf8C\x00\x80\x0fD\x00@\x03D\x00\x80\xd8C\x00\x00LC\x00\x80\xd7C\x00\x00\xc2C\x00\x80\xb2C\x00\x80\x10D\x00\x00\xa6B\x00\x00\x9fC\x00\x00FC\x00\x80\xdcC\x00\x00.C\x00\x00\xb0C\x00\x80\xa2C\x00\x80\x9eC\x00\x00\x00A\x00@\x0bD\x00\x00\xbeB\x00\x80\xcbC\x00\x00\xaeC\x00\x80\xa4C\x00\x00\xe2B\x00\x00UC\x00\x00hC\x00\x00\xbcC\x00\x00dC\x00\x00yC\x00@\x05D\x00\x00\xa7C\x00\x00bC\x00\x80\x04D\x00\x00\x8eC\x00@\rD\x00@\x01D\x00\x00\xeaB\x00\xc0\tD\x00\x00\xb2B\x00\x00\xbeC\x00\x00\x0fC\x00\x80\xaaC\x00\x00\x16C\x00\x00\xb3C\x00\x00 A\x00\x00\x07D\x00@\x0cD\x00\x00|B\x00\x00\x0cD\x00\x80\x99C\x00\x80\xdbC\x00\x00;C\x00\x00\x95C\x00@\x13D\x00\x80\xa0C\x00\x00\xfeC\x00\x80\xd5C\x00\x00oC\x00\x00\xe6C\x00\x00\xb4C\x00\x00\xd1C\x00\x80\x8cC\x00\x00\xc6B\x00\x00\xf8A\x00\x00\xe8C\x00\x00\x1eC\x00\x00\xf2C\x00\x00@B\x00\x80\x91C\x00\x00\xbfC\x00\x00\xa4B\x00\x00\x8cC\x00\x80\xd6C\x00\x00\xd3C\x00\xc0\x12D\x00\x00IC\x00\x00eC\x00\x80\xd1C\x00\x00`B\x00\x80\xacC\x00\x80\xcdC\x00\x00\x10B\x00\x000A\x00\x00PA\x00\x00\xbdC\x00\x00\xd4C\x00\x00TB\x00\x00\xc0A\x00\x00\xb0A\x00\x00ZC\x00\x00\xa9C\x00\x00\xfcC\x00\x80\x0cD\x00\x00\xd7C\x00\x00gC\x00\x00\x0eD\x00\x00VC\x00\x00\x02C\x00\x00\x11C\x00\x80\xc4C\x00\x80\xe4C\x00\x00\xccC\x00@\nD\x00\x00\xe0C\x00\x80\xe7C\x00\x00\x9bC\x00\x80\x03D\x00\x00 B\x00\x80\x95C\x00\x80\xe9C\x00\x00wC\x00\x00\nD\x00\x004B\x00\x80\x11D\x00\xc0\x03D\x00\x00\xe9C\x00\xc0\x0eD\x00\x80\xb7C\x00\x00\xa1C\x00\x00\xdaC\x00\x00\xe4C\x00\x80\x86C\x00\x80\rD\x00\x00\x0cB\x00\x80\x06D\x00\x80\x83C\x00\x80\xb9C\x00\x00zC\x00\x80\x9fC\x00\x00\x00C\x00\x00\x13C\x00\x80\xeeC\x00\x00\x1bC\x00\x00hB\x00\x80\xbaC\x00\x00\rD\x00\x00PC\x00\x80\x94C\x00\x00\x86B\x00\x00\x00\x00\x00\x80\xc6C\x00\x00\x08C\x00\x00\x10A\x00\x00vC\x00\x00\x80A\x00\x00\xd2C\x00\x00%C\x00\x80\xe0C\x00@\x12D\x00\x00AC\x00\x00\xdcB\x00\x00\xa0@\x00\x008B\x00\x00\\C\x00\x000C\x00\x00\x0bC\x00\x00\xbaC\x00\x00\x03C\x00\x00$B\x00\x000B\x00\x00\x8dC\x00\xc0\x0fD\x00\x00\xdcC\x00\x80\xa7C\x00\x80\xcfC\x00\x00\tC\x00\x00\x87C\x00\x80\xddC\x00\x80\xceC\x00\x00\xf7C\x00\x00\x8bC\x00\x80\xfaC\x00\x00\x86C\x00\x00\x00B\x00\x00\xf1C\x00\x80\xc0C\x00\x80\x9cC\x00\xc0\x14D\x00\x80\xe5C\x00\x80\xdeC\x00\x00iC\x00\x00\xb8B\x00\x80\x07D\x00\x00\xecB\x00@\x11D\x00\x00\x82B\x00\x00\xa8C\x00\x00\xa8A\x00\x00`A\x00\x009C\x00\x80\xdfC\x00\x00\x05C\x00\x00\xd2B\x00\x80\xb4C\x00\x80\xf6C\x00\x80\x0eD\x00\x00\x0cC\x00\x00\x80?\x00\x80\xbdC\x00\x00\xd0B\x00\xc0\x0cD\x00\x80\xc2C\x00\x00\xa8B\x00\x00\x01D\x00\x00\x8cB\x00\x80\xf4C\x00\x00dB\x00\x80\x88C\x00\x00\xfaB\x00\x00NC\x00\x80\x96C\x00\x00\x9eC\x00\x00tC\x00\x00\xc0C\x00\x80\xefC\x00\x00\xfeB\x00\x80\x9aC\x00@\x02D\x00\x00!C\x00\x80\x93C\x00\x80\xa9C\x00\x00\x93C\x00\x00\xf9C\x00\x00\xd6B\x00\x00XB\x00\x00,C\x00\x00RC\x00\x00fC\x00\x80\x01D\x00\x00\xf4B\x00\x00\xc0@\x00\x00\xf8C\x00\x00HB\x00\x00|C\x00\x00\xcfC\x00\x00\x08B\x00@\x06D\x00\x00\xc8C\x00@\tD\x00\x004C\x00\x00\xdaB\x00\x80\xccC\x00\x00_C\x00\x00\x14B\x00\x00:C\x00\x00\x84C\x00\x00\xe3C\x00\x00\x9aB\x00\x00\xb8A\x00\x00@A\x00\x00\x85C\x00\x00pA\x00\x00\x98B\x00\x00\xcbC\x00\x00\x00@\x00\x00>C\x00\x00\x94C\x00\x00\xf8B\x00\x80\xf5C\x00\x006C\x00\x80\xc8C\x00\x00JC\x00\x00\xdfC\x00\xc0\x08D\x00\x00\xa6C\x00\x00\x96C\x00\x80\x97C\x00\x80\xd4C\x00\x00\xeeB\x00\x00?C\x00\xc0\x05D\x00\x00\x90B\x00\x00\xacB\x00\x80\x84C\x00\x00qC\x00\x00(C\x00\x00\xc0B\x00\x00\x98A\x00\x00\xb6C\x00\x00\xadC\x00\x00\xafC\x00\x00\x8fC\x00\xc0\nD\x00@\x08D\x00\x00\xd0A\x00\x00\xccB\x00\x001C\x00\x00\x80C\x00\x00\xf0A\x00\x00\x18C\x00\x80\xebC\x00\x00\x89C\x00\x00\xfbC\x00\x00\xabC\x00\x80\x12D\x00\x00\'C\x00\x00\xeaC\x00\xc0\x10D\x00\x80\xb8C\x00\x00DC\x00\x00\x99C\x00\x00\xc9C'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4861
(dp4862
S'isNumeric'
p4863
(dp4864
g4852
I01
sg4859
I01
ssS'trials'
p4865
g4839
sS'dataTypes'
p4866
(lp4867
g4852
ag4859
asS'dataShape'
p4868
(lp4869
I600
aI1
asbsS'method'
p4870
S'random'
p4871
sS'sequenceIndices'
p4872
cnumpy.core.multiarray
_reconstruct
p4873
(g4855
(I0
tS'b'
tRp4874
(I1
(I600
I1
tg46
I01
S'\xb5\x01\x00\x00\xef\x01\x00\x00(\x02\x00\x007\x00\x00\x00\x17\x00\x00\x00\xc1\x01\x00\x00\x10\x02\x00\x00\x13\x01\x00\x00;\x01\x00\x00\xb8\x01\x00\x00V\x01\x00\x00|\x01\x00\x00#\x02\x00\x00}\x01\x00\x00\xe6\x01\x00\x00%\x02\x00\x00\xba\x01\x00\x00l\x00\x00\x00I\x00\x00\x00?\x02\x00\x00\x87\x00\x00\x00\xe5\x01\x00\x00\x82\x01\x00\x00"\x02\x00\x00\x81\x01\x00\x00E\x00\x00\x00F\x02\x00\x00\xb6\x00\x00\x00s\x00\x00\x00?\x00\x00\x00J\x02\x00\x00i\x01\x00\x00\xd7\x01\x00\x00\xb2\x00\x00\x00\x15\x02\x00\x00\xa5\x01\x00\x00{\x01\x00\x00\x1d\x02\x00\x00\xc6\x00\x00\x00\xfc\x00\x00\x00\x95\x01\x00\x00\xc8\x01\x00\x00\x1b\x01\x00\x00\x07\x00\x00\x00\xc9\x01\x00\x00\x9a\x01\x00\x00\xc2\x01\x00\x00\x18\x01\x00\x00m\x01\x00\x00\x06\x01\x00\x00\x12\x02\x00\x00\xe7\x00\x00\x00\xd2\x00\x00\x00\x80\x01\x00\x00\n\x02\x00\x00\xe6\x00\x00\x00x\x01\x00\x00\xf8\x01\x00\x00\xaf\x01\x00\x00V\x00\x00\x00\xb3\x00\x00\x00\x15\x01\x00\x00Q\x00\x00\x00Y\x01\x00\x00"\x01\x00\x00\xe3\x01\x00\x00\x02\x01\x00\x00\xb4\x01\x00\x00\xec\x00\x00\x00#\x01\x00\x00\xf6\x01\x00\x00\xd1\x00\x00\x009\x02\x00\x00\xa3\x00\x00\x00\xd0\x00\x00\x00\x1d\x01\x00\x00&\x02\x00\x00!\x02\x00\x00\xb1\x00\x00\x00\x9d\x00\x00\x00f\x00\x00\x00\xf4\x00\x00\x00p\x01\x00\x003\x01\x00\x00\xf4\x01\x00\x00!\x00\x00\x00:\x02\x00\x00\xdd\x00\x00\x00\x14\x01\x00\x00P\x01\x00\x00T\x00\x00\x00b\x00\x00\x00\xdf\x01\x00\x00O\x00\x00\x00\\\x00\x00\x00=\x01\x00\x00>\x02\x00\x00\'\x00\x00\x00\x0c\x00\x00\x00h\x01\x00\x00/\x00\x00\x00\x07\x01\x00\x00G\x02\x00\x00\x9b\x00\x00\x00\xf1\x01\x00\x00\xea\x01\x00\x00\xbf\x00\x00\x00\t\x02\x00\x00\x83\x00\x00\x00\x1a\x02\x00\x00\xc0\x01\x00\x00\xf7\x00\x00\x00\xd8\x00\x00\x00A\x01\x00\x00\x1a\x00\x00\x00\x0f\x00\x00\x00j\x00\x00\x00N\x01\x00\x00\xe1\x01\x00\x006\x02\x00\x00\x90\x00\x00\x00B\x00\x00\x00\x0f\x02\x00\x00x\x00\x00\x00+\x02\x00\x00\xfa\x01\x00\x00r\x00\x00\x00\x01\x02\x00\x00\xab\x01\x00\x00\x1b\x00\x00\x00\x8b\x01\x00\x00\xc7\x01\x00\x00:\x00\x00\x00\xe9\x01\x00\x00\x9a\x00\x00\x00\xf2\x00\x00\x00\xb7\x01\x00\x00\xcf\x01\x00\x00\xa1\x00\x00\x00\xc5\x01\x00\x00\xee\x01\x00\x00>\x00\x00\x006\x00\x00\x00R\x01\x00\x00\t\x00\x00\x00\x8c\x01\x00\x00a\x00\x00\x00\xac\x01\x00\x00$\x00\x00\x00(\x01\x00\x00T\x01\x00\x00\xcf\x00\x00\x00K\x02\x00\x00-\x00\x00\x003\x00\x00\x00\xae\x01\x00\x00 \x01\x00\x00\xba\x00\x00\x00k\x01\x00\x00y\x00\x00\x00\xc4\x00\x00\x00\x04\x02\x00\x00\x88\x00\x00\x00\xa7\x00\x00\x00#\x00\x00\x00\xbc\x01\x00\x00t\x00\x00\x00Q\x02\x00\x00=\x02\x00\x00G\x00\x00\x00\x97\x00\x00\x00D\x00\x00\x00\x0b\x02\x00\x00k\x00\x00\x007\x01\x00\x00\x1f\x01\x00\x00\xc4\x01\x00\x00H\x02\x00\x00\x89\x00\x00\x00\xfa\x00\x00\x00\x19\x02\x00\x00\xd9\x00\x00\x00-\x02\x00\x00\t\x01\x00\x00%\x00\x00\x00\xe7\x01\x00\x00\x1e\x02\x00\x00]\x01\x00\x00\xc0\x00\x00\x00\x04\x00\x00\x00)\x02\x00\x007\x02\x00\x00Z\x00\x00\x00\xbf\x01\x00\x00\xe4\x00\x00\x00\x14\x00\x00\x00U\x02\x00\x00h\x00\x00\x005\x01\x00\x00\x93\x00\x00\x00"\x00\x00\x00u\x01\x00\x00/\x02\x00\x00\xad\x00\x00\x00.\x01\x00\x00\x00\x01\x00\x00\xfb\x01\x00\x00|\x00\x00\x00\xb2\x01\x00\x005\x00\x00\x00\x0c\x02\x00\x00\xfd\x00\x00\x00\xf5\x00\x00\x00B\x01\x00\x00\x8a\x01\x00\x00\x1c\x00\x00\x00=\x00\x00\x00\xcd\x00\x00\x00\x83\x01\x00\x00L\x00\x00\x00\xc3\x01\x00\x00\x94\x00\x00\x00+\x00\x00\x00\x1c\x02\x00\x00N\x00\x00\x00\xb0\x00\x00\x00I\x01\x00\x00\x13\x00\x00\x00E\x01\x00\x00v\x01\x00\x00\r\x02\x00\x00\x88\x01\x00\x00C\x01\x00\x00\xde\x01\x00\x00\xda\x00\x00\x00;\x00\x00\x00\x1c\x01\x00\x00*\x00\x00\x00\xcb\x00\x00\x00c\x01\x00\x00\x82\x00\x00\x00<\x02\x00\x00\x7f\x00\x00\x00o\x00\x00\x00\xfe\x01\x00\x00\r\x01\x00\x00\xb9\x01\x00\x00\x98\x01\x00\x00C\x00\x00\x00F\x01\x00\x00\xa9\x01\x00\x00\xd4\x00\x00\x00\x13\x02\x00\x00\x15\x00\x00\x008\x00\x00\x00!\x01\x00\x00I\x02\x00\x00\x99\x00\x00\x00\x1d\x00\x00\x00\x03\x00\x00\x00\x10\x00\x00\x00\xcc\x00\x00\x00\xab\x00\x00\x00\xa7\x01\x00\x00\x1f\x02\x00\x00;\x02\x00\x00$\x02\x00\x00]\x00\x00\x00\xd6\x01\x00\x00\xa3\x01\x00\x00\xd0\x01\x00\x00\xae\x00\x00\x00A\x00\x00\x00\xf9\x01\x00\x00M\x02\x00\x00,\x00\x00\x00\x92\x00\x00\x00\xe9\x00\x00\x00\xd4\x01\x00\x00`\x00\x00\x00q\x01\x00\x00g\x01\x00\x00\xca\x01\x00\x00\x05\x00\x00\x00K\x01\x00\x00\x8a\x00\x00\x00C\x02\x00\x00\x01\x00\x00\x009\x00\x00\x00\x02\x00\x00\x00\xd7\x00\x00\x00n\x01\x00\x00\xde\x00\x00\x00\xe0\x00\x00\x00\x07\x02\x00\x00\x05\x02\x00\x00*\x02\x00\x00\xb3\x01\x00\x00^\x01\x00\x00\x96\x01\x00\x003\x02\x00\x00\xfc\x01\x00\x00\xb9\x00\x00\x004\x02\x00\x00)\x00\x00\x00\xa9\x00\x00\x00V\x02\x00\x00[\x01\x00\x00\x0f\x01\x00\x00\x02\x02\x00\x00\x93\x01\x00\x00\x1a\x01\x00\x00\x01\x01\x00\x00\xda\x01\x00\x00S\x00\x00\x00\xb8\x00\x00\x00\xfd\x01\x00\x00:\x01\x00\x004\x01\x00\x00\xaa\x01\x00\x00\x16\x00\x00\x00`\x01\x00\x00\xa0\x01\x00\x00$\x01\x00\x00\x95\x00\x00\x009\x01\x00\x00\xa0\x00\x00\x00\x05\x01\x00\x00P\x00\x00\x00@\x01\x00\x00}\x00\x00\x00z\x00\x00\x002\x02\x00\x00\x80\x00\x00\x00H\x01\x00\x00\xcd\x01\x00\x00\xe4\x01\x00\x00\xa2\x00\x00\x00\x84\x01\x00\x00\x06\x02\x00\x00.\x00\x00\x00S\x01\x00\x00O\x02\x00\x00\xdc\x00\x00\x00\xe2\x00\x00\x00y\x01\x00\x00A\x02\x00\x00\x12\x01\x00\x00?\x01\x00\x00\x85\x00\x00\x00B\x02\x00\x00\xe5\x00\x00\x008\x01\x00\x00\xa8\x00\x00\x00\x8e\x00\x00\x00\xf8\x00\x00\x00\xf6\x00\x00\x001\x01\x00\x00U\x01\x00\x004\x00\x00\x00e\x01\x00\x00\xeb\x01\x00\x00\x9c\x00\x00\x00g\x00\x00\x00@\x02\x00\x00\xdb\x00\x00\x00\xca\x00\x00\x00\x9f\x01\x00\x00\xbb\x00\x00\x00T\x02\x00\x00\xbd\x00\x00\x00\xa8\x01\x00\x00\xc6\x01\x00\x00\xb0\x01\x00\x00[\x00\x00\x00\xe8\x00\x00\x00D\x01\x00\x00\xb7\x00\x00\x00~\x01\x00\x00\xf0\x01\x00\x00Q\x01\x00\x002\x00\x00\x00o\x01\x00\x00\x11\x01\x00\x00\xff\x01\x00\x00\xd9\x01\x00\x001\x00\x00\x00i\x00\x00\x000\x01\x00\x00\xf3\x01\x00\x00\x12\x00\x00\x00\xbe\x00\x00\x00\xce\x00\x00\x00\x8d\x01\x00\x00\xc1\x00\x00\x00\xa6\x00\x00\x00\x84\x00\x00\x00\xb6\x01\x00\x00@\x00\x00\x00(\x00\x00\x00\x17\x02\x00\x00.\x02\x00\x00W\x02\x00\x00&\x00\x00\x00\xeb\x00\x00\x00\xa5\x00\x00\x00\'\x02\x00\x00>\x01\x00\x00\x8f\x01\x00\x00\x1b\x02\x00\x00K\x00\x00\x00z\x01\x00\x00\xfe\x00\x00\x00\xd2\x01\x00\x00\x14\x02\x00\x00\xce\x01\x00\x00\x19\x01\x00\x00q\x00\x00\x00f\x01\x00\x00w\x01\x00\x00\xbb\x01\x00\x00<\x00\x00\x00s\x01\x00\x00H\x00\x00\x00\x7f\x01\x00\x005\x02\x00\x00^\x00\x00\x00b\x01\x00\x00U\x00\x00\x00r\x01\x00\x00\x87\x01\x00\x00/\x01\x00\x00\xc8\x00\x00\x00-\x01\x00\x00\xc5\x00\x00\x00&\x01\x00\x00\xa1\x01\x00\x00\x0b\x00\x00\x00\x1e\x00\x00\x00\\\x01\x00\x00\xcc\x01\x00\x006\x01\x00\x00\x16\x01\x00\x00\xd1\x01\x00\x00\x18\x00\x00\x00\xdd\x01\x00\x000\x02\x00\x00\xe8\x01\x00\x00\x91\x01\x00\x00\xbd\x01\x00\x00\xb5\x00\x00\x00\x04\x01\x00\x00\xff\x00\x00\x00\x19\x00\x00\x00 \x02\x00\x00\x81\x00\x00\x00\xa2\x01\x00\x00\x8e\x01\x00\x00\xd6\x00\x00\x00\xdc\x01\x00\x00d\x01\x00\x00v\x00\x00\x00\x08\x01\x00\x00\x92\x01\x00\x00j\x01\x00\x00X\x00\x00\x00\x9d\x01\x00\x00\x97\x01\x00\x00R\x02\x00\x00m\x00\x00\x00\xe1\x00\x00\x00L\x02\x00\x00\x10\x01\x00\x00\x96\x00\x00\x00\x03\x01\x00\x00\x8b\x00\x00\x00\xd5\x00\x00\x00\xad\x01\x00\x00d\x00\x00\x00\x00\x02\x00\x00\xa4\x00\x00\x00\x0e\x01\x00\x00\xd8\x01\x00\x00\xaa\x00\x00\x00l\x01\x00\x00\xf0\x00\x00\x00\x06\x00\x00\x00\'\x01\x00\x00\xc7\x00\x00\x00\xf7\x01\x00\x00W\x00\x00\x00,\x02\x00\x00%\x01\x00\x00\xec\x01\x00\x00\xd3\x01\x00\x00 \x00\x00\x00\x11\x02\x00\x00*\x01\x00\x00\x08\x02\x00\x000\x00\x00\x00\x9f\x00\x00\x00\xd5\x01\x00\x00N\x02\x00\x00\xf3\x00\x00\x00\x85\x01\x00\x00\x1f\x00\x00\x00\n\x01\x00\x00\xea\x00\x00\x00a\x01\x00\x00\xe3\x00\x00\x00\x00\x00\x00\x00c\x00\x00\x00\xac\x00\x00\x00J\x00\x00\x00\xef\x00\x00\x00F\x00\x00\x00\xf5\x01\x00\x00M\x01\x00\x00\x0e\x02\x00\x00\xf1\x00\x00\x00\r\x00\x00\x00\x03\x02\x00\x00\xfb\x00\x00\x00\xc3\x00\x00\x00\x0b\x01\x00\x00,\x01\x00\x00\x94\x01\x00\x00\x9c\x01\x00\x00e\x00\x00\x00~\x00\x00\x00J\x01\x00\x00\x1e\x01\x00\x00_\x00\x00\x00G\x01\x00\x00\x0c\x01\x00\x008\x02\x00\x00\x8f\x00\x00\x00\x16\x02\x00\x00\xa6\x01\x00\x00\x91\x00\x00\x00W\x01\x00\x00\xdf\x00\x00\x00\xe0\x01\x00\x00Y\x00\x00\x00\x98\x00\x00\x00E\x02\x00\x00n\x00\x00\x001\x02\x00\x00\xed\x00\x00\x00\x18\x02\x00\x00\xc9\x00\x00\x00O\x01\x00\x00\x99\x01\x00\x00\x90\x01\x00\x00\xd3\x00\x00\x00D\x02\x00\x00\x17\x01\x00\x00<\x01\x00\x00\x86\x00\x00\x00\n\x00\x00\x00Z\x01\x00\x00X\x01\x00\x00\x86\x01\x00\x00\xf2\x01\x00\x00\xb1\x01\x00\x00L\x01\x00\x00\xa4\x01\x00\x00\x08\x00\x00\x00\x89\x01\x00\x00\xee\x00\x00\x00\xed\x01\x00\x00\x9e\x01\x00\x00\x8d\x00\x00\x00\x8c\x00\x00\x00+\x01\x00\x00\xcb\x01\x00\x00\xf9\x00\x00\x00\xbc\x00\x00\x002\x01\x00\x00S\x02\x00\x00\xaf\x00\x00\x00\xe2\x01\x00\x00\x9b\x01\x00\x00p\x00\x00\x00\x9e\x00\x00\x00\xbe\x01\x00\x00P\x02\x00\x00t\x01\x00\x00\xb4\x00\x00\x00_\x01\x00\x00)\x01\x00\x00\xc2\x00\x00\x00M\x00\x00\x00u\x00\x00\x00\x11\x00\x00\x00\xdb\x01\x00\x00{\x00\x00\x00w\x00\x00\x00\x0e\x00\x00\x00R\x00\x00\x00'
tbsS'finished'
p4875
I01
sS'nReps'
p4876
I1
sS'nRemaining'
p4877
I-1
sS'trialList'
p4878
(lp4879
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asS'seed'
p4880
NsS'thisIndex'
p4881
g4834
sS'thisN'
p4882
I600
sS'thisTrialN'
p4883
I0
sS'nTotal'
p4884
I600
sS'_warnUseOfNext'
p4885
I01
sbasS'savePickle'
p4886
I01
sb.