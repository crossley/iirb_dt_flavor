ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject115
p8
sS'runtimeInfo'
p9
NsS'name'
p10
Vsubject 115
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Category'
p16
aS'Correct?'
p17
aS'Button switch shown?'
p18
aS'Actually switched?'
p19
aS'Fast?'
p20
asS'autoLog'
p21
I01
sS'extraInfo'
p22
(dp23
S'gender'
p24
Vfemale
p25
sS'age'
p26
V19
p27
ssS'loopsUnfinished'
p28
(lp29
sS'saveWideText'
p30
I01
sS'thisEntry'
p31
(dp32
sS'version'
p33
S''
sS'_paramNamesSoFar'
p34
(lp35
sS'entries'
p36
(lp37
(dp38
g16
(lp39
S'd'
asS'.thisTrial'
p40
I109
sS'.thisRepN'
p41
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p42
I0
sS'.thisN'
p43
I0
sS'.thisIndex'
p44
cnumpy.core.multiarray
scalar
p45
(cnumpy
dtype
p46
(S'i4'
I0
I1
tRp47
(I3
S'<'
NNNI-1
I-1
I0
tbS'm\x00\x00\x00'
tRp48
sg15
(lp49
S'd'
asg17
S'Y'
sg14
I1
sa(dp50
g16
(lp51
S'd'
asg40
I154
sS'.thisRepN'
p52
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p53
I1
sS'.thisN'
p54
I1
sS'.thisIndex'
p55
g45
(g47
S'\x9a\x00\x00\x00'
tRp56
sg15
(lp57
S'd'
asg17
S'Y'
sg14
I1
sa(dp58
g16
(lp59
S'd'
asg40
I146
sS'.thisRepN'
p60
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p61
I2
sS'.thisN'
p62
I2
sS'.thisIndex'
p63
g45
(g47
S'\x92\x00\x00\x00'
tRp64
sg15
(lp65
S'd'
asg17
S'Y'
sg14
I1
sa(dp66
g16
(lp67
S'k'
asg40
I536
sS'.thisRepN'
p68
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p69
I3
sS'.thisN'
p70
I3
sS'.thisIndex'
p71
g45
(g47
S'\x18\x02\x00\x00'
tRp72
sg15
(lp73
S'd'
asg17
S'N'
sg14
I1
sa(dp74
g16
(lp75
S'd'
asg40
I3
sS'.thisRepN'
p76
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p77
I4
sS'.thisN'
p78
I4
sS'.thisIndex'
p79
g45
(g47
S'\x03\x00\x00\x00'
tRp80
sg15
(lp81
S'k'
asg17
S'N'
sg14
I1
sa(dp82
g16
(lp83
S'k'
asg40
I573
sS'.thisRepN'
p84
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p85
I5
sS'.thisN'
p86
I5
sS'.thisIndex'
p87
g45
(g47
S'=\x02\x00\x00'
tRp88
sg15
(lp89
S'd'
asg17
S'N'
sg14
I1
sa(dp90
g16
(lp91
S'k'
asg40
I303
sS'.thisRepN'
p92
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p93
I6
sS'.thisN'
p94
I6
sS'.thisIndex'
p95
g45
(g47
S'/\x01\x00\x00'
tRp96
sg15
(lp97
S'k'
asg17
S'Y'
sg14
I1
sa(dp98
g16
(lp99
S'd'
asg40
I45
sS'.thisRepN'
p100
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p101
I7
sS'.thisN'
p102
I7
sS'.thisIndex'
p103
g45
(g47
S'-\x00\x00\x00'
tRp104
sg15
(lp105
S'k'
asg17
S'N'
sg14
I1
sa(dp106
g16
(lp107
S'd'
asg40
I147
sS'.thisRepN'
p108
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p109
I8
sS'.thisN'
p110
I8
sS'.thisIndex'
p111
g45
(g47
S'\x93\x00\x00\x00'
tRp112
sg15
(lp113
S'k'
asg17
S'N'
sg14
I1
sa(dp114
g16
(lp115
S'd'
asg40
I63
sS'.thisRepN'
p116
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p117
I9
sS'.thisN'
p118
I9
sS'.thisIndex'
p119
g45
(g47
S'?\x00\x00\x00'
tRp120
sg15
(lp121
S'd'
asg17
S'Y'
sg14
I1
sa(dp122
g16
(lp123
S'k'
asg40
I448
sS'.thisRepN'
p124
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p125
I10
sS'.thisN'
p126
I10
sS'.thisIndex'
p127
g45
(g47
S'\xc0\x01\x00\x00'
tRp128
sg15
(lp129
S'd'
asg17
S'N'
sg14
I1
sa(dp130
g16
(lp131
S'k'
asg40
I372
sS'.thisRepN'
p132
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p133
I11
sS'.thisN'
p134
I11
sS'.thisIndex'
p135
g45
(g47
S't\x01\x00\x00'
tRp136
sg15
(lp137
S'd'
asg17
S'N'
sg14
I1
sa(dp138
g16
(lp139
S'k'
asg40
I341
sS'.thisRepN'
p140
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p141
I12
sS'.thisN'
p142
I12
sS'.thisIndex'
p143
g45
(g47
S'U\x01\x00\x00'
tRp144
sg15
(lp145
S'k'
asg17
S'Y'
sg14
I1
sa(dp146
g16
(lp147
S'k'
asg40
I488
sS'.thisRepN'
p148
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p149
I13
sS'.thisN'
p150
I13
sS'.thisIndex'
p151
g45
(g47
S'\xe8\x01\x00\x00'
tRp152
sg15
(lp153
S'd'
asg17
S'N'
sg14
I1
sa(dp154
g16
(lp155
S'k'
asg40
I552
sS'.thisRepN'
p156
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p157
I14
sS'.thisN'
p158
I14
sS'.thisIndex'
p159
g45
(g47
S'(\x02\x00\x00'
tRp160
sg15
(lp161
S'k'
asg17
S'Y'
sg14
I1
sa(dp162
g16
(lp163
S'k'
asg40
I405
sS'.thisRepN'
p164
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p165
I15
sS'.thisN'
p166
I15
sS'.thisIndex'
p167
g45
(g47
S'\x95\x01\x00\x00'
tRp168
sg15
(lp169
S'k'
asg17
S'Y'
sg14
I1
sa(dp170
g16
(lp171
S'k'
asg40
I499
sS'.thisRepN'
p172
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p173
I16
sS'.thisN'
p174
I16
sS'.thisIndex'
p175
g45
(g47
S'\xf3\x01\x00\x00'
tRp176
sg15
(lp177
S'd'
asg17
S'N'
sg14
I1
sa(dp178
g16
(lp179
S'd'
asg40
I284
sS'.thisRepN'
p180
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p181
I17
sS'.thisN'
p182
I17
sS'.thisIndex'
p183
g45
(g47
S'\x1c\x01\x00\x00'
tRp184
sg15
(lp185
S'k'
asg17
S'N'
sg14
I1
sa(dp186
g16
(lp187
S'k'
asg40
I357
sS'.thisRepN'
p188
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p189
I18
sS'.thisN'
p190
I18
sS'.thisIndex'
p191
g45
(g47
S'e\x01\x00\x00'
tRp192
sg15
(lp193
S'd'
asg17
S'N'
sg14
I1
sa(dp194
g16
(lp195
S'k'
asg40
I442
sS'.thisRepN'
p196
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p197
I19
sS'.thisN'
p198
I19
sS'.thisIndex'
p199
g45
(g47
S'\xba\x01\x00\x00'
tRp200
sg15
(lp201
S'k'
asg17
S'Y'
sg14
I1
sa(dp202
g16
(lp203
S'k'
asg40
I511
sS'.thisRepN'
p204
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p205
I20
sS'.thisN'
p206
I20
sS'.thisIndex'
p207
g45
(g47
S'\xff\x01\x00\x00'
tRp208
sg15
(lp209
S'd'
asg17
S'N'
sg14
I1
sa(dp210
g16
(lp211
S'd'
asg40
I253
sS'.thisRepN'
p212
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p213
I21
sS'.thisN'
p214
I21
sS'.thisIndex'
p215
g45
(g47
S'\xfd\x00\x00\x00'
tRp216
sg15
(lp217
S'k'
asg17
S'N'
sg14
I1
sa(dp218
g16
(lp219
S'k'
asg40
I596
sS'.thisRepN'
p220
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p221
I22
sS'.thisN'
p222
I22
sS'.thisIndex'
p223
g45
(g47
S'T\x02\x00\x00'
tRp224
sg15
(lp225
S'k'
asg17
S'Y'
sg14
I1
sa(dp226
g16
(lp227
S'd'
asg40
I143
sS'.thisRepN'
p228
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p229
I23
sS'.thisN'
p230
I23
sS'.thisIndex'
p231
g45
(g47
S'\x8f\x00\x00\x00'
tRp232
sg15
(lp233
S'd'
asg17
S'Y'
sg14
I1
sa(dp234
g16
(lp235
S'k'
asg40
I528
sS'.thisRepN'
p236
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p237
I24
sS'.thisN'
p238
I24
sS'.thisIndex'
p239
g45
(g47
S'\x10\x02\x00\x00'
tRp240
sg15
(lp241
S'd'
asg17
S'N'
sg14
I1
sa(dp242
g16
(lp243
S'k'
asg40
I334
sS'.thisRepN'
p244
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p245
I25
sS'.thisN'
p246
I25
sS'.thisIndex'
p247
g45
(g47
S'N\x01\x00\x00'
tRp248
sg15
(lp249
S'k'
asg17
S'Y'
sg14
I1
sa(dp250
g16
(lp251
S'k'
asg40
I330
sS'.thisRepN'
p252
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p253
I26
sS'.thisN'
p254
I26
sS'.thisIndex'
p255
g45
(g47
S'J\x01\x00\x00'
tRp256
sg15
(lp257
S'd'
asg17
S'N'
sg14
I1
sa(dp258
g16
(lp259
S'k'
asg40
I323
sS'.thisRepN'
p260
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p261
I27
sS'.thisN'
p262
I27
sS'.thisIndex'
p263
g45
(g47
S'C\x01\x00\x00'
tRp264
sg15
(lp265
S'k'
asg17
S'Y'
sg14
I1
sa(dp266
g16
(lp267
S'k'
asg40
I380
sS'.thisRepN'
p268
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p269
I28
sS'.thisN'
p270
I28
sS'.thisIndex'
p271
g45
(g47
S'|\x01\x00\x00'
tRp272
sg15
(lp273
S'd'
asg17
S'N'
sg14
I1
sa(dp274
g16
(lp275
S'k'
asg40
I364
sS'.thisRepN'
p276
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p277
I29
sS'.thisN'
p278
I29
sS'.thisIndex'
p279
g45
(g47
S'l\x01\x00\x00'
tRp280
sg15
(lp281
S'k'
asg17
S'Y'
sg14
I1
sa(dp282
g16
(lp283
S'd'
asg40
I191
sS'.thisRepN'
p284
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p285
I30
sS'.thisN'
p286
I30
sS'.thisIndex'
p287
g45
(g47
S'\xbf\x00\x00\x00'
tRp288
sg15
(lp289
S'k'
asg17
S'N'
sg14
I1
sa(dp290
g16
(lp291
S'k'
asg40
I369
sS'.thisRepN'
p292
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p293
I31
sS'.thisN'
p294
I31
sS'.thisIndex'
p295
g45
(g47
S'q\x01\x00\x00'
tRp296
sg15
(lp297
S'd'
asg17
S'N'
sg14
I1
sa(dp298
g16
(lp299
S'k'
asg40
I474
sS'.thisRepN'
p300
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p301
I32
sS'.thisN'
p302
I32
sS'.thisIndex'
p303
g45
(g47
S'\xda\x01\x00\x00'
tRp304
sg15
(lp305
S'k'
asg17
S'Y'
sg14
I1
sa(dp306
g16
(lp307
S'd'
asg40
I180
sS'.thisRepN'
p308
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p309
I33
sS'.thisN'
p310
I33
sS'.thisIndex'
p311
g45
(g47
S'\xb4\x00\x00\x00'
tRp312
sg15
(lp313
S'd'
asg17
S'Y'
sg14
I1
sa(dp314
g16
(lp315
S'k'
asg40
I374
sS'.thisRepN'
p316
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p317
I34
sS'.thisN'
p318
I34
sS'.thisIndex'
p319
g45
(g47
S'v\x01\x00\x00'
tRp320
sg15
(lp321
S'd'
asg17
S'N'
sg14
I1
sa(dp322
g16
(lp323
S'd'
asg40
I160
sS'.thisRepN'
p324
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p325
I35
sS'.thisN'
p326
I35
sS'.thisIndex'
p327
g45
(g47
S'\xa0\x00\x00\x00'
tRp328
sg15
(lp329
S'k'
asg17
S'N'
sg14
I1
sa(dp330
g16
(lp331
S'k'
asg40
I455
sS'.thisRepN'
p332
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p333
I36
sS'.thisN'
p334
I36
sS'.thisIndex'
p335
g45
(g47
S'\xc7\x01\x00\x00'
tRp336
sg15
(lp337
S'd'
asg17
S'N'
sg14
I1
sa(dp338
g16
(lp339
S'd'
asg40
I125
sS'.thisRepN'
p340
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p341
I37
sS'.thisN'
p342
I37
sS'.thisIndex'
p343
g45
(g47
S'}\x00\x00\x00'
tRp344
sg15
(lp345
S'k'
asg17
S'N'
sg14
I1
sa(dp346
g16
(lp347
S'k'
asg40
I443
sS'.thisRepN'
p348
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p349
I38
sS'.thisN'
p350
I38
sS'.thisIndex'
p351
g45
(g47
S'\xbb\x01\x00\x00'
tRp352
sg15
(lp353
S'd'
asg17
S'N'
sg14
I1
sa(dp354
g16
(lp355
S'd'
asg40
I77
sS'.thisRepN'
p356
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p357
I39
sS'.thisN'
p358
I39
sS'.thisIndex'
p359
g45
(g47
S'M\x00\x00\x00'
tRp360
sg15
(lp361
S'k'
asg17
S'N'
sg14
I1
sa(dp362
g16
(lp363
S'k'
asg40
I426
sS'.thisRepN'
p364
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p365
I40
sS'.thisN'
p366
I40
sS'.thisIndex'
p367
g45
(g47
S'\xaa\x01\x00\x00'
tRp368
sg15
(lp369
S'd'
asg17
S'N'
sg14
I1
sa(dp370
g16
(lp371
S'd'
asg40
I30
sS'.thisRepN'
p372
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p373
I41
sS'.thisN'
p374
I41
sS'.thisIndex'
p375
g45
(g47
S'\x1e\x00\x00\x00'
tRp376
sg15
(lp377
S'k'
asg17
S'N'
sg14
I1
sa(dp378
g16
(lp379
S'k'
asg40
I586
sS'.thisRepN'
p380
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p381
I42
sS'.thisN'
p382
I42
sS'.thisIndex'
p383
g45
(g47
S'J\x02\x00\x00'
tRp384
sg15
(lp385
S'd'
asg17
S'N'
sg14
I1
sa(dp386
g16
(lp387
S'k'
asg40
I555
sS'.thisRepN'
p388
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p389
I43
sS'.thisN'
p390
I43
sS'.thisIndex'
p391
g45
(g47
S'+\x02\x00\x00'
tRp392
sg15
(lp393
S'k'
asg17
S'Y'
sg14
I1
sa(dp394
g16
(lp395
S'k'
asg40
I350
sS'.thisRepN'
p396
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p397
I44
sS'.thisN'
p398
I44
sS'.thisIndex'
p399
g45
(g47
S'^\x01\x00\x00'
tRp400
sg15
(lp401
S'd'
asg17
S'N'
sg14
I1
sa(dp402
g16
(lp403
S'k'
asg40
I541
sS'.thisRepN'
p404
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p405
I45
sS'.thisN'
p406
I45
sS'.thisIndex'
p407
g45
(g47
S'\x1d\x02\x00\x00'
tRp408
sg15
(lp409
S'k'
asg17
S'Y'
sg14
I1
sa(dp410
g16
(lp411
S'k'
asg40
I466
sS'.thisRepN'
p412
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p413
I46
sS'.thisN'
p414
I46
sS'.thisIndex'
p415
g45
(g47
S'\xd2\x01\x00\x00'
tRp416
sg15
(lp417
S'k'
asg17
S'Y'
sg14
I1
sa(dp418
g16
(lp419
S'k'
asg40
I368
sS'.thisRepN'
p420
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p421
I47
sS'.thisN'
p422
I47
sS'.thisIndex'
p423
g45
(g47
S'p\x01\x00\x00'
tRp424
sg15
(lp425
S'd'
asg17
S'N'
sg14
I1
sa(dp426
g16
(lp427
S'k'
asg40
I399
sS'.thisRepN'
p428
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p429
I48
sS'.thisN'
p430
I48
sS'.thisIndex'
p431
g45
(g47
S'\x8f\x01\x00\x00'
tRp432
sg15
(lp433
S'k'
asg17
S'Y'
sg14
I1
sa(dp434
g16
(lp435
S'k'
asg40
I451
sS'.thisRepN'
p436
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p437
I49
sS'.thisN'
p438
I49
sS'.thisIndex'
p439
g45
(g47
S'\xc3\x01\x00\x00'
tRp440
sg15
(lp441
S'd'
asg17
S'N'
sg14
I1
sa(dp442
g16
(lp443
S'k'
asg40
I454
sS'.thisRepN'
p444
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p445
I50
sS'.thisN'
p446
I50
sS'.thisIndex'
p447
g45
(g47
S'\xc6\x01\x00\x00'
tRp448
sg15
(lp449
S'd'
asg17
S'N'
sg14
I2
sa(dp450
g16
(lp451
S'd'
asg40
I267
sS'.thisRepN'
p452
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p453
I51
sS'.thisN'
p454
I51
sS'.thisIndex'
p455
g45
(g47
S'\x0b\x01\x00\x00'
tRp456
sg15
(lp457
S'd'
asg17
S'Y'
sg14
I2
sa(dp458
g16
(lp459
S'k'
asg40
I331
sS'.thisRepN'
p460
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p461
I52
sS'.thisN'
p462
I52
sS'.thisIndex'
p463
g45
(g47
S'K\x01\x00\x00'
tRp464
sg15
(lp465
S'd'
asg17
S'N'
sg14
I2
sa(dp466
g16
(lp467
S'd'
asg40
I34
sS'.thisRepN'
p468
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p469
I53
sS'.thisN'
p470
I53
sS'.thisIndex'
p471
g45
(g47
S'"\x00\x00\x00'
tRp472
sg15
(lp473
S'd'
asg17
S'Y'
sg14
I2
sa(dp474
g16
(lp475
S'd'
asg40
I229
sS'.thisRepN'
p476
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p477
I54
sS'.thisN'
p478
I54
sS'.thisIndex'
p479
g45
(g47
S'\xe5\x00\x00\x00'
tRp480
sg15
(lp481
S'd'
asg17
S'Y'
sg14
I2
sa(dp482
g16
(lp483
S'd'
asg40
I31
sS'.thisRepN'
p484
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p485
I55
sS'.thisN'
p486
I55
sS'.thisIndex'
p487
g45
(g47
S'\x1f\x00\x00\x00'
tRp488
sg15
(lp489
S'd'
asg17
S'Y'
sg14
I2
sa(dp490
g16
(lp491
S'k'
asg40
I460
sS'.thisRepN'
p492
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p493
I56
sS'.thisN'
p494
I56
sS'.thisIndex'
p495
g45
(g47
S'\xcc\x01\x00\x00'
tRp496
sg15
(lp497
S'd'
asg17
S'N'
sg14
I2
sa(dp498
g16
(lp499
S'd'
asg40
I181
sS'.thisRepN'
p500
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p501
I57
sS'.thisN'
p502
I57
sS'.thisIndex'
p503
g45
(g47
S'\xb5\x00\x00\x00'
tRp504
sg15
(lp505
S'd'
asg17
S'Y'
sg14
I2
sa(dp506
g16
(lp507
S'k'
asg40
I300
sS'.thisRepN'
p508
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p509
I58
sS'.thisN'
p510
I58
sS'.thisIndex'
p511
g45
(g47
S',\x01\x00\x00'
tRp512
sg15
(lp513
S'd'
asg17
S'N'
sg14
I2
sa(dp514
g16
(lp515
S'd'
asg40
I89
sS'.thisRepN'
p516
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p517
I59
sS'.thisN'
p518
I59
sS'.thisIndex'
p519
g45
(g47
S'Y\x00\x00\x00'
tRp520
sg15
(lp521
S'd'
asg17
S'Y'
sg14
I2
sa(dp522
g16
(lp523
S'd'
asg40
I179
sS'.thisRepN'
p524
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p525
I60
sS'.thisN'
p526
I60
sS'.thisIndex'
p527
g45
(g47
S'\xb3\x00\x00\x00'
tRp528
sg15
(lp529
S'd'
asg17
S'Y'
sg14
I2
sa(dp530
g16
(lp531
S'd'
asg40
I131
sS'.thisRepN'
p532
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p533
I61
sS'.thisN'
p534
I61
sS'.thisIndex'
p535
g45
(g47
S'\x83\x00\x00\x00'
tRp536
sg15
(lp537
S'd'
asg17
S'Y'
sg14
I2
sa(dp538
g16
(lp539
S'd'
asg40
I16
sS'.thisRepN'
p540
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p541
I62
sS'.thisN'
p542
I62
sS'.thisIndex'
p543
g45
(g47
S'\x10\x00\x00\x00'
tRp544
sg15
(lp545
S'd'
asg17
S'Y'
sg14
I2
sa(dp546
g16
(lp547
S'k'
asg40
I514
sS'.thisRepN'
p548
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p549
I63
sS'.thisN'
p550
I63
sS'.thisIndex'
p551
g45
(g47
S'\x02\x02\x00\x00'
tRp552
sg15
(lp553
S'd'
asg17
S'N'
sg14
I2
sa(dp554
g16
(lp555
S'd'
asg40
I91
sS'.thisRepN'
p556
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p557
I64
sS'.thisN'
p558
I64
sS'.thisIndex'
p559
g45
(g47
S'[\x00\x00\x00'
tRp560
sg15
(lp561
S'd'
asg17
S'Y'
sg14
I2
sa(dp562
g16
(lp563
S'd'
asg40
I190
sS'.thisRepN'
p564
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p565
I65
sS'.thisN'
p566
I65
sS'.thisIndex'
p567
g45
(g47
S'\xbe\x00\x00\x00'
tRp568
sg15
(lp569
S'd'
asg17
S'Y'
sg14
I2
sa(dp570
g16
(lp571
S'k'
asg40
I548
sS'.thisRepN'
p572
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p573
I66
sS'.thisN'
p574
I66
sS'.thisIndex'
p575
g45
(g47
S'$\x02\x00\x00'
tRp576
sg15
(lp577
S'd'
asg17
S'N'
sg14
I2
sa(dp578
g16
(lp579
S'k'
asg40
I446
sS'.thisRepN'
p580
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p581
I67
sS'.thisN'
p582
I67
sS'.thisIndex'
p583
g45
(g47
S'\xbe\x01\x00\x00'
tRp584
sg15
(lp585
S'd'
asg17
S'N'
sg14
I2
sa(dp586
g16
(lp587
S'd'
asg40
I225
sS'.thisRepN'
p588
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p589
I68
sS'.thisN'
p590
I68
sS'.thisIndex'
p591
g45
(g47
S'\xe1\x00\x00\x00'
tRp592
sg15
(lp593
S'd'
asg17
S'Y'
sg14
I2
sa(dp594
g16
(lp595
S'd'
asg40
I262
sS'.thisRepN'
p596
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p597
I69
sS'.thisN'
p598
I69
sS'.thisIndex'
p599
g45
(g47
S'\x06\x01\x00\x00'
tRp600
sg15
(lp601
S'd'
asg17
S'Y'
sg14
I2
sa(dp602
g16
(lp603
S'k'
asg40
I396
sS'.thisRepN'
p604
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p605
I70
sS'.thisN'
p606
I70
sS'.thisIndex'
p607
g45
(g47
S'\x8c\x01\x00\x00'
tRp608
sg15
(lp609
S'd'
asg17
S'N'
sg14
I2
sa(dp610
g16
(lp611
S'd'
asg40
I272
sS'.thisRepN'
p612
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p613
I71
sS'.thisN'
p614
I71
sS'.thisIndex'
p615
g45
(g47
S'\x10\x01\x00\x00'
tRp616
sg15
(lp617
S'd'
asg17
S'Y'
sg14
I2
sa(dp618
g16
(lp619
S'd'
asg40
I254
sS'.thisRepN'
p620
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p621
I72
sS'.thisN'
p622
I72
sS'.thisIndex'
p623
g45
(g47
S'\xfe\x00\x00\x00'
tRp624
sg15
(lp625
S'd'
asg17
S'Y'
sg14
I2
sa(dp626
g16
(lp627
S'd'
asg40
I10
sS'.thisRepN'
p628
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p629
I73
sS'.thisN'
p630
I73
sS'.thisIndex'
p631
g45
(g47
S'\n\x00\x00\x00'
tRp632
sg15
(lp633
S'd'
asg17
S'Y'
sg14
I2
sa(dp634
g16
(lp635
S'd'
asg40
I241
sS'.thisRepN'
p636
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p637
I74
sS'.thisN'
p638
I74
sS'.thisIndex'
p639
g45
(g47
S'\xf1\x00\x00\x00'
tRp640
sg15
(lp641
S'd'
asg17
S'Y'
sg14
I2
sa(dp642
g16
(lp643
S'k'
asg40
I389
sS'.thisRepN'
p644
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p645
I75
sS'.thisN'
p646
I75
sS'.thisIndex'
p647
g45
(g47
S'\x85\x01\x00\x00'
tRp648
sg15
(lp649
S'd'
asg17
S'N'
sg14
I2
sa(dp650
g16
(lp651
S'k'
asg40
I415
sS'.thisRepN'
p652
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p653
I76
sS'.thisN'
p654
I76
sS'.thisIndex'
p655
g45
(g47
S'\x9f\x01\x00\x00'
tRp656
sg15
(lp657
S'd'
asg17
S'N'
sg14
I2
sa(dp658
g16
(lp659
S'k'
asg40
I403
sS'.thisRepN'
p660
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p661
I77
sS'.thisN'
p662
I77
sS'.thisIndex'
p663
g45
(g47
S'\x93\x01\x00\x00'
tRp664
sg15
(lp665
S'd'
asg17
S'N'
sg14
I2
sa(dp666
g16
(lp667
S'k'
asg40
I360
sS'.thisRepN'
p668
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p669
I78
sS'.thisN'
p670
I78
sS'.thisIndex'
p671
g45
(g47
S'h\x01\x00\x00'
tRp672
sg15
(lp673
S'd'
asg17
S'N'
sg14
I2
sa(dp674
g16
(lp675
S'k'
asg40
I539
sS'.thisRepN'
p676
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p677
I79
sS'.thisN'
p678
I79
sS'.thisIndex'
p679
g45
(g47
S'\x1b\x02\x00\x00'
tRp680
sg15
(lp681
S'd'
asg17
S'N'
sg14
I2
sa(dp682
g16
(lp683
S'k'
asg40
I540
sS'.thisRepN'
p684
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p685
I80
sS'.thisN'
p686
I80
sS'.thisIndex'
p687
g45
(g47
S'\x1c\x02\x00\x00'
tRp688
sg15
(lp689
S'd'
asg17
S'N'
sg14
I2
sa(dp690
g16
(lp691
S'd'
asg40
I151
sS'.thisRepN'
p692
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p693
I81
sS'.thisN'
p694
I81
sS'.thisIndex'
p695
g45
(g47
S'\x97\x00\x00\x00'
tRp696
sg15
(lp697
S'd'
asg17
S'Y'
sg14
I2
sa(dp698
g16
(lp699
S'd'
asg40
I166
sS'.thisRepN'
p700
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p701
I82
sS'.thisN'
p702
I82
sS'.thisIndex'
p703
g45
(g47
S'\xa6\x00\x00\x00'
tRp704
sg15
(lp705
S'd'
asg17
S'Y'
sg14
I2
sa(dp706
g16
(lp707
S'd'
asg40
I269
sS'.thisRepN'
p708
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p709
I83
sS'.thisN'
p710
I83
sS'.thisIndex'
p711
g45
(g47
S'\r\x01\x00\x00'
tRp712
sg15
(lp713
S'd'
asg17
S'Y'
sg14
I2
sa(dp714
g16
(lp715
S'd'
asg40
I250
sS'.thisRepN'
p716
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p717
I84
sS'.thisN'
p718
I84
sS'.thisIndex'
p719
g45
(g47
S'\xfa\x00\x00\x00'
tRp720
sg15
(lp721
S'd'
asg17
S'Y'
sg14
I2
sa(dp722
g16
(lp723
S'd'
asg40
I226
sS'.thisRepN'
p724
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p725
I85
sS'.thisN'
p726
I85
sS'.thisIndex'
p727
g45
(g47
S'\xe2\x00\x00\x00'
tRp728
sg15
(lp729
S'd'
asg17
S'Y'
sg14
I2
sa(dp730
g16
(lp731
S'd'
asg40
I206
sS'.thisRepN'
p732
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p733
I86
sS'.thisN'
p734
I86
sS'.thisIndex'
p735
g45
(g47
S'\xce\x00\x00\x00'
tRp736
sg15
(lp737
S'd'
asg17
S'Y'
sg14
I2
sa(dp738
g16
(lp739
S'd'
asg40
I259
sS'.thisRepN'
p740
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p741
I87
sS'.thisN'
p742
I87
sS'.thisIndex'
p743
g45
(g47
S'\x03\x01\x00\x00'
tRp744
sg15
(lp745
S'd'
asg17
S'Y'
sg14
I2
sa(dp746
g16
(lp747
S'd'
asg40
I238
sS'.thisRepN'
p748
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p749
I88
sS'.thisN'
p750
I88
sS'.thisIndex'
p751
g45
(g47
S'\xee\x00\x00\x00'
tRp752
sg15
(lp753
S'd'
asg17
S'Y'
sg14
I2
sa(dp754
g16
(lp755
S'k'
asg40
I338
sS'.thisRepN'
p756
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p757
I89
sS'.thisN'
p758
I89
sS'.thisIndex'
p759
g45
(g47
S'R\x01\x00\x00'
tRp760
sg15
(lp761
S'd'
asg17
S'N'
sg14
I2
sa(dp762
g16
(lp763
S'd'
asg40
I86
sS'.thisRepN'
p764
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p765
I90
sS'.thisN'
p766
I90
sS'.thisIndex'
p767
g45
(g47
S'V\x00\x00\x00'
tRp768
sg15
(lp769
S'd'
asg17
S'Y'
sg14
I2
sa(dp770
g16
(lp771
S'd'
asg40
I197
sS'.thisRepN'
p772
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p773
I91
sS'.thisN'
p774
I91
sS'.thisIndex'
p775
g45
(g47
S'\xc5\x00\x00\x00'
tRp776
sg15
(lp777
S'd'
asg17
S'Y'
sg14
I2
sa(dp778
g16
(lp779
S'k'
asg40
I468
sS'.thisRepN'
p780
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p781
I92
sS'.thisN'
p782
I92
sS'.thisIndex'
p783
g45
(g47
S'\xd4\x01\x00\x00'
tRp784
sg15
(lp785
S'd'
asg17
S'N'
sg14
I2
sa(dp786
g16
(lp787
S'k'
asg40
I401
sS'.thisRepN'
p788
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p789
I93
sS'.thisN'
p790
I93
sS'.thisIndex'
p791
g45
(g47
S'\x91\x01\x00\x00'
tRp792
sg15
(lp793
S'd'
asg17
S'N'
sg14
I2
sa(dp794
g16
(lp795
S'd'
asg40
I256
sS'.thisRepN'
p796
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p797
I94
sS'.thisN'
p798
I94
sS'.thisIndex'
p799
g45
(g47
S'\x00\x01\x00\x00'
tRp800
sg15
(lp801
S'd'
asg17
S'Y'
sg14
I2
sa(dp802
g16
(lp803
S'k'
asg40
I328
sS'.thisRepN'
p804
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p805
I95
sS'.thisN'
p806
I95
sS'.thisIndex'
p807
g45
(g47
S'H\x01\x00\x00'
tRp808
sg15
(lp809
S'd'
asg17
S'N'
sg14
I2
sa(dp810
g16
(lp811
S'd'
asg40
I66
sS'.thisRepN'
p812
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p813
I96
sS'.thisN'
p814
I96
sS'.thisIndex'
p815
g45
(g47
S'B\x00\x00\x00'
tRp816
sg15
(lp817
S'd'
asg17
S'Y'
sg14
I2
sa(dp818
g16
(lp819
S'd'
asg40
I164
sS'.thisRepN'
p820
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p821
I97
sS'.thisN'
p822
I97
sS'.thisIndex'
p823
g45
(g47
S'\xa4\x00\x00\x00'
tRp824
sg15
(lp825
S'd'
asg17
S'Y'
sg14
I2
sa(dp826
g16
(lp827
S'd'
asg40
I298
sS'.thisRepN'
p828
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p829
I98
sS'.thisN'
p830
I98
sS'.thisIndex'
p831
g45
(g47
S'*\x01\x00\x00'
tRp832
sg15
(lp833
S'd'
asg17
S'Y'
sg14
I2
sa(dp834
g16
(lp835
S'k'
asg40
I521
sS'.thisRepN'
p836
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p837
I99
sS'.thisN'
p838
I99
sS'.thisIndex'
p839
g45
(g47
S'\t\x02\x00\x00'
tRp840
sg15
(lp841
S'd'
asg17
S'N'
sg14
I2
sa(dp842
g16
(lp843
S'k'
asg40
I394
sS'.thisRepN'
p844
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p845
I100
sS'.thisN'
p846
I100
sS'.thisIndex'
p847
g45
(g47
S'\x8a\x01\x00\x00'
tRp848
sg15
(lp849
S'd'
asg17
S'N'
sg14
I3
sa(dp850
g16
(lp851
S'k'
asg40
I476
sS'.thisRepN'
p852
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p853
I101
sS'.thisN'
p854
I101
sS'.thisIndex'
p855
g45
(g47
S'\xdc\x01\x00\x00'
tRp856
sg15
(lp857
S'd'
asg17
S'N'
sg14
I3
sa(dp858
g16
(lp859
S'k'
asg40
I354
sS'.thisRepN'
p860
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p861
I102
sS'.thisN'
p862
I102
sS'.thisIndex'
p863
g45
(g47
S'b\x01\x00\x00'
tRp864
sg15
(lp865
S'k'
asg17
S'Y'
sg14
I3
sa(dp866
g16
(lp867
S'k'
asg40
I551
sS'.thisRepN'
p868
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p869
I103
sS'.thisN'
p870
I103
sS'.thisIndex'
p871
g45
(g47
S"'\x02\x00\x00"
tRp872
sg15
(lp873
S'k'
asg17
S'Y'
sg14
I3
sa(dp874
g16
(lp875
S'd'
asg40
I19
sS'.thisRepN'
p876
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p877
I104
sS'.thisN'
p878
I104
sS'.thisIndex'
p879
g45
(g47
S'\x13\x00\x00\x00'
tRp880
sg15
(lp881
S'k'
asg17
S'N'
sg14
I3
sa(dp882
g16
(lp883
S'k'
asg40
I362
sS'.thisRepN'
p884
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p885
I105
sS'.thisN'
p886
I105
sS'.thisIndex'
p887
g45
(g47
S'j\x01\x00\x00'
tRp888
sg15
(lp889
S'k'
asg17
S'Y'
sg14
I3
sa(dp890
g16
(lp891
S'k'
asg40
I553
sS'.thisRepN'
p892
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p893
I106
sS'.thisN'
p894
I106
sS'.thisIndex'
p895
g45
(g47
S')\x02\x00\x00'
tRp896
sg15
(lp897
S'k'
asg17
S'Y'
sg14
I3
sa(dp898
g16
(lp899
S'd'
asg40
I96
sS'.thisRepN'
p900
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p901
I107
sS'.thisN'
p902
I107
sS'.thisIndex'
p903
g45
(g47
S'`\x00\x00\x00'
tRp904
sg15
(lp905
S'k'
asg17
S'N'
sg14
I3
sa(dp906
g16
(lp907
S'd'
asg40
I114
sS'.thisRepN'
p908
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p909
I108
sS'.thisN'
p910
I108
sS'.thisIndex'
p911
g45
(g47
S'r\x00\x00\x00'
tRp912
sg15
(lp913
S'k'
asg17
S'N'
sg14
I3
sa(dp914
g16
(lp915
S'd'
asg40
I60
sS'.thisRepN'
p916
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p917
I109
sS'.thisN'
p918
I109
sS'.thisIndex'
p919
g45
(g47
S'<\x00\x00\x00'
tRp920
sg15
(lp921
S'k'
asg17
S'N'
sg14
I3
sa(dp922
g16
(lp923
S'd'
asg40
I188
sS'.thisRepN'
p924
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p925
I110
sS'.thisN'
p926
I110
sS'.thisIndex'
p927
g45
(g47
S'\xbc\x00\x00\x00'
tRp928
sg15
(lp929
S'k'
asg17
S'N'
sg14
I3
sa(dp930
g16
(lp931
S'd'
asg40
I237
sS'.thisRepN'
p932
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p933
I111
sS'.thisN'
p934
I111
sS'.thisIndex'
p935
g45
(g47
S'\xed\x00\x00\x00'
tRp936
sg15
(lp937
S'k'
asg17
S'N'
sg14
I3
sa(dp938
g16
(lp939
S'k'
asg40
I482
sS'.thisRepN'
p940
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p941
I112
sS'.thisN'
p942
I112
sS'.thisIndex'
p943
g45
(g47
S'\xe2\x01\x00\x00'
tRp944
sg15
(lp945
S'k'
asg17
S'Y'
sg14
I3
sa(dp946
g16
(lp947
S'k'
asg40
I550
sS'.thisRepN'
p948
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p949
I113
sS'.thisN'
p950
I113
sS'.thisIndex'
p951
g45
(g47
S'&\x02\x00\x00'
tRp952
sg15
(lp953
S'k'
asg17
S'Y'
sg14
I3
sa(dp954
g16
(lp955
S'd'
asg40
I205
sS'.thisRepN'
p956
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p957
I114
sS'.thisN'
p958
I114
sS'.thisIndex'
p959
g45
(g47
S'\xcd\x00\x00\x00'
tRp960
sg15
(lp961
S'k'
asg17
S'N'
sg14
I3
sa(dp962
g16
(lp963
S'd'
asg40
I73
sS'.thisRepN'
p964
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p965
I115
sS'.thisN'
p966
I115
sS'.thisIndex'
p967
g45
(g47
S'I\x00\x00\x00'
tRp968
sg15
(lp969
S'k'
asg17
S'N'
sg14
I3
sa(dp970
g16
(lp971
S'd'
asg40
I12
sS'.thisRepN'
p972
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p973
I116
sS'.thisN'
p974
I116
sS'.thisIndex'
p975
g45
(g47
S'\x0c\x00\x00\x00'
tRp976
sg15
(lp977
S'k'
asg17
S'N'
sg14
I3
sa(dp978
g16
(lp979
S'd'
asg40
I40
sS'.thisRepN'
p980
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p981
I117
sS'.thisN'
p982
I117
sS'.thisIndex'
p983
g45
(g47
S'(\x00\x00\x00'
tRp984
sg15
(lp985
S'k'
asg17
S'N'
sg14
I3
sa(dp986
g16
(lp987
S'k'
asg40
I558
sS'.thisRepN'
p988
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p989
I118
sS'.thisN'
p990
I118
sS'.thisIndex'
p991
g45
(g47
S'.\x02\x00\x00'
tRp992
sg15
(lp993
S'd'
asg17
S'N'
sg14
I3
sa(dp994
g16
(lp995
S'd'
asg40
I67
sS'.thisRepN'
p996
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p997
I119
sS'.thisN'
p998
I119
sS'.thisIndex'
p999
g45
(g47
S'C\x00\x00\x00'
tRp1000
sg15
(lp1001
S'k'
asg17
S'N'
sg14
I3
sa(dp1002
g16
(lp1003
S'k'
asg40
I441
sS'.thisRepN'
p1004
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1005
I120
sS'.thisN'
p1006
I120
sS'.thisIndex'
p1007
g45
(g47
S'\xb9\x01\x00\x00'
tRp1008
sg15
(lp1009
S'k'
asg17
S'Y'
sg14
I3
sa(dp1010
g16
(lp1011
S'k'
asg40
I424
sS'.thisRepN'
p1012
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1013
I121
sS'.thisN'
p1014
I121
sS'.thisIndex'
p1015
g45
(g47
S'\xa8\x01\x00\x00'
tRp1016
sg15
(lp1017
S'k'
asg17
S'Y'
sg14
I3
sa(dp1018
g16
(lp1019
S'k'
asg40
I559
sS'.thisRepN'
p1020
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1021
I122
sS'.thisN'
p1022
I122
sS'.thisIndex'
p1023
g45
(g47
S'/\x02\x00\x00'
tRp1024
sg15
(lp1025
S'k'
asg17
S'Y'
sg14
I3
sa(dp1026
g16
(lp1027
S'd'
asg40
I184
sS'.thisRepN'
p1028
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1029
I123
sS'.thisN'
p1030
I123
sS'.thisIndex'
p1031
g45
(g47
S'\xb8\x00\x00\x00'
tRp1032
sg15
(lp1033
S'k'
asg17
S'N'
sg14
I3
sa(dp1034
g16
(lp1035
S'd'
asg40
I201
sS'.thisRepN'
p1036
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1037
I124
sS'.thisN'
p1038
I124
sS'.thisIndex'
p1039
g45
(g47
S'\xc9\x00\x00\x00'
tRp1040
sg15
(lp1041
S'd'
asg17
S'Y'
sg14
I3
sa(dp1042
g16
(lp1043
S'd'
asg40
I120
sS'.thisRepN'
p1044
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1045
I125
sS'.thisN'
p1046
I125
sS'.thisIndex'
p1047
g45
(g47
S'x\x00\x00\x00'
tRp1048
sg15
(lp1049
S'k'
asg17
S'N'
sg14
I3
sa(dp1050
g16
(lp1051
S'k'
asg40
I487
sS'.thisRepN'
p1052
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1053
I126
sS'.thisN'
p1054
I126
sS'.thisIndex'
p1055
g45
(g47
S'\xe7\x01\x00\x00'
tRp1056
sg15
(lp1057
S'k'
asg17
S'Y'
sg14
I3
sa(dp1058
g16
(lp1059
S'k'
asg40
I301
sS'.thisRepN'
p1060
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1061
I127
sS'.thisN'
p1062
I127
sS'.thisIndex'
p1063
g45
(g47
S'-\x01\x00\x00'
tRp1064
sg15
(lp1065
S'k'
asg17
S'Y'
sg14
I3
sa(dp1066
g16
(lp1067
S'd'
asg40
I157
sS'.thisRepN'
p1068
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1069
I128
sS'.thisN'
p1070
I128
sS'.thisIndex'
p1071
g45
(g47
S'\x9d\x00\x00\x00'
tRp1072
sg15
(lp1073
S'k'
asg17
S'N'
sg14
I3
sa(dp1074
g16
(lp1075
S'k'
asg40
I588
sS'.thisRepN'
p1076
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1077
I129
sS'.thisN'
p1078
I129
sS'.thisIndex'
p1079
g45
(g47
S'L\x02\x00\x00'
tRp1080
sg15
(lp1081
S'd'
asg17
S'N'
sg14
I3
sa(dp1082
g16
(lp1083
S'k'
asg40
I563
sS'.thisRepN'
p1084
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1085
I130
sS'.thisN'
p1086
I130
sS'.thisIndex'
p1087
g45
(g47
S'3\x02\x00\x00'
tRp1088
sg15
(lp1089
S'k'
asg17
S'Y'
sg14
I3
sa(dp1090
g16
(lp1091
S'k'
asg40
I583
sS'.thisRepN'
p1092
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1093
I131
sS'.thisN'
p1094
I131
sS'.thisIndex'
p1095
g45
(g47
S'G\x02\x00\x00'
tRp1096
sg15
(lp1097
S'k'
asg17
S'Y'
sg14
I3
sa(dp1098
g16
(lp1099
S'k'
asg40
I314
sS'.thisRepN'
p1100
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1101
I132
sS'.thisN'
p1102
I132
sS'.thisIndex'
p1103
g45
(g47
S':\x01\x00\x00'
tRp1104
sg15
(lp1105
S'd'
asg17
S'N'
sg14
I3
sa(dp1106
g16
(lp1107
S'd'
asg40
I78
sS'.thisRepN'
p1108
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1109
I133
sS'.thisN'
p1110
I133
sS'.thisIndex'
p1111
g45
(g47
S'N\x00\x00\x00'
tRp1112
sg15
(lp1113
S'k'
asg17
S'N'
sg14
I3
sa(dp1114
g16
(lp1115
S'k'
asg40
I486
sS'.thisRepN'
p1116
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1117
I134
sS'.thisN'
p1118
I134
sS'.thisIndex'
p1119
g45
(g47
S'\xe6\x01\x00\x00'
tRp1120
sg15
(lp1121
S'k'
asg17
S'Y'
sg14
I3
sa(dp1122
g16
(lp1123
S'k'
asg40
I428
sS'.thisRepN'
p1124
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1125
I135
sS'.thisN'
p1126
I135
sS'.thisIndex'
p1127
g45
(g47
S'\xac\x01\x00\x00'
tRp1128
sg15
(lp1129
S'k'
asg17
S'Y'
sg14
I3
sa(dp1130
g16
(lp1131
S'd'
asg40
I224
sS'.thisRepN'
p1132
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1133
I136
sS'.thisN'
p1134
I136
sS'.thisIndex'
p1135
g45
(g47
S'\xe0\x00\x00\x00'
tRp1136
sg15
(lp1137
S'k'
asg17
S'N'
sg14
I3
sa(dp1138
g16
(lp1139
S'k'
asg40
I343
sS'.thisRepN'
p1140
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1141
I137
sS'.thisN'
p1142
I137
sS'.thisIndex'
p1143
g45
(g47
S'W\x01\x00\x00'
tRp1144
sg15
(lp1145
S'k'
asg17
S'Y'
sg14
I3
sa(dp1146
g16
(lp1147
S'k'
asg40
I353
sS'.thisRepN'
p1148
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1149
I138
sS'.thisN'
p1150
I138
sS'.thisIndex'
p1151
g45
(g47
S'a\x01\x00\x00'
tRp1152
sg15
(lp1153
S'k'
asg17
S'Y'
sg14
I3
sa(dp1154
g16
(lp1155
S'k'
asg40
I445
sS'.thisRepN'
p1156
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1157
I139
sS'.thisN'
p1158
I139
sS'.thisIndex'
p1159
g45
(g47
S'\xbd\x01\x00\x00'
tRp1160
sg15
(lp1161
S'k'
asg17
S'Y'
sg14
I3
sa(dp1162
g16
(lp1163
S'k'
asg40
I365
sS'.thisRepN'
p1164
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1165
I140
sS'.thisN'
p1166
I140
sS'.thisIndex'
p1167
g45
(g47
S'm\x01\x00\x00'
tRp1168
sg15
(lp1169
S'k'
asg17
S'Y'
sg14
I3
sa(dp1170
g16
(lp1171
S'k'
asg40
I462
sS'.thisRepN'
p1172
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1173
I141
sS'.thisN'
p1174
I141
sS'.thisIndex'
p1175
g45
(g47
S'\xce\x01\x00\x00'
tRp1176
sg15
(lp1177
S'k'
asg17
S'Y'
sg14
I3
sa(dp1178
g16
(lp1179
S'k'
asg40
I562
sS'.thisRepN'
p1180
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1181
I142
sS'.thisN'
p1182
I142
sS'.thisIndex'
p1183
g45
(g47
S'2\x02\x00\x00'
tRp1184
sg15
(lp1185
S'k'
asg17
S'Y'
sg14
I3
sa(dp1186
g16
(lp1187
S'd'
asg40
I210
sS'.thisRepN'
p1188
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1189
I143
sS'.thisN'
p1190
I143
sS'.thisIndex'
p1191
g45
(g47
S'\xd2\x00\x00\x00'
tRp1192
sg15
(lp1193
S'k'
asg17
S'N'
sg14
I3
sa(dp1194
g16
(lp1195
S'k'
asg40
I543
sS'.thisRepN'
p1196
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1197
I144
sS'.thisN'
p1198
I144
sS'.thisIndex'
p1199
g45
(g47
S'\x1f\x02\x00\x00'
tRp1200
sg15
(lp1201
S'k'
asg17
S'Y'
sg14
I3
sa(dp1202
g16
(lp1203
S'k'
asg40
I526
sS'.thisRepN'
p1204
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1205
I145
sS'.thisN'
p1206
I145
sS'.thisIndex'
p1207
g45
(g47
S'\x0e\x02\x00\x00'
tRp1208
sg15
(lp1209
S'k'
asg17
S'Y'
sg14
I3
sa(dp1210
g16
(lp1211
S'k'
asg40
I557
sS'.thisRepN'
p1212
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1213
I146
sS'.thisN'
p1214
I146
sS'.thisIndex'
p1215
g45
(g47
S'-\x02\x00\x00'
tRp1216
sg15
(lp1217
S'k'
asg17
S'Y'
sg14
I3
sa(dp1218
g16
(lp1219
S'd'
asg40
I58
sS'.thisRepN'
p1220
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1221
I147
sS'.thisN'
p1222
I147
sS'.thisIndex'
p1223
g45
(g47
S':\x00\x00\x00'
tRp1224
sg15
(lp1225
S'k'
asg17
S'N'
sg14
I3
sa(dp1226
g16
(lp1227
S'k'
asg40
I406
sS'.thisRepN'
p1228
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1229
I148
sS'.thisN'
p1230
I148
sS'.thisIndex'
p1231
g45
(g47
S'\x96\x01\x00\x00'
tRp1232
sg15
(lp1233
S'k'
asg17
S'Y'
sg14
I3
sa(dp1234
g16
(lp1235
S'd'
asg40
I294
sS'.thisRepN'
p1236
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1237
I149
sS'.thisN'
p1238
I149
sS'.thisIndex'
p1239
g45
(g47
S'&\x01\x00\x00'
tRp1240
sg15
(lp1241
S'k'
asg17
S'N'
sg14
I3
sa(dp1242
g16
(lp1243
S'd'
asg40
I207
sS'.thisRepN'
p1244
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1245
I150
sS'.thisN'
p1246
I150
sS'.thisIndex'
p1247
g45
(g47
S'\xcf\x00\x00\x00'
tRp1248
sg15
(lp1249
S'k'
asg17
S'N'
sg14
I4
sa(dp1250
g16
(lp1251
S'd'
asg40
I104
sS'.thisRepN'
p1252
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1253
I151
sS'.thisN'
p1254
I151
sS'.thisIndex'
p1255
g45
(g47
S'h\x00\x00\x00'
tRp1256
sg15
(lp1257
S'k'
asg17
S'N'
sg14
I4
sa(dp1258
g16
(lp1259
S'k'
asg40
I348
sS'.thisRepN'
p1260
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1261
I152
sS'.thisN'
p1262
I152
sS'.thisIndex'
p1263
g45
(g47
S'\\\x01\x00\x00'
tRp1264
sg15
(lp1265
S'k'
asg17
S'Y'
sg14
I4
sa(dp1266
g16
(lp1267
S'd'
asg40
I71
sS'.thisRepN'
p1268
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1269
I153
sS'.thisN'
p1270
I153
sS'.thisIndex'
p1271
g45
(g47
S'G\x00\x00\x00'
tRp1272
sg15
(lp1273
S'k'
asg17
S'N'
sg14
I4
sa(dp1274
g16
(lp1275
S'd'
asg40
I121
sS'.thisRepN'
p1276
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1277
I154
sS'.thisN'
p1278
I154
sS'.thisIndex'
p1279
g45
(g47
S'y\x00\x00\x00'
tRp1280
sg15
(lp1281
S'k'
asg17
S'N'
sg14
I4
sa(dp1282
g16
(lp1283
S'k'
asg40
I587
sS'.thisRepN'
p1284
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1285
I155
sS'.thisN'
p1286
I155
sS'.thisIndex'
p1287
g45
(g47
S'K\x02\x00\x00'
tRp1288
sg15
(lp1289
S'k'
asg17
S'Y'
sg14
I4
sa(dp1290
g16
(lp1291
S'k'
asg40
I492
sS'.thisRepN'
p1292
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1293
I156
sS'.thisN'
p1294
I156
sS'.thisIndex'
p1295
g45
(g47
S'\xec\x01\x00\x00'
tRp1296
sg15
(lp1297
S'k'
asg17
S'Y'
sg14
I4
sa(dp1298
g16
(lp1299
S'k'
asg40
I481
sS'.thisRepN'
p1300
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1301
I157
sS'.thisN'
p1302
I157
sS'.thisIndex'
p1303
g45
(g47
S'\xe1\x01\x00\x00'
tRp1304
sg15
(lp1305
S'k'
asg17
S'Y'
sg14
I4
sa(dp1306
g16
(lp1307
S'd'
asg40
I176
sS'.thisRepN'
p1308
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1309
I158
sS'.thisN'
p1310
I158
sS'.thisIndex'
p1311
g45
(g47
S'\xb0\x00\x00\x00'
tRp1312
sg15
(lp1313
S'k'
asg17
S'N'
sg14
I4
sa(dp1314
g16
(lp1315
S'k'
asg40
I433
sS'.thisRepN'
p1316
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1317
I159
sS'.thisN'
p1318
I159
sS'.thisIndex'
p1319
g45
(g47
S'\xb1\x01\x00\x00'
tRp1320
sg15
(lp1321
S'k'
asg17
S'Y'
sg14
I4
sa(dp1322
g16
(lp1323
S'k'
asg40
I581
sS'.thisRepN'
p1324
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1325
I160
sS'.thisN'
p1326
I160
sS'.thisIndex'
p1327
g45
(g47
S'E\x02\x00\x00'
tRp1328
sg15
(lp1329
S'k'
asg17
S'Y'
sg14
I4
sa(dp1330
g16
(lp1331
S'k'
asg40
I529
sS'.thisRepN'
p1332
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1333
I161
sS'.thisN'
p1334
I161
sS'.thisIndex'
p1335
g45
(g47
S'\x11\x02\x00\x00'
tRp1336
sg15
(lp1337
S'k'
asg17
S'Y'
sg14
I4
sa(dp1338
g16
(lp1339
S'd'
asg40
I200
sS'.thisRepN'
p1340
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1341
I162
sS'.thisN'
p1342
I162
sS'.thisIndex'
p1343
g45
(g47
S'\xc8\x00\x00\x00'
tRp1344
sg15
(lp1345
S'k'
asg17
S'N'
sg14
I4
sa(dp1346
g16
(lp1347
S'k'
asg40
I417
sS'.thisRepN'
p1348
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1349
I163
sS'.thisN'
p1350
I163
sS'.thisIndex'
p1351
g45
(g47
S'\xa1\x01\x00\x00'
tRp1352
sg15
(lp1353
S'k'
asg17
S'Y'
sg14
I4
sa(dp1354
g16
(lp1355
S'd'
asg40
I113
sS'.thisRepN'
p1356
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1357
I164
sS'.thisN'
p1358
I164
sS'.thisIndex'
p1359
g45
(g47
S'q\x00\x00\x00'
tRp1360
sg15
(lp1361
S'k'
asg17
S'N'
sg14
I4
sa(dp1362
g16
(lp1363
S'k'
asg40
I496
sS'.thisRepN'
p1364
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1365
I165
sS'.thisN'
p1366
I165
sS'.thisIndex'
p1367
g45
(g47
S'\xf0\x01\x00\x00'
tRp1368
sg15
(lp1369
S'k'
asg17
S'Y'
sg14
I4
sa(dp1370
g16
(lp1371
S'd'
asg40
I14
sS'.thisRepN'
p1372
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1373
I166
sS'.thisN'
p1374
I166
sS'.thisIndex'
p1375
g45
(g47
S'\x0e\x00\x00\x00'
tRp1376
sg15
(lp1377
S'k'
asg17
S'N'
sg14
I4
sa(dp1378
g16
(lp1379
S'd'
asg40
I198
sS'.thisRepN'
p1380
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1381
I167
sS'.thisN'
p1382
I167
sS'.thisIndex'
p1383
g45
(g47
S'\xc6\x00\x00\x00'
tRp1384
sg15
(lp1385
S'k'
asg17
S'N'
sg14
I4
sa(dp1386
g16
(lp1387
S'd'
asg40
I248
sS'.thisRepN'
p1388
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1389
I168
sS'.thisN'
p1390
I168
sS'.thisIndex'
p1391
g45
(g47
S'\xf8\x00\x00\x00'
tRp1392
sg15
(lp1393
S'k'
asg17
S'N'
sg14
I4
sa(dp1394
g16
(lp1395
S'k'
asg40
I592
sS'.thisRepN'
p1396
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1397
I169
sS'.thisN'
p1398
I169
sS'.thisIndex'
p1399
g45
(g47
S'P\x02\x00\x00'
tRp1400
sg15
(lp1401
S'k'
asg17
S'Y'
sg14
I4
sa(dp1402
g16
(lp1403
S'd'
asg40
I230
sS'.thisRepN'
p1404
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1405
I170
sS'.thisN'
p1406
I170
sS'.thisIndex'
p1407
g45
(g47
S'\xe6\x00\x00\x00'
tRp1408
sg15
(lp1409
S'k'
asg17
S'N'
sg14
I4
sa(dp1410
g16
(lp1411
S'd'
asg40
I217
sS'.thisRepN'
p1412
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1413
I171
sS'.thisN'
p1414
I171
sS'.thisIndex'
p1415
g45
(g47
S'\xd9\x00\x00\x00'
tRp1416
sg15
(lp1417
S'k'
asg17
S'N'
sg14
I4
sa(dp1418
g16
(lp1419
S'd'
asg40
I274
sS'.thisRepN'
p1420
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1421
I172
sS'.thisN'
p1422
I172
sS'.thisIndex'
p1423
g45
(g47
S'\x12\x01\x00\x00'
tRp1424
sg15
(lp1425
S'k'
asg17
S'N'
sg14
I4
sa(dp1426
g16
(lp1427
S'k'
asg40
I590
sS'.thisRepN'
p1428
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1429
I173
sS'.thisN'
p1430
I173
sS'.thisIndex'
p1431
g45
(g47
S'N\x02\x00\x00'
tRp1432
sg15
(lp1433
S'd'
asg17
S'N'
sg14
I4
sa(dp1434
g16
(lp1435
S'd'
asg40
I208
sS'.thisRepN'
p1436
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1437
I174
sS'.thisN'
p1438
I174
sS'.thisIndex'
p1439
g45
(g47
S'\xd0\x00\x00\x00'
tRp1440
sg15
(lp1441
S'k'
asg17
S'N'
sg14
I4
sa(dp1442
g16
(lp1443
S'd'
asg40
I24
sS'.thisRepN'
p1444
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1445
I175
sS'.thisN'
p1446
I175
sS'.thisIndex'
p1447
g45
(g47
S'\x18\x00\x00\x00'
tRp1448
sg15
(lp1449
S'k'
asg17
S'N'
sg14
I4
sa(dp1450
g16
(lp1451
S'd'
asg40
I186
sS'.thisRepN'
p1452
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1453
I176
sS'.thisN'
p1454
I176
sS'.thisIndex'
p1455
g45
(g47
S'\xba\x00\x00\x00'
tRp1456
sg15
(lp1457
S'k'
asg17
S'N'
sg14
I4
sa(dp1458
g16
(lp1459
S'd'
asg40
I27
sS'.thisRepN'
p1460
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1461
I177
sS'.thisN'
p1462
I177
sS'.thisIndex'
p1463
g45
(g47
S'\x1b\x00\x00\x00'
tRp1464
sg15
(lp1465
S'd'
asg17
S'Y'
sg14
I4
sa(dp1466
g16
(lp1467
S'k'
asg40
I504
sS'.thisRepN'
p1468
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1469
I178
sS'.thisN'
p1470
I178
sS'.thisIndex'
p1471
g45
(g47
S'\xf8\x01\x00\x00'
tRp1472
sg15
(lp1473
S'd'
asg17
S'N'
sg14
I4
sa(dp1474
g16
(lp1475
S'k'
asg40
I383
sS'.thisRepN'
p1476
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1477
I179
sS'.thisN'
p1478
I179
sS'.thisIndex'
p1479
g45
(g47
S'\x7f\x01\x00\x00'
tRp1480
sg15
(lp1481
S'd'
asg17
S'N'
sg14
I4
sa(dp1482
g16
(lp1483
S'k'
asg40
I305
sS'.thisRepN'
p1484
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1485
I180
sS'.thisN'
p1486
I180
sS'.thisIndex'
p1487
g45
(g47
S'1\x01\x00\x00'
tRp1488
sg15
(lp1489
S'k'
asg17
S'Y'
sg14
I4
sa(dp1490
g16
(lp1491
S'k'
asg40
I427
sS'.thisRepN'
p1492
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1493
I181
sS'.thisN'
p1494
I181
sS'.thisIndex'
p1495
g45
(g47
S'\xab\x01\x00\x00'
tRp1496
sg15
(lp1497
S'k'
asg17
S'Y'
sg14
I4
sa(dp1498
g16
(lp1499
S'k'
asg40
I458
sS'.thisRepN'
p1500
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1501
I182
sS'.thisN'
p1502
I182
sS'.thisIndex'
p1503
g45
(g47
S'\xca\x01\x00\x00'
tRp1504
sg15
(lp1505
S'k'
asg17
S'Y'
sg14
I4
sa(dp1506
g16
(lp1507
S'd'
asg40
I148
sS'.thisRepN'
p1508
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1509
I183
sS'.thisN'
p1510
I183
sS'.thisIndex'
p1511
g45
(g47
S'\x94\x00\x00\x00'
tRp1512
sg15
(lp1513
S'k'
asg17
S'N'
sg14
I4
sa(dp1514
g16
(lp1515
S'k'
asg40
I477
sS'.thisRepN'
p1516
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1517
I184
sS'.thisN'
p1518
I184
sS'.thisIndex'
p1519
g45
(g47
S'\xdd\x01\x00\x00'
tRp1520
sg15
(lp1521
S'd'
asg17
S'N'
sg14
I4
sa(dp1522
g16
(lp1523
S'd'
asg40
I162
sS'.thisRepN'
p1524
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1525
I185
sS'.thisN'
p1526
I185
sS'.thisIndex'
p1527
g45
(g47
S'\xa2\x00\x00\x00'
tRp1528
sg15
(lp1529
S'd'
asg17
S'Y'
sg14
I4
sa(dp1530
g16
(lp1531
S'k'
asg40
I437
sS'.thisRepN'
p1532
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1533
I186
sS'.thisN'
p1534
I186
sS'.thisIndex'
p1535
g45
(g47
S'\xb5\x01\x00\x00'
tRp1536
sg15
(lp1537
S'd'
asg17
S'N'
sg14
I4
sa(dp1538
g16
(lp1539
S'd'
asg40
I83
sS'.thisRepN'
p1540
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1541
I187
sS'.thisN'
p1542
I187
sS'.thisIndex'
p1543
g45
(g47
S'S\x00\x00\x00'
tRp1544
sg15
(lp1545
S'd'
asg17
S'Y'
sg14
I4
sa(dp1546
g16
(lp1547
S'k'
asg40
I449
sS'.thisRepN'
p1548
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1549
I188
sS'.thisN'
p1550
I188
sS'.thisIndex'
p1551
g45
(g47
S'\xc1\x01\x00\x00'
tRp1552
sg15
(lp1553
S'k'
asg17
S'Y'
sg14
I4
sa(dp1554
g16
(lp1555
S'd'
asg40
I7
sS'.thisRepN'
p1556
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1557
I189
sS'.thisN'
p1558
I189
sS'.thisIndex'
p1559
g45
(g47
S'\x07\x00\x00\x00'
tRp1560
sg15
(lp1561
S'k'
asg17
S'N'
sg14
I4
sa(dp1562
g16
(lp1563
S'k'
asg40
I479
sS'.thisRepN'
p1564
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1565
I190
sS'.thisN'
p1566
I190
sS'.thisIndex'
p1567
g45
(g47
S'\xdf\x01\x00\x00'
tRp1568
sg15
(lp1569
S'd'
asg17
S'N'
sg14
I4
sa(dp1570
g16
(lp1571
S'k'
asg40
I335
sS'.thisRepN'
p1572
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1573
I191
sS'.thisN'
p1574
I191
sS'.thisIndex'
p1575
g45
(g47
S'O\x01\x00\x00'
tRp1576
sg15
(lp1577
S'd'
asg17
S'N'
sg14
I4
sa(dp1578
g16
(lp1579
S'k'
asg40
I371
sS'.thisRepN'
p1580
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1581
I192
sS'.thisN'
p1582
I192
sS'.thisIndex'
p1583
g45
(g47
S's\x01\x00\x00'
tRp1584
sg15
(lp1585
S'd'
asg17
S'N'
sg14
I4
sa(dp1586
g16
(lp1587
S'k'
asg40
I320
sS'.thisRepN'
p1588
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1589
I193
sS'.thisN'
p1590
I193
sS'.thisIndex'
p1591
g45
(g47
S'@\x01\x00\x00'
tRp1592
sg15
(lp1593
S'd'
asg17
S'N'
sg14
I4
sa(dp1594
g16
(lp1595
S'd'
asg40
I25
sS'.thisRepN'
p1596
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1597
I194
sS'.thisN'
p1598
I194
sS'.thisIndex'
p1599
g45
(g47
S'\x19\x00\x00\x00'
tRp1600
sg15
(lp1601
S'k'
asg17
S'N'
sg14
I4
sa(dp1602
g16
(lp1603
S'd'
asg40
I92
sS'.thisRepN'
p1604
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1605
I195
sS'.thisN'
p1606
I195
sS'.thisIndex'
p1607
g45
(g47
S'\\\x00\x00\x00'
tRp1608
sg15
(lp1609
S'd'
asg17
S'Y'
sg14
I4
sa(dp1610
g16
(lp1611
S'd'
asg40
I5
sS'.thisRepN'
p1612
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1613
I196
sS'.thisN'
p1614
I196
sS'.thisIndex'
p1615
g45
(g47
S'\x05\x00\x00\x00'
tRp1616
sg15
(lp1617
S'k'
asg17
S'N'
sg14
I4
sa(dp1618
g16
(lp1619
S'k'
asg40
I304
sS'.thisRepN'
p1620
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1621
I197
sS'.thisN'
p1622
I197
sS'.thisIndex'
p1623
g45
(g47
S'0\x01\x00\x00'
tRp1624
sg15
(lp1625
S'd'
asg17
S'N'
sg14
I4
sa(dp1626
g16
(lp1627
S'd'
asg40
I49
sS'.thisRepN'
p1628
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1629
I198
sS'.thisN'
p1630
I198
sS'.thisIndex'
p1631
g45
(g47
S'1\x00\x00\x00'
tRp1632
sg15
(lp1633
S'd'
asg17
S'Y'
sg14
I4
sa(dp1634
g16
(lp1635
S'd'
asg40
I219
sS'.thisRepN'
p1636
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1637
I199
sS'.thisN'
p1638
I199
sS'.thisIndex'
p1639
g45
(g47
S'\xdb\x00\x00\x00'
tRp1640
sg15
(lp1641
S'd'
asg17
S'Y'
sg14
I4
sa(dp1642
g16
(lp1643
S'k'
asg40
I570
sS'.thisRepN'
p1644
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1645
I200
sS'.thisN'
p1646
I200
sS'.thisIndex'
p1647
g45
(g47
S':\x02\x00\x00'
tRp1648
sg15
(lp1649
S'd'
asg17
S'N'
sg14
I5
sa(dp1650
g16
(lp1651
S'k'
asg40
I416
sS'.thisRepN'
p1652
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1653
I201
sS'.thisN'
p1654
I201
sS'.thisIndex'
p1655
g45
(g47
S'\xa0\x01\x00\x00'
tRp1656
sg15
(lp1657
S'd'
asg17
S'N'
sg14
I5
sa(dp1658
g16
(lp1659
S'd'
asg40
I257
sS'.thisRepN'
p1660
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1661
I202
sS'.thisN'
p1662
I202
sS'.thisIndex'
p1663
g45
(g47
S'\x01\x01\x00\x00'
tRp1664
sg15
(lp1665
S'k'
asg17
S'N'
sg14
I5
sa(dp1666
g16
(lp1667
S'k'
asg40
I534
sS'.thisRepN'
p1668
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1669
I203
sS'.thisN'
p1670
I203
sS'.thisIndex'
p1671
g45
(g47
S'\x16\x02\x00\x00'
tRp1672
sg15
(lp1673
S'k'
asg17
S'Y'
sg14
I5
sa(dp1674
g16
(lp1675
S'd'
asg40
I137
sS'.thisRepN'
p1676
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1677
I204
sS'.thisN'
p1678
I204
sS'.thisIndex'
p1679
g45
(g47
S'\x89\x00\x00\x00'
tRp1680
sg15
(lp1681
S'k'
asg17
S'N'
sg14
I5
sa(dp1682
g16
(lp1683
S'k'
asg40
I491
sS'.thisRepN'
p1684
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1685
I205
sS'.thisN'
p1686
I205
sS'.thisIndex'
p1687
g45
(g47
S'\xeb\x01\x00\x00'
tRp1688
sg15
(lp1689
S'd'
asg17
S'N'
sg14
I5
sa(dp1690
g16
(lp1691
S'k'
asg40
I450
sS'.thisRepN'
p1692
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1693
I206
sS'.thisN'
p1694
I206
sS'.thisIndex'
p1695
g45
(g47
S'\xc2\x01\x00\x00'
tRp1696
sg15
(lp1697
S'd'
asg17
S'N'
sg14
I5
sa(dp1698
g16
(lp1699
S'k'
asg40
I464
sS'.thisRepN'
p1700
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1701
I207
sS'.thisN'
p1702
I207
sS'.thisIndex'
p1703
g45
(g47
S'\xd0\x01\x00\x00'
tRp1704
sg15
(lp1705
S'k'
asg17
S'Y'
sg14
I5
sa(dp1706
g16
(lp1707
S'k'
asg40
I344
sS'.thisRepN'
p1708
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1709
I208
sS'.thisN'
p1710
I208
sS'.thisIndex'
p1711
g45
(g47
S'X\x01\x00\x00'
tRp1712
sg15
(lp1713
S'k'
asg17
S'Y'
sg14
I5
sa(dp1714
g16
(lp1715
S'd'
asg40
I270
sS'.thisRepN'
p1716
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1717
I209
sS'.thisN'
p1718
I209
sS'.thisIndex'
p1719
g45
(g47
S'\x0e\x01\x00\x00'
tRp1720
sg15
(lp1721
S'd'
asg17
S'Y'
sg14
I5
sa(dp1722
g16
(lp1723
S'd'
asg40
I170
sS'.thisRepN'
p1724
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1725
I210
sS'.thisN'
p1726
I210
sS'.thisIndex'
p1727
g45
(g47
S'\xaa\x00\x00\x00'
tRp1728
sg15
(lp1729
S'k'
asg17
S'N'
sg14
I5
sa(dp1730
g16
(lp1731
S'k'
asg40
I420
sS'.thisRepN'
p1732
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1733
I211
sS'.thisN'
p1734
I211
sS'.thisIndex'
p1735
g45
(g47
S'\xa4\x01\x00\x00'
tRp1736
sg15
(lp1737
S'k'
asg17
S'Y'
sg14
I5
sa(dp1738
g16
(lp1739
S'd'
asg40
I94
sS'.thisRepN'
p1740
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1741
I212
sS'.thisN'
p1742
I212
sS'.thisIndex'
p1743
g45
(g47
S'^\x00\x00\x00'
tRp1744
sg15
(lp1745
S'k'
asg17
S'N'
sg14
I5
sa(dp1746
g16
(lp1747
S'k'
asg40
I520
sS'.thisRepN'
p1748
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1749
I213
sS'.thisN'
p1750
I213
sS'.thisIndex'
p1751
g45
(g47
S'\x08\x02\x00\x00'
tRp1752
sg15
(lp1753
S'd'
asg17
S'N'
sg14
I5
sa(dp1754
g16
(lp1755
S'k'
asg40
I407
sS'.thisRepN'
p1756
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1757
I214
sS'.thisN'
p1758
I214
sS'.thisIndex'
p1759
g45
(g47
S'\x97\x01\x00\x00'
tRp1760
sg15
(lp1761
S'd'
asg17
S'N'
sg14
I5
sa(dp1762
g16
(lp1763
S'k'
asg40
I501
sS'.thisRepN'
p1764
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1765
I215
sS'.thisN'
p1766
I215
sS'.thisIndex'
p1767
g45
(g47
S'\xf5\x01\x00\x00'
tRp1768
sg15
(lp1769
S'd'
asg17
S'N'
sg14
I5
sa(dp1770
g16
(lp1771
S'k'
asg40
I493
sS'.thisRepN'
p1772
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1773
I216
sS'.thisN'
p1774
I216
sS'.thisIndex'
p1775
g45
(g47
S'\xed\x01\x00\x00'
tRp1776
sg15
(lp1777
S'd'
asg17
S'N'
sg14
I5
sa(dp1778
g16
(lp1779
S'd'
asg40
I36
sS'.thisRepN'
p1780
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1781
I217
sS'.thisN'
p1782
I217
sS'.thisIndex'
p1783
g45
(g47
S'$\x00\x00\x00'
tRp1784
sg15
(lp1785
S'd'
asg17
S'Y'
sg14
I5
sa(dp1786
g16
(lp1787
S'k'
asg40
I578
sS'.thisRepN'
p1788
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1789
I218
sS'.thisN'
p1790
I218
sS'.thisIndex'
p1791
g45
(g47
S'B\x02\x00\x00'
tRp1792
sg15
(lp1793
S'd'
asg17
S'N'
sg14
I5
sa(dp1794
g16
(lp1795
S'k'
asg40
I537
sS'.thisRepN'
p1796
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1797
I219
sS'.thisN'
p1798
I219
sS'.thisIndex'
p1799
g45
(g47
S'\x19\x02\x00\x00'
tRp1800
sg15
(lp1801
S'd'
asg17
S'N'
sg14
I5
sa(dp1802
g16
(lp1803
S'k'
asg40
I513
sS'.thisRepN'
p1804
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1805
I220
sS'.thisN'
p1806
I220
sS'.thisIndex'
p1807
g45
(g47
S'\x01\x02\x00\x00'
tRp1808
sg15
(lp1809
S'd'
asg17
S'N'
sg14
I5
sa(dp1810
g16
(lp1811
S'k'
asg40
I472
sS'.thisRepN'
p1812
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1813
I221
sS'.thisN'
p1814
I221
sS'.thisIndex'
p1815
g45
(g47
S'\xd8\x01\x00\x00'
tRp1816
sg15
(lp1817
S'k'
asg17
S'Y'
sg14
I5
sa(dp1818
g16
(lp1819
S'd'
asg40
I74
sS'.thisRepN'
p1820
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1821
I222
sS'.thisN'
p1822
I222
sS'.thisIndex'
p1823
g45
(g47
S'J\x00\x00\x00'
tRp1824
sg15
(lp1825
S'd'
asg17
S'Y'
sg14
I5
sa(dp1826
g16
(lp1827
S'd'
asg40
I122
sS'.thisRepN'
p1828
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1829
I223
sS'.thisN'
p1830
I223
sS'.thisIndex'
p1831
g45
(g47
S'z\x00\x00\x00'
tRp1832
sg15
(lp1833
S'k'
asg17
S'N'
sg14
I5
sa(dp1834
g16
(lp1835
S'k'
asg40
I509
sS'.thisRepN'
p1836
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1837
I224
sS'.thisN'
p1838
I224
sS'.thisIndex'
p1839
g45
(g47
S'\xfd\x01\x00\x00'
tRp1840
sg15
(lp1841
S'd'
asg17
S'N'
sg14
I5
sa(dp1842
g16
(lp1843
S'd'
asg40
I215
sS'.thisRepN'
p1844
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1845
I225
sS'.thisN'
p1846
I225
sS'.thisIndex'
p1847
g45
(g47
S'\xd7\x00\x00\x00'
tRp1848
sg15
(lp1849
S'k'
asg17
S'N'
sg14
I5
sa(dp1850
g16
(lp1851
S'd'
asg40
I53
sS'.thisRepN'
p1852
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1853
I226
sS'.thisN'
p1854
I226
sS'.thisIndex'
p1855
g45
(g47
S'5\x00\x00\x00'
tRp1856
sg15
(lp1857
S'd'
asg17
S'Y'
sg14
I5
sa(dp1858
g16
(lp1859
S'd'
asg40
I149
sS'.thisRepN'
p1860
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1861
I227
sS'.thisN'
p1862
I227
sS'.thisIndex'
p1863
g45
(g47
S'\x95\x00\x00\x00'
tRp1864
sg15
(lp1865
S'k'
asg17
S'N'
sg14
I5
sa(dp1866
g16
(lp1867
S'd'
asg40
I249
sS'.thisRepN'
p1868
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1869
I228
sS'.thisN'
p1870
I228
sS'.thisIndex'
p1871
g45
(g47
S'\xf9\x00\x00\x00'
tRp1872
sg15
(lp1873
S'd'
asg17
S'Y'
sg14
I5
sa(dp1874
g16
(lp1875
S'k'
asg40
I439
sS'.thisRepN'
p1876
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1877
I229
sS'.thisN'
p1878
I229
sS'.thisIndex'
p1879
g45
(g47
S'\xb7\x01\x00\x00'
tRp1880
sg15
(lp1881
S'k'
asg17
S'Y'
sg14
I5
sa(dp1882
g16
(lp1883
S'k'
asg40
I532
sS'.thisRepN'
p1884
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1885
I230
sS'.thisN'
p1886
I230
sS'.thisIndex'
p1887
g45
(g47
S'\x14\x02\x00\x00'
tRp1888
sg15
(lp1889
S'd'
asg17
S'N'
sg14
I5
sa(dp1890
g16
(lp1891
S'd'
asg40
I233
sS'.thisRepN'
p1892
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1893
I231
sS'.thisN'
p1894
I231
sS'.thisIndex'
p1895
g45
(g47
S'\xe9\x00\x00\x00'
tRp1896
sg15
(lp1897
S'k'
asg17
S'N'
sg14
I5
sa(dp1898
g16
(lp1899
S'k'
asg40
I413
sS'.thisRepN'
p1900
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1901
I232
sS'.thisN'
p1902
I232
sS'.thisIndex'
p1903
g45
(g47
S'\x9d\x01\x00\x00'
tRp1904
sg15
(lp1905
S'd'
asg17
S'N'
sg14
I5
sa(dp1906
g16
(lp1907
S'd'
asg40
I231
sS'.thisRepN'
p1908
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1909
I233
sS'.thisN'
p1910
I233
sS'.thisIndex'
p1911
g45
(g47
S'\xe7\x00\x00\x00'
tRp1912
sg15
(lp1913
S'k'
asg17
S'N'
sg14
I5
sa(dp1914
g16
(lp1915
S'd'
asg40
I105
sS'.thisRepN'
p1916
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1917
I234
sS'.thisN'
p1918
I234
sS'.thisIndex'
p1919
g45
(g47
S'i\x00\x00\x00'
tRp1920
sg15
(lp1921
S'd'
asg17
S'Y'
sg14
I5
sa(dp1922
g16
(lp1923
S'k'
asg40
I352
sS'.thisRepN'
p1924
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1925
I235
sS'.thisN'
p1926
I235
sS'.thisIndex'
p1927
g45
(g47
S'`\x01\x00\x00'
tRp1928
sg15
(lp1929
S'k'
asg17
S'Y'
sg14
I5
sa(dp1930
g16
(lp1931
S'k'
asg40
I378
sS'.thisRepN'
p1932
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1933
I236
sS'.thisN'
p1934
I236
sS'.thisIndex'
p1935
g45
(g47
S'z\x01\x00\x00'
tRp1936
sg15
(lp1937
S'd'
asg17
S'N'
sg14
I5
sa(dp1938
g16
(lp1939
S'k'
asg40
I384
sS'.thisRepN'
p1940
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1941
I237
sS'.thisN'
p1942
I237
sS'.thisIndex'
p1943
g45
(g47
S'\x80\x01\x00\x00'
tRp1944
sg15
(lp1945
S'k'
asg17
S'Y'
sg14
I5
sa(dp1946
g16
(lp1947
S'k'
asg40
I329
sS'.thisRepN'
p1948
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1949
I238
sS'.thisN'
p1950
I238
sS'.thisIndex'
p1951
g45
(g47
S'I\x01\x00\x00'
tRp1952
sg15
(lp1953
S'd'
asg17
S'N'
sg14
I5
sa(dp1954
g16
(lp1955
S'd'
asg40
I93
sS'.thisRepN'
p1956
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1957
I239
sS'.thisN'
p1958
I239
sS'.thisIndex'
p1959
g45
(g47
S']\x00\x00\x00'
tRp1960
sg15
(lp1961
S'k'
asg17
S'N'
sg14
I5
sa(dp1962
g16
(lp1963
S'd'
asg40
I21
sS'.thisRepN'
p1964
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1965
I240
sS'.thisN'
p1966
I240
sS'.thisIndex'
p1967
g45
(g47
S'\x15\x00\x00\x00'
tRp1968
sg15
(lp1969
S'd'
asg17
S'Y'
sg14
I5
sa(dp1970
g16
(lp1971
S'd'
asg40
I23
sS'.thisRepN'
p1972
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1973
I241
sS'.thisN'
p1974
I241
sS'.thisIndex'
p1975
g45
(g47
S'\x17\x00\x00\x00'
tRp1976
sg15
(lp1977
S'k'
asg17
S'N'
sg14
I5
sa(dp1978
g16
(lp1979
S'd'
asg40
I290
sS'.thisRepN'
p1980
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1981
I242
sS'.thisN'
p1982
I242
sS'.thisIndex'
p1983
g45
(g47
S'"\x01\x00\x00'
tRp1984
sg15
(lp1985
S'd'
asg17
S'Y'
sg14
I5
sa(dp1986
g16
(lp1987
S'd'
asg40
I145
sS'.thisRepN'
p1988
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1989
I243
sS'.thisN'
p1990
I243
sS'.thisIndex'
p1991
g45
(g47
S'\x91\x00\x00\x00'
tRp1992
sg15
(lp1993
S'k'
asg17
S'N'
sg14
I5
sa(dp1994
g16
(lp1995
S'd'
asg40
I211
sS'.thisRepN'
p1996
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p1997
I244
sS'.thisN'
p1998
I244
sS'.thisIndex'
p1999
g45
(g47
S'\xd3\x00\x00\x00'
tRp2000
sg15
(lp2001
S'd'
asg17
S'Y'
sg14
I5
sa(dp2002
g16
(lp2003
S'd'
asg40
I192
sS'.thisRepN'
p2004
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2005
I245
sS'.thisN'
p2006
I245
sS'.thisIndex'
p2007
g45
(g47
S'\xc0\x00\x00\x00'
tRp2008
sg15
(lp2009
S'k'
asg17
S'N'
sg14
I5
sa(dp2010
g16
(lp2011
S'k'
asg40
I535
sS'.thisRepN'
p2012
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2013
I246
sS'.thisN'
p2014
I246
sS'.thisIndex'
p2015
g45
(g47
S'\x17\x02\x00\x00'
tRp2016
sg15
(lp2017
S'd'
asg17
S'N'
sg14
I5
sa(dp2018
g16
(lp2019
S'd'
asg40
I76
sS'.thisRepN'
p2020
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2021
I247
sS'.thisN'
p2022
I247
sS'.thisIndex'
p2023
g45
(g47
S'L\x00\x00\x00'
tRp2024
sg15
(lp2025
S'k'
asg17
S'N'
sg14
I5
sa(dp2026
g16
(lp2027
S'd'
asg40
I174
sS'.thisRepN'
p2028
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2029
I248
sS'.thisN'
p2030
I248
sS'.thisIndex'
p2031
g45
(g47
S'\xae\x00\x00\x00'
tRp2032
sg15
(lp2033
S'd'
asg17
S'Y'
sg14
I5
sa(dp2034
g16
(lp2035
S'd'
asg40
I222
sS'.thisRepN'
p2036
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2037
I249
sS'.thisN'
p2038
I249
sS'.thisIndex'
p2039
g45
(g47
S'\xde\x00\x00\x00'
tRp2040
sg15
(lp2041
S'k'
asg17
S'N'
sg14
I5
sa(dp2042
g16
(lp2043
S'd'
asg40
I46
sS'.thisRepN'
p2044
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2045
I250
sS'.thisN'
p2046
I250
sS'.thisIndex'
p2047
g45
(g47
S'.\x00\x00\x00'
tRp2048
sg15
(lp2049
S'k'
asg17
S'N'
sg14
I6
sa(dp2050
g16
(lp2051
S'k'
asg40
I337
sS'.thisRepN'
p2052
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2053
I251
sS'.thisN'
p2054
I251
sS'.thisIndex'
p2055
g45
(g47
S'Q\x01\x00\x00'
tRp2056
sg15
(lp2057
S'd'
asg17
S'N'
sg14
I6
sa(dp2058
g16
(lp2059
S'k'
asg40
I370
sS'.thisRepN'
p2060
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2061
I252
sS'.thisN'
p2062
I252
sS'.thisIndex'
p2063
g45
(g47
S'r\x01\x00\x00'
tRp2064
sg15
(lp2065
S'd'
asg17
S'N'
sg14
I6
sa(dp2066
g16
(lp2067
S'k'
asg40
I547
sS'.thisRepN'
p2068
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2069
I253
sS'.thisN'
p2070
I253
sS'.thisIndex'
p2071
g45
(g47
S'#\x02\x00\x00'
tRp2072
sg15
(lp2073
S'k'
asg17
S'Y'
sg14
I6
sa(dp2074
g16
(lp2075
S'd'
asg40
I100
sS'.thisRepN'
p2076
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2077
I254
sS'.thisN'
p2078
I254
sS'.thisIndex'
p2079
g45
(g47
S'd\x00\x00\x00'
tRp2080
sg15
(lp2081
S'd'
asg17
S'Y'
sg14
I6
sa(dp2082
g16
(lp2083
S'k'
asg40
I484
sS'.thisRepN'
p2084
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2085
I255
sS'.thisN'
p2086
I255
sS'.thisIndex'
p2087
g45
(g47
S'\xe4\x01\x00\x00'
tRp2088
sg15
(lp2089
S'k'
asg17
S'Y'
sg14
I6
sa(dp2090
g16
(lp2091
S'd'
asg40
I195
sS'.thisRepN'
p2092
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2093
I256
sS'.thisN'
p2094
I256
sS'.thisIndex'
p2095
g45
(g47
S'\xc3\x00\x00\x00'
tRp2096
sg15
(lp2097
S'd'
asg17
S'Y'
sg14
I6
sa(dp2098
g16
(lp2099
S'k'
asg40
I517
sS'.thisRepN'
p2100
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2101
I257
sS'.thisN'
p2102
I257
sS'.thisIndex'
p2103
g45
(g47
S'\x05\x02\x00\x00'
tRp2104
sg15
(lp2105
S'k'
asg17
S'Y'
sg14
I6
sa(dp2106
g16
(lp2107
S'd'
asg40
I29
sS'.thisRepN'
p2108
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2109
I258
sS'.thisN'
p2110
I258
sS'.thisIndex'
p2111
g45
(g47
S'\x1d\x00\x00\x00'
tRp2112
sg15
(lp2113
S'd'
asg17
S'Y'
sg14
I6
sa(dp2114
g16
(lp2115
S'd'
asg40
I234
sS'.thisRepN'
p2116
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2117
I259
sS'.thisN'
p2118
I259
sS'.thisIndex'
p2119
g45
(g47
S'\xea\x00\x00\x00'
tRp2120
sg15
(lp2121
S'k'
asg17
S'N'
sg14
I6
sa(dp2122
g16
(lp2123
S'd'
asg40
I203
sS'.thisRepN'
p2124
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2125
I260
sS'.thisN'
p2126
I260
sS'.thisIndex'
p2127
g45
(g47
S'\xcb\x00\x00\x00'
tRp2128
sg15
(lp2129
S'd'
asg17
S'Y'
sg14
I6
sa(dp2130
g16
(lp2131
S'k'
asg40
I585
sS'.thisRepN'
p2132
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2133
I261
sS'.thisN'
p2134
I261
sS'.thisIndex'
p2135
g45
(g47
S'I\x02\x00\x00'
tRp2136
sg15
(lp2137
S'k'
asg17
S'Y'
sg14
I6
sa(dp2138
g16
(lp2139
S'd'
asg40
I182
sS'.thisRepN'
p2140
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2141
I262
sS'.thisN'
p2142
I262
sS'.thisIndex'
p2143
g45
(g47
S'\xb6\x00\x00\x00'
tRp2144
sg15
(lp2145
S'd'
asg17
S'Y'
sg14
I6
sa(dp2146
g16
(lp2147
S'k'
asg40
I473
sS'.thisRepN'
p2148
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2149
I263
sS'.thisN'
p2150
I263
sS'.thisIndex'
p2151
g45
(g47
S'\xd9\x01\x00\x00'
tRp2152
sg15
(lp2153
S'k'
asg17
S'Y'
sg14
I6
sa(dp2154
g16
(lp2155
S'k'
asg40
I490
sS'.thisRepN'
p2156
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2157
I264
sS'.thisN'
p2158
I264
sS'.thisIndex'
p2159
g45
(g47
S'\xea\x01\x00\x00'
tRp2160
sg15
(lp2161
S'd'
asg17
S'N'
sg14
I6
sa(dp2162
g16
(lp2163
S'd'
asg40
I212
sS'.thisRepN'
p2164
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2165
I265
sS'.thisN'
p2166
I265
sS'.thisIndex'
p2167
g45
(g47
S'\xd4\x00\x00\x00'
tRp2168
sg15
(lp2169
S'k'
asg17
S'N'
sg14
I6
sa(dp2170
g16
(lp2171
S'k'
asg40
I452
sS'.thisRepN'
p2172
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2173
I266
sS'.thisN'
p2174
I266
sS'.thisIndex'
p2175
g45
(g47
S'\xc4\x01\x00\x00'
tRp2176
sg15
(lp2177
S'd'
asg17
S'N'
sg14
I6
sa(dp2178
g16
(lp2179
S'k'
asg40
I402
sS'.thisRepN'
p2180
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2181
I267
sS'.thisN'
p2182
I267
sS'.thisIndex'
p2183
g45
(g47
S'\x92\x01\x00\x00'
tRp2184
sg15
(lp2185
S'k'
asg17
S'Y'
sg14
I6
sa(dp2186
g16
(lp2187
S'd'
asg40
I33
sS'.thisRepN'
p2188
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2189
I268
sS'.thisN'
p2190
I268
sS'.thisIndex'
p2191
g45
(g47
S'!\x00\x00\x00'
tRp2192
sg15
(lp2193
S'd'
asg17
S'Y'
sg14
I6
sa(dp2194
g16
(lp2195
S'k'
asg40
I494
sS'.thisRepN'
p2196
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2197
I269
sS'.thisN'
p2198
I269
sS'.thisIndex'
p2199
g45
(g47
S'\xee\x01\x00\x00'
tRp2200
sg15
(lp2201
S'k'
asg17
S'Y'
sg14
I6
sa(dp2202
g16
(lp2203
S'd'
asg40
I99
sS'.thisRepN'
p2204
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2205
I270
sS'.thisN'
p2206
I270
sS'.thisIndex'
p2207
g45
(g47
S'c\x00\x00\x00'
tRp2208
sg15
(lp2209
S'd'
asg17
S'Y'
sg14
I6
sa(dp2210
g16
(lp2211
S'k'
asg40
I312
sS'.thisRepN'
p2212
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2213
I271
sS'.thisN'
p2214
I271
sS'.thisIndex'
p2215
g45
(g47
S'8\x01\x00\x00'
tRp2216
sg15
(lp2217
S'k'
asg17
S'Y'
sg14
I6
sa(dp2218
g16
(lp2219
S'd'
asg40
I265
sS'.thisRepN'
p2220
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2221
I272
sS'.thisN'
p2222
I272
sS'.thisIndex'
p2223
g45
(g47
S'\t\x01\x00\x00'
tRp2224
sg15
(lp2225
S'd'
asg17
S'Y'
sg14
I6
sa(dp2226
g16
(lp2227
S'd'
asg40
I84
sS'.thisRepN'
p2228
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2229
I273
sS'.thisN'
p2230
I273
sS'.thisIndex'
p2231
g45
(g47
S'T\x00\x00\x00'
tRp2232
sg15
(lp2233
S'k'
asg17
S'N'
sg14
I6
sa(dp2234
g16
(lp2235
S'k'
asg40
I393
sS'.thisRepN'
p2236
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2237
I274
sS'.thisN'
p2238
I274
sS'.thisIndex'
p2239
g45
(g47
S'\x89\x01\x00\x00'
tRp2240
sg15
(lp2241
S'd'
asg17
S'N'
sg14
I6
sa(dp2242
g16
(lp2243
S'k'
asg40
I489
sS'.thisRepN'
p2244
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2245
I275
sS'.thisN'
p2246
I275
sS'.thisIndex'
p2247
g45
(g47
S'\xe9\x01\x00\x00'
tRp2248
sg15
(lp2249
S'k'
asg17
S'Y'
sg14
I6
sa(dp2250
g16
(lp2251
S'd'
asg40
I22
sS'.thisRepN'
p2252
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2253
I276
sS'.thisN'
p2254
I276
sS'.thisIndex'
p2255
g45
(g47
S'\x16\x00\x00\x00'
tRp2256
sg15
(lp2257
S'd'
asg17
S'Y'
sg14
I6
sa(dp2258
g16
(lp2259
S'd'
asg40
I204
sS'.thisRepN'
p2260
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2261
I277
sS'.thisN'
p2262
I277
sS'.thisIndex'
p2263
g45
(g47
S'\xcc\x00\x00\x00'
tRp2264
sg15
(lp2265
S'k'
asg17
S'N'
sg14
I6
sa(dp2266
g16
(lp2267
S'k'
asg40
I524
sS'.thisRepN'
p2268
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2269
I278
sS'.thisN'
p2270
I278
sS'.thisIndex'
p2271
g45
(g47
S'\x0c\x02\x00\x00'
tRp2272
sg15
(lp2273
S'd'
asg17
S'N'
sg14
I6
sa(dp2274
g16
(lp2275
S'k'
asg40
I385
sS'.thisRepN'
p2276
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2277
I279
sS'.thisN'
p2278
I279
sS'.thisIndex'
p2279
g45
(g47
S'\x81\x01\x00\x00'
tRp2280
sg15
(lp2281
S'k'
asg17
S'Y'
sg14
I6
sa(dp2282
g16
(lp2283
S'k'
asg40
I556
sS'.thisRepN'
p2284
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2285
I280
sS'.thisN'
p2286
I280
sS'.thisIndex'
p2287
g45
(g47
S',\x02\x00\x00'
tRp2288
sg15
(lp2289
S'd'
asg17
S'N'
sg14
I6
sa(dp2290
g16
(lp2291
S'k'
asg40
I349
sS'.thisRepN'
p2292
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2293
I281
sS'.thisN'
p2294
I281
sS'.thisIndex'
p2295
g45
(g47
S']\x01\x00\x00'
tRp2296
sg15
(lp2297
S'k'
asg17
S'Y'
sg14
I6
sa(dp2298
g16
(lp2299
S'k'
asg40
I382
sS'.thisRepN'
p2300
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2301
I282
sS'.thisN'
p2302
I282
sS'.thisIndex'
p2303
g45
(g47
S'~\x01\x00\x00'
tRp2304
sg15
(lp2305
S'd'
asg17
S'N'
sg14
I6
sa(dp2306
g16
(lp2307
S'd'
asg40
I177
sS'.thisRepN'
p2308
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2309
I283
sS'.thisN'
p2310
I283
sS'.thisIndex'
p2311
g45
(g47
S'\xb1\x00\x00\x00'
tRp2312
sg15
(lp2313
S'k'
asg17
S'N'
sg14
I6
sa(dp2314
g16
(lp2315
S'd'
asg40
I75
sS'.thisRepN'
p2316
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2317
I284
sS'.thisN'
p2318
I284
sS'.thisIndex'
p2319
g45
(g47
S'K\x00\x00\x00'
tRp2320
sg15
(lp2321
S'd'
asg17
S'Y'
sg14
I6
sa(dp2322
g16
(lp2323
S'd'
asg40
I108
sS'.thisRepN'
p2324
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2325
I285
sS'.thisN'
p2326
I285
sS'.thisIndex'
p2327
g45
(g47
S'l\x00\x00\x00'
tRp2328
sg15
(lp2329
S'k'
asg17
S'N'
sg14
I6
sa(dp2330
g16
(lp2331
S'd'
asg40
I123
sS'.thisRepN'
p2332
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2333
I286
sS'.thisN'
p2334
I286
sS'.thisIndex'
p2335
g45
(g47
S'{\x00\x00\x00'
tRp2336
sg15
(lp2337
S'd'
asg17
S'Y'
sg14
I6
sa(dp2338
g16
(lp2339
S'd'
asg40
I111
sS'.thisRepN'
p2340
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2341
I287
sS'.thisN'
p2342
I287
sS'.thisIndex'
p2343
g45
(g47
S'o\x00\x00\x00'
tRp2344
sg15
(lp2345
S'k'
asg17
S'N'
sg14
I6
sa(dp2346
g16
(lp2347
S'k'
asg40
I530
sS'.thisRepN'
p2348
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2349
I288
sS'.thisN'
p2350
I288
sS'.thisIndex'
p2351
g45
(g47
S'\x12\x02\x00\x00'
tRp2352
sg15
(lp2353
S'd'
asg17
S'N'
sg14
I6
sa(dp2354
g16
(lp2355
S'd'
asg40
I32
sS'.thisRepN'
p2356
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2357
I289
sS'.thisN'
p2358
I289
sS'.thisIndex'
p2359
g45
(g47
S' \x00\x00\x00'
tRp2360
sg15
(lp2361
S'k'
asg17
S'N'
sg14
I6
sa(dp2362
g16
(lp2363
S'd'
asg40
I126
sS'.thisRepN'
p2364
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2365
I290
sS'.thisN'
p2366
I290
sS'.thisIndex'
p2367
g45
(g47
S'~\x00\x00\x00'
tRp2368
sg15
(lp2369
S'd'
asg17
S'Y'
sg14
I6
sa(dp2370
g16
(lp2371
S'k'
asg40
I469
sS'.thisRepN'
p2372
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2373
I291
sS'.thisN'
p2374
I291
sS'.thisIndex'
p2375
g45
(g47
S'\xd5\x01\x00\x00'
tRp2376
sg15
(lp2377
S'k'
asg17
S'Y'
sg14
I6
sa(dp2378
g16
(lp2379
S'd'
asg40
I20
sS'.thisRepN'
p2380
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2381
I292
sS'.thisN'
p2382
I292
sS'.thisIndex'
p2383
g45
(g47
S'\x14\x00\x00\x00'
tRp2384
sg15
(lp2385
S'd'
asg17
S'Y'
sg14
I6
sa(dp2386
g16
(lp2387
S'k'
asg40
I574
sS'.thisRepN'
p2388
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2389
I293
sS'.thisN'
p2390
I293
sS'.thisIndex'
p2391
g45
(g47
S'>\x02\x00\x00'
tRp2392
sg15
(lp2393
S'd'
asg17
S'N'
sg14
I6
sa(dp2394
g16
(lp2395
S'd'
asg40
I42
sS'.thisRepN'
p2396
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2397
I294
sS'.thisN'
p2398
I294
sS'.thisIndex'
p2399
g45
(g47
S'*\x00\x00\x00'
tRp2400
sg15
(lp2401
S'd'
asg17
S'Y'
sg14
I6
sa(dp2402
g16
(lp2403
S'd'
asg40
I155
sS'.thisRepN'
p2404
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2405
I295
sS'.thisN'
p2406
I295
sS'.thisIndex'
p2407
g45
(g47
S'\x9b\x00\x00\x00'
tRp2408
sg15
(lp2409
S'k'
asg17
S'N'
sg14
I6
sa(dp2410
g16
(lp2411
S'd'
asg40
I50
sS'.thisRepN'
p2412
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2413
I296
sS'.thisN'
p2414
I296
sS'.thisIndex'
p2415
g45
(g47
S'2\x00\x00\x00'
tRp2416
sg15
(lp2417
S'd'
asg17
S'Y'
sg14
I6
sa(dp2418
g16
(lp2419
S'k'
asg40
I340
sS'.thisRepN'
p2420
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2421
I297
sS'.thisN'
p2422
I297
sS'.thisIndex'
p2423
g45
(g47
S'T\x01\x00\x00'
tRp2424
sg15
(lp2425
S'k'
asg17
S'Y'
sg14
I6
sa(dp2426
g16
(lp2427
S'd'
asg40
I275
sS'.thisRepN'
p2428
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2429
I298
sS'.thisN'
p2430
I298
sS'.thisIndex'
p2431
g45
(g47
S'\x13\x01\x00\x00'
tRp2432
sg15
(lp2433
S'd'
asg17
S'Y'
sg14
I6
sa(dp2434
g16
(lp2435
S'd'
asg40
I175
sS'.thisRepN'
p2436
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2437
I299
sS'.thisN'
p2438
I299
sS'.thisIndex'
p2439
g45
(g47
S'\xaf\x00\x00\x00'
tRp2440
sg15
(lp2441
S'k'
asg17
S'N'
sg14
I6
sa(dp2442
g16
(lp2443
S'd'
asg40
I107
sS'.thisRepN'
p2444
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2445
I300
sS'.thisN'
p2446
I300
sS'.thisIndex'
p2447
g45
(g47
S'k\x00\x00\x00'
tRp2448
sg15
(lp2449
S'd'
asg17
S'Y'
sg14
I7
sa(dp2450
g16
(lp2451
S'k'
asg40
I318
sS'.thisRepN'
p2452
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2453
I301
sS'.thisN'
p2454
I301
sS'.thisIndex'
p2455
g45
(g47
S'>\x01\x00\x00'
tRp2456
sg15
(lp2457
S'k'
asg17
S'Y'
sg14
I7
sa(dp2458
g16
(lp2459
S'k'
asg40
I495
sS'.thisRepN'
p2460
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2461
I302
sS'.thisN'
p2462
I302
sS'.thisIndex'
p2463
g45
(g47
S'\xef\x01\x00\x00'
tRp2464
sg15
(lp2465
S'd'
asg17
S'N'
sg14
I7
sa(dp2466
g16
(lp2467
S'k'
asg40
I594
sS'.thisRepN'
p2468
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2469
I303
sS'.thisN'
p2470
I303
sS'.thisIndex'
p2471
g45
(g47
S'R\x02\x00\x00'
tRp2472
sg15
(lp2473
S'k'
asg17
S'Y'
sg14
I7
sa(dp2474
g16
(lp2475
S'k'
asg40
I313
sS'.thisRepN'
p2476
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2477
I304
sS'.thisN'
p2478
I304
sS'.thisIndex'
p2479
g45
(g47
S'9\x01\x00\x00'
tRp2480
sg15
(lp2481
S'd'
asg17
S'N'
sg14
I7
sa(dp2482
g16
(lp2483
S'k'
asg40
I565
sS'.thisRepN'
p2484
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2485
I305
sS'.thisN'
p2486
I305
sS'.thisIndex'
p2487
g45
(g47
S'5\x02\x00\x00'
tRp2488
sg15
(lp2489
S'k'
asg17
S'Y'
sg14
I7
sa(dp2490
g16
(lp2491
S'd'
asg40
I297
sS'.thisRepN'
p2492
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2493
I306
sS'.thisN'
p2494
I306
sS'.thisIndex'
p2495
g45
(g47
S')\x01\x00\x00'
tRp2496
sg15
(lp2497
S'd'
asg17
S'Y'
sg14
I7
sa(dp2498
g16
(lp2499
S'k'
asg40
I549
sS'.thisRepN'
p2500
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2501
I307
sS'.thisN'
p2502
I307
sS'.thisIndex'
p2503
g45
(g47
S'%\x02\x00\x00'
tRp2504
sg15
(lp2505
S'k'
asg17
S'Y'
sg14
I7
sa(dp2506
g16
(lp2507
S'k'
asg40
I467
sS'.thisRepN'
p2508
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2509
I308
sS'.thisN'
p2510
I308
sS'.thisIndex'
p2511
g45
(g47
S'\xd3\x01\x00\x00'
tRp2512
sg15
(lp2513
S'd'
asg17
S'N'
sg14
I7
sa(dp2514
g16
(lp2515
S'k'
asg40
I579
sS'.thisRepN'
p2516
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2517
I309
sS'.thisN'
p2518
I309
sS'.thisIndex'
p2519
g45
(g47
S'C\x02\x00\x00'
tRp2520
sg15
(lp2521
S'k'
asg17
S'Y'
sg14
I7
sa(dp2522
g16
(lp2523
S'k'
asg40
I561
sS'.thisRepN'
p2524
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2525
I310
sS'.thisN'
p2526
I310
sS'.thisIndex'
p2527
g45
(g47
S'1\x02\x00\x00'
tRp2528
sg15
(lp2529
S'd'
asg17
S'N'
sg14
I7
sa(dp2530
g16
(lp2531
S'd'
asg40
I227
sS'.thisRepN'
p2532
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2533
I311
sS'.thisN'
p2534
I311
sS'.thisIndex'
p2535
g45
(g47
S'\xe3\x00\x00\x00'
tRp2536
sg15
(lp2537
S'k'
asg17
S'N'
sg14
I7
sa(dp2538
g16
(lp2539
S'k'
asg40
I456
sS'.thisRepN'
p2540
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2541
I312
sS'.thisN'
p2542
I312
sS'.thisIndex'
p2543
g45
(g47
S'\xc8\x01\x00\x00'
tRp2544
sg15
(lp2545
S'd'
asg17
S'N'
sg14
I7
sa(dp2546
g16
(lp2547
S'k'
asg40
I436
sS'.thisRepN'
p2548
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2549
I313
sS'.thisN'
p2550
I313
sS'.thisIndex'
p2551
g45
(g47
S'\xb4\x01\x00\x00'
tRp2552
sg15
(lp2553
S'k'
asg17
S'Y'
sg14
I7
sa(dp2554
g16
(lp2555
S'k'
asg40
I308
sS'.thisRepN'
p2556
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2557
I314
sS'.thisN'
p2558
I314
sS'.thisIndex'
p2559
g45
(g47
S'4\x01\x00\x00'
tRp2560
sg15
(lp2561
S'd'
asg17
S'N'
sg14
I7
sa(dp2562
g16
(lp2563
S'd'
asg40
I292
sS'.thisRepN'
p2564
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2565
I315
sS'.thisN'
p2566
I315
sS'.thisIndex'
p2567
g45
(g47
S'$\x01\x00\x00'
tRp2568
sg15
(lp2569
S'k'
asg17
S'N'
sg14
I7
sa(dp2570
g16
(lp2571
S'd'
asg40
I172
sS'.thisRepN'
p2572
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2573
I316
sS'.thisN'
p2574
I316
sS'.thisIndex'
p2575
g45
(g47
S'\xac\x00\x00\x00'
tRp2576
sg15
(lp2577
S'd'
asg17
S'Y'
sg14
I7
sa(dp2578
g16
(lp2579
S'k'
asg40
I324
sS'.thisRepN'
p2580
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2581
I317
sS'.thisN'
p2582
I317
sS'.thisIndex'
p2583
g45
(g47
S'D\x01\x00\x00'
tRp2584
sg15
(lp2585
S'k'
asg17
S'Y'
sg14
I7
sa(dp2586
g16
(lp2587
S'd'
asg40
I167
sS'.thisRepN'
p2588
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2589
I318
sS'.thisN'
p2590
I318
sS'.thisIndex'
p2591
g45
(g47
S'\xa7\x00\x00\x00'
tRp2592
sg15
(lp2593
S'd'
asg17
S'Y'
sg14
I7
sa(dp2594
g16
(lp2595
S'k'
asg40
I545
sS'.thisRepN'
p2596
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2597
I319
sS'.thisN'
p2598
I319
sS'.thisIndex'
p2599
g45
(g47
S'!\x02\x00\x00'
tRp2600
sg15
(lp2601
S'k'
asg17
S'Y'
sg14
I7
sa(dp2602
g16
(lp2603
S'd'
asg40
I213
sS'.thisRepN'
p2604
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2605
I320
sS'.thisN'
p2606
I320
sS'.thisIndex'
p2607
g45
(g47
S'\xd5\x00\x00\x00'
tRp2608
sg15
(lp2609
S'd'
asg17
S'Y'
sg14
I7
sa(dp2610
g16
(lp2611
S'k'
asg40
I386
sS'.thisRepN'
p2612
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2613
I321
sS'.thisN'
p2614
I321
sS'.thisIndex'
p2615
g45
(g47
S'\x82\x01\x00\x00'
tRp2616
sg15
(lp2617
S'k'
asg17
S'Y'
sg14
I7
sa(dp2618
g16
(lp2619
S'k'
asg40
I400
sS'.thisRepN'
p2620
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2621
I322
sS'.thisN'
p2622
I322
sS'.thisIndex'
p2623
g45
(g47
S'\x90\x01\x00\x00'
tRp2624
sg15
(lp2625
S'd'
asg17
S'N'
sg14
I7
sa(dp2626
g16
(lp2627
S'k'
asg40
I375
sS'.thisRepN'
p2628
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2629
I323
sS'.thisN'
p2630
I323
sS'.thisIndex'
p2631
g45
(g47
S'w\x01\x00\x00'
tRp2632
sg15
(lp2633
S'k'
asg17
S'Y'
sg14
I7
sa(dp2634
g16
(lp2635
S'd'
asg40
I278
sS'.thisRepN'
p2636
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2637
I324
sS'.thisN'
p2638
I324
sS'.thisIndex'
p2639
g45
(g47
S'\x16\x01\x00\x00'
tRp2640
sg15
(lp2641
S'd'
asg17
S'Y'
sg14
I7
sa(dp2642
g16
(lp2643
S'd'
asg40
I2
sS'.thisRepN'
p2644
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2645
I325
sS'.thisN'
p2646
I325
sS'.thisIndex'
p2647
g45
(g47
S'\x02\x00\x00\x00'
tRp2648
sg15
(lp2649
S'k'
asg17
S'N'
sg14
I7
sa(dp2650
g16
(lp2651
S'd'
asg40
I139
sS'.thisRepN'
p2652
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2653
I326
sS'.thisN'
p2654
I326
sS'.thisIndex'
p2655
g45
(g47
S'\x8b\x00\x00\x00'
tRp2656
sg15
(lp2657
S'd'
asg17
S'Y'
sg14
I7
sa(dp2658
g16
(lp2659
S'k'
asg40
I510
sS'.thisRepN'
p2660
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2661
I327
sS'.thisN'
p2662
I327
sS'.thisIndex'
p2663
g45
(g47
S'\xfe\x01\x00\x00'
tRp2664
sg15
(lp2665
S'k'
asg17
S'Y'
sg14
I7
sa(dp2666
g16
(lp2667
S'd'
asg40
I128
sS'.thisRepN'
p2668
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2669
I328
sS'.thisN'
p2670
I328
sS'.thisIndex'
p2671
g45
(g47
S'\x80\x00\x00\x00'
tRp2672
sg15
(lp2673
S'd'
asg17
S'Y'
sg14
I7
sa(dp2674
g16
(lp2675
S'd'
asg40
I141
sS'.thisRepN'
p2676
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2677
I329
sS'.thisN'
p2678
I329
sS'.thisIndex'
p2679
g45
(g47
S'\x8d\x00\x00\x00'
tRp2680
sg15
(lp2681
S'k'
asg17
S'N'
sg14
I7
sa(dp2682
g16
(lp2683
S'k'
asg40
I356
sS'.thisRepN'
p2684
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2685
I330
sS'.thisN'
p2686
I330
sS'.thisIndex'
p2687
g45
(g47
S'd\x01\x00\x00'
tRp2688
sg15
(lp2689
S'd'
asg17
S'N'
sg14
I7
sa(dp2690
g16
(lp2691
S'k'
asg40
I444
sS'.thisRepN'
p2692
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2693
I331
sS'.thisN'
p2694
I331
sS'.thisIndex'
p2695
g45
(g47
S'\xbc\x01\x00\x00'
tRp2696
sg15
(lp2697
S'k'
asg17
S'Y'
sg14
I7
sa(dp2698
g16
(lp2699
S'k'
asg40
I311
sS'.thisRepN'
p2700
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2701
I332
sS'.thisN'
p2702
I332
sS'.thisIndex'
p2703
g45
(g47
S'7\x01\x00\x00'
tRp2704
sg15
(lp2705
S'd'
asg17
S'N'
sg14
I7
sa(dp2706
g16
(lp2707
S'd'
asg40
I135
sS'.thisRepN'
p2708
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2709
I333
sS'.thisN'
p2710
I333
sS'.thisIndex'
p2711
g45
(g47
S'\x87\x00\x00\x00'
tRp2712
sg15
(lp2713
S'k'
asg17
S'N'
sg14
I7
sa(dp2714
g16
(lp2715
S'd'
asg40
I223
sS'.thisRepN'
p2716
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2717
I334
sS'.thisN'
p2718
I334
sS'.thisIndex'
p2719
g45
(g47
S'\xdf\x00\x00\x00'
tRp2720
sg15
(lp2721
S'd'
asg17
S'Y'
sg14
I7
sa(dp2722
g16
(lp2723
S'k'
asg40
I421
sS'.thisRepN'
p2724
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2725
I335
sS'.thisN'
p2726
I335
sS'.thisIndex'
p2727
g45
(g47
S'\xa5\x01\x00\x00'
tRp2728
sg15
(lp2729
S'k'
asg17
S'Y'
sg14
I7
sa(dp2730
g16
(lp2731
S'd'
asg40
I127
sS'.thisRepN'
p2732
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2733
I336
sS'.thisN'
p2734
I336
sS'.thisIndex'
p2735
g45
(g47
S'\x7f\x00\x00\x00'
tRp2736
sg15
(lp2737
S'd'
asg17
S'Y'
sg14
I7
sa(dp2738
g16
(lp2739
S'k'
asg40
I418
sS'.thisRepN'
p2740
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2741
I337
sS'.thisN'
p2742
I337
sS'.thisIndex'
p2743
g45
(g47
S'\xa2\x01\x00\x00'
tRp2744
sg15
(lp2745
S'k'
asg17
S'Y'
sg14
I7
sa(dp2746
g16
(lp2747
S'd'
asg40
I163
sS'.thisRepN'
p2748
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2749
I338
sS'.thisN'
p2750
I338
sS'.thisIndex'
p2751
g45
(g47
S'\xa3\x00\x00\x00'
tRp2752
sg15
(lp2753
S'd'
asg17
S'Y'
sg14
I7
sa(dp2754
g16
(lp2755
S'd'
asg40
I277
sS'.thisRepN'
p2756
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2757
I339
sS'.thisN'
p2758
I339
sS'.thisIndex'
p2759
g45
(g47
S'\x15\x01\x00\x00'
tRp2760
sg15
(lp2761
S'k'
asg17
S'N'
sg14
I7
sa(dp2762
g16
(lp2763
S'k'
asg40
I431
sS'.thisRepN'
p2764
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2765
I340
sS'.thisN'
p2766
I340
sS'.thisIndex'
p2767
g45
(g47
S'\xaf\x01\x00\x00'
tRp2768
sg15
(lp2769
S'd'
asg17
S'N'
sg14
I7
sa(dp2770
g16
(lp2771
S'k'
asg40
I310
sS'.thisRepN'
p2772
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2773
I341
sS'.thisN'
p2774
I341
sS'.thisIndex'
p2775
g45
(g47
S'6\x01\x00\x00'
tRp2776
sg15
(lp2777
S'k'
asg17
S'Y'
sg14
I7
sa(dp2778
g16
(lp2779
S'd'
asg40
I144
sS'.thisRepN'
p2780
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2781
I342
sS'.thisN'
p2782
I342
sS'.thisIndex'
p2783
g45
(g47
S'\x90\x00\x00\x00'
tRp2784
sg15
(lp2785
S'd'
asg17
S'Y'
sg14
I7
sa(dp2786
g16
(lp2787
S'd'
asg40
I54
sS'.thisRepN'
p2788
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2789
I343
sS'.thisN'
p2790
I343
sS'.thisIndex'
p2791
g45
(g47
S'6\x00\x00\x00'
tRp2792
sg15
(lp2793
S'k'
asg17
S'N'
sg14
I7
sa(dp2794
g16
(lp2795
S'k'
asg40
I404
sS'.thisRepN'
p2796
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2797
I344
sS'.thisN'
p2798
I344
sS'.thisIndex'
p2799
g45
(g47
S'\x94\x01\x00\x00'
tRp2800
sg15
(lp2801
S'd'
asg17
S'N'
sg14
I7
sa(dp2802
g16
(lp2803
S'd'
asg40
I79
sS'.thisRepN'
p2804
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2805
I345
sS'.thisN'
p2806
I345
sS'.thisIndex'
p2807
g45
(g47
S'O\x00\x00\x00'
tRp2808
sg15
(lp2809
S'k'
asg17
S'N'
sg14
I7
sa(dp2810
g16
(lp2811
S'd'
asg40
I65
sS'.thisRepN'
p2812
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2813
I346
sS'.thisN'
p2814
I346
sS'.thisIndex'
p2815
g45
(g47
S'A\x00\x00\x00'
tRp2816
sg15
(lp2817
S'k'
asg17
S'N'
sg14
I7
sa(dp2818
g16
(lp2819
S'd'
asg40
I171
sS'.thisRepN'
p2820
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2821
I347
sS'.thisN'
p2822
I347
sS'.thisIndex'
p2823
g45
(g47
S'\xab\x00\x00\x00'
tRp2824
sg15
(lp2825
S'k'
asg17
S'N'
sg14
I7
sa(dp2826
g16
(lp2827
S'd'
asg40
I97
sS'.thisRepN'
p2828
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2829
I348
sS'.thisN'
p2830
I348
sS'.thisIndex'
p2831
g45
(g47
S'a\x00\x00\x00'
tRp2832
sg15
(lp2833
S'k'
asg17
S'N'
sg14
I7
sa(dp2834
g16
(lp2835
S'k'
asg40
I599
sS'.thisRepN'
p2836
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2837
I349
sS'.thisN'
p2838
I349
sS'.thisIndex'
p2839
g45
(g47
S'W\x02\x00\x00'
tRp2840
sg15
(lp2841
S'k'
asg17
S'Y'
sg14
I7
sa(dp2842
g16
(lp2843
S'k'
asg40
I333
sS'.thisRepN'
p2844
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2845
I350
sS'.thisN'
p2846
I350
sS'.thisIndex'
p2847
g45
(g47
S'M\x01\x00\x00'
tRp2848
sg15
(lp2849
S'd'
asg17
S'N'
sg14
I8
sa(dp2850
g16
(lp2851
S'd'
asg40
I47
sS'.thisRepN'
p2852
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2853
I351
sS'.thisN'
p2854
I351
sS'.thisIndex'
p2855
g45
(g47
S'/\x00\x00\x00'
tRp2856
sg15
(lp2857
S'd'
asg17
S'Y'
sg14
I8
sa(dp2858
g16
(lp2859
S'k'
asg40
I409
sS'.thisRepN'
p2860
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2861
I352
sS'.thisN'
p2862
I352
sS'.thisIndex'
p2863
g45
(g47
S'\x99\x01\x00\x00'
tRp2864
sg15
(lp2865
S'd'
asg17
S'N'
sg14
I8
sa(dp2866
g16
(lp2867
S'd'
asg40
I13
sS'.thisRepN'
p2868
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2869
I353
sS'.thisN'
p2870
I353
sS'.thisIndex'
p2871
g45
(g47
S'\r\x00\x00\x00'
tRp2872
sg15
(lp2873
S'k'
asg17
S'N'
sg14
I8
sa(dp2874
g16
(lp2875
S'd'
asg40
I38
sS'.thisRepN'
p2876
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2877
I354
sS'.thisN'
p2878
I354
sS'.thisIndex'
p2879
g45
(g47
S'&\x00\x00\x00'
tRp2880
sg15
(lp2881
S'd'
asg17
S'Y'
sg14
I8
sa(dp2882
g16
(lp2883
S'd'
asg40
I235
sS'.thisRepN'
p2884
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2885
I355
sS'.thisN'
p2886
I355
sS'.thisIndex'
p2887
g45
(g47
S'\xeb\x00\x00\x00'
tRp2888
sg15
(lp2889
S'k'
asg17
S'N'
sg14
I8
sa(dp2890
g16
(lp2891
S'k'
asg40
I391
sS'.thisRepN'
p2892
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2893
I356
sS'.thisN'
p2894
I356
sS'.thisIndex'
p2895
g45
(g47
S'\x87\x01\x00\x00'
tRp2896
sg15
(lp2897
S'd'
asg17
S'N'
sg14
I8
sa(dp2898
g16
(lp2899
S'd'
asg40
I194
sS'.thisRepN'
p2900
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2901
I357
sS'.thisN'
p2902
I357
sS'.thisIndex'
p2903
g45
(g47
S'\xc2\x00\x00\x00'
tRp2904
sg15
(lp2905
S'd'
asg17
S'Y'
sg14
I8
sa(dp2906
g16
(lp2907
S'd'
asg40
I187
sS'.thisRepN'
p2908
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2909
I358
sS'.thisN'
p2910
I358
sS'.thisIndex'
p2911
g45
(g47
S'\xbb\x00\x00\x00'
tRp2912
sg15
(lp2913
S'd'
asg17
S'Y'
sg14
I8
sa(dp2914
g16
(lp2915
S'k'
asg40
I566
sS'.thisRepN'
p2916
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2917
I359
sS'.thisN'
p2918
I359
sS'.thisIndex'
p2919
g45
(g47
S'6\x02\x00\x00'
tRp2920
sg15
(lp2921
S'd'
asg17
S'N'
sg14
I8
sa(dp2922
g16
(lp2923
S'k'
asg40
I410
sS'.thisRepN'
p2924
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2925
I360
sS'.thisN'
p2926
I360
sS'.thisIndex'
p2927
g45
(g47
S'\x9a\x01\x00\x00'
tRp2928
sg15
(lp2929
S'k'
asg17
S'Y'
sg14
I8
sa(dp2930
g16
(lp2931
S'd'
asg40
I133
sS'.thisRepN'
p2932
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2933
I361
sS'.thisN'
p2934
I361
sS'.thisIndex'
p2935
g45
(g47
S'\x85\x00\x00\x00'
tRp2936
sg15
(lp2937
S'k'
asg17
S'N'
sg14
I8
sa(dp2938
g16
(lp2939
S'k'
asg40
I584
sS'.thisRepN'
p2940
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2941
I362
sS'.thisN'
p2942
I362
sS'.thisIndex'
p2943
g45
(g47
S'H\x02\x00\x00'
tRp2944
sg15
(lp2945
S'd'
asg17
S'N'
sg14
I8
sa(dp2946
g16
(lp2947
S'k'
asg40
I480
sS'.thisRepN'
p2948
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2949
I363
sS'.thisN'
p2950
I363
sS'.thisIndex'
p2951
g45
(g47
S'\xe0\x01\x00\x00'
tRp2952
sg15
(lp2953
S'd'
asg17
S'N'
sg14
I8
sa(dp2954
g16
(lp2955
S'd'
asg40
I124
sS'.thisRepN'
p2956
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2957
I364
sS'.thisN'
p2958
I364
sS'.thisIndex'
p2959
g45
(g47
S'|\x00\x00\x00'
tRp2960
sg15
(lp2961
S'k'
asg17
S'N'
sg14
I8
sa(dp2962
g16
(lp2963
S'k'
asg40
I377
sS'.thisRepN'
p2964
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2965
I365
sS'.thisN'
p2966
I365
sS'.thisIndex'
p2967
g45
(g47
S'y\x01\x00\x00'
tRp2968
sg15
(lp2969
S'd'
asg17
S'N'
sg14
I8
sa(dp2970
g16
(lp2971
S'k'
asg40
I503
sS'.thisRepN'
p2972
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2973
I366
sS'.thisN'
p2974
I366
sS'.thisIndex'
p2975
g45
(g47
S'\xf7\x01\x00\x00'
tRp2976
sg15
(lp2977
S'd'
asg17
S'N'
sg14
I8
sa(dp2978
g16
(lp2979
S'd'
asg40
I260
sS'.thisRepN'
p2980
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2981
I367
sS'.thisN'
p2982
I367
sS'.thisIndex'
p2983
g45
(g47
S'\x04\x01\x00\x00'
tRp2984
sg15
(lp2985
S'd'
asg17
S'Y'
sg14
I8
sa(dp2986
g16
(lp2987
S'd'
asg40
I57
sS'.thisRepN'
p2988
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2989
I368
sS'.thisN'
p2990
I368
sS'.thisIndex'
p2991
g45
(g47
S'9\x00\x00\x00'
tRp2992
sg15
(lp2993
S'd'
asg17
S'Y'
sg14
I8
sa(dp2994
g16
(lp2995
S'k'
asg40
I414
sS'.thisRepN'
p2996
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p2997
I369
sS'.thisN'
p2998
I369
sS'.thisIndex'
p2999
g45
(g47
S'\x9e\x01\x00\x00'
tRp3000
sg15
(lp3001
S'k'
asg17
S'Y'
sg14
I8
sa(dp3002
g16
(lp3003
S'k'
asg40
I457
sS'.thisRepN'
p3004
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3005
I370
sS'.thisN'
p3006
I370
sS'.thisIndex'
p3007
g45
(g47
S'\xc9\x01\x00\x00'
tRp3008
sg15
(lp3009
S'd'
asg17
S'N'
sg14
I8
sa(dp3010
g16
(lp3011
S'k'
asg40
I398
sS'.thisRepN'
p3012
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3013
I371
sS'.thisN'
p3014
I371
sS'.thisIndex'
p3015
g45
(g47
S'\x8e\x01\x00\x00'
tRp3016
sg15
(lp3017
S'd'
asg17
S'N'
sg14
I8
sa(dp3018
g16
(lp3019
S'd'
asg40
I288
sS'.thisRepN'
p3020
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3021
I372
sS'.thisN'
p3022
I372
sS'.thisIndex'
p3023
g45
(g47
S' \x01\x00\x00'
tRp3024
sg15
(lp3025
S'k'
asg17
S'N'
sg14
I8
sa(dp3026
g16
(lp3027
S'k'
asg40
I475
sS'.thisRepN'
p3028
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3029
I373
sS'.thisN'
p3030
I373
sS'.thisIndex'
p3031
g45
(g47
S'\xdb\x01\x00\x00'
tRp3032
sg15
(lp3033
S'd'
asg17
S'N'
sg14
I8
sa(dp3034
g16
(lp3035
S'k'
asg40
I434
sS'.thisRepN'
p3036
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3037
I374
sS'.thisN'
p3038
I374
sS'.thisIndex'
p3039
g45
(g47
S'\xb2\x01\x00\x00'
tRp3040
sg15
(lp3041
S'd'
asg17
S'N'
sg14
I8
sa(dp3042
g16
(lp3043
S'd'
asg40
I110
sS'.thisRepN'
p3044
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3045
I375
sS'.thisN'
p3046
I375
sS'.thisIndex'
p3047
g45
(g47
S'n\x00\x00\x00'
tRp3048
sg15
(lp3049
S'd'
asg17
S'Y'
sg14
I8
sa(dp3050
g16
(lp3051
S'k'
asg40
I589
sS'.thisRepN'
p3052
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3053
I376
sS'.thisN'
p3054
I376
sS'.thisIndex'
p3055
g45
(g47
S'M\x02\x00\x00'
tRp3056
sg15
(lp3057
S'd'
asg17
S'N'
sg14
I8
sa(dp3058
g16
(lp3059
S'd'
asg40
I289
sS'.thisRepN'
p3060
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3061
I377
sS'.thisN'
p3062
I377
sS'.thisIndex'
p3063
g45
(g47
S'!\x01\x00\x00'
tRp3064
sg15
(lp3065
S'd'
asg17
S'Y'
sg14
I8
sa(dp3066
g16
(lp3067
S'k'
asg40
I325
sS'.thisRepN'
p3068
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3069
I378
sS'.thisN'
p3070
I378
sS'.thisIndex'
p3071
g45
(g47
S'E\x01\x00\x00'
tRp3072
sg15
(lp3073
S'd'
asg17
S'N'
sg14
I8
sa(dp3074
g16
(lp3075
S'd'
asg40
I64
sS'.thisRepN'
p3076
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3077
I379
sS'.thisN'
p3078
I379
sS'.thisIndex'
p3079
g45
(g47
S'@\x00\x00\x00'
tRp3080
sg15
(lp3081
S'k'
asg17
S'N'
sg14
I8
sa(dp3082
g16
(lp3083
S'd'
asg40
I291
sS'.thisRepN'
p3084
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3085
I380
sS'.thisN'
p3086
I380
sS'.thisIndex'
p3087
g45
(g47
S'#\x01\x00\x00'
tRp3088
sg15
(lp3089
S'd'
asg17
S'Y'
sg14
I8
sa(dp3090
g16
(lp3091
S'k'
asg40
I580
sS'.thisRepN'
p3092
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3093
I381
sS'.thisN'
p3094
I381
sS'.thisIndex'
p3095
g45
(g47
S'D\x02\x00\x00'
tRp3096
sg15
(lp3097
S'd'
asg17
S'N'
sg14
I8
sa(dp3098
g16
(lp3099
S'd'
asg40
I218
sS'.thisRepN'
p3100
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3101
I382
sS'.thisN'
p3102
I382
sS'.thisIndex'
p3103
g45
(g47
S'\xda\x00\x00\x00'
tRp3104
sg15
(lp3105
S'd'
asg17
S'Y'
sg14
I8
sa(dp3106
g16
(lp3107
S'd'
asg40
I202
sS'.thisRepN'
p3108
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3109
I383
sS'.thisN'
p3110
I383
sS'.thisIndex'
p3111
g45
(g47
S'\xca\x00\x00\x00'
tRp3112
sg15
(lp3113
S'd'
asg17
S'Y'
sg14
I8
sa(dp3114
g16
(lp3115
S'k'
asg40
I423
sS'.thisRepN'
p3116
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3117
I384
sS'.thisN'
p3118
I384
sS'.thisIndex'
p3119
g45
(g47
S'\xa7\x01\x00\x00'
tRp3120
sg15
(lp3121
S'd'
asg17
S'N'
sg14
I8
sa(dp3122
g16
(lp3123
S'd'
asg40
I130
sS'.thisRepN'
p3124
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3125
I385
sS'.thisN'
p3126
I385
sS'.thisIndex'
p3127
g45
(g47
S'\x82\x00\x00\x00'
tRp3128
sg15
(lp3129
S'd'
asg17
S'Y'
sg14
I8
sa(dp3130
g16
(lp3131
S'd'
asg40
I281
sS'.thisRepN'
p3132
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3133
I386
sS'.thisN'
p3134
I386
sS'.thisIndex'
p3135
g45
(g47
S'\x19\x01\x00\x00'
tRp3136
sg15
(lp3137
S'd'
asg17
S'Y'
sg14
I8
sa(dp3138
g16
(lp3139
S'k'
asg40
I392
sS'.thisRepN'
p3140
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3141
I387
sS'.thisN'
p3142
I387
sS'.thisIndex'
p3143
g45
(g47
S'\x88\x01\x00\x00'
tRp3144
sg15
(lp3145
S'd'
asg17
S'N'
sg14
I8
sa(dp3146
g16
(lp3147
S'd'
asg40
I44
sS'.thisRepN'
p3148
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3149
I388
sS'.thisN'
p3150
I388
sS'.thisIndex'
p3151
g45
(g47
S',\x00\x00\x00'
tRp3152
sg15
(lp3153
S'd'
asg17
S'Y'
sg14
I8
sa(dp3154
g16
(lp3155
S'd'
asg40
I271
sS'.thisRepN'
p3156
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3157
I389
sS'.thisN'
p3158
I389
sS'.thisIndex'
p3159
g45
(g47
S'\x0f\x01\x00\x00'
tRp3160
sg15
(lp3161
S'd'
asg17
S'Y'
sg14
I8
sa(dp3162
g16
(lp3163
S'd'
asg40
I118
sS'.thisRepN'
p3164
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3165
I390
sS'.thisN'
p3166
I390
sS'.thisIndex'
p3167
g45
(g47
S'v\x00\x00\x00'
tRp3168
sg15
(lp3169
S'd'
asg17
S'Y'
sg14
I8
sa(dp3170
g16
(lp3171
S'd'
asg40
I28
sS'.thisRepN'
p3172
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3173
I391
sS'.thisN'
p3174
I391
sS'.thisIndex'
p3175
g45
(g47
S'\x1c\x00\x00\x00'
tRp3176
sg15
(lp3177
S'd'
asg17
S'Y'
sg14
I8
sa(dp3178
g16
(lp3179
S'k'
asg40
I397
sS'.thisRepN'
p3180
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3181
I392
sS'.thisN'
p3182
I392
sS'.thisIndex'
p3183
g45
(g47
S'\x8d\x01\x00\x00'
tRp3184
sg15
(lp3185
S'd'
asg17
S'N'
sg14
I8
sa(dp3186
g16
(lp3187
S'd'
asg40
I282
sS'.thisRepN'
p3188
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3189
I393
sS'.thisN'
p3190
I393
sS'.thisIndex'
p3191
g45
(g47
S'\x1a\x01\x00\x00'
tRp3192
sg15
(lp3193
S'd'
asg17
S'Y'
sg14
I8
sa(dp3194
g16
(lp3195
S'd'
asg40
I258
sS'.thisRepN'
p3196
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3197
I394
sS'.thisN'
p3198
I394
sS'.thisIndex'
p3199
g45
(g47
S'\x02\x01\x00\x00'
tRp3200
sg15
(lp3201
S'd'
asg17
S'Y'
sg14
I8
sa(dp3202
g16
(lp3203
S'd'
asg40
I283
sS'.thisRepN'
p3204
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3205
I395
sS'.thisN'
p3206
I395
sS'.thisIndex'
p3207
g45
(g47
S'\x1b\x01\x00\x00'
tRp3208
sg15
(lp3209
S'd'
asg17
S'Y'
sg14
I8
sa(dp3210
g16
(lp3211
S'k'
asg40
I569
sS'.thisRepN'
p3212
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3213
I396
sS'.thisN'
p3214
I396
sS'.thisIndex'
p3215
g45
(g47
S'9\x02\x00\x00'
tRp3216
sg15
(lp3217
S'd'
asg17
S'N'
sg14
I8
sa(dp3218
g16
(lp3219
S'k'
asg40
I432
sS'.thisRepN'
p3220
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3221
I397
sS'.thisN'
p3222
I397
sS'.thisIndex'
p3223
g45
(g47
S'\xb0\x01\x00\x00'
tRp3224
sg15
(lp3225
S'd'
asg17
S'N'
sg14
I8
sa(dp3226
g16
(lp3227
S'k'
asg40
I463
sS'.thisRepN'
p3228
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3229
I398
sS'.thisN'
p3230
I398
sS'.thisIndex'
p3231
g45
(g47
S'\xcf\x01\x00\x00'
tRp3232
sg15
(lp3233
S'd'
asg17
S'N'
sg14
I8
sa(dp3234
g16
(lp3235
S'k'
asg40
I307
sS'.thisRepN'
p3236
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3237
I399
sS'.thisN'
p3238
I399
sS'.thisIndex'
p3239
g45
(g47
S'3\x01\x00\x00'
tRp3240
sg15
(lp3241
S'd'
asg17
S'N'
sg14
I8
sa(dp3242
g40
I429
sS'.thisN'
p3243
I400
sg24
g25
sg26
g27
sS'.thisTrialN'
p3244
I400
sS'.thisRepN'
p3245
I0
sS'.thisIndex'
p3246
g45
(g47
S'\xad\x01\x00\x00'
tRp3247
sg15
Nsg17
S'Timed out'
p3248
sg14
I9
sa(dp3249
g16
(lp3250
S'k'
asg40
I366
sS'.thisRepN'
p3251
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3252
I401
sS'.thisN'
p3253
I401
sS'.thisIndex'
p3254
g45
(g47
S'n\x01\x00\x00'
tRp3255
sg15
(lp3256
S'd'
asg17
S'N'
sg14
I9
sa(dp3257
g16
(lp3258
S'k'
asg40
I302
sS'.thisRepN'
p3259
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3260
I402
sS'.thisN'
p3261
I402
sS'.thisIndex'
p3262
g45
(g47
S'.\x01\x00\x00'
tRp3263
sg15
(lp3264
S'd'
asg17
S'N'
sg14
I9
sa(dp3265
g16
(lp3266
S'k'
asg40
I544
sS'.thisRepN'
p3267
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3268
I403
sS'.thisN'
p3269
I403
sS'.thisIndex'
p3270
g45
(g47
S' \x02\x00\x00'
tRp3271
sg15
(lp3272
S'd'
asg17
S'N'
sg14
I9
sa(dp3273
g16
(lp3274
S'k'
asg40
I412
sS'.thisRepN'
p3275
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3276
I404
sS'.thisN'
p3277
I404
sS'.thisIndex'
p3278
g45
(g47
S'\x9c\x01\x00\x00'
tRp3279
sg15
(lp3280
S'd'
asg17
S'N'
sg14
I9
sa(dp3281
g16
(lp3282
S'd'
asg40
I85
sS'.thisRepN'
p3283
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3284
I405
sS'.thisN'
p3285
I405
sS'.thisIndex'
p3286
g45
(g47
S'U\x00\x00\x00'
tRp3287
sg15
(lp3288
S'd'
asg17
S'Y'
sg14
I9
sa(dp3289
g16
(lp3290
S'd'
asg40
I68
sS'.thisRepN'
p3291
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3292
I406
sS'.thisN'
p3293
I406
sS'.thisIndex'
p3294
g45
(g47
S'D\x00\x00\x00'
tRp3295
sg15
(lp3296
S'd'
asg17
S'Y'
sg14
I9
sa(dp3297
g16
(lp3298
S'd'
asg40
I112
sS'.thisRepN'
p3299
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3300
I407
sS'.thisN'
p3301
I407
sS'.thisIndex'
p3302
g45
(g47
S'p\x00\x00\x00'
tRp3303
sg15
(lp3304
S'd'
asg17
S'Y'
sg14
I9
sa(dp3305
g16
(lp3306
S'd'
asg40
I11
sS'.thisRepN'
p3307
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3308
I408
sS'.thisN'
p3309
I408
sS'.thisIndex'
p3310
g45
(g47
S'\x0b\x00\x00\x00'
tRp3311
sg15
(lp3312
S'd'
asg17
S'Y'
sg14
I9
sa(dp3313
g16
(lp3314
S'd'
asg40
I280
sS'.thisRepN'
p3315
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3316
I409
sS'.thisN'
p3317
I409
sS'.thisIndex'
p3318
g45
(g47
S'\x18\x01\x00\x00'
tRp3319
sg15
(lp3320
S'd'
asg17
S'Y'
sg14
I9
sa(dp3321
g16
(lp3322
S'k'
asg40
I355
sS'.thisRepN'
p3323
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3324
I410
sS'.thisN'
p3325
I410
sS'.thisIndex'
p3326
g45
(g47
S'c\x01\x00\x00'
tRp3327
sg15
(lp3328
S'd'
asg17
S'N'
sg14
I9
sa(dp3329
g16
(lp3330
S'd'
asg40
I35
sS'.thisRepN'
p3331
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3332
I411
sS'.thisN'
p3333
I411
sS'.thisIndex'
p3334
g45
(g47
S'#\x00\x00\x00'
tRp3335
sg15
(lp3336
S'd'
asg17
S'Y'
sg14
I9
sa(dp3337
g16
(lp3338
S'd'
asg40
I236
sS'.thisRepN'
p3339
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3340
I412
sS'.thisN'
p3341
I412
sS'.thisIndex'
p3342
g45
(g47
S'\xec\x00\x00\x00'
tRp3343
sg15
(lp3344
S'd'
asg17
S'Y'
sg14
I9
sa(dp3345
g16
(lp3346
S'k'
asg40
I376
sS'.thisRepN'
p3347
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3348
I413
sS'.thisN'
p3349
I413
sS'.thisIndex'
p3350
g45
(g47
S'x\x01\x00\x00'
tRp3351
sg15
(lp3352
S'd'
asg17
S'N'
sg14
I9
sa(dp3353
g16
(lp3354
S'd'
asg40
I62
sS'.thisRepN'
p3355
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3356
I414
sS'.thisN'
p3357
I414
sS'.thisIndex'
p3358
g45
(g47
S'>\x00\x00\x00'
tRp3359
sg15
(lp3360
S'd'
asg17
S'Y'
sg14
I9
sa(dp3361
g16
(lp3362
S'k'
asg40
I367
sS'.thisRepN'
p3363
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3364
I415
sS'.thisN'
p3365
I415
sS'.thisIndex'
p3366
g45
(g47
S'o\x01\x00\x00'
tRp3367
sg15
(lp3368
S'd'
asg17
S'N'
sg14
I9
sa(dp3369
g16
(lp3370
S'd'
asg40
I287
sS'.thisRepN'
p3371
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3372
I416
sS'.thisN'
p3373
I416
sS'.thisIndex'
p3374
g45
(g47
S'\x1f\x01\x00\x00'
tRp3375
sg15
(lp3376
S'd'
asg17
S'Y'
sg14
I9
sa(dp3377
g16
(lp3378
S'k'
asg40
I358
sS'.thisRepN'
p3379
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3380
I417
sS'.thisN'
p3381
I417
sS'.thisIndex'
p3382
g45
(g47
S'f\x01\x00\x00'
tRp3383
sg15
(lp3384
S'd'
asg17
S'N'
sg14
I9
sa(dp3385
g16
(lp3386
S'k'
asg40
I408
sS'.thisRepN'
p3387
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3388
I418
sS'.thisN'
p3389
I418
sS'.thisIndex'
p3390
g45
(g47
S'\x98\x01\x00\x00'
tRp3391
sg15
(lp3392
S'd'
asg17
S'N'
sg14
I9
sa(dp3393
g16
(lp3394
S'k'
asg40
I478
sS'.thisRepN'
p3395
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3396
I419
sS'.thisN'
p3397
I419
sS'.thisIndex'
p3398
g45
(g47
S'\xde\x01\x00\x00'
tRp3399
sg15
(lp3400
S'd'
asg17
S'N'
sg14
I9
sa(dp3401
g16
(lp3402
S'd'
asg40
I132
sS'.thisRepN'
p3403
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3404
I420
sS'.thisN'
p3405
I420
sS'.thisIndex'
p3406
g45
(g47
S'\x84\x00\x00\x00'
tRp3407
sg15
(lp3408
S'd'
asg17
S'Y'
sg14
I9
sa(dp3409
g16
(lp3410
S'k'
asg40
I593
sS'.thisRepN'
p3411
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3412
I421
sS'.thisN'
p3413
I421
sS'.thisIndex'
p3414
g45
(g47
S'Q\x02\x00\x00'
tRp3415
sg15
(lp3416
S'd'
asg17
S'N'
sg14
I9
sa(dp3417
g16
(lp3418
S'd'
asg40
I140
sS'.thisRepN'
p3419
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3420
I422
sS'.thisN'
p3421
I422
sS'.thisIndex'
p3422
g45
(g47
S'\x8c\x00\x00\x00'
tRp3423
sg15
(lp3424
S'd'
asg17
S'Y'
sg14
I9
sa(dp3425
g16
(lp3426
S'd'
asg40
I102
sS'.thisRepN'
p3427
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3428
I423
sS'.thisN'
p3429
I423
sS'.thisIndex'
p3430
g45
(g47
S'f\x00\x00\x00'
tRp3431
sg15
(lp3432
S'd'
asg17
S'Y'
sg14
I9
sa(dp3433
g16
(lp3434
S'd'
asg40
I150
sS'.thisRepN'
p3435
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3436
I424
sS'.thisN'
p3437
I424
sS'.thisIndex'
p3438
g45
(g47
S'\x96\x00\x00\x00'
tRp3439
sg15
(lp3440
S'd'
asg17
S'Y'
sg14
I9
sa(dp3441
g16
(lp3442
S'k'
asg40
I336
sS'.thisRepN'
p3443
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3444
I425
sS'.thisN'
p3445
I425
sS'.thisIndex'
p3446
g45
(g47
S'P\x01\x00\x00'
tRp3447
sg15
(lp3448
S'd'
asg17
S'N'
sg14
I9
sa(dp3449
g16
(lp3450
S'd'
asg40
I220
sS'.thisRepN'
p3451
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3452
I426
sS'.thisN'
p3453
I426
sS'.thisIndex'
p3454
g45
(g47
S'\xdc\x00\x00\x00'
tRp3455
sg15
(lp3456
S'd'
asg17
S'Y'
sg14
I9
sa(dp3457
g16
(lp3458
S'k'
asg40
I471
sS'.thisRepN'
p3459
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3460
I427
sS'.thisN'
p3461
I427
sS'.thisIndex'
p3462
g45
(g47
S'\xd7\x01\x00\x00'
tRp3463
sg15
(lp3464
S'd'
asg17
S'N'
sg14
I9
sa(dp3465
g16
(lp3466
S'd'
asg40
I0
sS'.thisRepN'
p3467
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3468
I428
sS'.thisN'
p3469
I428
sS'.thisIndex'
p3470
g45
(g47
S'\x00\x00\x00\x00'
tRp3471
sg15
(lp3472
S'd'
asg17
S'Y'
sg14
I9
sa(dp3473
g16
(lp3474
S'd'
asg40
I199
sS'.thisRepN'
p3475
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3476
I429
sS'.thisN'
p3477
I429
sS'.thisIndex'
p3478
g45
(g47
S'\xc7\x00\x00\x00'
tRp3479
sg15
(lp3480
S'd'
asg17
S'Y'
sg14
I9
sa(dp3481
g16
(lp3482
S'd'
asg40
I158
sS'.thisRepN'
p3483
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3484
I430
sS'.thisN'
p3485
I430
sS'.thisIndex'
p3486
g45
(g47
S'\x9e\x00\x00\x00'
tRp3487
sg15
(lp3488
S'd'
asg17
S'Y'
sg14
I9
sa(dp3489
g16
(lp3490
S'd'
asg40
I81
sS'.thisRepN'
p3491
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3492
I431
sS'.thisN'
p3493
I431
sS'.thisIndex'
p3494
g45
(g47
S'Q\x00\x00\x00'
tRp3495
sg15
(lp3496
S'd'
asg17
S'Y'
sg14
I9
sa(dp3497
g16
(lp3498
S'd'
asg40
I268
sS'.thisRepN'
p3499
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3500
I432
sS'.thisN'
p3501
I432
sS'.thisIndex'
p3502
g45
(g47
S'\x0c\x01\x00\x00'
tRp3503
sg15
(lp3504
S'd'
asg17
S'Y'
sg14
I9
sa(dp3505
g16
(lp3506
S'k'
asg40
I347
sS'.thisRepN'
p3507
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3508
I433
sS'.thisN'
p3509
I433
sS'.thisIndex'
p3510
g45
(g47
S'[\x01\x00\x00'
tRp3511
sg15
(lp3512
S'd'
asg17
S'N'
sg14
I9
sa(dp3513
g16
(lp3514
S'k'
asg40
I516
sS'.thisRepN'
p3515
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3516
I434
sS'.thisN'
p3517
I434
sS'.thisIndex'
p3518
g45
(g47
S'\x04\x02\x00\x00'
tRp3519
sg15
(lp3520
S'd'
asg17
S'N'
sg14
I9
sa(dp3521
g16
(lp3522
S'd'
asg40
I17
sS'.thisRepN'
p3523
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3524
I435
sS'.thisN'
p3525
I435
sS'.thisIndex'
p3526
g45
(g47
S'\x11\x00\x00\x00'
tRp3527
sg15
(lp3528
S'd'
asg17
S'Y'
sg14
I9
sa(dp3529
g16
(lp3530
S'd'
asg40
I9
sS'.thisRepN'
p3531
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3532
I436
sS'.thisN'
p3533
I436
sS'.thisIndex'
p3534
g45
(g47
S'\t\x00\x00\x00'
tRp3535
sg15
(lp3536
S'd'
asg17
S'Y'
sg14
I9
sa(dp3537
g16
(lp3538
S'd'
asg40
I261
sS'.thisRepN'
p3539
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3540
I437
sS'.thisN'
p3541
I437
sS'.thisIndex'
p3542
g45
(g47
S'\x05\x01\x00\x00'
tRp3543
sg15
(lp3544
S'd'
asg17
S'Y'
sg14
I9
sa(dp3545
g16
(lp3546
S'd'
asg40
I239
sS'.thisRepN'
p3547
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3548
I438
sS'.thisN'
p3549
I438
sS'.thisIndex'
p3550
g45
(g47
S'\xef\x00\x00\x00'
tRp3551
sg15
(lp3552
S'd'
asg17
S'Y'
sg14
I9
sa(dp3553
g16
(lp3554
S'd'
asg40
I161
sS'.thisRepN'
p3555
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3556
I439
sS'.thisN'
p3557
I439
sS'.thisIndex'
p3558
g45
(g47
S'\xa1\x00\x00\x00'
tRp3559
sg15
(lp3560
S'd'
asg17
S'Y'
sg14
I9
sa(dp3561
g16
(lp3562
S'k'
asg40
I317
sS'.thisRepN'
p3563
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3564
I440
sS'.thisN'
p3565
I440
sS'.thisIndex'
p3566
g45
(g47
S'=\x01\x00\x00'
tRp3567
sg15
(lp3568
S'd'
asg17
S'N'
sg14
I9
sa(dp3569
g16
(lp3570
S'd'
asg40
I51
sS'.thisRepN'
p3571
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3572
I441
sS'.thisN'
p3573
I441
sS'.thisIndex'
p3574
g45
(g47
S'3\x00\x00\x00'
tRp3575
sg15
(lp3576
S'd'
asg17
S'Y'
sg14
I9
sa(dp3577
g16
(lp3578
S'k'
asg40
I582
sS'.thisRepN'
p3579
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3580
I442
sS'.thisN'
p3581
I442
sS'.thisIndex'
p3582
g45
(g47
S'F\x02\x00\x00'
tRp3583
sg15
(lp3584
S'd'
asg17
S'N'
sg14
I9
sa(dp3585
g16
(lp3586
S'k'
asg40
I515
sS'.thisRepN'
p3587
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3588
I443
sS'.thisN'
p3589
I443
sS'.thisIndex'
p3590
g45
(g47
S'\x03\x02\x00\x00'
tRp3591
sg15
(lp3592
S'd'
asg17
S'N'
sg14
I9
sa(dp3593
g16
(lp3594
S'd'
asg40
I255
sS'.thisRepN'
p3595
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3596
I444
sS'.thisN'
p3597
I444
sS'.thisIndex'
p3598
g45
(g47
S'\xff\x00\x00\x00'
tRp3599
sg15
(lp3600
S'd'
asg17
S'Y'
sg14
I9
sa(dp3601
g16
(lp3602
S'd'
asg40
I299
sS'.thisRepN'
p3603
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3604
I445
sS'.thisN'
p3605
I445
sS'.thisIndex'
p3606
g45
(g47
S'+\x01\x00\x00'
tRp3607
sg15
(lp3608
S'd'
asg17
S'Y'
sg14
I9
sa(dp3609
g16
(lp3610
S'k'
asg40
I315
sS'.thisRepN'
p3611
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3612
I446
sS'.thisN'
p3613
I446
sS'.thisIndex'
p3614
g45
(g47
S';\x01\x00\x00'
tRp3615
sg15
(lp3616
S'd'
asg17
S'N'
sg14
I9
sa(dp3617
g16
(lp3618
S'k'
asg40
I465
sS'.thisRepN'
p3619
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3620
I447
sS'.thisN'
p3621
I447
sS'.thisIndex'
p3622
g45
(g47
S'\xd1\x01\x00\x00'
tRp3623
sg15
(lp3624
S'd'
asg17
S'N'
sg14
I9
sa(dp3625
g16
(lp3626
S'k'
asg40
I505
sS'.thisRepN'
p3627
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3628
I448
sS'.thisN'
p3629
I448
sS'.thisIndex'
p3630
g45
(g47
S'\xf9\x01\x00\x00'
tRp3631
sg15
(lp3632
S'd'
asg17
S'N'
sg14
I9
sa(dp3633
g16
(lp3634
S'd'
asg40
I80
sS'.thisRepN'
p3635
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3636
I449
sS'.thisN'
p3637
I449
sS'.thisIndex'
p3638
g45
(g47
S'P\x00\x00\x00'
tRp3639
sg15
(lp3640
S'd'
asg17
S'Y'
sg14
I9
sa(dp3641
g16
(lp3642
S'k'
asg40
I461
sS'.thisRepN'
p3643
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3644
I450
sS'.thisN'
p3645
I450
sS'.thisIndex'
p3646
g45
(g47
S'\xcd\x01\x00\x00'
tRp3647
sg15
(lp3648
S'd'
asg17
S'N'
sg14
I10
sa(dp3649
g16
(lp3650
S'd'
asg40
I6
sS'.thisRepN'
p3651
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3652
I451
sS'.thisN'
p3653
I451
sS'.thisIndex'
p3654
g45
(g47
S'\x06\x00\x00\x00'
tRp3655
sg15
(lp3656
S'd'
asg17
S'Y'
sg14
I10
sa(dp3657
g16
(lp3658
S'd'
asg40
I56
sS'.thisRepN'
p3659
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3660
I452
sS'.thisN'
p3661
I452
sS'.thisIndex'
p3662
g45
(g47
S'8\x00\x00\x00'
tRp3663
sg15
(lp3664
S'd'
asg17
S'Y'
sg14
I10
sa(dp3665
g16
(lp3666
S'd'
asg40
I266
sS'.thisRepN'
p3667
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3668
I453
sS'.thisN'
p3669
I453
sS'.thisIndex'
p3670
g45
(g47
S'\n\x01\x00\x00'
tRp3671
sg15
(lp3672
S'd'
asg17
S'Y'
sg14
I10
sa(dp3673
g16
(lp3674
S'k'
asg40
I591
sS'.thisRepN'
p3675
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3676
I454
sS'.thisN'
p3677
I454
sS'.thisIndex'
p3678
g45
(g47
S'O\x02\x00\x00'
tRp3679
sg15
(lp3680
S'd'
asg17
S'N'
sg14
I10
sa(dp3681
g16
(lp3682
S'k'
asg40
I447
sS'.thisRepN'
p3683
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3684
I455
sS'.thisN'
p3685
I455
sS'.thisIndex'
p3686
g45
(g47
S'\xbf\x01\x00\x00'
tRp3687
sg15
(lp3688
S'd'
asg17
S'N'
sg14
I10
sa(dp3689
g16
(lp3690
S'd'
asg40
I296
sS'.thisRepN'
p3691
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3692
I456
sS'.thisN'
p3693
I456
sS'.thisIndex'
p3694
g45
(g47
S'(\x01\x00\x00'
tRp3695
sg15
(lp3696
S'd'
asg17
S'Y'
sg14
I10
sa(dp3697
g16
(lp3698
S'k'
asg40
I388
sS'.thisRepN'
p3699
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3700
I457
sS'.thisN'
p3701
I457
sS'.thisIndex'
p3702
g45
(g47
S'\x84\x01\x00\x00'
tRp3703
sg15
(lp3704
S'd'
asg17
S'N'
sg14
I10
sa(dp3705
g16
(lp3706
S'k'
asg40
I361
sS'.thisRepN'
p3707
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3708
I458
sS'.thisN'
p3709
I458
sS'.thisIndex'
p3710
g45
(g47
S'i\x01\x00\x00'
tRp3711
sg15
(lp3712
S'd'
asg17
S'N'
sg14
I10
sa(dp3713
g16
(lp3714
S'd'
asg40
I189
sS'.thisRepN'
p3715
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3716
I459
sS'.thisN'
p3717
I459
sS'.thisIndex'
p3718
g45
(g47
S'\xbd\x00\x00\x00'
tRp3719
sg15
(lp3720
S'd'
asg17
S'Y'
sg14
I10
sa(dp3721
g16
(lp3722
S'd'
asg40
I279
sS'.thisRepN'
p3723
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3724
I460
sS'.thisN'
p3725
I460
sS'.thisIndex'
p3726
g45
(g47
S'\x17\x01\x00\x00'
tRp3727
sg15
(lp3728
S'd'
asg17
S'Y'
sg14
I10
sa(dp3729
g16
(lp3730
S'd'
asg40
I55
sS'.thisRepN'
p3731
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3732
I461
sS'.thisN'
p3733
I461
sS'.thisIndex'
p3734
g45
(g47
S'7\x00\x00\x00'
tRp3735
sg15
(lp3736
S'd'
asg17
S'Y'
sg14
I10
sa(dp3737
g16
(lp3738
S'k'
asg40
I351
sS'.thisRepN'
p3739
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3740
I462
sS'.thisN'
p3741
I462
sS'.thisIndex'
p3742
g45
(g47
S'_\x01\x00\x00'
tRp3743
sg15
(lp3744
S'd'
asg17
S'N'
sg14
I10
sa(dp3745
g16
(lp3746
S'd'
asg40
I264
sS'.thisRepN'
p3747
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3748
I463
sS'.thisN'
p3749
I463
sS'.thisIndex'
p3750
g45
(g47
S'\x08\x01\x00\x00'
tRp3751
sg15
(lp3752
S'd'
asg17
S'Y'
sg14
I10
sa(dp3753
g16
(lp3754
S'd'
asg40
I245
sS'.thisRepN'
p3755
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3756
I464
sS'.thisN'
p3757
I464
sS'.thisIndex'
p3758
g45
(g47
S'\xf5\x00\x00\x00'
tRp3759
sg15
(lp3760
S'd'
asg17
S'Y'
sg14
I10
sa(dp3761
g16
(lp3762
S'd'
asg40
I142
sS'.thisRepN'
p3763
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3764
I465
sS'.thisN'
p3765
I465
sS'.thisIndex'
p3766
g45
(g47
S'\x8e\x00\x00\x00'
tRp3767
sg15
(lp3768
S'd'
asg17
S'Y'
sg14
I10
sa(dp3769
g16
(lp3770
S'k'
asg40
I542
sS'.thisRepN'
p3771
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3772
I466
sS'.thisN'
p3773
I466
sS'.thisIndex'
p3774
g45
(g47
S'\x1e\x02\x00\x00'
tRp3775
sg15
(lp3776
S'd'
asg17
S'N'
sg14
I10
sa(dp3777
g16
(lp3778
S'k'
asg40
I598
sS'.thisRepN'
p3779
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3780
I467
sS'.thisN'
p3781
I467
sS'.thisIndex'
p3782
g45
(g47
S'V\x02\x00\x00'
tRp3783
sg15
(lp3784
S'd'
asg17
S'N'
sg14
I10
sa(dp3785
g16
(lp3786
S'k'
asg40
I363
sS'.thisRepN'
p3787
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3788
I468
sS'.thisN'
p3789
I468
sS'.thisIndex'
p3790
g45
(g47
S'k\x01\x00\x00'
tRp3791
sg15
(lp3792
S'd'
asg17
S'N'
sg14
I10
sa(dp3793
g16
(lp3794
S'd'
asg40
I69
sS'.thisRepN'
p3795
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3796
I469
sS'.thisN'
p3797
I469
sS'.thisIndex'
p3798
g45
(g47
S'E\x00\x00\x00'
tRp3799
sg15
(lp3800
S'd'
asg17
S'Y'
sg14
I10
sa(dp3801
g16
(lp3802
S'd'
asg40
I183
sS'.thisRepN'
p3803
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3804
I470
sS'.thisN'
p3805
I470
sS'.thisIndex'
p3806
g45
(g47
S'\xb7\x00\x00\x00'
tRp3807
sg15
(lp3808
S'd'
asg17
S'Y'
sg14
I10
sa(dp3809
g16
(lp3810
S'k'
asg40
I373
sS'.thisRepN'
p3811
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3812
I471
sS'.thisN'
p3813
I471
sS'.thisIndex'
p3814
g45
(g47
S'u\x01\x00\x00'
tRp3815
sg15
(lp3816
S'd'
asg17
S'N'
sg14
I10
sa(dp3817
g16
(lp3818
S'd'
asg40
I263
sS'.thisRepN'
p3819
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3820
I472
sS'.thisN'
p3821
I472
sS'.thisIndex'
p3822
g45
(g47
S'\x07\x01\x00\x00'
tRp3823
sg15
(lp3824
S'd'
asg17
S'Y'
sg14
I10
sa(dp3825
g16
(lp3826
S'k'
asg40
I483
sS'.thisRepN'
p3827
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3828
I473
sS'.thisN'
p3829
I473
sS'.thisIndex'
p3830
g45
(g47
S'\xe3\x01\x00\x00'
tRp3831
sg15
(lp3832
S'd'
asg17
S'N'
sg14
I10
sa(dp3833
g16
(lp3834
S'd'
asg40
I232
sS'.thisRepN'
p3835
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3836
I474
sS'.thisN'
p3837
I474
sS'.thisIndex'
p3838
g45
(g47
S'\xe8\x00\x00\x00'
tRp3839
sg15
(lp3840
S'd'
asg17
S'Y'
sg14
I10
sa(dp3841
g16
(lp3842
S'k'
asg40
I531
sS'.thisRepN'
p3843
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3844
I475
sS'.thisN'
p3845
I475
sS'.thisIndex'
p3846
g45
(g47
S'\x13\x02\x00\x00'
tRp3847
sg15
(lp3848
S'd'
asg17
S'N'
sg14
I10
sa(dp3849
g16
(lp3850
S'k'
asg40
I500
sS'.thisRepN'
p3851
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3852
I476
sS'.thisN'
p3853
I476
sS'.thisIndex'
p3854
g45
(g47
S'\xf4\x01\x00\x00'
tRp3855
sg15
(lp3856
S'd'
asg17
S'N'
sg14
I10
sa(dp3857
g16
(lp3858
S'k'
asg40
I525
sS'.thisRepN'
p3859
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3860
I477
sS'.thisN'
p3861
I477
sS'.thisIndex'
p3862
g45
(g47
S'\r\x02\x00\x00'
tRp3863
sg15
(lp3864
S'd'
asg17
S'N'
sg14
I10
sa(dp3865
g16
(lp3866
S'd'
asg40
I116
sS'.thisRepN'
p3867
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3868
I478
sS'.thisN'
p3869
I478
sS'.thisIndex'
p3870
g45
(g47
S't\x00\x00\x00'
tRp3871
sg15
(lp3872
S'd'
asg17
S'Y'
sg14
I10
sa(dp3873
g16
(lp3874
S'k'
asg40
I438
sS'.thisRepN'
p3875
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3876
I479
sS'.thisN'
p3877
I479
sS'.thisIndex'
p3878
g45
(g47
S'\xb6\x01\x00\x00'
tRp3879
sg15
(lp3880
S'k'
asg17
S'Y'
sg14
I10
sa(dp3881
g16
(lp3882
S'k'
asg40
I502
sS'.thisRepN'
p3883
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3884
I480
sS'.thisN'
p3885
I480
sS'.thisIndex'
p3886
g45
(g47
S'\xf6\x01\x00\x00'
tRp3887
sg15
(lp3888
S'd'
asg17
S'N'
sg14
I10
sa(dp3889
g16
(lp3890
S'k'
asg40
I507
sS'.thisRepN'
p3891
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3892
I481
sS'.thisN'
p3893
I481
sS'.thisIndex'
p3894
g45
(g47
S'\xfb\x01\x00\x00'
tRp3895
sg15
(lp3896
S'k'
asg17
S'Y'
sg14
I10
sa(dp3897
g16
(lp3898
S'd'
asg40
I48
sS'.thisRepN'
p3899
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3900
I482
sS'.thisN'
p3901
I482
sS'.thisIndex'
p3902
g45
(g47
S'0\x00\x00\x00'
tRp3903
sg15
(lp3904
S'd'
asg17
S'Y'
sg14
I10
sa(dp3905
g16
(lp3906
S'd'
asg40
I156
sS'.thisRepN'
p3907
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3908
I483
sS'.thisN'
p3909
I483
sS'.thisIndex'
p3910
g45
(g47
S'\x9c\x00\x00\x00'
tRp3911
sg15
(lp3912
S'k'
asg17
S'N'
sg14
I10
sa(dp3913
g16
(lp3914
S'd'
asg40
I293
sS'.thisRepN'
p3915
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3916
I484
sS'.thisN'
p3917
I484
sS'.thisIndex'
p3918
g45
(g47
S'%\x01\x00\x00'
tRp3919
sg15
(lp3920
S'd'
asg17
S'Y'
sg14
I10
sa(dp3921
g16
(lp3922
S'd'
asg40
I169
sS'.thisRepN'
p3923
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3924
I485
sS'.thisN'
p3925
I485
sS'.thisIndex'
p3926
g45
(g47
S'\xa9\x00\x00\x00'
tRp3927
sg15
(lp3928
S'k'
asg17
S'N'
sg14
I10
sa(dp3929
g16
(lp3930
S'k'
asg40
I326
sS'.thisRepN'
p3931
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3932
I486
sS'.thisN'
p3933
I486
sS'.thisIndex'
p3934
g45
(g47
S'F\x01\x00\x00'
tRp3935
sg15
(lp3936
S'd'
asg17
S'N'
sg14
I10
sa(dp3937
g16
(lp3938
S'k'
asg40
I453
sS'.thisRepN'
p3939
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3940
I487
sS'.thisN'
p3941
I487
sS'.thisIndex'
p3942
g45
(g47
S'\xc5\x01\x00\x00'
tRp3943
sg15
(lp3944
S'k'
asg17
S'Y'
sg14
I10
sa(dp3945
g16
(lp3946
S'd'
asg40
I129
sS'.thisRepN'
p3947
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3948
I488
sS'.thisN'
p3949
I488
sS'.thisIndex'
p3950
g45
(g47
S'\x81\x00\x00\x00'
tRp3951
sg15
(lp3952
S'k'
asg17
S'N'
sg14
I10
sa(dp3953
g16
(lp3954
S'k'
asg40
I506
sS'.thisRepN'
p3955
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3956
I489
sS'.thisN'
p3957
I489
sS'.thisIndex'
p3958
g45
(g47
S'\xfa\x01\x00\x00'
tRp3959
sg15
(lp3960
S'k'
asg17
S'Y'
sg14
I10
sa(dp3961
g16
(lp3962
S'k'
asg40
I440
sS'.thisRepN'
p3963
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3964
I490
sS'.thisN'
p3965
I490
sS'.thisIndex'
p3966
g45
(g47
S'\xb8\x01\x00\x00'
tRp3967
sg15
(lp3968
S'k'
asg17
S'Y'
sg14
I10
sa(dp3969
g16
(lp3970
S'k'
asg40
I319
sS'.thisRepN'
p3971
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3972
I491
sS'.thisN'
p3973
I491
sS'.thisIndex'
p3974
g45
(g47
S'?\x01\x00\x00'
tRp3975
sg15
(lp3976
S'k'
asg17
S'Y'
sg14
I10
sa(dp3977
g16
(lp3978
S'k'
asg40
I485
sS'.thisRepN'
p3979
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3980
I492
sS'.thisN'
p3981
I492
sS'.thisIndex'
p3982
g45
(g47
S'\xe5\x01\x00\x00'
tRp3983
sg15
(lp3984
S'k'
asg17
S'Y'
sg14
I10
sa(dp3985
g16
(lp3986
S'd'
asg40
I1
sS'.thisRepN'
p3987
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3988
I493
sS'.thisN'
p3989
I493
sS'.thisIndex'
p3990
g45
(g47
S'\x01\x00\x00\x00'
tRp3991
sg15
(lp3992
S'k'
asg17
S'N'
sg14
I10
sa(dp3993
g16
(lp3994
S'k'
asg40
I519
sS'.thisRepN'
p3995
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p3996
I494
sS'.thisN'
p3997
I494
sS'.thisIndex'
p3998
g45
(g47
S'\x07\x02\x00\x00'
tRp3999
sg15
(lp4000
S'k'
asg17
S'Y'
sg14
I10
sa(dp4001
g16
(lp4002
S'k'
asg40
I523
sS'.thisRepN'
p4003
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p4004
I495
sS'.thisN'
p4005
I495
sS'.thisIndex'
p4006
g45
(g47
S'\x0b\x02\x00\x00'
tRp4007
sg15
(lp4008
S'k'
asg17
S'Y'
sg14
I10
sa(dp4009
g16
(lp4010
S'k'
asg40
I321
sS'.thisRepN'
p4011
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p4012
I496
sS'.thisN'
p4013
I496
sS'.thisIndex'
p4014
g45
(g47
S'A\x01\x00\x00'
tRp4015
sg15
(lp4016
S'k'
asg17
S'Y'
sg14
I10
sa(dp4017
g16
(lp4018
S'd'
asg40
I228
sS'.thisRepN'
p4019
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p4020
I497
sS'.thisN'
p4021
I497
sS'.thisIndex'
p4022
g45
(g47
S'\xe4\x00\x00\x00'
tRp4023
sg15
(lp4024
S'k'
asg17
S'N'
sg14
I10
sa(dp4025
g16
(lp4026
S'd'
asg40
I119
sS'.thisRepN'
p4027
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p4028
I498
sS'.thisN'
p4029
I498
sS'.thisIndex'
p4030
g45
(g47
S'w\x00\x00\x00'
tRp4031
sg15
(lp4032
S'k'
asg17
S'N'
sg14
I10
sa(dp4033
g16
(lp4034
S'k'
asg40
I533
sS'.thisRepN'
p4035
I0
sg24
g25
sg26
g27
sS'.thisTrialN'
p4036
I499
sS'.thisN'
p4037
I499
sS'.thisIndex'
p4038
g45
(g47
S'\x15\x02\x00\x00'
tRp4039
sg15
(lp4040
S'k'
asg17
S'Y'
sg14
I10
sa(dp4041
g16
(lp4042
S'd'
asg40
I115
sS'.thisRepN'
p4043
I0
sg19
S'Y'
sg20
S'Y'
sg18
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4044
I500
sS'.thisN'
p4045
I500
sS'.thisIndex'
p4046
g45
(g47
S's\x00\x00\x00'
tRp4047
sg15
(lp4048
S'd'
asg17
S'N'
sg14
I11
sa(dp4049
g16
(lp4050
S'd'
asg40
I240
sS'.thisRepN'
p4051
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4052
I501
sS'.thisN'
p4053
I501
sS'.thisIndex'
p4054
g45
(g47
S'\xf0\x00\x00\x00'
tRp4055
sg15
(lp4056
S'd'
asg17
S'N'
sg14
I11
sa(dp4057
g16
(lp4058
S'd'
asg40
I196
sS'.thisRepN'
p4059
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4060
I502
sS'.thisN'
p4061
I502
sS'.thisIndex'
p4062
g45
(g47
S'\xc4\x00\x00\x00'
tRp4063
sg15
(lp4064
S'k'
asg17
S'Y'
sg14
I11
sa(dp4065
g16
(lp4066
S'k'
asg40
I522
sS'.thisRepN'
p4067
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4068
I503
sS'.thisN'
p4069
I503
sS'.thisIndex'
p4070
g45
(g47
S'\n\x02\x00\x00'
tRp4071
sg15
(lp4072
S'k'
asg17
S'N'
sg14
I11
sa(dp4073
g16
(lp4074
S'k'
asg40
I381
sS'.thisRepN'
p4075
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4076
I504
sS'.thisN'
p4077
I504
sS'.thisIndex'
p4078
g45
(g47
S'}\x01\x00\x00'
tRp4079
sg15
(lp4080
S'k'
asg17
S'N'
sg14
I11
sa(dp4081
g16
(lp4082
S'k'
asg40
I508
sS'.thisRepN'
p4083
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4084
I505
sS'.thisN'
p4085
I505
sS'.thisIndex'
p4086
g45
(g47
S'\xfc\x01\x00\x00'
tRp4087
sg15
(lp4088
S'd'
asg17
S'Y'
sg14
I11
sa(dp4089
g16
(lp4090
S'k'
asg40
I342
sS'.thisRepN'
p4091
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4092
I506
sS'.thisN'
p4093
I506
sS'.thisIndex'
p4094
g45
(g47
S'V\x01\x00\x00'
tRp4095
sg15
(lp4096
S'k'
asg17
S'N'
sg14
I11
sa(dp4097
g16
(lp4098
S'k'
asg40
I430
sS'.thisRepN'
p4099
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4100
I507
sS'.thisN'
p4101
I507
sS'.thisIndex'
p4102
g45
(g47
S'\xae\x01\x00\x00'
tRp4103
sg15
(lp4104
S'd'
asg17
S'Y'
sg14
I11
sa(dp4105
g16
(lp4106
S'd'
asg40
I61
sS'.thisRepN'
p4107
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4108
I508
sS'.thisN'
p4109
I508
sS'.thisIndex'
p4110
g45
(g47
S'=\x00\x00\x00'
tRp4111
sg15
(lp4112
S'd'
asg17
S'N'
sg14
I11
sa(dp4113
g16
(lp4114
S'd'
asg40
I138
sS'.thisRepN'
p4115
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4116
I509
sS'.thisN'
p4117
I509
sS'.thisIndex'
p4118
g45
(g47
S'\x8a\x00\x00\x00'
tRp4119
sg15
(lp4120
S'd'
asg17
S'N'
sg14
I11
sa(dp4121
g16
(lp4122
S'd'
asg40
I136
sS'.thisRepN'
p4123
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4124
I510
sS'.thisN'
p4125
I510
sS'.thisIndex'
p4126
g45
(g47
S'\x88\x00\x00\x00'
tRp4127
sg15
(lp4128
S'd'
asg17
S'N'
sg14
I11
sa(dp4129
g16
(lp4130
S'd'
asg40
I276
sS'.thisRepN'
p4131
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4132
I511
sS'.thisN'
p4133
I511
sS'.thisIndex'
p4134
g45
(g47
S'\x14\x01\x00\x00'
tRp4135
sg15
(lp4136
S'd'
asg17
S'N'
sg14
I11
sa(dp4137
g16
(lp4138
S'd'
asg40
I82
sS'.thisRepN'
p4139
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4140
I512
sS'.thisN'
p4141
I512
sS'.thisIndex'
p4142
g45
(g47
S'R\x00\x00\x00'
tRp4143
sg15
(lp4144
S'd'
asg17
S'N'
sg14
I11
sa(dp4145
g16
(lp4146
S'k'
asg40
I546
sS'.thisRepN'
p4147
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4148
I513
sS'.thisN'
p4149
I513
sS'.thisIndex'
p4150
g45
(g47
S'"\x02\x00\x00'
tRp4151
sg15
(lp4152
S'd'
asg17
S'Y'
sg14
I11
sa(dp4153
g16
(lp4154
S'k'
asg40
I379
sS'.thisRepN'
p4155
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4156
I514
sS'.thisN'
p4157
I514
sS'.thisIndex'
p4158
g45
(g47
S'{\x01\x00\x00'
tRp4159
sg15
(lp4160
S'd'
asg17
S'Y'
sg14
I11
sa(dp4161
g16
(lp4162
S'd'
asg40
I216
sS'.thisRepN'
p4163
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4164
I515
sS'.thisN'
p4165
I515
sS'.thisIndex'
p4166
g45
(g47
S'\xd8\x00\x00\x00'
tRp4167
sg15
(lp4168
S'd'
asg17
S'N'
sg14
I11
sa(dp4169
g16
(lp4170
S'k'
asg40
I572
sS'.thisRepN'
p4171
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4172
I516
sS'.thisN'
p4173
I516
sS'.thisIndex'
p4174
g45
(g47
S'<\x02\x00\x00'
tRp4175
sg15
(lp4176
S'k'
asg17
S'N'
sg14
I11
sa(dp4177
g16
(lp4178
S'k'
asg40
I497
sS'.thisRepN'
p4179
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4180
I517
sS'.thisN'
p4181
I517
sS'.thisIndex'
p4182
g45
(g47
S'\xf1\x01\x00\x00'
tRp4183
sg15
(lp4184
S'd'
asg17
S'Y'
sg14
I11
sa(dp4185
g16
(lp4186
S'k'
asg40
I576
sS'.thisRepN'
p4187
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4188
I518
sS'.thisN'
p4189
I518
sS'.thisIndex'
p4190
g45
(g47
S'@\x02\x00\x00'
tRp4191
sg15
(lp4192
S'k'
asg17
S'N'
sg14
I11
sa(dp4193
g16
(lp4194
S'd'
asg40
I285
sS'.thisRepN'
p4195
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4196
I519
sS'.thisN'
p4197
I519
sS'.thisIndex'
p4198
g45
(g47
S'\x1d\x01\x00\x00'
tRp4199
sg15
(lp4200
S'd'
asg17
S'N'
sg14
I11
sa(dp4201
g16
(lp4202
S'd'
asg40
I98
sS'.thisRepN'
p4203
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4204
I520
sS'.thisN'
p4205
I520
sS'.thisIndex'
p4206
g45
(g47
S'b\x00\x00\x00'
tRp4207
sg15
(lp4208
S'd'
asg17
S'N'
sg14
I11
sa(dp4209
g16
(lp4210
S'k'
asg40
I527
sS'.thisRepN'
p4211
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4212
I521
sS'.thisN'
p4213
I521
sS'.thisIndex'
p4214
g45
(g47
S'\x0f\x02\x00\x00'
tRp4215
sg15
(lp4216
S'd'
asg17
S'Y'
sg14
I11
sa(dp4217
g16
(lp4218
S'd'
asg40
I152
sS'.thisRepN'
p4219
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4220
I522
sS'.thisN'
p4221
I522
sS'.thisIndex'
p4222
g45
(g47
S'\x98\x00\x00\x00'
tRp4223
sg15
(lp4224
S'd'
asg17
S'N'
sg14
I11
sa(dp4225
g16
(lp4226
S'd'
asg40
I18
sS'.thisRepN'
p4227
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4228
I523
sS'.thisN'
p4229
I523
sS'.thisIndex'
p4230
g45
(g47
S'\x12\x00\x00\x00'
tRp4231
sg15
(lp4232
S'd'
asg17
S'N'
sg14
I11
sa(dp4233
g16
(lp4234
S'd'
asg40
I101
sS'.thisRepN'
p4235
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4236
I524
sS'.thisN'
p4237
I524
sS'.thisIndex'
p4238
g45
(g47
S'e\x00\x00\x00'
tRp4239
sg15
(lp4240
S'd'
asg17
S'N'
sg14
I11
sa(dp4241
g16
(lp4242
S'd'
asg40
I117
sS'.thisRepN'
p4243
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4244
I525
sS'.thisN'
p4245
I525
sS'.thisIndex'
p4246
g45
(g47
S'u\x00\x00\x00'
tRp4247
sg15
(lp4248
S'd'
asg17
S'N'
sg14
I11
sa(dp4249
g16
(lp4250
S'd'
asg40
I43
sS'.thisRepN'
p4251
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4252
I526
sS'.thisN'
p4253
I526
sS'.thisIndex'
p4254
g45
(g47
S'+\x00\x00\x00'
tRp4255
sg15
(lp4256
S'd'
asg17
S'N'
sg14
I11
sa(dp4257
g16
(lp4258
S'd'
asg40
I295
sS'.thisRepN'
p4259
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4260
I527
sS'.thisN'
p4261
I527
sS'.thisIndex'
p4262
g45
(g47
S"'\x01\x00\x00"
tRp4263
sg15
(lp4264
S'd'
asg17
S'N'
sg14
I11
sa(dp4265
g16
(lp4266
S'k'
asg40
I411
sS'.thisRepN'
p4267
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4268
I528
sS'.thisN'
p4269
I528
sS'.thisIndex'
p4270
g45
(g47
S'\x9b\x01\x00\x00'
tRp4271
sg15
(lp4272
S'k'
asg17
S'N'
sg14
I11
sa(dp4273
g16
(lp4274
S'k'
asg40
I575
sS'.thisRepN'
p4275
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4276
I529
sS'.thisN'
p4277
I529
sS'.thisIndex'
p4278
g45
(g47
S'?\x02\x00\x00'
tRp4279
sg15
(lp4280
S'k'
asg17
S'N'
sg14
I11
sa(dp4281
g16
(lp4282
S'd'
asg40
I153
sS'.thisRepN'
p4283
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4284
I530
sS'.thisN'
p4285
I530
sS'.thisIndex'
p4286
g45
(g47
S'\x99\x00\x00\x00'
tRp4287
sg15
(lp4288
S'd'
asg17
S'N'
sg14
I11
sa(dp4289
g16
(lp4290
S'k'
asg40
I560
sS'.thisRepN'
p4291
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4292
I531
sS'.thisN'
p4293
I531
sS'.thisIndex'
p4294
g45
(g47
S'0\x02\x00\x00'
tRp4295
sg15
(lp4296
S'd'
asg17
S'Y'
sg14
I11
sa(dp4297
g16
(lp4298
S'k'
asg40
I395
sS'.thisRepN'
p4299
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4300
I532
sS'.thisN'
p4301
I532
sS'.thisIndex'
p4302
g45
(g47
S'\x8b\x01\x00\x00'
tRp4303
sg15
(lp4304
S'd'
asg17
S'Y'
sg14
I11
sa(dp4305
g16
(lp4306
S'k'
asg40
I316
sS'.thisRepN'
p4307
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4308
I533
sS'.thisN'
p4309
I533
sS'.thisIndex'
p4310
g45
(g47
S'<\x01\x00\x00'
tRp4311
sg15
(lp4312
S'd'
asg17
S'Y'
sg14
I11
sa(dp4313
g16
(lp4314
S'd'
asg40
I286
sS'.thisRepN'
p4315
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4316
I534
sS'.thisN'
p4317
I534
sS'.thisIndex'
p4318
g45
(g47
S'\x1e\x01\x00\x00'
tRp4319
sg15
(lp4320
S'd'
asg17
S'N'
sg14
I11
sa(dp4321
g16
(lp4322
S'd'
asg40
I72
sS'.thisRepN'
p4323
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4324
I535
sS'.thisN'
p4325
I535
sS'.thisIndex'
p4326
g45
(g47
S'H\x00\x00\x00'
tRp4327
sg15
(lp4328
S'd'
asg17
S'N'
sg14
I11
sa(dp4329
g16
(lp4330
S'd'
asg40
I90
sS'.thisRepN'
p4331
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4332
I536
sS'.thisN'
p4333
I536
sS'.thisIndex'
p4334
g45
(g47
S'Z\x00\x00\x00'
tRp4335
sg15
(lp4336
S'd'
asg17
S'N'
sg14
I11
sa(dp4337
g16
(lp4338
S'd'
asg40
I209
sS'.thisRepN'
p4339
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4340
I537
sS'.thisN'
p4341
I537
sS'.thisIndex'
p4342
g45
(g47
S'\xd1\x00\x00\x00'
tRp4343
sg15
(lp4344
S'd'
asg17
S'N'
sg14
I11
sa(dp4345
g16
(lp4346
S'k'
asg40
I512
sS'.thisRepN'
p4347
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4348
I538
sS'.thisN'
p4349
I538
sS'.thisIndex'
p4350
g45
(g47
S'\x00\x02\x00\x00'
tRp4351
sg15
(lp4352
S'd'
asg17
S'Y'
sg14
I11
sa(dp4353
g16
(lp4354
S'd'
asg40
I26
sS'.thisRepN'
p4355
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4356
I539
sS'.thisN'
p4357
I539
sS'.thisIndex'
p4358
g45
(g47
S'\x1a\x00\x00\x00'
tRp4359
sg15
(lp4360
S'd'
asg17
S'N'
sg14
I11
sa(dp4361
g16
(lp4362
S'd'
asg40
I247
sS'.thisRepN'
p4363
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4364
I540
sS'.thisN'
p4365
I540
sS'.thisIndex'
p4366
g45
(g47
S'\xf7\x00\x00\x00'
tRp4367
sg15
(lp4368
S'd'
asg17
S'N'
sg14
I11
sa(dp4369
g16
(lp4370
S'd'
asg40
I103
sS'.thisRepN'
p4371
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4372
I541
sS'.thisN'
p4373
I541
sS'.thisIndex'
p4374
g45
(g47
S'g\x00\x00\x00'
tRp4375
sg15
(lp4376
S'd'
asg17
S'N'
sg14
I11
sa(dp4377
g16
(lp4378
S'k'
asg40
I387
sS'.thisRepN'
p4379
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4380
I542
sS'.thisN'
p4381
I542
sS'.thisIndex'
p4382
g45
(g47
S'\x83\x01\x00\x00'
tRp4383
sg15
(lp4384
S'd'
asg17
S'Y'
sg14
I11
sa(dp4385
g16
(lp4386
S'd'
asg40
I173
sS'.thisRepN'
p4387
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4388
I543
sS'.thisN'
p4389
I543
sS'.thisIndex'
p4390
g45
(g47
S'\xad\x00\x00\x00'
tRp4391
sg15
(lp4392
S'd'
asg17
S'N'
sg14
I11
sa(dp4393
g16
(lp4394
S'd'
asg40
I41
sS'.thisRepN'
p4395
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4396
I544
sS'.thisN'
p4397
I544
sS'.thisIndex'
p4398
g45
(g47
S')\x00\x00\x00'
tRp4399
sg15
(lp4400
S'd'
asg17
S'N'
sg14
I11
sa(dp4401
g16
(lp4402
S'k'
asg40
I577
sS'.thisRepN'
p4403
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4404
I545
sS'.thisN'
p4405
I545
sS'.thisIndex'
p4406
g45
(g47
S'A\x02\x00\x00'
tRp4407
sg15
(lp4408
S'd'
asg17
S'Y'
sg14
I11
sa(dp4409
g16
(lp4410
S'd'
asg40
I39
sS'.thisRepN'
p4411
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4412
I546
sS'.thisN'
p4413
I546
sS'.thisIndex'
p4414
g45
(g47
S"'\x00\x00\x00"
tRp4415
sg15
(lp4416
S'd'
asg17
S'N'
sg14
I11
sa(dp4417
g16
(lp4418
S'k'
asg40
I538
sS'.thisRepN'
p4419
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4420
I547
sS'.thisN'
p4421
I547
sS'.thisIndex'
p4422
g45
(g47
S'\x1a\x02\x00\x00'
tRp4423
sg15
(lp4424
S'd'
asg17
S'Y'
sg14
I11
sa(dp4425
g16
(lp4426
S'k'
asg40
I571
sS'.thisRepN'
p4427
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4428
I548
sS'.thisN'
p4429
I548
sS'.thisIndex'
p4430
g45
(g47
S';\x02\x00\x00'
tRp4431
sg15
(lp4432
S'd'
asg17
S'Y'
sg14
I11
sa(dp4433
g16
(lp4434
S'd'
asg40
I4
sS'.thisRepN'
p4435
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4436
I549
sS'.thisN'
p4437
I549
sS'.thisIndex'
p4438
g45
(g47
S'\x04\x00\x00\x00'
tRp4439
sg15
(lp4440
S'd'
asg17
S'N'
sg14
I11
sa(dp4441
g16
(lp4442
S'k'
asg40
I567
sS'.thisRepN'
p4443
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4444
I550
sS'.thisN'
p4445
I550
sS'.thisIndex'
p4446
g45
(g47
S'7\x02\x00\x00'
tRp4447
sg15
(lp4448
S'd'
asg17
S'Y'
sg14
I12
sa(dp4449
g16
(lp4450
S'd'
asg40
I8
sS'.thisRepN'
p4451
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4452
I551
sS'.thisN'
p4453
I551
sS'.thisIndex'
p4454
g45
(g47
S'\x08\x00\x00\x00'
tRp4455
sg15
(lp4456
S'd'
asg17
S'N'
sg14
I12
sa(dp4457
g16
(lp4458
S'd'
asg40
I70
sS'.thisRepN'
p4459
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4460
I552
sS'.thisN'
p4461
I552
sS'.thisIndex'
p4462
g45
(g47
S'F\x00\x00\x00'
tRp4463
sg15
(lp4464
S'd'
asg17
S'N'
sg14
I12
sa(dp4465
g16
(lp4466
S'k'
asg40
I332
sS'.thisRepN'
p4467
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4468
I553
sS'.thisN'
p4469
I553
sS'.thisIndex'
p4470
g45
(g47
S'L\x01\x00\x00'
tRp4471
sg15
(lp4472
S'd'
asg17
S'Y'
sg14
I12
sa(dp4473
g16
(lp4474
S'k'
asg40
I419
sS'.thisRepN'
p4475
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4476
I554
sS'.thisN'
p4477
I554
sS'.thisIndex'
p4478
g45
(g47
S'\xa3\x01\x00\x00'
tRp4479
sg15
(lp4480
S'd'
asg17
S'Y'
sg14
I12
sa(dp4481
g16
(lp4482
S'd'
asg40
I193
sS'.thisRepN'
p4483
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4484
I555
sS'.thisN'
p4485
I555
sS'.thisIndex'
p4486
g45
(g47
S'\xc1\x00\x00\x00'
tRp4487
sg15
(lp4488
S'd'
asg17
S'N'
sg14
I12
sa(dp4489
g16
(lp4490
S'd'
asg40
I252
sS'.thisRepN'
p4491
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4492
I556
sS'.thisN'
p4493
I556
sS'.thisIndex'
p4494
g45
(g47
S'\xfc\x00\x00\x00'
tRp4495
sg15
(lp4496
S'd'
asg17
S'N'
sg14
I12
sa(dp4497
g16
(lp4498
S'k'
asg40
I554
sS'.thisRepN'
p4499
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4500
I557
sS'.thisN'
p4501
I557
sS'.thisIndex'
p4502
g45
(g47
S'*\x02\x00\x00'
tRp4503
sg15
(lp4504
S'd'
asg17
S'Y'
sg14
I12
sa(dp4505
g16
(lp4506
S'k'
asg40
I322
sS'.thisRepN'
p4507
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4508
I558
sS'.thisN'
p4509
I558
sS'.thisIndex'
p4510
g45
(g47
S'B\x01\x00\x00'
tRp4511
sg15
(lp4512
S'd'
asg17
S'Y'
sg14
I12
sa(dp4513
g16
(lp4514
S'd'
asg40
I214
sS'.thisRepN'
p4515
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4516
I559
sS'.thisN'
p4517
I559
sS'.thisIndex'
p4518
g45
(g47
S'\xd6\x00\x00\x00'
tRp4519
sg15
(lp4520
S'd'
asg17
S'N'
sg14
I12
sa(dp4521
g16
(lp4522
S'k'
asg40
I345
sS'.thisRepN'
p4523
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4524
I560
sS'.thisN'
p4525
I560
sS'.thisIndex'
p4526
g45
(g47
S'Y\x01\x00\x00'
tRp4527
sg15
(lp4528
S'd'
asg17
S'Y'
sg14
I12
sa(dp4529
g16
(lp4530
S'k'
asg40
I498
sS'.thisRepN'
p4531
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4532
I561
sS'.thisN'
p4533
I561
sS'.thisIndex'
p4534
g45
(g47
S'\xf2\x01\x00\x00'
tRp4535
sg15
(lp4536
S'd'
asg17
S'Y'
sg14
I12
sa(dp4537
g16
(lp4538
S'd'
asg40
I37
sS'.thisRepN'
p4539
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4540
I562
sS'.thisN'
p4541
I562
sS'.thisIndex'
p4542
g45
(g47
S'%\x00\x00\x00'
tRp4543
sg15
(lp4544
S'd'
asg17
S'N'
sg14
I12
sa(dp4545
g16
(lp4546
S'd'
asg40
I159
sS'.thisRepN'
p4547
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4548
I563
sS'.thisN'
p4549
I563
sS'.thisIndex'
p4550
g45
(g47
S'\x9f\x00\x00\x00'
tRp4551
sg15
(lp4552
S'd'
asg17
S'N'
sg14
I12
sa(dp4553
g16
(lp4554
S'k'
asg40
I470
sS'.thisRepN'
p4555
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4556
I564
sS'.thisN'
p4557
I564
sS'.thisIndex'
p4558
g45
(g47
S'\xd6\x01\x00\x00'
tRp4559
sg15
(lp4560
S'd'
asg17
S'Y'
sg14
I12
sa(dp4561
g16
(lp4562
S'k'
asg40
I425
sS'.thisRepN'
p4563
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4564
I565
sS'.thisN'
p4565
I565
sS'.thisIndex'
p4566
g45
(g47
S'\xa9\x01\x00\x00'
tRp4567
sg15
(lp4568
S'd'
asg17
S'Y'
sg14
I12
sa(dp4569
g16
(lp4570
S'd'
asg40
I273
sS'.thisRepN'
p4571
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4572
I566
sS'.thisN'
p4573
I566
sS'.thisIndex'
p4574
g45
(g47
S'\x11\x01\x00\x00'
tRp4575
sg15
(lp4576
S'd'
asg17
S'N'
sg14
I12
sa(dp4577
g16
(lp4578
S'k'
asg40
I422
sS'.thisRepN'
p4579
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4580
I567
sS'.thisN'
p4581
I567
sS'.thisIndex'
p4582
g45
(g47
S'\xa6\x01\x00\x00'
tRp4583
sg15
(lp4584
S'd'
asg17
S'Y'
sg14
I12
sa(dp4585
g16
(lp4586
S'd'
asg40
I106
sS'.thisRepN'
p4587
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4588
I568
sS'.thisN'
p4589
I568
sS'.thisIndex'
p4590
g45
(g47
S'j\x00\x00\x00'
tRp4591
sg15
(lp4592
S'd'
asg17
S'N'
sg14
I12
sa(dp4593
g16
(lp4594
S'k'
asg40
I390
sS'.thisRepN'
p4595
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4596
I569
sS'.thisN'
p4597
I569
sS'.thisIndex'
p4598
g45
(g47
S'\x86\x01\x00\x00'
tRp4599
sg15
(lp4600
S'd'
asg17
S'Y'
sg14
I12
sa(dp4601
g16
(lp4602
S'k'
asg40
I595
sS'.thisRepN'
p4603
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4604
I570
sS'.thisN'
p4605
I570
sS'.thisIndex'
p4606
g45
(g47
S'S\x02\x00\x00'
tRp4607
sg15
(lp4608
S'd'
asg17
S'Y'
sg14
I12
sa(dp4609
g16
(lp4610
S'd'
asg40
I59
sS'.thisRepN'
p4611
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4612
I571
sS'.thisN'
p4613
I571
sS'.thisIndex'
p4614
g45
(g47
S';\x00\x00\x00'
tRp4615
sg15
(lp4616
S'd'
asg17
S'N'
sg14
I12
sa(dp4617
g16
(lp4618
S'd'
asg40
I251
sS'.thisRepN'
p4619
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4620
I572
sS'.thisN'
p4621
I572
sS'.thisIndex'
p4622
g45
(g47
S'\xfb\x00\x00\x00'
tRp4623
sg15
(lp4624
S'd'
asg17
S'N'
sg14
I12
sa(dp4625
g16
(lp4626
S'd'
asg40
I221
sS'.thisRepN'
p4627
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4628
I573
sS'.thisN'
p4629
I573
sS'.thisIndex'
p4630
g45
(g47
S'\xdd\x00\x00\x00'
tRp4631
sg15
(lp4632
S'd'
asg17
S'N'
sg14
I12
sa(dp4633
g16
(lp4634
S'k'
asg40
I568
sS'.thisRepN'
p4635
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4636
I574
sS'.thisN'
p4637
I574
sS'.thisIndex'
p4638
g45
(g47
S'8\x02\x00\x00'
tRp4639
sg15
(lp4640
S'd'
asg17
S'Y'
sg14
I12
sa(dp4641
g16
(lp4642
S'd'
asg40
I244
sS'.thisRepN'
p4643
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4644
I575
sS'.thisN'
p4645
I575
sS'.thisIndex'
p4646
g45
(g47
S'\xf4\x00\x00\x00'
tRp4647
sg15
(lp4648
S'd'
asg17
S'N'
sg14
I12
sa(dp4649
g16
(lp4650
S'k'
asg40
I518
sS'.thisRepN'
p4651
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4652
I576
sS'.thisN'
p4653
I576
sS'.thisIndex'
p4654
g45
(g47
S'\x06\x02\x00\x00'
tRp4655
sg15
(lp4656
S'd'
asg17
S'Y'
sg14
I12
sa(dp4657
g16
(lp4658
S'd'
asg40
I88
sS'.thisRepN'
p4659
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4660
I577
sS'.thisN'
p4661
I577
sS'.thisIndex'
p4662
g45
(g47
S'X\x00\x00\x00'
tRp4663
sg15
(lp4664
S'd'
asg17
S'N'
sg14
I12
sa(dp4665
g16
(lp4666
S'd'
asg40
I242
sS'.thisRepN'
p4667
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4668
I578
sS'.thisN'
p4669
I578
sS'.thisIndex'
p4670
g45
(g47
S'\xf2\x00\x00\x00'
tRp4671
sg15
(lp4672
S'd'
asg17
S'N'
sg14
I12
sa(dp4673
g16
(lp4674
S'd'
asg40
I134
sS'.thisRepN'
p4675
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4676
I579
sS'.thisN'
p4677
I579
sS'.thisIndex'
p4678
g45
(g47
S'\x86\x00\x00\x00'
tRp4679
sg15
(lp4680
S'd'
asg17
S'N'
sg14
I12
sa(dp4681
g16
(lp4682
S'k'
asg40
I309
sS'.thisRepN'
p4683
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4684
I580
sS'.thisN'
p4685
I580
sS'.thisIndex'
p4686
g45
(g47
S'5\x01\x00\x00'
tRp4687
sg15
(lp4688
S'd'
asg17
S'Y'
sg14
I12
sa(dp4689
g16
(lp4690
S'd'
asg40
I95
sS'.thisRepN'
p4691
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4692
I581
sS'.thisN'
p4693
I581
sS'.thisIndex'
p4694
g45
(g47
S'_\x00\x00\x00'
tRp4695
sg15
(lp4696
S'd'
asg17
S'N'
sg14
I12
sa(dp4697
g16
(lp4698
S'k'
asg40
I339
sS'.thisRepN'
p4699
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4700
I582
sS'.thisN'
p4701
I582
sS'.thisIndex'
p4702
g45
(g47
S'S\x01\x00\x00'
tRp4703
sg15
(lp4704
S'd'
asg17
S'Y'
sg14
I12
sa(dp4705
g16
(lp4706
S'k'
asg40
I327
sS'.thisRepN'
p4707
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4708
I583
sS'.thisN'
p4709
I583
sS'.thisIndex'
p4710
g45
(g47
S'G\x01\x00\x00'
tRp4711
sg15
(lp4712
S'd'
asg17
S'Y'
sg14
I12
sa(dp4713
g16
(lp4714
S'k'
asg40
I359
sS'.thisRepN'
p4715
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4716
I584
sS'.thisN'
p4717
I584
sS'.thisIndex'
p4718
g45
(g47
S'g\x01\x00\x00'
tRp4719
sg15
(lp4720
S'd'
asg17
S'Y'
sg14
I12
sa(dp4721
g16
(lp4722
S'd'
asg40
I52
sS'.thisRepN'
p4723
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4724
I585
sS'.thisN'
p4725
I585
sS'.thisIndex'
p4726
g45
(g47
S'4\x00\x00\x00'
tRp4727
sg15
(lp4728
S'd'
asg17
S'N'
sg14
I12
sa(dp4729
g16
(lp4730
S'd'
asg40
I185
sS'.thisRepN'
p4731
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4732
I586
sS'.thisN'
p4733
I586
sS'.thisIndex'
p4734
g45
(g47
S'\xb9\x00\x00\x00'
tRp4735
sg15
(lp4736
S'd'
asg17
S'N'
sg14
I12
sa(dp4737
g16
(lp4738
S'd'
asg40
I178
sS'.thisRepN'
p4739
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4740
I587
sS'.thisN'
p4741
I587
sS'.thisIndex'
p4742
g45
(g47
S'\xb2\x00\x00\x00'
tRp4743
sg15
(lp4744
S'd'
asg17
S'N'
sg14
I12
sa(dp4745
g16
(lp4746
S'k'
asg40
I564
sS'.thisRepN'
p4747
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4748
I588
sS'.thisN'
p4749
I588
sS'.thisIndex'
p4750
g45
(g47
S'4\x02\x00\x00'
tRp4751
sg15
(lp4752
S'd'
asg17
S'Y'
sg14
I12
sa(dp4753
g16
(lp4754
S'd'
asg40
I168
sS'.thisRepN'
p4755
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4756
I589
sS'.thisN'
p4757
I589
sS'.thisIndex'
p4758
g45
(g47
S'\xa8\x00\x00\x00'
tRp4759
sg15
(lp4760
S'd'
asg17
S'N'
sg14
I12
sa(dp4761
g16
(lp4762
S'k'
asg40
I435
sS'.thisRepN'
p4763
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4764
I590
sS'.thisN'
p4765
I590
sS'.thisIndex'
p4766
g45
(g47
S'\xb3\x01\x00\x00'
tRp4767
sg15
(lp4768
S'd'
asg17
S'Y'
sg14
I12
sa(dp4769
g16
(lp4770
S'k'
asg40
I597
sS'.thisRepN'
p4771
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4772
I591
sS'.thisN'
p4773
I591
sS'.thisIndex'
p4774
g45
(g47
S'U\x02\x00\x00'
tRp4775
sg15
(lp4776
S'd'
asg17
S'Y'
sg14
I12
sa(dp4777
g16
(lp4778
S'k'
asg40
I346
sS'.thisRepN'
p4779
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4780
I592
sS'.thisN'
p4781
I592
sS'.thisIndex'
p4782
g45
(g47
S'Z\x01\x00\x00'
tRp4783
sg15
(lp4784
S'd'
asg17
S'Y'
sg14
I12
sa(dp4785
g16
(lp4786
S'k'
asg40
I459
sS'.thisRepN'
p4787
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4788
I593
sS'.thisN'
p4789
I593
sS'.thisIndex'
p4790
g45
(g47
S'\xcb\x01\x00\x00'
tRp4791
sg15
(lp4792
S'd'
asg17
S'Y'
sg14
I12
sa(dp4793
g16
(lp4794
S'd'
asg40
I15
sS'.thisRepN'
p4795
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4796
I594
sS'.thisN'
p4797
I594
sS'.thisIndex'
p4798
g45
(g47
S'\x0f\x00\x00\x00'
tRp4799
sg15
(lp4800
S'd'
asg17
S'N'
sg14
I12
sa(dp4801
g16
(lp4802
S'd'
asg40
I87
sS'.thisRepN'
p4803
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4804
I595
sS'.thisN'
p4805
I595
sS'.thisIndex'
p4806
g45
(g47
S'W\x00\x00\x00'
tRp4807
sg15
(lp4808
S'd'
asg17
S'N'
sg14
I12
sa(dp4809
g16
(lp4810
S'd'
asg40
I243
sS'.thisRepN'
p4811
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4812
I596
sS'.thisN'
p4813
I596
sS'.thisIndex'
p4814
g45
(g47
S'\xf3\x00\x00\x00'
tRp4815
sg15
(lp4816
S'd'
asg17
S'N'
sg14
I12
sa(dp4817
g16
(lp4818
S'k'
asg40
I306
sS'.thisRepN'
p4819
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4820
I597
sS'.thisN'
p4821
I597
sS'.thisIndex'
p4822
g45
(g47
S'2\x01\x00\x00'
tRp4823
sg15
(lp4824
S'd'
asg17
S'Y'
sg14
I12
sa(dp4825
g16
(lp4826
S'd'
asg40
I246
sS'.thisRepN'
p4827
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4828
I598
sS'.thisN'
p4829
I598
sS'.thisIndex'
p4830
g45
(g47
S'\xf6\x00\x00\x00'
tRp4831
sg15
(lp4832
S'd'
asg17
S'N'
sg14
I12
sa(dp4833
g16
(lp4834
S'd'
asg40
I165
sS'.thisRepN'
p4835
I0
sg19
S'Y'
sg20
S'Y'
sg24
g25
sg26
g27
sS'.thisTrialN'
p4836
I599
sS'.thisN'
p4837
I599
sS'.thisIndex'
p4838
g45
(g47
S'\xa5\x00\x00\x00'
tRp4839
sg15
(lp4840
S'd'
asg17
S'N'
sg14
I12
sasS'loops'
p4841
(lp4842
g1
(cpsychopy.data
TrialHandler
p4843
g3
NtRp4844
(dp4845
S'origin'
p4846
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4847
sS'thisTrial'
p4848
(lp4849
sS'_exp'
p4850
I64840592
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p4851
sS'thisRepN'
p4852
I1
sg21
I01
sg22
NsS'data'
p4853
g1
(cpsychopy.data
DataHandler
p4854
c__builtin__
dict
p4855
(dp4856
S'ran'
p4857
cnumpy.ma.core
_mareconstruct
p4858
(cnumpy.ma.core
MaskedArray
p4859
cnumpy
ndarray
p4860
(I0
tp4861
S'b'
tRp4862
(I1
(I600
I1
tg46
(S'f4'
I0
I1
tRp4863
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p4864
g4858
(g4859
g4860
g4861
S'b'
tRp4865
(I1
(I600
I1
tg4863
I00
S'\x00\x00\xd6C\x00\x80\xf6C\x00\x80\xa2C\x00\x00\x80@\x00@\tD\x00\x00DC\x00\x80\xe1C\x00\x00=C\x00\xc0\tD\x00\x00\xdaC\x00\x00\x92B\x00\x00\xccC\x00\x00\xe8B\x00\x80\xb0C\x00\x00&C\x00\x80\x14D\x00\x00xB\x00\x80\xd9C\x00\xc0\x02D\x00\x00\xd0B\x00\x00\x92C\x00\x00pC\x00\x00\x8aC\x00\x00qC\x00\x00/C\x00\x00BC\x00\xc0\x06D\x00\x001C\x00\x80\xc3C\x00\x00\x81C\x00\x00$B\x00\x00\\B\x00\x80\x90C\x00\x00\x86C\x00\x00TB\x00\x80\xcdC\x00\x00YC\x00\x80\x0cD\x00\x00\xb1C\x00\x80\x08D\x00\x00\xeaB\x00\x00\x08D\x00\x00\x93C\x00\x80\x03D\x00\x00\xc2C\x00\x00\xe0@\x00\x00zC\x00\x80\xafC\x00\x00\xf1C\x00\x00FC\x00\x00\x94C\x00\x80\xdcC\x00@\x12D\x00\x00bC\x00\x80\xabC\x00\x80\xe6C\x00\x00\xe2C\x00\x00\xb8C\x00\x00\x13C\x00\xc0\x0eD\x00\x00\xdaB\x00\x00\xfeC\x00\x00\xcfC\x00\x00\x10A\x00\x80\xbdC\x00\x00\xadC\x00\x00\xc0B\x00\x00\xeeB\x00\x00\xcbC\x00\x80\xeaC\x00\x00\nD\x00\x00\x19C\x00\xc0\x05D\x00\x00\xe6B\x00\x00^C\x00\x00\x8eC\x00\x00wC\x00\x00\x1cB\x00\x00\x05C\x00\x80\xacC\x00\x80\xe0C\x00\x80\xd7C\x00\x00\x00D\x00\x00;C\x00\x80\x88C\x00\x80\xcaC\x00\x00\xb4B\x00\xc0\x14D\x00@\x10D\x00\x00lB\x00\x00\x06D\x00\x00\x80B\x00\x00CC\x00\x00oC\x00\x00TC\x00@\x11D\x00\x00\xd6B\x00\x00\xaeC\x00\x00\x02D\x00\x00\x87C\x00\x00~C\x00\x00\x03D\x00\x80\xd3C\x00@\x07D\x00\x00\x17C\x00\x00jC\x00\x00\x0eD\x00\x00\x96C\x00\x80\x8eC\x00\x00\x00\x00\x00\x80\xbbC\x00\x80\x8fC\x00\x80\xcbC\x00\x00$C\x00\x00\xd8B\x00\x00\xfaC\x00\x00\xefC\x00@\x03D\x00\x00\xc3C\x00\x00\xf9C\x00\x00\xfaB\x00\x00\x1aC\x00\x00_C\x00\x00\x8fC\x00\x00\xb6C\x00\x00\x14B\x00\x00\x91C\x00\x00\xa8C\x00\x00\xa4C\x00\x00\xf4C\x00\x80\xc0C\x00\x00tB\x00\x00\xd2C\x00\x80\xb4C\x00\xc0\x10D\x00\x80\xa6C\x00\x00\xffC\x00\x00LC\x00\x80\xfeC\x00\x00\xa3C\x00\x00\xd3C\x00\x80\xa4C\x00\x80\xe8C\x00\x00\xb8A\x00\x00\xabC\x00\x00sC\x00\x00\x00@\x00\x00\x00A\x00\x007C\x00\x00cC\x00\x00\xd4C\x00\x00\xa2B\x00\x80\x02D\x00\x80\x04D\x00\x00\x80?\x00\x80\x93C\x00\x80\xf1C\x00\x00\x00C\x00\x00\xd7C\x00\xc0\x0cD\x00\x00\x0cB\x00\x80\xdbC\x00\x009C\x00\x00\xa9C\x00\x00\xc2B\x00\xc0\x15D\x00\x00\xa4B\x00\x00\x9fC\x00@\x13D\x00\x80\xf2C\x00\x00RC\x00\x80\xadC\x00\x00\x9eC\x00\xc0\x07D\x00\x00xC\x00\x80\x95C\x00\x00\x1eC\x00\x80\x8dC\x00\xc0\x12D\x00\x00pB\x00\x00\x04B\x00\x00dB\x00\x00\x83C\x00\x00\xebC\x00\x00\xf6B\x00\x80\x12D\x00\x000C\x00\x00\xb3C\x00\x00\xdcB\x00\x80\xe5C\x00\x00\x82B\x00\x00\xf0A\x00\x00uC\x00\xc0\nD\x00\x80\xb2C\x00\x00\x80C\x00\x00\xfbC\x00\x00\xb6B\x00\x00\'C\x00\x80\xd6C\x00\x00"C\x00\x00\xf8B\x00\x80\xbfC\x00\x00\x82C\x00\x80\x8aC\x00\x00\xe4B\x00\x00\xacB\x00\x00\x16C\x00\x00.C\x00@\x06D\x00\x00\x0fC\x00\x00tC\x00\x80\x84C\x00\x00\xa0C\x00\xc0\x0bD\x00\x00aC\x00\xc0\x00D\x00\x00+C\x00\x00\xbfC\x00\x00GC\x00\x00\xd5C\x00@\x0fD\x00\x00yC\x00\x00\xa7C\x00\x00\x08C\x00\x00\x88B\x00\x00\xaaB\x00\x80\x9bC\x00\x80\xf8C\x00\x00XB\x00\x00*C\x00\x00iC\x00\x00\xedC\x00\x00gC\x00\x80\x81C\x00\x80\xb1C\x00\x00\xceC\x00\x00\xdeB\x00\x00\xb0B\x00\x00\xdbC\x00\x80\xfaC\x00\x00\x94B\x00\x80\x10D\x00\x00\x15D\x00\xc0\x0fD\x00\x00\xe8C\x00\x80\x15D\x00\x00\x07D\x00\x00(C\x00\x00dC\x00\x00\xa8B\x00\x00\x0fD\x00\x00\x0bD\x00\x00\xa8A\x00\x00\x90B\x00\x00\xdeC\x00\x00\xbcB\x00\x00JC\x00\x00\xc5C\x00\x00\xaeB\x00\x80\xb7C\x00\x80\xdaC\x00\x00\x8aB\x00\x00\xecC\x00\x80\xe7C\x00\x00\x88C\x00\x80\xe2C\x00\x00LB\x00\x00\xd8C\x00\x00\xa6B\x00\x00QC\x00\x80\xc2C\x00\x00\x8eB\x00\x80\rD\x00\x00,C\x00\x00\x95C\x00\x80\xffC\x00\x80\xa9C\x00\x00\xa2C\x00\x00\xe6C\x00\x80\xccC\x00\x00\xc1C\x00\x80\xc4C\x00\x80\xc5C\x00\x00\x88A\x00\xc0\x01D\x00\x80\x05D\x00\x00\xd0C\x00\x00\xbaC\x00\x80\xbcC\x00\x00rC\x00\x00\xbeC\x00\x80\x9dC\x00\x00\xf2C\x00\x00\x15C\x00\xc0\x03D\x00\x00\xe4C\x00\x00\x99C\x00\x00\xc4B\x00\x80\xdeC\x00\x00hB\x00\x00\xfeB\x00\x00\xc9C\x00\x00\xc0@\x00\x00EC\x00\x004C\x00@\x15D\x00\x80\xc7C\x00\x00\x9dC\x00\x00\x11D\x00\x80\xaaC\x00\x00\xa6C\x00\x80\x87C\x00\x00\x98C\x00\x00\x04C\x00\x00\xdfC\x00@\x05D\x00\x00\xdcC\x00\x80\x96C\x00\x80\xf5C\x00\x00AC\x00\x00\xf8C\x00\x80\x0bD\x00\x00\xd8A\x00\x80\x9eC\x00\x00\xbdC\x00\x00\xf3C\x00\xc0\x11D\x00\x00\xbeB\x00\x00nC\x00\x00\xd0A\x00\x00PB\x00@\nD\x00\x00\xafC\x00\x00\xc8A\x00\x00?C\x00\x80\xd4C\x00\x00{C\x00\x00\xb2B\x00\x80\x11D\x00\x80\x94C\x00\x00@A\x00\x00\xfdC\x00\x00\tC\x00\x00PC\x00\x00\x0cD\x00\x00\x14D\x00\x80\xd8C\x00\x00\x18C\x00\x80\x8cC\x00\x000B\x00\x00\xe7C\x00\x00kC\x00\x00\nC\x00\x00\xccB\x00\x00\xcdC\x00\x00\xa5C\x00\x00\x90A\x00\x80\xd0C\x00\x00\x12D\x00\x00\x9cB\x00\x00\xe5C\x00\x00\xd2B\x00\x00\xeaC\x00\x00\xe8A\x00\x00\x0cC\x00\x80\xc8C\x00\x80\xcfC\x00\x00<B\x00\x00\xf8A\x00\x00|C\x00\x00@C\x00\x000A\x00\x80\xebC\x00\x00\x08B\x00\x80\xa1C\x00\x80\xceC\x00\x80\xb6C\x00\x00lC\x00\x80\x00D\x00\x00\xe0A\x00\x00\xfcC\x00\x00\x8dC\x00\x003C\x00\x00mC\x00\x80\x8bC\x00\x80\xa0C\x00\x80\x07D\x00\x80\xe4C\x00\x00\x96B\x00@\x0eD\x00\x00\xb2C\x00\x80\xc1C\x00\x00\x89C\x00\x00\xc8B\x00\x00\x05D\x00\x00\x8cB\x00\x00\xc4C\x00\x80\xb9C\x00\x00@B\x00\x00\xa1C\x00\x00\xbaB\x00\x80\x85C\x00\x00\x9aB\x00\x00\xacC\x00\x00pA\x00\x00\x14C\x00\x00VC\x00\x00\xd1C\x00\x00\xb0C\x00\x00\xb4C\x00\x00\x04D\x00\x00\xcaC\x00\x00hC\x00\x80\xb8C\x00\x00\x98B\x00\x00IC\x00\x00#C\x00\x80\xa8C\x00\x80\nD\x00\x00SC\x00\x80\xa7C\x00\xc0\rD\x00\x00\xc0C\x00\x00\xf2B\x00@\rD\x00\x00 B\x00\x005C\x00\x00\x07C\x00\x00\xc8C\x00\x80\xfdC\x00\x00\xaaC\x00\x80\xc6C\x00\x00\x1fC\x00\x00\xbbC\x00\x80\x13D\x00\x80\x9cC\x00\x00:C\x00\x80\xefC\x00\x00eC\x00\x00\xf5C\x00\x00\xf0B\x00\x00\x98A\x00\x00\x18B\x00\x80\xa5C\x00\x00\x0bC\x00\x00\x86B\x00\x80\xe3C\x00\x00 A\x00\x00<C\x00\x00NC\x00\x00DB\x00\x00\x85C\x00\x80\xf3C\x00\x00HB\x00\x00\x10B\x00\x00\x9cC\x00\x00\xb9C\x00\x006C\x00@\x14D\x00\x00`B\x00\x00\xe1C\x00\x00\rC\x00\x00\xc7C\x00\x00OC\x00\x80\xdfC\x00\x008B\x00\x00\x9aC\x00\x00\xb8B\x00\x80\x91C\x00\x00\rD\x00\x80\xd5C\x00\x00]C\x00\x80\x83C\x00\x00\x00B\x00\x80\xbaC\x00\x00\xcaB\x00\x008C\x00\x80\xd1C\x00\x00>C\x00\x80\xb5C\x00\x00\x1dC\x00\x00\xe0B\x00\x80\xecC\x00\x00\x7fC\x00\x00\xf6C\x00\x00\x06C\x00\x00\xfcB\x00\x00PA\x00\x80\x89C\x00\x00\x84C\x00\x00MC\x00\x00\x1cC\x00\x00XC\x00\x80\x86C\x00\x00\x97C\x00\x00%C\x00@\x01D\x00@\x0cD\x00\x00\x80A\x00\x00\xeeC\x00\x00WC\x00\x00\xf0C\x00\x00\xb7C\x00\x002C\x00\x00\xe0C\x00\x80\xf4C\x00\x80\xf0C\x00\x80\xfcC\x00\x00`C\x00\x80\xa3C\x00\x00\xa0A\x00\x80\x06D\x00\x00\\C\x00\x00|B\x00\x80\xddC\x00\x00\xd9C\x00\x80\x80C\x00\x00\x10D\x00\x00\xf7C\x00\x00UC\x00\x00\xc6B\x00\x80\xfbC\x00\x80\xf7C\x00\x00\x8bC\x00\x80\xeeC\x00\x00\x11C\x00@\x02D\x00\x00\xc0A\x00\x00!C\x00\x00\x90C\x00\x80\xedC\x00\x00fC\x00\x80\xf9C\x00\x00KC\x00\x00vC\x00\x00@@\x00\x00[C\x00\xc0\x08D\x00\x00\x9eB\x00\x00\xa0B\x00\x004B\x00\x00\xe9C\x00\x00\x10C\x00\x80\xc9C\x00\x80\x9fC\x00@\x00D\x00\x00}C\x00\x00\x84B\x00\x80\x99C\x00\x00\xe2B\x00\x00\xceB\x00\x00`A\x00\x00\xd4B\x00@\x0bD\x00\x00,B\x00\x00\x8cC\x00\x00\x12C\x00\x00\xecB\x00\x00\xf4B\x00\xc0\x04D\x00\x00\x9bC\x00\x00\x0eC\x00\x00\x02C\x00\x00\x13D\x00\x80\x98C\x00\x80\xb3C\x00\x80\tD\x00\x80\x0fD\x00\x00\xc6C\x00\x00HC\x00\x00\tD\x00\x00\x01D\x00\x00\xa0@\x00\x80\x92C\x00@\x04D\x00\x80\x01D\x00@\x08D\x00\x00ZC\x00\x80\x9aC\x00\x80\xbeC\x00\x00 C\x00\x00\xddC\x00\x00\x03C\x00\x00\xb5C\x00\x80\x82C\x00\x00(B\x00\x00\x1bC\x00\x00\x01C\x00\x00\xbcC\x00\x00-C\x00\x00\xe3C\x00\x00)C\x00\x80\xd2C\x00\x80\x97C\x00\x80\x0eD\x00\x00\xb0A\x00\xc0\x13D\x00\x80\xe9C\x00\x80\xaeC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4866
(dp4867
S'isNumeric'
p4868
(dp4869
g4857
I01
sg4864
I01
ssS'trials'
p4870
g4844
sS'dataTypes'
p4871
(lp4872
g4857
ag4864
asS'dataShape'
p4873
(lp4874
I600
aI1
asbsS'method'
p4875
S'random'
p4876
sS'sequenceIndices'
p4877
cnumpy.core.multiarray
_reconstruct
p4878
(g4860
(I0
tS'b'
tRp4879
(I1
(I600
I1
tg47
I01
S'm\x00\x00\x00\x9a\x00\x00\x00\x92\x00\x00\x00\x18\x02\x00\x00\x03\x00\x00\x00=\x02\x00\x00/\x01\x00\x00-\x00\x00\x00\x93\x00\x00\x00?\x00\x00\x00\xc0\x01\x00\x00t\x01\x00\x00U\x01\x00\x00\xe8\x01\x00\x00(\x02\x00\x00\x95\x01\x00\x00\xf3\x01\x00\x00\x1c\x01\x00\x00e\x01\x00\x00\xba\x01\x00\x00\xff\x01\x00\x00\xfd\x00\x00\x00T\x02\x00\x00\x8f\x00\x00\x00\x10\x02\x00\x00N\x01\x00\x00J\x01\x00\x00C\x01\x00\x00|\x01\x00\x00l\x01\x00\x00\xbf\x00\x00\x00q\x01\x00\x00\xda\x01\x00\x00\xb4\x00\x00\x00v\x01\x00\x00\xa0\x00\x00\x00\xc7\x01\x00\x00}\x00\x00\x00\xbb\x01\x00\x00M\x00\x00\x00\xaa\x01\x00\x00\x1e\x00\x00\x00J\x02\x00\x00+\x02\x00\x00^\x01\x00\x00\x1d\x02\x00\x00\xd2\x01\x00\x00p\x01\x00\x00\x8f\x01\x00\x00\xc3\x01\x00\x00\xc6\x01\x00\x00\x0b\x01\x00\x00K\x01\x00\x00"\x00\x00\x00\xe5\x00\x00\x00\x1f\x00\x00\x00\xcc\x01\x00\x00\xb5\x00\x00\x00,\x01\x00\x00Y\x00\x00\x00\xb3\x00\x00\x00\x83\x00\x00\x00\x10\x00\x00\x00\x02\x02\x00\x00[\x00\x00\x00\xbe\x00\x00\x00$\x02\x00\x00\xbe\x01\x00\x00\xe1\x00\x00\x00\x06\x01\x00\x00\x8c\x01\x00\x00\x10\x01\x00\x00\xfe\x00\x00\x00\n\x00\x00\x00\xf1\x00\x00\x00\x85\x01\x00\x00\x9f\x01\x00\x00\x93\x01\x00\x00h\x01\x00\x00\x1b\x02\x00\x00\x1c\x02\x00\x00\x97\x00\x00\x00\xa6\x00\x00\x00\r\x01\x00\x00\xfa\x00\x00\x00\xe2\x00\x00\x00\xce\x00\x00\x00\x03\x01\x00\x00\xee\x00\x00\x00R\x01\x00\x00V\x00\x00\x00\xc5\x00\x00\x00\xd4\x01\x00\x00\x91\x01\x00\x00\x00\x01\x00\x00H\x01\x00\x00B\x00\x00\x00\xa4\x00\x00\x00*\x01\x00\x00\t\x02\x00\x00\x8a\x01\x00\x00\xdc\x01\x00\x00b\x01\x00\x00\'\x02\x00\x00\x13\x00\x00\x00j\x01\x00\x00)\x02\x00\x00`\x00\x00\x00r\x00\x00\x00<\x00\x00\x00\xbc\x00\x00\x00\xed\x00\x00\x00\xe2\x01\x00\x00&\x02\x00\x00\xcd\x00\x00\x00I\x00\x00\x00\x0c\x00\x00\x00(\x00\x00\x00.\x02\x00\x00C\x00\x00\x00\xb9\x01\x00\x00\xa8\x01\x00\x00/\x02\x00\x00\xb8\x00\x00\x00\xc9\x00\x00\x00x\x00\x00\x00\xe7\x01\x00\x00-\x01\x00\x00\x9d\x00\x00\x00L\x02\x00\x003\x02\x00\x00G\x02\x00\x00:\x01\x00\x00N\x00\x00\x00\xe6\x01\x00\x00\xac\x01\x00\x00\xe0\x00\x00\x00W\x01\x00\x00a\x01\x00\x00\xbd\x01\x00\x00m\x01\x00\x00\xce\x01\x00\x002\x02\x00\x00\xd2\x00\x00\x00\x1f\x02\x00\x00\x0e\x02\x00\x00-\x02\x00\x00:\x00\x00\x00\x96\x01\x00\x00&\x01\x00\x00\xcf\x00\x00\x00h\x00\x00\x00\\\x01\x00\x00G\x00\x00\x00y\x00\x00\x00K\x02\x00\x00\xec\x01\x00\x00\xe1\x01\x00\x00\xb0\x00\x00\x00\xb1\x01\x00\x00E\x02\x00\x00\x11\x02\x00\x00\xc8\x00\x00\x00\xa1\x01\x00\x00q\x00\x00\x00\xf0\x01\x00\x00\x0e\x00\x00\x00\xc6\x00\x00\x00\xf8\x00\x00\x00P\x02\x00\x00\xe6\x00\x00\x00\xd9\x00\x00\x00\x12\x01\x00\x00N\x02\x00\x00\xd0\x00\x00\x00\x18\x00\x00\x00\xba\x00\x00\x00\x1b\x00\x00\x00\xf8\x01\x00\x00\x7f\x01\x00\x001\x01\x00\x00\xab\x01\x00\x00\xca\x01\x00\x00\x94\x00\x00\x00\xdd\x01\x00\x00\xa2\x00\x00\x00\xb5\x01\x00\x00S\x00\x00\x00\xc1\x01\x00\x00\x07\x00\x00\x00\xdf\x01\x00\x00O\x01\x00\x00s\x01\x00\x00@\x01\x00\x00\x19\x00\x00\x00\\\x00\x00\x00\x05\x00\x00\x000\x01\x00\x001\x00\x00\x00\xdb\x00\x00\x00:\x02\x00\x00\xa0\x01\x00\x00\x01\x01\x00\x00\x16\x02\x00\x00\x89\x00\x00\x00\xeb\x01\x00\x00\xc2\x01\x00\x00\xd0\x01\x00\x00X\x01\x00\x00\x0e\x01\x00\x00\xaa\x00\x00\x00\xa4\x01\x00\x00^\x00\x00\x00\x08\x02\x00\x00\x97\x01\x00\x00\xf5\x01\x00\x00\xed\x01\x00\x00$\x00\x00\x00B\x02\x00\x00\x19\x02\x00\x00\x01\x02\x00\x00\xd8\x01\x00\x00J\x00\x00\x00z\x00\x00\x00\xfd\x01\x00\x00\xd7\x00\x00\x005\x00\x00\x00\x95\x00\x00\x00\xf9\x00\x00\x00\xb7\x01\x00\x00\x14\x02\x00\x00\xe9\x00\x00\x00\x9d\x01\x00\x00\xe7\x00\x00\x00i\x00\x00\x00`\x01\x00\x00z\x01\x00\x00\x80\x01\x00\x00I\x01\x00\x00]\x00\x00\x00\x15\x00\x00\x00\x17\x00\x00\x00"\x01\x00\x00\x91\x00\x00\x00\xd3\x00\x00\x00\xc0\x00\x00\x00\x17\x02\x00\x00L\x00\x00\x00\xae\x00\x00\x00\xde\x00\x00\x00.\x00\x00\x00Q\x01\x00\x00r\x01\x00\x00#\x02\x00\x00d\x00\x00\x00\xe4\x01\x00\x00\xc3\x00\x00\x00\x05\x02\x00\x00\x1d\x00\x00\x00\xea\x00\x00\x00\xcb\x00\x00\x00I\x02\x00\x00\xb6\x00\x00\x00\xd9\x01\x00\x00\xea\x01\x00\x00\xd4\x00\x00\x00\xc4\x01\x00\x00\x92\x01\x00\x00!\x00\x00\x00\xee\x01\x00\x00c\x00\x00\x008\x01\x00\x00\t\x01\x00\x00T\x00\x00\x00\x89\x01\x00\x00\xe9\x01\x00\x00\x16\x00\x00\x00\xcc\x00\x00\x00\x0c\x02\x00\x00\x81\x01\x00\x00,\x02\x00\x00]\x01\x00\x00~\x01\x00\x00\xb1\x00\x00\x00K\x00\x00\x00l\x00\x00\x00{\x00\x00\x00o\x00\x00\x00\x12\x02\x00\x00 \x00\x00\x00~\x00\x00\x00\xd5\x01\x00\x00\x14\x00\x00\x00>\x02\x00\x00*\x00\x00\x00\x9b\x00\x00\x002\x00\x00\x00T\x01\x00\x00\x13\x01\x00\x00\xaf\x00\x00\x00k\x00\x00\x00>\x01\x00\x00\xef\x01\x00\x00R\x02\x00\x009\x01\x00\x005\x02\x00\x00)\x01\x00\x00%\x02\x00\x00\xd3\x01\x00\x00C\x02\x00\x001\x02\x00\x00\xe3\x00\x00\x00\xc8\x01\x00\x00\xb4\x01\x00\x004\x01\x00\x00$\x01\x00\x00\xac\x00\x00\x00D\x01\x00\x00\xa7\x00\x00\x00!\x02\x00\x00\xd5\x00\x00\x00\x82\x01\x00\x00\x90\x01\x00\x00w\x01\x00\x00\x16\x01\x00\x00\x02\x00\x00\x00\x8b\x00\x00\x00\xfe\x01\x00\x00\x80\x00\x00\x00\x8d\x00\x00\x00d\x01\x00\x00\xbc\x01\x00\x007\x01\x00\x00\x87\x00\x00\x00\xdf\x00\x00\x00\xa5\x01\x00\x00\x7f\x00\x00\x00\xa2\x01\x00\x00\xa3\x00\x00\x00\x15\x01\x00\x00\xaf\x01\x00\x006\x01\x00\x00\x90\x00\x00\x006\x00\x00\x00\x94\x01\x00\x00O\x00\x00\x00A\x00\x00\x00\xab\x00\x00\x00a\x00\x00\x00W\x02\x00\x00M\x01\x00\x00/\x00\x00\x00\x99\x01\x00\x00\r\x00\x00\x00&\x00\x00\x00\xeb\x00\x00\x00\x87\x01\x00\x00\xc2\x00\x00\x00\xbb\x00\x00\x006\x02\x00\x00\x9a\x01\x00\x00\x85\x00\x00\x00H\x02\x00\x00\xe0\x01\x00\x00|\x00\x00\x00y\x01\x00\x00\xf7\x01\x00\x00\x04\x01\x00\x009\x00\x00\x00\x9e\x01\x00\x00\xc9\x01\x00\x00\x8e\x01\x00\x00 \x01\x00\x00\xdb\x01\x00\x00\xb2\x01\x00\x00n\x00\x00\x00M\x02\x00\x00!\x01\x00\x00E\x01\x00\x00@\x00\x00\x00#\x01\x00\x00D\x02\x00\x00\xda\x00\x00\x00\xca\x00\x00\x00\xa7\x01\x00\x00\x82\x00\x00\x00\x19\x01\x00\x00\x88\x01\x00\x00,\x00\x00\x00\x0f\x01\x00\x00v\x00\x00\x00\x1c\x00\x00\x00\x8d\x01\x00\x00\x1a\x01\x00\x00\x02\x01\x00\x00\x1b\x01\x00\x009\x02\x00\x00\xb0\x01\x00\x00\xcf\x01\x00\x003\x01\x00\x00\xad\x01\x00\x00n\x01\x00\x00.\x01\x00\x00 \x02\x00\x00\x9c\x01\x00\x00U\x00\x00\x00D\x00\x00\x00p\x00\x00\x00\x0b\x00\x00\x00\x18\x01\x00\x00c\x01\x00\x00#\x00\x00\x00\xec\x00\x00\x00x\x01\x00\x00>\x00\x00\x00o\x01\x00\x00\x1f\x01\x00\x00f\x01\x00\x00\x98\x01\x00\x00\xde\x01\x00\x00\x84\x00\x00\x00Q\x02\x00\x00\x8c\x00\x00\x00f\x00\x00\x00\x96\x00\x00\x00P\x01\x00\x00\xdc\x00\x00\x00\xd7\x01\x00\x00\x00\x00\x00\x00\xc7\x00\x00\x00\x9e\x00\x00\x00Q\x00\x00\x00\x0c\x01\x00\x00[\x01\x00\x00\x04\x02\x00\x00\x11\x00\x00\x00\t\x00\x00\x00\x05\x01\x00\x00\xef\x00\x00\x00\xa1\x00\x00\x00=\x01\x00\x003\x00\x00\x00F\x02\x00\x00\x03\x02\x00\x00\xff\x00\x00\x00+\x01\x00\x00;\x01\x00\x00\xd1\x01\x00\x00\xf9\x01\x00\x00P\x00\x00\x00\xcd\x01\x00\x00\x06\x00\x00\x008\x00\x00\x00\n\x01\x00\x00O\x02\x00\x00\xbf\x01\x00\x00(\x01\x00\x00\x84\x01\x00\x00i\x01\x00\x00\xbd\x00\x00\x00\x17\x01\x00\x007\x00\x00\x00_\x01\x00\x00\x08\x01\x00\x00\xf5\x00\x00\x00\x8e\x00\x00\x00\x1e\x02\x00\x00V\x02\x00\x00k\x01\x00\x00E\x00\x00\x00\xb7\x00\x00\x00u\x01\x00\x00\x07\x01\x00\x00\xe3\x01\x00\x00\xe8\x00\x00\x00\x13\x02\x00\x00\xf4\x01\x00\x00\r\x02\x00\x00t\x00\x00\x00\xb6\x01\x00\x00\xf6\x01\x00\x00\xfb\x01\x00\x000\x00\x00\x00\x9c\x00\x00\x00%\x01\x00\x00\xa9\x00\x00\x00F\x01\x00\x00\xc5\x01\x00\x00\x81\x00\x00\x00\xfa\x01\x00\x00\xb8\x01\x00\x00?\x01\x00\x00\xe5\x01\x00\x00\x01\x00\x00\x00\x07\x02\x00\x00\x0b\x02\x00\x00A\x01\x00\x00\xe4\x00\x00\x00w\x00\x00\x00\x15\x02\x00\x00s\x00\x00\x00\xf0\x00\x00\x00\xc4\x00\x00\x00\n\x02\x00\x00}\x01\x00\x00\xfc\x01\x00\x00V\x01\x00\x00\xae\x01\x00\x00=\x00\x00\x00\x8a\x00\x00\x00\x88\x00\x00\x00\x14\x01\x00\x00R\x00\x00\x00"\x02\x00\x00{\x01\x00\x00\xd8\x00\x00\x00<\x02\x00\x00\xf1\x01\x00\x00@\x02\x00\x00\x1d\x01\x00\x00b\x00\x00\x00\x0f\x02\x00\x00\x98\x00\x00\x00\x12\x00\x00\x00e\x00\x00\x00u\x00\x00\x00+\x00\x00\x00\'\x01\x00\x00\x9b\x01\x00\x00?\x02\x00\x00\x99\x00\x00\x000\x02\x00\x00\x8b\x01\x00\x00<\x01\x00\x00\x1e\x01\x00\x00H\x00\x00\x00Z\x00\x00\x00\xd1\x00\x00\x00\x00\x02\x00\x00\x1a\x00\x00\x00\xf7\x00\x00\x00g\x00\x00\x00\x83\x01\x00\x00\xad\x00\x00\x00)\x00\x00\x00A\x02\x00\x00\'\x00\x00\x00\x1a\x02\x00\x00;\x02\x00\x00\x04\x00\x00\x007\x02\x00\x00\x08\x00\x00\x00F\x00\x00\x00L\x01\x00\x00\xa3\x01\x00\x00\xc1\x00\x00\x00\xfc\x00\x00\x00*\x02\x00\x00B\x01\x00\x00\xd6\x00\x00\x00Y\x01\x00\x00\xf2\x01\x00\x00%\x00\x00\x00\x9f\x00\x00\x00\xd6\x01\x00\x00\xa9\x01\x00\x00\x11\x01\x00\x00\xa6\x01\x00\x00j\x00\x00\x00\x86\x01\x00\x00S\x02\x00\x00;\x00\x00\x00\xfb\x00\x00\x00\xdd\x00\x00\x008\x02\x00\x00\xf4\x00\x00\x00\x06\x02\x00\x00X\x00\x00\x00\xf2\x00\x00\x00\x86\x00\x00\x005\x01\x00\x00_\x00\x00\x00S\x01\x00\x00G\x01\x00\x00g\x01\x00\x004\x00\x00\x00\xb9\x00\x00\x00\xb2\x00\x00\x004\x02\x00\x00\xa8\x00\x00\x00\xb3\x01\x00\x00U\x02\x00\x00Z\x01\x00\x00\xcb\x01\x00\x00\x0f\x00\x00\x00W\x00\x00\x00\xf3\x00\x00\x002\x01\x00\x00\xf6\x00\x00\x00\xa5\x00\x00\x00'
tbsS'finished'
p4880
I01
sS'nReps'
p4881
I1
sS'nRemaining'
p4882
I-1
sS'trialList'
p4883
(lp4884
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asS'seed'
p4885
NsS'thisIndex'
p4886
g4839
sS'thisN'
p4887
I600
sS'thisTrialN'
p4888
I0
sS'nTotal'
p4889
I600
sS'_warnUseOfNext'
p4890
I01
sbasS'savePickle'
p4891
I01
sb.