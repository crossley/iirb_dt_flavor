ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vsubject124
p8
sS'runtimeInfo'
p9
NsS'name'
p10
Vsubject 124
p11
sS'dataNames'
p12
(lp13
S'Block Number'
p14
aS'Key pressed'
p15
aS'Correct?'
p16
aS'Category'
p17
aS'Button switch shown?'
p18
aS'Actually switched?'
p19
aS'Fast?'
p20
asS'autoLog'
p21
I01
sS'extraInfo'
p22
(dp23
S'gender'
p24
VF
sS'age'
p25
V21
p26
ssS'loopsUnfinished'
p27
(lp28
sS'saveWideText'
p29
I01
sS'thisEntry'
p30
(dp31
sS'version'
p32
S''
sS'_paramNamesSoFar'
p33
(lp34
sS'entries'
p35
(lp36
(dp37
S'.thisTrial'
p38
I239
sS'.thisN'
p39
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p40
I0
sS'.thisRepN'
p41
I0
sS'.thisIndex'
p42
cnumpy.core.multiarray
scalar
p43
(cnumpy
dtype
p44
(S'i4'
I0
I1
tRp45
(I3
S'<'
NNNI-1
I-1
I0
tbS'\xef\x00\x00\x00'
tRp46
sg15
Nsg16
S'Timed out'
p47
sg14
I1
sa(dp48
g17
(lp49
S'k'
asg38
I395
sS'.thisRepN'
p50
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p51
I1
sS'.thisN'
p52
I1
sS'.thisIndex'
p53
g43
(g45
S'\x8b\x01\x00\x00'
tRp54
sg15
(lp55
S'k'
asg16
S'Y'
sg14
I1
sa(dp56
g17
(lp57
S'k'
asg38
I397
sS'.thisRepN'
p58
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p59
I2
sS'.thisN'
p60
I2
sS'.thisIndex'
p61
g43
(g45
S'\x8d\x01\x00\x00'
tRp62
sg15
(lp63
S'k'
asg16
S'Y'
sg14
I1
sa(dp64
g17
(lp65
S'k'
asg38
I438
sS'.thisRepN'
p66
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p67
I3
sS'.thisN'
p68
I3
sS'.thisIndex'
p69
g43
(g45
S'\xb6\x01\x00\x00'
tRp70
sg15
(lp71
S'd'
asg16
S'N'
sg14
I1
sa(dp72
g17
(lp73
S'd'
asg38
I87
sS'.thisRepN'
p74
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p75
I4
sS'.thisN'
p76
I4
sS'.thisIndex'
p77
g43
(g45
S'W\x00\x00\x00'
tRp78
sg15
(lp79
S'k'
asg16
S'N'
sg14
I1
sa(dp80
g17
(lp81
S'd'
asg38
I254
sS'.thisRepN'
p82
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p83
I5
sS'.thisN'
p84
I5
sS'.thisIndex'
p85
g43
(g45
S'\xfe\x00\x00\x00'
tRp86
sg15
(lp87
S'd'
asg16
S'Y'
sg14
I1
sa(dp88
g17
(lp89
S'd'
asg38
I43
sS'.thisRepN'
p90
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p91
I6
sS'.thisN'
p92
I6
sS'.thisIndex'
p93
g43
(g45
S'+\x00\x00\x00'
tRp94
sg15
(lp95
S'd'
asg16
S'Y'
sg14
I1
sa(dp96
g17
(lp97
S'd'
asg38
I11
sS'.thisRepN'
p98
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p99
I7
sS'.thisN'
p100
I7
sS'.thisIndex'
p101
g43
(g45
S'\x0b\x00\x00\x00'
tRp102
sg15
(lp103
S'k'
asg16
S'N'
sg14
I1
sa(dp104
g17
(lp105
S'k'
asg38
I433
sS'.thisRepN'
p106
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p107
I8
sS'.thisN'
p108
I8
sS'.thisIndex'
p109
g43
(g45
S'\xb1\x01\x00\x00'
tRp110
sg15
(lp111
S'k'
asg16
S'Y'
sg14
I1
sa(dp112
g17
(lp113
S'k'
asg38
I571
sS'.thisRepN'
p114
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p115
I9
sS'.thisN'
p116
I9
sS'.thisIndex'
p117
g43
(g45
S';\x02\x00\x00'
tRp118
sg15
(lp119
S'd'
asg16
S'N'
sg14
I1
sa(dp120
g17
(lp121
S'k'
asg38
I354
sS'.thisRepN'
p122
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p123
I10
sS'.thisN'
p124
I10
sS'.thisIndex'
p125
g43
(g45
S'b\x01\x00\x00'
tRp126
sg15
(lp127
S'd'
asg16
S'N'
sg14
I1
sa(dp128
g17
(lp129
S'k'
asg38
I450
sS'.thisRepN'
p130
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p131
I11
sS'.thisN'
p132
I11
sS'.thisIndex'
p133
g43
(g45
S'\xc2\x01\x00\x00'
tRp134
sg15
(lp135
S'k'
asg16
S'Y'
sg14
I1
sa(dp136
g17
(lp137
S'k'
asg38
I477
sS'.thisRepN'
p138
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p139
I12
sS'.thisN'
p140
I12
sS'.thisIndex'
p141
g43
(g45
S'\xdd\x01\x00\x00'
tRp142
sg15
(lp143
S'd'
asg16
S'N'
sg14
I1
sa(dp144
g17
(lp145
S'k'
asg38
I573
sS'.thisRepN'
p146
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p147
I13
sS'.thisN'
p148
I13
sS'.thisIndex'
p149
g43
(g45
S'=\x02\x00\x00'
tRp150
sg15
(lp151
S'k'
asg16
S'Y'
sg14
I1
sa(dp152
g17
(lp153
S'k'
asg38
I393
sS'.thisRepN'
p154
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p155
I14
sS'.thisN'
p156
I14
sS'.thisIndex'
p157
g43
(g45
S'\x89\x01\x00\x00'
tRp158
sg15
(lp159
S'k'
asg16
S'Y'
sg14
I1
sa(dp160
g17
(lp161
S'k'
asg38
I409
sS'.thisRepN'
p162
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p163
I15
sS'.thisN'
p164
I15
sS'.thisIndex'
p165
g43
(g45
S'\x99\x01\x00\x00'
tRp166
sg15
(lp167
S'k'
asg16
S'Y'
sg14
I1
sa(dp168
g17
(lp169
S'k'
asg38
I522
sS'.thisRepN'
p170
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p171
I16
sS'.thisN'
p172
I16
sS'.thisIndex'
p173
g43
(g45
S'\n\x02\x00\x00'
tRp174
sg15
(lp175
S'k'
asg16
S'Y'
sg14
I1
sa(dp176
g17
(lp177
S'd'
asg38
I159
sS'.thisRepN'
p178
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p179
I17
sS'.thisN'
p180
I17
sS'.thisIndex'
p181
g43
(g45
S'\x9f\x00\x00\x00'
tRp182
sg15
(lp183
S'k'
asg16
S'N'
sg14
I1
sa(dp184
g17
(lp185
S'k'
asg38
I534
sS'.thisRepN'
p186
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p187
I18
sS'.thisN'
p188
I18
sS'.thisIndex'
p189
g43
(g45
S'\x16\x02\x00\x00'
tRp190
sg15
(lp191
S'd'
asg16
S'N'
sg14
I1
sa(dp192
g17
(lp193
S'k'
asg38
I461
sS'.thisRepN'
p194
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p195
I19
sS'.thisN'
p196
I19
sS'.thisIndex'
p197
g43
(g45
S'\xcd\x01\x00\x00'
tRp198
sg15
(lp199
S'k'
asg16
S'Y'
sg14
I1
sa(dp200
g17
(lp201
S'd'
asg38
I291
sS'.thisRepN'
p202
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p203
I20
sS'.thisN'
p204
I20
sS'.thisIndex'
p205
g43
(g45
S'#\x01\x00\x00'
tRp206
sg15
(lp207
S'k'
asg16
S'N'
sg14
I1
sa(dp208
g17
(lp209
S'k'
asg38
I448
sS'.thisRepN'
p210
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p211
I21
sS'.thisN'
p212
I21
sS'.thisIndex'
p213
g43
(g45
S'\xc0\x01\x00\x00'
tRp214
sg15
(lp215
S'd'
asg16
S'N'
sg14
I1
sa(dp216
g17
(lp217
S'k'
asg38
I369
sS'.thisRepN'
p218
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p219
I22
sS'.thisN'
p220
I22
sS'.thisIndex'
p221
g43
(g45
S'q\x01\x00\x00'
tRp222
sg15
(lp223
S'k'
asg16
S'Y'
sg14
I1
sa(dp224
g17
(lp225
S'd'
asg38
I99
sS'.thisRepN'
p226
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p227
I23
sS'.thisN'
p228
I23
sS'.thisIndex'
p229
g43
(g45
S'c\x00\x00\x00'
tRp230
sg15
(lp231
S'k'
asg16
S'N'
sg14
I1
sa(dp232
g17
(lp233
S'k'
asg38
I489
sS'.thisRepN'
p234
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p235
I24
sS'.thisN'
p236
I24
sS'.thisIndex'
p237
g43
(g45
S'\xe9\x01\x00\x00'
tRp238
sg15
(lp239
S'k'
asg16
S'Y'
sg14
I1
sa(dp240
g17
(lp241
S'k'
asg38
I549
sS'.thisRepN'
p242
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p243
I25
sS'.thisN'
p244
I25
sS'.thisIndex'
p245
g43
(g45
S'%\x02\x00\x00'
tRp246
sg15
(lp247
S'd'
asg16
S'N'
sg14
I1
sa(dp248
g17
(lp249
S'd'
asg38
I283
sS'.thisRepN'
p250
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p251
I26
sS'.thisN'
p252
I26
sS'.thisIndex'
p253
g43
(g45
S'\x1b\x01\x00\x00'
tRp254
sg15
(lp255
S'd'
asg16
S'Y'
sg14
I1
sa(dp256
g38
I422
sS'.thisN'
p257
I27
sg24
VF
sg25
g26
sS'.thisTrialN'
p258
I27
sS'.thisRepN'
p259
I0
sS'.thisIndex'
p260
g43
(g45
S'\xa6\x01\x00\x00'
tRp261
sg15
Nsg16
g47
sg14
I1
sa(dp262
g17
(lp263
S'k'
asg38
I347
sS'.thisRepN'
p264
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p265
I28
sS'.thisN'
p266
I28
sS'.thisIndex'
p267
g43
(g45
S'[\x01\x00\x00'
tRp268
sg15
(lp269
S'k'
asg16
S'Y'
sg14
I1
sa(dp270
g17
(lp271
S'd'
asg38
I73
sS'.thisRepN'
p272
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p273
I29
sS'.thisN'
p274
I29
sS'.thisIndex'
p275
g43
(g45
S'I\x00\x00\x00'
tRp276
sg15
(lp277
S'k'
asg16
S'N'
sg14
I1
sa(dp278
g17
(lp279
S'k'
asg38
I488
sS'.thisRepN'
p280
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p281
I30
sS'.thisN'
p282
I30
sS'.thisIndex'
p283
g43
(g45
S'\xe8\x01\x00\x00'
tRp284
sg15
(lp285
S'k'
asg16
S'Y'
sg14
I1
sa(dp286
g17
(lp287
S'd'
asg38
I163
sS'.thisRepN'
p288
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p289
I31
sS'.thisN'
p290
I31
sS'.thisIndex'
p291
g43
(g45
S'\xa3\x00\x00\x00'
tRp292
sg15
(lp293
S'k'
asg16
S'N'
sg14
I1
sa(dp294
g17
(lp295
S'd'
asg38
I149
sS'.thisRepN'
p296
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p297
I32
sS'.thisN'
p298
I32
sS'.thisIndex'
p299
g43
(g45
S'\x95\x00\x00\x00'
tRp300
sg15
(lp301
S'd'
asg16
S'Y'
sg14
I1
sa(dp302
g17
(lp303
S'k'
asg38
I443
sS'.thisRepN'
p304
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p305
I33
sS'.thisN'
p306
I33
sS'.thisIndex'
p307
g43
(g45
S'\xbb\x01\x00\x00'
tRp308
sg15
(lp309
S'k'
asg16
S'Y'
sg14
I1
sa(dp310
g17
(lp311
S'd'
asg38
I120
sS'.thisRepN'
p312
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p313
I34
sS'.thisN'
p314
I34
sS'.thisIndex'
p315
g43
(g45
S'x\x00\x00\x00'
tRp316
sg15
(lp317
S'd'
asg16
S'Y'
sg14
I1
sa(dp318
g17
(lp319
S'd'
asg38
I0
sS'.thisRepN'
p320
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p321
I35
sS'.thisN'
p322
I35
sS'.thisIndex'
p323
g43
(g45
S'\x00\x00\x00\x00'
tRp324
sg15
(lp325
S'k'
asg16
S'N'
sg14
I1
sa(dp326
g17
(lp327
S'd'
asg38
I216
sS'.thisRepN'
p328
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p329
I36
sS'.thisN'
p330
I36
sS'.thisIndex'
p331
g43
(g45
S'\xd8\x00\x00\x00'
tRp332
sg15
(lp333
S'd'
asg16
S'Y'
sg14
I1
sa(dp334
g17
(lp335
S'k'
asg38
I548
sS'.thisRepN'
p336
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p337
I37
sS'.thisN'
p338
I37
sS'.thisIndex'
p339
g43
(g45
S'$\x02\x00\x00'
tRp340
sg15
(lp341
S'k'
asg16
S'Y'
sg14
I1
sa(dp342
g17
(lp343
S'd'
asg38
I165
sS'.thisRepN'
p344
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p345
I38
sS'.thisN'
p346
I38
sS'.thisIndex'
p347
g43
(g45
S'\xa5\x00\x00\x00'
tRp348
sg15
(lp349
S'd'
asg16
S'Y'
sg14
I1
sa(dp350
g17
(lp351
S'd'
asg38
I147
sS'.thisRepN'
p352
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p353
I39
sS'.thisN'
p354
I39
sS'.thisIndex'
p355
g43
(g45
S'\x93\x00\x00\x00'
tRp356
sg15
(lp357
S'd'
asg16
S'Y'
sg14
I1
sa(dp358
g17
(lp359
S'k'
asg38
I336
sS'.thisRepN'
p360
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p361
I40
sS'.thisN'
p362
I40
sS'.thisIndex'
p363
g43
(g45
S'P\x01\x00\x00'
tRp364
sg15
(lp365
S'k'
asg16
S'Y'
sg14
I1
sa(dp366
g17
(lp367
S'd'
asg38
I160
sS'.thisRepN'
p368
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p369
I41
sS'.thisN'
p370
I41
sS'.thisIndex'
p371
g43
(g45
S'\xa0\x00\x00\x00'
tRp372
sg15
(lp373
S'k'
asg16
S'N'
sg14
I1
sa(dp374
g17
(lp375
S'd'
asg38
I78
sS'.thisRepN'
p376
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p377
I42
sS'.thisN'
p378
I42
sS'.thisIndex'
p379
g43
(g45
S'N\x00\x00\x00'
tRp380
sg15
(lp381
S'd'
asg16
S'Y'
sg14
I1
sa(dp382
g17
(lp383
S'k'
asg38
I341
sS'.thisRepN'
p384
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p385
I43
sS'.thisN'
p386
I43
sS'.thisIndex'
p387
g43
(g45
S'U\x01\x00\x00'
tRp388
sg15
(lp389
S'k'
asg16
S'Y'
sg14
I1
sa(dp390
g17
(lp391
S'd'
asg38
I68
sS'.thisRepN'
p392
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p393
I44
sS'.thisN'
p394
I44
sS'.thisIndex'
p395
g43
(g45
S'D\x00\x00\x00'
tRp396
sg15
(lp397
S'k'
asg16
S'N'
sg14
I1
sa(dp398
g17
(lp399
S'd'
asg38
I260
sS'.thisRepN'
p400
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p401
I45
sS'.thisN'
p402
I45
sS'.thisIndex'
p403
g43
(g45
S'\x04\x01\x00\x00'
tRp404
sg15
(lp405
S'k'
asg16
S'N'
sg14
I1
sa(dp406
g17
(lp407
S'd'
asg38
I116
sS'.thisRepN'
p408
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p409
I46
sS'.thisN'
p410
I46
sS'.thisIndex'
p411
g43
(g45
S't\x00\x00\x00'
tRp412
sg15
(lp413
S'k'
asg16
S'N'
sg14
I1
sa(dp414
g17
(lp415
S'd'
asg38
I176
sS'.thisRepN'
p416
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p417
I47
sS'.thisN'
p418
I47
sS'.thisIndex'
p419
g43
(g45
S'\xb0\x00\x00\x00'
tRp420
sg15
(lp421
S'd'
asg16
S'Y'
sg14
I1
sa(dp422
g17
(lp423
S'd'
asg38
I3
sS'.thisRepN'
p424
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p425
I48
sS'.thisN'
p426
I48
sS'.thisIndex'
p427
g43
(g45
S'\x03\x00\x00\x00'
tRp428
sg15
(lp429
S'd'
asg16
S'Y'
sg14
I1
sa(dp430
g17
(lp431
S'k'
asg38
I373
sS'.thisRepN'
p432
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p433
I49
sS'.thisN'
p434
I49
sS'.thisIndex'
p435
g43
(g45
S'u\x01\x00\x00'
tRp436
sg15
(lp437
S'k'
asg16
S'Y'
sg14
I1
sa(dp438
g17
(lp439
S'd'
asg38
I217
sS'.thisRepN'
p440
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p441
I50
sS'.thisN'
p442
I50
sS'.thisIndex'
p443
g43
(g45
S'\xd9\x00\x00\x00'
tRp444
sg15
(lp445
S'k'
asg16
S'N'
sg14
I2
sa(dp446
g17
(lp447
S'k'
asg38
I564
sS'.thisRepN'
p448
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p449
I51
sS'.thisN'
p450
I51
sS'.thisIndex'
p451
g43
(g45
S'4\x02\x00\x00'
tRp452
sg15
(lp453
S'k'
asg16
S'Y'
sg14
I2
sa(dp454
g17
(lp455
S'd'
asg38
I233
sS'.thisRepN'
p456
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p457
I52
sS'.thisN'
p458
I52
sS'.thisIndex'
p459
g43
(g45
S'\xe9\x00\x00\x00'
tRp460
sg15
(lp461
S'd'
asg16
S'Y'
sg14
I2
sa(dp462
g17
(lp463
S'd'
asg38
I36
sS'.thisRepN'
p464
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p465
I53
sS'.thisN'
p466
I53
sS'.thisIndex'
p467
g43
(g45
S'$\x00\x00\x00'
tRp468
sg15
(lp469
S'k'
asg16
S'N'
sg14
I2
sa(dp470
g17
(lp471
S'd'
asg38
I56
sS'.thisRepN'
p472
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p473
I54
sS'.thisN'
p474
I54
sS'.thisIndex'
p475
g43
(g45
S'8\x00\x00\x00'
tRp476
sg15
(lp477
S'd'
asg16
S'Y'
sg14
I2
sa(dp478
g17
(lp479
S'd'
asg38
I20
sS'.thisRepN'
p480
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p481
I55
sS'.thisN'
p482
I55
sS'.thisIndex'
p483
g43
(g45
S'\x14\x00\x00\x00'
tRp484
sg15
(lp485
S'd'
asg16
S'Y'
sg14
I2
sa(dp486
g17
(lp487
S'k'
asg38
I368
sS'.thisRepN'
p488
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p489
I56
sS'.thisN'
p490
I56
sS'.thisIndex'
p491
g43
(g45
S'p\x01\x00\x00'
tRp492
sg15
(lp493
S'k'
asg16
S'Y'
sg14
I2
sa(dp494
g17
(lp495
S'd'
asg38
I115
sS'.thisRepN'
p496
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p497
I57
sS'.thisN'
p498
I57
sS'.thisIndex'
p499
g43
(g45
S's\x00\x00\x00'
tRp500
sg15
(lp501
S'k'
asg16
S'N'
sg14
I2
sa(dp502
g17
(lp503
S'd'
asg38
I215
sS'.thisRepN'
p504
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p505
I58
sS'.thisN'
p506
I58
sS'.thisIndex'
p507
g43
(g45
S'\xd7\x00\x00\x00'
tRp508
sg15
(lp509
S'd'
asg16
S'Y'
sg14
I2
sa(dp510
g17
(lp511
S'k'
asg38
I460
sS'.thisRepN'
p512
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p513
I59
sS'.thisN'
p514
I59
sS'.thisIndex'
p515
g43
(g45
S'\xcc\x01\x00\x00'
tRp516
sg15
(lp517
S'k'
asg16
S'Y'
sg14
I2
sa(dp518
g17
(lp519
S'd'
asg38
I24
sS'.thisRepN'
p520
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p521
I60
sS'.thisN'
p522
I60
sS'.thisIndex'
p523
g43
(g45
S'\x18\x00\x00\x00'
tRp524
sg15
(lp525
S'd'
asg16
S'Y'
sg14
I2
sa(dp526
g17
(lp527
S'd'
asg38
I190
sS'.thisRepN'
p528
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p529
I61
sS'.thisN'
p530
I61
sS'.thisIndex'
p531
g43
(g45
S'\xbe\x00\x00\x00'
tRp532
sg15
(lp533
S'd'
asg16
S'Y'
sg14
I2
sa(dp534
g17
(lp535
S'k'
asg38
I545
sS'.thisRepN'
p536
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p537
I62
sS'.thisN'
p538
I62
sS'.thisIndex'
p539
g43
(g45
S'!\x02\x00\x00'
tRp540
sg15
(lp541
S'k'
asg16
S'Y'
sg14
I2
sa(dp542
g17
(lp543
S'k'
asg38
I472
sS'.thisRepN'
p544
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p545
I63
sS'.thisN'
p546
I63
sS'.thisIndex'
p547
g43
(g45
S'\xd8\x01\x00\x00'
tRp548
sg15
(lp549
S'k'
asg16
S'Y'
sg14
I2
sa(dp550
g17
(lp551
S'k'
asg38
I547
sS'.thisRepN'
p552
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p553
I64
sS'.thisN'
p554
I64
sS'.thisIndex'
p555
g43
(g45
S'#\x02\x00\x00'
tRp556
sg15
(lp557
S'k'
asg16
S'Y'
sg14
I2
sa(dp558
g17
(lp559
S'k'
asg38
I370
sS'.thisRepN'
p560
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p561
I65
sS'.thisN'
p562
I65
sS'.thisIndex'
p563
g43
(g45
S'r\x01\x00\x00'
tRp564
sg15
(lp565
S'k'
asg16
S'Y'
sg14
I2
sa(dp566
g17
(lp567
S'k'
asg38
I561
sS'.thisRepN'
p568
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p569
I66
sS'.thisN'
p570
I66
sS'.thisIndex'
p571
g43
(g45
S'1\x02\x00\x00'
tRp572
sg15
(lp573
S'k'
asg16
S'Y'
sg14
I2
sa(dp574
g17
(lp575
S'k'
asg38
I576
sS'.thisRepN'
p576
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p577
I67
sS'.thisN'
p578
I67
sS'.thisIndex'
p579
g43
(g45
S'@\x02\x00\x00'
tRp580
sg15
(lp581
S'k'
asg16
S'Y'
sg14
I2
sa(dp582
g17
(lp583
S'k'
asg38
I581
sS'.thisRepN'
p584
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p585
I68
sS'.thisN'
p586
I68
sS'.thisIndex'
p587
g43
(g45
S'E\x02\x00\x00'
tRp588
sg15
(lp589
S'k'
asg16
S'Y'
sg14
I2
sa(dp590
g17
(lp591
S'd'
asg38
I242
sS'.thisRepN'
p592
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p593
I69
sS'.thisN'
p594
I69
sS'.thisIndex'
p595
g43
(g45
S'\xf2\x00\x00\x00'
tRp596
sg15
(lp597
S'd'
asg16
S'Y'
sg14
I2
sa(dp598
g17
(lp599
S'd'
asg38
I292
sS'.thisRepN'
p600
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p601
I70
sS'.thisN'
p602
I70
sS'.thisIndex'
p603
g43
(g45
S'$\x01\x00\x00'
tRp604
sg15
(lp605
S'k'
asg16
S'N'
sg14
I2
sa(dp606
g17
(lp607
S'd'
asg38
I103
sS'.thisRepN'
p608
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p609
I71
sS'.thisN'
p610
I71
sS'.thisIndex'
p611
g43
(g45
S'g\x00\x00\x00'
tRp612
sg15
(lp613
S'k'
asg16
S'N'
sg14
I2
sa(dp614
g17
(lp615
S'k'
asg38
I570
sS'.thisRepN'
p616
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p617
I72
sS'.thisN'
p618
I72
sS'.thisIndex'
p619
g43
(g45
S':\x02\x00\x00'
tRp620
sg15
(lp621
S'd'
asg16
S'N'
sg14
I2
sa(dp622
g17
(lp623
S'k'
asg38
I423
sS'.thisRepN'
p624
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p625
I73
sS'.thisN'
p626
I73
sS'.thisIndex'
p627
g43
(g45
S'\xa7\x01\x00\x00'
tRp628
sg15
(lp629
S'd'
asg16
S'N'
sg14
I2
sa(dp630
g17
(lp631
S'd'
asg38
I48
sS'.thisRepN'
p632
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p633
I74
sS'.thisN'
p634
I74
sS'.thisIndex'
p635
g43
(g45
S'0\x00\x00\x00'
tRp636
sg15
(lp637
S'k'
asg16
S'N'
sg14
I2
sa(dp638
g17
(lp639
S'd'
asg38
I59
sS'.thisRepN'
p640
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p641
I75
sS'.thisN'
p642
I75
sS'.thisIndex'
p643
g43
(g45
S';\x00\x00\x00'
tRp644
sg15
(lp645
S'k'
asg16
S'N'
sg14
I2
sa(dp646
g17
(lp647
S'd'
asg38
I199
sS'.thisRepN'
p648
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p649
I76
sS'.thisN'
p650
I76
sS'.thisIndex'
p651
g43
(g45
S'\xc7\x00\x00\x00'
tRp652
sg15
(lp653
S'k'
asg16
S'N'
sg14
I2
sa(dp654
g17
(lp655
S'd'
asg38
I219
sS'.thisRepN'
p656
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p657
I77
sS'.thisN'
p658
I77
sS'.thisIndex'
p659
g43
(g45
S'\xdb\x00\x00\x00'
tRp660
sg15
(lp661
S'k'
asg16
S'N'
sg14
I2
sa(dp662
g17
(lp663
S'd'
asg38
I251
sS'.thisRepN'
p664
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p665
I78
sS'.thisN'
p666
I78
sS'.thisIndex'
p667
g43
(g45
S'\xfb\x00\x00\x00'
tRp668
sg15
(lp669
S'd'
asg16
S'Y'
sg14
I2
sa(dp670
g17
(lp671
S'd'
asg38
I17
sS'.thisRepN'
p672
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p673
I79
sS'.thisN'
p674
I79
sS'.thisIndex'
p675
g43
(g45
S'\x11\x00\x00\x00'
tRp676
sg15
(lp677
S'd'
asg16
S'Y'
sg14
I2
sa(dp678
g17
(lp679
S'k'
asg38
I505
sS'.thisRepN'
p680
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p681
I80
sS'.thisN'
p682
I80
sS'.thisIndex'
p683
g43
(g45
S'\xf9\x01\x00\x00'
tRp684
sg15
(lp685
S'd'
asg16
S'N'
sg14
I2
sa(dp686
g17
(lp687
S'd'
asg38
I65
sS'.thisRepN'
p688
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p689
I81
sS'.thisN'
p690
I81
sS'.thisIndex'
p691
g43
(g45
S'A\x00\x00\x00'
tRp692
sg15
(lp693
S'd'
asg16
S'Y'
sg14
I2
sa(dp694
g17
(lp695
S'd'
asg38
I191
sS'.thisRepN'
p696
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p697
I82
sS'.thisN'
p698
I82
sS'.thisIndex'
p699
g43
(g45
S'\xbf\x00\x00\x00'
tRp700
sg15
(lp701
S'k'
asg16
S'N'
sg14
I2
sa(dp702
g17
(lp703
S'k'
asg38
I371
sS'.thisRepN'
p704
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p705
I83
sS'.thisN'
p706
I83
sS'.thisIndex'
p707
g43
(g45
S's\x01\x00\x00'
tRp708
sg15
(lp709
S'd'
asg16
S'N'
sg14
I2
sa(dp710
g17
(lp711
S'd'
asg38
I250
sS'.thisRepN'
p712
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p713
I84
sS'.thisN'
p714
I84
sS'.thisIndex'
p715
g43
(g45
S'\xfa\x00\x00\x00'
tRp716
sg15
(lp717
S'k'
asg16
S'N'
sg14
I2
sa(dp718
g17
(lp719
S'd'
asg38
I230
sS'.thisRepN'
p720
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p721
I85
sS'.thisN'
p722
I85
sS'.thisIndex'
p723
g43
(g45
S'\xe6\x00\x00\x00'
tRp724
sg15
(lp725
S'd'
asg16
S'Y'
sg14
I2
sa(dp726
g17
(lp727
S'k'
asg38
I446
sS'.thisRepN'
p728
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p729
I86
sS'.thisN'
p730
I86
sS'.thisIndex'
p731
g43
(g45
S'\xbe\x01\x00\x00'
tRp732
sg15
(lp733
S'd'
asg16
S'N'
sg14
I2
sa(dp734
g38
I271
sS'.thisN'
p735
I87
sg24
VF
sg25
g26
sS'.thisTrialN'
p736
I87
sS'.thisRepN'
p737
I0
sS'.thisIndex'
p738
g43
(g45
S'\x0f\x01\x00\x00'
tRp739
sg15
Nsg16
g47
sg14
I2
sa(dp740
g17
(lp741
S'k'
asg38
I557
sS'.thisRepN'
p742
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p743
I88
sS'.thisN'
p744
I88
sS'.thisIndex'
p745
g43
(g45
S'-\x02\x00\x00'
tRp746
sg15
(lp747
S'k'
asg16
S'Y'
sg14
I2
sa(dp748
g17
(lp749
S'd'
asg38
I145
sS'.thisRepN'
p750
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p751
I89
sS'.thisN'
p752
I89
sS'.thisIndex'
p753
g43
(g45
S'\x91\x00\x00\x00'
tRp754
sg15
(lp755
S'k'
asg16
S'N'
sg14
I2
sa(dp756
g17
(lp757
S'k'
asg38
I387
sS'.thisRepN'
p758
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p759
I90
sS'.thisN'
p760
I90
sS'.thisIndex'
p761
g43
(g45
S'\x83\x01\x00\x00'
tRp762
sg15
(lp763
S'd'
asg16
S'N'
sg14
I2
sa(dp764
g17
(lp765
S'k'
asg38
I509
sS'.thisRepN'
p766
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p767
I91
sS'.thisN'
p768
I91
sS'.thisIndex'
p769
g43
(g45
S'\xfd\x01\x00\x00'
tRp770
sg15
(lp771
S'k'
asg16
S'Y'
sg14
I2
sa(dp772
g17
(lp773
S'd'
asg38
I32
sS'.thisRepN'
p774
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p775
I92
sS'.thisN'
p776
I92
sS'.thisIndex'
p777
g43
(g45
S' \x00\x00\x00'
tRp778
sg15
(lp779
S'k'
asg16
S'N'
sg14
I2
sa(dp780
g17
(lp781
S'd'
asg38
I179
sS'.thisRepN'
p782
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p783
I93
sS'.thisN'
p784
I93
sS'.thisIndex'
p785
g43
(g45
S'\xb3\x00\x00\x00'
tRp786
sg15
(lp787
S'd'
asg16
S'Y'
sg14
I2
sa(dp788
g17
(lp789
S'd'
asg38
I127
sS'.thisRepN'
p790
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p791
I94
sS'.thisN'
p792
I94
sS'.thisIndex'
p793
g43
(g45
S'\x7f\x00\x00\x00'
tRp794
sg15
(lp795
S'k'
asg16
S'N'
sg14
I2
sa(dp796
g17
(lp797
S'd'
asg38
I157
sS'.thisRepN'
p798
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p799
I95
sS'.thisN'
p800
I95
sS'.thisIndex'
p801
g43
(g45
S'\x9d\x00\x00\x00'
tRp802
sg15
(lp803
S'k'
asg16
S'N'
sg14
I2
sa(dp804
g17
(lp805
S'k'
asg38
I527
sS'.thisRepN'
p806
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p807
I96
sS'.thisN'
p808
I96
sS'.thisIndex'
p809
g43
(g45
S'\x0f\x02\x00\x00'
tRp810
sg15
(lp811
S'k'
asg16
S'Y'
sg14
I2
sa(dp812
g17
(lp813
S'd'
asg38
I226
sS'.thisRepN'
p814
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p815
I97
sS'.thisN'
p816
I97
sS'.thisIndex'
p817
g43
(g45
S'\xe2\x00\x00\x00'
tRp818
sg15
(lp819
S'd'
asg16
S'Y'
sg14
I2
sa(dp820
g17
(lp821
S'd'
asg38
I170
sS'.thisRepN'
p822
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p823
I98
sS'.thisN'
p824
I98
sS'.thisIndex'
p825
g43
(g45
S'\xaa\x00\x00\x00'
tRp826
sg15
(lp827
S'd'
asg16
S'Y'
sg14
I2
sa(dp828
g17
(lp829
S'k'
asg38
I546
sS'.thisRepN'
p830
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p831
I99
sS'.thisN'
p832
I99
sS'.thisIndex'
p833
g43
(g45
S'"\x02\x00\x00'
tRp834
sg15
(lp835
S'd'
asg16
S'N'
sg14
I2
sa(dp836
g17
(lp837
S'd'
asg38
I81
sS'.thisRepN'
p838
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p839
I100
sS'.thisN'
p840
I100
sS'.thisIndex'
p841
g43
(g45
S'Q\x00\x00\x00'
tRp842
sg15
(lp843
S'd'
asg16
S'Y'
sg14
I3
sa(dp844
g17
(lp845
S'k'
asg38
I392
sS'.thisRepN'
p846
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p847
I101
sS'.thisN'
p848
I101
sS'.thisIndex'
p849
g43
(g45
S'\x88\x01\x00\x00'
tRp850
sg15
(lp851
S'k'
asg16
S'Y'
sg14
I3
sa(dp852
g17
(lp853
S'k'
asg38
I385
sS'.thisRepN'
p854
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p855
I102
sS'.thisN'
p856
I102
sS'.thisIndex'
p857
g43
(g45
S'\x81\x01\x00\x00'
tRp858
sg15
(lp859
S'd'
asg16
S'N'
sg14
I3
sa(dp860
g17
(lp861
S'd'
asg38
I58
sS'.thisRepN'
p862
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p863
I103
sS'.thisN'
p864
I103
sS'.thisIndex'
p865
g43
(g45
S':\x00\x00\x00'
tRp866
sg15
(lp867
S'd'
asg16
S'Y'
sg14
I3
sa(dp868
g17
(lp869
S'd'
asg38
I74
sS'.thisRepN'
p870
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p871
I104
sS'.thisN'
p872
I104
sS'.thisIndex'
p873
g43
(g45
S'J\x00\x00\x00'
tRp874
sg15
(lp875
S'd'
asg16
S'Y'
sg14
I3
sa(dp876
g17
(lp877
S'd'
asg38
I144
sS'.thisRepN'
p878
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p879
I105
sS'.thisN'
p880
I105
sS'.thisIndex'
p881
g43
(g45
S'\x90\x00\x00\x00'
tRp882
sg15
(lp883
S'd'
asg16
S'Y'
sg14
I3
sa(dp884
g17
(lp885
S'd'
asg38
I13
sS'.thisRepN'
p886
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p887
I106
sS'.thisN'
p888
I106
sS'.thisIndex'
p889
g43
(g45
S'\r\x00\x00\x00'
tRp890
sg15
(lp891
S'd'
asg16
S'Y'
sg14
I3
sa(dp892
g17
(lp893
S'd'
asg38
I277
sS'.thisRepN'
p894
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p895
I107
sS'.thisN'
p896
I107
sS'.thisIndex'
p897
g43
(g45
S'\x15\x01\x00\x00'
tRp898
sg15
(lp899
S'k'
asg16
S'N'
sg14
I3
sa(dp900
g17
(lp901
S'd'
asg38
I86
sS'.thisRepN'
p902
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p903
I108
sS'.thisN'
p904
I108
sS'.thisIndex'
p905
g43
(g45
S'V\x00\x00\x00'
tRp906
sg15
(lp907
S'd'
asg16
S'Y'
sg14
I3
sa(dp908
g17
(lp909
S'd'
asg38
I181
sS'.thisRepN'
p910
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p911
I109
sS'.thisN'
p912
I109
sS'.thisIndex'
p913
g43
(g45
S'\xb5\x00\x00\x00'
tRp914
sg15
(lp915
S'd'
asg16
S'Y'
sg14
I3
sa(dp916
g17
(lp917
S'd'
asg38
I183
sS'.thisRepN'
p918
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p919
I110
sS'.thisN'
p920
I110
sS'.thisIndex'
p921
g43
(g45
S'\xb7\x00\x00\x00'
tRp922
sg15
(lp923
S'd'
asg16
S'Y'
sg14
I3
sa(dp924
g17
(lp925
S'k'
asg38
I575
sS'.thisRepN'
p926
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p927
I111
sS'.thisN'
p928
I111
sS'.thisIndex'
p929
g43
(g45
S'?\x02\x00\x00'
tRp930
sg15
(lp931
S'k'
asg16
S'Y'
sg14
I3
sa(dp932
g17
(lp933
S'd'
asg38
I4
sS'.thisRepN'
p934
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p935
I112
sS'.thisN'
p936
I112
sS'.thisIndex'
p937
g43
(g45
S'\x04\x00\x00\x00'
tRp938
sg15
(lp939
S'd'
asg16
S'Y'
sg14
I3
sa(dp940
g17
(lp941
S'k'
asg38
I380
sS'.thisRepN'
p942
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p943
I113
sS'.thisN'
p944
I113
sS'.thisIndex'
p945
g43
(g45
S'|\x01\x00\x00'
tRp946
sg15
(lp947
S'k'
asg16
S'Y'
sg14
I3
sa(dp948
g17
(lp949
S'd'
asg38
I295
sS'.thisRepN'
p950
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p951
I114
sS'.thisN'
p952
I114
sS'.thisIndex'
p953
g43
(g45
S"'\x01\x00\x00"
tRp954
sg15
(lp955
S'd'
asg16
S'Y'
sg14
I3
sa(dp956
g17
(lp957
S'd'
asg38
I166
sS'.thisRepN'
p958
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p959
I115
sS'.thisN'
p960
I115
sS'.thisIndex'
p961
g43
(g45
S'\xa6\x00\x00\x00'
tRp962
sg15
(lp963
S'd'
asg16
S'Y'
sg14
I3
sa(dp964
g17
(lp965
S'k'
asg38
I304
sS'.thisRepN'
p966
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p967
I116
sS'.thisN'
p968
I116
sS'.thisIndex'
p969
g43
(g45
S'0\x01\x00\x00'
tRp970
sg15
(lp971
S'k'
asg16
S'Y'
sg14
I3
sa(dp972
g17
(lp973
S'k'
asg38
I309
sS'.thisRepN'
p974
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p975
I117
sS'.thisN'
p976
I117
sS'.thisIndex'
p977
g43
(g45
S'5\x01\x00\x00'
tRp978
sg15
(lp979
S'k'
asg16
S'Y'
sg14
I3
sa(dp980
g17
(lp981
S'd'
asg38
I299
sS'.thisRepN'
p982
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p983
I118
sS'.thisN'
p984
I118
sS'.thisIndex'
p985
g43
(g45
S'+\x01\x00\x00'
tRp986
sg15
(lp987
S'd'
asg16
S'Y'
sg14
I3
sa(dp988
g17
(lp989
S'k'
asg38
I324
sS'.thisRepN'
p990
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p991
I119
sS'.thisN'
p992
I119
sS'.thisIndex'
p993
g43
(g45
S'D\x01\x00\x00'
tRp994
sg15
(lp995
S'k'
asg16
S'Y'
sg14
I3
sa(dp996
g17
(lp997
S'k'
asg38
I500
sS'.thisRepN'
p998
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p999
I120
sS'.thisN'
p1000
I120
sS'.thisIndex'
p1001
g43
(g45
S'\xf4\x01\x00\x00'
tRp1002
sg15
(lp1003
S'k'
asg16
S'Y'
sg14
I3
sa(dp1004
g17
(lp1005
S'k'
asg38
I402
sS'.thisRepN'
p1006
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1007
I121
sS'.thisN'
p1008
I121
sS'.thisIndex'
p1009
g43
(g45
S'\x92\x01\x00\x00'
tRp1010
sg15
(lp1011
S'k'
asg16
S'Y'
sg14
I3
sa(dp1012
g17
(lp1013
S'k'
asg38
I321
sS'.thisRepN'
p1014
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1015
I122
sS'.thisN'
p1016
I122
sS'.thisIndex'
p1017
g43
(g45
S'A\x01\x00\x00'
tRp1018
sg15
(lp1019
S'k'
asg16
S'Y'
sg14
I3
sa(dp1020
g17
(lp1021
S'd'
asg38
I82
sS'.thisRepN'
p1022
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1023
I123
sS'.thisN'
p1024
I123
sS'.thisIndex'
p1025
g43
(g45
S'R\x00\x00\x00'
tRp1026
sg15
(lp1027
S'd'
asg16
S'Y'
sg14
I3
sa(dp1028
g17
(lp1029
S'k'
asg38
I444
sS'.thisRepN'
p1030
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1031
I124
sS'.thisN'
p1032
I124
sS'.thisIndex'
p1033
g43
(g45
S'\xbc\x01\x00\x00'
tRp1034
sg15
(lp1035
S'k'
asg16
S'Y'
sg14
I3
sa(dp1036
g17
(lp1037
S'k'
asg38
I386
sS'.thisRepN'
p1038
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1039
I125
sS'.thisN'
p1040
I125
sS'.thisIndex'
p1041
g43
(g45
S'\x82\x01\x00\x00'
tRp1042
sg15
(lp1043
S'k'
asg16
S'Y'
sg14
I3
sa(dp1044
g17
(lp1045
S'k'
asg38
I381
sS'.thisRepN'
p1046
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1047
I126
sS'.thisN'
p1048
I126
sS'.thisIndex'
p1049
g43
(g45
S'}\x01\x00\x00'
tRp1050
sg15
(lp1051
S'k'
asg16
S'Y'
sg14
I3
sa(dp1052
g17
(lp1053
S'd'
asg38
I94
sS'.thisRepN'
p1054
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1055
I127
sS'.thisN'
p1056
I127
sS'.thisIndex'
p1057
g43
(g45
S'^\x00\x00\x00'
tRp1058
sg15
(lp1059
S'd'
asg16
S'Y'
sg14
I3
sa(dp1060
g17
(lp1061
S'k'
asg38
I325
sS'.thisRepN'
p1062
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1063
I128
sS'.thisN'
p1064
I128
sS'.thisIndex'
p1065
g43
(g45
S'E\x01\x00\x00'
tRp1066
sg15
(lp1067
S'k'
asg16
S'Y'
sg14
I3
sa(dp1068
g17
(lp1069
S'k'
asg38
I364
sS'.thisRepN'
p1070
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1071
I129
sS'.thisN'
p1072
I129
sS'.thisIndex'
p1073
g43
(g45
S'l\x01\x00\x00'
tRp1074
sg15
(lp1075
S'k'
asg16
S'Y'
sg14
I3
sa(dp1076
g17
(lp1077
S'd'
asg38
I211
sS'.thisRepN'
p1078
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1079
I130
sS'.thisN'
p1080
I130
sS'.thisIndex'
p1081
g43
(g45
S'\xd3\x00\x00\x00'
tRp1082
sg15
(lp1083
S'd'
asg16
S'Y'
sg14
I3
sa(dp1084
g17
(lp1085
S'k'
asg38
I407
sS'.thisRepN'
p1086
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1087
I131
sS'.thisN'
p1088
I131
sS'.thisIndex'
p1089
g43
(g45
S'\x97\x01\x00\x00'
tRp1090
sg15
(lp1091
S'k'
asg16
S'Y'
sg14
I3
sa(dp1092
g17
(lp1093
S'd'
asg38
I89
sS'.thisRepN'
p1094
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1095
I132
sS'.thisN'
p1096
I132
sS'.thisIndex'
p1097
g43
(g45
S'Y\x00\x00\x00'
tRp1098
sg15
(lp1099
S'd'
asg16
S'Y'
sg14
I3
sa(dp1100
g17
(lp1101
S'k'
asg38
I335
sS'.thisRepN'
p1102
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1103
I133
sS'.thisN'
p1104
I133
sS'.thisIndex'
p1105
g43
(g45
S'O\x01\x00\x00'
tRp1106
sg15
(lp1107
S'k'
asg16
S'Y'
sg14
I3
sa(dp1108
g17
(lp1109
S'k'
asg38
I390
sS'.thisRepN'
p1110
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1111
I134
sS'.thisN'
p1112
I134
sS'.thisIndex'
p1113
g43
(g45
S'\x86\x01\x00\x00'
tRp1114
sg15
(lp1115
S'k'
asg16
S'Y'
sg14
I3
sa(dp1116
g17
(lp1117
S'k'
asg38
I411
sS'.thisRepN'
p1118
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1119
I135
sS'.thisN'
p1120
I135
sS'.thisIndex'
p1121
g43
(g45
S'\x9b\x01\x00\x00'
tRp1122
sg15
(lp1123
S'k'
asg16
S'Y'
sg14
I3
sa(dp1124
g17
(lp1125
S'k'
asg38
I540
sS'.thisRepN'
p1126
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1127
I136
sS'.thisN'
p1128
I136
sS'.thisIndex'
p1129
g43
(g45
S'\x1c\x02\x00\x00'
tRp1130
sg15
(lp1131
S'k'
asg16
S'Y'
sg14
I3
sa(dp1132
g17
(lp1133
S'k'
asg38
I412
sS'.thisRepN'
p1134
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1135
I137
sS'.thisN'
p1136
I137
sS'.thisIndex'
p1137
g43
(g45
S'\x9c\x01\x00\x00'
tRp1138
sg15
(lp1139
S'k'
asg16
S'Y'
sg14
I3
sa(dp1140
g17
(lp1141
S'd'
asg38
I164
sS'.thisRepN'
p1142
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1143
I138
sS'.thisN'
p1144
I138
sS'.thisIndex'
p1145
g43
(g45
S'\xa4\x00\x00\x00'
tRp1146
sg15
(lp1147
S'd'
asg16
S'Y'
sg14
I3
sa(dp1148
g17
(lp1149
S'k'
asg38
I318
sS'.thisRepN'
p1150
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1151
I139
sS'.thisN'
p1152
I139
sS'.thisIndex'
p1153
g43
(g45
S'>\x01\x00\x00'
tRp1154
sg15
(lp1155
S'k'
asg16
S'Y'
sg14
I3
sa(dp1156
g17
(lp1157
S'k'
asg38
I313
sS'.thisRepN'
p1158
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1159
I140
sS'.thisN'
p1160
I140
sS'.thisIndex'
p1161
g43
(g45
S'9\x01\x00\x00'
tRp1162
sg15
(lp1163
S'k'
asg16
S'Y'
sg14
I3
sa(dp1164
g17
(lp1165
S'k'
asg38
I565
sS'.thisRepN'
p1166
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1167
I141
sS'.thisN'
p1168
I141
sS'.thisIndex'
p1169
g43
(g45
S'5\x02\x00\x00'
tRp1170
sg15
(lp1171
S'k'
asg16
S'Y'
sg14
I3
sa(dp1172
g17
(lp1173
S'k'
asg38
I463
sS'.thisRepN'
p1174
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1175
I142
sS'.thisN'
p1176
I142
sS'.thisIndex'
p1177
g43
(g45
S'\xcf\x01\x00\x00'
tRp1178
sg15
(lp1179
S'k'
asg16
S'Y'
sg14
I3
sa(dp1180
g17
(lp1181
S'd'
asg38
I119
sS'.thisRepN'
p1182
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1183
I143
sS'.thisN'
p1184
I143
sS'.thisIndex'
p1185
g43
(g45
S'w\x00\x00\x00'
tRp1186
sg15
(lp1187
S'd'
asg16
S'Y'
sg14
I3
sa(dp1188
g17
(lp1189
S'd'
asg38
I269
sS'.thisRepN'
p1190
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1191
I144
sS'.thisN'
p1192
I144
sS'.thisIndex'
p1193
g43
(g45
S'\r\x01\x00\x00'
tRp1194
sg15
(lp1195
S'd'
asg16
S'Y'
sg14
I3
sa(dp1196
g17
(lp1197
S'd'
asg38
I141
sS'.thisRepN'
p1198
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1199
I145
sS'.thisN'
p1200
I145
sS'.thisIndex'
p1201
g43
(g45
S'\x8d\x00\x00\x00'
tRp1202
sg15
(lp1203
S'd'
asg16
S'Y'
sg14
I3
sa(dp1204
g17
(lp1205
S'd'
asg38
I107
sS'.thisRepN'
p1206
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1207
I146
sS'.thisN'
p1208
I146
sS'.thisIndex'
p1209
g43
(g45
S'k\x00\x00\x00'
tRp1210
sg15
(lp1211
S'd'
asg16
S'Y'
sg14
I3
sa(dp1212
g17
(lp1213
S'k'
asg38
I300
sS'.thisRepN'
p1214
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1215
I147
sS'.thisN'
p1216
I147
sS'.thisIndex'
p1217
g43
(g45
S',\x01\x00\x00'
tRp1218
sg15
(lp1219
S'k'
asg16
S'Y'
sg14
I3
sa(dp1220
g17
(lp1221
S'k'
asg38
I563
sS'.thisRepN'
p1222
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1223
I148
sS'.thisN'
p1224
I148
sS'.thisIndex'
p1225
g43
(g45
S'3\x02\x00\x00'
tRp1226
sg15
(lp1227
S'k'
asg16
S'Y'
sg14
I3
sa(dp1228
g17
(lp1229
S'd'
asg38
I173
sS'.thisRepN'
p1230
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1231
I149
sS'.thisN'
p1232
I149
sS'.thisIndex'
p1233
g43
(g45
S'\xad\x00\x00\x00'
tRp1234
sg15
(lp1235
S'd'
asg16
S'Y'
sg14
I3
sa(dp1236
g17
(lp1237
S'k'
asg38
I375
sS'.thisRepN'
p1238
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1239
I150
sS'.thisN'
p1240
I150
sS'.thisIndex'
p1241
g43
(g45
S'w\x01\x00\x00'
tRp1242
sg15
(lp1243
S'k'
asg16
S'Y'
sg14
I4
sa(dp1244
g17
(lp1245
S'k'
asg38
I555
sS'.thisRepN'
p1246
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1247
I151
sS'.thisN'
p1248
I151
sS'.thisIndex'
p1249
g43
(g45
S'+\x02\x00\x00'
tRp1250
sg15
(lp1251
S'k'
asg16
S'Y'
sg14
I4
sa(dp1252
g17
(lp1253
S'd'
asg38
I204
sS'.thisRepN'
p1254
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1255
I152
sS'.thisN'
p1256
I152
sS'.thisIndex'
p1257
g43
(g45
S'\xcc\x00\x00\x00'
tRp1258
sg15
(lp1259
S'd'
asg16
S'Y'
sg14
I4
sa(dp1260
g17
(lp1261
S'k'
asg38
I399
sS'.thisRepN'
p1262
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1263
I153
sS'.thisN'
p1264
I153
sS'.thisIndex'
p1265
g43
(g45
S'\x8f\x01\x00\x00'
tRp1266
sg15
(lp1267
S'k'
asg16
S'Y'
sg14
I4
sa(dp1268
g17
(lp1269
S'd'
asg38
I150
sS'.thisRepN'
p1270
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1271
I154
sS'.thisN'
p1272
I154
sS'.thisIndex'
p1273
g43
(g45
S'\x96\x00\x00\x00'
tRp1274
sg15
(lp1275
S'd'
asg16
S'Y'
sg14
I4
sa(dp1276
g17
(lp1277
S'd'
asg38
I123
sS'.thisRepN'
p1278
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1279
I155
sS'.thisN'
p1280
I155
sS'.thisIndex'
p1281
g43
(g45
S'{\x00\x00\x00'
tRp1282
sg15
(lp1283
S'd'
asg16
S'Y'
sg14
I4
sa(dp1284
g17
(lp1285
S'k'
asg38
I597
sS'.thisRepN'
p1286
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1287
I156
sS'.thisN'
p1288
I156
sS'.thisIndex'
p1289
g43
(g45
S'U\x02\x00\x00'
tRp1290
sg15
(lp1291
S'k'
asg16
S'Y'
sg14
I4
sa(dp1292
g17
(lp1293
S'd'
asg38
I70
sS'.thisRepN'
p1294
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1295
I157
sS'.thisN'
p1296
I157
sS'.thisIndex'
p1297
g43
(g45
S'F\x00\x00\x00'
tRp1298
sg15
(lp1299
S'd'
asg16
S'Y'
sg14
I4
sa(dp1300
g17
(lp1301
S'k'
asg38
I396
sS'.thisRepN'
p1302
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1303
I158
sS'.thisN'
p1304
I158
sS'.thisIndex'
p1305
g43
(g45
S'\x8c\x01\x00\x00'
tRp1306
sg15
(lp1307
S'k'
asg16
S'Y'
sg14
I4
sa(dp1308
g17
(lp1309
S'k'
asg38
I520
sS'.thisRepN'
p1310
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1311
I159
sS'.thisN'
p1312
I159
sS'.thisIndex'
p1313
g43
(g45
S'\x08\x02\x00\x00'
tRp1314
sg15
(lp1315
S'k'
asg16
S'Y'
sg14
I4
sa(dp1316
g17
(lp1317
S'k'
asg38
I377
sS'.thisRepN'
p1318
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1319
I160
sS'.thisN'
p1320
I160
sS'.thisIndex'
p1321
g43
(g45
S'y\x01\x00\x00'
tRp1322
sg15
(lp1323
S'k'
asg16
S'Y'
sg14
I4
sa(dp1324
g17
(lp1325
S'd'
asg38
I129
sS'.thisRepN'
p1326
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1327
I161
sS'.thisN'
p1328
I161
sS'.thisIndex'
p1329
g43
(g45
S'\x81\x00\x00\x00'
tRp1330
sg15
(lp1331
S'd'
asg16
S'Y'
sg14
I4
sa(dp1332
g17
(lp1333
S'd'
asg38
I131
sS'.thisRepN'
p1334
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1335
I162
sS'.thisN'
p1336
I162
sS'.thisIndex'
p1337
g43
(g45
S'\x83\x00\x00\x00'
tRp1338
sg15
(lp1339
S'd'
asg16
S'Y'
sg14
I4
sa(dp1340
g17
(lp1341
S'd'
asg38
I194
sS'.thisRepN'
p1342
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1343
I163
sS'.thisN'
p1344
I163
sS'.thisIndex'
p1345
g43
(g45
S'\xc2\x00\x00\x00'
tRp1346
sg15
(lp1347
S'd'
asg16
S'Y'
sg14
I4
sa(dp1348
g17
(lp1349
S'k'
asg38
I361
sS'.thisRepN'
p1350
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1351
I164
sS'.thisN'
p1352
I164
sS'.thisIndex'
p1353
g43
(g45
S'i\x01\x00\x00'
tRp1354
sg15
(lp1355
S'k'
asg16
S'Y'
sg14
I4
sa(dp1356
g17
(lp1357
S'd'
asg38
I71
sS'.thisRepN'
p1358
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1359
I165
sS'.thisN'
p1360
I165
sS'.thisIndex'
p1361
g43
(g45
S'G\x00\x00\x00'
tRp1362
sg15
(lp1363
S'd'
asg16
S'Y'
sg14
I4
sa(dp1364
g17
(lp1365
S'k'
asg38
I499
sS'.thisRepN'
p1366
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1367
I166
sS'.thisN'
p1368
I166
sS'.thisIndex'
p1369
g43
(g45
S'\xf3\x01\x00\x00'
tRp1370
sg15
(lp1371
S'k'
asg16
S'Y'
sg14
I4
sa(dp1372
g17
(lp1373
S'd'
asg38
I261
sS'.thisRepN'
p1374
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1375
I167
sS'.thisN'
p1376
I167
sS'.thisIndex'
p1377
g43
(g45
S'\x05\x01\x00\x00'
tRp1378
sg15
(lp1379
S'd'
asg16
S'Y'
sg14
I4
sa(dp1380
g17
(lp1381
S'd'
asg38
I205
sS'.thisRepN'
p1382
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1383
I168
sS'.thisN'
p1384
I168
sS'.thisIndex'
p1385
g43
(g45
S'\xcd\x00\x00\x00'
tRp1386
sg15
(lp1387
S'd'
asg16
S'Y'
sg14
I4
sa(dp1388
g17
(lp1389
S'k'
asg38
I591
sS'.thisRepN'
p1390
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1391
I169
sS'.thisN'
p1392
I169
sS'.thisIndex'
p1393
g43
(g45
S'O\x02\x00\x00'
tRp1394
sg15
(lp1395
S'k'
asg16
S'Y'
sg14
I4
sa(dp1396
g17
(lp1397
S'd'
asg38
I188
sS'.thisRepN'
p1398
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1399
I170
sS'.thisN'
p1400
I170
sS'.thisIndex'
p1401
g43
(g45
S'\xbc\x00\x00\x00'
tRp1402
sg15
(lp1403
S'd'
asg16
S'Y'
sg14
I4
sa(dp1404
g17
(lp1405
S'k'
asg38
I484
sS'.thisRepN'
p1406
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1407
I171
sS'.thisN'
p1408
I171
sS'.thisIndex'
p1409
g43
(g45
S'\xe4\x01\x00\x00'
tRp1410
sg15
(lp1411
S'k'
asg16
S'Y'
sg14
I4
sa(dp1412
g17
(lp1413
S'k'
asg38
I562
sS'.thisRepN'
p1414
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1415
I172
sS'.thisN'
p1416
I172
sS'.thisIndex'
p1417
g43
(g45
S'2\x02\x00\x00'
tRp1418
sg15
(lp1419
S'k'
asg16
S'Y'
sg14
I4
sa(dp1420
g17
(lp1421
S'k'
asg38
I355
sS'.thisRepN'
p1422
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1423
I173
sS'.thisN'
p1424
I173
sS'.thisIndex'
p1425
g43
(g45
S'c\x01\x00\x00'
tRp1426
sg15
(lp1427
S'k'
asg16
S'Y'
sg14
I4
sa(dp1428
g17
(lp1429
S'd'
asg38
I53
sS'.thisRepN'
p1430
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1431
I174
sS'.thisN'
p1432
I174
sS'.thisIndex'
p1433
g43
(g45
S'5\x00\x00\x00'
tRp1434
sg15
(lp1435
S'd'
asg16
S'Y'
sg14
I4
sa(dp1436
g17
(lp1437
S'd'
asg38
I38
sS'.thisRepN'
p1438
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1439
I175
sS'.thisN'
p1440
I175
sS'.thisIndex'
p1441
g43
(g45
S'&\x00\x00\x00'
tRp1442
sg15
(lp1443
S'd'
asg16
S'Y'
sg14
I4
sa(dp1444
g17
(lp1445
S'k'
asg38
I474
sS'.thisRepN'
p1446
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1447
I176
sS'.thisN'
p1448
I176
sS'.thisIndex'
p1449
g43
(g45
S'\xda\x01\x00\x00'
tRp1450
sg15
(lp1451
S'k'
asg16
S'Y'
sg14
I4
sa(dp1452
g17
(lp1453
S'k'
asg38
I360
sS'.thisRepN'
p1454
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1455
I177
sS'.thisN'
p1456
I177
sS'.thisIndex'
p1457
g43
(g45
S'h\x01\x00\x00'
tRp1458
sg15
(lp1459
S'k'
asg16
S'Y'
sg14
I4
sa(dp1460
g17
(lp1461
S'd'
asg38
I122
sS'.thisRepN'
p1462
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1463
I178
sS'.thisN'
p1464
I178
sS'.thisIndex'
p1465
g43
(g45
S'z\x00\x00\x00'
tRp1466
sg15
(lp1467
S'd'
asg16
S'Y'
sg14
I4
sa(dp1468
g17
(lp1469
S'k'
asg38
I598
sS'.thisRepN'
p1470
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1471
I179
sS'.thisN'
p1472
I179
sS'.thisIndex'
p1473
g43
(g45
S'V\x02\x00\x00'
tRp1474
sg15
(lp1475
S'k'
asg16
S'Y'
sg14
I4
sa(dp1476
g17
(lp1477
S'd'
asg38
I248
sS'.thisRepN'
p1478
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1479
I180
sS'.thisN'
p1480
I180
sS'.thisIndex'
p1481
g43
(g45
S'\xf8\x00\x00\x00'
tRp1482
sg15
(lp1483
S'd'
asg16
S'Y'
sg14
I4
sa(dp1484
g17
(lp1485
S'k'
asg38
I447
sS'.thisRepN'
p1486
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1487
I181
sS'.thisN'
p1488
I181
sS'.thisIndex'
p1489
g43
(g45
S'\xbf\x01\x00\x00'
tRp1490
sg15
(lp1491
S'k'
asg16
S'Y'
sg14
I4
sa(dp1492
g17
(lp1493
S'd'
asg38
I264
sS'.thisRepN'
p1494
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1495
I182
sS'.thisN'
p1496
I182
sS'.thisIndex'
p1497
g43
(g45
S'\x08\x01\x00\x00'
tRp1498
sg15
(lp1499
S'd'
asg16
S'Y'
sg14
I4
sa(dp1500
g17
(lp1501
S'k'
asg38
I357
sS'.thisRepN'
p1502
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1503
I183
sS'.thisN'
p1504
I183
sS'.thisIndex'
p1505
g43
(g45
S'e\x01\x00\x00'
tRp1506
sg15
(lp1507
S'k'
asg16
S'Y'
sg14
I4
sa(dp1508
g17
(lp1509
S'k'
asg38
I544
sS'.thisRepN'
p1510
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1511
I184
sS'.thisN'
p1512
I184
sS'.thisIndex'
p1513
g43
(g45
S' \x02\x00\x00'
tRp1514
sg15
(lp1515
S'k'
asg16
S'Y'
sg14
I4
sa(dp1516
g17
(lp1517
S'd'
asg38
I37
sS'.thisRepN'
p1518
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1519
I185
sS'.thisN'
p1520
I185
sS'.thisIndex'
p1521
g43
(g45
S'%\x00\x00\x00'
tRp1522
sg15
(lp1523
S'd'
asg16
S'Y'
sg14
I4
sa(dp1524
g17
(lp1525
S'd'
asg38
I229
sS'.thisRepN'
p1526
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1527
I186
sS'.thisN'
p1528
I186
sS'.thisIndex'
p1529
g43
(g45
S'\xe5\x00\x00\x00'
tRp1530
sg15
(lp1531
S'd'
asg16
S'Y'
sg14
I4
sa(dp1532
g17
(lp1533
S'k'
asg38
I457
sS'.thisRepN'
p1534
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1535
I187
sS'.thisN'
p1536
I187
sS'.thisIndex'
p1537
g43
(g45
S'\xc9\x01\x00\x00'
tRp1538
sg15
(lp1539
S'k'
asg16
S'Y'
sg14
I4
sa(dp1540
g17
(lp1541
S'd'
asg38
I289
sS'.thisRepN'
p1542
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1543
I188
sS'.thisN'
p1544
I188
sS'.thisIndex'
p1545
g43
(g45
S'!\x01\x00\x00'
tRp1546
sg15
(lp1547
S'd'
asg16
S'Y'
sg14
I4
sa(dp1548
g17
(lp1549
S'd'
asg38
I2
sS'.thisRepN'
p1550
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1551
I189
sS'.thisN'
p1552
I189
sS'.thisIndex'
p1553
g43
(g45
S'\x02\x00\x00\x00'
tRp1554
sg15
(lp1555
S'd'
asg16
S'Y'
sg14
I4
sa(dp1556
g17
(lp1557
S'd'
asg38
I137
sS'.thisRepN'
p1558
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1559
I190
sS'.thisN'
p1560
I190
sS'.thisIndex'
p1561
g43
(g45
S'\x89\x00\x00\x00'
tRp1562
sg15
(lp1563
S'd'
asg16
S'Y'
sg14
I4
sa(dp1564
g17
(lp1565
S'k'
asg38
I391
sS'.thisRepN'
p1566
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1567
I191
sS'.thisN'
p1568
I191
sS'.thisIndex'
p1569
g43
(g45
S'\x87\x01\x00\x00'
tRp1570
sg15
(lp1571
S'k'
asg16
S'Y'
sg14
I4
sa(dp1572
g17
(lp1573
S'd'
asg38
I41
sS'.thisRepN'
p1574
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1575
I192
sS'.thisN'
p1576
I192
sS'.thisIndex'
p1577
g43
(g45
S')\x00\x00\x00'
tRp1578
sg15
(lp1579
S'd'
asg16
S'Y'
sg14
I4
sa(dp1580
g17
(lp1581
S'd'
asg38
I297
sS'.thisRepN'
p1582
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1583
I193
sS'.thisN'
p1584
I193
sS'.thisIndex'
p1585
g43
(g45
S')\x01\x00\x00'
tRp1586
sg15
(lp1587
S'd'
asg16
S'Y'
sg14
I4
sa(dp1588
g17
(lp1589
S'd'
asg38
I186
sS'.thisRepN'
p1590
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1591
I194
sS'.thisN'
p1592
I194
sS'.thisIndex'
p1593
g43
(g45
S'\xba\x00\x00\x00'
tRp1594
sg15
(lp1595
S'd'
asg16
S'Y'
sg14
I4
sa(dp1596
g17
(lp1597
S'd'
asg38
I203
sS'.thisRepN'
p1598
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1599
I195
sS'.thisN'
p1600
I195
sS'.thisIndex'
p1601
g43
(g45
S'\xcb\x00\x00\x00'
tRp1602
sg15
(lp1603
S'd'
asg16
S'Y'
sg14
I4
sa(dp1604
g17
(lp1605
S'k'
asg38
I366
sS'.thisRepN'
p1606
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1607
I196
sS'.thisN'
p1608
I196
sS'.thisIndex'
p1609
g43
(g45
S'n\x01\x00\x00'
tRp1610
sg15
(lp1611
S'k'
asg16
S'Y'
sg14
I4
sa(dp1612
g17
(lp1613
S'd'
asg38
I50
sS'.thisRepN'
p1614
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1615
I197
sS'.thisN'
p1616
I197
sS'.thisIndex'
p1617
g43
(g45
S'2\x00\x00\x00'
tRp1618
sg15
(lp1619
S'd'
asg16
S'Y'
sg14
I4
sa(dp1620
g17
(lp1621
S'k'
asg38
I497
sS'.thisRepN'
p1622
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1623
I198
sS'.thisN'
p1624
I198
sS'.thisIndex'
p1625
g43
(g45
S'\xf1\x01\x00\x00'
tRp1626
sg15
(lp1627
S'k'
asg16
S'Y'
sg14
I4
sa(dp1628
g17
(lp1629
S'd'
asg38
I62
sS'.thisRepN'
p1630
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1631
I199
sS'.thisN'
p1632
I199
sS'.thisIndex'
p1633
g43
(g45
S'>\x00\x00\x00'
tRp1634
sg15
(lp1635
S'd'
asg16
S'Y'
sg14
I4
sa(dp1636
g17
(lp1637
S'd'
asg38
I5
sS'.thisRepN'
p1638
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1639
I200
sS'.thisN'
p1640
I200
sS'.thisIndex'
p1641
g43
(g45
S'\x05\x00\x00\x00'
tRp1642
sg15
(lp1643
S'k'
asg16
S'N'
sg14
I5
sa(dp1644
g17
(lp1645
S'd'
asg38
I238
sS'.thisRepN'
p1646
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1647
I201
sS'.thisN'
p1648
I201
sS'.thisIndex'
p1649
g43
(g45
S'\xee\x00\x00\x00'
tRp1650
sg15
(lp1651
S'd'
asg16
S'Y'
sg14
I5
sa(dp1652
g17
(lp1653
S'd'
asg38
I109
sS'.thisRepN'
p1654
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1655
I202
sS'.thisN'
p1656
I202
sS'.thisIndex'
p1657
g43
(g45
S'm\x00\x00\x00'
tRp1658
sg15
(lp1659
S'd'
asg16
S'Y'
sg14
I5
sa(dp1660
g17
(lp1661
S'k'
asg38
I487
sS'.thisRepN'
p1662
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1663
I203
sS'.thisN'
p1664
I203
sS'.thisIndex'
p1665
g43
(g45
S'\xe7\x01\x00\x00'
tRp1666
sg15
(lp1667
S'k'
asg16
S'Y'
sg14
I5
sa(dp1668
g17
(lp1669
S'k'
asg38
I307
sS'.thisRepN'
p1670
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1671
I204
sS'.thisN'
p1672
I204
sS'.thisIndex'
p1673
g43
(g45
S'3\x01\x00\x00'
tRp1674
sg15
(lp1675
S'k'
asg16
S'Y'
sg14
I5
sa(dp1676
g17
(lp1677
S'd'
asg38
I16
sS'.thisRepN'
p1678
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1679
I205
sS'.thisN'
p1680
I205
sS'.thisIndex'
p1681
g43
(g45
S'\x10\x00\x00\x00'
tRp1682
sg15
(lp1683
S'd'
asg16
S'Y'
sg14
I5
sa(dp1684
g17
(lp1685
S'd'
asg38
I1
sS'.thisRepN'
p1686
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1687
I206
sS'.thisN'
p1688
I206
sS'.thisIndex'
p1689
g43
(g45
S'\x01\x00\x00\x00'
tRp1690
sg15
(lp1691
S'd'
asg16
S'Y'
sg14
I5
sa(dp1692
g17
(lp1693
S'k'
asg38
I523
sS'.thisRepN'
p1694
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1695
I207
sS'.thisN'
p1696
I207
sS'.thisIndex'
p1697
g43
(g45
S'\x0b\x02\x00\x00'
tRp1698
sg15
(lp1699
S'k'
asg16
S'Y'
sg14
I5
sa(dp1700
g17
(lp1701
S'k'
asg38
I481
sS'.thisRepN'
p1702
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1703
I208
sS'.thisN'
p1704
I208
sS'.thisIndex'
p1705
g43
(g45
S'\xe1\x01\x00\x00'
tRp1706
sg15
(lp1707
S'k'
asg16
S'Y'
sg14
I5
sa(dp1708
g17
(lp1709
S'k'
asg38
I518
sS'.thisRepN'
p1710
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1711
I209
sS'.thisN'
p1712
I209
sS'.thisIndex'
p1713
g43
(g45
S'\x06\x02\x00\x00'
tRp1714
sg15
(lp1715
S'k'
asg16
S'Y'
sg14
I5
sa(dp1716
g17
(lp1717
S'd'
asg38
I247
sS'.thisRepN'
p1718
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1719
I210
sS'.thisN'
p1720
I210
sS'.thisIndex'
p1721
g43
(g45
S'\xf7\x00\x00\x00'
tRp1722
sg15
(lp1723
S'd'
asg16
S'Y'
sg14
I5
sa(dp1724
g17
(lp1725
S'k'
asg38
I344
sS'.thisRepN'
p1726
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1727
I211
sS'.thisN'
p1728
I211
sS'.thisIndex'
p1729
g43
(g45
S'X\x01\x00\x00'
tRp1730
sg15
(lp1731
S'k'
asg16
S'Y'
sg14
I5
sa(dp1732
g17
(lp1733
S'k'
asg38
I539
sS'.thisRepN'
p1734
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1735
I212
sS'.thisN'
p1736
I212
sS'.thisIndex'
p1737
g43
(g45
S'\x1b\x02\x00\x00'
tRp1738
sg15
(lp1739
S'k'
asg16
S'Y'
sg14
I5
sa(dp1740
g17
(lp1741
S'd'
asg38
I136
sS'.thisRepN'
p1742
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1743
I213
sS'.thisN'
p1744
I213
sS'.thisIndex'
p1745
g43
(g45
S'\x88\x00\x00\x00'
tRp1746
sg15
(lp1747
S'd'
asg16
S'Y'
sg14
I5
sa(dp1748
g17
(lp1749
S'k'
asg38
I473
sS'.thisRepN'
p1750
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1751
I214
sS'.thisN'
p1752
I214
sS'.thisIndex'
p1753
g43
(g45
S'\xd9\x01\x00\x00'
tRp1754
sg15
(lp1755
S'k'
asg16
S'Y'
sg14
I5
sa(dp1756
g17
(lp1757
S'd'
asg38
I51
sS'.thisRepN'
p1758
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1759
I215
sS'.thisN'
p1760
I215
sS'.thisIndex'
p1761
g43
(g45
S'3\x00\x00\x00'
tRp1762
sg15
(lp1763
S'd'
asg16
S'Y'
sg14
I5
sa(dp1764
g17
(lp1765
S'd'
asg38
I284
sS'.thisRepN'
p1766
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1767
I216
sS'.thisN'
p1768
I216
sS'.thisIndex'
p1769
g43
(g45
S'\x1c\x01\x00\x00'
tRp1770
sg15
(lp1771
S'd'
asg16
S'Y'
sg14
I5
sa(dp1772
g17
(lp1773
S'd'
asg38
I57
sS'.thisRepN'
p1774
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1775
I217
sS'.thisN'
p1776
I217
sS'.thisIndex'
p1777
g43
(g45
S'9\x00\x00\x00'
tRp1778
sg15
(lp1779
S'd'
asg16
S'Y'
sg14
I5
sa(dp1780
g17
(lp1781
S'k'
asg38
I589
sS'.thisRepN'
p1782
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1783
I218
sS'.thisN'
p1784
I218
sS'.thisIndex'
p1785
g43
(g45
S'M\x02\x00\x00'
tRp1786
sg15
(lp1787
S'd'
asg16
S'N'
sg14
I5
sa(dp1788
g17
(lp1789
S'd'
asg38
I227
sS'.thisRepN'
p1790
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1791
I219
sS'.thisN'
p1792
I219
sS'.thisIndex'
p1793
g43
(g45
S'\xe3\x00\x00\x00'
tRp1794
sg15
(lp1795
S'd'
asg16
S'Y'
sg14
I5
sa(dp1796
g17
(lp1797
S'k'
asg38
I593
sS'.thisRepN'
p1798
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1799
I220
sS'.thisN'
p1800
I220
sS'.thisIndex'
p1801
g43
(g45
S'Q\x02\x00\x00'
tRp1802
sg15
(lp1803
S'k'
asg16
S'Y'
sg14
I5
sa(dp1804
g17
(lp1805
S'd'
asg38
I112
sS'.thisRepN'
p1806
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1807
I221
sS'.thisN'
p1808
I221
sS'.thisIndex'
p1809
g43
(g45
S'p\x00\x00\x00'
tRp1810
sg15
(lp1811
S'd'
asg16
S'Y'
sg14
I5
sa(dp1812
g17
(lp1813
S'k'
asg38
I585
sS'.thisRepN'
p1814
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1815
I222
sS'.thisN'
p1816
I222
sS'.thisIndex'
p1817
g43
(g45
S'I\x02\x00\x00'
tRp1818
sg15
(lp1819
S'k'
asg16
S'Y'
sg14
I5
sa(dp1820
g17
(lp1821
S'k'
asg38
I495
sS'.thisRepN'
p1822
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1823
I223
sS'.thisN'
p1824
I223
sS'.thisIndex'
p1825
g43
(g45
S'\xef\x01\x00\x00'
tRp1826
sg15
(lp1827
S'k'
asg16
S'Y'
sg14
I5
sa(dp1828
g17
(lp1829
S'd'
asg38
I288
sS'.thisRepN'
p1830
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1831
I224
sS'.thisN'
p1832
I224
sS'.thisIndex'
p1833
g43
(g45
S' \x01\x00\x00'
tRp1834
sg15
(lp1835
S'd'
asg16
S'Y'
sg14
I5
sa(dp1836
g17
(lp1837
S'k'
asg38
I319
sS'.thisRepN'
p1838
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1839
I225
sS'.thisN'
p1840
I225
sS'.thisIndex'
p1841
g43
(g45
S'?\x01\x00\x00'
tRp1842
sg15
(lp1843
S'k'
asg16
S'Y'
sg14
I5
sa(dp1844
g17
(lp1845
S'k'
asg38
I434
sS'.thisRepN'
p1846
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1847
I226
sS'.thisN'
p1848
I226
sS'.thisIndex'
p1849
g43
(g45
S'\xb2\x01\x00\x00'
tRp1850
sg15
(lp1851
S'k'
asg16
S'Y'
sg14
I5
sa(dp1852
g17
(lp1853
S'k'
asg38
I389
sS'.thisRepN'
p1854
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1855
I227
sS'.thisN'
p1856
I227
sS'.thisIndex'
p1857
g43
(g45
S'\x85\x01\x00\x00'
tRp1858
sg15
(lp1859
S'k'
asg16
S'Y'
sg14
I5
sa(dp1860
g17
(lp1861
S'd'
asg38
I286
sS'.thisRepN'
p1862
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1863
I228
sS'.thisN'
p1864
I228
sS'.thisIndex'
p1865
g43
(g45
S'\x1e\x01\x00\x00'
tRp1866
sg15
(lp1867
S'd'
asg16
S'Y'
sg14
I5
sa(dp1868
g17
(lp1869
S'd'
asg38
I274
sS'.thisRepN'
p1870
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1871
I229
sS'.thisN'
p1872
I229
sS'.thisIndex'
p1873
g43
(g45
S'\x12\x01\x00\x00'
tRp1874
sg15
(lp1875
S'd'
asg16
S'Y'
sg14
I5
sa(dp1876
g17
(lp1877
S'k'
asg38
I408
sS'.thisRepN'
p1878
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1879
I230
sS'.thisN'
p1880
I230
sS'.thisIndex'
p1881
g43
(g45
S'\x98\x01\x00\x00'
tRp1882
sg15
(lp1883
S'k'
asg16
S'Y'
sg14
I5
sa(dp1884
g17
(lp1885
S'k'
asg38
I426
sS'.thisRepN'
p1886
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1887
I231
sS'.thisN'
p1888
I231
sS'.thisIndex'
p1889
g43
(g45
S'\xaa\x01\x00\x00'
tRp1890
sg15
(lp1891
S'k'
asg16
S'Y'
sg14
I5
sa(dp1892
g17
(lp1893
S'd'
asg38
I189
sS'.thisRepN'
p1894
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1895
I232
sS'.thisN'
p1896
I232
sS'.thisIndex'
p1897
g43
(g45
S'\xbd\x00\x00\x00'
tRp1898
sg15
(lp1899
S'd'
asg16
S'Y'
sg14
I5
sa(dp1900
g17
(lp1901
S'd'
asg38
I9
sS'.thisRepN'
p1902
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1903
I233
sS'.thisN'
p1904
I233
sS'.thisIndex'
p1905
g43
(g45
S'\t\x00\x00\x00'
tRp1906
sg15
(lp1907
S'd'
asg16
S'Y'
sg14
I5
sa(dp1908
g17
(lp1909
S'd'
asg38
I245
sS'.thisRepN'
p1910
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1911
I234
sS'.thisN'
p1912
I234
sS'.thisIndex'
p1913
g43
(g45
S'\xf5\x00\x00\x00'
tRp1914
sg15
(lp1915
S'd'
asg16
S'Y'
sg14
I5
sa(dp1916
g17
(lp1917
S'k'
asg38
I485
sS'.thisRepN'
p1918
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1919
I235
sS'.thisN'
p1920
I235
sS'.thisIndex'
p1921
g43
(g45
S'\xe5\x01\x00\x00'
tRp1922
sg15
(lp1923
S'k'
asg16
S'Y'
sg14
I5
sa(dp1924
g17
(lp1925
S'k'
asg38
I528
sS'.thisRepN'
p1926
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1927
I236
sS'.thisN'
p1928
I236
sS'.thisIndex'
p1929
g43
(g45
S'\x10\x02\x00\x00'
tRp1930
sg15
(lp1931
S'k'
asg16
S'Y'
sg14
I5
sa(dp1932
g17
(lp1933
S'k'
asg38
I478
sS'.thisRepN'
p1934
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1935
I237
sS'.thisN'
p1936
I237
sS'.thisIndex'
p1937
g43
(g45
S'\xde\x01\x00\x00'
tRp1938
sg15
(lp1939
S'k'
asg16
S'Y'
sg14
I5
sa(dp1940
g17
(lp1941
S'k'
asg38
I525
sS'.thisRepN'
p1942
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1943
I238
sS'.thisN'
p1944
I238
sS'.thisIndex'
p1945
g43
(g45
S'\r\x02\x00\x00'
tRp1946
sg15
(lp1947
S'k'
asg16
S'Y'
sg14
I5
sa(dp1948
g17
(lp1949
S'd'
asg38
I193
sS'.thisRepN'
p1950
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1951
I239
sS'.thisN'
p1952
I239
sS'.thisIndex'
p1953
g43
(g45
S'\xc1\x00\x00\x00'
tRp1954
sg15
(lp1955
S'd'
asg16
S'Y'
sg14
I5
sa(dp1956
g17
(lp1957
S'k'
asg38
I308
sS'.thisRepN'
p1958
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1959
I240
sS'.thisN'
p1960
I240
sS'.thisIndex'
p1961
g43
(g45
S'4\x01\x00\x00'
tRp1962
sg15
(lp1963
S'k'
asg16
S'Y'
sg14
I5
sa(dp1964
g17
(lp1965
S'k'
asg38
I543
sS'.thisRepN'
p1966
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1967
I241
sS'.thisN'
p1968
I241
sS'.thisIndex'
p1969
g43
(g45
S'\x1f\x02\x00\x00'
tRp1970
sg15
(lp1971
S'k'
asg16
S'Y'
sg14
I5
sa(dp1972
g17
(lp1973
S'd'
asg38
I275
sS'.thisRepN'
p1974
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1975
I242
sS'.thisN'
p1976
I242
sS'.thisIndex'
p1977
g43
(g45
S'\x13\x01\x00\x00'
tRp1978
sg15
(lp1979
S'd'
asg16
S'Y'
sg14
I5
sa(dp1980
g17
(lp1981
S'd'
asg38
I276
sS'.thisRepN'
p1982
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1983
I243
sS'.thisN'
p1984
I243
sS'.thisIndex'
p1985
g43
(g45
S'\x14\x01\x00\x00'
tRp1986
sg15
(lp1987
S'd'
asg16
S'Y'
sg14
I5
sa(dp1988
g17
(lp1989
S'k'
asg38
I406
sS'.thisRepN'
p1990
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1991
I244
sS'.thisN'
p1992
I244
sS'.thisIndex'
p1993
g43
(g45
S'\x96\x01\x00\x00'
tRp1994
sg15
(lp1995
S'k'
asg16
S'Y'
sg14
I5
sa(dp1996
g17
(lp1997
S'd'
asg38
I185
sS'.thisRepN'
p1998
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p1999
I245
sS'.thisN'
p2000
I245
sS'.thisIndex'
p2001
g43
(g45
S'\xb9\x00\x00\x00'
tRp2002
sg15
(lp2003
S'd'
asg16
S'Y'
sg14
I5
sa(dp2004
g17
(lp2005
S'k'
asg38
I421
sS'.thisRepN'
p2006
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2007
I246
sS'.thisN'
p2008
I246
sS'.thisIndex'
p2009
g43
(g45
S'\xa5\x01\x00\x00'
tRp2010
sg15
(lp2011
S'k'
asg16
S'Y'
sg14
I5
sa(dp2012
g17
(lp2013
S'd'
asg38
I110
sS'.thisRepN'
p2014
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2015
I247
sS'.thisN'
p2016
I247
sS'.thisIndex'
p2017
g43
(g45
S'n\x00\x00\x00'
tRp2018
sg15
(lp2019
S'd'
asg16
S'Y'
sg14
I5
sa(dp2020
g17
(lp2021
S'd'
asg38
I14
sS'.thisRepN'
p2022
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2023
I248
sS'.thisN'
p2024
I248
sS'.thisIndex'
p2025
g43
(g45
S'\x0e\x00\x00\x00'
tRp2026
sg15
(lp2027
S'd'
asg16
S'Y'
sg14
I5
sa(dp2028
g17
(lp2029
S'k'
asg38
I378
sS'.thisRepN'
p2030
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2031
I249
sS'.thisN'
p2032
I249
sS'.thisIndex'
p2033
g43
(g45
S'z\x01\x00\x00'
tRp2034
sg15
(lp2035
S'k'
asg16
S'Y'
sg14
I5
sa(dp2036
g17
(lp2037
S'k'
asg38
I352
sS'.thisRepN'
p2038
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2039
I250
sS'.thisN'
p2040
I250
sS'.thisIndex'
p2041
g43
(g45
S'`\x01\x00\x00'
tRp2042
sg15
(lp2043
S'k'
asg16
S'Y'
sg14
I6
sa(dp2044
g17
(lp2045
S'd'
asg38
I22
sS'.thisRepN'
p2046
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2047
I251
sS'.thisN'
p2048
I251
sS'.thisIndex'
p2049
g43
(g45
S'\x16\x00\x00\x00'
tRp2050
sg15
(lp2051
S'd'
asg16
S'Y'
sg14
I6
sa(dp2052
g17
(lp2053
S'k'
asg38
I513
sS'.thisRepN'
p2054
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2055
I252
sS'.thisN'
p2056
I252
sS'.thisIndex'
p2057
g43
(g45
S'\x01\x02\x00\x00'
tRp2058
sg15
(lp2059
S'k'
asg16
S'Y'
sg14
I6
sa(dp2060
g17
(lp2061
S'k'
asg38
I479
sS'.thisRepN'
p2062
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2063
I253
sS'.thisN'
p2064
I253
sS'.thisIndex'
p2065
g43
(g45
S'\xdf\x01\x00\x00'
tRp2066
sg15
(lp2067
S'k'
asg16
S'Y'
sg14
I6
sa(dp2068
g17
(lp2069
S'k'
asg38
I312
sS'.thisRepN'
p2070
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2071
I254
sS'.thisN'
p2072
I254
sS'.thisIndex'
p2073
g43
(g45
S'8\x01\x00\x00'
tRp2074
sg15
(lp2075
S'k'
asg16
S'Y'
sg14
I6
sa(dp2076
g17
(lp2077
S'd'
asg38
I249
sS'.thisRepN'
p2078
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2079
I255
sS'.thisN'
p2080
I255
sS'.thisIndex'
p2081
g43
(g45
S'\xf9\x00\x00\x00'
tRp2082
sg15
(lp2083
S'd'
asg16
S'Y'
sg14
I6
sa(dp2084
g17
(lp2085
S'd'
asg38
I10
sS'.thisRepN'
p2086
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2087
I256
sS'.thisN'
p2088
I256
sS'.thisIndex'
p2089
g43
(g45
S'\n\x00\x00\x00'
tRp2090
sg15
(lp2091
S'd'
asg16
S'Y'
sg14
I6
sa(dp2092
g17
(lp2093
S'd'
asg38
I95
sS'.thisRepN'
p2094
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2095
I257
sS'.thisN'
p2096
I257
sS'.thisIndex'
p2097
g43
(g45
S'_\x00\x00\x00'
tRp2098
sg15
(lp2099
S'd'
asg16
S'Y'
sg14
I6
sa(dp2100
g17
(lp2101
S'k'
asg38
I418
sS'.thisRepN'
p2102
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2103
I258
sS'.thisN'
p2104
I258
sS'.thisIndex'
p2105
g43
(g45
S'\xa2\x01\x00\x00'
tRp2106
sg15
(lp2107
S'k'
asg16
S'Y'
sg14
I6
sa(dp2108
g17
(lp2109
S'd'
asg38
I35
sS'.thisRepN'
p2110
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2111
I259
sS'.thisN'
p2112
I259
sS'.thisIndex'
p2113
g43
(g45
S'#\x00\x00\x00'
tRp2114
sg15
(lp2115
S'd'
asg16
S'Y'
sg14
I6
sa(dp2116
g17
(lp2117
S'k'
asg38
I556
sS'.thisRepN'
p2118
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2119
I260
sS'.thisN'
p2120
I260
sS'.thisIndex'
p2121
g43
(g45
S',\x02\x00\x00'
tRp2122
sg15
(lp2123
S'k'
asg16
S'Y'
sg14
I6
sa(dp2124
g17
(lp2125
S'd'
asg38
I298
sS'.thisRepN'
p2126
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2127
I261
sS'.thisN'
p2128
I261
sS'.thisIndex'
p2129
g43
(g45
S'*\x01\x00\x00'
tRp2130
sg15
(lp2131
S'd'
asg16
S'Y'
sg14
I6
sa(dp2132
g17
(lp2133
S'd'
asg38
I75
sS'.thisRepN'
p2134
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2135
I262
sS'.thisN'
p2136
I262
sS'.thisIndex'
p2137
g43
(g45
S'K\x00\x00\x00'
tRp2138
sg15
(lp2139
S'd'
asg16
S'Y'
sg14
I6
sa(dp2140
g17
(lp2141
S'd'
asg38
I28
sS'.thisRepN'
p2142
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2143
I263
sS'.thisN'
p2144
I263
sS'.thisIndex'
p2145
g43
(g45
S'\x1c\x00\x00\x00'
tRp2146
sg15
(lp2147
S'd'
asg16
S'Y'
sg14
I6
sa(dp2148
g17
(lp2149
S'k'
asg38
I342
sS'.thisRepN'
p2150
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2151
I264
sS'.thisN'
p2152
I264
sS'.thisIndex'
p2153
g43
(g45
S'V\x01\x00\x00'
tRp2154
sg15
(lp2155
S'k'
asg16
S'Y'
sg14
I6
sa(dp2156
g17
(lp2157
S'k'
asg38
I343
sS'.thisRepN'
p2158
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2159
I265
sS'.thisN'
p2160
I265
sS'.thisIndex'
p2161
g43
(g45
S'W\x01\x00\x00'
tRp2162
sg15
(lp2163
S'k'
asg16
S'Y'
sg14
I6
sa(dp2164
g17
(lp2165
S'd'
asg38
I197
sS'.thisRepN'
p2166
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2167
I266
sS'.thisN'
p2168
I266
sS'.thisIndex'
p2169
g43
(g45
S'\xc5\x00\x00\x00'
tRp2170
sg15
(lp2171
S'd'
asg16
S'Y'
sg14
I6
sa(dp2172
g17
(lp2173
S'k'
asg38
I468
sS'.thisRepN'
p2174
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2175
I267
sS'.thisN'
p2176
I267
sS'.thisIndex'
p2177
g43
(g45
S'\xd4\x01\x00\x00'
tRp2178
sg15
(lp2179
S'k'
asg16
S'Y'
sg14
I6
sa(dp2180
g17
(lp2181
S'k'
asg38
I506
sS'.thisRepN'
p2182
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2183
I268
sS'.thisN'
p2184
I268
sS'.thisIndex'
p2185
g43
(g45
S'\xfa\x01\x00\x00'
tRp2186
sg15
(lp2187
S'k'
asg16
S'Y'
sg14
I6
sa(dp2188
g17
(lp2189
S'k'
asg38
I372
sS'.thisRepN'
p2190
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2191
I269
sS'.thisN'
p2192
I269
sS'.thisIndex'
p2193
g43
(g45
S't\x01\x00\x00'
tRp2194
sg15
(lp2195
S'k'
asg16
S'Y'
sg14
I6
sa(dp2196
g17
(lp2197
S'd'
asg38
I182
sS'.thisRepN'
p2198
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2199
I270
sS'.thisN'
p2200
I270
sS'.thisIndex'
p2201
g43
(g45
S'\xb6\x00\x00\x00'
tRp2202
sg15
(lp2203
S'd'
asg16
S'Y'
sg14
I6
sa(dp2204
g17
(lp2205
S'd'
asg38
I294
sS'.thisRepN'
p2206
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2207
I271
sS'.thisN'
p2208
I271
sS'.thisIndex'
p2209
g43
(g45
S'&\x01\x00\x00'
tRp2210
sg15
(lp2211
S'd'
asg16
S'Y'
sg14
I6
sa(dp2212
g17
(lp2213
S'k'
asg38
I583
sS'.thisRepN'
p2214
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2215
I272
sS'.thisN'
p2216
I272
sS'.thisIndex'
p2217
g43
(g45
S'G\x02\x00\x00'
tRp2218
sg15
(lp2219
S'k'
asg16
S'Y'
sg14
I6
sa(dp2220
g17
(lp2221
S'd'
asg38
I19
sS'.thisRepN'
p2222
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2223
I273
sS'.thisN'
p2224
I273
sS'.thisIndex'
p2225
g43
(g45
S'\x13\x00\x00\x00'
tRp2226
sg15
(lp2227
S'd'
asg16
S'Y'
sg14
I6
sa(dp2228
g17
(lp2229
S'd'
asg38
I111
sS'.thisRepN'
p2230
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2231
I274
sS'.thisN'
p2232
I274
sS'.thisIndex'
p2233
g43
(g45
S'o\x00\x00\x00'
tRp2234
sg15
(lp2235
S'd'
asg16
S'Y'
sg14
I6
sa(dp2236
g17
(lp2237
S'k'
asg38
I517
sS'.thisRepN'
p2238
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2239
I275
sS'.thisN'
p2240
I275
sS'.thisIndex'
p2241
g43
(g45
S'\x05\x02\x00\x00'
tRp2242
sg15
(lp2243
S'k'
asg16
S'Y'
sg14
I6
sa(dp2244
g17
(lp2245
S'k'
asg38
I493
sS'.thisRepN'
p2246
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2247
I276
sS'.thisN'
p2248
I276
sS'.thisIndex'
p2249
g43
(g45
S'\xed\x01\x00\x00'
tRp2250
sg15
(lp2251
S'k'
asg16
S'Y'
sg14
I6
sa(dp2252
g17
(lp2253
S'd'
asg38
I256
sS'.thisRepN'
p2254
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2255
I277
sS'.thisN'
p2256
I277
sS'.thisIndex'
p2257
g43
(g45
S'\x00\x01\x00\x00'
tRp2258
sg15
(lp2259
S'd'
asg16
S'Y'
sg14
I6
sa(dp2260
g17
(lp2261
S'd'
asg38
I290
sS'.thisRepN'
p2262
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2263
I278
sS'.thisN'
p2264
I278
sS'.thisIndex'
p2265
g43
(g45
S'"\x01\x00\x00'
tRp2266
sg15
(lp2267
S'd'
asg16
S'Y'
sg14
I6
sa(dp2268
g17
(lp2269
S'd'
asg38
I196
sS'.thisRepN'
p2270
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2271
I279
sS'.thisN'
p2272
I279
sS'.thisIndex'
p2273
g43
(g45
S'\xc4\x00\x00\x00'
tRp2274
sg15
(lp2275
S'k'
asg16
S'N'
sg14
I6
sa(dp2276
g17
(lp2277
S'k'
asg38
I464
sS'.thisRepN'
p2278
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2279
I280
sS'.thisN'
p2280
I280
sS'.thisIndex'
p2281
g43
(g45
S'\xd0\x01\x00\x00'
tRp2282
sg15
(lp2283
S'k'
asg16
S'Y'
sg14
I6
sa(dp2284
g17
(lp2285
S'd'
asg38
I282
sS'.thisRepN'
p2286
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2287
I281
sS'.thisN'
p2288
I281
sS'.thisIndex'
p2289
g43
(g45
S'\x1a\x01\x00\x00'
tRp2290
sg15
(lp2291
S'd'
asg16
S'Y'
sg14
I6
sa(dp2292
g17
(lp2293
S'd'
asg38
I76
sS'.thisRepN'
p2294
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2295
I282
sS'.thisN'
p2296
I282
sS'.thisIndex'
p2297
g43
(g45
S'L\x00\x00\x00'
tRp2298
sg15
(lp2299
S'd'
asg16
S'Y'
sg14
I6
sa(dp2300
g17
(lp2301
S'k'
asg38
I436
sS'.thisRepN'
p2302
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2303
I283
sS'.thisN'
p2304
I283
sS'.thisIndex'
p2305
g43
(g45
S'\xb4\x01\x00\x00'
tRp2306
sg15
(lp2307
S'k'
asg16
S'Y'
sg14
I6
sa(dp2308
g17
(lp2309
S'k'
asg38
I339
sS'.thisRepN'
p2310
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2311
I284
sS'.thisN'
p2312
I284
sS'.thisIndex'
p2313
g43
(g45
S'S\x01\x00\x00'
tRp2314
sg15
(lp2315
S'k'
asg16
S'Y'
sg14
I6
sa(dp2316
g17
(lp2317
S'd'
asg38
I153
sS'.thisRepN'
p2318
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2319
I285
sS'.thisN'
p2320
I285
sS'.thisIndex'
p2321
g43
(g45
S'\x99\x00\x00\x00'
tRp2322
sg15
(lp2323
S'd'
asg16
S'Y'
sg14
I6
sa(dp2324
g17
(lp2325
S'd'
asg38
I244
sS'.thisRepN'
p2326
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2327
I286
sS'.thisN'
p2328
I286
sS'.thisIndex'
p2329
g43
(g45
S'\xf4\x00\x00\x00'
tRp2330
sg15
(lp2331
S'd'
asg16
S'Y'
sg14
I6
sa(dp2332
g17
(lp2333
S'd'
asg38
I126
sS'.thisRepN'
p2334
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2335
I287
sS'.thisN'
p2336
I287
sS'.thisIndex'
p2337
g43
(g45
S'~\x00\x00\x00'
tRp2338
sg15
(lp2339
S'd'
asg16
S'Y'
sg14
I6
sa(dp2340
g17
(lp2341
S'k'
asg38
I558
sS'.thisRepN'
p2342
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2343
I288
sS'.thisN'
p2344
I288
sS'.thisIndex'
p2345
g43
(g45
S'.\x02\x00\x00'
tRp2346
sg15
(lp2347
S'k'
asg16
S'Y'
sg14
I6
sa(dp2348
g17
(lp2349
S'd'
asg38
I40
sS'.thisRepN'
p2350
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2351
I289
sS'.thisN'
p2352
I289
sS'.thisIndex'
p2353
g43
(g45
S'(\x00\x00\x00'
tRp2354
sg15
(lp2355
S'd'
asg16
S'Y'
sg14
I6
sa(dp2356
g17
(lp2357
S'k'
asg38
I551
sS'.thisRepN'
p2358
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2359
I290
sS'.thisN'
p2360
I290
sS'.thisIndex'
p2361
g43
(g45
S"'\x02\x00\x00"
tRp2362
sg15
(lp2363
S'k'
asg16
S'Y'
sg14
I6
sa(dp2364
g17
(lp2365
S'd'
asg38
I266
sS'.thisRepN'
p2366
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2367
I291
sS'.thisN'
p2368
I291
sS'.thisIndex'
p2369
g43
(g45
S'\n\x01\x00\x00'
tRp2370
sg15
(lp2371
S'd'
asg16
S'Y'
sg14
I6
sa(dp2372
g17
(lp2373
S'd'
asg38
I155
sS'.thisRepN'
p2374
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2375
I292
sS'.thisN'
p2376
I292
sS'.thisIndex'
p2377
g43
(g45
S'\x9b\x00\x00\x00'
tRp2378
sg15
(lp2379
S'd'
asg16
S'Y'
sg14
I6
sa(dp2380
g17
(lp2381
S'd'
asg38
I168
sS'.thisRepN'
p2382
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2383
I293
sS'.thisN'
p2384
I293
sS'.thisIndex'
p2385
g43
(g45
S'\xa8\x00\x00\x00'
tRp2386
sg15
(lp2387
S'd'
asg16
S'Y'
sg14
I6
sa(dp2388
g17
(lp2389
S'k'
asg38
I314
sS'.thisRepN'
p2390
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2391
I294
sS'.thisN'
p2392
I294
sS'.thisIndex'
p2393
g43
(g45
S':\x01\x00\x00'
tRp2394
sg15
(lp2395
S'k'
asg16
S'Y'
sg14
I6
sa(dp2396
g17
(lp2397
S'k'
asg38
I362
sS'.thisRepN'
p2398
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2399
I295
sS'.thisN'
p2400
I295
sS'.thisIndex'
p2401
g43
(g45
S'j\x01\x00\x00'
tRp2402
sg15
(lp2403
S'k'
asg16
S'Y'
sg14
I6
sa(dp2404
g17
(lp2405
S'k'
asg38
I316
sS'.thisRepN'
p2406
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2407
I296
sS'.thisN'
p2408
I296
sS'.thisIndex'
p2409
g43
(g45
S'<\x01\x00\x00'
tRp2410
sg15
(lp2411
S'k'
asg16
S'Y'
sg14
I6
sa(dp2412
g17
(lp2413
S'k'
asg38
I340
sS'.thisRepN'
p2414
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2415
I297
sS'.thisN'
p2416
I297
sS'.thisIndex'
p2417
g43
(g45
S'T\x01\x00\x00'
tRp2418
sg15
(lp2419
S'k'
asg16
S'Y'
sg14
I6
sa(dp2420
g17
(lp2421
S'k'
asg38
I599
sS'.thisRepN'
p2422
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2423
I298
sS'.thisN'
p2424
I298
sS'.thisIndex'
p2425
g43
(g45
S'W\x02\x00\x00'
tRp2426
sg15
(lp2427
S'k'
asg16
S'Y'
sg14
I6
sa(dp2428
g17
(lp2429
S'k'
asg38
I331
sS'.thisRepN'
p2430
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2431
I299
sS'.thisN'
p2432
I299
sS'.thisIndex'
p2433
g43
(g45
S'K\x01\x00\x00'
tRp2434
sg15
(lp2435
S'k'
asg16
S'Y'
sg14
I6
sa(dp2436
g17
(lp2437
S'k'
asg38
I345
sS'.thisRepN'
p2438
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2439
I300
sS'.thisN'
p2440
I300
sS'.thisIndex'
p2441
g43
(g45
S'Y\x01\x00\x00'
tRp2442
sg15
(lp2443
S'k'
asg16
S'Y'
sg14
I7
sa(dp2444
g17
(lp2445
S'k'
asg38
I560
sS'.thisRepN'
p2446
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2447
I301
sS'.thisN'
p2448
I301
sS'.thisIndex'
p2449
g43
(g45
S'0\x02\x00\x00'
tRp2450
sg15
(lp2451
S'k'
asg16
S'Y'
sg14
I7
sa(dp2452
g17
(lp2453
S'k'
asg38
I554
sS'.thisRepN'
p2454
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2455
I302
sS'.thisN'
p2456
I302
sS'.thisIndex'
p2457
g43
(g45
S'*\x02\x00\x00'
tRp2458
sg15
(lp2459
S'k'
asg16
S'Y'
sg14
I7
sa(dp2460
g17
(lp2461
S'd'
asg38
I231
sS'.thisRepN'
p2462
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2463
I303
sS'.thisN'
p2464
I303
sS'.thisIndex'
p2465
g43
(g45
S'\xe7\x00\x00\x00'
tRp2466
sg15
(lp2467
S'd'
asg16
S'Y'
sg14
I7
sa(dp2468
g17
(lp2469
S'k'
asg38
I516
sS'.thisRepN'
p2470
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2471
I304
sS'.thisN'
p2472
I304
sS'.thisIndex'
p2473
g43
(g45
S'\x04\x02\x00\x00'
tRp2474
sg15
(lp2475
S'k'
asg16
S'Y'
sg14
I7
sa(dp2476
g17
(lp2477
S'd'
asg38
I44
sS'.thisRepN'
p2478
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2479
I305
sS'.thisN'
p2480
I305
sS'.thisIndex'
p2481
g43
(g45
S',\x00\x00\x00'
tRp2482
sg15
(lp2483
S'd'
asg16
S'Y'
sg14
I7
sa(dp2484
g17
(lp2485
S'd'
asg38
I128
sS'.thisRepN'
p2486
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2487
I306
sS'.thisN'
p2488
I306
sS'.thisIndex'
p2489
g43
(g45
S'\x80\x00\x00\x00'
tRp2490
sg15
(lp2491
S'd'
asg16
S'Y'
sg14
I7
sa(dp2492
g17
(lp2493
S'd'
asg38
I253
sS'.thisRepN'
p2494
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2495
I307
sS'.thisN'
p2496
I307
sS'.thisIndex'
p2497
g43
(g45
S'\xfd\x00\x00\x00'
tRp2498
sg15
(lp2499
S'd'
asg16
S'Y'
sg14
I7
sa(dp2500
g17
(lp2501
S'd'
asg38
I257
sS'.thisRepN'
p2502
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2503
I308
sS'.thisN'
p2504
I308
sS'.thisIndex'
p2505
g43
(g45
S'\x01\x01\x00\x00'
tRp2506
sg15
(lp2507
S'd'
asg16
S'Y'
sg14
I7
sa(dp2508
g17
(lp2509
S'k'
asg38
I320
sS'.thisRepN'
p2510
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2511
I309
sS'.thisN'
p2512
I309
sS'.thisIndex'
p2513
g43
(g45
S'@\x01\x00\x00'
tRp2514
sg15
(lp2515
S'k'
asg16
S'Y'
sg14
I7
sa(dp2516
g17
(lp2517
S'k'
asg38
I580
sS'.thisRepN'
p2518
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2519
I310
sS'.thisN'
p2520
I310
sS'.thisIndex'
p2521
g43
(g45
S'D\x02\x00\x00'
tRp2522
sg15
(lp2523
S'k'
asg16
S'Y'
sg14
I7
sa(dp2524
g17
(lp2525
S'k'
asg38
I521
sS'.thisRepN'
p2526
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2527
I311
sS'.thisN'
p2528
I311
sS'.thisIndex'
p2529
g43
(g45
S'\t\x02\x00\x00'
tRp2530
sg15
(lp2531
S'k'
asg16
S'Y'
sg14
I7
sa(dp2532
g17
(lp2533
S'd'
asg38
I232
sS'.thisRepN'
p2534
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2535
I312
sS'.thisN'
p2536
I312
sS'.thisIndex'
p2537
g43
(g45
S'\xe8\x00\x00\x00'
tRp2538
sg15
(lp2539
S'd'
asg16
S'Y'
sg14
I7
sa(dp2540
g17
(lp2541
S'd'
asg38
I200
sS'.thisRepN'
p2542
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2543
I313
sS'.thisN'
p2544
I313
sS'.thisIndex'
p2545
g43
(g45
S'\xc8\x00\x00\x00'
tRp2546
sg15
(lp2547
S'd'
asg16
S'Y'
sg14
I7
sa(dp2548
g17
(lp2549
S'd'
asg38
I177
sS'.thisRepN'
p2550
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2551
I314
sS'.thisN'
p2552
I314
sS'.thisIndex'
p2553
g43
(g45
S'\xb1\x00\x00\x00'
tRp2554
sg15
(lp2555
S'd'
asg16
S'Y'
sg14
I7
sa(dp2556
g17
(lp2557
S'k'
asg38
I595
sS'.thisRepN'
p2558
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2559
I315
sS'.thisN'
p2560
I315
sS'.thisIndex'
p2561
g43
(g45
S'S\x02\x00\x00'
tRp2562
sg15
(lp2563
S'k'
asg16
S'Y'
sg14
I7
sa(dp2564
g17
(lp2565
S'k'
asg38
I579
sS'.thisRepN'
p2566
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2567
I316
sS'.thisN'
p2568
I316
sS'.thisIndex'
p2569
g43
(g45
S'C\x02\x00\x00'
tRp2570
sg15
(lp2571
S'k'
asg16
S'Y'
sg14
I7
sa(dp2572
g17
(lp2573
S'k'
asg38
I577
sS'.thisRepN'
p2574
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2575
I317
sS'.thisN'
p2576
I317
sS'.thisIndex'
p2577
g43
(g45
S'A\x02\x00\x00'
tRp2578
sg15
(lp2579
S'k'
asg16
S'Y'
sg14
I7
sa(dp2580
g17
(lp2581
S'd'
asg38
I90
sS'.thisRepN'
p2582
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2583
I318
sS'.thisN'
p2584
I318
sS'.thisIndex'
p2585
g43
(g45
S'Z\x00\x00\x00'
tRp2586
sg15
(lp2587
S'd'
asg16
S'Y'
sg14
I7
sa(dp2588
g17
(lp2589
S'k'
asg38
I337
sS'.thisRepN'
p2590
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2591
I319
sS'.thisN'
p2592
I319
sS'.thisIndex'
p2593
g43
(g45
S'Q\x01\x00\x00'
tRp2594
sg15
(lp2595
S'k'
asg16
S'Y'
sg14
I7
sa(dp2596
g17
(lp2597
S'k'
asg38
I310
sS'.thisRepN'
p2598
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2599
I320
sS'.thisN'
p2600
I320
sS'.thisIndex'
p2601
g43
(g45
S'6\x01\x00\x00'
tRp2602
sg15
(lp2603
S'k'
asg16
S'Y'
sg14
I7
sa(dp2604
g17
(lp2605
S'k'
asg38
I405
sS'.thisRepN'
p2606
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2607
I321
sS'.thisN'
p2608
I321
sS'.thisIndex'
p2609
g43
(g45
S'\x95\x01\x00\x00'
tRp2610
sg15
(lp2611
S'k'
asg16
S'Y'
sg14
I7
sa(dp2612
g17
(lp2613
S'k'
asg38
I588
sS'.thisRepN'
p2614
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2615
I322
sS'.thisN'
p2616
I322
sS'.thisIndex'
p2617
g43
(g45
S'L\x02\x00\x00'
tRp2618
sg15
(lp2619
S'k'
asg16
S'Y'
sg14
I7
sa(dp2620
g17
(lp2621
S'k'
asg38
I594
sS'.thisRepN'
p2622
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2623
I323
sS'.thisN'
p2624
I323
sS'.thisIndex'
p2625
g43
(g45
S'R\x02\x00\x00'
tRp2626
sg15
(lp2627
S'k'
asg16
S'Y'
sg14
I7
sa(dp2628
g17
(lp2629
S'k'
asg38
I526
sS'.thisRepN'
p2630
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2631
I324
sS'.thisN'
p2632
I324
sS'.thisIndex'
p2633
g43
(g45
S'\x0e\x02\x00\x00'
tRp2634
sg15
(lp2635
S'k'
asg16
S'Y'
sg14
I7
sa(dp2636
g17
(lp2637
S'd'
asg38
I237
sS'.thisRepN'
p2638
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2639
I325
sS'.thisN'
p2640
I325
sS'.thisIndex'
p2641
g43
(g45
S'\xed\x00\x00\x00'
tRp2642
sg15
(lp2643
S'd'
asg16
S'Y'
sg14
I7
sa(dp2644
g17
(lp2645
S'd'
asg38
I222
sS'.thisRepN'
p2646
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2647
I326
sS'.thisN'
p2648
I326
sS'.thisIndex'
p2649
g43
(g45
S'\xde\x00\x00\x00'
tRp2650
sg15
(lp2651
S'd'
asg16
S'Y'
sg14
I7
sa(dp2652
g17
(lp2653
S'd'
asg38
I252
sS'.thisRepN'
p2654
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2655
I327
sS'.thisN'
p2656
I327
sS'.thisIndex'
p2657
g43
(g45
S'\xfc\x00\x00\x00'
tRp2658
sg15
(lp2659
S'd'
asg16
S'Y'
sg14
I7
sa(dp2660
g17
(lp2661
S'd'
asg38
I167
sS'.thisRepN'
p2662
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2663
I328
sS'.thisN'
p2664
I328
sS'.thisIndex'
p2665
g43
(g45
S'\xa7\x00\x00\x00'
tRp2666
sg15
(lp2667
S'd'
asg16
S'Y'
sg14
I7
sa(dp2668
g17
(lp2669
S'd'
asg38
I293
sS'.thisRepN'
p2670
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2671
I329
sS'.thisN'
p2672
I329
sS'.thisIndex'
p2673
g43
(g45
S'%\x01\x00\x00'
tRp2674
sg15
(lp2675
S'd'
asg16
S'Y'
sg14
I7
sa(dp2676
g17
(lp2677
S'd'
asg38
I152
sS'.thisRepN'
p2678
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2679
I330
sS'.thisN'
p2680
I330
sS'.thisIndex'
p2681
g43
(g45
S'\x98\x00\x00\x00'
tRp2682
sg15
(lp2683
S'd'
asg16
S'Y'
sg14
I7
sa(dp2684
g17
(lp2685
S'd'
asg38
I161
sS'.thisRepN'
p2686
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2687
I331
sS'.thisN'
p2688
I331
sS'.thisIndex'
p2689
g43
(g45
S'\xa1\x00\x00\x00'
tRp2690
sg15
(lp2691
S'd'
asg16
S'Y'
sg14
I7
sa(dp2692
g17
(lp2693
S'd'
asg38
I6
sS'.thisRepN'
p2694
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2695
I332
sS'.thisN'
p2696
I332
sS'.thisIndex'
p2697
g43
(g45
S'\x06\x00\x00\x00'
tRp2698
sg15
(lp2699
S'd'
asg16
S'Y'
sg14
I7
sa(dp2700
g17
(lp2701
S'd'
asg38
I213
sS'.thisRepN'
p2702
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2703
I333
sS'.thisN'
p2704
I333
sS'.thisIndex'
p2705
g43
(g45
S'\xd5\x00\x00\x00'
tRp2706
sg15
(lp2707
S'd'
asg16
S'Y'
sg14
I7
sa(dp2708
g17
(lp2709
S'k'
asg38
I492
sS'.thisRepN'
p2710
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2711
I334
sS'.thisN'
p2712
I334
sS'.thisIndex'
p2713
g43
(g45
S'\xec\x01\x00\x00'
tRp2714
sg15
(lp2715
S'k'
asg16
S'Y'
sg14
I7
sa(dp2716
g17
(lp2717
S'k'
asg38
I322
sS'.thisRepN'
p2718
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2719
I335
sS'.thisN'
p2720
I335
sS'.thisIndex'
p2721
g43
(g45
S'B\x01\x00\x00'
tRp2722
sg15
(lp2723
S'k'
asg16
S'Y'
sg14
I7
sa(dp2724
g17
(lp2725
S'k'
asg38
I350
sS'.thisRepN'
p2726
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2727
I336
sS'.thisN'
p2728
I336
sS'.thisIndex'
p2729
g43
(g45
S'^\x01\x00\x00'
tRp2730
sg15
(lp2731
S'k'
asg16
S'Y'
sg14
I7
sa(dp2732
g17
(lp2733
S'k'
asg38
I414
sS'.thisRepN'
p2734
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2735
I337
sS'.thisN'
p2736
I337
sS'.thisIndex'
p2737
g43
(g45
S'\x9e\x01\x00\x00'
tRp2738
sg15
(lp2739
S'k'
asg16
S'Y'
sg14
I7
sa(dp2740
g17
(lp2741
S'd'
asg38
I54
sS'.thisRepN'
p2742
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2743
I338
sS'.thisN'
p2744
I338
sS'.thisIndex'
p2745
g43
(g45
S'6\x00\x00\x00'
tRp2746
sg15
(lp2747
S'd'
asg16
S'Y'
sg14
I7
sa(dp2748
g17
(lp2749
S'd'
asg38
I138
sS'.thisRepN'
p2750
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2751
I339
sS'.thisN'
p2752
I339
sS'.thisIndex'
p2753
g43
(g45
S'\x8a\x00\x00\x00'
tRp2754
sg15
(lp2755
S'd'
asg16
S'Y'
sg14
I7
sa(dp2756
g17
(lp2757
S'k'
asg38
I586
sS'.thisRepN'
p2758
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2759
I340
sS'.thisN'
p2760
I340
sS'.thisIndex'
p2761
g43
(g45
S'J\x02\x00\x00'
tRp2762
sg15
(lp2763
S'k'
asg16
S'Y'
sg14
I7
sa(dp2764
g17
(lp2765
S'd'
asg38
I258
sS'.thisRepN'
p2766
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2767
I341
sS'.thisN'
p2768
I341
sS'.thisIndex'
p2769
g43
(g45
S'\x02\x01\x00\x00'
tRp2770
sg15
(lp2771
S'd'
asg16
S'Y'
sg14
I7
sa(dp2772
g17
(lp2773
S'd'
asg38
I121
sS'.thisRepN'
p2774
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2775
I342
sS'.thisN'
p2776
I342
sS'.thisIndex'
p2777
g43
(g45
S'y\x00\x00\x00'
tRp2778
sg15
(lp2779
S'd'
asg16
S'Y'
sg14
I7
sa(dp2780
g17
(lp2781
S'd'
asg38
I49
sS'.thisRepN'
p2782
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2783
I343
sS'.thisN'
p2784
I343
sS'.thisIndex'
p2785
g43
(g45
S'1\x00\x00\x00'
tRp2786
sg15
(lp2787
S'd'
asg16
S'Y'
sg14
I7
sa(dp2788
g17
(lp2789
S'k'
asg38
I592
sS'.thisRepN'
p2790
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2791
I344
sS'.thisN'
p2792
I344
sS'.thisIndex'
p2793
g43
(g45
S'P\x02\x00\x00'
tRp2794
sg15
(lp2795
S'k'
asg16
S'Y'
sg14
I7
sa(dp2796
g17
(lp2797
S'd'
asg38
I171
sS'.thisRepN'
p2798
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2799
I345
sS'.thisN'
p2800
I345
sS'.thisIndex'
p2801
g43
(g45
S'\xab\x00\x00\x00'
tRp2802
sg15
(lp2803
S'd'
asg16
S'Y'
sg14
I7
sa(dp2804
g17
(lp2805
S'd'
asg38
I140
sS'.thisRepN'
p2806
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2807
I346
sS'.thisN'
p2808
I346
sS'.thisIndex'
p2809
g43
(g45
S'\x8c\x00\x00\x00'
tRp2810
sg15
(lp2811
S'd'
asg16
S'Y'
sg14
I7
sa(dp2812
g17
(lp2813
S'k'
asg38
I572
sS'.thisRepN'
p2814
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2815
I347
sS'.thisN'
p2816
I347
sS'.thisIndex'
p2817
g43
(g45
S'<\x02\x00\x00'
tRp2818
sg15
(lp2819
S'k'
asg16
S'Y'
sg14
I7
sa(dp2820
g17
(lp2821
S'd'
asg38
I125
sS'.thisRepN'
p2822
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2823
I348
sS'.thisN'
p2824
I348
sS'.thisIndex'
p2825
g43
(g45
S'}\x00\x00\x00'
tRp2826
sg15
(lp2827
S'd'
asg16
S'Y'
sg14
I7
sa(dp2828
g17
(lp2829
S'k'
asg38
I514
sS'.thisRepN'
p2830
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2831
I349
sS'.thisN'
p2832
I349
sS'.thisIndex'
p2833
g43
(g45
S'\x02\x02\x00\x00'
tRp2834
sg15
(lp2835
S'k'
asg16
S'Y'
sg14
I7
sa(dp2836
g17
(lp2837
S'k'
asg38
I315
sS'.thisRepN'
p2838
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2839
I350
sS'.thisN'
p2840
I350
sS'.thisIndex'
p2841
g43
(g45
S';\x01\x00\x00'
tRp2842
sg15
(lp2843
S'k'
asg16
S'Y'
sg14
I8
sa(dp2844
g17
(lp2845
S'k'
asg38
I452
sS'.thisRepN'
p2846
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2847
I351
sS'.thisN'
p2848
I351
sS'.thisIndex'
p2849
g43
(g45
S'\xc4\x01\x00\x00'
tRp2850
sg15
(lp2851
S'k'
asg16
S'Y'
sg14
I8
sa(dp2852
g17
(lp2853
S'k'
asg38
I524
sS'.thisRepN'
p2854
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2855
I352
sS'.thisN'
p2856
I352
sS'.thisIndex'
p2857
g43
(g45
S'\x0c\x02\x00\x00'
tRp2858
sg15
(lp2859
S'k'
asg16
S'Y'
sg14
I8
sa(dp2860
g17
(lp2861
S'd'
asg38
I96
sS'.thisRepN'
p2862
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2863
I353
sS'.thisN'
p2864
I353
sS'.thisIndex'
p2865
g43
(g45
S'`\x00\x00\x00'
tRp2866
sg15
(lp2867
S'd'
asg16
S'Y'
sg14
I8
sa(dp2868
g17
(lp2869
S'k'
asg38
I403
sS'.thisRepN'
p2870
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2871
I354
sS'.thisN'
p2872
I354
sS'.thisIndex'
p2873
g43
(g45
S'\x93\x01\x00\x00'
tRp2874
sg15
(lp2875
S'k'
asg16
S'Y'
sg14
I8
sa(dp2876
g17
(lp2877
S'k'
asg38
I531
sS'.thisRepN'
p2878
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2879
I355
sS'.thisN'
p2880
I355
sS'.thisIndex'
p2881
g43
(g45
S'\x13\x02\x00\x00'
tRp2882
sg15
(lp2883
S'k'
asg16
S'Y'
sg14
I8
sa(dp2884
g17
(lp2885
S'd'
asg38
I281
sS'.thisRepN'
p2886
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2887
I356
sS'.thisN'
p2888
I356
sS'.thisIndex'
p2889
g43
(g45
S'\x19\x01\x00\x00'
tRp2890
sg15
(lp2891
S'd'
asg16
S'Y'
sg14
I8
sa(dp2892
g17
(lp2893
S'k'
asg38
I536
sS'.thisRepN'
p2894
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2895
I357
sS'.thisN'
p2896
I357
sS'.thisIndex'
p2897
g43
(g45
S'\x18\x02\x00\x00'
tRp2898
sg15
(lp2899
S'k'
asg16
S'Y'
sg14
I8
sa(dp2900
g17
(lp2901
S'd'
asg38
I83
sS'.thisRepN'
p2902
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2903
I358
sS'.thisN'
p2904
I358
sS'.thisIndex'
p2905
g43
(g45
S'S\x00\x00\x00'
tRp2906
sg15
(lp2907
S'd'
asg16
S'Y'
sg14
I8
sa(dp2908
g17
(lp2909
S'd'
asg38
I225
sS'.thisRepN'
p2910
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2911
I359
sS'.thisN'
p2912
I359
sS'.thisIndex'
p2913
g43
(g45
S'\xe1\x00\x00\x00'
tRp2914
sg15
(lp2915
S'd'
asg16
S'Y'
sg14
I8
sa(dp2916
g17
(lp2917
S'k'
asg38
I471
sS'.thisRepN'
p2918
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2919
I360
sS'.thisN'
p2920
I360
sS'.thisIndex'
p2921
g43
(g45
S'\xd7\x01\x00\x00'
tRp2922
sg15
(lp2923
S'k'
asg16
S'Y'
sg14
I8
sa(dp2924
g17
(lp2925
S'd'
asg38
I259
sS'.thisRepN'
p2926
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2927
I361
sS'.thisN'
p2928
I361
sS'.thisIndex'
p2929
g43
(g45
S'\x03\x01\x00\x00'
tRp2930
sg15
(lp2931
S'd'
asg16
S'Y'
sg14
I8
sa(dp2932
g17
(lp2933
S'd'
asg38
I46
sS'.thisRepN'
p2934
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2935
I362
sS'.thisN'
p2936
I362
sS'.thisIndex'
p2937
g43
(g45
S'.\x00\x00\x00'
tRp2938
sg15
(lp2939
S'd'
asg16
S'Y'
sg14
I8
sa(dp2940
g17
(lp2941
S'd'
asg38
I287
sS'.thisRepN'
p2942
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2943
I363
sS'.thisN'
p2944
I363
sS'.thisIndex'
p2945
g43
(g45
S'\x1f\x01\x00\x00'
tRp2946
sg15
(lp2947
S'd'
asg16
S'Y'
sg14
I8
sa(dp2948
g17
(lp2949
S'k'
asg38
I413
sS'.thisRepN'
p2950
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2951
I364
sS'.thisN'
p2952
I364
sS'.thisIndex'
p2953
g43
(g45
S'\x9d\x01\x00\x00'
tRp2954
sg15
(lp2955
S'k'
asg16
S'Y'
sg14
I8
sa(dp2956
g17
(lp2957
S'k'
asg38
I415
sS'.thisRepN'
p2958
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2959
I365
sS'.thisN'
p2960
I365
sS'.thisIndex'
p2961
g43
(g45
S'\x9f\x01\x00\x00'
tRp2962
sg15
(lp2963
S'd'
asg16
S'N'
sg14
I8
sa(dp2964
g17
(lp2965
S'd'
asg38
I23
sS'.thisRepN'
p2966
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2967
I366
sS'.thisN'
p2968
I366
sS'.thisIndex'
p2969
g43
(g45
S'\x17\x00\x00\x00'
tRp2970
sg15
(lp2971
S'd'
asg16
S'Y'
sg14
I8
sa(dp2972
g17
(lp2973
S'k'
asg38
I459
sS'.thisRepN'
p2974
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2975
I367
sS'.thisN'
p2976
I367
sS'.thisIndex'
p2977
g43
(g45
S'\xcb\x01\x00\x00'
tRp2978
sg15
(lp2979
S'k'
asg16
S'Y'
sg14
I8
sa(dp2980
g17
(lp2981
S'd'
asg38
I113
sS'.thisRepN'
p2982
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2983
I368
sS'.thisN'
p2984
I368
sS'.thisIndex'
p2985
g43
(g45
S'q\x00\x00\x00'
tRp2986
sg15
(lp2987
S'd'
asg16
S'Y'
sg14
I8
sa(dp2988
g17
(lp2989
S'k'
asg38
I427
sS'.thisRepN'
p2990
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2991
I369
sS'.thisN'
p2992
I369
sS'.thisIndex'
p2993
g43
(g45
S'\xab\x01\x00\x00'
tRp2994
sg15
(lp2995
S'k'
asg16
S'Y'
sg14
I8
sa(dp2996
g17
(lp2997
S'k'
asg38
I379
sS'.thisRepN'
p2998
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p2999
I370
sS'.thisN'
p3000
I370
sS'.thisIndex'
p3001
g43
(g45
S'{\x01\x00\x00'
tRp3002
sg15
(lp3003
S'k'
asg16
S'Y'
sg14
I8
sa(dp3004
g17
(lp3005
S'd'
asg38
I106
sS'.thisRepN'
p3006
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3007
I371
sS'.thisN'
p3008
I371
sS'.thisIndex'
p3009
g43
(g45
S'j\x00\x00\x00'
tRp3010
sg15
(lp3011
S'd'
asg16
S'Y'
sg14
I8
sa(dp3012
g17
(lp3013
S'k'
asg38
I323
sS'.thisRepN'
p3014
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3015
I372
sS'.thisN'
p3016
I372
sS'.thisIndex'
p3017
g43
(g45
S'C\x01\x00\x00'
tRp3018
sg15
(lp3019
S'd'
asg16
S'N'
sg14
I8
sa(dp3020
g17
(lp3021
S'k'
asg38
I486
sS'.thisRepN'
p3022
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3023
I373
sS'.thisN'
p3024
I373
sS'.thisIndex'
p3025
g43
(g45
S'\xe6\x01\x00\x00'
tRp3026
sg15
(lp3027
S'k'
asg16
S'Y'
sg14
I8
sa(dp3028
g17
(lp3029
S'k'
asg38
I374
sS'.thisRepN'
p3030
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3031
I374
sS'.thisN'
p3032
I374
sS'.thisIndex'
p3033
g43
(g45
S'v\x01\x00\x00'
tRp3034
sg15
(lp3035
S'k'
asg16
S'Y'
sg14
I8
sa(dp3036
g17
(lp3037
S'k'
asg38
I382
sS'.thisRepN'
p3038
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3039
I375
sS'.thisN'
p3040
I375
sS'.thisIndex'
p3041
g43
(g45
S'~\x01\x00\x00'
tRp3042
sg15
(lp3043
S'k'
asg16
S'Y'
sg14
I8
sa(dp3044
g17
(lp3045
S'd'
asg38
I66
sS'.thisRepN'
p3046
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3047
I376
sS'.thisN'
p3048
I376
sS'.thisIndex'
p3049
g43
(g45
S'B\x00\x00\x00'
tRp3050
sg15
(lp3051
S'd'
asg16
S'Y'
sg14
I8
sa(dp3052
g17
(lp3053
S'd'
asg38
I67
sS'.thisRepN'
p3054
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3055
I377
sS'.thisN'
p3056
I377
sS'.thisIndex'
p3057
g43
(g45
S'C\x00\x00\x00'
tRp3058
sg15
(lp3059
S'd'
asg16
S'Y'
sg14
I8
sa(dp3060
g17
(lp3061
S'd'
asg38
I218
sS'.thisRepN'
p3062
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3063
I378
sS'.thisN'
p3064
I378
sS'.thisIndex'
p3065
g43
(g45
S'\xda\x00\x00\x00'
tRp3066
sg15
(lp3067
S'd'
asg16
S'Y'
sg14
I8
sa(dp3068
g17
(lp3069
S'k'
asg38
I582
sS'.thisRepN'
p3070
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3071
I379
sS'.thisN'
p3072
I379
sS'.thisIndex'
p3073
g43
(g45
S'F\x02\x00\x00'
tRp3074
sg15
(lp3075
S'k'
asg16
S'Y'
sg14
I8
sa(dp3076
g17
(lp3077
S'd'
asg38
I26
sS'.thisRepN'
p3078
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3079
I380
sS'.thisN'
p3080
I380
sS'.thisIndex'
p3081
g43
(g45
S'\x1a\x00\x00\x00'
tRp3082
sg15
(lp3083
S'd'
asg16
S'Y'
sg14
I8
sa(dp3084
g17
(lp3085
S'k'
asg38
I311
sS'.thisRepN'
p3086
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3087
I381
sS'.thisN'
p3088
I381
sS'.thisIndex'
p3089
g43
(g45
S'7\x01\x00\x00'
tRp3090
sg15
(lp3091
S'k'
asg16
S'Y'
sg14
I8
sa(dp3092
g17
(lp3093
S'k'
asg38
I334
sS'.thisRepN'
p3094
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3095
I382
sS'.thisN'
p3096
I382
sS'.thisIndex'
p3097
g43
(g45
S'N\x01\x00\x00'
tRp3098
sg15
(lp3099
S'k'
asg16
S'Y'
sg14
I8
sa(dp3100
g17
(lp3101
S'd'
asg38
I12
sS'.thisRepN'
p3102
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3103
I383
sS'.thisN'
p3104
I383
sS'.thisIndex'
p3105
g43
(g45
S'\x0c\x00\x00\x00'
tRp3106
sg15
(lp3107
S'd'
asg16
S'Y'
sg14
I8
sa(dp3108
g17
(lp3109
S'd'
asg38
I212
sS'.thisRepN'
p3110
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3111
I384
sS'.thisN'
p3112
I384
sS'.thisIndex'
p3113
g43
(g45
S'\xd4\x00\x00\x00'
tRp3114
sg15
(lp3115
S'd'
asg16
S'Y'
sg14
I8
sa(dp3116
g17
(lp3117
S'k'
asg38
I482
sS'.thisRepN'
p3118
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3119
I385
sS'.thisN'
p3120
I385
sS'.thisIndex'
p3121
g43
(g45
S'\xe2\x01\x00\x00'
tRp3122
sg15
(lp3123
S'k'
asg16
S'Y'
sg14
I8
sa(dp3124
g17
(lp3125
S'd'
asg38
I296
sS'.thisRepN'
p3126
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3127
I386
sS'.thisN'
p3128
I386
sS'.thisIndex'
p3129
g43
(g45
S'(\x01\x00\x00'
tRp3130
sg15
(lp3131
S'd'
asg16
S'Y'
sg14
I8
sa(dp3132
g17
(lp3133
S'k'
asg38
I454
sS'.thisRepN'
p3134
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3135
I387
sS'.thisN'
p3136
I387
sS'.thisIndex'
p3137
g43
(g45
S'\xc6\x01\x00\x00'
tRp3138
sg15
(lp3139
S'k'
asg16
S'Y'
sg14
I8
sa(dp3140
g17
(lp3141
S'k'
asg38
I503
sS'.thisRepN'
p3142
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3143
I388
sS'.thisN'
p3144
I388
sS'.thisIndex'
p3145
g43
(g45
S'\xf7\x01\x00\x00'
tRp3146
sg15
(lp3147
S'k'
asg16
S'Y'
sg14
I8
sa(dp3148
g17
(lp3149
S'k'
asg38
I535
sS'.thisRepN'
p3150
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3151
I389
sS'.thisN'
p3152
I389
sS'.thisIndex'
p3153
g43
(g45
S'\x17\x02\x00\x00'
tRp3154
sg15
(lp3155
S'k'
asg16
S'Y'
sg14
I8
sa(dp3156
g17
(lp3157
S'k'
asg38
I569
sS'.thisRepN'
p3158
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3159
I390
sS'.thisN'
p3160
I390
sS'.thisIndex'
p3161
g43
(g45
S'9\x02\x00\x00'
tRp3162
sg15
(lp3163
S'k'
asg16
S'Y'
sg14
I8
sa(dp3164
g17
(lp3165
S'd'
asg38
I285
sS'.thisRepN'
p3166
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3167
I391
sS'.thisN'
p3168
I391
sS'.thisIndex'
p3169
g43
(g45
S'\x1d\x01\x00\x00'
tRp3170
sg15
(lp3171
S'd'
asg16
S'Y'
sg14
I8
sa(dp3172
g17
(lp3173
S'd'
asg38
I270
sS'.thisRepN'
p3174
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3175
I392
sS'.thisN'
p3176
I392
sS'.thisIndex'
p3177
g43
(g45
S'\x0e\x01\x00\x00'
tRp3178
sg15
(lp3179
S'd'
asg16
S'Y'
sg14
I8
sa(dp3180
g17
(lp3181
S'd'
asg38
I85
sS'.thisRepN'
p3182
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3183
I393
sS'.thisN'
p3184
I393
sS'.thisIndex'
p3185
g43
(g45
S'U\x00\x00\x00'
tRp3186
sg15
(lp3187
S'd'
asg16
S'Y'
sg14
I8
sa(dp3188
g17
(lp3189
S'd'
asg38
I34
sS'.thisRepN'
p3190
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3191
I394
sS'.thisN'
p3192
I394
sS'.thisIndex'
p3193
g43
(g45
S'"\x00\x00\x00'
tRp3194
sg15
(lp3195
S'd'
asg16
S'Y'
sg14
I8
sa(dp3196
g17
(lp3197
S'd'
asg38
I148
sS'.thisRepN'
p3198
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3199
I395
sS'.thisN'
p3200
I395
sS'.thisIndex'
p3201
g43
(g45
S'\x94\x00\x00\x00'
tRp3202
sg15
(lp3203
S'd'
asg16
S'Y'
sg14
I8
sa(dp3204
g17
(lp3205
S'k'
asg38
I587
sS'.thisRepN'
p3206
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3207
I396
sS'.thisN'
p3208
I396
sS'.thisIndex'
p3209
g43
(g45
S'K\x02\x00\x00'
tRp3210
sg15
(lp3211
S'k'
asg16
S'Y'
sg14
I8
sa(dp3212
g17
(lp3213
S'd'
asg38
I42
sS'.thisRepN'
p3214
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3215
I397
sS'.thisN'
p3216
I397
sS'.thisIndex'
p3217
g43
(g45
S'*\x00\x00\x00'
tRp3218
sg15
(lp3219
S'd'
asg16
S'Y'
sg14
I8
sa(dp3220
g17
(lp3221
S'd'
asg38
I223
sS'.thisRepN'
p3222
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3223
I398
sS'.thisN'
p3224
I398
sS'.thisIndex'
p3225
g43
(g45
S'\xdf\x00\x00\x00'
tRp3226
sg15
(lp3227
S'd'
asg16
S'Y'
sg14
I8
sa(dp3228
g17
(lp3229
S'k'
asg38
I317
sS'.thisRepN'
p3230
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3231
I399
sS'.thisN'
p3232
I399
sS'.thisIndex'
p3233
g43
(g45
S'=\x01\x00\x00'
tRp3234
sg15
(lp3235
S'k'
asg16
S'Y'
sg14
I8
sa(dp3236
g17
(lp3237
S'k'
asg38
I356
sS'.thisRepN'
p3238
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3239
I400
sS'.thisN'
p3240
I400
sS'.thisIndex'
p3241
g43
(g45
S'd\x01\x00\x00'
tRp3242
sg15
(lp3243
S'k'
asg16
S'Y'
sg14
I9
sa(dp3244
g17
(lp3245
S'k'
asg38
I301
sS'.thisRepN'
p3246
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3247
I401
sS'.thisN'
p3248
I401
sS'.thisIndex'
p3249
g43
(g45
S'-\x01\x00\x00'
tRp3250
sg15
(lp3251
S'k'
asg16
S'Y'
sg14
I9
sa(dp3252
g17
(lp3253
S'd'
asg38
I235
sS'.thisRepN'
p3254
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3255
I402
sS'.thisN'
p3256
I402
sS'.thisIndex'
p3257
g43
(g45
S'\xeb\x00\x00\x00'
tRp3258
sg15
(lp3259
S'd'
asg16
S'Y'
sg14
I9
sa(dp3260
g17
(lp3261
S'k'
asg38
I553
sS'.thisRepN'
p3262
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3263
I403
sS'.thisN'
p3264
I403
sS'.thisIndex'
p3265
g43
(g45
S')\x02\x00\x00'
tRp3266
sg15
(lp3267
S'k'
asg16
S'Y'
sg14
I9
sa(dp3268
g17
(lp3269
S'd'
asg38
I278
sS'.thisRepN'
p3270
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3271
I404
sS'.thisN'
p3272
I404
sS'.thisIndex'
p3273
g43
(g45
S'\x16\x01\x00\x00'
tRp3274
sg15
(lp3275
S'd'
asg16
S'Y'
sg14
I9
sa(dp3276
g17
(lp3277
S'd'
asg38
I45
sS'.thisRepN'
p3278
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3279
I405
sS'.thisN'
p3280
I405
sS'.thisIndex'
p3281
g43
(g45
S'-\x00\x00\x00'
tRp3282
sg15
(lp3283
S'd'
asg16
S'Y'
sg14
I9
sa(dp3284
g17
(lp3285
S'k'
asg38
I440
sS'.thisRepN'
p3286
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3287
I406
sS'.thisN'
p3288
I406
sS'.thisIndex'
p3289
g43
(g45
S'\xb8\x01\x00\x00'
tRp3290
sg15
(lp3291
S'k'
asg16
S'Y'
sg14
I9
sa(dp3292
g17
(lp3293
S'k'
asg38
I465
sS'.thisRepN'
p3294
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3295
I407
sS'.thisN'
p3296
I407
sS'.thisIndex'
p3297
g43
(g45
S'\xd1\x01\x00\x00'
tRp3298
sg15
(lp3299
S'k'
asg16
S'Y'
sg14
I9
sa(dp3300
g17
(lp3301
S'd'
asg38
I273
sS'.thisRepN'
p3302
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3303
I408
sS'.thisN'
p3304
I408
sS'.thisIndex'
p3305
g43
(g45
S'\x11\x01\x00\x00'
tRp3306
sg15
(lp3307
S'd'
asg16
S'Y'
sg14
I9
sa(dp3308
g17
(lp3309
S'k'
asg38
I530
sS'.thisRepN'
p3310
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3311
I409
sS'.thisN'
p3312
I409
sS'.thisIndex'
p3313
g43
(g45
S'\x12\x02\x00\x00'
tRp3314
sg15
(lp3315
S'k'
asg16
S'Y'
sg14
I9
sa(dp3316
g17
(lp3317
S'd'
asg38
I156
sS'.thisRepN'
p3318
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3319
I410
sS'.thisN'
p3320
I410
sS'.thisIndex'
p3321
g43
(g45
S'\x9c\x00\x00\x00'
tRp3322
sg15
(lp3323
S'd'
asg16
S'Y'
sg14
I9
sa(dp3324
g17
(lp3325
S'k'
asg38
I466
sS'.thisRepN'
p3326
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3327
I411
sS'.thisN'
p3328
I411
sS'.thisIndex'
p3329
g43
(g45
S'\xd2\x01\x00\x00'
tRp3330
sg15
(lp3331
S'k'
asg16
S'Y'
sg14
I9
sa(dp3332
g17
(lp3333
S'd'
asg38
I224
sS'.thisRepN'
p3334
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3335
I412
sS'.thisN'
p3336
I412
sS'.thisIndex'
p3337
g43
(g45
S'\xe0\x00\x00\x00'
tRp3338
sg15
(lp3339
S'd'
asg16
S'Y'
sg14
I9
sa(dp3340
g17
(lp3341
S'k'
asg38
I363
sS'.thisRepN'
p3342
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3343
I413
sS'.thisN'
p3344
I413
sS'.thisIndex'
p3345
g43
(g45
S'k\x01\x00\x00'
tRp3346
sg15
(lp3347
S'k'
asg16
S'Y'
sg14
I9
sa(dp3348
g17
(lp3349
S'k'
asg38
I507
sS'.thisRepN'
p3350
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3351
I414
sS'.thisN'
p3352
I414
sS'.thisIndex'
p3353
g43
(g45
S'\xfb\x01\x00\x00'
tRp3354
sg15
(lp3355
S'k'
asg16
S'Y'
sg14
I9
sa(dp3356
g17
(lp3357
S'k'
asg38
I511
sS'.thisRepN'
p3358
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3359
I415
sS'.thisN'
p3360
I415
sS'.thisIndex'
p3361
g43
(g45
S'\xff\x01\x00\x00'
tRp3362
sg15
(lp3363
S'k'
asg16
S'Y'
sg14
I9
sa(dp3364
g17
(lp3365
S'd'
asg38
I255
sS'.thisRepN'
p3366
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3367
I416
sS'.thisN'
p3368
I416
sS'.thisIndex'
p3369
g43
(g45
S'\xff\x00\x00\x00'
tRp3370
sg15
(lp3371
S'd'
asg16
S'Y'
sg14
I9
sa(dp3372
g17
(lp3373
S'd'
asg38
I134
sS'.thisRepN'
p3374
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3375
I417
sS'.thisN'
p3376
I417
sS'.thisIndex'
p3377
g43
(g45
S'\x86\x00\x00\x00'
tRp3378
sg15
(lp3379
S'd'
asg16
S'Y'
sg14
I9
sa(dp3380
g17
(lp3381
S'k'
asg38
I367
sS'.thisRepN'
p3382
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3383
I418
sS'.thisN'
p3384
I418
sS'.thisIndex'
p3385
g43
(g45
S'o\x01\x00\x00'
tRp3386
sg15
(lp3387
S'k'
asg16
S'Y'
sg14
I9
sa(dp3388
g17
(lp3389
S'k'
asg38
I578
sS'.thisRepN'
p3390
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3391
I419
sS'.thisN'
p3392
I419
sS'.thisIndex'
p3393
g43
(g45
S'B\x02\x00\x00'
tRp3394
sg15
(lp3395
S'k'
asg16
S'Y'
sg14
I9
sa(dp3396
g17
(lp3397
S'd'
asg38
I262
sS'.thisRepN'
p3398
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3399
I420
sS'.thisN'
p3400
I420
sS'.thisIndex'
p3401
g43
(g45
S'\x06\x01\x00\x00'
tRp3402
sg15
(lp3403
S'd'
asg16
S'Y'
sg14
I9
sa(dp3404
g17
(lp3405
S'k'
asg38
I491
sS'.thisRepN'
p3406
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3407
I421
sS'.thisN'
p3408
I421
sS'.thisIndex'
p3409
g43
(g45
S'\xeb\x01\x00\x00'
tRp3410
sg15
(lp3411
S'k'
asg16
S'Y'
sg14
I9
sa(dp3412
g17
(lp3413
S'k'
asg38
I574
sS'.thisRepN'
p3414
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3415
I422
sS'.thisN'
p3416
I422
sS'.thisIndex'
p3417
g43
(g45
S'>\x02\x00\x00'
tRp3418
sg15
(lp3419
S'k'
asg16
S'Y'
sg14
I9
sa(dp3420
g17
(lp3421
S'k'
asg38
I432
sS'.thisRepN'
p3422
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3423
I423
sS'.thisN'
p3424
I423
sS'.thisIndex'
p3425
g43
(g45
S'\xb0\x01\x00\x00'
tRp3426
sg15
(lp3427
S'k'
asg16
S'Y'
sg14
I9
sa(dp3428
g17
(lp3429
S'k'
asg38
I329
sS'.thisRepN'
p3430
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3431
I424
sS'.thisN'
p3432
I424
sS'.thisIndex'
p3433
g43
(g45
S'I\x01\x00\x00'
tRp3434
sg15
(lp3435
S'k'
asg16
S'Y'
sg14
I9
sa(dp3436
g17
(lp3437
S'd'
asg38
I207
sS'.thisRepN'
p3438
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3439
I425
sS'.thisN'
p3440
I425
sS'.thisIndex'
p3441
g43
(g45
S'\xcf\x00\x00\x00'
tRp3442
sg15
(lp3443
S'd'
asg16
S'Y'
sg14
I9
sa(dp3444
g17
(lp3445
S'k'
asg38
I445
sS'.thisRepN'
p3446
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3447
I426
sS'.thisN'
p3448
I426
sS'.thisIndex'
p3449
g43
(g45
S'\xbd\x01\x00\x00'
tRp3450
sg15
(lp3451
S'k'
asg16
S'Y'
sg14
I9
sa(dp3452
g17
(lp3453
S'd'
asg38
I139
sS'.thisRepN'
p3454
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3455
I427
sS'.thisN'
p3456
I427
sS'.thisIndex'
p3457
g43
(g45
S'\x8b\x00\x00\x00'
tRp3458
sg15
(lp3459
S'd'
asg16
S'Y'
sg14
I9
sa(dp3460
g17
(lp3461
S'd'
asg38
I130
sS'.thisRepN'
p3462
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3463
I428
sS'.thisN'
p3464
I428
sS'.thisIndex'
p3465
g43
(g45
S'\x82\x00\x00\x00'
tRp3466
sg15
(lp3467
S'd'
asg16
S'Y'
sg14
I9
sa(dp3468
g17
(lp3469
S'k'
asg38
I353
sS'.thisRepN'
p3470
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3471
I429
sS'.thisN'
p3472
I429
sS'.thisIndex'
p3473
g43
(g45
S'a\x01\x00\x00'
tRp3474
sg15
(lp3475
S'k'
asg16
S'Y'
sg14
I9
sa(dp3476
g17
(lp3477
S'k'
asg38
I504
sS'.thisRepN'
p3478
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3479
I430
sS'.thisN'
p3480
I430
sS'.thisIndex'
p3481
g43
(g45
S'\xf8\x01\x00\x00'
tRp3482
sg15
(lp3483
S'k'
asg16
S'Y'
sg14
I9
sa(dp3484
g17
(lp3485
S'k'
asg38
I431
sS'.thisRepN'
p3486
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3487
I431
sS'.thisN'
p3488
I431
sS'.thisIndex'
p3489
g43
(g45
S'\xaf\x01\x00\x00'
tRp3490
sg15
(lp3491
S'd'
asg16
S'N'
sg14
I9
sa(dp3492
g17
(lp3493
S'd'
asg38
I88
sS'.thisRepN'
p3494
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3495
I432
sS'.thisN'
p3496
I432
sS'.thisIndex'
p3497
g43
(g45
S'X\x00\x00\x00'
tRp3498
sg15
(lp3499
S'd'
asg16
S'Y'
sg14
I9
sa(dp3500
g17
(lp3501
S'k'
asg38
I566
sS'.thisRepN'
p3502
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3503
I433
sS'.thisN'
p3504
I433
sS'.thisIndex'
p3505
g43
(g45
S'6\x02\x00\x00'
tRp3506
sg15
(lp3507
S'k'
asg16
S'Y'
sg14
I9
sa(dp3508
g17
(lp3509
S'k'
asg38
I420
sS'.thisRepN'
p3510
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3511
I434
sS'.thisN'
p3512
I434
sS'.thisIndex'
p3513
g43
(g45
S'\xa4\x01\x00\x00'
tRp3514
sg15
(lp3515
S'k'
asg16
S'Y'
sg14
I9
sa(dp3516
g17
(lp3517
S'k'
asg38
I376
sS'.thisRepN'
p3518
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3519
I435
sS'.thisN'
p3520
I435
sS'.thisIndex'
p3521
g43
(g45
S'x\x01\x00\x00'
tRp3522
sg15
(lp3523
S'k'
asg16
S'Y'
sg14
I9
sa(dp3524
g17
(lp3525
S'd'
asg38
I246
sS'.thisRepN'
p3526
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3527
I436
sS'.thisN'
p3528
I436
sS'.thisIndex'
p3529
g43
(g45
S'\xf6\x00\x00\x00'
tRp3530
sg15
(lp3531
S'd'
asg16
S'Y'
sg14
I9
sa(dp3532
g17
(lp3533
S'd'
asg38
I198
sS'.thisRepN'
p3534
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3535
I437
sS'.thisN'
p3536
I437
sS'.thisIndex'
p3537
g43
(g45
S'\xc6\x00\x00\x00'
tRp3538
sg15
(lp3539
S'd'
asg16
S'Y'
sg14
I9
sa(dp3540
g17
(lp3541
S'd'
asg38
I72
sS'.thisRepN'
p3542
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3543
I438
sS'.thisN'
p3544
I438
sS'.thisIndex'
p3545
g43
(g45
S'H\x00\x00\x00'
tRp3546
sg15
(lp3547
S'd'
asg16
S'Y'
sg14
I9
sa(dp3548
g17
(lp3549
S'd'
asg38
I15
sS'.thisRepN'
p3550
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3551
I439
sS'.thisN'
p3552
I439
sS'.thisIndex'
p3553
g43
(g45
S'\x0f\x00\x00\x00'
tRp3554
sg15
(lp3555
S'd'
asg16
S'Y'
sg14
I9
sa(dp3556
g17
(lp3557
S'd'
asg38
I27
sS'.thisRepN'
p3558
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3559
I440
sS'.thisN'
p3560
I440
sS'.thisIndex'
p3561
g43
(g45
S'\x1b\x00\x00\x00'
tRp3562
sg15
(lp3563
S'd'
asg16
S'Y'
sg14
I9
sa(dp3564
g17
(lp3565
S'k'
asg38
I538
sS'.thisRepN'
p3566
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3567
I441
sS'.thisN'
p3568
I441
sS'.thisIndex'
p3569
g43
(g45
S'\x1a\x02\x00\x00'
tRp3570
sg15
(lp3571
S'k'
asg16
S'Y'
sg14
I9
sa(dp3572
g17
(lp3573
S'd'
asg38
I280
sS'.thisRepN'
p3574
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3575
I442
sS'.thisN'
p3576
I442
sS'.thisIndex'
p3577
g43
(g45
S'\x18\x01\x00\x00'
tRp3578
sg15
(lp3579
S'd'
asg16
S'Y'
sg14
I9
sa(dp3580
g17
(lp3581
S'k'
asg38
I442
sS'.thisRepN'
p3582
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3583
I443
sS'.thisN'
p3584
I443
sS'.thisIndex'
p3585
g43
(g45
S'\xba\x01\x00\x00'
tRp3586
sg15
(lp3587
S'k'
asg16
S'Y'
sg14
I9
sa(dp3588
g17
(lp3589
S'k'
asg38
I453
sS'.thisRepN'
p3590
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3591
I444
sS'.thisN'
p3592
I444
sS'.thisIndex'
p3593
g43
(g45
S'\xc5\x01\x00\x00'
tRp3594
sg15
(lp3595
S'k'
asg16
S'Y'
sg14
I9
sa(dp3596
g17
(lp3597
S'd'
asg38
I92
sS'.thisRepN'
p3598
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3599
I445
sS'.thisN'
p3600
I445
sS'.thisIndex'
p3601
g43
(g45
S'\\\x00\x00\x00'
tRp3602
sg15
(lp3603
S'd'
asg16
S'Y'
sg14
I9
sa(dp3604
g17
(lp3605
S'k'
asg38
I475
sS'.thisRepN'
p3606
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3607
I446
sS'.thisN'
p3608
I446
sS'.thisIndex'
p3609
g43
(g45
S'\xdb\x01\x00\x00'
tRp3610
sg15
(lp3611
S'k'
asg16
S'Y'
sg14
I9
sa(dp3612
g17
(lp3613
S'k'
asg38
I346
sS'.thisRepN'
p3614
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3615
I447
sS'.thisN'
p3616
I447
sS'.thisIndex'
p3617
g43
(g45
S'Z\x01\x00\x00'
tRp3618
sg15
(lp3619
S'k'
asg16
S'Y'
sg14
I9
sa(dp3620
g17
(lp3621
S'k'
asg38
I590
sS'.thisRepN'
p3622
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3623
I448
sS'.thisN'
p3624
I448
sS'.thisIndex'
p3625
g43
(g45
S'N\x02\x00\x00'
tRp3626
sg15
(lp3627
S'k'
asg16
S'Y'
sg14
I9
sa(dp3628
g17
(lp3629
S'd'
asg38
I267
sS'.thisRepN'
p3630
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3631
I449
sS'.thisN'
p3632
I449
sS'.thisIndex'
p3633
g43
(g45
S'\x0b\x01\x00\x00'
tRp3634
sg15
(lp3635
S'd'
asg16
S'Y'
sg14
I9
sa(dp3636
g17
(lp3637
S'd'
asg38
I30
sS'.thisRepN'
p3638
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3639
I450
sS'.thisN'
p3640
I450
sS'.thisIndex'
p3641
g43
(g45
S'\x1e\x00\x00\x00'
tRp3642
sg15
(lp3643
S'd'
asg16
S'Y'
sg14
I10
sa(dp3644
g17
(lp3645
S'd'
asg38
I18
sS'.thisRepN'
p3646
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3647
I451
sS'.thisN'
p3648
I451
sS'.thisIndex'
p3649
g43
(g45
S'\x12\x00\x00\x00'
tRp3650
sg15
(lp3651
S'k'
asg16
S'N'
sg14
I10
sa(dp3652
g17
(lp3653
S'k'
asg38
I437
sS'.thisRepN'
p3654
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3655
I452
sS'.thisN'
p3656
I452
sS'.thisIndex'
p3657
g43
(g45
S'\xb5\x01\x00\x00'
tRp3658
sg15
(lp3659
S'k'
asg16
S'Y'
sg14
I10
sa(dp3660
g17
(lp3661
S'd'
asg38
I210
sS'.thisRepN'
p3662
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3663
I453
sS'.thisN'
p3664
I453
sS'.thisIndex'
p3665
g43
(g45
S'\xd2\x00\x00\x00'
tRp3666
sg15
(lp3667
S'd'
asg16
S'Y'
sg14
I10
sa(dp3668
g17
(lp3669
S'k'
asg38
I365
sS'.thisRepN'
p3670
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3671
I454
sS'.thisN'
p3672
I454
sS'.thisIndex'
p3673
g43
(g45
S'm\x01\x00\x00'
tRp3674
sg15
(lp3675
S'k'
asg16
S'Y'
sg14
I10
sa(dp3676
g17
(lp3677
S'k'
asg38
I449
sS'.thisRepN'
p3678
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3679
I455
sS'.thisN'
p3680
I455
sS'.thisIndex'
p3681
g43
(g45
S'\xc1\x01\x00\x00'
tRp3682
sg15
(lp3683
S'k'
asg16
S'Y'
sg14
I10
sa(dp3684
g17
(lp3685
S'k'
asg38
I302
sS'.thisRepN'
p3686
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3687
I456
sS'.thisN'
p3688
I456
sS'.thisIndex'
p3689
g43
(g45
S'.\x01\x00\x00'
tRp3690
sg15
(lp3691
S'k'
asg16
S'Y'
sg14
I10
sa(dp3692
g17
(lp3693
S'k'
asg38
I430
sS'.thisRepN'
p3694
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3695
I457
sS'.thisN'
p3696
I457
sS'.thisIndex'
p3697
g43
(g45
S'\xae\x01\x00\x00'
tRp3698
sg15
(lp3699
S'k'
asg16
S'Y'
sg14
I10
sa(dp3700
g17
(lp3701
S'd'
asg38
I187
sS'.thisRepN'
p3702
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3703
I458
sS'.thisN'
p3704
I458
sS'.thisIndex'
p3705
g43
(g45
S'\xbb\x00\x00\x00'
tRp3706
sg15
(lp3707
S'k'
asg16
S'N'
sg14
I10
sa(dp3708
g17
(lp3709
S'd'
asg38
I117
sS'.thisRepN'
p3710
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3711
I459
sS'.thisN'
p3712
I459
sS'.thisIndex'
p3713
g43
(g45
S'u\x00\x00\x00'
tRp3714
sg15
(lp3715
S'd'
asg16
S'Y'
sg14
I10
sa(dp3716
g17
(lp3717
S'd'
asg38
I158
sS'.thisRepN'
p3718
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3719
I460
sS'.thisN'
p3720
I460
sS'.thisIndex'
p3721
g43
(g45
S'\x9e\x00\x00\x00'
tRp3722
sg15
(lp3723
S'd'
asg16
S'Y'
sg14
I10
sa(dp3724
g17
(lp3725
S'k'
asg38
I483
sS'.thisRepN'
p3726
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3727
I461
sS'.thisN'
p3728
I461
sS'.thisIndex'
p3729
g43
(g45
S'\xe3\x01\x00\x00'
tRp3730
sg15
(lp3731
S'k'
asg16
S'Y'
sg14
I10
sa(dp3732
g17
(lp3733
S'k'
asg38
I428
sS'.thisRepN'
p3734
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3735
I462
sS'.thisN'
p3736
I462
sS'.thisIndex'
p3737
g43
(g45
S'\xac\x01\x00\x00'
tRp3738
sg15
(lp3739
S'k'
asg16
S'Y'
sg14
I10
sa(dp3740
g17
(lp3741
S'k'
asg38
I496
sS'.thisRepN'
p3742
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3743
I463
sS'.thisN'
p3744
I463
sS'.thisIndex'
p3745
g43
(g45
S'\xf0\x01\x00\x00'
tRp3746
sg15
(lp3747
S'k'
asg16
S'Y'
sg14
I10
sa(dp3748
g17
(lp3749
S'k'
asg38
I458
sS'.thisRepN'
p3750
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3751
I464
sS'.thisN'
p3752
I464
sS'.thisIndex'
p3753
g43
(g45
S'\xca\x01\x00\x00'
tRp3754
sg15
(lp3755
S'k'
asg16
S'Y'
sg14
I10
sa(dp3756
g17
(lp3757
S'd'
asg38
I192
sS'.thisRepN'
p3758
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3759
I465
sS'.thisN'
p3760
I465
sS'.thisIndex'
p3761
g43
(g45
S'\xc0\x00\x00\x00'
tRp3762
sg15
(lp3763
S'd'
asg16
S'Y'
sg14
I10
sa(dp3764
g17
(lp3765
S'd'
asg38
I33
sS'.thisRepN'
p3766
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3767
I466
sS'.thisN'
p3768
I466
sS'.thisIndex'
p3769
g43
(g45
S'!\x00\x00\x00'
tRp3770
sg15
(lp3771
S'd'
asg16
S'Y'
sg14
I10
sa(dp3772
g17
(lp3773
S'd'
asg38
I77
sS'.thisRepN'
p3774
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3775
I467
sS'.thisN'
p3776
I467
sS'.thisIndex'
p3777
g43
(g45
S'M\x00\x00\x00'
tRp3778
sg15
(lp3779
S'd'
asg16
S'Y'
sg14
I10
sa(dp3780
g17
(lp3781
S'k'
asg38
I533
sS'.thisRepN'
p3782
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3783
I468
sS'.thisN'
p3784
I468
sS'.thisIndex'
p3785
g43
(g45
S'\x15\x02\x00\x00'
tRp3786
sg15
(lp3787
S'k'
asg16
S'Y'
sg14
I10
sa(dp3788
g17
(lp3789
S'k'
asg38
I510
sS'.thisRepN'
p3790
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3791
I469
sS'.thisN'
p3792
I469
sS'.thisIndex'
p3793
g43
(g45
S'\xfe\x01\x00\x00'
tRp3794
sg15
(lp3795
S'k'
asg16
S'Y'
sg14
I10
sa(dp3796
g17
(lp3797
S'k'
asg38
I494
sS'.thisRepN'
p3798
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3799
I470
sS'.thisN'
p3800
I470
sS'.thisIndex'
p3801
g43
(g45
S'\xee\x01\x00\x00'
tRp3802
sg15
(lp3803
S'k'
asg16
S'Y'
sg14
I10
sa(dp3804
g17
(lp3805
S'k'
asg38
I400
sS'.thisRepN'
p3806
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3807
I471
sS'.thisN'
p3808
I471
sS'.thisIndex'
p3809
g43
(g45
S'\x90\x01\x00\x00'
tRp3810
sg15
(lp3811
S'k'
asg16
S'Y'
sg14
I10
sa(dp3812
g17
(lp3813
S'd'
asg38
I79
sS'.thisRepN'
p3814
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3815
I472
sS'.thisN'
p3816
I472
sS'.thisIndex'
p3817
g43
(g45
S'O\x00\x00\x00'
tRp3818
sg15
(lp3819
S'k'
asg16
S'N'
sg14
I10
sa(dp3820
g17
(lp3821
S'k'
asg38
I398
sS'.thisRepN'
p3822
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3823
I473
sS'.thisN'
p3824
I473
sS'.thisIndex'
p3825
g43
(g45
S'\x8e\x01\x00\x00'
tRp3826
sg15
(lp3827
S'k'
asg16
S'Y'
sg14
I10
sa(dp3828
g17
(lp3829
S'k'
asg38
I439
sS'.thisRepN'
p3830
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3831
I474
sS'.thisN'
p3832
I474
sS'.thisIndex'
p3833
g43
(g45
S'\xb7\x01\x00\x00'
tRp3834
sg15
(lp3835
S'k'
asg16
S'Y'
sg14
I10
sa(dp3836
g17
(lp3837
S'd'
asg38
I60
sS'.thisRepN'
p3838
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3839
I475
sS'.thisN'
p3840
I475
sS'.thisIndex'
p3841
g43
(g45
S'<\x00\x00\x00'
tRp3842
sg15
(lp3843
S'k'
asg16
S'N'
sg14
I10
sa(dp3844
g17
(lp3845
S'd'
asg38
I114
sS'.thisRepN'
p3846
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3847
I476
sS'.thisN'
p3848
I476
sS'.thisIndex'
p3849
g43
(g45
S'r\x00\x00\x00'
tRp3850
sg15
(lp3851
S'd'
asg16
S'Y'
sg14
I10
sa(dp3852
g17
(lp3853
S'k'
asg38
I529
sS'.thisRepN'
p3854
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3855
I477
sS'.thisN'
p3856
I477
sS'.thisIndex'
p3857
g43
(g45
S'\x11\x02\x00\x00'
tRp3858
sg15
(lp3859
S'k'
asg16
S'Y'
sg14
I10
sa(dp3860
g17
(lp3861
S'd'
asg38
I104
sS'.thisRepN'
p3862
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3863
I478
sS'.thisN'
p3864
I478
sS'.thisIndex'
p3865
g43
(g45
S'h\x00\x00\x00'
tRp3866
sg15
(lp3867
S'd'
asg16
S'Y'
sg14
I10
sa(dp3868
g17
(lp3869
S'k'
asg38
I305
sS'.thisRepN'
p3870
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3871
I479
sS'.thisN'
p3872
I479
sS'.thisIndex'
p3873
g43
(g45
S'1\x01\x00\x00'
tRp3874
sg15
(lp3875
S'k'
asg16
S'Y'
sg14
I10
sa(dp3876
g17
(lp3877
S'k'
asg38
I512
sS'.thisRepN'
p3878
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3879
I480
sS'.thisN'
p3880
I480
sS'.thisIndex'
p3881
g43
(g45
S'\x00\x02\x00\x00'
tRp3882
sg15
(lp3883
S'k'
asg16
S'Y'
sg14
I10
sa(dp3884
g17
(lp3885
S'd'
asg38
I124
sS'.thisRepN'
p3886
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3887
I481
sS'.thisN'
p3888
I481
sS'.thisIndex'
p3889
g43
(g45
S'|\x00\x00\x00'
tRp3890
sg15
(lp3891
S'k'
asg16
S'N'
sg14
I10
sa(dp3892
g17
(lp3893
S'd'
asg38
I208
sS'.thisRepN'
p3894
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3895
I482
sS'.thisN'
p3896
I482
sS'.thisIndex'
p3897
g43
(g45
S'\xd0\x00\x00\x00'
tRp3898
sg15
(lp3899
S'd'
asg16
S'Y'
sg14
I10
sa(dp3900
g17
(lp3901
S'k'
asg38
I388
sS'.thisRepN'
p3902
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3903
I483
sS'.thisN'
p3904
I483
sS'.thisIndex'
p3905
g43
(g45
S'\x84\x01\x00\x00'
tRp3906
sg15
(lp3907
S'k'
asg16
S'Y'
sg14
I10
sa(dp3908
g17
(lp3909
S'd'
asg38
I162
sS'.thisRepN'
p3910
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3911
I484
sS'.thisN'
p3912
I484
sS'.thisIndex'
p3913
g43
(g45
S'\xa2\x00\x00\x00'
tRp3914
sg15
(lp3915
S'd'
asg16
S'Y'
sg14
I10
sa(dp3916
g17
(lp3917
S'd'
asg38
I228
sS'.thisRepN'
p3918
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3919
I485
sS'.thisN'
p3920
I485
sS'.thisIndex'
p3921
g43
(g45
S'\xe4\x00\x00\x00'
tRp3922
sg15
(lp3923
S'd'
asg16
S'Y'
sg14
I10
sa(dp3924
g17
(lp3925
S'k'
asg38
I519
sS'.thisRepN'
p3926
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3927
I486
sS'.thisN'
p3928
I486
sS'.thisIndex'
p3929
g43
(g45
S'\x07\x02\x00\x00'
tRp3930
sg15
(lp3931
S'k'
asg16
S'Y'
sg14
I10
sa(dp3932
g17
(lp3933
S'd'
asg38
I108
sS'.thisRepN'
p3934
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3935
I487
sS'.thisN'
p3936
I487
sS'.thisIndex'
p3937
g43
(g45
S'l\x00\x00\x00'
tRp3938
sg15
(lp3939
S'd'
asg16
S'Y'
sg14
I10
sa(dp3940
g17
(lp3941
S'k'
asg38
I498
sS'.thisRepN'
p3942
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3943
I488
sS'.thisN'
p3944
I488
sS'.thisIndex'
p3945
g43
(g45
S'\xf2\x01\x00\x00'
tRp3946
sg15
(lp3947
S'k'
asg16
S'Y'
sg14
I10
sa(dp3948
g17
(lp3949
S'd'
asg38
I240
sS'.thisRepN'
p3950
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3951
I489
sS'.thisN'
p3952
I489
sS'.thisIndex'
p3953
g43
(g45
S'\xf0\x00\x00\x00'
tRp3954
sg15
(lp3955
S'd'
asg16
S'Y'
sg14
I10
sa(dp3956
g17
(lp3957
S'd'
asg38
I180
sS'.thisRepN'
p3958
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3959
I490
sS'.thisN'
p3960
I490
sS'.thisIndex'
p3961
g43
(g45
S'\xb4\x00\x00\x00'
tRp3962
sg15
(lp3963
S'd'
asg16
S'Y'
sg14
I10
sa(dp3964
g17
(lp3965
S'd'
asg38
I25
sS'.thisRepN'
p3966
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3967
I491
sS'.thisN'
p3968
I491
sS'.thisIndex'
p3969
g43
(g45
S'\x19\x00\x00\x00'
tRp3970
sg15
(lp3971
S'd'
asg16
S'Y'
sg14
I10
sa(dp3972
g17
(lp3973
S'd'
asg38
I69
sS'.thisRepN'
p3974
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3975
I492
sS'.thisN'
p3976
I492
sS'.thisIndex'
p3977
g43
(g45
S'E\x00\x00\x00'
tRp3978
sg15
(lp3979
S'd'
asg16
S'Y'
sg14
I10
sa(dp3980
g17
(lp3981
S'k'
asg38
I416
sS'.thisRepN'
p3982
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3983
I493
sS'.thisN'
p3984
I493
sS'.thisIndex'
p3985
g43
(g45
S'\xa0\x01\x00\x00'
tRp3986
sg15
(lp3987
S'k'
asg16
S'Y'
sg14
I10
sa(dp3988
g17
(lp3989
S'k'
asg38
I467
sS'.thisRepN'
p3990
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3991
I494
sS'.thisN'
p3992
I494
sS'.thisIndex'
p3993
g43
(g45
S'\xd3\x01\x00\x00'
tRp3994
sg15
(lp3995
S'k'
asg16
S'Y'
sg14
I10
sa(dp3996
g17
(lp3997
S'k'
asg38
I455
sS'.thisRepN'
p3998
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p3999
I495
sS'.thisN'
p4000
I495
sS'.thisIndex'
p4001
g43
(g45
S'\xc7\x01\x00\x00'
tRp4002
sg15
(lp4003
S'k'
asg16
S'Y'
sg14
I10
sa(dp4004
g17
(lp4005
S'd'
asg38
I64
sS'.thisRepN'
p4006
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p4007
I496
sS'.thisN'
p4008
I496
sS'.thisIndex'
p4009
g43
(g45
S'@\x00\x00\x00'
tRp4010
sg15
(lp4011
S'd'
asg16
S'Y'
sg14
I10
sa(dp4012
g17
(lp4013
S'k'
asg38
I559
sS'.thisRepN'
p4014
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p4015
I497
sS'.thisN'
p4016
I497
sS'.thisIndex'
p4017
g43
(g45
S'/\x02\x00\x00'
tRp4018
sg15
(lp4019
S'd'
asg16
S'N'
sg14
I10
sa(dp4020
g17
(lp4021
S'k'
asg38
I417
sS'.thisRepN'
p4022
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p4023
I498
sS'.thisN'
p4024
I498
sS'.thisIndex'
p4025
g43
(g45
S'\xa1\x01\x00\x00'
tRp4026
sg15
(lp4027
S'k'
asg16
S'Y'
sg14
I10
sa(dp4028
g17
(lp4029
S'd'
asg38
I209
sS'.thisRepN'
p4030
I0
sg24
VF
sg25
g26
sS'.thisTrialN'
p4031
I499
sS'.thisN'
p4032
I499
sS'.thisIndex'
p4033
g43
(g45
S'\xd1\x00\x00\x00'
tRp4034
sg15
(lp4035
S'd'
asg16
S'Y'
sg14
I10
sa(dp4036
g17
(lp4037
S'd'
asg38
I102
sS'.thisRepN'
p4038
I0
sg19
S'Y'
sg20
S'Y'
sg18
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4039
I500
sS'.thisN'
p4040
I500
sS'.thisIndex'
p4041
g43
(g45
S'f\x00\x00\x00'
tRp4042
sg15
(lp4043
S'k'
asg16
S'Y'
sg14
I11
sa(dp4044
g17
(lp4045
S'd'
asg38
I268
sS'.thisRepN'
p4046
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4047
I501
sS'.thisN'
p4048
I501
sS'.thisIndex'
p4049
g43
(g45
S'\x0c\x01\x00\x00'
tRp4050
sg15
(lp4051
S'k'
asg16
S'Y'
sg14
I11
sa(dp4052
g17
(lp4053
S'k'
asg38
I383
sS'.thisRepN'
p4054
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4055
I502
sS'.thisN'
p4056
I502
sS'.thisIndex'
p4057
g43
(g45
S'\x7f\x01\x00\x00'
tRp4058
sg15
(lp4059
S'd'
asg16
S'Y'
sg14
I11
sa(dp4060
g17
(lp4061
S'k'
asg38
I501
sS'.thisRepN'
p4062
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4063
I503
sS'.thisN'
p4064
I503
sS'.thisIndex'
p4065
g43
(g45
S'\xf5\x01\x00\x00'
tRp4066
sg15
(lp4067
S'd'
asg16
S'Y'
sg14
I11
sa(dp4068
g17
(lp4069
S'd'
asg38
I154
sS'.thisRepN'
p4070
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4071
I504
sS'.thisN'
p4072
I504
sS'.thisIndex'
p4073
g43
(g45
S'\x9a\x00\x00\x00'
tRp4074
sg15
(lp4075
S'k'
asg16
S'Y'
sg14
I11
sa(dp4076
g17
(lp4077
S'd'
asg38
I21
sS'.thisRepN'
p4078
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4079
I505
sS'.thisN'
p4080
I505
sS'.thisIndex'
p4081
g43
(g45
S'\x15\x00\x00\x00'
tRp4082
sg15
(lp4083
S'k'
asg16
S'Y'
sg14
I11
sa(dp4084
g17
(lp4085
S'k'
asg38
I596
sS'.thisRepN'
p4086
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4087
I506
sS'.thisN'
p4088
I506
sS'.thisIndex'
p4089
g43
(g45
S'T\x02\x00\x00'
tRp4090
sg15
(lp4091
S'd'
asg16
S'Y'
sg14
I11
sa(dp4092
g17
(lp4093
S'd'
asg38
I142
sS'.thisRepN'
p4094
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4095
I507
sS'.thisN'
p4096
I507
sS'.thisIndex'
p4097
g43
(g45
S'\x8e\x00\x00\x00'
tRp4098
sg15
(lp4099
S'k'
asg16
S'Y'
sg14
I11
sa(dp4100
g17
(lp4101
S'd'
asg38
I100
sS'.thisRepN'
p4102
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4103
I508
sS'.thisN'
p4104
I508
sS'.thisIndex'
p4105
g43
(g45
S'd\x00\x00\x00'
tRp4106
sg15
(lp4107
S'k'
asg16
S'Y'
sg14
I11
sa(dp4108
g17
(lp4109
S'd'
asg38
I272
sS'.thisRepN'
p4110
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4111
I509
sS'.thisN'
p4112
I509
sS'.thisIndex'
p4113
g43
(g45
S'\x10\x01\x00\x00'
tRp4114
sg15
(lp4115
S'k'
asg16
S'Y'
sg14
I11
sa(dp4116
g17
(lp4117
S'k'
asg38
I349
sS'.thisRepN'
p4118
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4119
I510
sS'.thisN'
p4120
I510
sS'.thisIndex'
p4121
g43
(g45
S']\x01\x00\x00'
tRp4122
sg15
(lp4123
S'd'
asg16
S'Y'
sg14
I11
sa(dp4124
g17
(lp4125
S'k'
asg38
I338
sS'.thisRepN'
p4126
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4127
I511
sS'.thisN'
p4128
I511
sS'.thisIndex'
p4129
g43
(g45
S'R\x01\x00\x00'
tRp4130
sg15
(lp4131
S'd'
asg16
S'Y'
sg14
I11
sa(dp4132
g17
(lp4133
S'k'
asg38
I441
sS'.thisRepN'
p4134
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4135
I512
sS'.thisN'
p4136
I512
sS'.thisIndex'
p4137
g43
(g45
S'\xb9\x01\x00\x00'
tRp4138
sg15
(lp4139
S'd'
asg16
S'Y'
sg14
I11
sa(dp4140
g17
(lp4141
S'k'
asg38
I358
sS'.thisRepN'
p4142
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4143
I513
sS'.thisN'
p4144
I513
sS'.thisIndex'
p4145
g43
(g45
S'f\x01\x00\x00'
tRp4146
sg15
(lp4147
S'd'
asg16
S'Y'
sg14
I11
sa(dp4148
g17
(lp4149
S'k'
asg38
I333
sS'.thisRepN'
p4150
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4151
I514
sS'.thisN'
p4152
I514
sS'.thisIndex'
p4153
g43
(g45
S'M\x01\x00\x00'
tRp4154
sg15
(lp4155
S'd'
asg16
S'Y'
sg14
I11
sa(dp4156
g17
(lp4157
S'd'
asg38
I132
sS'.thisRepN'
p4158
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4159
I515
sS'.thisN'
p4160
I515
sS'.thisIndex'
p4161
g43
(g45
S'\x84\x00\x00\x00'
tRp4162
sg15
(lp4163
S'k'
asg16
S'Y'
sg14
I11
sa(dp4164
g17
(lp4165
S'd'
asg38
I206
sS'.thisRepN'
p4166
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4167
I516
sS'.thisN'
p4168
I516
sS'.thisIndex'
p4169
g43
(g45
S'\xce\x00\x00\x00'
tRp4170
sg15
(lp4171
S'k'
asg16
S'Y'
sg14
I11
sa(dp4172
g17
(lp4173
S'd'
asg38
I80
sS'.thisRepN'
p4174
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4175
I517
sS'.thisN'
p4176
I517
sS'.thisIndex'
p4177
g43
(g45
S'P\x00\x00\x00'
tRp4178
sg15
(lp4179
S'k'
asg16
S'Y'
sg14
I11
sa(dp4180
g17
(lp4181
S'k'
asg38
I502
sS'.thisRepN'
p4182
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4183
I518
sS'.thisN'
p4184
I518
sS'.thisIndex'
p4185
g43
(g45
S'\xf6\x01\x00\x00'
tRp4186
sg15
(lp4187
S'd'
asg16
S'Y'
sg14
I11
sa(dp4188
g17
(lp4189
S'k'
asg38
I480
sS'.thisRepN'
p4190
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4191
I519
sS'.thisN'
p4192
I519
sS'.thisIndex'
p4193
g43
(g45
S'\xe0\x01\x00\x00'
tRp4194
sg15
(lp4195
S'd'
asg16
S'Y'
sg14
I11
sa(dp4196
g17
(lp4197
S'k'
asg38
I476
sS'.thisRepN'
p4198
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4199
I520
sS'.thisN'
p4200
I520
sS'.thisIndex'
p4201
g43
(g45
S'\xdc\x01\x00\x00'
tRp4202
sg15
(lp4203
S'd'
asg16
S'Y'
sg14
I11
sa(dp4204
g17
(lp4205
S'd'
asg38
I201
sS'.thisRepN'
p4206
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4207
I521
sS'.thisN'
p4208
I521
sS'.thisIndex'
p4209
g43
(g45
S'\xc9\x00\x00\x00'
tRp4210
sg15
(lp4211
S'k'
asg16
S'Y'
sg14
I11
sa(dp4212
g17
(lp4213
S'k'
asg38
I359
sS'.thisRepN'
p4214
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4215
I522
sS'.thisN'
p4216
I522
sS'.thisIndex'
p4217
g43
(g45
S'g\x01\x00\x00'
tRp4218
sg15
(lp4219
S'd'
asg16
S'Y'
sg14
I11
sa(dp4220
g17
(lp4221
S'd'
asg38
I8
sS'.thisRepN'
p4222
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4223
I523
sS'.thisN'
p4224
I523
sS'.thisIndex'
p4225
g43
(g45
S'\x08\x00\x00\x00'
tRp4226
sg15
(lp4227
S'k'
asg16
S'Y'
sg14
I11
sa(dp4228
g17
(lp4229
S'd'
asg38
I236
sS'.thisRepN'
p4230
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4231
I524
sS'.thisN'
p4232
I524
sS'.thisIndex'
p4233
g43
(g45
S'\xec\x00\x00\x00'
tRp4234
sg15
(lp4235
S'k'
asg16
S'Y'
sg14
I11
sa(dp4236
g17
(lp4237
S'd'
asg38
I279
sS'.thisRepN'
p4238
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4239
I525
sS'.thisN'
p4240
I525
sS'.thisIndex'
p4241
g43
(g45
S'\x17\x01\x00\x00'
tRp4242
sg15
(lp4243
S'k'
asg16
S'Y'
sg14
I11
sa(dp4244
g17
(lp4245
S'd'
asg38
I174
sS'.thisRepN'
p4246
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4247
I526
sS'.thisN'
p4248
I526
sS'.thisIndex'
p4249
g43
(g45
S'\xae\x00\x00\x00'
tRp4250
sg15
(lp4251
S'k'
asg16
S'Y'
sg14
I11
sa(dp4252
g17
(lp4253
S'd'
asg38
I84
sS'.thisRepN'
p4254
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4255
I527
sS'.thisN'
p4256
I527
sS'.thisIndex'
p4257
g43
(g45
S'T\x00\x00\x00'
tRp4258
sg15
(lp4259
S'k'
asg16
S'Y'
sg14
I11
sa(dp4260
g17
(lp4261
S'd'
asg38
I241
sS'.thisRepN'
p4262
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4263
I528
sS'.thisN'
p4264
I528
sS'.thisIndex'
p4265
g43
(g45
S'\xf1\x00\x00\x00'
tRp4266
sg15
(lp4267
S'k'
asg16
S'Y'
sg14
I11
sa(dp4268
g17
(lp4269
S'd'
asg38
I234
sS'.thisRepN'
p4270
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4271
I529
sS'.thisN'
p4272
I529
sS'.thisIndex'
p4273
g43
(g45
S'\xea\x00\x00\x00'
tRp4274
sg15
(lp4275
S'k'
asg16
S'Y'
sg14
I11
sa(dp4276
g17
(lp4277
S'd'
asg38
I214
sS'.thisRepN'
p4278
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4279
I530
sS'.thisN'
p4280
I530
sS'.thisIndex'
p4281
g43
(g45
S'\xd6\x00\x00\x00'
tRp4282
sg15
(lp4283
S'k'
asg16
S'Y'
sg14
I11
sa(dp4284
g17
(lp4285
S'k'
asg38
I401
sS'.thisRepN'
p4286
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4287
I531
sS'.thisN'
p4288
I531
sS'.thisIndex'
p4289
g43
(g45
S'\x91\x01\x00\x00'
tRp4290
sg15
(lp4291
S'd'
asg16
S'Y'
sg14
I11
sa(dp4292
g17
(lp4293
S'd'
asg38
I7
sS'.thisRepN'
p4294
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4295
I532
sS'.thisN'
p4296
I532
sS'.thisIndex'
p4297
g43
(g45
S'\x07\x00\x00\x00'
tRp4298
sg15
(lp4299
S'k'
asg16
S'Y'
sg14
I11
sa(dp4300
g17
(lp4301
S'k'
asg38
I384
sS'.thisRepN'
p4302
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4303
I533
sS'.thisN'
p4304
I533
sS'.thisIndex'
p4305
g43
(g45
S'\x80\x01\x00\x00'
tRp4306
sg15
(lp4307
S'd'
asg16
S'Y'
sg14
I11
sa(dp4308
g17
(lp4309
S'k'
asg38
I306
sS'.thisRepN'
p4310
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4311
I534
sS'.thisN'
p4312
I534
sS'.thisIndex'
p4313
g43
(g45
S'2\x01\x00\x00'
tRp4314
sg15
(lp4315
S'd'
asg16
S'Y'
sg14
I11
sa(dp4316
g17
(lp4317
S'd'
asg38
I172
sS'.thisRepN'
p4318
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4319
I535
sS'.thisN'
p4320
I535
sS'.thisIndex'
p4321
g43
(g45
S'\xac\x00\x00\x00'
tRp4322
sg15
(lp4323
S'k'
asg16
S'Y'
sg14
I11
sa(dp4324
g17
(lp4325
S'd'
asg38
I221
sS'.thisRepN'
p4326
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4327
I536
sS'.thisN'
p4328
I536
sS'.thisIndex'
p4329
g43
(g45
S'\xdd\x00\x00\x00'
tRp4330
sg15
(lp4331
S'k'
asg16
S'Y'
sg14
I11
sa(dp4332
g17
(lp4333
S'd'
asg38
I146
sS'.thisRepN'
p4334
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4335
I537
sS'.thisN'
p4336
I537
sS'.thisIndex'
p4337
g43
(g45
S'\x92\x00\x00\x00'
tRp4338
sg15
(lp4339
S'k'
asg16
S'Y'
sg14
I11
sa(dp4340
g17
(lp4341
S'k'
asg38
I508
sS'.thisRepN'
p4342
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4343
I538
sS'.thisN'
p4344
I538
sS'.thisIndex'
p4345
g43
(g45
S'\xfc\x01\x00\x00'
tRp4346
sg15
(lp4347
S'd'
asg16
S'Y'
sg14
I11
sa(dp4348
g17
(lp4349
S'd'
asg38
I143
sS'.thisRepN'
p4350
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4351
I539
sS'.thisN'
p4352
I539
sS'.thisIndex'
p4353
g43
(g45
S'\x8f\x00\x00\x00'
tRp4354
sg15
(lp4355
S'k'
asg16
S'Y'
sg14
I11
sa(dp4356
g17
(lp4357
S'k'
asg38
I419
sS'.thisRepN'
p4358
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4359
I540
sS'.thisN'
p4360
I540
sS'.thisIndex'
p4361
g43
(g45
S'\xa3\x01\x00\x00'
tRp4362
sg15
(lp4363
S'd'
asg16
S'Y'
sg14
I11
sa(dp4364
g17
(lp4365
S'k'
asg38
I568
sS'.thisRepN'
p4366
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4367
I541
sS'.thisN'
p4368
I541
sS'.thisIndex'
p4369
g43
(g45
S'8\x02\x00\x00'
tRp4370
sg15
(lp4371
S'd'
asg16
S'Y'
sg14
I11
sa(dp4372
g17
(lp4373
S'k'
asg38
I532
sS'.thisRepN'
p4374
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4375
I542
sS'.thisN'
p4376
I542
sS'.thisIndex'
p4377
g43
(g45
S'\x14\x02\x00\x00'
tRp4378
sg15
(lp4379
S'd'
asg16
S'Y'
sg14
I11
sa(dp4380
g17
(lp4381
S'k'
asg38
I303
sS'.thisRepN'
p4382
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4383
I543
sS'.thisN'
p4384
I543
sS'.thisIndex'
p4385
g43
(g45
S'/\x01\x00\x00'
tRp4386
sg15
(lp4387
S'd'
asg16
S'Y'
sg14
I11
sa(dp4388
g17
(lp4389
S'k'
asg38
I470
sS'.thisRepN'
p4390
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4391
I544
sS'.thisN'
p4392
I544
sS'.thisIndex'
p4393
g43
(g45
S'\xd6\x01\x00\x00'
tRp4394
sg15
(lp4395
S'd'
asg16
S'Y'
sg14
I11
sa(dp4396
g17
(lp4397
S'k'
asg38
I552
sS'.thisRepN'
p4398
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4399
I545
sS'.thisN'
p4400
I545
sS'.thisIndex'
p4401
g43
(g45
S'(\x02\x00\x00'
tRp4402
sg15
(lp4403
S'd'
asg16
S'Y'
sg14
I11
sa(dp4404
g17
(lp4405
S'd'
asg38
I195
sS'.thisRepN'
p4406
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4407
I546
sS'.thisN'
p4408
I546
sS'.thisIndex'
p4409
g43
(g45
S'\xc3\x00\x00\x00'
tRp4410
sg15
(lp4411
S'k'
asg16
S'Y'
sg14
I11
sa(dp4412
g17
(lp4413
S'k'
asg38
I456
sS'.thisRepN'
p4414
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4415
I547
sS'.thisN'
p4416
I547
sS'.thisIndex'
p4417
g43
(g45
S'\xc8\x01\x00\x00'
tRp4418
sg15
(lp4419
S'd'
asg16
S'Y'
sg14
I11
sa(dp4420
g17
(lp4421
S'k'
asg38
I537
sS'.thisRepN'
p4422
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4423
I548
sS'.thisN'
p4424
I548
sS'.thisIndex'
p4425
g43
(g45
S'\x19\x02\x00\x00'
tRp4426
sg15
(lp4427
S'k'
asg16
S'N'
sg14
I11
sa(dp4428
g17
(lp4429
S'd'
asg38
I202
sS'.thisRepN'
p4430
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4431
I549
sS'.thisN'
p4432
I549
sS'.thisIndex'
p4433
g43
(g45
S'\xca\x00\x00\x00'
tRp4434
sg15
(lp4435
S'k'
asg16
S'Y'
sg14
I11
sa(dp4436
g17
(lp4437
S'k'
asg38
I515
sS'.thisRepN'
p4438
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4439
I550
sS'.thisN'
p4440
I550
sS'.thisIndex'
p4441
g43
(g45
S'\x03\x02\x00\x00'
tRp4442
sg15
(lp4443
S'd'
asg16
S'Y'
sg14
I12
sa(dp4444
g17
(lp4445
S'k'
asg38
I462
sS'.thisRepN'
p4446
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4447
I551
sS'.thisN'
p4448
I551
sS'.thisIndex'
p4449
g43
(g45
S'\xce\x01\x00\x00'
tRp4450
sg15
(lp4451
S'd'
asg16
S'Y'
sg14
I12
sa(dp4452
g17
(lp4453
S'd'
asg38
I151
sS'.thisRepN'
p4454
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4455
I552
sS'.thisN'
p4456
I552
sS'.thisIndex'
p4457
g43
(g45
S'\x97\x00\x00\x00'
tRp4458
sg15
(lp4459
S'k'
asg16
S'Y'
sg14
I12
sa(dp4460
g17
(lp4461
S'k'
asg38
I469
sS'.thisRepN'
p4462
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4463
I553
sS'.thisN'
p4464
I553
sS'.thisIndex'
p4465
g43
(g45
S'\xd5\x01\x00\x00'
tRp4466
sg15
(lp4467
S'd'
asg16
S'Y'
sg14
I12
sa(dp4468
g17
(lp4469
S'd'
asg38
I135
sS'.thisRepN'
p4470
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4471
I554
sS'.thisN'
p4472
I554
sS'.thisIndex'
p4473
g43
(g45
S'\x87\x00\x00\x00'
tRp4474
sg15
(lp4475
S'k'
asg16
S'Y'
sg14
I12
sa(dp4476
g17
(lp4477
S'k'
asg38
I330
sS'.thisRepN'
p4478
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4479
I555
sS'.thisN'
p4480
I555
sS'.thisIndex'
p4481
g43
(g45
S'J\x01\x00\x00'
tRp4482
sg15
(lp4483
S'd'
asg16
S'Y'
sg14
I12
sa(dp4484
g17
(lp4485
S'd'
asg38
I118
sS'.thisRepN'
p4486
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4487
I556
sS'.thisN'
p4488
I556
sS'.thisIndex'
p4489
g43
(g45
S'v\x00\x00\x00'
tRp4490
sg15
(lp4491
S'k'
asg16
S'Y'
sg14
I12
sa(dp4492
g17
(lp4493
S'd'
asg38
I178
sS'.thisRepN'
p4494
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4495
I557
sS'.thisN'
p4496
I557
sS'.thisIndex'
p4497
g43
(g45
S'\xb2\x00\x00\x00'
tRp4498
sg15
(lp4499
S'k'
asg16
S'Y'
sg14
I12
sa(dp4500
g17
(lp4501
S'd'
asg38
I263
sS'.thisRepN'
p4502
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4503
I558
sS'.thisN'
p4504
I558
sS'.thisIndex'
p4505
g43
(g45
S'\x07\x01\x00\x00'
tRp4506
sg15
(lp4507
S'k'
asg16
S'Y'
sg14
I12
sa(dp4508
g17
(lp4509
S'd'
asg38
I39
sS'.thisRepN'
p4510
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4511
I559
sS'.thisN'
p4512
I559
sS'.thisIndex'
p4513
g43
(g45
S"'\x00\x00\x00"
tRp4514
sg15
(lp4515
S'k'
asg16
S'Y'
sg14
I12
sa(dp4516
g17
(lp4517
S'k'
asg38
I429
sS'.thisRepN'
p4518
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4519
I560
sS'.thisN'
p4520
I560
sS'.thisIndex'
p4521
g43
(g45
S'\xad\x01\x00\x00'
tRp4522
sg15
(lp4523
S'd'
asg16
S'Y'
sg14
I12
sa(dp4524
g17
(lp4525
S'k'
asg38
I424
sS'.thisRepN'
p4526
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4527
I561
sS'.thisN'
p4528
I561
sS'.thisIndex'
p4529
g43
(g45
S'\xa8\x01\x00\x00'
tRp4530
sg15
(lp4531
S'd'
asg16
S'Y'
sg14
I12
sa(dp4532
g17
(lp4533
S'k'
asg38
I351
sS'.thisRepN'
p4534
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4535
I562
sS'.thisN'
p4536
I562
sS'.thisIndex'
p4537
g43
(g45
S'_\x01\x00\x00'
tRp4538
sg15
(lp4539
S'd'
asg16
S'Y'
sg14
I12
sa(dp4540
g17
(lp4541
S'k'
asg38
I328
sS'.thisRepN'
p4542
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4543
I563
sS'.thisN'
p4544
I563
sS'.thisIndex'
p4545
g43
(g45
S'H\x01\x00\x00'
tRp4546
sg15
(lp4547
S'd'
asg16
S'Y'
sg14
I12
sa(dp4548
g17
(lp4549
S'd'
asg38
I63
sS'.thisRepN'
p4550
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4551
I564
sS'.thisN'
p4552
I564
sS'.thisIndex'
p4553
g43
(g45
S'?\x00\x00\x00'
tRp4554
sg15
(lp4555
S'k'
asg16
S'Y'
sg14
I12
sa(dp4556
g17
(lp4557
S'k'
asg38
I541
sS'.thisRepN'
p4558
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4559
I565
sS'.thisN'
p4560
I565
sS'.thisIndex'
p4561
g43
(g45
S'\x1d\x02\x00\x00'
tRp4562
sg15
(lp4563
S'd'
asg16
S'Y'
sg14
I12
sa(dp4564
g17
(lp4565
S'd'
asg38
I265
sS'.thisRepN'
p4566
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4567
I566
sS'.thisN'
p4568
I566
sS'.thisIndex'
p4569
g43
(g45
S'\t\x01\x00\x00'
tRp4570
sg15
(lp4571
S'k'
asg16
S'Y'
sg14
I12
sa(dp4572
g17
(lp4573
S'd'
asg38
I175
sS'.thisRepN'
p4574
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4575
I567
sS'.thisN'
p4576
I567
sS'.thisIndex'
p4577
g43
(g45
S'\xaf\x00\x00\x00'
tRp4578
sg15
(lp4579
S'k'
asg16
S'Y'
sg14
I12
sa(dp4580
g17
(lp4581
S'd'
asg38
I55
sS'.thisRepN'
p4582
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4583
I568
sS'.thisN'
p4584
I568
sS'.thisIndex'
p4585
g43
(g45
S'7\x00\x00\x00'
tRp4586
sg15
(lp4587
S'k'
asg16
S'Y'
sg14
I12
sa(dp4588
g17
(lp4589
S'k'
asg38
I567
sS'.thisRepN'
p4590
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4591
I569
sS'.thisN'
p4592
I569
sS'.thisIndex'
p4593
g43
(g45
S'7\x02\x00\x00'
tRp4594
sg15
(lp4595
S'd'
asg16
S'Y'
sg14
I12
sa(dp4596
g17
(lp4597
S'd'
asg38
I101
sS'.thisRepN'
p4598
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4599
I570
sS'.thisN'
p4600
I570
sS'.thisIndex'
p4601
g43
(g45
S'e\x00\x00\x00'
tRp4602
sg15
(lp4603
S'k'
asg16
S'Y'
sg14
I12
sa(dp4604
g17
(lp4605
S'd'
asg38
I52
sS'.thisRepN'
p4606
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4607
I571
sS'.thisN'
p4608
I571
sS'.thisIndex'
p4609
g43
(g45
S'4\x00\x00\x00'
tRp4610
sg15
(lp4611
S'k'
asg16
S'Y'
sg14
I12
sa(dp4612
g17
(lp4613
S'd'
asg38
I184
sS'.thisRepN'
p4614
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4615
I572
sS'.thisN'
p4616
I572
sS'.thisIndex'
p4617
g43
(g45
S'\xb8\x00\x00\x00'
tRp4618
sg15
(lp4619
S'k'
asg16
S'Y'
sg14
I12
sa(dp4620
g17
(lp4621
S'd'
asg38
I97
sS'.thisRepN'
p4622
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4623
I573
sS'.thisN'
p4624
I573
sS'.thisIndex'
p4625
g43
(g45
S'a\x00\x00\x00'
tRp4626
sg15
(lp4627
S'k'
asg16
S'Y'
sg14
I12
sa(dp4628
g17
(lp4629
S'k'
asg38
I348
sS'.thisRepN'
p4630
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4631
I574
sS'.thisN'
p4632
I574
sS'.thisIndex'
p4633
g43
(g45
S'\\\x01\x00\x00'
tRp4634
sg15
(lp4635
S'k'
asg16
S'N'
sg14
I12
sa(dp4636
g17
(lp4637
S'k'
asg38
I425
sS'.thisRepN'
p4638
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4639
I575
sS'.thisN'
p4640
I575
sS'.thisIndex'
p4641
g43
(g45
S'\xa9\x01\x00\x00'
tRp4642
sg15
(lp4643
S'd'
asg16
S'Y'
sg14
I12
sa(dp4644
g17
(lp4645
S'k'
asg38
I332
sS'.thisRepN'
p4646
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4647
I576
sS'.thisN'
p4648
I576
sS'.thisIndex'
p4649
g43
(g45
S'L\x01\x00\x00'
tRp4650
sg15
(lp4651
S'd'
asg16
S'Y'
sg14
I12
sa(dp4652
g17
(lp4653
S'd'
asg38
I93
sS'.thisRepN'
p4654
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4655
I577
sS'.thisN'
p4656
I577
sS'.thisIndex'
p4657
g43
(g45
S']\x00\x00\x00'
tRp4658
sg15
(lp4659
S'k'
asg16
S'Y'
sg14
I12
sa(dp4660
g17
(lp4661
S'k'
asg38
I490
sS'.thisRepN'
p4662
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4663
I578
sS'.thisN'
p4664
I578
sS'.thisIndex'
p4665
g43
(g45
S'\xea\x01\x00\x00'
tRp4666
sg15
(lp4667
S'd'
asg16
S'Y'
sg14
I12
sa(dp4668
g17
(lp4669
S'd'
asg38
I169
sS'.thisRepN'
p4670
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4671
I579
sS'.thisN'
p4672
I579
sS'.thisIndex'
p4673
g43
(g45
S'\xa9\x00\x00\x00'
tRp4674
sg15
(lp4675
S'k'
asg16
S'Y'
sg14
I12
sa(dp4676
g17
(lp4677
S'k'
asg38
I542
sS'.thisRepN'
p4678
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4679
I580
sS'.thisN'
p4680
I580
sS'.thisIndex'
p4681
g43
(g45
S'\x1e\x02\x00\x00'
tRp4682
sg15
(lp4683
S'd'
asg16
S'Y'
sg14
I12
sa(dp4684
g17
(lp4685
S'k'
asg38
I451
sS'.thisRepN'
p4686
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4687
I581
sS'.thisN'
p4688
I581
sS'.thisIndex'
p4689
g43
(g45
S'\xc3\x01\x00\x00'
tRp4690
sg15
(lp4691
S'k'
asg16
S'N'
sg14
I12
sa(dp4692
g17
(lp4693
S'd'
asg38
I31
sS'.thisRepN'
p4694
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4695
I582
sS'.thisN'
p4696
I582
sS'.thisIndex'
p4697
g43
(g45
S'\x1f\x00\x00\x00'
tRp4698
sg15
(lp4699
S'k'
asg16
S'Y'
sg14
I12
sa(dp4700
g17
(lp4701
S'k'
asg38
I584
sS'.thisRepN'
p4702
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4703
I583
sS'.thisN'
p4704
I583
sS'.thisIndex'
p4705
g43
(g45
S'H\x02\x00\x00'
tRp4706
sg15
(lp4707
S'd'
asg16
S'Y'
sg14
I12
sa(dp4708
g17
(lp4709
S'd'
asg38
I98
sS'.thisRepN'
p4710
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4711
I584
sS'.thisN'
p4712
I584
sS'.thisIndex'
p4713
g43
(g45
S'b\x00\x00\x00'
tRp4714
sg15
(lp4715
S'k'
asg16
S'Y'
sg14
I12
sa(dp4716
g17
(lp4717
S'd'
asg38
I133
sS'.thisRepN'
p4718
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4719
I585
sS'.thisN'
p4720
I585
sS'.thisIndex'
p4721
g43
(g45
S'\x85\x00\x00\x00'
tRp4722
sg15
(lp4723
S'k'
asg16
S'Y'
sg14
I12
sa(dp4724
g17
(lp4725
S'k'
asg38
I435
sS'.thisRepN'
p4726
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4727
I586
sS'.thisN'
p4728
I586
sS'.thisIndex'
p4729
g43
(g45
S'\xb3\x01\x00\x00'
tRp4730
sg15
(lp4731
S'd'
asg16
S'Y'
sg14
I12
sa(dp4732
g17
(lp4733
S'k'
asg38
I326
sS'.thisRepN'
p4734
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4735
I587
sS'.thisN'
p4736
I587
sS'.thisIndex'
p4737
g43
(g45
S'F\x01\x00\x00'
tRp4738
sg15
(lp4739
S'k'
asg16
S'N'
sg14
I12
sa(dp4740
g17
(lp4741
S'd'
asg38
I47
sS'.thisRepN'
p4742
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4743
I588
sS'.thisN'
p4744
I588
sS'.thisIndex'
p4745
g43
(g45
S'/\x00\x00\x00'
tRp4746
sg15
(lp4747
S'k'
asg16
S'Y'
sg14
I12
sa(dp4748
g17
(lp4749
S'd'
asg38
I243
sS'.thisRepN'
p4750
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4751
I589
sS'.thisN'
p4752
I589
sS'.thisIndex'
p4753
g43
(g45
S'\xf3\x00\x00\x00'
tRp4754
sg15
(lp4755
S'k'
asg16
S'Y'
sg14
I12
sa(dp4756
g17
(lp4757
S'd'
asg38
I105
sS'.thisRepN'
p4758
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4759
I590
sS'.thisN'
p4760
I590
sS'.thisIndex'
p4761
g43
(g45
S'i\x00\x00\x00'
tRp4762
sg15
(lp4763
S'k'
asg16
S'Y'
sg14
I12
sa(dp4764
g17
(lp4765
S'k'
asg38
I394
sS'.thisRepN'
p4766
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4767
I591
sS'.thisN'
p4768
I591
sS'.thisIndex'
p4769
g43
(g45
S'\x8a\x01\x00\x00'
tRp4770
sg15
(lp4771
S'd'
asg16
S'Y'
sg14
I12
sa(dp4772
g17
(lp4773
S'd'
asg38
I29
sS'.thisRepN'
p4774
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4775
I592
sS'.thisN'
p4776
I592
sS'.thisIndex'
p4777
g43
(g45
S'\x1d\x00\x00\x00'
tRp4778
sg15
(lp4779
S'k'
asg16
S'Y'
sg14
I12
sa(dp4780
g17
(lp4781
S'd'
asg38
I91
sS'.thisRepN'
p4782
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4783
I593
sS'.thisN'
p4784
I593
sS'.thisIndex'
p4785
g43
(g45
S'[\x00\x00\x00'
tRp4786
sg15
(lp4787
S'd'
asg16
S'N'
sg14
I12
sa(dp4788
g17
(lp4789
S'd'
asg38
I220
sS'.thisRepN'
p4790
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4791
I594
sS'.thisN'
p4792
I594
sS'.thisIndex'
p4793
g43
(g45
S'\xdc\x00\x00\x00'
tRp4794
sg15
(lp4795
S'k'
asg16
S'Y'
sg14
I12
sa(dp4796
g17
(lp4797
S'k'
asg38
I404
sS'.thisRepN'
p4798
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4799
I595
sS'.thisN'
p4800
I595
sS'.thisIndex'
p4801
g43
(g45
S'\x94\x01\x00\x00'
tRp4802
sg15
(lp4803
S'd'
asg16
S'Y'
sg14
I12
sa(dp4804
g17
(lp4805
S'd'
asg38
I61
sS'.thisRepN'
p4806
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4807
I596
sS'.thisN'
p4808
I596
sS'.thisIndex'
p4809
g43
(g45
S'=\x00\x00\x00'
tRp4810
sg15
(lp4811
S'k'
asg16
S'Y'
sg14
I12
sa(dp4812
g17
(lp4813
S'k'
asg38
I550
sS'.thisRepN'
p4814
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4815
I597
sS'.thisN'
p4816
I597
sS'.thisIndex'
p4817
g43
(g45
S'&\x02\x00\x00'
tRp4818
sg15
(lp4819
S'd'
asg16
S'Y'
sg14
I12
sa(dp4820
g17
(lp4821
S'k'
asg38
I327
sS'.thisRepN'
p4822
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4823
I598
sS'.thisN'
p4824
I598
sS'.thisIndex'
p4825
g43
(g45
S'G\x01\x00\x00'
tRp4826
sg15
(lp4827
S'd'
asg16
S'Y'
sg14
I12
sa(dp4828
g17
(lp4829
S'k'
asg38
I410
sS'.thisRepN'
p4830
I0
sg19
S'Y'
sg20
S'Y'
sg24
VF
sg25
g26
sS'.thisTrialN'
p4831
I599
sS'.thisN'
p4832
I599
sS'.thisIndex'
p4833
g43
(g45
S'\x9a\x01\x00\x00'
tRp4834
sg15
(lp4835
S'd'
asg16
S'Y'
sg14
I12
sasS'loops'
p4836
(lp4837
g1
(cpsychopy.data
TrialHandler
p4838
g3
NtRp4839
(dp4840
S'origin'
p4841
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2014 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import gui, logging\u000afrom psychopy.tools.arraytools import extendArr, shuffleArray\u000afrom psychopy.tools.fileerrortools import handleFileCollision\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='',\u000a                autoLog=True):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        self.autoLog = autoLog\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a        else:\u000a            checkValidFilePath(dataFileName, makeValid=True) #fail now if we fail at all!\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            if self.autoLog:\u000a                logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a :class:`~psychopy.data.TrialHandler` or :class:`~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a        #method of constants\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar:\u000a                        self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        #single StairHandler\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a\u000a        for entry in self.entries:\u000a            for name in names:\u000a                entry.keys()\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]) or '\u005cn' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to :func:`~psychopy.tools.fileerrortools.handleFileCollision`\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            if self.autoLog:\u000a                logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=stimOut,\u000a            dataOut=dataOut,\u000a            matrixOnly=matrixOnly)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                if self.autoLog:\u000a                    logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                if self.autoLog:\u000a                    logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                if self.autoLog:\u000a                    logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy.tools.filetools import fromFile\u000a            dat = fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        if self.autoLog:\u000a            logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = data.TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        if self.autoLog:\u000a            logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future, without advancing\u000a        the trials. Returns 'None' if attempting to go beyond the last trial.\u000a        """\u000a        # check that we don't go out of bounds for either positive or negative offsets:\u000a        if n>self.nRemaining or self.thisN+n < 0:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def getEarlierTrial(self, n=-1):\u000a        """Returns the condition information from n trials previously. Useful\u000a        for comparisons in n-back tasks. Returns 'None' if trying to access a trial\u000a        prior to the first.\u000a        """\u000a        # treat positive offset values as equivalent to negative ones:\u000a        if n > 0: n = n * -1\u000a        return self.getFutureTrial(n)\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not dataType in self.data:\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like::\u000a\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a        :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and parameterName in self.trialList[trialTypeIndex]:\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif parameterName in self.data:\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        trialsArr = numpy.recfromcsv(f, case_sensitive=True)\u000a        if trialsArr.shape == ():  # convert 0-D to 1-D with one element:\u000a            trialsArr = trialsArr[numpy.newaxis]\u000a        fieldNames = trialsArr.dtype.names\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse.\u000a    \u000a    *nUp* and *nDown* are always considered as 1 until the first reversal is reached. The values entered as arguments\u000a    are then used.\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.otherData={} #a dict of lists where each should have the same length as the main data\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a        self.autoLog = autoLog\u000a        self.initialRule = 0  #a flag for the 1-up 1-down initial rule\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a\u000a    def addOtherData(self, dataName, value):\u000a        """Add additional data to the handler, to be tracked alongside the result\u000a        data but not affecting the value of the staircase\u000a        """\u000a        if not dataName in self.otherData: #init the list\u000a            if self.thisTrialN>0:\u000a                self.otherData[dataName]=[None]*(self.thisTrialN-1) #might have run trals already\u000a            else:\u000a                self.otherData[dataName]=[]\u000a        #then add current value\u000a        self.otherData[dataName].append(value)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(dataName, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated since 1.79.00: This function name was ambiguous. Please use one of\u000a        these instead:\u000a            .addResponse(result, intensity)\u000a            .addOtherData('dataName', value')\u000a        """\u000a        self.addResponse(result, intensity)\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            if len(self.reversalIntensities)<1:\u000a                self.initialRule=1\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a        #apply new step size        \u000a        if len(self.reversalIntensities)<1 or self.initialRule==1:\u000a            self.initialRule=0 #reset the flag\u000a            if self.data[-1]==1:\u000a                self._intensityDec()\u000a            else:\u000a                self._intensityInc()\u000a        elif self.correctCounter >= self.nDown: #n right, so going down\u000a            self._intensityDec()\u000a        elif self.correctCounter <= -self.nUp:  #n wrong, so going up\u000a            self._intensityInc()\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #check that all 'otherData' is aligned with current trialN\u000a            for key in self.otherData.keys():\u000a                while len(self.otherData[key])<self.thisTrialN:\u000a                    self.otherData[key].append(None)\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            if self.autoLog:\u000a                logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name='',\u000a                 autoLog=True):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold.\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name, autoLog=autoLog)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a        self.autoLog = autoLog\u000a\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            # Update the intensity.\u000a            #\u000a            # During the first trial, self.intensities will be of length 0,\u000a            # so pop() would not work.\u000a            if len(self.intensities) != 0:\u000a                self.intensities.pop()  #remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.calculateNextIntensity()\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = data.QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name='', autoLog=True):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importConditions`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See :class:`~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = data.MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.autoLog = autoLog\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = data.MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        #if staircase.next() not called, staircaseHandler would not save the first intensity,\u000a        #Error: miss align intensities and responses\u000a        try:\u000a            self._nextIntensity =self.currentStaircase.next()#gets updated by self.addData()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a            if len(self.runningStaircases)==0: #If finished,set finished flag\u000a                self.finished=True\u000a        #return value\u000a        if not self.finished:\u000a            #inform experiment of the condition (but not intensity, that might be overridden by user)\u000a            if self.getExp() != None:\u000a                exp = self.getExp()\u000a                stair = self.currentStaircase\u000a                for key, value in stair.condition.items():\u000a                    exp.addData("%s.%s" %(self.name, key), value)\u000a                exp.addData(self.name+'.thisIndex', self.conditions.index(stair.condition))\u000a                exp.addData(self.name+'.thisRepN', stair.thisTrialN+1)\u000a                exp.addData(self.name+'.thisN', self.totalTrials)\u000a                exp.addData(self.name+'.direction', stair.currentDirection)\u000a                exp.addData(self.name+'.stepSize', stair.stepSizeCurrent)\u000a                exp.addData(self.name+'.stepType', stair.stepType)\u000a                exp.addData(self.name+'.intensity', self._nextIntensity)\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addResponse(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addResponse(result, intensity)\u000a        #add the current data to experiment if poss\u000a        if self.getExp() != None:#update the experiment handler too\u000a            self.getExp().addData(self.name+".response", result)\u000a        self.totalTrials+=1\u000a    def addOtherData(self, name, value):\u000a        """Add some data about the current trial that will not be used to control the\u000a        staircase(s) such as reaction time data\u000a        """\u000a        self.currentStaircase.addOtherData(name, value)\u000a    def addData(self, result, intensity=None):\u000a        """Deprecated 1.79.00: It was ambiguous whether you were adding the response\u000a        (0 or 1) or some other data concerning the trial so there is now a pair\u000a        of explicit methods:\u000a            addResponse(corr,intensity) #some data that alters the next trial value\u000a            addOtherData('RT', reactionTime) #some other data that won't control staircase\u000a        """\u000a        self.addResponse(result, intensity)\u000a        if type(result) in [str, unicode]:\u000a            raise TypeError, "MultiStairHandler.addData should only receive corr/incorr. Use .addOtherData('datName',val)"\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        if self.autoLog:\u000a            logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=matrixOnly, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            if self.autoLog:\u000a                logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not thisType in self:\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated: - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        raise "FitFunction is now fully DEPRECATED: use FitLogistic, FitWeibull etc instead"\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    Derived classes must have _eval and _inverse methods with @staticmethods\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.guess = guess\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        """The Fit class that derives this needs to specify its _evalFunction\u000a        """\u000a        #get some useful variables to help choose starting fit vals\u000a        #self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a        #self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        global _chance\u000a        _chance = self.expectedMin\u000a        self.params, self.covar = optimize.curve_fit(self._eval, self.xx, self.yy, p0=self.guess, sigma=self.sems)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a    def eval(self, xx, params=None):\u000a        """Evaluate xx for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params = self.params\u000a        global _chance\u000a        _chance=self.expectedMin\u000a        #_eval is a static method - must be done this way because the curve_fit\u000a        #function doesn't want to have any `self` object as first arg\u000a        yy = self._eval(xx, *params)\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        """Evaluate yy for the current parameters of the model, or for arbitrary params\u000a        if these are given.\u000a        """\u000a        if params==None:\u000a            params=self.params #so the user can set params for this particular inv\u000a        xx = self._inverse(yy, *params)\u000a        return xx\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, alpha, beta):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy =  _chance + (1.0-_chance)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, alpha, beta):\u000a        global _chance\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-_chance))) **(1.0/beta)\u000a        return xx\u000a\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, c50, n, rMin, rMax):\u000a        xx = numpy.asarray(xx)\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, c50, n, rMin, rMax):\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        #do we need to shift while fitting?\u000a        yScaled[yScaled<0]=0\u000a        xx = (yScaled*(c50)**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, PSE, JND):\u000a        global _chance\u000a        chance = _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, PSE, JND):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-_chance)/(yy-_chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*((special.erf((xx-xShift)/(sqrt(2)*sd))+1)*0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = xShift+sqrt(2)*sd*(erfinv(((yy-chance)/(1-chance)-.5)*2))\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    #static methods have no `self` and this is important for optimise.curve_fit\u000a    @staticmethod\u000a    def _eval(xx, xShift, sd):\u000a        global _chance\u000a        xx = numpy.asarray(xx)\u000a        yy = _chance + (1-_chance)*((special.erf((xx-xShift)/(numpy.sqrt(2)*sd))+1)*0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    @staticmethod\u000a    def _inverse(yy, xShift, sd):\u000a        global _chance\u000a        yy = numpy.asarray(yy)\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+numpy.sqrt(2)*sd*special.erfinv(( (yy-_chance)/(1-_chance) - 0.5 )*2)\u000a        return xx\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure.\u000a    Although the default is 10 bins Jon now always uses 'unique' bins\u000a    (fewer bins looks pretty but leads to errors in slope estimation)\u000a\u000a    usage::\u000a\u000a        intensity, meanCorrect, n = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list (or array) of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (each bin is made from aa data for exactly one intensity value)\u000a\u000a            intensity\u000a                a numpy array of intensity values (where each is the center of an intensity bin)\u000a\u000a            meanCorrect\u000a                a numpy aray of mean % correct in each bin\u000a\u000a            n\u000a                a numpy array of number of responses contributing to each mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef checkValidFilePath(filepath, makeValid=True):\u000a    """Checks whether file path location (e.g. is a valid folder)\u000a\u000a    This should also check whether we have write-permissions to the folder\u000a    but doesn't currently do that!\u000a\u000a    added in: 1.90.00\u000a    """\u000a    folder = os.path.split(os.path.abspath(filepath))[0]\u000a    if not os.path.isdir(folder):\u000a        os.makedirs(folder) #spit an error if we fail\u000a    return True\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a
p4842
sS'thisTrial'
p4843
(lp4844
sS'_exp'
p4845
I63370128
sg10
S''
sg6
S'C:\\Program Files (x86)\\PsychoPy2\\lib\\site-packages\\psychopy-1.80.03-py2.7.egg\\psychopy\\data.py'
p4846
sS'thisRepN'
p4847
I1
sg21
I01
sg22
NsS'data'
p4848
g1
(cpsychopy.data
DataHandler
p4849
c__builtin__
dict
p4850
(dp4851
S'ran'
p4852
cnumpy.ma.core
_mareconstruct
p4853
(cnumpy.ma.core
MaskedArray
p4854
cnumpy
ndarray
p4855
(I0
tp4856
S'b'
tRp4857
(I1
(I600
I1
tg44
(S'f4'
I0
I1
tRp4858
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p4859
g4853
(g4854
g4855
g4856
S'b'
tRp4860
(I1
(I600
I1
tg4858
I00
S'\x00\x00\x0cB\x00\x00NC\x00\x00=C\x00\x00@B\x00\x00\xe0B\x00\x00HC\x00\x00\xa6C\x00\x00\x05D\x00\xc0\x02D\x00\x00iC\x00\x00\x80C\x00\x00\xe0@\x00\x80\xbfC\x00\x00\xd4B\x00\x00xC\x00\x80\xdbC\x00\x00MC\x00\x00\x9eB\x00\x80\xe1C\x00\x80\x88C\x00\x00\\B\x00\x80\xfcC\x00\x00{C\x00\x00\xb7C\x00\x00pB\x00\x80\xf5C\x00\x00\xbeC\x00\x00\xdcC\x00\x80\x83C\x00\x00\x14D\x00\x00\xe1C\x00\x80\x11D\x00\x00\xb8B\x00\x00\xe9C\x00\x00\xc5C\x00\x80\x81C\x00\x00TB\x00\x009C\x00\x00/C\x00\xc0\x0bD\x00\x80\x90C\x00\x00@C\x00\x80\xc6C\x00\x00\xc0@\x00\x80\x98C\x00\x80\xcaC\x00\x00\xb5C\x00\x00\x13D\x00\x00\x94B\x00\x80\xabC\x00\x00EC\x00\x00WC\x00\xc0\x0eD\x00\x00.C\x00\x00\xa9C\x00\x00\x0eD\x00\x00XB\x00\x00YC\x00\x00\xceB\x00\x00\x96B\x00\x80\xedC\x00\x00\x15D\x00\x00GC\x00\x00\rD\x00\x00\xf8C\x00\x00\xa2B\x00\x00\xbcC\x00\x80\xbcC\x00\x000B\x00\x00\xf6C\x00\x00\x1dC\x00\x00%C\x00\x00\xdbC\x00\x00\xe8A\x00\x00\xd0B\x00\x00\x83C\x00\x00\x8dC\x00\x80\xe9C\x00\x00(B\x00\x00\xecC\x00@\x01D\x00\x00\xc8B\x00\x00\xf6B\x00\x00\xb3C\x00\xc0\x03D\x00\x80\xc4C\x00\x00\xd8B\x00\x00\x80@\x00\x00\xd8C\x00\x00\x04C\x00\x00\x9fC\x00@\x14D\x00\x80\xdeC\x00@\x10D\x00\x00\xfeB\x00\x80\x80C\x00\x80\xb0C\x00@\x0fD\x00\x00\x12D\x00\x00\xb8A\x00\x00\xfeC\x00\x80\x0eD\x00\x00\xfaC\x00\x00\x8eB\x00\x00\xefC\x00\x80\x13D\x00\x80\xb9C\x00\x00\x12C\x00\x80\xf3C\x00\x00JC\x00\x00wC\x00\x00\x89C\x00\x00]C\x00\x00\xb8C\x00\x00\xeeC\x00\x00dB\x00\x008B\x00\x80\xe5C\x00\x00\x0bD\x00\x00\x0fC\x00\x00\x08B\x00\x00\xabC\x00\x002C\x00\x00\x1bC\x00\x80\xf0C\x00\x00\xaeC\x00\x80\x8fC\x00\x00\xbcB\x00\x00\x99C\x00\x00!C\x00\x00\xd6C\x00\x00"C\x00\xc0\x00D\x00@\x12D\x00\x80\xd0C\x00\x80\nD\x00\x00UC\x00\x00>C\x00\x80\xa9C\x00\x80\xd5C\x00\x00\xadC\x00\x00\x11C\x00\x80\xfdC\x00\xc0\x06D\x00\x00\xd2B\x00\x00\xb2B\x00@\x06D\x00\x00\x1cB\x00\x80\xc5C\x00\x00\x00B\x00\x00\x1aC\x00\x00\nD\x00\x00\xa5C\x00\x80\x8eC\x00\x00\xfcC\x00\x00\x92C\x00\x00\xcdC\x00\x00\xbeB\x00\x00\xe6C\x00\x00\x88A\x00\x00$B\x00\x80\xa5C\x00\x00\xf2C\x00\x00\xf8A\x00\x00\nC\x00\x00\x18B\x00\x00\xe6B\x00\x00\xa4C\x00\x80\x92C\x00\xc0\x10D\x00\x00\xc4B\x00\x80\xacC\x00\xc0\x05D\x00\x00\x15C\x00\x80\x03D\x00\xc0\rD\x00\x00<B\x00\x00\x9dC\x00@\x0bD\x00\x00\xbaB\x00\x00\xf5C\x00\x00\xdaB\x00\x00\x87C\x00\x00\xdcB\x00\x00\x0fD\x00\x00uC\x00\x00BC\x00\x00\xe5C\x00\x00*C\x00\x00hC\x00\x00tB\x00\x00\xa4B\x00\x80\xe8C\x00\x00oC\x00\x00#C\x00\x80\x08D\x00\x80\x8bC\x00\x00\x85C\x00\x80\xdaC\x00\x00\x98B\x00\x80\x9cC\x00@\x02D\x00@\tD\x00\x00CC\x00\x00\x18C\x00\x00(C\x00\x00\x01D\x00\x80\xd4C\x00\x00\xf1C\x00\x80\xf9C\x00\x80\xe2C\x00\x00\x02C\x00\x00\xc0C\x00\x80\xa6C\x00\x80\x04D\x00\x00hB\x00\x00\x10B\x00\x00HB\x00\x00\xbdC\x00\x00\x9aB\x00\x80\x14D\x00\x00\x06D\x00\x00\xa3C\x00\x00\xc7C\x00\x00\xceC\x00\x80\xb3C\x00\x00\xc2B\x00\x00[C\x00\x80\xf2C\x00\x00:C\x00\x00\xaaB\x00\x80\x97C\x00\x00\x9cC\x00\x00PB\x00@\x04D\x00\x00\xc9C\x00\x00\x03D\x00\x80\xa2C\x00\x00IC\x00\x00\x00\x00\x00\x80\xf4C\x00\x00\x04D\x00\x00\x8aB\x00@\x13D\x00\x00\x8fC\x00\x00jC\x00\x00\xdaC\x00\x00RC\x00\x004C\x00\x00\x7fC\x00\x00\xa8B\x00\x00\x9cB\x00\x80\xa3C\x00\x80\x99C\x00\x00\xa0@\x00\x00\xd0C\x00\x80\x8aC\x00\x00\x9aC\x00\x80\xaaC\x00\x80\xb4C\x00\x004B\x00\x00\'C\x00\x00\xd2C\x00\x80\x0bD\x00\x006C\x00\x80\rD\x00\x80\x91C\x00\x80\xe0C\x00\x80\xfaC\x00\x00\x10C\x00\x00\xc4C\x00\x00\xaeB\x00\x80\xfeC\x00\x00\xccC\x00\x00eC\x00\x00rC\x00\x00sC\x00\x00\xd6B\x00\x00\xcaC\x00@\x03D\x00\x00\xddC\x00\x00\xb2C\x00\x80\x8cC\x00\x00\xd0A\x00\x00XC\x00\x80\xc3C\x00\x00dC\x00\x80\xb5C\x00\x00`C\x00\x00<C\x00\x00\x8bC\x00\x00\xa0A\x00\x00\x8cB\x00\x80\xa4C\x00\x80\x87C\x00\x00\xe4B\x00\x00\xc1C\x00\x00AC\x00\x80\x82C\x00\x00\xecB\x00\x00\x13C\x00\x80\xc8C\x00\x00\xe4C\x00\xc0\x07D\x00\x00\xe8B\x00\x80\xefC\x00\x80\x05D\x00\x00LC\x00\x00pC\x00\x00\xeaB\x00\x00\xa0C\x00\x80\xbeC\x00\x00~C\x00\x00\x0cC\x00\x00\x93C\x00\x00\xafC\x00\x00\x94C\x00\x80\xc7C\x00\x00\x0bC\x00\x00aC\x00\x80\x9aC\x00\x00\xf4B\x00\x80\xa7C\x00\x00\xbaC\x00\x00\xeeB\x00\x00\x00C\x00\xc0\x12D\x00\x80\x15D\x00\xc0\x0cD\x00\x00\xd4C\x00\xc0\nD\x00\x80\x95C\x00\x00\x10D\x00\x80\x00D\x00\x00\xbfC\x00\x00\x05C\x00\x00 B\x00\x80\x9fC\x00\x80\xffC\x00\x00\x8eC\x00\x80\x94C\x00\x00,B\x00\x00\x84C\x00\x80\x84C\x00\x00SC\x00\x00\x96C\x00\x80\xdfC\x00\x00\xe0A\x00\x80\x0fD\x00\x00\xffC\x00\x00\xa8C\x00\x80\x0cD\x00\x00zC\x00\x80\xd6C\x00\x00 A\x00\x00-C\x00\x00\xc8C\x00\x007C\x00@\x00D\x00\x80\x02D\x00\x001C\x00\x00$C\x00\x80\x93C\x00\x80\xceC\x00\x00\x01C\x00\x00\xe3C\x00\x00DC\x00\x00\xd1C\x00\x00`B\x00\x00\xb0A\x00\x00\x82B\x00\x00\xa6B\x00\x80\x86C\x00\x00DB\x00\x00\xbbC\x00\x00\x16C\x00\x80\xd9C\x00\x00 C\x00\x00yC\x00\x00\xb9C\x00\x00\xe2B\x00\x00\xfcB\x00\x80\xbbC\x00\x00\xfbC\x00@\x05D\x00\x00\xccB\x00\x00\xfaB\x00\x00\xb4B\x00\x80\xf1C\x00\x00cC\x00\x00\x06C\x00\x00?C\x00\x00\xcaB\x00\x00`A\x00\xc0\x13D\x00\x00\x80?\x00\x00\x1eC\x00\x00\x00@\x00\x80\xecC\x00\x00\x19C\x00\x80\xebC\x00\xc0\x04D\x00\x00\xf2B\x00\x00\xb1C\x00\xc0\x14D\x00\x80\xa0C\x00\x00tC\x00\x00\x03C\x00\x00fC\x00\x00pA\x00\xc0\x15D\x00\x00\x07C\x00\x00\tC\x00\x00\xb6C\x00\x80\xa8C\x00\x80\xb6C\x00\x80\xf6C\x00\x00\xf9C\x00\x00\x81C\x00\x00\x07D\x00\x00\xd9C\x00\x00vC\x00\x00\xd8A\x00\x00\x92B\x00@\x0cD\x00\xc0\x0fD\x00\x00gC\x00\x80\xb8C\x00\x00\xe7C\x00\x00\x0cD\x00\x80\xe4C\x00\x80\xd7C\x00\x80\xd3C\x00\x00\x00A\x00\x00bC\x00\x80\x12D\x00\x80\x8dC\x00\x00\xe2C\x00\x00@@\x00\x00\xedC\x00\x00\xcbC\x00\x00\x00D\x00\x80\xddC\x00\x00\x04B\x00\x00\xf8B\x00\x00\xd5C\x00\x00\xacB\x00\x005C\x00\x00\xa8A\x00\x80\xe3C\x00\x000A\x00@\x11D\x00\x80\xafC\x00\x00\xdeC\x00\x80\xc1C\x00\x80\xf7C\x00\xc0\x08D\x00\x00;C\x00\x00\xe8C\x00\x80\xb7C\x00\x00lB\x00\x00\x98A\x00\xc0\tD\x00\x00\x0eC\x00\x00\x8cC\x00\x80\xcbC\x00\x80\xcdC\x00\x00\xf7C\x00\x80\x85C\x00@\nD\x00\x00\x08D\x00\x00\xb4C\x00\x00|B\x00\x00VC\x00\x000C\x00\x00\xdfC\x00\x00\x02D\x00\x00@A\x00\x00mC\x00\x00}C\x00\xc0\x01D\x00\x00PC\x00\x80\xc0C\x00\x80\xe6C\x00\x00+C\x00\x00kC\x00\x80\xbaC\x00\x00KC\x00\x00\xf0A\x00\x00\xc0A\x00\x80\x10D\x00\x80\xd2C\x00\x00\xa7C\x00\x00\x8aC\x00\x00\xebC\x00\x00_C\x00\x80\xe7C\x00\x00FC\x00\x00\xf4C\x00\x00&C\x00\x00\xf0B\x00\x80\xfbC\x00\x80\x01D\x00\x00\xc2C\x00\x00\xd7C\x00\x00\xa0B\x00\x00\x86C\x00\x00\xcfC\x00\x80\x06D\x00\x00\xb6B\x00\x80\xeaC\x00\x80\xcfC\x00\x00\xf0C\x00\x00|C\x00\x80\xaeC\x00\x80\tD\x00\x00\x98C\x00\x80\x89C\x00\x00QC\x00\x00\xf3C\x00\x00\x1fC\x00\x80\x9bC\x00\x00\x80A\x00\x00OC\x00\x00\xb0C\x00\x00nC\x00\x00\xa2C\x00\x00\xc0B\x00\x00lC\x00\x80\xeeC\x00\x80\xccC\x00\x80\xb1C\x00\x80\x07D\x00\x00\xeaC\x00\x00\x90A\x00\x80\xc2C\x00\x80\xb2C\x00\x00\tD\x00\x80\xdcC\x00\x00TC\x00\x00\x08C\x00@\rD\x00\x00\x11D\x00\x00qC\x00\x008C\x00\x00xB\x00\x00\xc6B\x00\x00\x80B\x00\x00\x14B\x00\x00\xc8A\x00@\x15D\x00\x00\x91C\x00@\x08D\x00\x80\xc9C\x00\x00\x97C\x00\x00\x17C\x00\x00\x82C\x00\x00\xb0B\x00\x00\x90C\x00\x80\xf8C\x00\x80\x96C\x00\x00\x84B\x00\x00,C\x00\x00\x14C\x00\x00LB\x00\x00\rC\x00\x80\xd8C\x00@\x0eD\x00@\x07D\x00\x00\xc3C\x00\x00\x90B\x00\x00\x10A\x00\x80\xadC\x00\x00PA\x00\x00\xd3C\x00\x00\xdeB\x00\x00\x86B\x00\x80\x9eC\x00\x80\xd1C\x00\x00\x9eC\x00\x00\x9bC\x00\x00\x88B\x00\x80\xbdC\x00\x00\x88C\x00\xc0\x11D\x00\x00^C\x00\x00\xaaC\x00\x00\xc6C\x00\x00\xa1C\x00\x00ZC\x00\x00\xe0C\x00\x00)C\x00\x00\xacC\x00\x00\\C\x00\x80\xa1C\x00\x80\x9dC\x00\x00\xfdC\x00\x00\x1cC\x00\x003C\x00\x00\x95C'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp4861
(dp4862
S'isNumeric'
p4863
(dp4864
g4852
I01
sg4859
I01
ssS'trials'
p4865
g4839
sS'dataTypes'
p4866
(lp4867
g4852
ag4859
asS'dataShape'
p4868
(lp4869
I600
aI1
asbsS'method'
p4870
S'random'
p4871
sS'sequenceIndices'
p4872
cnumpy.core.multiarray
_reconstruct
p4873
(g4855
(I0
tS'b'
tRp4874
(I1
(I600
I1
tg45
I01
S'\xef\x00\x00\x00\x8b\x01\x00\x00\x8d\x01\x00\x00\xb6\x01\x00\x00W\x00\x00\x00\xfe\x00\x00\x00+\x00\x00\x00\x0b\x00\x00\x00\xb1\x01\x00\x00;\x02\x00\x00b\x01\x00\x00\xc2\x01\x00\x00\xdd\x01\x00\x00=\x02\x00\x00\x89\x01\x00\x00\x99\x01\x00\x00\n\x02\x00\x00\x9f\x00\x00\x00\x16\x02\x00\x00\xcd\x01\x00\x00#\x01\x00\x00\xc0\x01\x00\x00q\x01\x00\x00c\x00\x00\x00\xe9\x01\x00\x00%\x02\x00\x00\x1b\x01\x00\x00\xa6\x01\x00\x00[\x01\x00\x00I\x00\x00\x00\xe8\x01\x00\x00\xa3\x00\x00\x00\x95\x00\x00\x00\xbb\x01\x00\x00x\x00\x00\x00\x00\x00\x00\x00\xd8\x00\x00\x00$\x02\x00\x00\xa5\x00\x00\x00\x93\x00\x00\x00P\x01\x00\x00\xa0\x00\x00\x00N\x00\x00\x00U\x01\x00\x00D\x00\x00\x00\x04\x01\x00\x00t\x00\x00\x00\xb0\x00\x00\x00\x03\x00\x00\x00u\x01\x00\x00\xd9\x00\x00\x004\x02\x00\x00\xe9\x00\x00\x00$\x00\x00\x008\x00\x00\x00\x14\x00\x00\x00p\x01\x00\x00s\x00\x00\x00\xd7\x00\x00\x00\xcc\x01\x00\x00\x18\x00\x00\x00\xbe\x00\x00\x00!\x02\x00\x00\xd8\x01\x00\x00#\x02\x00\x00r\x01\x00\x001\x02\x00\x00@\x02\x00\x00E\x02\x00\x00\xf2\x00\x00\x00$\x01\x00\x00g\x00\x00\x00:\x02\x00\x00\xa7\x01\x00\x000\x00\x00\x00;\x00\x00\x00\xc7\x00\x00\x00\xdb\x00\x00\x00\xfb\x00\x00\x00\x11\x00\x00\x00\xf9\x01\x00\x00A\x00\x00\x00\xbf\x00\x00\x00s\x01\x00\x00\xfa\x00\x00\x00\xe6\x00\x00\x00\xbe\x01\x00\x00\x0f\x01\x00\x00-\x02\x00\x00\x91\x00\x00\x00\x83\x01\x00\x00\xfd\x01\x00\x00 \x00\x00\x00\xb3\x00\x00\x00\x7f\x00\x00\x00\x9d\x00\x00\x00\x0f\x02\x00\x00\xe2\x00\x00\x00\xaa\x00\x00\x00"\x02\x00\x00Q\x00\x00\x00\x88\x01\x00\x00\x81\x01\x00\x00:\x00\x00\x00J\x00\x00\x00\x90\x00\x00\x00\r\x00\x00\x00\x15\x01\x00\x00V\x00\x00\x00\xb5\x00\x00\x00\xb7\x00\x00\x00?\x02\x00\x00\x04\x00\x00\x00|\x01\x00\x00\'\x01\x00\x00\xa6\x00\x00\x000\x01\x00\x005\x01\x00\x00+\x01\x00\x00D\x01\x00\x00\xf4\x01\x00\x00\x92\x01\x00\x00A\x01\x00\x00R\x00\x00\x00\xbc\x01\x00\x00\x82\x01\x00\x00}\x01\x00\x00^\x00\x00\x00E\x01\x00\x00l\x01\x00\x00\xd3\x00\x00\x00\x97\x01\x00\x00Y\x00\x00\x00O\x01\x00\x00\x86\x01\x00\x00\x9b\x01\x00\x00\x1c\x02\x00\x00\x9c\x01\x00\x00\xa4\x00\x00\x00>\x01\x00\x009\x01\x00\x005\x02\x00\x00\xcf\x01\x00\x00w\x00\x00\x00\r\x01\x00\x00\x8d\x00\x00\x00k\x00\x00\x00,\x01\x00\x003\x02\x00\x00\xad\x00\x00\x00w\x01\x00\x00+\x02\x00\x00\xcc\x00\x00\x00\x8f\x01\x00\x00\x96\x00\x00\x00{\x00\x00\x00U\x02\x00\x00F\x00\x00\x00\x8c\x01\x00\x00\x08\x02\x00\x00y\x01\x00\x00\x81\x00\x00\x00\x83\x00\x00\x00\xc2\x00\x00\x00i\x01\x00\x00G\x00\x00\x00\xf3\x01\x00\x00\x05\x01\x00\x00\xcd\x00\x00\x00O\x02\x00\x00\xbc\x00\x00\x00\xe4\x01\x00\x002\x02\x00\x00c\x01\x00\x005\x00\x00\x00&\x00\x00\x00\xda\x01\x00\x00h\x01\x00\x00z\x00\x00\x00V\x02\x00\x00\xf8\x00\x00\x00\xbf\x01\x00\x00\x08\x01\x00\x00e\x01\x00\x00 \x02\x00\x00%\x00\x00\x00\xe5\x00\x00\x00\xc9\x01\x00\x00!\x01\x00\x00\x02\x00\x00\x00\x89\x00\x00\x00\x87\x01\x00\x00)\x00\x00\x00)\x01\x00\x00\xba\x00\x00\x00\xcb\x00\x00\x00n\x01\x00\x002\x00\x00\x00\xf1\x01\x00\x00>\x00\x00\x00\x05\x00\x00\x00\xee\x00\x00\x00m\x00\x00\x00\xe7\x01\x00\x003\x01\x00\x00\x10\x00\x00\x00\x01\x00\x00\x00\x0b\x02\x00\x00\xe1\x01\x00\x00\x06\x02\x00\x00\xf7\x00\x00\x00X\x01\x00\x00\x1b\x02\x00\x00\x88\x00\x00\x00\xd9\x01\x00\x003\x00\x00\x00\x1c\x01\x00\x009\x00\x00\x00M\x02\x00\x00\xe3\x00\x00\x00Q\x02\x00\x00p\x00\x00\x00I\x02\x00\x00\xef\x01\x00\x00 \x01\x00\x00?\x01\x00\x00\xb2\x01\x00\x00\x85\x01\x00\x00\x1e\x01\x00\x00\x12\x01\x00\x00\x98\x01\x00\x00\xaa\x01\x00\x00\xbd\x00\x00\x00\t\x00\x00\x00\xf5\x00\x00\x00\xe5\x01\x00\x00\x10\x02\x00\x00\xde\x01\x00\x00\r\x02\x00\x00\xc1\x00\x00\x004\x01\x00\x00\x1f\x02\x00\x00\x13\x01\x00\x00\x14\x01\x00\x00\x96\x01\x00\x00\xb9\x00\x00\x00\xa5\x01\x00\x00n\x00\x00\x00\x0e\x00\x00\x00z\x01\x00\x00`\x01\x00\x00\x16\x00\x00\x00\x01\x02\x00\x00\xdf\x01\x00\x008\x01\x00\x00\xf9\x00\x00\x00\n\x00\x00\x00_\x00\x00\x00\xa2\x01\x00\x00#\x00\x00\x00,\x02\x00\x00*\x01\x00\x00K\x00\x00\x00\x1c\x00\x00\x00V\x01\x00\x00W\x01\x00\x00\xc5\x00\x00\x00\xd4\x01\x00\x00\xfa\x01\x00\x00t\x01\x00\x00\xb6\x00\x00\x00&\x01\x00\x00G\x02\x00\x00\x13\x00\x00\x00o\x00\x00\x00\x05\x02\x00\x00\xed\x01\x00\x00\x00\x01\x00\x00"\x01\x00\x00\xc4\x00\x00\x00\xd0\x01\x00\x00\x1a\x01\x00\x00L\x00\x00\x00\xb4\x01\x00\x00S\x01\x00\x00\x99\x00\x00\x00\xf4\x00\x00\x00~\x00\x00\x00.\x02\x00\x00(\x00\x00\x00\'\x02\x00\x00\n\x01\x00\x00\x9b\x00\x00\x00\xa8\x00\x00\x00:\x01\x00\x00j\x01\x00\x00<\x01\x00\x00T\x01\x00\x00W\x02\x00\x00K\x01\x00\x00Y\x01\x00\x000\x02\x00\x00*\x02\x00\x00\xe7\x00\x00\x00\x04\x02\x00\x00,\x00\x00\x00\x80\x00\x00\x00\xfd\x00\x00\x00\x01\x01\x00\x00@\x01\x00\x00D\x02\x00\x00\t\x02\x00\x00\xe8\x00\x00\x00\xc8\x00\x00\x00\xb1\x00\x00\x00S\x02\x00\x00C\x02\x00\x00A\x02\x00\x00Z\x00\x00\x00Q\x01\x00\x006\x01\x00\x00\x95\x01\x00\x00L\x02\x00\x00R\x02\x00\x00\x0e\x02\x00\x00\xed\x00\x00\x00\xde\x00\x00\x00\xfc\x00\x00\x00\xa7\x00\x00\x00%\x01\x00\x00\x98\x00\x00\x00\xa1\x00\x00\x00\x06\x00\x00\x00\xd5\x00\x00\x00\xec\x01\x00\x00B\x01\x00\x00^\x01\x00\x00\x9e\x01\x00\x006\x00\x00\x00\x8a\x00\x00\x00J\x02\x00\x00\x02\x01\x00\x00y\x00\x00\x001\x00\x00\x00P\x02\x00\x00\xab\x00\x00\x00\x8c\x00\x00\x00<\x02\x00\x00}\x00\x00\x00\x02\x02\x00\x00;\x01\x00\x00\xc4\x01\x00\x00\x0c\x02\x00\x00`\x00\x00\x00\x93\x01\x00\x00\x13\x02\x00\x00\x19\x01\x00\x00\x18\x02\x00\x00S\x00\x00\x00\xe1\x00\x00\x00\xd7\x01\x00\x00\x03\x01\x00\x00.\x00\x00\x00\x1f\x01\x00\x00\x9d\x01\x00\x00\x9f\x01\x00\x00\x17\x00\x00\x00\xcb\x01\x00\x00q\x00\x00\x00\xab\x01\x00\x00{\x01\x00\x00j\x00\x00\x00C\x01\x00\x00\xe6\x01\x00\x00v\x01\x00\x00~\x01\x00\x00B\x00\x00\x00C\x00\x00\x00\xda\x00\x00\x00F\x02\x00\x00\x1a\x00\x00\x007\x01\x00\x00N\x01\x00\x00\x0c\x00\x00\x00\xd4\x00\x00\x00\xe2\x01\x00\x00(\x01\x00\x00\xc6\x01\x00\x00\xf7\x01\x00\x00\x17\x02\x00\x009\x02\x00\x00\x1d\x01\x00\x00\x0e\x01\x00\x00U\x00\x00\x00"\x00\x00\x00\x94\x00\x00\x00K\x02\x00\x00*\x00\x00\x00\xdf\x00\x00\x00=\x01\x00\x00d\x01\x00\x00-\x01\x00\x00\xeb\x00\x00\x00)\x02\x00\x00\x16\x01\x00\x00-\x00\x00\x00\xb8\x01\x00\x00\xd1\x01\x00\x00\x11\x01\x00\x00\x12\x02\x00\x00\x9c\x00\x00\x00\xd2\x01\x00\x00\xe0\x00\x00\x00k\x01\x00\x00\xfb\x01\x00\x00\xff\x01\x00\x00\xff\x00\x00\x00\x86\x00\x00\x00o\x01\x00\x00B\x02\x00\x00\x06\x01\x00\x00\xeb\x01\x00\x00>\x02\x00\x00\xb0\x01\x00\x00I\x01\x00\x00\xcf\x00\x00\x00\xbd\x01\x00\x00\x8b\x00\x00\x00\x82\x00\x00\x00a\x01\x00\x00\xf8\x01\x00\x00\xaf\x01\x00\x00X\x00\x00\x006\x02\x00\x00\xa4\x01\x00\x00x\x01\x00\x00\xf6\x00\x00\x00\xc6\x00\x00\x00H\x00\x00\x00\x0f\x00\x00\x00\x1b\x00\x00\x00\x1a\x02\x00\x00\x18\x01\x00\x00\xba\x01\x00\x00\xc5\x01\x00\x00\\\x00\x00\x00\xdb\x01\x00\x00Z\x01\x00\x00N\x02\x00\x00\x0b\x01\x00\x00\x1e\x00\x00\x00\x12\x00\x00\x00\xb5\x01\x00\x00\xd2\x00\x00\x00m\x01\x00\x00\xc1\x01\x00\x00.\x01\x00\x00\xae\x01\x00\x00\xbb\x00\x00\x00u\x00\x00\x00\x9e\x00\x00\x00\xe3\x01\x00\x00\xac\x01\x00\x00\xf0\x01\x00\x00\xca\x01\x00\x00\xc0\x00\x00\x00!\x00\x00\x00M\x00\x00\x00\x15\x02\x00\x00\xfe\x01\x00\x00\xee\x01\x00\x00\x90\x01\x00\x00O\x00\x00\x00\x8e\x01\x00\x00\xb7\x01\x00\x00<\x00\x00\x00r\x00\x00\x00\x11\x02\x00\x00h\x00\x00\x001\x01\x00\x00\x00\x02\x00\x00|\x00\x00\x00\xd0\x00\x00\x00\x84\x01\x00\x00\xa2\x00\x00\x00\xe4\x00\x00\x00\x07\x02\x00\x00l\x00\x00\x00\xf2\x01\x00\x00\xf0\x00\x00\x00\xb4\x00\x00\x00\x19\x00\x00\x00E\x00\x00\x00\xa0\x01\x00\x00\xd3\x01\x00\x00\xc7\x01\x00\x00@\x00\x00\x00/\x02\x00\x00\xa1\x01\x00\x00\xd1\x00\x00\x00f\x00\x00\x00\x0c\x01\x00\x00\x7f\x01\x00\x00\xf5\x01\x00\x00\x9a\x00\x00\x00\x15\x00\x00\x00T\x02\x00\x00\x8e\x00\x00\x00d\x00\x00\x00\x10\x01\x00\x00]\x01\x00\x00R\x01\x00\x00\xb9\x01\x00\x00f\x01\x00\x00M\x01\x00\x00\x84\x00\x00\x00\xce\x00\x00\x00P\x00\x00\x00\xf6\x01\x00\x00\xe0\x01\x00\x00\xdc\x01\x00\x00\xc9\x00\x00\x00g\x01\x00\x00\x08\x00\x00\x00\xec\x00\x00\x00\x17\x01\x00\x00\xae\x00\x00\x00T\x00\x00\x00\xf1\x00\x00\x00\xea\x00\x00\x00\xd6\x00\x00\x00\x91\x01\x00\x00\x07\x00\x00\x00\x80\x01\x00\x002\x01\x00\x00\xac\x00\x00\x00\xdd\x00\x00\x00\x92\x00\x00\x00\xfc\x01\x00\x00\x8f\x00\x00\x00\xa3\x01\x00\x008\x02\x00\x00\x14\x02\x00\x00/\x01\x00\x00\xd6\x01\x00\x00(\x02\x00\x00\xc3\x00\x00\x00\xc8\x01\x00\x00\x19\x02\x00\x00\xca\x00\x00\x00\x03\x02\x00\x00\xce\x01\x00\x00\x97\x00\x00\x00\xd5\x01\x00\x00\x87\x00\x00\x00J\x01\x00\x00v\x00\x00\x00\xb2\x00\x00\x00\x07\x01\x00\x00\'\x00\x00\x00\xad\x01\x00\x00\xa8\x01\x00\x00_\x01\x00\x00H\x01\x00\x00?\x00\x00\x00\x1d\x02\x00\x00\t\x01\x00\x00\xaf\x00\x00\x007\x00\x00\x007\x02\x00\x00e\x00\x00\x004\x00\x00\x00\xb8\x00\x00\x00a\x00\x00\x00\\\x01\x00\x00\xa9\x01\x00\x00L\x01\x00\x00]\x00\x00\x00\xea\x01\x00\x00\xa9\x00\x00\x00\x1e\x02\x00\x00\xc3\x01\x00\x00\x1f\x00\x00\x00H\x02\x00\x00b\x00\x00\x00\x85\x00\x00\x00\xb3\x01\x00\x00F\x01\x00\x00/\x00\x00\x00\xf3\x00\x00\x00i\x00\x00\x00\x8a\x01\x00\x00\x1d\x00\x00\x00[\x00\x00\x00\xdc\x00\x00\x00\x94\x01\x00\x00=\x00\x00\x00&\x02\x00\x00G\x01\x00\x00\x9a\x01\x00\x00'
tbsS'finished'
p4875
I01
sS'nReps'
p4876
I1
sS'nRemaining'
p4877
I-1
sS'trialList'
p4878
(lp4879
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aI10
aI11
aI12
aI13
aI14
aI15
aI16
aI17
aI18
aI19
aI20
aI21
aI22
aI23
aI24
aI25
aI26
aI27
aI28
aI29
aI30
aI31
aI32
aI33
aI34
aI35
aI36
aI37
aI38
aI39
aI40
aI41
aI42
aI43
aI44
aI45
aI46
aI47
aI48
aI49
aI50
aI51
aI52
aI53
aI54
aI55
aI56
aI57
aI58
aI59
aI60
aI61
aI62
aI63
aI64
aI65
aI66
aI67
aI68
aI69
aI70
aI71
aI72
aI73
aI74
aI75
aI76
aI77
aI78
aI79
aI80
aI81
aI82
aI83
aI84
aI85
aI86
aI87
aI88
aI89
aI90
aI91
aI92
aI93
aI94
aI95
aI96
aI97
aI98
aI99
aI100
aI101
aI102
aI103
aI104
aI105
aI106
aI107
aI108
aI109
aI110
aI111
aI112
aI113
aI114
aI115
aI116
aI117
aI118
aI119
aI120
aI121
aI122
aI123
aI124
aI125
aI126
aI127
aI128
aI129
aI130
aI131
aI132
aI133
aI134
aI135
aI136
aI137
aI138
aI139
aI140
aI141
aI142
aI143
aI144
aI145
aI146
aI147
aI148
aI149
aI150
aI151
aI152
aI153
aI154
aI155
aI156
aI157
aI158
aI159
aI160
aI161
aI162
aI163
aI164
aI165
aI166
aI167
aI168
aI169
aI170
aI171
aI172
aI173
aI174
aI175
aI176
aI177
aI178
aI179
aI180
aI181
aI182
aI183
aI184
aI185
aI186
aI187
aI188
aI189
aI190
aI191
aI192
aI193
aI194
aI195
aI196
aI197
aI198
aI199
aI200
aI201
aI202
aI203
aI204
aI205
aI206
aI207
aI208
aI209
aI210
aI211
aI212
aI213
aI214
aI215
aI216
aI217
aI218
aI219
aI220
aI221
aI222
aI223
aI224
aI225
aI226
aI227
aI228
aI229
aI230
aI231
aI232
aI233
aI234
aI235
aI236
aI237
aI238
aI239
aI240
aI241
aI242
aI243
aI244
aI245
aI246
aI247
aI248
aI249
aI250
aI251
aI252
aI253
aI254
aI255
aI256
aI257
aI258
aI259
aI260
aI261
aI262
aI263
aI264
aI265
aI266
aI267
aI268
aI269
aI270
aI271
aI272
aI273
aI274
aI275
aI276
aI277
aI278
aI279
aI280
aI281
aI282
aI283
aI284
aI285
aI286
aI287
aI288
aI289
aI290
aI291
aI292
aI293
aI294
aI295
aI296
aI297
aI298
aI299
aI300
aI301
aI302
aI303
aI304
aI305
aI306
aI307
aI308
aI309
aI310
aI311
aI312
aI313
aI314
aI315
aI316
aI317
aI318
aI319
aI320
aI321
aI322
aI323
aI324
aI325
aI326
aI327
aI328
aI329
aI330
aI331
aI332
aI333
aI334
aI335
aI336
aI337
aI338
aI339
aI340
aI341
aI342
aI343
aI344
aI345
aI346
aI347
aI348
aI349
aI350
aI351
aI352
aI353
aI354
aI355
aI356
aI357
aI358
aI359
aI360
aI361
aI362
aI363
aI364
aI365
aI366
aI367
aI368
aI369
aI370
aI371
aI372
aI373
aI374
aI375
aI376
aI377
aI378
aI379
aI380
aI381
aI382
aI383
aI384
aI385
aI386
aI387
aI388
aI389
aI390
aI391
aI392
aI393
aI394
aI395
aI396
aI397
aI398
aI399
aI400
aI401
aI402
aI403
aI404
aI405
aI406
aI407
aI408
aI409
aI410
aI411
aI412
aI413
aI414
aI415
aI416
aI417
aI418
aI419
aI420
aI421
aI422
aI423
aI424
aI425
aI426
aI427
aI428
aI429
aI430
aI431
aI432
aI433
aI434
aI435
aI436
aI437
aI438
aI439
aI440
aI441
aI442
aI443
aI444
aI445
aI446
aI447
aI448
aI449
aI450
aI451
aI452
aI453
aI454
aI455
aI456
aI457
aI458
aI459
aI460
aI461
aI462
aI463
aI464
aI465
aI466
aI467
aI468
aI469
aI470
aI471
aI472
aI473
aI474
aI475
aI476
aI477
aI478
aI479
aI480
aI481
aI482
aI483
aI484
aI485
aI486
aI487
aI488
aI489
aI490
aI491
aI492
aI493
aI494
aI495
aI496
aI497
aI498
aI499
aI500
aI501
aI502
aI503
aI504
aI505
aI506
aI507
aI508
aI509
aI510
aI511
aI512
aI513
aI514
aI515
aI516
aI517
aI518
aI519
aI520
aI521
aI522
aI523
aI524
aI525
aI526
aI527
aI528
aI529
aI530
aI531
aI532
aI533
aI534
aI535
aI536
aI537
aI538
aI539
aI540
aI541
aI542
aI543
aI544
aI545
aI546
aI547
aI548
aI549
aI550
aI551
aI552
aI553
aI554
aI555
aI556
aI557
aI558
aI559
aI560
aI561
aI562
aI563
aI564
aI565
aI566
aI567
aI568
aI569
aI570
aI571
aI572
aI573
aI574
aI575
aI576
aI577
aI578
aI579
aI580
aI581
aI582
aI583
aI584
aI585
aI586
aI587
aI588
aI589
aI590
aI591
aI592
aI593
aI594
aI595
aI596
aI597
aI598
aI599
asS'seed'
p4880
NsS'thisIndex'
p4881
g4834
sS'thisN'
p4882
I600
sS'thisTrialN'
p4883
I0
sS'nTotal'
p4884
I600
sS'_warnUseOfNext'
p4885
I01
sbasS'savePickle'
p4886
I01
sb.